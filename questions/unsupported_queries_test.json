[{"QuerySetId":534139,"Title":"is it possible to search my own topics?","Description":"http:\/\/meta.stackexchange.com\/questions\/167328\/is-it-possible-to-search-my-own-topics","QueryBody":"WITH  allQs as \n(\n    select coalesce(parentid,id) as postid\n    from posts p\n    where owneruserid = ##userid:int?393087##\n) \nselect id as [Post Link]\n     , owneruserid as [User Link]\n     , creationdate\n     , score\nfrom posts p\ninner join allQs q on q.postid = p.parentid \nwhere p.body like '%' + ##search:string?database## +'%'\nand p.owneruserid <> ##userid:int?393087##\nunion\nselect id as [Post Link]\n     , owneruserid as [User Link]\n     , creationdate\n     , score\nfrom posts p\ninner join allQs q on q.postid = p.id\nwhere p.body like '%' + ##search:string?database## +'%'\nand p.owneruserid <> ##userid:int?393087##","CreationDate":"2016-09-04 18:21:40","validated":true,"QueryBody_Original":null},{"QuerySetId":539033,"Title":"This query identifies all open Community-bumped posts that \n1.) were bumped within the 30 days preceding the most recent Data Explorer import; and \n2.) have been bumped more than once ever.","Description":"This query identifies all open Community-bumped posts that \n1.) were bumped within the 30 days preceding the most recent Data Explorer import; and \n2.) have been bumped more than once ever.","QueryBody":"DECLARE  @last_extract AS datetime = (SELECT MAX(CreationDate) FROM PostHistory)\n\nSELECT TOP 100\n    ph.PostId AS [Post Link]\n  , COUNT(*) AS [Count]\n  , MAX(ph.CreationDate) AS [LastBump]\n  , MAX(p.Score) AS [Score] -- MAX because we have a GROUP BY\n  , MAX(p.AnswerCount) AS [AnswerCount]\nFROM\n  Posts AS p\n  INNER JOIN PostHistory AS ph\n    ON p.Id = ph.PostId\nWHERE\n  p.ClosedDate IS NULL\n  AND ph.PostHistoryTypeId = 50\nGROUP BY\n  ph.PostId\nHAVING\n  MAX(ph.CreationDate) > DATEADD(DAY, -30, @last_extract)\n  AND COUNT(*) > 1\nORDER BY\n  [Count] DESC","CreationDate":"2016-09-14 4:00:33","validated":true,"QueryBody_Original":"DECLARE  @last_extract AS datetime = (SELECT MAX(CreationDate) FROM PostHistory)\n\nSELECT TOP 100\n    ph.PostId AS [Post Link]\n  , COUNT(*) AS [Count]\n  , MAX(ph.CreationDate) AS [LastBump]\n  , MAX(p.Score) AS [Score] -- MAX because we have a GROUP BY\n  , MAX(p.AnswerCount) AS [AnswerCount]\nFROM\n  Posts AS p\n  INNER JOIN PostHistory AS ph\n    ON p.Id = ph.PostId\nWHERE\n  p.ClosedDate IS NULL\n  AND ph.PostHistoryTypeId = 50\nGROUP BY\n  ph.PostId\nHAVING\n  MAX(ph.CreationDate) > DATEADD(DAY, -30, @last_extract)\n  AND COUNT(*) > 1\nORDER BY\n  [Count] DESC"},{"QuerySetId":539469,"Title":"Count of posts edited by some users","Description":null,"QueryBody":"SELECT  Month, [209103] as [puf], [4625829], [5637321], [5996134] as [kendi], [807126] as [doug], [2207583] as [tburner]\nFROM (\n  SELECT \n    DATEADD(MONTH, DATEDIFF(MONTH, 0, PostHistory.CreationDate), 0) AS [Month]\n    , PostHistory.UserId\n    , COUNT(*) AS Count\n  FROM Posts\n  INNER JOIN PostHistory ON PostHistory.PostId = Posts.Id\n  WHERE PostHistory.UserId IN (209103, 4625829, 5637321, 5996134, 807126, 2207583)\n  GROUP BY DATEADD(MONTH, DATEDIFF(MONTH, 0, PostHistory.CreationDate), 0), PostHistory.UserId\n) src\nPIVOT (\n  MAX(Count)\n  FOR UserId IN ([209103], [4625829], [5637321], [5996134], [807126], [2207583])\n) piv\nORDER BY [Month] DESC","CreationDate":"2020-12-08 20:39:13","validated":true,"QueryBody_Original":null},{"QuerySetId":542195,"Title":"# of users with rep > amount, active recently","Description":null,"QueryBody":"SELECT \n  SUM(IIF(DATEDIFF(DAY, u.LastAccessDate, GETDATE()) <= 7, 1, 0)) Days7,\n  SUM(IIF(DATEDIFF(DAY, u.LastAccessDate, GETDATE()) <= 14, 1, 0)) Days14,\n  SUM(IIF(DATEDIFF(DAY, u.LastAccessDate, GETDATE()) <= 30, 1, 0)) Days30,\n  SUM(IIF(DATEDIFF(DAY, u.LastAccessDate, GETDATE()) <= 90, 1, 0)) Days90,\n  SUM(IIF(DATEDIFF(DAY, u.LastAccessDate, GETDATE()) <= 180, 1, 0)) Days180,\n  COUNT(*) Total\nFROM\n  Users u\nWHERE\n  u.Reputation >= ##Reputation?500##","CreationDate":"2016-09-20 22:29:21","validated":true,"QueryBody_Original":null},{"QuerySetId":542258,"Title":"Questions for a given tag by week","Description":null,"QueryBody":"DECLARE  @Tag nvarchar(25) = '##Tag##';\n\nSELECT\n   MonthStart, COUNT(UniqueId)\nFROM \n(\n  SELECT\n    Posts.ViewCount AS UniqueId, \n   DATEFROMPARTS(YEAR(Posts.CreationDate), MONTH(Posts.CreationDate), 01) [MonthStart]  \n  FROM Tags\n    INNER JOIN PostTags ON PostTags.TagId = Tags.Id\n    INNER JOIN Posts ON Posts.Id = PostTags.PostId\n  WHERE\n    Tags.TagName = @Tag and\n    Posts.PostTypeId = 1 -- Questions\n) RelevantQuestionsByWeek\nGROUP BY MonthStart;","CreationDate":"2017-06-20 3:55:34","validated":true,"QueryBody_Original":"DECLARE  @Tag nvarchar(25) = '##Tag##';\n\nSELECT\n   MonthStart, COUNT(UniqueId)\nFROM \n(\n  SELECT\n    Posts.ViewCount AS UniqueId, \n   DATEFROMPARTS(YEAR(Posts.CreationDate), MONTH(Posts.CreationDate), 01) [MonthStart]  \n  FROM Tags\n    INNER JOIN PostTags ON PostTags.TagId = Tags.Id\n    INNER JOIN Posts ON Posts.Id = PostTags.PostId\n  WHERE\n    Tags.TagName = @Tag and\n    Posts.PostTypeId = 1 -- Questions\n) RelevantQuestionsByWeek\nGROUP BY MonthStart;"},{"QuerySetId":544953,"Title":"Average Score of my Answers","Description":null,"QueryBody":"SELECT \nAVG(CAST(Score AS Float)) AS 'AverageScore'\nFROM Posts\nWHERE PostTypeId = 2\nAND OwnerUserId = ##UserId##;","CreationDate":"2016-09-26 22:43:56","validated":true,"QueryBody_Original":"SELECT \nAVG(CAST(Score AS Float)) AS 'AverageScore'\nFROM Posts\nWHERE PostTypeId = 2\nAND OwnerUserId = ##UserId##;"},{"QuerySetId":550292,"Title":"Get a row of tag adjacency matrix with more than 10 posts","Description":null,"QueryBody":"DECLARE  @t_id int = (SELECT Id FROM Tags WHERE TagName = ##tagName:string##);\n\nwith TaggedPosts (PostId) as (\nSELECT \n  PostID \nFROM \n  PostTags pt\nWHERE \npt.tagid = @t_id)\n\nSELECT\n  TagId, count(pt.PostId) as cnt\nFROM \n  TaggedPosts tpos\n  JOIN\n  PostTags pt\n  ON pt.PostId = tpos.PostId\nWHERE\n  pt.TagId != @t_id\nGROUP BY TagId\nHAVING count(pt.PostId) > 10\nORDER BY cnt DESC","CreationDate":"2016-10-04 18:17:05","validated":true,"QueryBody_Original":"DECLARE  @t_id int = (SELECT Id FROM Tags WHERE TagName = ##tagName:string##);\n\nwith TaggedPosts (PostId) as (\nSELECT \n  PostID \nFROM \n  PostTags pt\nWHERE \npt.tagid = @t_id)\n\nSELECT\n  TagId, count(pt.PostId) as cnt\nFROM \n  TaggedPosts tpos\n  JOIN\n  PostTags pt\n  ON pt.PostId = tpos.PostId\nWHERE\n  pt.TagId != @t_id\nGROUP BY TagId\nHAVING count(pt.PostId) > 10\nORDER BY cnt DESC"},{"QuerySetId":552130,"Title":"What sort of questions are migrated away?","Description":null,"QueryBody":"select count(*) as 'Migrated away', \n       avg(Score*1.0) 'Avg score',\n       avg(AnswerCount*1.0) 'Avg answers',\n       avg(CommentCount*1.0) 'Avg comments',\n       avg(datediff(hour, p.CreationDate, ph.CreationDate)\/24.0) 'Avg age (days)'\nfrom PostHistory ph\n     join Posts p on p.Id = PostId\nwhere PostHistoryTypeId In (@PostMigratedAway)\n      and ph.CreationDate > @from","CreationDate":"2016-10-07 21:18:51","validated":true,"QueryBody_Original":null},{"QuerySetId":552386,"Title":"Where to see how long I have been a member of SO?","Description":"http:\/\/meta.stackoverflow.com\/questions\/334109\/where-to-see-how-long-i-have-been-a-member-of-so","QueryBody":"SELECT  id as [User Link]\n     , creationdate\nfrom users\nwhere id = ##userid##","CreationDate":"2016-10-08 13:56:56","validated":true,"QueryBody_Original":"SELECT  id as [User Link]\n     , creationdate\nfrom users\nwhere id = ##userid##"},{"QuerySetId":552916,"Title":"Posts, and Total Views by Date Range and DisplayName","Description":null,"QueryBody":"DECLARE  @user varchar(50);\nSELECT @user = ##user:string##;\n\n-- startDate: YYYY-MM-DD\nDECLARE @startDate DATETIME;\nSELECT @startDate = ##startDate:string##;\n\n-- endDate: YYYY-MM-DD\nDECLARE @endDate DATETIME;\nSELECT @endDate = ##endDate:string##;\n\nSELECT\n  pt.Name,\n  Posts = COUNT(*),\n  Views = SUM(COALESCE(p.ViewCount, parent.ViewCount)),\n  Start = FORMAT(@startDate, 'MMM-yyyy'),\n  Finish = FORMAT(@endDate, 'MMM-yyyy')\nFROM Posts p\nLEFT JOIN Posts parent ON p.ParentId = parent.Id\nJOIN Users u ON p.OwnerUserId = u.Id\nJOIN PostTypes pt ON p.PostTypeId = pt.Id\nWHERE u.DisplayName = @user\nAND p.CreationDate BETWEEN @startDate AND @endDate\nGROUP BY ROLLUP(pt.Name)","CreationDate":"2019-01-28 7:28:27","validated":true,"QueryBody_Original":"DECLARE  @user varchar(50);\nSELECT @user = ##user:string##;\n\n-- startDate: YYYY-MM-DD\nDECLARE @startDate DATETIME;\nSELECT @startDate = ##startDate:string##;\n\n-- endDate: YYYY-MM-DD\nDECLARE @endDate DATETIME;\nSELECT @endDate = ##endDate:string##;\n\nSELECT\n  pt.Name,\n  Posts = COUNT(*),\n  Views = SUM(COALESCE(p.ViewCount, parent.ViewCount)),\n  Start = FORMAT(@startDate, 'MMM-yyyy'),\n  Finish = FORMAT(@endDate, 'MMM-yyyy')\nFROM Posts p\nLEFT JOIN Posts parent ON p.ParentId = parent.Id\nJOIN Users u ON p.OwnerUserId = u.Id\nJOIN PostTypes pt ON p.PostTypeId = pt.Id\nWHERE u.DisplayName = @user\nAND p.CreationDate BETWEEN @startDate AND @endDate\nGROUP BY ROLLUP(pt.Name)"},{"QuerySetId":554337,"Title":"Highest number of comments on a post","Description":null,"QueryBody":"SELECT  'site:\/\/\/a\/' + CAST(p.id AS NVARCHAR) + '\/4918|' + CAST(p.id AS NVARCHAR) AS pLink, \ncount(*) AS cCount \nFROM Comments AS c \nLEFT JOIN Posts AS p ON c.PostId = p.Id \nGROUP BY p.Id\nHAVING ##limit?30## <= count(*)\nORDER BY 2 DESC;","CreationDate":"2018-12-19 6:40:17","validated":true,"QueryBody_Original":null},{"QuerySetId":580681,"Title":"Top 500 Users In A Given Tag With Rank","Description":null,"QueryBody":"DECLARE  @TagName nvarchar(25) = ##Tag:string##\n\nSELECT \n  ROW_NUMBER() OVER(ORDER BY T.UpVotes DESC) AS [Rank],\n  T.Id as [User Link],\n  T.UpVotes\n\nFROM\n(SELECT TOP 500\n    u.Id,\n    COUNT(*) AS UpVotes \nFROM Tags t with (nolock)\n    INNER JOIN PostTags pt with (nolock)ON pt.TagId = t.id\n    INNER JOIN Posts p with (nolock) ON p.ParentId = pt.PostId\n    INNER JOIN Votes v with (nolock) ON v.PostId = p.Id and v.VoteTypeId = 2\n    inner join Users u with (nolock) on u.Id = p.OwnerUserId\nWHERE \n    p.CommunityOwnedDate IS NULL\n    and t.TagName = @TagName\nGROUP BY u.Id\nORDER BY UpVotes DESC) T","CreationDate":"2016-11-19 18:25:01","validated":true,"QueryBody_Original":"DECLARE  @TagName nvarchar(25) = ##Tag:string##\n\nSELECT \n  ROW_NUMBER() OVER(ORDER BY T.UpVotes DESC) AS [Rank],\n  T.Id as [User Link],\n  T.UpVotes\n\nFROM\n(SELECT TOP 500\n    u.Id,\n    COUNT(*) AS UpVotes \nFROM Tags t with (nolock)\n    INNER JOIN PostTags pt with (nolock)ON pt.TagId = t.id\n    INNER JOIN Posts p with (nolock) ON p.ParentId = pt.PostId\n    INNER JOIN Votes v with (nolock) ON v.PostId = p.Id and v.VoteTypeId = 2\n    inner join Users u with (nolock) on u.Id = p.OwnerUserId\nWHERE \n    p.CommunityOwnedDate IS NULL\n    and t.TagName = @TagName\nGROUP BY u.Id\nORDER BY UpVotes DESC) T"},{"QuerySetId":580684,"Title":"A User Rank by Reputation","Description":null,"QueryBody":"DECLARE  @UserId int = ##UserId##\n\nSELECT \n  T2.Position,\n  T2.Id as [User Link],\n  T2.Reputation\nFROM (\nSELECT \n  ROW_NUMBER() OVER(ORDER BY Reputation DESC) AS Position,\n  Id,\n  Reputation\nFROM Users\n) T2\nWHERE\n    T2.id = @UserId","CreationDate":"2016-11-19 21:52:54","validated":true,"QueryBody_Original":"DECLARE  @UserId int = ##UserId##\n\nSELECT \n  T2.Position,\n  T2.Id as [User Link],\n  T2.Reputation\nFROM (\nSELECT \n  ROW_NUMBER() OVER(ORDER BY Reputation DESC) AS Position,\n  Id,\n  Reputation\nFROM Users\n) T2\nWHERE\n    T2.id = @UserId"},{"QuerySetId":581745,"Title":"Unpopular golfs for golfing languages","Description":null,"QueryBody":"SELECT  Id FROM Tags WHERE TagName='code-golf' -- 12\n\nSELECT TOP 10 *\nFROM (\n  SELECT\n    Id,\n    Title,\n    COUNT(Golfed) AS TotalAnswers,\n    SUM(Golfed) AS TotalGolf,\n    AVG(Golfed) AS GolfFraction\n  FROM (\n    SELECT\n      q.Id,\n      q.Title,\n      CASE WHEN (\n        ' ' + a.Body + ' ' LIKE '%[^a-z]pyth[^a-z]%'\n      ) THEN 1.0 ELSE 0.0 END AS Golfed\n    FROM Posts AS a\n    INNER JOIN Posts AS q ON (q.Id = a.ParentId)\n    INNER JOIN PostTags AS t ON (t.PostId = q.Id AND t.TagId = 12)\n  ) AS t\n  GROUP BY Id, Title\n) AS t\nWHERE TotalAnswers > 2\nORDER BY GolfFraction DESC","CreationDate":"2016-11-22 1:18:16","validated":true,"QueryBody_Original":null},{"QuerySetId":583315,"Title":"Top 100 Last Two Months Related Tags of Single Tag","Description":null,"QueryBody":"WITH  that base tag.\n\nselect TOP(100) t2.TagName as \"Related Tag\", count(t2.TagName) as \"Count\"\n\nfrom PostTags as pt1\n  INNER JOIN Tags as t1 ON pt1.TagId = t1.Id\n  INNER JOIN PostTags as pt2 ON pt1.PostId = pt2.PostId AND pt1.TagId <> pt2.TagId\n  INNER JOIN Tags as t2 ON pt2.TagId = t2.Id\n  INNER JOIN posts A on pt2.postid = A.id\nwhere t1.TagName = 'ibm-bluemix'\nand A.creationdate > getdate() - 60 -- Date filter\ngroup by t1.TagName, t2.TagName\norder by count(t2.TagName) desc","CreationDate":"2017-02-23 13:40:24","validated":true,"QueryBody_Original":null},{"QuerySetId":583703,"Title":"How many answers did users answer on the last year? You can select the minimum number of answers to be considered. It also returns the reputation of such users. It is ordered by the number of answers in descending order.","Description":"How many answers did users answer on the last year?\nYou can select the minimum number of answers to be considered.\nIt also returns the reputation of such users.\nIt is ordered by the number of answers in descending order.","QueryBody":"SELECT  OwnerUserId [User Link], \n  Reputation,\n  count(*) as [Answers last year]\nfrom Posts \njoin Users u on u.Id = OwnerUserId \nwhere PostTypeId = 2\nand Posts.CreationDate >= DATEADD(month,-12, DATEADD(month, DATEDIFF(month,0,GETDATE()), 0) )\ngroup by OwnerUserId, Reputation\nhaving count(*) >= ##MinAnswers##\norder by [Answers last year] desc","CreationDate":"2016-11-25 13:34:04","validated":true,"QueryBody_Original":"SELECT  OwnerUserId [User Link], \n  Reputation,\n  count(*) as [Answers last year]\nfrom Posts \njoin Users u on u.Id = OwnerUserId \nwhere PostTypeId = 2\nand Posts.CreationDate >= DATEADD(month,-12, DATEADD(month, DATEDIFF(month,0,GETDATE()), 0) )\ngroup by OwnerUserId, Reputation\nhaving count(*) >= ##MinAnswers##\norder by [Answers last year] desc"},{"QuerySetId":586650,"Title":"My posts which were last edited by someone else","Description":null,"QueryBody":"SELECT  Id AS [Post Link], LastEditDate, Body\n  FROM posts\n  WHERE OwnerUserId = ##UserId##\n    AND LastEditorUserId != OwnerUserId\n  ORDER BY LastEditDate DESC","CreationDate":"2016-11-30 14:24:26","validated":true,"QueryBody_Original":"SELECT  Id AS [Post Link], LastEditDate, Body\n  FROM posts\n  WHERE OwnerUserId = ##UserId##\n    AND LastEditorUserId != OwnerUserId\n  ORDER BY LastEditDate DESC"},{"QuerySetId":594367,"Title":"Users with specific numbers of questions \/ answers","Description":null,"QueryBody":"SELECT  userid as [User Link]\n      , sum(q) q\n      , sum(a) a \nfrom\n(\nSELECT owneruserid as userid\n     , count(*) q\n     , 0 a\nfrom posts\nwhere posttypeid = 1\nand owneruserid is not null\ngroup by owneruserid\nhaving count(*) > ##q##\nunion\nSELECT owneruserid\n     , 0 \n     , count(*) a\nfrom posts\nwhere posttypeid = 2\nand owneruserid is not null\ngroup by owneruserid\nhaving count(*) < ##a##\n) as data\ngroup by userid\nhaving sum(q) > ##q## and sum(a) < ##a##\norder by  sum(a) desc","CreationDate":"2016-12-10 15:16:27","validated":true,"QueryBody_Original":"SELECT  userid as [User Link]\n      , sum(q) q\n      , sum(a) a \nfrom\n(\nSELECT owneruserid as userid\n     , count(*) q\n     , 0 a\nfrom posts\nwhere posttypeid = 1\nand owneruserid is not null\ngroup by owneruserid\nhaving count(*) > ##q##\nunion\nSELECT owneruserid\n     , 0 \n     , count(*) a\nfrom posts\nwhere posttypeid = 2\nand owneruserid is not null\ngroup by owneruserid\nhaving count(*) < ##a##\n) as data\ngroup by userid\nhaving sum(q) > ##q## and sum(a) < ##a##\norder by  sum(a) desc"},{"QuerySetId":594894,"Title":"Most favorited questions for a certain tag","Description":null,"QueryBody":"SELECT  p.Id AS [Post Link], p.FavoriteCount, p.Title, p.Body\n  FROM Posts AS p\n  INNER JOIN PostTags AS pt ON p.Id = pt.PostId\n  INNER JOIN Tags AS t ON t.Id = pt.TagId\n  WHERE t.TagName = ##tagName:string##\n  ORDER BY p.FavoriteCount DESC","CreationDate":"2016-12-10 20:50:47","validated":true,"QueryBody_Original":null},{"QuerySetId":596013,"Title":"Top 10 users of Kadi, Gujarat","Description":null,"QueryBody":"Top 10 of Kadi, Gujarat","CreationDate":"2016-12-12 14:44:33","validated":true,"QueryBody_Original":null},{"QuerySetId":610212,"Title":"Questions with score above n and without accepted answer","Description":null,"QueryBody":"SELECT  top ##howmany?25## p.Id [Post Link], p.OwnerUserId as [User Link], p.Score\nfrom Posts p\nwhere p.score >= ##minscore?3##\n   and p.AcceptedAnswerId is null\n   and p.PostTypeId = 1   \n   and p.closedDate is null\norder by p.Score DESC","CreationDate":"2016-12-31 3:37:53","validated":true,"QueryBody_Original":null},{"QuerySetId":610400,"Title":"Best of Code Review 2016 - Best Newcomer (question) category","Description":null,"QueryBody":"DECLARE  @TargetYear INT = 2016;\nDECLARE @Question INT = 1;\nWITH FirstQuestions AS (\n  SELECT MIN(p.Id) AS [PostId]\n  FROM Posts AS p\n  WHERE p.PostTypeId = @Question\n  GROUP BY p.OwnerUserId\n)\nSELECT\n  fq.PostId AS [Post Link],\n  p.OwnerUserId AS [User Link],\n  p.Score,\n  p.CreationDate\nFROM \n  FirstQuestions AS fq\n  JOIN Posts AS p\n    ON fq.PostId = p.Id\nWHERE\n  DATEPART(YEAR, CreationDate) = @TargetYear\n  AND p.ClosedDate IS NULL\nGROUP BY\n  fq.PostId,\n  p.OwnerUserId,\n  p.Score,\n  p.CreationDate\nORDER BY \n  p.Score DESC,\n  p.CreationDate ASC","CreationDate":"2017-01-02 6:07:46","validated":true,"QueryBody_Original":"DECLARE  @TargetYear INT = 2016;\nDECLARE @Question INT = 1;\nWITH FirstQuestions AS (\n  SELECT MIN(p.Id) AS [PostId]\n  FROM Posts AS p\n  WHERE p.PostTypeId = @Question\n  GROUP BY p.OwnerUserId\n)\nSELECT\n  fq.PostId AS [Post Link],\n  p.OwnerUserId AS [User Link],\n  p.Score,\n  p.CreationDate\nFROM \n  FirstQuestions AS fq\n  JOIN Posts AS p\n    ON fq.PostId = p.Id\nWHERE\n  DATEPART(YEAR, CreationDate) = @TargetYear\n  AND p.ClosedDate IS NULL\nGROUP BY\n  fq.PostId,\n  p.OwnerUserId,\n  p.Score,\n  p.CreationDate\nORDER BY \n  p.Score DESC,\n  p.CreationDate ASC"},{"QuerySetId":611026,"Title":"My Comments with Score of At Least X","Description":"Gets a list of all your comments that have a score of at least a given amount.","QueryBody":"DECLARE  @UserId int = ##UserId##\nDECLARE @Score int = ##Score##\n\nSELECT ID AS [Comment Link],\n       Text,\n       Score\nFROM Comments\nWHERE UserId = @UserId\n    AND Score >= @Score\nORDER BY \n    Score DESC","CreationDate":"2017-01-03 23:35:37","validated":true,"QueryBody_Original":"DECLARE  @UserId int = ##UserId##\nDECLARE @Score int = ##Score##\n\nSELECT ID AS [Comment Link],\n       Text,\n       Score\nFROM Comments\nWHERE UserId = @UserId\n    AND Score >= @Score\nORDER BY \n    Score DESC"},{"QuerySetId":611696,"Title":"Questions with all answers having at least given score","Description":null,"QueryBody":"SELECT  question.Id as [Post Link],\n  question.Score,\n  question.AnswerCount,\n  min(answer.Score) as \"Lowest answer score\"\nFROM Posts as question, Posts as answer\nWHERE question.PostTypeId = 1\n  AND  answer.PostTypeId=2 \n  AND answer.ParentId = question.Id \nGROUP BY \n  question.Id,\n  question.Score,\n  question.AnswerCount\nHAVING min(answer.score) >= ##MinScore?10##\nORDER BY question.Score DESC","CreationDate":"2017-01-05 19:29:55","validated":true,"QueryBody_Original":null},{"QuerySetId":615851,"Title":"Negative scored questions percentage per year","Description":null,"QueryBody":"DECLARE  @year int = ##year##\n\nselect sum(case when Score < 0 then 1 else 0 end) * 100 \/ count(*) as percentage,\n       count(*) as total,\n       sum(case when Score < 0 then 1 else 0 end) as negatice_count\nfrom posts\nwhere year(creationdate) = @year\nand PostTypeId = 1","CreationDate":"2017-01-14 16:13:10","validated":true,"QueryBody_Original":"DECLARE  @year int = ##year##\n\nselect sum(case when Score < 0 then 1 else 0 end) * 100 \/ count(*) as percentage,\n       count(*) as total,\n       sum(case when Score < 0 then 1 else 0 end) as negatice_count\nfrom posts\nwhere year(creationdate) = @year\nand PostTypeId = 1"},{"QuerySetId":616003,"Title":"Top Users from Algeria all wilaya","Description":null,"QueryBody":"SELECT  TOP ##Count:int?1000##\n        ROW_NUMBER() OVER(ORDER BY Reputation DESC) AS [#],\n        Id AS [User Link],\n        Reputation,\n        -- Id AS ID,\n        -- Age,\n        Location,\n        WebsiteUrl as Wesbite,\n        LastAccessDate AS Seen,\n        -- Views,\n        -- UpVotes,\n        -- DownVotes,\n        CreationDate   \n        \nFROM Users \nWHERE \n        Reputation >= ##MinimalReputation:int?10## \n\n        AND (\n            UPPER(Location) LIKE UPPER('%algeria%')\n            )  \n             \nORDER BY Reputation DESC","CreationDate":"2018-07-31 12:20:50","validated":true,"QueryBody_Original":null},{"QuerySetId":618637,"Title":"Never Too Old To Learn (No Self-Answers)","Description":null,"QueryBody":"SELECT \n    U.Id AS [User Link],\n    P.Id As [Post Link]\n\n\nFROM Posts P\n    INNER JOIN Users U on U.Id = P.OwnerUserId\n    INNER JOIN Posts A on A.ParentId = P.Id\n    WHERE \n        P.PostTypeId = 1 AND\n        A.PostTypeId = 2 AND\n        A.OwnerUserId <> U.Id AND\n    GROUP BY\n        U.Id, P.id\n    ORDER BY\n        U.Id DESC","CreationDate":"2017-01-23 1:38:01","validated":true,"QueryBody_Original":null},{"QuerySetId":619023,"Title":"Top python answers, short time window","Description":null,"QueryBody":"SELECT  u.id as [User Link],  \n       u.WebsiteUrl,\n       t.TagName, \n       sum(score) totscore\nfrom Posts p, PostTags pt, Tags t, Users u\nWHERE PostTypeId = 2\nAND p.ParentId = pt.PostId\nAND pt.TagId = t.id\nAND p.OwnerUserId = u.id\nAND t.TagName = ##tag:string?python##\ngroup by u.id, \n         u.WebsiteUrl,\n         t.TagName\norder by totscore desc","CreationDate":"2017-01-24 1:13:21","validated":true,"QueryBody_Original":null},{"QuerySetId":621141,"Title":"Get favorites for a given Question","Description":"Grabs the favoriting information on a given question","QueryBody":"DECLARE  @questionID int = ##questionID##;\n\nSELECT * FROM Votes\nWHERE VoteTypeId = 5 \/* for favorites *\/\nAND PostId = @questionID; \/* on given question *\/","CreationDate":"2017-01-29 19:17:04","validated":true,"QueryBody_Original":"DECLARE  @questionID int = ##questionID##;\n\nSELECT * FROM Votes\nWHERE VoteTypeId = 5 \/* for favorites *\/\nAND PostId = @questionID; \/* on given question *\/"},{"QuerySetId":632041,"Title":"How many of my edits have been rolled back?","Description":"Lists all of your posts where someone else performed a rollback after your edit.\n\nThere could be some false positives here, where someone edited after you and the rollback just reverted their changes (and not yours).","QueryBody":"SELECT  DISTINCT\n  edits.PostId AS [Post Link], \n  edits.Comment AS [Edit Comment],\n  edits.CreationDate AS [Edit Date],\n  rollbacks.Comment AS [Rollback Comment],\n  rollbacks.CreationDate AS [Rollback Date]\n\nFROM PostHistory edits\n  INNER JOIN PostHistory rollbacks\n    ON edits.PostId = rollbacks.PostId\n    AND rollbacks.CreationDate > edits.CreationDate\nWHERE \n  edits.PostHistoryTypeId IN (4,5,6)\n  AND rollbacks.PostHistoryTypeId IN (7,8,9)\n  AND edits.UserId = ##UserId?117549##\n  AND rollbacks.UserId <> ##UserId?117549##","CreationDate":"2017-06-05 5:32:53","validated":true,"QueryBody_Original":null},{"QuerySetId":634701,"Title":"Number of close votes status","Description":null,"QueryBody":"DECLARE  @UserId int = ##UserId##\n\nSELECT COUNT(*) FROM Votes WHERE VoteTypeId = 6;","CreationDate":"2017-03-01 23:41:46","validated":true,"QueryBody_Original":"DECLARE  @UserId int = ##UserId##\n\nSELECT COUNT(*) FROM Votes WHERE VoteTypeId = 6;"},{"QuerySetId":639070,"Title":"Get User Info (Total answers and Accepted Answers). Returns the URL with the user's original inputted URL, the users reputation, number of answers posted, number of answers accepted.","Description":"Returns the URL with the user's original inputted URL, the users reputation, number of answers posted, number of answers accepted.  \nFor https:\/\/www.codersclan.net\/ticket\/659","QueryBody":"SELECT answer.OwnerUserId As [User Link], 'http:\/\/codegolf.stackexchange.com\/users\/' + Cast(answer.OwnerUserId as nvarchar(10)) As [Permalink], Users.Reputation, count(answer.id) AS [Total Answers], count(question.id) AS [Accepted Answers] FROM Posts answer LEFT OUTER JOIN Posts question ON question.AcceptedAnswerId = answer.id INNER JOIN Users ON answer.OwnerUserId = Users.id WHERE answer.OwnerUserId in (##UserId##) AND answer.postTypeId = 2 -- 2 means that post is an answer GROUP BY answer.OwnerUserId, Users.Reputation","CreationDate":"2017-03-18 1:00:41","validated":true,"QueryBody_Original":"SELECT answer.OwnerUserId As [User Link], 'http:\/\/codegolf.stackexchange.com\/users\/' + Cast(answer.OwnerUserId as nvarchar(10)) As [Permalink], Users.Reputation, count(answer.id) AS [Total Answers], count(question.id) AS [Accepted Answers] FROM Posts answer LEFT OUTER JOIN Posts question ON question.AcceptedAnswerId = answer.id INNER JOIN Users ON answer.OwnerUserId = Users.id WHERE answer.OwnerUserId in (##UserId##) AND answer.postTypeId = 2 -- 2 means that post is an answer GROUP BY answer.OwnerUserId, Users.Reputation"},{"QuerySetId":642206,"Title":"Top editors: own posts vs others'","Description":null,"QueryBody":"SELECT  ph.userid as [User Link],\ncount(ph.id) as allEditCount,\nsum(case ph.userid when p.owneruserid then 0 else 1 end) as otherEditCount,\nsum(case ph.userid when p.owneruserid then 1 else 0 end) as selfEditCount\nfrom\nposthistory ph\njoin posts p\non ph.postid = p.id\nwhere posthistorytypeid in (4,5,6) and\nph.creationdate > ##StartDate:string?2016-01-01##\ngroup by userid\norder by otherEditCount desc","CreationDate":"2017-03-16 19:59:07","validated":true,"QueryBody_Original":null},{"QuerySetId":650798,"Title":"windows phone post count, view count, view\/post ratio per day","Description":null,"QueryBody":"DECLARE  @TagName nvarchar (25) = 'windows-phone'\n\nSELECT TOP 365 \n   CAST(p.CreationDate AS date) AS pdate,\n   COUNT(*) AS nposts_per_day,\n   SUM(p.ViewCount) AS nviews_per_day,\n   SUM(p.ViewCount)\/COUNT(*) AS view_post_ratio\n   FROM Tags \n   JOIN PostTags AS pt ON Tags.Id = pt.TagId \n   JOIN Posts AS p ON pt.PostId = p.Id\n   WHERE Tags.TagName = @TagName\n   GROUP BY CAST(p.CreationDate AS date)\n   ORDER BY pdate DESC","CreationDate":"2017-03-31 23:48:31","validated":true,"QueryBody_Original":"DECLARE  @TagName nvarchar (25) = 'windows-phone'\n\nSELECT TOP 365 \n   CAST(p.CreationDate AS date) AS pdate,\n   COUNT(*) AS nposts_per_day,\n   SUM(p.ViewCount) AS nviews_per_day,\n   SUM(p.ViewCount)\/COUNT(*) AS view_post_ratio\n   FROM Tags \n   JOIN PostTags AS pt ON Tags.Id = pt.TagId \n   JOIN Posts AS p ON pt.PostId = p.Id\n   WHERE Tags.TagName = @TagName\n   GROUP BY CAST(p.CreationDate AS date)\n   ORDER BY pdate DESC"},{"QuerySetId":652418,"Title":"average number of accepted answers \/ number of answers where there is more than one answer","Description":null,"QueryBody":"SELECT  count(*) as total\nfrom posts q \ninner join posts a on a.parentid = q.id\nwhere q.posttypeid = 1 \nand a.posttypeid = 2\nand q.acceptedanswerid is not null\nand q.answercount > 1) > 0\nSELECT cast(cast(mine as float) \/ total  * 100 as varchar) + '%' from \n(SELECT count(*) as mine\nfrom posts q \ninner join posts a on a.parentid = q.id\nwhere q.posttypeid = 1 \nand a.posttypeid = 2\nand q.acceptedanswerid is not null\nand q.answercount > 1\nand q.acceptedanswerid = a.id) mine,\n(SELECT count(*) as total\nfrom posts q \ninner join posts a on a.parentid = q.id\nwhere q.posttypeid = 1 \nand a.posttypeid = 2\nand q.acceptedanswerid is not null\nand q.answercount > 1) total\nelse SELECT 'User has not answered any questions where there are multiple answers, one of which is accepted'","CreationDate":"2017-11-06 2:53:47","validated":true,"QueryBody_Original":null},{"QuerySetId":659516,"Title":"Average answer score by the Log2 reputation of the answerer *at the time of the posting*","Description":"This query groups the answers by the Log2 reputation of the answerer *at the time of posting the answer*.\n\nThe reputation is not exact (counts the total answer score * 10), but nearly passes the truth.\n\nThe horizontal line shows the Log2 Reputation! Thus, for example, 17 means reputation between 131072 and 262144!","QueryBody":"DECLARE  @AnswerNo INT;\nSELECT @AnswerNo = COUNT(*)\nFROM Posts\nWHERE PostTypeId = 2;\n\nWITH Raw AS (\n  SELECT\n    1.0 * Posts.Score AS Score,\n    SUM(Posts.Score) OVER (\n        PARTITION BY Users.Id\n        ORDER BY Posts.CreationDate\n        ROWS UNBOUNDED PRECEDING\n    ) AS RunningScore\n  FROM Posts, Users\n  WHERE Posts.OwnerUserId = Users.Id\n    AND Posts.PostTypeId = 2\n),\nLogGroupedRaw AS (\n  SELECT\n    CAST(LOG(RunningScore * 10)\/LOG(2) AS INT)\n      AS LogReputation,\n    Score\n  FROM Raw\n  WHERE RunningScore > 0\n)\nSELECT\n  LogReputation,\n  AVG(Score) AS AvgScore,\n  100.0 * COUNT(*) \/ (COUNT(*)\nFROM Posts\nWHERE PostTypeId = 2) AS PctAnswers\nFROM LogGroupedRaw\nGROUP BY LogReputation\nORDER BY LogReputation","CreationDate":"2017-04-17 19:30:40","validated":true,"QueryBody_Original":null},{"QuerySetId":660374,"Title":"accept rate, for positive-scoring q\/a, users with rep from elsewhere","Description":null,"QueryBody":"SELECT  \n\ncast(sum(hasAccepted) as float) \/ count(acc.id) as ratio,\ncount(acc.id) as numQuestions,\nsum(hasAccepted) as numAccepts\n\nfrom\n\n(\nSELECT\n  fq.id as id,\n  case when sum(case when a.score > 0 then 1 else 0 end) > 0 then 1 else 0 end as hasPositiveAnswer,\n  case when count(fq.accepted) > 0 then 1 else 0 end as hasAccepted\nfrom\n(\n  SELECT \n    q.id as id,\n    q.AcceptedAnswerId as accepted\n  from posts q\n  join users u\n  on q.owneruserid = u.id\n  where\n    q.posttypeid = 1 and\n    q.score > ##minQScore?1## and\n    u.reputation > q.score * 5 + 1\n\n) as fq\njoin posts a\non fq.id = a.parentid\ngroup by fq.id\n) as acc\nwhere hasPositiveAnswer > 0","CreationDate":"2017-04-19 1:24:53","validated":true,"QueryBody_Original":null},{"QuerySetId":662125,"Title":"Shows the most popular tags in percent of all questions asked in the month","Description":"Shows the most popular tags in percent of all questions asked in the month","QueryBody":"WITH  TopTags AS (\n  SELECT TOP ##TopN:INT?10## Id, TagName\n  FROM Tags\n  ORDER BY Count DESC\n),\nPostTagMonth AS (\n  SELECT\n    DATEFROMPARTS(\n      DATEPART(yyyy, CreationDate),\n      DATEPART(mm, CreationDate),\n    1) AS Month,\n    TopTags.TagName\n  FROM Posts, PostTags, TopTags\n  WHERE\n    TopTags.Id = PostTags.TagId\n    AND\n    Posts.Id = PostTags.PostId\n)\nSELECT Month, TagName, COUNT(*) AS N\nFROM PostTagMonth\nGROUP BY Month, TagName\nORDER BY Month, TagName","CreationDate":"2017-04-23 22:42:14","validated":true,"QueryBody_Original":null},{"QuerySetId":674462,"Title":"How many close votes have I cast?","Description":null,"QueryBody":"SELECT YEAR(CreationDate) FROM Votes\nWHERE VoteTypeID = 6\nAND UserID = ##UserId##","CreationDate":"2020-09-14 19:15:56","validated":true,"QueryBody_Original":"SELECT YEAR(CreationDate) FROM Votes\nWHERE VoteTypeID = 6\nAND UserID = ##UserId##"},{"QuerySetId":682614,"Title":"Upvotes as more than N% of votes","Description":null,"QueryBody":"DECLARE  @PERCENT float = ##PERCENTDOWNVOTES##\nDECLARE @MIN_VOTES int = ##MINVOTES##\n\n\nSELECT \n  id as [User Link], \n  Reputation,\n  UpVotes,\n  DownVotes,\n  (1.0*downVotes\/(1.0*UpVotes+1.0*DownVotes)) as PercentDown\n\nfrom USERS\n\nwhere \n  downVotes>0 and \n  (1.0*downVotes\/(1.0*UpVotes+1.0*DownVotes)) > @PERCENT\/100.0 and\n  (UpVotes+DownVotes) > @MIN_VOTES\n\norder by DownVotes desc","CreationDate":"2017-12-23 2:38:13","validated":true,"QueryBody_Original":"DECLARE  @PERCENT float = ##PERCENTDOWNVOTES##\nDECLARE @MIN_VOTES int = ##MINVOTES##\n\n\nSELECT \n  id as [User Link], \n  Reputation,\n  UpVotes,\n  DownVotes,\n  (1.0*downVotes\/(1.0*UpVotes+1.0*DownVotes)) as PercentDown\n\nfrom USERS\n\nwhere \n  downVotes>0 and \n  (1.0*downVotes\/(1.0*UpVotes+1.0*DownVotes)) > @PERCENT\/100.0 and\n  (UpVotes+DownVotes) > @MIN_VOTES\n\norder by DownVotes desc"},{"QuerySetId":683078,"Title":"Sandbox: # of Posts by Users Inactive for X Months","Description":null,"QueryBody":"SELECT  \n  'https:\/\/codegolf.meta.stackexchange.com\/a\/' + CAST(P.Id AS nvarchar) + '\/43214|' + CAST(P.Score as nvarchar) \nFrom Posts as P\nWhere (LastActivityDate<DATEADD(mm,-##Month##,getDate())\n  and exists(\n    SELECT * from Users as U\n    Where LastAccessDate<DATEADD(mm,-##Month##,getDate())\n      and U.Id = P.OwnerUserId\n      ))","CreationDate":"2017-06-09 22:07:11","validated":true,"QueryBody_Original":"SELECT  \n  'https:\/\/codegolf.meta.stackexchange.com\/a\/' + CAST(P.Id AS nvarchar) + '\/43214|' + CAST(P.Score as nvarchar) \nFrom Posts as P\nWhere (LastActivityDate<DATEADD(mm,-##Month##,getDate())\n  and exists(\n    SELECT * from Users as U\n    Where LastAccessDate<DATEADD(mm,-##Month##,getDate())\n      and U.Id = P.OwnerUserId\n      ))"},{"QuerySetId":685478,"Title":"All of a user's edits of other users' posts","Description":null,"QueryBody":"SELECT  \n  a.UserId AS [User Link]\n  , a.PostId as [Post Link]\n  , Comment\n  , *\nFROM \n  PostHistory a\n  INNER JOIN Posts b\n  ON a.PostId = b.id\nWHERE \n  a.PostHistoryTypeId = 5 -- Edit Body\n  AND b.CreationDate < '2014-01-01'\n  AND a.CreationDate >= '2017-01-01'\n  AND a.UserId = ##UserId##","CreationDate":"2017-06-18 13:04:48","validated":true,"QueryBody_Original":"SELECT  \n  a.UserId AS [User Link]\n  , a.PostId as [Post Link]\n  , Comment\n  , *\nFROM \n  PostHistory a\n  INNER JOIN Posts b\n  ON a.PostId = b.id\nWHERE \n  a.PostHistoryTypeId = 5 -- Edit Body\n  AND b.CreationDate < '2014-01-01'\n  AND a.CreationDate >= '2017-01-01'\n  AND a.UserId = ##UserId##"},{"QuerySetId":686675,"Title":"In Which Tags Am I top 10?","Description":null,"QueryBody":"WITH  top_answerers as (\nselect a.owneruserid\n     , t.tagname \n     , sum(a.score) [tag score]\n     , rank() over(partition by t.tagname order by sum(a.score) desc ) as pos\nfrom posts a\ninner join posts q on q.id = a.parentid\ninner join posttags pt on pt.postid = q.id\ninner join tags t on t.id = pt.tagid\nwhere a.posttypeid = 2 -- answer\nand q.posttypeid = 1 -- Question\nand a.owneruserid is not null \ngroup by a.owneruserid\n       , t.tagname\n)\n\nselect tagname\n     , pos\n     , owneruserid as [User Link]\n     , [tag score]\nfrom top_answerers\nwhere  owneruserid = ##userid?918215##\nand pos <= ##pos?10##\norder by pos desc","CreationDate":"2017-06-20 23:24:53","validated":true,"QueryBody_Original":null},{"QuerySetId":690447,"Title":"Is there a way to find out how many edits have made by user","Description":"suport query for\n\nhttps:\/\/meta.stackexchange.com\/questions\/291912\/is-there-a-way-to-find-out-how-many-edits-ive-made-network-wide","QueryBody":"DECLARE  @accountid int = ##accountid?123456##\n\nselect sum([4]) as [title]\n     , sum([5]) as [body]\n     , sum([6]) as [tag]\n     , count(*) as [revtot]\nfrom \n(\nselect revisionguid\n     , [4] \n     , [5]\n     , [6]\n from\n(select revisionguid\n      , posthistorytypeid\nfrom posthistory ph\ninner join users u on u.id = ph.userid\nwhere posthistorytypeid in (4,5,6)\nand accountid = @accountid) as data\npivot\n(\n   count(posthistorytypeid)\n   for posthistorytypeid in ([4] , [5], [6]) \n) as pvt\n) alldata","CreationDate":"2017-07-02 22:16:54","validated":true,"QueryBody_Original":"DECLARE  @accountid int = ##accountid?123456##\n\nselect sum([4]) as [title]\n     , sum([5]) as [body]\n     , sum([6]) as [tag]\n     , count(*) as [revtot]\nfrom \n(\nselect revisionguid\n     , [4] \n     , [5]\n     , [6]\n from\n(select revisionguid\n      , posthistorytypeid\nfrom posthistory ph\ninner join users u on u.id = ph.userid\nwhere posthistorytypeid in (4,5,6)\nand accountid = @accountid) as data\npivot\n(\n   count(posthistorytypeid)\n   for posthistorytypeid in ([4] , [5], [6]) \n) as pvt\n) alldata"},{"QuerySetId":698988,"Title":"Invalidated close review tasks where the question remains open","Description":null,"QueryBody":"SELECT  count(*)\nfrom reviewtasks r \ninner join Posts p on p.Id = r.PostId \nwhere r.reviewtasktypeid = 2 and \n      r.reviewtaskstateid = 3 and \n      p.ClosedDate is null and \n      r.CreationDate >= '##startdate##'\n\n-- compared to all close reviews for the same period\n\nSELECT count(*)\nfrom reviewtasks r \nwhere r.reviewtasktypeid = 2 and \n      r.CreationDate >= '##startdate##'","CreationDate":"2017-07-20 21:15:48","validated":true,"QueryBody_Original":null},{"QuerySetId":703932,"Title":"My comments with at least one upvote, in order with most recent first.","Description":"My comments with at least one upvote, in order with most recent first.","QueryBody":"SELECT  \n  postID [Post Link], Score, Text, CreationDate\nFROM \n  Comments\nWHERE \n  UserId = ##UserId##\n  AND Score > 0\nORDER BY \n  CreationDate Desc","CreationDate":"2017-08-11 16:25:43","validated":true,"QueryBody_Original":"SELECT  \n  postID [Post Link], Score, Text, CreationDate\nFROM \n  Comments\nWHERE \n  UserId = ##UserId##\n  AND Score > 0\nORDER BY \n  CreationDate Desc"},{"QuerySetId":714362,"Title":"Old answers edited by me recently","Description":null,"QueryBody":"SELECT  a.Id AS [Post Link],\n       a.LastActivityDate AS Date\nFROM Posts a\nWHERE a.PostTypeId = 2\n      AND a.CreationDate < '2014-01-01'\n      AND a.LastActivityDate > '2017-07-07'\n      AND a.LastEditorUserId = ##userId##\nORDER BY a.LastActivityDate DESC","CreationDate":"2017-08-24 23:12:15","validated":true,"QueryBody_Original":"SELECT  a.Id AS [Post Link],\n       a.LastActivityDate AS Date\nFROM Posts a\nWHERE a.PostTypeId = 2\n      AND a.CreationDate < '2014-01-01'\n      AND a.LastActivityDate > '2017-07-07'\n      AND a.LastEditorUserId = ##userId##\nORDER BY a.LastActivityDate DESC"},{"QuerySetId":718964,"Title":"Users with many answers in a single tag","Description":null,"QueryBody":"SELECT  \nMAX(t.Count) AS TagCount, \n'site:\/\/questions\/tagged\/' + MAX(t.TagName) + '|' + MAX(t.TagName) AS TagLink, \nCOALESCE('site:\/\/users\/' + CAST(p.OwnerUserId AS NVARCHAR) + '|' + u.DisplayName, p.OwnerDisplayName) AS UserLink,\nCOUNT(p.Id) AS UTQnCount\nFROM Tags AS t \nJOIN PostTags as a ON a.TagId = t.Id\nJOIN Posts AS q ON q.Id = a.PostId \nJOIN Posts AS p ON p.ParentId = q.Id \nLEFT JOIN users AS u ON u.Id = p.OwnerUserId\nWHERE p.PostTypeId = 2\nGROUP BY t.Id, p.OwnerUserId, p.OwnerdisplayName, u.DisplayName\nHAVING ##MinCount?40## <= COUNT(p.Id)\nORDER BY MAX(t.Count) DESC, t.Id DESC, COUNT(p.Id) DESC;","CreationDate":"2018-12-11 3:36:17","validated":true,"QueryBody_Original":null},{"QuerySetId":719970,"Title":"Estimated reputation on a given day","Description":"It calculates *only* the upvotes, downvotes and the accepted answers (by OPs). Doesn't count: bounties, acceptions (+2 for accepting an answer as OP), association bonus, -100 for rude\/offensive\/spam flags, +2 for edited posts, -1 for answer downvotes, and the rare cases as gained\/lost rep remains on deleted posts.","QueryBody":"SELECT \n  SUM(CASE\n    WHEN Votes.VoteTypeId = 1 THEN 15\n    WHEN Votes.VoteTypeId = 2 AND Posts.PostTypeId = 1 THEN 5\n    WHEN Votes.VoteTypeId = 2 AND Posts.PostTypeId = 2 THEN 10\n    WHEN Votes.VoteTypeId = 3 THEN -2\n    WHEN Votes.VoteTypeId = 9 AND Votes.BountyAmount IS NOT NULL\n    THEN Votes.BountyAmount\n  END) AS EstimatedReputation\nFROM Votes, Posts\nWHERE\n  Votes.VoteTypeId IN (1, 2, 3)\n  AND\n  Votes.PostId = Posts.Id\n  AND\n  Posts.OwnerUserId = ##UserId:int##\n  AND\n  Votes.CreationDate < ##BeforeDate:string##\n  AND\n  Posts.PostTypeId IN (1, 2)","CreationDate":"2017-09-10 21:29:24","validated":true,"QueryBody_Original":null},{"QuerySetId":726915,"Title":"Questions with accepted (non-self) answer","Description":null,"QueryBody":"SELECT \n  q.Title,\n  q.CreationDate,\n  q.Score,\n  q.ViewCount\nFROM Posts q\nLEFT JOIN Posts a ON a.Id = q.AcceptedAnswerId\nWHERE\n      q.OwnerUserId =  ##UserId##\n  AND a.OwnerUserId != ##UserId##\nORDER BY q.CreationDate DESC","CreationDate":"2017-09-24 15:30:07","validated":true,"QueryBody_Original":"SELECT \n  q.Title,\n  q.CreationDate,\n  q.Score,\n  q.ViewCount\nFROM Posts q\nLEFT JOIN Posts a ON a.Id = q.AcceptedAnswerId\nWHERE\n      q.OwnerUserId =  ##UserId##\n  AND a.OwnerUserId != ##UserId##\nORDER BY q.CreationDate DESC"},{"QuerySetId":738559,"Title":"How many UpVotes and DownVotes I've given?","Description":null,"QueryBody":"DECLARE  @UserId int = ##UserId##\n\nselect Id as [User Link], Reputation, UpVotes, DownVotes\nfrom Users\nwhere Id = @UserId","CreationDate":"2017-10-09 20:52:04","validated":true,"QueryBody_Original":"DECLARE  @UserId int = ##UserId##\n\nselect Id as [User Link], Reputation, UpVotes, DownVotes\nfrom Users\nwhere Id = @UserId"},{"QuerySetId":738568,"Title":"Ranking of questions by score","Description":null,"QueryBody":"SELECT  Top ##NumberOfResults## Posts.Id As [Post Link], Posts.Title, Posts.Score As Score\nfrom Posts\nOrder By Posts.Score desc","CreationDate":"2017-10-09 21:33:44","validated":true,"QueryBody_Original":null},{"QuerySetId":759913,"Title":"Top Tag users (score > 0) by Location","Description":null,"QueryBody":"DECLARE  @tag_id int = (select id from tags where tagname = LOWER('##TagName##'));\n\nselect top (##Limit##)\n  rank() over (order by sum(answers.score) desc) \"Rank\",\n  users.Location as [User Link],\n  sum(answers.score) as \"Score\"\nfrom users\njoin posts answers on (users.id = answers.owneruserid)\njoin posts parent on (answers.parentid = parent.id)\njoin posttags on (parent.id = posttags.postid)\nwhere posttags.tagid = @tag_id and answers.score > 0\n\ngroup by users.Location\norder by sum(answers.score) desc;","CreationDate":"2017-11-17 16:28:17","validated":true,"QueryBody_Original":null},{"QuerySetId":761575,"Title":"Ratio of Closed Questions to New Questions Between Dates","Description":null,"QueryBody":"SELECT \n  q.CloseQuestion,\n  q.QuestionTotal,\n  ROUND(((q.CloseQuestion * 100) \/ q.QuestionTotal), 1) as ClosePercentage\nFROM (\n  SELECT\n    SUM (\n      CASE WHEN \n        ClosedDate IS NOT NULL \n        AND PostTypeID = 1 \n        AND CreationDate BETWEEN ##fromdate:string## AND ##todate:string##\n      THEN 1 END\n    ) AS CloseQuestion,\n    SUM (\n      CASE WHEN\n        PostTypeId = 1\n        AND CreationDate BETWEEN ##fromdate:string## AND ##todate:string##\n      THEN 1 END\n    ) AS QuestionTotal\n  FROM Posts\n) q","CreationDate":"2019-01-07 6:01:34","validated":true,"QueryBody_Original":null},{"QuerySetId":764509,"Title":"You vs competitor - Face to Face","Description":null,"QueryBody":"DECLARE  @UserId int = ##UserId##;\nDECLARE @CompetitorId int = ##CompetitorId##;\n\nwith fights as (\n  select myAnswer.ParentId as Question,\n   myAnswer.Score as MyScore,\n   jonsAnswer.Score as competitorsScore\n  from Posts as myAnswer\n  inner join Posts as jonsAnswer\n   on jonsAnswer.OwnerUserId = @CompetitorId and myAnswer.ParentId = jonsAnswer.ParentId\n  where myAnswer.ownerUserId = @UserId and myAnswer.postTypeId = 2\n)\n\nselect\n  case\n   when myScore > competitorsScore then 'You win'\n   when myScore < competitorsScore then 'Sorry'\n   else 'Tie'\n  end as 'Winner',\n  Question as [Post Link],\n  myScore as 'You',\n  competitorsScore as \"Not you\"\nfrom fights;","CreationDate":"2017-11-28 22:54:29","validated":true,"QueryBody_Original":"DECLARE  @UserId int = ##UserId##;\nDECLARE @CompetitorId int = ##CompetitorId##;\n\nwith fights as (\n  select myAnswer.ParentId as Question,\n   myAnswer.Score as MyScore,\n   jonsAnswer.Score as competitorsScore\n  from Posts as myAnswer\n  inner join Posts as jonsAnswer\n   on jonsAnswer.OwnerUserId = @CompetitorId and myAnswer.ParentId = jonsAnswer.ParentId\n  where myAnswer.ownerUserId = @UserId and myAnswer.postTypeId = 2\n)\n\nselect\n  case\n   when myScore > competitorsScore then 'You win'\n   when myScore < competitorsScore then 'Sorry'\n   else 'Tie'\n  end as 'Winner',\n  Question as [Post Link],\n  myScore as 'You',\n  competitorsScore as \"Not you\"\nfrom fights;"},{"QuerySetId":768548,"Title":"Most accepting users, at least N acceptances","Description":null,"QueryBody":"SELECT  p.OwnerUserId as [User Link], count(p.Id) as Acceptances\nfrom Posts p\nwhere p.AcceptedAnswerId is not null\ngroup by p.OwnerUserId\nhaving count(p.Id) >= ##acceptances##\norder by count(p.Id) desc","CreationDate":"2017-12-08 7:11:21","validated":true,"QueryBody_Original":"SELECT  p.OwnerUserId as [User Link], count(p.Id) as Acceptances\nfrom Posts p\nwhere p.AcceptedAnswerId is not null\ngroup by p.OwnerUserId\nhaving count(p.Id) >= ##acceptances##\norder by count(p.Id) desc"},{"QuerySetId":770705,"Title":"Questions I have answered where asker has accepted another answer","Description":"Lists all questions I have proposed an answer to, and, sadly, the original asker accepted a different answer.\n","QueryBody":"SELECT  p.Id AS [Post Link], a.Score, a.CreationDate\nFROM Posts a, Posts p\nWHERE a.OwnerUserId = ##UserId##\nAND a.PostTypeId = 2\n\nAND p.Id = a.ParentId\nAND p.AcceptedAnswerId <> a.Id\nORDER BY a.Score, a.CreationDate ASC","CreationDate":"2017-12-18 5:17:57","validated":true,"QueryBody_Original":"SELECT  p.Id AS [Post Link], a.Score, a.CreationDate\nFROM Posts a, Posts p\nWHERE a.OwnerUserId = ##UserId##\nAND a.PostTypeId = 2\n\nAND p.Id = a.ParentId\nAND p.AcceptedAnswerId <> a.Id\nORDER BY a.Score, a.CreationDate ASC"},{"QuerySetId":776347,"Title":"Max reputation of the same age as me","Description":null,"QueryBody":"DECLARE  @UserID int = ##UserID##\n\nSELECT\n    Reputation,\n    Id AS [User ID],\n    DisplayName AS Name\nFROM Users \nWHERE Age = (SELECT Age FROM Users WHERE Id = @UserID)\nORDER BY Reputation DESC","CreationDate":"2017-12-31 17:17:44","validated":true,"QueryBody_Original":"DECLARE  @UserID int = ##UserID##\n\nSELECT\n    Reputation,\n    Id AS [User ID],\n    DisplayName AS Name\nFROM Users \nWHERE Age = (SELECT Age FROM Users WHERE Id = @UserID)\nORDER BY Reputation DESC"},{"QuerySetId":776987,"Title":"You are in the top N% in your positively scored tags","Description":null,"QueryBody":"WITH  UserTagScore AS (\n  SELECT\n    A.OwnerUserId AS UserId,\n    PostTags.TagId,\n    SUM(A.Score) AS Score\n  FROM\n    Posts Q,\n    Posts A,\n    PostTags\n  WHERE\n    A.ParentId = Q.Id\n    AND\n    Q.Id = PostTags.PostId\n  GROUP BY\n    A.OwnerUserId,\n    PostTags.TagId\n  HAVING SUM(A.Score) > 0\n),\nUserNo AS (\n  SELECT COUNT(*) AS UserNo FROM Users\n),\nUserTagRank AS (\n  SELECT\n    UserId,\n    TagId,\n    Tags.TagName,\n    Score,\n    DENSE_RANK() OVER (PARTITION BY TagId ORDER BY Score DESC) AS TagRank,\n    COUNT(*) OVER (PARTITION BY TagId) AS UserNumWITHTag\n  FROM UserTagScore, Tags\n  WHERE UserTagScore.TagId = Tags.Id\n)\nSELECT\n  *,\n  100.0 * TagRank \/ UserNumWITHTag AS TopPct\nFROM UserTagRank\nWHERE UserId = ##AccountId:int##","CreationDate":"2018-01-03 5:36:14","validated":true,"QueryBody_Original":null},{"QuerySetId":785622,"Title":"Top 20 by Tag Master","Description":null,"QueryBody":"SELECT  top 20 \n\nq.id,  \n--q.id as [Post Link], \nq.title as \"Title\",\nu.id as \"Asker\", \nu.id as [User Link], \nau.id as \"Answerer\", \nau.id as [User Link],\nq.creationdate as \"When Asked\", \na.creationdate as \"When Answered\",\nq.lastactivitydate as \"Last Active\",\nq.viewcount as \"Views\", \nq.answercount as \"Total Answers\", \nq.commentcount as \"Q Comments\",\na.commentcount as \"A Comments\",\nq.score as \"Q Score\",\na.score as \"A Score\",\nq.tags as \"Tags\" \n \nfrom Posts q\n\njoin Posts a on q.acceptedanswerid = a.id\njoin Users u ON q.OwnerUserId = u.Id\njoin Users au ON a.OwnerUserId = au.Id\n\nwhere q.posttypeid =1 \nand q.acceptedanswerid is not null\nand q.tags like '%<' + ##tagname:string## + '>%'\nand q.ClosedDate is NULL\nand q.CommunityOwnedDate is null\norder by q.score desc","CreationDate":"2018-07-10 12:58:53","validated":true,"QueryBody_Original":null},{"QuerySetId":795271,"Title":"My Top 100 highest-voted comments","Description":null,"QueryBody":"SELECT  TOP 100 p.Id as [Post Link], c.Id as \"Comment ID\", c.id as [Comment Link], c.Score, c.UserDisplayName, c.UserId\n\nFROM Comments c\n\nINNER JOIN Posts p\n ON c.PostId = p.Id\n \nWHERE c.UserId = ##UserId## \n \nORDER BY Score DESC","CreationDate":"2019-12-15 8:40:01","validated":true,"QueryBody_Original":"SELECT  TOP 100 p.Id as [Post Link], c.Id as \"Comment ID\", c.id as [Comment Link], c.Score, c.UserDisplayName, c.UserId\n\nFROM Comments c\n\nINNER JOIN Posts p\n ON c.PostId = p.Id\n \nWHERE c.UserId = ##UserId## \n \nORDER BY Score DESC"},{"QuerySetId":805394,"Title":"Closed questions with answers by high-reputation users","Description":null,"QueryBody":"SELECT \n  questions.Id AS [Post Link],\n  users.Id AS [User Link],\n  questions.CreationDate,\n  questions.ClosedDate\nFROM Posts answers\nJOIN Posts questions ON answers.ParentId = questions.Id\nJOIN Users users ON users.Id = answers.OwnerUserId\nWHERE questions.ClosedDate IS NOT NULL\n  AND users.Reputation >= ##reputationThreshold?3000##\nORDER BY questions.ClosedDate DESC","CreationDate":"2018-02-15 18:03:41","validated":true,"QueryBody_Original":null},{"QuerySetId":809977,"Title":"*Fixed* How many upvotes do I have towards tag-specialist badges?","Description":"copy of \"How many upvotes do I have towards tag-specialist badges?\", but this query also shows how many answers you posted for each tag. (20 needed for bronze badge, 80for silver, 200 for gold)","QueryBody":"DECLARE  @UserId int = ##UserId##\n\nSELECT TOP 20 \n    TagName,\n    COUNT(*) AS UpVotes,\n    COUNT(DISTINCT Posts.Id) AS Answers\nFROM Tags\n    INNER JOIN PostTags ON PostTags.TagId = Tags.id\n    INNER JOIN Posts ON Posts.ParentId = PostTags.PostId\n    INNER JOIN Votes ON Votes.PostId = Posts.Id and VoteTypeId = 2\nWHERE \n    Posts.OwnerUserId = @UserId\n    AND Posts.CommunityOwnedDate IS NULL\nGROUP BY TagName \nORDER BY UpVotes DESC","CreationDate":"2018-02-23 18:40:29","validated":true,"QueryBody_Original":"DECLARE  @UserId int = ##UserId##\n\nSELECT TOP 20 \n    TagName,\n    COUNT(*) AS UpVotes,\n    COUNT(DISTINCT Posts.Id) AS Answers\nFROM Tags\n    INNER JOIN PostTags ON PostTags.TagId = Tags.id\n    INNER JOIN Posts ON Posts.ParentId = PostTags.PostId\n    INNER JOIN Votes ON Votes.PostId = Posts.Id and VoteTypeId = 2\nWHERE \n    Posts.OwnerUserId = @UserId\n    AND Posts.CommunityOwnedDate IS NULL\nGROUP BY TagName \nORDER BY UpVotes DESC"},{"QuerySetId":810459,"Title":"Users above given number of upvotes","Description":null,"QueryBody":"SELECT \n  Id AS [User Link], Reputation, CreationDate, DisplayName, LastAccessDate, Upvotes, Downvotes\nFROM Users   \nWHERE Upvotes > ##votes##\nORDER BY Id","CreationDate":"2018-02-25 13:18:17","validated":true,"QueryBody_Original":"SELECT \n  Id AS [User Link], Reputation, CreationDate, DisplayName, LastAccessDate, Upvotes, Downvotes\nFROM Users   \nWHERE Upvotes > ##votes##\nORDER BY Id"},{"QuerySetId":817856,"Title":"Rank users by what fraction of their answers are accepted","Description":null,"QueryBody":"DECLARE  @MinAnswers int = ##MinAnswers##\n\nSELECT\n    TOP 100\n    Users.Id AS [User Link],\n    Count(*) as \"Answers\",\n    Cast(Count(CASE WHEN q.AcceptedAnswerId = a.Id THEN 1 END) as Float) \/ Count(*) AS \"Fraction\"\nFROM Posts a\n    INNER JOIN Posts q\n        ON a.ParentId = q.Id\n    INNER JOIN Users\n        ON a.OwnerUserId = Users.Id\nGROUP BY Users.Id\nHAVING COUNT(*) >= @MinAnswers\nORDER BY \"Fraction\" DESC","CreationDate":"2020-05-09 2:38:41","validated":true,"QueryBody_Original":"DECLARE  @MinAnswers int = ##MinAnswers##\n\nSELECT\n    TOP 100\n    Users.Id AS [User Link],\n    Count(*) as \"Answers\",\n    Cast(Count(CASE WHEN q.AcceptedAnswerId = a.Id THEN 1 END) as Float) \/ Count(*) AS \"Fraction\"\nFROM Posts a\n    INNER JOIN Posts q\n        ON a.ParentId = q.Id\n    INNER JOIN Users\n        ON a.OwnerUserId = Users.Id\nGROUP BY Users.Id\nHAVING COUNT(*) >= @MinAnswers\nORDER BY \"Fraction\" DESC"},{"QuerySetId":822859,"Title":"Latests answers by top users with minimum reputation and minimum posts","Description":null,"QueryBody":"SELECT  * FROM \n(\nSELECT OwnerUserId AS [User Link], Id AS [Post Link], CreationDate,\n  RANK() OVER (Partition BY OwnerUserId\n         ORDER BY CreationDate DESC) AS Rank\nFROM Posts\nWHERE PostTypeId = 2\n  AND OwnerUserId IN (\n  \nSELECT TOP ##UserCount##\n  Users.Id\nFROM \n  Posts\n  INNER JOIN\n   Users ON Users.Id = OwnerUserId\nWHERE Users.Reputation > ##MinReputation## AND PostTypeId = 2\nGROUP BY Users.Id, Users.Reputation\nHAVING Count(Posts.Id) > ##MinPostsCount##\nORDER BY \n  Users.Reputation DESC \n  \n  )\n  ) AS _ WHERE Rank <= 5","CreationDate":"2018-03-16 12:27:16","validated":true,"QueryBody_Original":null},{"QuerySetId":828990,"Title":"Total Accepted Answers for a user By Month and Year","Description":null,"QueryBody":"DECLARE @UserId int = ##UserId## SELECT Month(a.CreationDate) AS[Month], Year(a.CreationDate) AS[Year], COUNT(*) AS [Number of Answers] FROM Posts a join posts as q on a.parentid = q.id INNER JOIN Users ON Users.Id = a.OwnerUserId WHERE (a.OwnerUserId = @UserId and a.posttypeid = 2 and q.acceptedanswerid = a.id) GROUP BY Month(a.CreationDate), Year(a.CreationDate) ORDER BY Year(a.CreationDate) DESC, Month(a.CreationDate) DESC","CreationDate":"2018-03-22 21:38:10","validated":true,"QueryBody_Original":"DECLARE @UserId int = ##UserId## SELECT Month(a.CreationDate) AS[Month], Year(a.CreationDate) AS[Year], COUNT(*) AS [Number of Answers] FROM Posts a join posts as q on a.parentid = q.id INNER JOIN Users ON Users.Id = a.OwnerUserId WHERE (a.OwnerUserId = @UserId and a.posttypeid = 2 and q.acceptedanswerid = a.id) GROUP BY Month(a.CreationDate), Year(a.CreationDate) ORDER BY Year(a.CreationDate) DESC, Month(a.CreationDate) DESC"},{"QuerySetId":838858,"Title":"Get body and score of questions in specified date interval","Description":null,"QueryBody":"SELECT  body, score, CreationDate\nfrom Posts\nwhere\nPostTypeId = 1\nand CreationDate between ##Startdate:string## and ##Enddate:string##","CreationDate":"2018-06-22 5:36:25","validated":true,"QueryBody_Original":null},{"QuerySetId":840905,"Title":"Most prolific answerers during date interval, mean answer score","Description":null,"QueryBody":"DECLARE  @EndDate datetime = (select case\n  -- If we request 'today', actually use the date\n  -- of the most recent transfer to this database,\n  -- which may be as much as a week in the past.\n  when ##EndDate:string?today## = 'today' then max(CreationDate)\n  -- Otherwise, specify the most recent date to include.\n  else ##EndDate##\n  end\n  from Posts\n);\n  \nDECLARE @StartDate datetime = dateadd(day, -1*##DaysBack?30##, @EndDate);\n\nSELECT top ##HowManyUsers?50##\nOwnerUserId as [User Link],\nCOUNT(*) as Answers,\nRound(1.0 * count(*) \/ ##DaysBack##, 1) as 'Answers per day',\nRound(1.0 * sum(Score) \/ Count(*), 2) as 'Mean Answer Score'\nFROM Posts\nWHERE CreationDate between @StartDate and @EndDate\n  AND PostTypeId = 2 -- 1 for questions, 2 for answers\nGROUP BY OwnerUserId\nORDER BY Answers DESC","CreationDate":"2018-06-29 4:32:54","validated":true,"QueryBody_Original":null},{"QuerySetId":842966,"Title":"questions closed in last 10 days: who votes, why, and what was their rep?","Description":null,"QueryBody":"SELECT  \n  ph.postid as [Post Link],\n  q.creationdate,\n  q.closeddate,\n  format(cast(datediff(s,q.creationdate,q.closeddate) as decimal)\/60,'0.0') as MinsToClose,\n  crt.name as [Close Reason],\n  cv.userid as [User Link],\n  u.reputation as [UserReputation]\n  \nfrom \n  posts q\n  inner join posthistory ph on q.id = ph.postid\n  inner join closereasontypes crt on crt.id = comment\n  cross apply OPENJSON(JSON_QUERY(ph.text, '$.Voters')) \n       with (userid int '$.Id') cv\n  join users u on u.id = cv.userid\n  \nwhere\n  posthistorytypeid = 10 --closed\n  and q.closeddate is not null --closed\n  and q.creationdate >= dateadd(d,-10,getdate())  --temp:past 10 days\n  and q.posttypeid = 1\n  and q.score <= 0\n  and q.answercount = 0\n\norder by \n  ph.postid","CreationDate":"2018-04-21 5:40:27","validated":true,"QueryBody_Original":null},{"QuerySetId":843672,"Title":"Total posted and accepted answers by month and year","Description":null,"QueryBody":"DECLARE  @UserId int = ##UserId##\n\nSELECT --TOP 20 \nYear(a.CreationDate) AS[Year],\nMONTH(a.CreationDate) AS [Month],\n    COUNT(*) AS [Number of Answers] ,\n(SELECT\n    COUNT(*) AS [Number of Answers] \nFROM Posts aa\njoin posts as qq on aa.parentid = qq.id\nINNER JOIN\n    Users ON Users.Id = aa.OwnerUserId\nWHERE \n    (aa.posttypeid = 2\n    and qq.acceptedanswerid = aa.id)\n    and MONTH(aa.CreationDate) = MONTH(a.CreationDate)\n    AND Year(aa.CreationDate) = Year(a.CreationDate) \n    ) AS [Number of Accepted Answers]\nFROM Posts a\nINNER JOIN\n    Users ON Users.Id = a.OwnerUserId\n    GROUP BY MONTH(a.CreationDate) ,Year(a.CreationDate) \n   \n   ORDER BY Year(a.CreationDate), Month(a.CreationDate) DESC","CreationDate":"2019-01-09 13:15:04","validated":true,"QueryBody_Original":"DECLARE  @UserId int = ##UserId##\n\nSELECT --TOP 20 \nYear(a.CreationDate) AS[Year],\nMONTH(a.CreationDate) AS [Month],\n    COUNT(*) AS [Number of Answers] ,\n(SELECT\n    COUNT(*) AS [Number of Answers] \nFROM Posts aa\njoin posts as qq on aa.parentid = qq.id\nINNER JOIN\n    Users ON Users.Id = aa.OwnerUserId\nWHERE \n    (aa.posttypeid = 2\n    and qq.acceptedanswerid = aa.id)\n    and MONTH(aa.CreationDate) = MONTH(a.CreationDate)\n    AND Year(aa.CreationDate) = Year(a.CreationDate) \n    ) AS [Number of Accepted Answers]\nFROM Posts a\nINNER JOIN\n    Users ON Users.Id = a.OwnerUserId\n    GROUP BY MONTH(a.CreationDate) ,Year(a.CreationDate) \n   \n   ORDER BY Year(a.CreationDate), Month(a.CreationDate) DESC"},{"QuerySetId":851077,"Title":"Badges, with award times, for a given user","Description":null,"QueryBody":"SELECT       u.Id     AS [User Link]\n            , CASE\n                WHEN b.Tagbased = 1 THEN 'Tag: [' + b.Name + ']'\n                ELSE b.Name\n            END    AS [Badge name]\n            , CASE\n                WHEN b.Class = 1 THEN 'Gold'\n                WHEN b.Class = 2 THEN 'Silver'\n                WHEN b.Class = 3 THEN 'Bronze'\n                ELSE '*Unkown*'\n            END    AS [Class]\n            , b.Date AS [Awarded]\nFROM        Badges b\nLEFT JOIN   Users u  ON u.Id = b.Userid\nWHERE       b.Userid = ##UserId:int##\nORDER  BY   u.Displayname\n            , [Awarded] DESC","CreationDate":"2018-05-13 0:25:54","validated":true,"QueryBody_Original":null},{"QuerySetId":855744,"Title":"Get questions and answers by user ids","Description":null,"QueryBody":"DECLARE  @AnswerUserID int = ##MyUserId##,\n        @QuestionUserId int = ##AskerUserId##\n\nSELECT Q.ID as [Post Link], \n       Q.Score As [Question Score], \n       A.Score As [Answer Score],\n       CASE WHEN Q.AcceptedAnswerId = A.Id THEN 'Yes' ELSE 'No' END As [Accepted]\nFROM Posts as A\nJOIN Posts as Q ON A.ParentId = Q.Id\nWHERE A.OwnerUserId = @AnswerUserID \nAND Q.OwnerUserId = @QuestionUserId","CreationDate":"2018-05-24 22:51:12","validated":true,"QueryBody_Original":"DECLARE  @AnswerUserID int = ##MyUserId##,\n        @QuestionUserId int = ##AskerUserId##\n\nSELECT Q.ID as [Post Link], \n       Q.Score As [Question Score], \n       A.Score As [Answer Score],\n       CASE WHEN Q.AcceptedAnswerId = A.Id THEN 'Yes' ELSE 'No' END As [Accepted]\nFROM Posts as A\nJOIN Posts as Q ON A.ParentId = Q.Id\nWHERE A.OwnerUserId = @AnswerUserID \nAND Q.OwnerUserId = @QuestionUserId"},{"QuerySetId":855984,"Title":"Search usernames and about me by any keyword","Description":null,"QueryBody":"SELECT  top ##NumberOfPosts## u.Id as [User Link], u.DisplayName, u.AboutMe\nfrom Users u\nwhere  u.DisplayName like '%##keyword1##%'\nor u.AboutMe like '%##keyword1##%'\norder by u.CreationDate desc","CreationDate":"2018-05-25 16:41:19","validated":true,"QueryBody_Original":null},{"QuerySetId":856724,"Title":"Users with the highest rep to total posts ratio (within a specific tag)","Description":null,"QueryBody":"SELECT  TOP 50\n   u.Id,\n   u.DisplayName,\n   u.Reputation,\n   n.NumPosts as [Total Number of Posts],\n   cast(u.Reputation as decimal)\/n.NumPosts as Ratio\nFROM Users u\ninner join (\n   SELECT\n      p.OwnerUserId,\n      count(*) as NumPosts\n   from Posts p\n   inner join PostTags pt on pt.PostId = p.Id\n   inner join Tags t on t.Id = pt.TagId\n   where p.PostTypeId in (1,2)\n   group by p.OwnerUserId\n   having count(*) >= ##MinPosts?10##\n   ) n on n.OwnerUserId = u.Id\n   where u.Reputation > ##MinRep?1##\nORDER BY Ratio ASC","CreationDate":"2018-05-28 15:45:12","validated":true,"QueryBody_Original":null},{"QuerySetId":856896,"Title":"VBA Answer'ers, last 2 weeks","Description":null,"QueryBody":"SELECT  \n  a.owneruserid as [UserID],\n  count(*) as [#VBAanswers]\ninto #VBAanswerers\nfrom posts q join posts a\non q.id = a.parentid\nwhere \n  a.posttypeid = 2\n  and q.tags like '%vba%'\n  and a.owneruserid is not null\n  and a.creationdate >= dateadd(d,-14,(SELECT max(creationdate) from posts))\ngroup by a.owneruserid\n------------------------------\nSELECT \n  userid, userid as [User Link], \n  sum(views) as [#ProfileViews], \n  sum(upvotes) as [#Upvotes], \n  sum(downvotes) as [#DownVotes]\ninto #temp\nfrom users u join #VBAanswerers vbau\non u.id = vbau.UserID\ngroup by userid\norder by sum(views) desc\n---------------------------\nSELECT\n  rank() over ( order by [#ProfileViews] desc) Rank,\n  * \nfrom #temp","CreationDate":"2018-05-29 11:56:09","validated":true,"QueryBody_Original":null},{"QuerySetId":857792,"Title":"Find tag info by text.  This search is case insensitive.","Description":"Find tag info by text.  This search is case insensitive.","QueryBody":"DECLARE  @text nvarchar(600) = ##text:string?%##\n\nselect\n  t.tagName,\n  t.count,\n  p.Id as [Wiki Post Id],\n  'https:\/\/stackoverflow.com\/tags\/'+t.tagName+'\/info' as [Link to tag info]\nfrom Tags t\njoin Posts p on p.Id = t.wikiPostId\nAND lower(p.Body) LIKE '%' + lower(@text) + '%'\n-- WikiText: Text to be searched \"You can enter anything\"\norder by t.count desc","CreationDate":"2018-06-11 11:42:15","validated":true,"QueryBody_Original":"DECLARE  @text nvarchar(600) = ##text:string?%##\n\nselect\n  t.tagName,\n  t.count,\n  p.Id as [Wiki Post Id],\n  'https:\/\/stackoverflow.com\/tags\/'+t.tagName+'\/info' as [Link to tag info]\nfrom Tags t\njoin Posts p on p.Id = t.wikiPostId\nAND lower(p.Body) LIKE '%' + lower(@text) + '%'\n-- WikiText: Text to be searched \"You can enter anything\"\norder by t.count desc"},{"QuerySetId":862485,"Title":"Answers on open questions that have NO Accepted Answer, where this is the only answer, and it has a positive score","Description":"Answers on open questions that have NO Accepted Answer, where this is the only answer, and it has a positive score","QueryBody":"SELECT  \n  q.id as [Post Link],\n  q.owneruserid as [User Link],\n  q.creationdate as [Question Date],\n  q.score as [Q. Score],\n  q.answercount as [# of Answers],\n  a.creationdate as[Answer Date],\n  a.score as [A. Score]\n\nfrom \n  posts a join posts q\n  on a.parentid = q.id\n\nwhere\n  a.owneruserid = ##UserID##\n  and a.posttypeid=2\n  and q.acceptedanswerid is null\n  and q.closeddate is null\n  and q.deletiondate is null\n  and a.score > 0              --Answer has a positive score\n  and q.answercount = 1        --this is the only answer on the question\n  \norder by\n  a.score desc,\n  a.creationdate desc","CreationDate":"2018-06-17 15:15:51","validated":true,"QueryBody_Original":"SELECT  \n  q.id as [Post Link],\n  q.owneruserid as [User Link],\n  q.creationdate as [Question Date],\n  q.score as [Q. Score],\n  q.answercount as [# of Answers],\n  a.creationdate as[Answer Date],\n  a.score as [A. Score]\n\nfrom \n  posts a join posts q\n  on a.parentid = q.id\n\nwhere\n  a.owneruserid = ##UserID##\n  and a.posttypeid=2\n  and q.acceptedanswerid is null\n  and q.closeddate is null\n  and q.deletiondate is null\n  and a.score > 0              --Answer has a positive score\n  and q.answercount = 1        --this is the only answer on the question\n  \norder by\n  a.score desc,\n  a.creationdate desc"},{"QuerySetId":863479,"Title":"Users who favorited a post","Description":null,"QueryBody":"SELECT  U.Id as [User Link]\nfrom Votes V\ninner join Posts P on P.Id = V.PostId\ninner join Users U on U.Id = V.UserId\nwhere P.Id = ##PostId##\n  and V.VoteTypeId = 5","CreationDate":"2018-06-16 18:04:14","validated":true,"QueryBody_Original":"SELECT  U.Id as [User Link]\nfrom Votes V\ninner join Posts P on P.Id = V.PostId\ninner join Users U on U.Id = V.UserId\nwhere P.Id = ##PostId##\n  and V.VoteTypeId = 5"},{"QuerySetId":865478,"Title":"Top Contributors in India for Angular","Description":null,"QueryBody":"Top Contributors in India for PHP","CreationDate":"2020-07-30 9:17:05","validated":true,"QueryBody_Original":null},{"QuerySetId":868495,"Title":"histogram of answer scores for a given user, date-limited","Description":"Returns the distribution of scores on answers by a user during a given date interval.\nNot quite a histogram because the zeros don't get drawn.","QueryBody":"DECLARE  @EndDate datetime = (select case\n  -- If we request 'today', actually use the date\n  -- of the most recent transfer to this database,\n  -- which may be as much as a week in the past.\n  when lower(##EndDate:string?today##) = 'today' then max(CreationDate)\n  -- Otherwise, specify the most recent date to include.\n  else ##EndDate##\n  end\n  from Posts\n);\n  \nDECLARE @StartDate datetime = dateadd(day, -1*##DaysBack?30##, @EndDate);\n\nSELECT\nanswers.Score as Score,\n--COUNT(answers.Id) AS 'Answers with Score'\nanswers.Id [Post Link]\nFROM Posts questions \nINNER JOIN Posts answers ON answers.ParentId = Questions.Id\nWHERE answers.OwnerUserId = ##userId##\n  AND questions.CommunityOwnedDate IS NULL\n  AND answers.CreationDate between @StartDate and @EndDate","CreationDate":"2020-04-29 5:18:31","validated":true,"QueryBody_Original":"DECLARE  @EndDate datetime = (select case\n  -- If we request 'today', actually use the date\n  -- of the most recent transfer to this database,\n  -- which may be as much as a week in the past.\n  when lower(##EndDate:string?today##) = 'today' then max(CreationDate)\n  -- Otherwise, specify the most recent date to include.\n  else ##EndDate##\n  end\n  from Posts\n);\n  \nDECLARE @StartDate datetime = dateadd(day, -1*##DaysBack?30##, @EndDate);\n\nSELECT\nanswers.Score as Score,\n--COUNT(answers.Id) AS 'Answers with Score'\nanswers.Id [Post Link]\nFROM Posts questions \nINNER JOIN Posts answers ON answers.ParentId = Questions.Id\nWHERE answers.OwnerUserId = ##userId##\n  AND questions.CommunityOwnedDate IS NULL\n  AND answers.CreationDate between @StartDate and @EndDate"},{"QuerySetId":870354,"Title":"Which questions have the best character-to-score?","Description":"Which questions have the best character-to-score?","QueryBody":"SELECT \n  id,\n  owneruserid,  \n  score as Score, \n  len(body) as LenBody,\n  cast(len(body) as decimal)\/score as [Chars per Point],\n  cast(score as decimal)\/len(body) as [Points per Char]\ninto #temp from posts\nwhere score > 100\n\nSELECT \n  rank() over (order by [Points per Char] desc) as Rank,\n  t.id, --as [Post Link], \n  displayname,\n  owneruserid, -- as [User Link],\n  reputation,\n  format(cast(score as decimal)\/reputation, '0.00%') as [PercentOfUserTotalRep],\n  format([Chars per Point],'0.000') as [Chars\/Point],\n  format([Points per Char],'0') as [Points\/Char]\nfrom #temp t join users u\n  on u.id = t.owneruserid\norder by [Points per Char] desc","CreationDate":"2018-07-04 21:42:21","validated":true,"QueryBody_Original":null},{"QuerySetId":878141,"Title":"A's from Q's tagged excel-vba but missing excel or vba tags","Description":null,"QueryBody":"SELECT \n  q.id as [Post Link],\n  a.id as aID,\n  q.creationdate,\n  q.lastactivitydate,\n  q.score as qScore,\n  a.score as aScore,\n  q.viewcount as Views,\n  q.tags\n  \nfrom\n  posts q join posts a on q.id = a.parentid\n  \nwhere\n  q.tags like '%<excel-vba>%'     --<vba> only = 2484 <vba> only plus 'Excel' in body = 245\n  and \n    ( --upper(q.body) like '%EXCEL%'\n      --or upper(q.body) like '%VBA%'\n      ----or upper(q.title) like '%VBA%'\n      --or upper(q.title) like '%EXCEL%'\n      --or\n      not q.tags like '%<excel>%'\n      or not q.tags like '%vba>%'\n    )\n  and q.closeddate is null\n  and q.posttypeid=1\n  and a.posttypeid=2\n  and a.owneruserid=##UserID##\n \norder by \n  a.score desc, a.creationdate desc","CreationDate":"2018-07-23 17:34:59","validated":true,"QueryBody_Original":"SELECT \n  q.id as [Post Link],\n  a.id as aID,\n  q.creationdate,\n  q.lastactivitydate,\n  q.score as qScore,\n  a.score as aScore,\n  q.viewcount as Views,\n  q.tags\n  \nfrom\n  posts q join posts a on q.id = a.parentid\n  \nwhere\n  q.tags like '%<excel-vba>%'     --<vba> only = 2484 <vba> only plus 'Excel' in body = 245\n  and \n    ( --upper(q.body) like '%EXCEL%'\n      --or upper(q.body) like '%VBA%'\n      ----or upper(q.title) like '%VBA%'\n      --or upper(q.title) like '%EXCEL%'\n      --or\n      not q.tags like '%<excel>%'\n      or not q.tags like '%vba>%'\n    )\n  and q.closeddate is null\n  and q.posttypeid=1\n  and a.posttypeid=2\n  and a.owneruserid=##UserID##\n \norder by \n  a.score desc, a.creationdate desc"},{"QuerySetId":880418,"Title":"... my posts that have links to other posts","Description":null,"QueryBody":"SELECT \n  id as [Post Link],\n  creationdate\nfrom\n  posts\nwhere \n  owneruserid=##UserID## \n  and body like '%http%\/\/%'","CreationDate":"2018-07-29 5:14:12","validated":true,"QueryBody_Original":"SELECT \n  id as [Post Link],\n  creationdate\nfrom\n  posts\nwhere \n  owneruserid=##UserID## \n  and body like '%http%\/\/%'"},{"QuerySetId":881111,"Title":"How to search linked question with specific tag?","Description":"https:\/\/meta.stackoverflow.com\/questions\/371789\/how-to-search-linked-question-with-specific-tag","QueryBody":"SELECT  concat('site:\/\/q\/', q.id, '|', q.title) as [Linked post]\nfrom postlinks pl\ninner join posts q on q.id = pl.postid\ninner join posttags pt on pt.postid = q.id\ninner join tags t on t.id = pt.tagid\nwhere relatedpostid = ##postid:int?588004##\nand t.tagname = ##tagname:string?php##\nand linktypeid = 1 -- linked (not duplicate, use 3 for that)","CreationDate":"2018-07-31 13:07:55","validated":true,"QueryBody_Original":null},{"QuerySetId":881743,"Title":"List of questions and tags between dates","Description":null,"QueryBody":"SELECT  * from Posts where CreationDate >= ##MinDate:string## and CreationDate <= ##MaxDate:string## and Tags IS NOT NULL\n-- MinDate: The minimum date chosen for the data\n-- MaxDate: The maximum date chosen for the data","CreationDate":"2018-08-01 14:36:11","validated":true,"QueryBody_Original":null},{"QuerySetId":881918,"Title":"Distribution of posts from a given year by time of day","Description":null,"QueryBody":"WITH  post AS(SELECT DATEPART(HH, CreationDate) AS Hour, PostTypeId AS Id FROM Posts WHERE DATEPART(YYYY, CreationDate) = ##year:int##)\n    , data AS(SELECT Hour, Id, COUNT(*) AS Num FROM post GROUP BY Id, Hour)\n    , totals AS(SELECT COUNT(*) AS Num, Id FROM post GROUP BY Id)\nSELECT Hour, PostTypes.Name, data.Num * 1. \/ totals.Num AS Activity FROM data JOIN totals ON data.Id = totals.Id JOIN PostTypes ON data.Id = PostTypes.Id ORDER BY PostTypes.Id, Hour;","CreationDate":"2018-08-01 22:58:32","validated":true,"QueryBody_Original":null},{"QuerySetId":882080,"Title":"Closed questions on which you COMMENTED (and whether they were edited after close)","Description":null,"QueryBody":"SELECT  \n  id as [Post Link],\n  Score,\n  viewcount as [Views],\n  owneruserid as [Asker],\n  creationdate as [Asked],\n  closeddate as [Closed],\n  lasteditdate as [Edited],\n  case when lasteditdate>closeddate then 'yes' else 'no' end as [Edited After Close?]\nfrom posts\nwhere \n  closeddate is not null\n  and id in\n   (SELECT distinct postid from comments where userid=##UserID##) --my comments\norder by creationdate desc\n\n--UserID: Enter a numeric User ID:\"You can find your UserID within the URL for your profile link.\"","CreationDate":"2018-08-02 7:59:54","validated":true,"QueryBody_Original":"SELECT  \n  id as [Post Link],\n  Score,\n  viewcount as [Views],\n  owneruserid as [Asker],\n  creationdate as [Asked],\n  closeddate as [Closed],\n  lasteditdate as [Edited],\n  case when lasteditdate>closeddate then 'yes' else 'no' end as [Edited After Close?]\nfrom posts\nwhere \n  closeddate is not null\n  and id in\n   (SELECT distinct postid from comments where userid=##UserID##) --my comments\norder by creationdate desc\n\n--UserID: Enter a numeric User ID:\"You can find your UserID within the URL for your profile link.\""},{"QuerySetId":882085,"Title":"Closed questions which you ANSWERED (and whether they were edited after close)","Description":null,"QueryBody":"SELECT  \n  id as [Post Link],\n  Score,\n  viewcount as [Views],\n  owneruserid as [Asker],\n  creationdate as [Asked],\n  closeddate as [Closed],\n  lasteditdate as [Edited],\n  case when lasteditdate>closeddate then 'yes' else 'no' end as [Edited After Close]\nfrom posts\nwhere \n  closeddate is not null\n  and id in\n   (SELECT distinct parentid from posts where owneruserid=##UserID##)\norder by creationdate desc","CreationDate":"2018-08-02 8:00:16","validated":true,"QueryBody_Original":"SELECT  \n  id as [Post Link],\n  Score,\n  viewcount as [Views],\n  owneruserid as [Asker],\n  creationdate as [Asked],\n  closeddate as [Closed],\n  lasteditdate as [Edited],\n  case when lasteditdate>closeddate then 'yes' else 'no' end as [Edited After Close]\nfrom posts\nwhere \n  closeddate is not null\n  and id in\n   (SELECT distinct parentid from posts where owneruserid=##UserID##)\norder by creationdate desc"},{"QuerySetId":882192,"Title":"Breakdown of [Post History] records by type","Description":null,"QueryBody":"DECLARE  @totalRecords int = (select count(*) from posthistory)\n\nselect\n  row_number() over (order by count(ph.id) desc) as Rank,\n  pht.id,\n  name as [Post History Type],\n  format(count(ph.id),'#,##0') as [#],\n  case when 1.0*count(ph.id)\/@totalRecords<.005 then '<1%' else \n     format(1.0*count(ph.id)\/@totalRecords,'0%') end as [%],\n  format(min(ph.creationdate),'yyyy-MM-dd') as Earliest,\n  format(max(ph.creationdate),'yyyy-MM-dd') as Latest\nfrom posthistory ph join posthistorytypes pht on ph.posthistorytypeid = pht.id\ngroup by name, pht.id\norder by count(ph.id) desc","CreationDate":"2018-08-02 13:59:34","validated":true,"QueryBody_Original":"DECLARE  @totalRecords int = (select count(*) from posthistory)\n\nselect\n  row_number() over (order by count(ph.id) desc) as Rank,\n  pht.id,\n  name as [Post History Type],\n  format(count(ph.id),'#,##0') as [#],\n  case when 1.0*count(ph.id)\/@totalRecords<.005 then '<1%' else \n     format(1.0*count(ph.id)\/@totalRecords,'0%') end as [%],\n  format(min(ph.creationdate),'yyyy-MM-dd') as Earliest,\n  format(max(ph.creationdate),'yyyy-MM-dd') as Latest\nfrom posthistory ph join posthistorytypes pht on ph.posthistorytypeid = pht.id\ngroup by name, pht.id\norder by count(ph.id) desc"},{"QuerySetId":883191,"Title":"most votes received in a day... skeet or enter a userid","Description":null,"QueryBody":"SELECT  \nformat(v.creationdate ,'yyyy-MM-dd HH:mm') as [Time], count(*) as [Count]\nfrom posts p left outer join votes v on v.postid = p.id \nwhere p.owneruserid=##UserID:int?22656## \n  and p.posttypeid in (1,2)                            --Q or A only\ngroup by format(v.creationdate ,'yyyy-MM-dd HH:mm')\norder by count(*) desc","CreationDate":"2018-08-05 16:15:42","validated":true,"QueryBody_Original":null},{"QuerySetId":887355,"Title":"How do you rank compared to the sites' top commenter?","Description":null,"QueryBody":"SELECT  \n  format(rank,'\\#0') as [Commenter Rank],\n  userid as [User Link],\n  format([#Comments],'#,##0') as [# Comments],\n  round(1.0*[#Comments]\/datediff(d,mindate,getdate()),1) as [Comments\/Day]\n  from (  SELECT \n            rank() over (order by count(*) desc) as [Rank],\n            userid, \n            count(*) as [#comments], \n            format(min(creationdate), 'MMM d, yyyy') as mindate\n          from comments \n          where userid is not null \n          group by userid  ) a\nwhere userid in (##UserID##) or rank=1 \norder by rank","CreationDate":"2018-08-16 11:24:42","validated":true,"QueryBody_Original":"SELECT  \n  format(rank,'\\#0') as [Commenter Rank],\n  userid as [User Link],\n  format([#Comments],'#,##0') as [# Comments],\n  round(1.0*[#Comments]\/datediff(d,mindate,getdate()),1) as [Comments\/Day]\n  from (  SELECT \n            rank() over (order by count(*) desc) as [Rank],\n            userid, \n            count(*) as [#comments], \n            format(min(creationdate), 'MMM d, yyyy') as mindate\n          from comments \n          where userid is not null \n          group by userid  ) a\nwhere userid in (##UserID##) or rank=1 \norder by rank"},{"QuerySetId":888417,"Title":"Top editors in a given period","Description":null,"QueryBody":"SELECT  TOP (##num?100##)\n  ph.UserId AS [User Link],\n  COUNT(DISTINCT RevisionGUID) AS Count\nFROM\n  PostHistory ph\nINNER JOIN \n  Posts p ON p.id = ph.postid\nWHERE\n  ph.PostHistoryTypeId IN (4, 5, 6) -- edit title\/body\/tags\n  AND (ph.CreationDate >= '##Date1?2018-01-01##') AND (ph.CreationDate <= '##Date2?2018-12-31##')\n  AND ph.userid <> p.owneruserid\n--  AND (p.communityowneddate is null or (ph.creationdate < p.communityowneddate))\nGROUP BY\n  ph.UserId\nORDER BY\n  Count DESC","CreationDate":"2018-08-19 19:58:41","validated":true,"QueryBody_Original":null},{"QuerySetId":889445,"Title":"Top users based on score from questions","Description":null,"QueryBody":"SELECT  top ##num?100## u.Id as User_Link, sum(p.Score) as Question_score from Users u\ninner join Posts p\non p.OwnerUserId = u.Id\nwhere p.PostTypeId = 1\ngroup by u.Id\norder by Question_score desc","CreationDate":"2018-08-22 16:53:20","validated":true,"QueryBody_Original":null},{"QuerySetId":890152,"Title":"Recent comments by certain moderators","Description":null,"QueryBody":"SELECT  TOP ##num?100##\n  u.Id AS [User Link], u.LastAccessDate, c.CreationDate, c.Id AS [Comment Link]\nFROM Users u INNER JOIN Comments c ON c.UserId=u.Id\nORDER BY c.CreationDate DESC","CreationDate":"2018-08-24 13:41:28","validated":true,"QueryBody_Original":null},{"QuerySetId":891096,"Title":"Top reputation users with no answer score","Description":null,"QueryBody":"SELECT  top ##num?100## u.Id as [User Link], \nu.Reputation Reputation\nfrom  Posts p inner join Users u on p.OwnerUserId = u.Id\ngroup by u.Id, u.Reputation\nhaving sum(p.Score*(1- abs(sign(p.PostTypeId - 2)))) < 100000\norder by Reputation desc","CreationDate":"2018-08-31 19:30:20","validated":true,"QueryBody_Original":null},{"QuerySetId":895215,"Title":"My Latest Rank In India","Description":null,"QueryBody":"SELECT  #, Id, DisplayName, Reputation\nFROM(\n    SELECT\n       RANK() OVER(ORDER BY Reputation DESC) AS [#],\n       Id,\n       DisplayName,\n       Reputation,\n       WebsiteUrl,\n       Location\n    FROM\n       Users\n    WHERE\n       Location like N'%India%'\n    ORDER BY\n       reputation DESC\n   )T\n   WHERE Id like '%##UserId##%'","CreationDate":"2018-09-07 11:23:30","validated":true,"QueryBody_Original":"SELECT  #, Id, DisplayName, Reputation\nFROM(\n    SELECT\n       RANK() OVER(ORDER BY Reputation DESC) AS [#],\n       Id,\n       DisplayName,\n       Reputation,\n       WebsiteUrl,\n       Location\n    FROM\n       Users\n    WHERE\n       Location like N'%India%'\n    ORDER BY\n       reputation DESC\n   )T\n   WHERE Id like '%##UserId##%'"},{"QuerySetId":895333,"Title":"All posts by a given user","Description":null,"QueryBody":"SELECT  Id as [Post Link], CreationDate, Title, Body from Posts where OwnerUserid=##id##","CreationDate":"2018-09-07 18:39:20","validated":true,"QueryBody_Original":"SELECT  Id as [Post Link], CreationDate, Title, Body from Posts where OwnerUserid=##id##"},{"QuerySetId":895386,"Title":"List all Comments Between Two Users","Description":"Comments from user#1 that specifically mention user#2's name, and vice versa.","QueryBody":"select \n  creationdate,\n  postid as [Post Link],\n  score,\n  text\nfrom comments\nwhere\n  (userid=##UserID## and lower(text) like @name2) or (userid=##UserID2## and lower(text) like @name1)\norder by creationdate","CreationDate":"2018-09-07 20:13:23","validated":true,"QueryBody_Original":"select \n  creationdate,\n  postid as [Post Link],\n  score,\n  text\nfrom comments\nwhere\n  (userid=##UserID## and lower(text) like @name2) or (userid=##UserID2## and lower(text) like @name1)\norder by creationdate"},{"QuerySetId":898779,"Title":"List all comments for a tag for a user","Description":null,"QueryBody":"DECLARE  @UserId int = ##UserId:int##\n\nSELECT\n    C.Id AS [Comment Link],\n    *\nFROM Comments C\nWHERE\n--    T.TagName = '##TagName##' AND\n    UserId = @UserId\nORDER BY C.CreationDate DESC","CreationDate":"2018-09-17 5:44:38","validated":true,"QueryBody_Original":"DECLARE  @UserId int = ##UserId:int##\n\nSELECT\n    C.Id AS [Comment Link],\n    *\nFROM Comments C\nWHERE\n--    T.TagName = '##TagName##' AND\n    UserId = @UserId\nORDER BY C.CreationDate DESC"},{"QuerySetId":900184,"Title":"Questions from a user with no accepted answer","Description":null,"QueryBody":"SELECT \n  questions.Id AS [Post Link],\n  COUNT(*) AS 'AnswerCount'\nFROM Posts questions\nJOIN Posts answers ON answers.ParentId = questions.Id\nWHERE questions.OwnerUserId = ##UserId##\n  AND questions.PostTypeId = 1 --questions\n  AND questions.AcceptedAnswerId IS NULL\nGROUP BY questions.Id","CreationDate":"2018-09-20 0:47:33","validated":true,"QueryBody_Original":"SELECT \n  questions.Id AS [Post Link],\n  COUNT(*) AS 'AnswerCount'\nFROM Posts questions\nJOIN Posts answers ON answers.ParentId = questions.Id\nWHERE questions.OwnerUserId = ##UserId##\n  AND questions.PostTypeId = 1 --questions\n  AND questions.AcceptedAnswerId IS NULL\nGROUP BY questions.Id"},{"QuerySetId":900480,"Title":"Oldest comments containing a given phrase","Description":null,"QueryBody":"SELECT  TOP(##num?250##)\n  PostId as [Post Link],\n  UserId as [User Link],\n  CreationDate,\n  [Text],\n  Score\nFROM\n    Comments\nWHERE\n    Text LIKE '%##SearchTerm##%'\nORDER BY\n    CreationDate ASC","CreationDate":"2018-09-20 20:14:01","validated":true,"QueryBody_Original":null},{"QuerySetId":900754,"Title":"Query users posts and answers after 2018","Description":null,"QueryBody":"SELECT  \n    A.Id, A.PostTypeId, A.Title, A.Body, A.ParentId, A.Tags, A.CreationDate\nfrom \n\tPosts A\nleft join Users U ON A.OwnerUserId = U.id\nwhere\n\tU.Reputation > ##num## \n\tand A.PostTypeId = 1 \n\tand A.CreationDate > 2018","CreationDate":"2018-09-21 18:41:17","validated":true,"QueryBody_Original":"SELECT  \n    A.Id, A.PostTypeId, A.Title, A.Body, A.ParentId, A.Tags, A.CreationDate\nfrom \n\tPosts A\nleft join Users U ON A.OwnerUserId = U.id\nwhere\n\tU.Reputation > ##num## \n\tand A.PostTypeId = 1 \n\tand A.CreationDate > 2018"},{"QuerySetId":901785,"Title":"Rollbacks by a certain user","Description":null,"QueryBody":"DECLARE  @UserId AS int = ##UserId:int##\n;\n\nWITH RollbackHistory AS (\n    SELECT\n        PostId,\n        CreationDate\n    FROM PostHistory\n    WHERE UserId = @UserId\n      AND PostHistoryTypeId IN (7, -- Rollback Title\n                                8, -- Rollback Body\n                                9) -- Rollback Tags\n    GROUP BY PostId, CreationDate, RevisionGUID\n)\n\nSELECT\n    h.PostId AS [Post Link],\n    h.CreationDate,\n    p.OwnerUserId AS [User Link],\n    CASE p.PostTypeId WHEN 1 THEN 'Question'\n                      WHEN 2 THEN 'Answer' END AS 'Post type'\nFROM RollbackHistory AS h\nINNER JOIN Posts AS p\n        ON h.PostId = p.Id\nORDER BY h.CreationDate DESC","CreationDate":"2020-06-23 16:07:07","validated":true,"QueryBody_Original":"DECLARE  @UserId AS int = ##UserId:int##\n;\n\nWITH RollbackHistory AS (\n    SELECT\n        PostId,\n        CreationDate\n    FROM PostHistory\n    WHERE UserId = @UserId\n      AND PostHistoryTypeId IN (7, -- Rollback Title\n                                8, -- Rollback Body\n                                9) -- Rollback Tags\n    GROUP BY PostId, CreationDate, RevisionGUID\n)\n\nSELECT\n    h.PostId AS [Post Link],\n    h.CreationDate,\n    p.OwnerUserId AS [User Link],\n    CASE p.PostTypeId WHEN 1 THEN 'Question'\n                      WHEN 2 THEN 'Answer' END AS 'Post type'\nFROM RollbackHistory AS h\nINNER JOIN Posts AS p\n        ON h.PostId = p.Id\nORDER BY h.CreationDate DESC"},{"QuerySetId":903296,"Title":"Top Users by Tag and Location","Description":null,"QueryBody":"DECLARE  @Tag AS NVARCHAR(64) = LOWER(RTRIM(LTRIM(##Tag:string?rxjs##)))\nDECLARE @Location AS NVARCHAR(64) = LOWER(RTRIM(LTRIM(##Location:string?ukraine##)))\nDECLARE @Empty AS BIT = ##Empty:int?0##\n\nSELECT TOP 100 \n  u.Id AS [User Link],\n  u.Location,\n  COUNT(a.Id) as xCount,\n  SUM(a.Score) as xSum\nFROM Posts AS a\n  JOIN Posts AS q on a.ParentId = q.Id\n  JOIN Users AS u on a.OwnerUserId = u.Id\nWHERE\n  a.PostTypeId = '2'\n  AND (@Empty = 0 OR u.Location is NULL)\n  AND (@Empty = 0 OR u.Location = '')\n  AND LOWER(u.Location) LIKE '%'+@Location+'%'\n  AND LOWER(q.Tags) LIKE '%'+@Tag+'%'\nGROUP BY\n  u.Id, u.Location\nORDER BY\n  xSum DESC","CreationDate":"2018-10-01 2:46:45","validated":true,"QueryBody_Original":"DECLARE  @Tag AS NVARCHAR(64) = LOWER(RTRIM(LTRIM(##Tag:string?rxjs##)))\nDECLARE @Location AS NVARCHAR(64) = LOWER(RTRIM(LTRIM(##Location:string?ukraine##)))\nDECLARE @Empty AS BIT = ##Empty:int?0##\n\nSELECT TOP 100 \n  u.Id AS [User Link],\n  u.Location,\n  COUNT(a.Id) as xCount,\n  SUM(a.Score) as xSum\nFROM Posts AS a\n  JOIN Posts AS q on a.ParentId = q.Id\n  JOIN Users AS u on a.OwnerUserId = u.Id\nWHERE\n  a.PostTypeId = '2'\n  AND (@Empty = 0 OR u.Location is NULL)\n  AND (@Empty = 0 OR u.Location = '')\n  AND LOWER(u.Location) LIKE '%'+@Location+'%'\n  AND LOWER(q.Tags) LIKE '%'+@Tag+'%'\nGROUP BY\n  u.Id, u.Location\nORDER BY\n  xSum DESC"},{"QuerySetId":905204,"Title":"How many questions were re-tagged in the last 3 months?","Description":"I hope you realize that every tag-based report or query on any SE site, is based largely on what often-self-proclaimed-clueless-OPs decide to randomly tag their question....   ;)","QueryBody":"SELECT  distinct postid as id\ninto #tagsedited from posthistory\nwhere PostHistoryTypeId=6 \n and creationdate >=dateadd(MM,0-##MonthsBack:int?3##,getdate())\n\nSELECT \n  q.id as qID, \n  e.id as eID\ninto #q from posts q left outer join #tagsedited e on q.id=e.id\nwhere\n  q.creationdate >=dateadd(MM,0-##MonthsBack:int?3##,getdate())\n  and q.posttypeid=1\n  \nSELECT\n  count(1) as [# Questions],\n  sum(case when eID is not null then 1 else 0 end) as [# Re-tagged],\n  format(1.0*sum(case when eID is not null then 1 else 0 end)\/count(1),'0%') as [% Re-tagged]\nfrom #q","CreationDate":"2018-10-01 14:59:06","validated":true,"QueryBody_Original":null},{"QuerySetId":909251,"Title":"Search for questions merged by specific moderator","Description":null,"QueryBody":"SELECT  p.Id AS [Post Link], ph.*\nFROM Posts p, PostHistory ph\nWHERE ph.PostId = p.Id\n      AND ph.PostHistoryTypeId IN (37,38)   -- has a merge destination\n      AND ph.UserId = ##modId##\nORDER BY ph.CreationDate DESC","CreationDate":"2018-10-10 4:22:43","validated":true,"QueryBody_Original":"SELECT  p.Id AS [Post Link], ph.*\nFROM Posts p, PostHistory ph\nWHERE ph.PostId = p.Id\n      AND ph.PostHistoryTypeId IN (37,38)   -- has a merge destination\n      AND ph.UserId = ##modId##\nORDER BY ph.CreationDate DESC"},{"QuerySetId":910439,"Title":"Questions I've answered that are closed","Description":null,"QueryBody":"SELECT  score as [Question Score], id as [Post Link], closeddate from posts \nwhere posttypeid=1 \n  and closeddate is not null \n  and id in (\n    SELECT parentid from posts \n      where parentid is not null and owneruserid = ##MyID##\n  )","CreationDate":"2018-10-13 20:50:19","validated":true,"QueryBody_Original":"SELECT  score as [Question Score], id as [Post Link], closeddate from posts \nwhere posttypeid=1 \n  and closeddate is not null \n  and id in (\n    SELECT parentid from posts \n      where parentid is not null and owneruserid = ##MyID##\n  )"},{"QuerySetId":911065,"Title":"Tags, score, views, creationDate by tag","Description":null,"QueryBody":"SELECT  Tags AS [Tags],\n       Score,\n       ViewCount AS Views,\n       CreationDate AS [Date Asked]\n    FROM Posts\n    WHERE\n    Tags LIKE '%<' + ##TagName:string## + '>%'","CreationDate":"2019-10-26 0:03:21","validated":true,"QueryBody_Original":null},{"QuerySetId":916503,"Title":"lowest scoring answers for specified user","Description":null,"QueryBody":"SELECT \n  q.viewcount,\n  q.tags,\n  a.creationdate as Answered,\n  a.id as [Post Link],\n  a.score\nfrom posts q left outer join posts a on q.id = a.parentid\nwhere a.owneruserid=##UserID## \norder by score","CreationDate":"2018-10-25 9:04:54","validated":true,"QueryBody_Original":"SELECT \n  q.viewcount,\n  q.tags,\n  a.creationdate as Answered,\n  a.id as [Post Link],\n  a.score\nfrom posts q left outer join posts a on q.id = a.parentid\nwhere a.owneruserid=##UserID## \norder by score"},{"QuerySetId":920202,"Title":"SELECT  DISTINCT\n  p.Id AS [Post Link], p.CreationDate,\n  url = 'site:\/\/posts\/' + CAST(p.Id AS varchar)+'\/revisions'\nFROM Posts p JOIN PostHistory ph ON (ph.PostId=p.Id)\nWHERE \n  (ph.Text LIKE '%www.math.uga.edu%') OR\n  (ph.Text LIKE '%mysite.verizon.net%') OR\n  (ph.Text LIKE '%www.iecn.u-nancy.fr%')\nORDER BY p.CreationDate DESC","Description":null,"QueryBody":"SELECT  DISTINCT TOP ##num## \n  p.Id AS [Post Link], p.CreationDate,\n  url = 'site:\/\/posts\/' + CAST(p.Id AS varchar)+'\/revisions'\nFROM Posts p JOIN PostHistory ph ON (ph.PostId=p.Id)\nWHERE \n  (ph.Text LIKE '%www.math.uga.edu%') OR\n  (ph.Text LIKE '%mysite.verizon.net%') OR\n  (ph.Text LIKE '%www.iecn.u-nancy.fr%')\nORDER BY p.CreationDate DESC","CreationDate":"2018-11-03 17:06:18","validated":true,"QueryBody_Original":null},{"QuerySetId":920677,"Title":"who answers the best vba\/excel questions since date? with\/without code, avg question score","Description":"with\/without code, and question score. Must average 1 answer per day","QueryBody":"SELECT \n  a.owneruserid,\n  a.owneruserid as [User Link],\n  count(a.id) as Total,\n  round(1.0*sum(q.score)\/count(*),1) as qScore,\n  round(1.0*sum(a.score)\/count(*),1) as aScore,  \n  sum(case when q.body like '%<code>%' then 1 else 0 end) as WithCode,\n  sum(case when q.body like '%<code>%' then 0 else 1 end) as NoCode,\n  format(1.0*sum(case when q.body like '%<code>%' then 1 else 0 end)\n  \/ count(a.id),'0%') as [%withCode]\nfrom posts q left outer join posts a on q.id=a.parentid\nwhere q.creationdate >= dateadd(d,0-##DaysBack:int?180##,getdate())\n  and a.posttypeid=2 and q.posttypeid=1\n  and ( q.tags like '%vba>%' or q.tags like '%excel%' )\ngroup by a.owneruserid\nhaving count(a.id)>=##DaysBack##\norder by count(a.id) desc\n","CreationDate":"2018-11-05 19:34:10","validated":true,"QueryBody_Original":null},{"QuerySetId":924192,"Title":"Search in answers to a user's questions","Description":null,"QueryBody":"SELECT  a.Id AS [Post Link]\n  FROM Posts AS a\n  WHERE a.OwnerUserId = ##UserId:int##\n    AND a.Body LIKE ##Query:string##","CreationDate":"2019-04-27 11:58:01","validated":true,"QueryBody_Original":null},{"QuerySetId":925600,"Title":"Questions by Comments and Tag","Description":null,"QueryBody":"DECLARE  @Tag VARCHAR(25) = '##Tag##'\n\nSELECT TOP 50 *\n\nFROM Posts AS Questions\n    INNER JOIN PostTags \n    ON PostTags.PostId = Questions.Id\n    INNER JOIN Tags\n    ON Tags.Id = PostTags.TagId\n    INNER JOIN Comments\n    ON Comments.Id = Questions.Id\n    \nWHERE Tags.TagName = @Tag\n\nORDER BY ViewCount DESC","CreationDate":"2018-11-12 3:53:49","validated":true,"QueryBody_Original":"DECLARE  @Tag VARCHAR(25) = '##Tag##'\n\nSELECT TOP 50 *\n\nFROM Posts AS Questions\n    INNER JOIN PostTags \n    ON PostTags.PostId = Questions.Id\n    INNER JOIN Tags\n    ON Tags.Id = PostTags.TagId\n    INNER JOIN Comments\n    ON Comments.Id = Questions.Id\n    \nWHERE Tags.TagName = @Tag\n\nORDER BY ViewCount DESC"},{"QuerySetId":927857,"Title":"Find answers from a given user","Description":null,"QueryBody":"SELECT  p.Score, p.CreationDate, p.Id, p.ParentId, pp.Title, pp.CreationDate\nFROM Posts p\nJOIN Posts pp ON p.ParentId = pp.Id\nWHERE p.OwnerUserId = ##UserId##\nAND p.PostTypeId = 2 -- answer","CreationDate":"2018-11-15 8:47:13","validated":true,"QueryBody_Original":"SELECT  p.Score, p.CreationDate, p.Id, p.ParentId, pp.Title, pp.CreationDate\nFROM Posts p\nJOIN Posts pp ON p.ParentId = pp.Id\nWHERE p.OwnerUserId = ##UserId##\nAND p.PostTypeId = 2 -- answer"},{"QuerySetId":931088,"Title":"Posts containing truncated quotations using [...]","Description":null,"QueryBody":"SELECT  Id AS [Post Link], Body\n  FROM Posts\n  WHERE OwnerUserId = ##UserId##\n  AND Body LIKE '%\\[\\.\\.\\.\\]%' ESCAPE '\\'\n  ORDER BY Id DESC;","CreationDate":"2018-11-22 7:13:39","validated":true,"QueryBody_Original":"SELECT  Id AS [Post Link], Body\n  FROM Posts\n  WHERE OwnerUserId = ##UserId##\n  AND Body LIKE '%\\[\\.\\.\\.\\]%' ESCAPE '\\'\n  ORDER BY Id DESC;"},{"QuerySetId":941969,"Title":"Number of questions with at least N answers by day","Description":null,"QueryBody":"SELECT\n  CAST(STR(year(q.CreationDate)) + '-' + STR(month(q.CreationDate)) + '-' + STR(day(q.CreationDate)) AS DATE) AS FullDate,\n  CAST(COUNT(*) AS REAL) AS '#Questions'\nFROM\n  Posts q\nWHERE\n  q.PostTypeId=1\n  and q.AnswerCount >= ##minAnswers##\nGROUP BY STR(year(q.CreationDate)) + '-' + STR(month(q.CreationDate)) + '-' + STR(day(q.CreationDate))\nORDER BY FullDate DESC","CreationDate":"2018-12-07 13:55:15","validated":true,"QueryBody_Original":"SELECT\n  CAST(STR(year(q.CreationDate)) + '-' + STR(month(q.CreationDate)) + '-' + STR(day(q.CreationDate)) AS DATE) AS FullDate,\n  CAST(COUNT(*) AS REAL) AS '#Questions'\nFROM\n  Posts q\nWHERE\n  q.PostTypeId=1\n  and q.AnswerCount >= ##minAnswers##\nGROUP BY STR(year(q.CreationDate)) + '-' + STR(month(q.CreationDate)) + '-' + STR(day(q.CreationDate))\nORDER BY FullDate DESC"},{"QuerySetId":942028,"Title":"Evolution of the time between the question and the answer up to a given number of days","Description":null,"QueryBody":"DECLARE  @N INT = ##maxNbDays##\n\nSELECT\n  CAST(q.CreationDate AS DATE) AS 'Date',\n  DATEDIFF(DAY,q.CreationDate,a.CreationDate) AS 'Delay to answer'\nFROM\n  Posts q\n  inner join Posts a ON a.ParentId=q.Id\nWHERE\n  q.PostTypeId = 1\n  and a.PostTypeId = 2\n  and DATEDIFF(DAY,q.CreationDate,a.CreationDate)<@N\nORDER BY 'Date' DESC","CreationDate":"2018-12-07 16:43:18","validated":true,"QueryBody_Original":"DECLARE  @N INT = ##maxNbDays##\n\nSELECT\n  CAST(q.CreationDate AS DATE) AS 'Date',\n  DATEDIFF(DAY,q.CreationDate,a.CreationDate) AS 'Delay to answer'\nFROM\n  Posts q\n  inner join Posts a ON a.ParentId=q.Id\nWHERE\n  q.PostTypeId = 1\n  and a.PostTypeId = 2\n  and DATEDIFF(DAY,q.CreationDate,a.CreationDate)<@N\nORDER BY 'Date' DESC"},{"QuerySetId":942371,"Title":"How many questions has this user answered since 2019-03-31?","Description":null,"QueryBody":"SELECT \nCOUNT(a.Id) AS \"# answers\",\nSUM(a.ViewCount) AS \"# views\",\nSUM(a.Score) AS \"# score\"\nFROM Posts a\nWHERE a.OwnerUserId = ##UserId:int##\nAND a.CreationDate >= '2019-03-31'","CreationDate":"2020-03-31 19:47:36","validated":true,"QueryBody_Original":null},{"QuerySetId":942475,"Title":"Answers of a deleted user","Description":null,"QueryBody":"SELECT  Id As [Post Link], CreationDate, Score\nFROM Posts\nWHERE (OwnerDisplayName='user' + Convert(nvarchar(20), ##UserId##))\nAND (PostTypeId=2)","CreationDate":"2018-12-08 12:20:42","validated":true,"QueryBody_Original":"SELECT  Id As [Post Link], CreationDate, Score\nFROM Posts\nWHERE (OwnerDisplayName='user' + Convert(nvarchar(20), ##UserId##))\nAND (PostTypeId=2)"},{"QuerySetId":943053,"Title":"How many of this user's answers were accepted?","Description":null,"QueryBody":"SELECT \n  COUNT(a.Id) AS \"# answers\",\n  SUM(case when q.AcceptedAnswerId = a.Id then 1 else 0 end) AS \"# accepted answers\",\n  CAST(1.0*SUM(case when q.AcceptedAnswerId = a.Id then 1 else 0 end)\/COUNT(a.Id) AS DECIMAL(3,2)) AS \"fraction accepted\"\nFROM Posts q\n  JOIN Posts a ON a.ParentId = q.Id\n  JOIN Users u ON a.OwnerUserId = u.Id\nWHERE q.PostTypeId = 1 -- question\n  AND u.Id = ##UserId:int##","CreationDate":"2018-12-09 9:07:45","validated":true,"QueryBody_Original":null},{"QuerySetId":945115,"Title":"Posts which are duplicates of closed questions","Description":null,"QueryBody":"SELECT  TOP ##num##\n  pl.PostId AS [Post Link],\n  pl.RelatedPostId AS [Post Link]\nFROM PostLinks pl JOIN Posts p ON  (pl.RelatedPostId=p.Id)\nWHERE p.ClosedDate IS NOT NULL\nORDER BY pl.PostId DESC","CreationDate":"2018-12-12 21:39:27","validated":true,"QueryBody_Original":null},{"QuerySetId":946327,"Title":"Search tag wiki history example","Description":null,"QueryBody":"SELECT  *\nFROM PostHistory ph\nWHERE ph.PostId = (SELECT t.WikiPostId FROM Tags t WHERE t.TagName = ##TagName:string##)\nORDER BY CreationDate ASC","CreationDate":"2018-12-14 20:51:39","validated":true,"QueryBody_Original":null},{"QuerySetId":951634,"Title":"How many upvotes do I have for each tag this year?","Description":"how long before I get tag badges?\n","QueryBody":"DECLARE  @UserId int = ##UserId##\nDECLARE @Year int = ##Year##\n\nSELECT\n    TagName,\n    COUNT(*) AS UpVotes \nFROM Tags\n    INNER JOIN PostTags ON PostTags.TagId = Tags.id\n    INNER JOIN Posts ON Posts.ParentId = PostTags.PostId\n    INNER JOIN Votes ON Votes.PostId = Posts.Id and VoteTypeId = 2\nWHERE \n    Posts.OwnerUserId = @UserId\n    AND YEAR(Posts.CreationDate) = @Year  \nGROUP BY TagName \nORDER BY UpVotes DESC","CreationDate":"2018-12-21 20:01:31","validated":true,"QueryBody_Original":"DECLARE  @UserId int = ##UserId##\nDECLARE @Year int = ##Year##\n\nSELECT\n    TagName,\n    COUNT(*) AS UpVotes \nFROM Tags\n    INNER JOIN PostTags ON PostTags.TagId = Tags.id\n    INNER JOIN Posts ON Posts.ParentId = PostTags.PostId\n    INNER JOIN Votes ON Votes.PostId = Posts.Id and VoteTypeId = 2\nWHERE \n    Posts.OwnerUserId = @UserId\n    AND YEAR(Posts.CreationDate) = @Year  \nGROUP BY TagName \nORDER BY UpVotes DESC"},{"QuerySetId":952283,"Title":"Top 1000 questions 1-2 years old that were most upvoted questions in the last year","Description":null,"QueryBody":"SELECT  TOP 1000 Posts.Id [Post Link], COUNT(Votes.Id) FROM Posts\nJOIN Votes ON Posts.Id = Votes.PostId\nWHERE Posts.PostTypeId = 1\nAND Votes.VoteTypeId = 2\nAND Votes.CreationDate > DATEADD(year,-1,GETDATE())\nAND Posts.CreationDate < DATEADD(year,-1,GETDATE())\nAND Posts.CreationDate > DATEADD(year,-2,GETDATE())\nGROUP BY Posts.Id, Votes.PostId\nORDER BY COUNT(Votes.Id) DESC","CreationDate":"2018-12-25 17:13:29","validated":true,"QueryBody_Original":"SELECT  TOP 1000 Posts.Id [Post Link], COUNT(Votes.Id) FROM Posts\nJOIN Votes ON Posts.Id = Votes.PostId\nWHERE Posts.PostTypeId = 1\nAND Votes.VoteTypeId = 2\nAND Votes.CreationDate > DATEADD(year,-1,GETDATE())\nAND Posts.CreationDate < DATEADD(year,-1,GETDATE())\nAND Posts.CreationDate > DATEADD(year,-2,GETDATE())\nGROUP BY Posts.Id, Votes.PostId\nORDER BY COUNT(Votes.Id) DESC"},{"QuerySetId":954228,"Title":"Posts with given word in some of the revisions","Description":null,"QueryBody":"SELECT  DISTINCT TOP ##num?100##  \n  p.Id AS [Post Link], p.OwnerUserId AS [User Link], p.LastActivityDate, p.CreationDate, p.Tags,\n  url = 'site:\/\/posts\/' + CAST(p.Id AS varchar)+'\/revisions'\nFROM Posts p JOIN PostHistory ph ON (ph.PostId=p.Id)\nWHERE (ph.Text LIKE '%##word?Chebychev##%')\nORDER BY p.LastActivityDate DESC","CreationDate":"2018-12-28 20:14:33","validated":true,"QueryBody_Original":null},{"QuerySetId":954468,"Title":"Difference between accepted and highest-rated answer","Description":null,"QueryBody":"DECLARE  @Tag nvarchar(20) = ##Tag##;\n\nselect \n  Answers.id as accId,\n  Answers2.id as bestId,\n  Answers.CreationDate as accDate,\n  Answers2.CreationDate as bestDate,\n  Answers.Score as accScore,\n  Answers2.Score as bestScore,\n  (cast(Answers2.CreationDate as int) - cast(Answers.CreationDate as int)) as Dif,\n  Questions.Tags as tags\n  from Posts as Questions\n  inner join Posts as Answers\n    on Answers.ParentId = Questions.id\n      and Questions.AcceptedAnswerId = Answers.id\n  inner join Posts as Answers2\n    on Answers2.ParentId = Answers.ParentId and Answers2.score > Answers.score\n  where Answers.PostTypeId = 2","CreationDate":"2018-12-30 0:41:04","validated":true,"QueryBody_Original":"DECLARE  @Tag nvarchar(20) = ##Tag##;\n\nselect \n  Answers.id as accId,\n  Answers2.id as bestId,\n  Answers.CreationDate as accDate,\n  Answers2.CreationDate as bestDate,\n  Answers.Score as accScore,\n  Answers2.Score as bestScore,\n  (cast(Answers2.CreationDate as int) - cast(Answers.CreationDate as int)) as Dif,\n  Questions.Tags as tags\n  from Posts as Questions\n  inner join Posts as Answers\n    on Answers.ParentId = Questions.id\n      and Questions.AcceptedAnswerId = Answers.id\n  inner join Posts as Answers2\n    on Answers2.ParentId = Answers.ParentId and Answers2.score > Answers.score\n  where Answers.PostTypeId = 2"},{"QuerySetId":954670,"Title":"Who's my biggest \"favourite\" fan?","Description":null,"QueryBody":"SELECT\n  p.OwnerUserId,\n  p.OwnerDisplayName,\n  p.Id\nFROM\n  Posts p\nWHERE\n  p.OwnerUserId = ##UserID## AND\n  p.PostTypeId = 1","CreationDate":"2018-12-29 23:52:06","validated":true,"QueryBody_Original":"SELECT\n  p.OwnerUserId,\n  p.OwnerDisplayName,\n  p.Id\nFROM\n  Posts p\nWHERE\n  p.OwnerUserId = ##UserID## AND\n  p.PostTypeId = 1"},{"QuerySetId":960985,"Title":"Owners of the most badges","Description":null,"QueryBody":"SELECT \n  Users.Id AS [User Link],\n  Users.Id,\n  Users.Reputation,\n  COUNT(*) OVER (PARTITION BY Users.Id) AS Count,\n  Badges.Date\nFROM Badges, Users\nWHERE\n  Badges.Name = ##BadgeName:string##\n  AND\n  Badges.UserId = Users.Id\nORDER BY Count DESC, Users.Reputation, Users.Id, Badges.Date","CreationDate":"2019-01-10 19:18:48","validated":true,"QueryBody_Original":null},{"QuerySetId":962170,"Title":"Find non-accepted answers by a given user with comments","Description":null,"QueryBody":"SELECT  \n  q.CreationDate AS \"Question Date\", \n  a.Id AS \"Answer\",\n  q.AcceptedAnswerId AS \"Accepted Answer\",\n  q.Id AS \"Question ID\", \n  q.Title AS \"Question Title\"\nFROM Posts a\n  JOIN Posts q ON q.Id = a.ParentId\n  JOIN Comments c ON c.PostId = a.Id\n  JOIN Users u ON u.Id = a.OwnerUserId\nWHERE c.UserId <> ##UserId:int##\n  AND a.OwnerUserId = ##UserId:int##\n  AND q.AcceptedAnswerId <> a.Id\nORDER BY q.CreationDate ASC","CreationDate":"2019-01-13 20:14:06","validated":true,"QueryBody_Original":null},{"QuerySetId":969131,"Title":"Lists all users which answered the same questions as I did and compare the scores","Description":"Lists all users which answered the same questions as I did and compare the scores","QueryBody":"SELECT  oa.OwnerUserId AS [User Link]\n     , COUNT(*) AS [Total Answers]\n     , SUM(IIF(qu.AcceptedAnswerId = ma.Id, 1, 0)) AS [MA Accepted]\n     , SUM(IIF(qu.AcceptedAnswerId = oa.Id, 1, 0)) AS [OA Accepted]\n     , NULLIF(SUM(IIF(qu.AcceptedAnswerId = ma.Id, 1, 0)), 0)\n     \/ NULLIF(SUM(IIF(qu.AcceptedAnswerId = oa.Id, 1, 0)), 0) * 100.0 AS [Ratio]\n     , SUM(ma.Score) AS [MA Total Score]\n     , SUM(oa.Score) AS [OA Total Score]\n     , NULLIF(SUM(ma.Score), 0)\n     \/ NULLIF(SUM(oa.Score), 0) * 100.0 AS [Ratio]\nFROM       Posts AS ma\nINNER JOIN Posts AS qu ON ma.ParentId = qu.Id\nINNER JOIN Posts AS oa ON qu.Id = oa.ParentId AND ma.Id <> oa.Id\nWHERE ma.PostTypeId = 2\nAND ma.OwnerUserId = ##UserId##\nAND oa.OwnerUserId IS NOT NULL\nGROUP BY oa.OwnerUserId","CreationDate":"2019-01-21 19:57:15","validated":true,"QueryBody_Original":"SELECT  oa.OwnerUserId AS [User Link]\n     , COUNT(*) AS [Total Answers]\n     , SUM(IIF(qu.AcceptedAnswerId = ma.Id, 1, 0)) AS [MA Accepted]\n     , SUM(IIF(qu.AcceptedAnswerId = oa.Id, 1, 0)) AS [OA Accepted]\n     , NULLIF(SUM(IIF(qu.AcceptedAnswerId = ma.Id, 1, 0)), 0)\n     \/ NULLIF(SUM(IIF(qu.AcceptedAnswerId = oa.Id, 1, 0)), 0) * 100.0 AS [Ratio]\n     , SUM(ma.Score) AS [MA Total Score]\n     , SUM(oa.Score) AS [OA Total Score]\n     , NULLIF(SUM(ma.Score), 0)\n     \/ NULLIF(SUM(oa.Score), 0) * 100.0 AS [Ratio]\nFROM       Posts AS ma\nINNER JOIN Posts AS qu ON ma.ParentId = qu.Id\nINNER JOIN Posts AS oa ON qu.Id = oa.ParentId AND ma.Id <> oa.Id\nWHERE ma.PostTypeId = 2\nAND ma.OwnerUserId = ##UserId##\nAND oa.OwnerUserId IS NOT NULL\nGROUP BY oa.OwnerUserId"},{"QuerySetId":969187,"Title":"practice\/stackoverflow rank and percentile","Description":null,"QueryBody":"SELECT  ##userid## as uid, a.rank as rank, b.below, c.total,\nCAST(a.rank as decimal(10,2))\/CAST(c.total as decimal(10,2)) as percentile\n\nfrom \n(SELECT count(*)+1 AS rank \nfrom users \nwhere reputation > \n(SELECT reputation \nfrom users \nwhere id = ##userid##)) a, \n\n(SELECT count(*) AS below \nfrom users \nwhere reputation < \n(SELECT reputation \nfrom users \nwhere id = ##userid##)) b, \n\n(SELECT count(*) AS total \nfrom users\nwhere reputation > 100) c\n;","CreationDate":"2019-02-17 2:36:32","validated":true,"QueryBody_Original":"SELECT  ##userid## as uid, a.rank as rank, b.below, c.total,\nCAST(a.rank as decimal(10,2))\/CAST(c.total as decimal(10,2)) as percentile\n\nfrom \n(SELECT count(*)+1 AS rank \nfrom users \nwhere reputation > \n(SELECT reputation \nfrom users \nwhere id = ##userid##)) a, \n\n(SELECT count(*) AS below \nfrom users \nwhere reputation < \n(SELECT reputation \nfrom users \nwhere id = ##userid##)) b, \n\n(SELECT count(*) AS total \nfrom users\nwhere reputation > 100) c\n;"},{"QuerySetId":969930,"Title":"Most recent comments in a given tag","Description":null,"QueryBody":"SELECT  TOP ##num?500##\n  c.userId AS [User Link], c.CreationDate, c.Id AS [Comment Link], c.PostId AS [Post Link], c.text\nFROM (Comments c JOIN Posts a ON c.PostId=a.ID) INNER JOIN Posts q ON a.ParentId=q.Id\nWHERE (a.Tags Like '%<##tagName?gn.general-topology##>%') OR (q.Tags Like '%<##tagName?gn.general-topology##>%')\nORDER BY CreationDate DESC","CreationDate":"2019-01-23 16:49:20","validated":true,"QueryBody_Original":null},{"QuerySetId":976183,"Title":"All posts or titles with 'texture'","Description":null,"QueryBody":"Time to First Answer for Question Posts (By Tag, Weekly, By Hour)","CreationDate":"2019-02-05 11:05:13","validated":true,"QueryBody_Original":null},{"QuerySetId":978207,"Title":"Up and down vote count for user","Description":null,"QueryBody":"SELECT  VoteTypeId as type,count(*) from Votes v\nwhere VoteTypeId in (2,3) and v.PostId in (\n   SELECT p.id from posts p where p.posttypeid=2 and p.OwnerUserId=##USERID##\n) GROUP BY VoteTypeId","CreationDate":"2019-02-10 22:32:52","validated":true,"QueryBody_Original":"SELECT  VoteTypeId as type,count(*) from Votes v\nwhere VoteTypeId in (2,3) and v.PostId in (\n   SELECT p.id from posts p where p.posttypeid=2 and p.OwnerUserId=##USERID##\n) GROUP BY VoteTypeId"},{"QuerySetId":985575,"Title":"My answers for questions not containing Python tag","Description":null,"QueryBody":"DECLARE  @UserId int = ##UserId##\n\nSELECT q.Id as [Post Link], q.Tags FROM Posts q\n  INNER JOIN Posts a ON q.Id = a.ParentId\nWHERE\n  a.OwnerUserId = @UserId AND\n  q.Tags NOT LIKE '%<python>%'","CreationDate":"2019-02-17 18:05:38","validated":true,"QueryBody_Original":"DECLARE  @UserId int = ##UserId##\n\nSELECT q.Id as [Post Link], q.Tags FROM Posts q\n  INNER JOIN Posts a ON q.Id = a.ParentId\nWHERE\n  a.OwnerUserId = @UserId AND\n  q.Tags NOT LIKE '%<python>%'"},{"QuerySetId":988294,"Title":"Find answers by a given user to questions with no accepted answer","Description":null,"QueryBody":"SELECT  \n  q.Id AS \"Question ID\", \n  a.Id AS \"Answer ID\", \n  q.CreationDate AS \"Question Date\", \n  a.CreationDate AS \"Answer Date\", \n  q.ViewCount AS \"Views\",\n  a.Score AS \"Score\",\n  q.ClosedDate AS \"Question Closed Date\",\n  q.OwnerUserId AS \"Questioner ID\",\n  u.DisplayName AS \"Questioner Name\",\n  u.Reputation AS \"Reputation\",\n  q.Title AS \"Question Title\"\nFROM Posts a\n  JOIN Posts q ON a.ParentId = q.Id\n  JOIN Users u ON q.OwnerUserId = u.Id\nWHERE a.OwnerUserId = ##UserId:int##\n  AND q.AcceptedAnswerId IS NULL\nORDER BY a.CreationDate DESC","CreationDate":"2019-02-19 6:02:42","validated":true,"QueryBody_Original":null},{"QuerySetId":988306,"Title":"Which of this user's answers were accepted (above minimum answer score)?","Description":null,"QueryBody":"SELECT \n  a.Id AS \"Answer ID\",\n  q.OwnerUserId AS \"Questioner ID\",\n  u.DisplayName AS \"Questioner Name\",\n  u.Reputation AS \"Reputation\",\n  q.Id AS \"Question ID\",\n  q.Title AS \"Title\"\nFROM Posts q\n  JOIN Posts a ON q.Id = a.ParentId\n  JOIN Users u ON q.OwnerUserId = u.Id\nWHERE q.PostTypeId = 1 -- question\n  AND a.OwnerUserId = ##UserId:int##\n  AND a.Score >= ##MinAnswerScore:int##\n  AND q.AcceptedAnswerId IS NOT NULL\n  AND a.Id = q.AcceptedAnswerId\nORDER BY q.Id DESC","CreationDate":"2019-02-19 6:08:15","validated":true,"QueryBody_Original":null},{"QuerySetId":994440,"Title":"All the comments on my posts","Description":null,"QueryBody":"DECLARE  @UserId int = ##UserId##\n\nSELECT\nc.Score,\nc.CreationDate 'Comment Date',\nc.Text\nFROM\n    Comments c, Posts p\nWHERE  p.Id = @UserId\n  \nORDER BY \n    c.CreationDate ASC","CreationDate":"2019-03-01 16:30:30","validated":true,"QueryBody_Original":"DECLARE  @UserId int = ##UserId##\n\nSELECT\nc.Score,\nc.CreationDate 'Comment Date',\nc.Text\nFROM\n    Comments c, Posts p\nWHERE  p.Id = @UserId\n  \nORDER BY \n    c.CreationDate ASC"},{"QuerySetId":1012915,"Title":"Accepted answers with zero score","Description":null,"QueryBody":"DECLARE  @UserId int = ##userid:int?5026##\n\nSELECT answers.id as [Post Link]\n\nFROM \n\n(SELECT *\nFROM Posts\nWHERE PostTypeId = 2) AS answers\n\nJOIN\n\n(SELECT *\nFROM Posts\nWHERE PostTypeId = 1) AS questions\n\nON questions.AcceptedAnswerId = answers.id\n\nWHERE answers.OwnerUserId = @UserId AND answers.score = 0","CreationDate":"2019-03-21 21:15:38","validated":true,"QueryBody_Original":"DECLARE  @UserId int = ##userid:int?5026##\n\nSELECT answers.id as [Post Link]\n\nFROM \n\n(SELECT *\nFROM Posts\nWHERE PostTypeId = 2) AS answers\n\nJOIN\n\n(SELECT *\nFROM Posts\nWHERE PostTypeId = 1) AS questions\n\nON questions.AcceptedAnswerId = answers.id\n\nWHERE answers.OwnerUserId = @UserId AND answers.score = 0"},{"QuerySetId":1015264,"Title":"Search questions by any keyword","Description":null,"QueryBody":"SELECT  top ##NumberOfPosts## p.CreationDate, p.Body, p.Id  as [Post Link]\nfrom Posts p\nwhere p.PostTypeId = 1\nand p.Body like '%##keyword1##%'","CreationDate":"2019-03-24 13:24:20","validated":true,"QueryBody_Original":null},{"QuerySetId":1020812,"Title":"All my questions with scores and titles","Description":null,"QueryBody":"SELECT  q.Id AS [Post Id], q.Score, q.Title\nFROM Posts q \nwhere q.PostTypeId = 1\nand q.OwnerUserId = ##UserId##","CreationDate":"2019-03-31 22:12:01","validated":true,"QueryBody_Original":"SELECT  q.Id AS [Post Id], q.Score, q.Title\nFROM Posts q \nwhere q.PostTypeId = 1\nand q.OwnerUserId = ##UserId##"},{"QuerySetId":1021495,"Title":"Number of downvotes and upvotes on posts by a specific user","Description":null,"QueryBody":"SELECT  p.Id AS [Post Link], SUM(CASE WHEN v.VoteTypeId=3 THEN 1 ELSE 0 END), SUM(CASE WHEN v.VoteTypeId=2 THEN 1 ELSE 0 END)\nFROM Votes v JOIN Posts p ON v.PostId=p.Id\nWHERE (p.OwnerUserId=##id?210401##) AND (v.VoteTypeId IN (2,3))\nGROUP BY p.Id\nORDER BY p.Id ASC\n--VoteTypeId=3 downvotes\n--VoteTypeId=2 upvotes","CreationDate":"2019-04-02 9:41:47","validated":true,"QueryBody_Original":null},{"QuerySetId":1021498,"Title":"Scores of questions by a specific user","Description":null,"QueryBody":"SELECT \n  Id AS [Post Link], Title, Score\nFROM Posts\nWHERE OwnerUserId=##id?210401## AND PostTypeId=1\nORDER BY Id ASC","CreationDate":"2019-04-02 9:44:16","validated":true,"QueryBody_Original":null},{"QuerySetId":1031124,"Title":"All questions with exactly two specified tags and no accepted answer","Description":null,"QueryBody":"SELECT  Id AS [Post Link], CreationDate, Score, Tags\n  FROM Posts\n  WHERE Tags IN ('<' + ##tag1:string## + '><' + ##tag2:string## + '>',\n                 '<' + ##tag2:string## + '><' + ##tag1:string## + '>')\n    AND AcceptedAnswerId IS NULL\n  ORDER BY CreationDate DESC","CreationDate":"2019-04-16 16:13:20","validated":true,"QueryBody_Original":null},{"QuerySetId":1037035,"Title":"Count of questions, comments, answers with tag over time","Description":null,"QueryBody":"DECLARE  @tag0 nvarchar(25) = ##tag0:string?bigcommerce##\nDECLARE @tag1 nvarchar(25) = ##tag1:string?shopify##\nDECLARE @tag2 nvarchar(25) = ##tag2:string?magneto2##\n\nSELECT \n  DATEADD(week, DATEDIFF(day, '20000109', CreationDate) \/ 7, '20000109') AS [WEEK]\n  , Tags.TagName, COUNT(DISTINCT Posts.Id) as Posts, SUM(Posts.AnswerCount) as Answers, SUM(Posts.CommentCount) as Comments\nFROM Posts\nINNER JOIN PostTags ON PostTags.PostId = Posts.Id\nINNER JOIN Tags ON PostTags.TagId = Tags.Id\nWHERE Tags.TagName in (@tag0,@tag1,@tag2) AND PostTypeId = 1 AND CreationDate > '2013-01-06'\nGROUP BY  DATEADD(week, DATEDIFF(day, '20000109', CreationDate) \/ 7, '20000109'), Tags.TagName\nORDER BY [WEEK] DESC","CreationDate":"2019-04-24 7:39:03","validated":true,"QueryBody_Original":"DECLARE  @tag0 nvarchar(25) = ##tag0:string?bigcommerce##\nDECLARE @tag1 nvarchar(25) = ##tag1:string?shopify##\nDECLARE @tag2 nvarchar(25) = ##tag2:string?magneto2##\n\nSELECT \n  DATEADD(week, DATEDIFF(day, '20000109', CreationDate) \/ 7, '20000109') AS [WEEK]\n  , Tags.TagName, COUNT(DISTINCT Posts.Id) as Posts, SUM(Posts.AnswerCount) as Answers, SUM(Posts.CommentCount) as Comments\nFROM Posts\nINNER JOIN PostTags ON PostTags.PostId = Posts.Id\nINNER JOIN Tags ON PostTags.TagId = Tags.Id\nWHERE Tags.TagName in (@tag0,@tag1,@tag2) AND PostTypeId = 1 AND CreationDate > '2013-01-06'\nGROUP BY  DATEADD(week, DATEDIFF(day, '20000109', CreationDate) \/ 7, '20000109'), Tags.TagName\nORDER BY [WEEK] DESC"},{"QuerySetId":1037600,"Title":"Age-normalised score per answer with minimum answer count (ranking; non-CW)","Description":null,"QueryBody":"SELECT  top ##RankedUsers?1000##\n  rank() over (order by R.Ratio desc) as Rank, R.Id as [User Link], R.Ratio\nfrom (\nSELECT U.Id, 100 * sum(cast(A.Score as real) \/ datediff(day, A.CreationDate, getdate())) \/ count(A.Score) as Ratio\n  from Posts A\n  inner join Users U on U.Id = A.OwnerUserId\n  where A.PostTypeId = 2\n    and A.CommunityOwnedDate is null\n  group by U.Id\n  having count(A.Id) >= ##MinimumAnswerCount?400##\n  ) R\norder by R.Ratio desc","CreationDate":"2019-04-26 5:38:41","validated":true,"QueryBody_Original":null},{"QuerySetId":1038904,"Title":"Users with a specified reputation on two sites","Description":null,"QueryBody":"DECLARE  @sql NVARCHAR(MAX) =\n'SELECT ''https:\/\/' + ##site1:string## + '.stackexchange.com\/u\/''\n  + CAST(u1.Id AS NVARCHAR) + ''|'' + u1.DisplayName AS ''User'',\n  u1.Reputation AS ' + ##site1:string## + ',\n  u2.Reputation AS ' + ##site2:string## + '\n  FROM [StackExchange.' + ##site1:string## + '].dbo.Users AS u1\n  INNER JOIN [StackExchange.' + ##site2:string## + '].dbo.Users AS u2\n    ON u1.AccountId = u2.AccountId\n    WHERE u1.Reputation >= ' + CAST(##reputation:int?3000## AS NVARCHAR) + '\n      AND u2.Reputation >= ' + CAST(##reputation:int?3000## AS NVARCHAR) + '\n  ORDER BY u1.Reputation + u2.Reputation DESC';\nEXEC(@sql);","CreationDate":"2019-04-27 20:09:11","validated":true,"QueryBody_Original":"DECLARE  @sql NVARCHAR(MAX) =\n'SELECT ''https:\/\/' + ##site1:string## + '.stackexchange.com\/u\/''\n  + CAST(u1.Id AS NVARCHAR) + ''|'' + u1.DisplayName AS ''User'',\n  u1.Reputation AS ' + ##site1:string## + ',\n  u2.Reputation AS ' + ##site2:string## + '\n  FROM [StackExchange.' + ##site1:string## + '].dbo.Users AS u1\n  INNER JOIN [StackExchange.' + ##site2:string## + '].dbo.Users AS u2\n    ON u1.AccountId = u2.AccountId\n    WHERE u1.Reputation >= ' + CAST(##reputation:int?3000## AS NVARCHAR) + '\n      AND u2.Reputation >= ' + CAST(##reputation:int?3000## AS NVARCHAR) + '\n  ORDER BY u1.Reputation + u2.Reputation DESC';\nEXEC(@sql);"},{"QuerySetId":1040565,"Title":"Questions with highest amount of bounties","Description":null,"QueryBody":"SELECT  Top(##num?500##)\n  SUM(v.BountyAmount), p.Id AS [Post Link], p.ViewCount\nFROM Posts p JOIN Votes v ON v.PostId=p.Id\nWHERE v.VotetypeId=8\nGROUP BY p.Id, p.ViewCount\nORDER BY SUM(v.BountyAmount) DESC","CreationDate":"2019-05-01 15:43:42","validated":true,"QueryBody_Original":null},{"QuerySetId":1040585,"Title":"Users with most hot network questions","Description":null,"QueryBody":"SELECT  TOP(##num?100##)\n  COUNT (DISTINCT p.Id) AS Count, \n  p.OwnerUserId as [User Link], p.OwnerDisplayName\nFROM Posts p JOIN PostHistory ph ON p.Id=ph.PostId\nWHERE (ph.PostHistoryTypeId=52)\nGROUP by p.OwnerUserId, p.OwnerDisplayName\nORDER BY COUNT (DISTINCT p.Id) DESC","CreationDate":"2020-04-17 16:33:11","validated":true,"QueryBody_Original":null},{"QuerySetId":1040614,"Title":"Top X users with most answers on hot network questions","Description":null,"QueryBody":"SELECT  TOP(##num?100##)\n  COUNT (DISTINCT a.Id) AS Count, \n  a.OwnerUserId as [User Link], a.OwnerDisplayName\nFROM (Posts q JOIN PostHistory ph ON q.Id=ph.PostId) JOIN Posts a ON q.Id=a.ParentId\nWHERE (ph.PostHistoryTypeId=52)\nGROUP by a.OwnerUserId, a.OwnerDisplayName\nORDER BY COUNT (DISTINCT a.Id) DESC","CreationDate":"2020-04-17 16:33:24","validated":true,"QueryBody_Original":null},{"QuerySetId":1040618,"Title":"Answers by a specific user on hot network questions","Description":null,"QueryBody":"SELECT  \n  a.Id AS [Post Link], a.OwnerUserId as [User Link]\nFROM (Posts q JOIN PostHistory ph ON q.Id=ph.PostId) JOIN Posts a ON q.AcceptedAnswerId=a.Id\nWHERE (ph.PostHistoryTypeId=52) AND (a.OwnerUserId=##userid##)","CreationDate":"2020-04-24 15:24:09","validated":true,"QueryBody_Original":"SELECT  \n  a.Id AS [Post Link], a.OwnerUserId as [User Link]\nFROM (Posts q JOIN PostHistory ph ON q.Id=ph.PostId) JOIN Posts a ON q.AcceptedAnswerId=a.Id\nWHERE (ph.PostHistoryTypeId=52) AND (a.OwnerUserId=##userid##)"},{"QuerySetId":1047919,"Title":"Questions filtered by tag, sorted by # of answers","Description":null,"QueryBody":"SELECT  TOP 100 q.Id AS [Post Link],\n  q.CreationDate, q.AnswerCount, q.Score\n  FROM Posts AS q\n  INNER JOIN PostTags AS pt ON q.Id = pt.PostId\n  INNER JOIN Tags AS t ON t.Id = pt.TagId\n  WHERE t.TagName = ##tagName:string##\n  ORDER BY AnswerCount DESC","CreationDate":"2019-05-12 17:13:04","validated":true,"QueryBody_Original":null},{"QuerySetId":1051997,"Title":"Breakdown of questions by a user by score","Description":null,"QueryBody":"SELECT \n  Score, COUNT(Id)\n FROM Posts\n WHERE PostTypeId=1 AND OwnerUserId=##uid?28111##\n GROUP BY Score\n ORDER BY Score DESC","CreationDate":"2019-05-15 19:44:28","validated":true,"QueryBody_Original":null},{"QuerySetId":1052242,"Title":"Active users with a reputation cutoff","Description":null,"QueryBody":"SELECT  \n  Users.Id AS [User Link],\n  Users.Reputation,\n  COUNT(*) AS postnumber\nFROM Users\nJOIN Posts ON Users.Id = Posts.OwnerUserId\nWHERE DATEDIFF(MONTH, Posts.CreationDate, GetDate()) <= ##AgeCutoffInMonths##\n  AND Users.Reputation >= ##ReputationCutoff##\nGROUP BY Users.Id, Users.Reputation\nORDER BY Users.Reputation DESC","CreationDate":"2019-05-16 14:43:37","validated":true,"QueryBody_Original":"SELECT  \n  Users.Id AS [User Link],\n  Users.Reputation,\n  COUNT(*) AS postnumber\nFROM Users\nJOIN Posts ON Users.Id = Posts.OwnerUserId\nWHERE DATEDIFF(MONTH, Posts.CreationDate, GetDate()) <= ##AgeCutoffInMonths##\n  AND Users.Reputation >= ##ReputationCutoff##\nGROUP BY Users.Id, Users.Reputation\nORDER BY Users.Reputation DESC"},{"QuerySetId":1070774,"Title":"Upvotes on question - distribution over vote age","Description":null,"QueryBody":"SELECT  Age, [2010], [2011], [2012], [2013], [2014], [2015], [2016], [2017], [2018], [2019]\nFROM\n\n(SELECT YEAR(p.CreationDate) AS [Year],\n  DATEDIFF(YEAR, p.CreationDate, v.CreationDate) AS Age,\n  CAST(COUNT(*) AS FLOAT) \/ COUNT(DISTINCT(p.Id)) AS Upvotes\n  FROM Votes AS v\n  INNER JOIN Posts AS p\n    ON v.PostId = p.Id\n  WHERE v.VoteTypeId = 2\n    AND p.PostTypeId = 1\n  GROUP BY YEAR(p.CreationDate),\n  DATEDIFF(YEAR, p.CreationDate, v.CreationDate)\n  ) AS temp\n\nPIVOT (\nAVG(Upvotes)\n  FOR Year IN ([2010], [2011], [2012], [2013], [2014], [2015], [2016], [2017], [2018], [2019])\n) AS pivotTable\n\nORDER BY Age","CreationDate":"2019-06-27 15:10:03","validated":true,"QueryBody_Original":null},{"QuerySetId":1076883,"Title":"Posts by a single user and the number of links\/images, sorted by content length","Description":null,"QueryBody":"SELECT  Id AS [Post Link], LEN(Body) AS 'Length', Score, CreationDate,\n  -- count the # of occurrences of ':\/\/' in the body \n  (LEN(Body) - LEN(REPLACE(Body, ':\/\/', ''))) \/ 3 AS 'Number of links\/images'\n  FROM Posts\n  WHERE OwnerUserId = ##UserId:int##\n    AND PostTypeId = 2 -- Answers only\n  ORDER BY LEN(Body) DESC","CreationDate":"2019-07-15 15:51:07","validated":true,"QueryBody_Original":null},{"QuerySetId":1084142,"Title":"Top 100 users with most CW posts","Description":null,"QueryBody":"SELECT  TOP(##num?100##)\n  OwnerUserId AS [User Link], OwnerDisplayName, COUNT(Id)\nFROM Posts\nWHERE (CommunityOwnedDate IS NOT NULL)\nGROUP BY OwnerUserId, OwnerDisplayName\nORDER BY COUNT(Id) DESC","CreationDate":"2019-07-31 12:36:48","validated":true,"QueryBody_Original":null},{"QuerySetId":1084211,"Title":"Users with most posts between two dates","Description":null,"QueryBody":"SELECT  TOP(##num?100##)\n  OwnerUserId AS [User Link], OwnerDisplayName, COUNT(Id)\nFROM Posts\nWHERE CreationDate >= '##Date1?2019-01-01##' AND CreationDate <= '##Date2?2020-01-01##'\nGROUP BY OwnerUserId, OwnerDisplayName\nORDER BY COUNT(Id) DESC","CreationDate":"2019-07-31 14:30:56","validated":true,"QueryBody_Original":null},{"QuerySetId":1084214,"Title":"Users with most comments between two dates","Description":null,"QueryBody":"SELECT  TOP(##num?100##)\n  UserId AS [User Link], UserDisplayName, COUNT(Id)\nFROM Comments\nWHERE CreationDate >= '##Date1?2019-01-01##' AND CreationDate <= '##Date2?2020-01-01##'\nGROUP BY UserId, UserDisplayName\nORDER BY COUNT(Id) DESC","CreationDate":"2019-07-31 14:32:20","validated":true,"QueryBody_Original":null},{"QuerySetId":1084376,"Title":"Distribution of question age when answered","Description":null,"QueryBody":"SELECT  DATEDIFF(day, Question.CreationDate, Answer.CreationDate) as delay, COUNT(*)\n  FROM (SELECT * FROM Posts WHERE PostTypeId = 2) as Answer\n  JOIN Posts AS Question\n    ON Answer.ParentId = Question.Id\n  WHERE Answer.OwnerUserId = ##UserId##\n  GROUP BY DATEDIFF(day, Question.CreationDate, Answer.CreationDate)","CreationDate":"2020-05-22 22:17:56","validated":true,"QueryBody_Original":"SELECT  DATEDIFF(day, Question.CreationDate, Answer.CreationDate) as delay, COUNT(*)\n  FROM (SELECT * FROM Posts WHERE PostTypeId = 2) as Answer\n  JOIN Posts AS Question\n    ON Answer.ParentId = Question.Id\n  WHERE Answer.OwnerUserId = ##UserId##\n  GROUP BY DATEDIFF(day, Question.CreationDate, Answer.CreationDate)"},{"QuerySetId":1085471,"Title":"Find Incorrect usage of Python-N tags.","Description":null,"QueryBody":"SELECT TOP 200 p.Title,\n               'https:\/\/codereview.stackexchange.com\/questions\/' + CAST(p.id AS VARCHAR) as URL,\n               p.Tags,\n               p.CreationDate\nFROM   posts p\nCROSS APPLY (\n       SELECT t.TagName\n       FROM tags t\n       INNER JOIN posttags pt on pt.tagid = t.id\n       WHERE pt.postid = p.id\n       AND t.TagName like 'python-2.%'\n) t_python_v\nCROSS APPLY (\n       SELECT t.TagName\n       FROM tags t\n       INNER JOIN posttags pt on pt.tagid = t.id\n       WHERE pt.postid = p.id\n       AND t.TagName like 'python-3.%'\n) t_python\nWHERE  1 = 1\nAND    p.DeletionDate is NULL\nAND    p.Body is NOT NULL\nAND    p.ClosedDate is NULL\nORDER  BY p.CreationDate DESC\n;","CreationDate":"2019-08-04 0:22:52","validated":true,"QueryBody_Original":null},{"QuerySetId":1086385,"Title":"Users with most CW answers","Description":null,"QueryBody":"SELECT  TOP(##num?100##)\n  OwnerUserId AS [User Link], OwnerDisplayName, COUNT(Id)\nFROM Posts\nWHERE PostTypeId=2 AND CommunityOwnedDate is not null\nGROUP BY OwnerUserId, OwnerDisplayName\nORDER BY COUNT(Id) DESC","CreationDate":"2019-08-07 11:48:52","validated":true,"QueryBody_Original":null},{"QuerySetId":1086386,"Title":"Users with most non-CW answers","Description":null,"QueryBody":"SELECT  TOP(##num?100##)\n  OwnerUserId AS [User Link], OwnerDisplayName, COUNT(Id)\nFROM Posts\nWHERE PostTypeId=2 AND CommunityOwnedDate is null\nGROUP BY OwnerUserId, OwnerDisplayName\nORDER BY COUNT(Id) DESC","CreationDate":"2019-08-07 11:48:39","validated":true,"QueryBody_Original":null},{"QuerySetId":1090745,"Title":"Most Favorite'd Posts (for specified tag)","Description":"Lists accepted answers for the questions that are the most 'favorited' for the specified tag. (Group by 100's of fav's, when sorting.)","QueryBody":"SELECT  \n  case when min(p.acceptedanswerid) is null then postid else min(p.acceptedanswerid) end as [Post Link],\n  format(count(*),'#,##0') [# Fav's],\n  format(score,'#,##0') Score,\n  format(datediff(month,min(p.creationdate),getdate())\/12.0,'#,##0.0') [Years Old]  \nfrom votes v left join posts p on v.postid=p.id\nwhere votetypeid=5   --favorites = 5\n  and p.posttypeid=1\n  and p.tags like '%<' + ##tag:string?php## + '>%'\ngroup by postid, p.title, score\nhaving count(*) > ##minfav:int?100## \norder by (round(count(*)\/100,0)*100.0)+(score\/10000.0) desc \n\n-- tag: Enter a single, complete tag:\n-- minfav: Minimum # of favorite's:","CreationDate":"2019-11-17 17:25:16","validated":true,"QueryBody_Original":null},{"QuerySetId":1094695,"Title":"Was the user active in the last 12 months","Description":"If we define active as writing a question or an answer. Was the given user active for the last 12 months?","QueryBody":"DECLARE  @user INT = ##uid:INT##\n\nIF ( (SELECT TOP 1 DATEDIFF(MONTH,GETDATE(),p.CreationDate) AS 'Date'\n      FROM Posts p WHERE p.OwnerUserId = @user ORDER BY 'Date' DESC) < -12)\n    SELECT 'No';\nELSE\n    SELECT 'Yes';","CreationDate":"2019-08-22 12:17:44","validated":true,"QueryBody_Original":null},{"QuerySetId":1094698,"Title":"Was a given user active in the last N months. Active is here defined by creating a post (question, answer, etc.)","Description":"Active is here defined by creating a post (question, answer, etc.)","QueryBody":"DECLARE  @user INT = ##uid:INT##\nDECLARE @N INT = ##NbMonth:INT##\n-- \n\nIF ( (SELECT TOP 1 DATEDIFF(MONTH,GETDATE(),p.CreationDate) AS 'Date'\n      FROM Posts p WHERE p.OwnerUserId = @user ORDER BY 'Date' DESC) < -@N)\n    SELECT 'No';\nELSE\n    SELECT 'Yes';","CreationDate":"2019-08-22 12:37:38","validated":true,"QueryBody_Original":null},{"QuerySetId":1094704,"Title":"Last votes by a given user","Description":null,"QueryBody":"DECLARE  @user INT = ##uid:INT##\n\nSELECT\n  v.CreationDate AS 'Date',\n  t.Name\nFROM \n  Votes v \n  INNER JOIN VoteTypes t ON v.VoteTypeId = t.Id\n  WHERE v.UserId = @user \n  ORDER BY 'Date' DESC","CreationDate":"2019-08-22 13:38:27","validated":true,"QueryBody_Original":"DECLARE  @user INT = ##uid:INT##\n\nSELECT\n  v.CreationDate AS 'Date',\n  t.Name\nFROM \n  Votes v \n  INNER JOIN VoteTypes t ON v.VoteTypeId = t.Id\n  WHERE v.UserId = @user \n  ORDER BY 'Date' DESC"},{"QuerySetId":1104368,"Title":"Search User \"About Me\" Sections for an Exact Word or Phrase","Description":null,"QueryBody":"SELECT  * \nFROM Users\nWHERE \nLOWER(AboutMe) LIKE '%' + ##keyword:string## + '%' \nAND reputation >1\nAND NOT LOWER(AboutMe) LIKE '%' + ##keyword:string## + 's%'\nORDER BY reputation DESC","CreationDate":"2019-09-12 22:33:45","validated":true,"QueryBody_Original":null},{"QuerySetId":1106653,"Title":"To whom do I answer","Description":null,"QueryBody":"SELECT  \nQuestions.Score as Q_score,\nQuestions.Id as [Post Link],\nQuestions.Body as Q_text,\nAnswers.Score as A_score,\nAnswers.Body as A_text,\nQuestions.Tags as [Tags],\nQuestions.OwnerUserId as [User Link]\nFROM\nPosts as Questions,\nPosts as Answers \nWHERE\nQuestions.PostTypeId  = 1 AND\nAnswers.PostTypeId  = 2 AND\nAnswers.ParentId = Questions.Id AND\nAnswers.OwnerUserId = ##UserId1##","CreationDate":"2019-09-15 19:58:10","validated":true,"QueryBody_Original":"SELECT  \nQuestions.Score as Q_score,\nQuestions.Id as [Post Link],\nQuestions.Body as Q_text,\nAnswers.Score as A_score,\nAnswers.Body as A_text,\nQuestions.Tags as [Tags],\nQuestions.OwnerUserId as [User Link]\nFROM\nPosts as Questions,\nPosts as Answers \nWHERE\nQuestions.PostTypeId  = 1 AND\nAnswers.PostTypeId  = 2 AND\nAnswers.ParentId = Questions.Id AND\nAnswers.OwnerUserId = ##UserId1##"},{"QuerySetId":1112645,"Title":"Search something in my answers under a specific tag","Description":null,"QueryBody":"DECLARE  @SearchTerm nvarchar(max) = '##SearchTerm##'\nDECLARE @Tag nvarchar(max) = '##Tag##'\n\nSELECT TOP 100 Id as [Post Link], Body\nFROM Posts P\nWHERE\n  ParentId is NOT NULL\n  AND OwnerUserId = 3889449\n  AND (SELECT Tags FROM Posts WHERE Id = P.ParentId) LIKE CONCAT('%<', @Tag, '>%')\n  AND LOWER(Body) LIKE CONCAT('%', LOWER(@SearchTerm), '%')\nORDER BY CreationDate DESC","CreationDate":"2020-10-10 15:36:21","validated":true,"QueryBody_Original":"DECLARE  @SearchTerm nvarchar(max) = '##SearchTerm##'\nDECLARE @Tag nvarchar(max) = '##Tag##'\n\nSELECT TOP 100 Id as [Post Link], Body\nFROM Posts P\nWHERE\n  ParentId is NOT NULL\n  AND OwnerUserId = 3889449\n  AND (SELECT Tags FROM Posts WHERE Id = P.ParentId) LIKE CONCAT('%<', @Tag, '>%')\n  AND LOWER(Body) LIKE CONCAT('%', LOWER(@SearchTerm), '%')\nORDER BY CreationDate DESC"},{"QuerySetId":1113065,"Title":"Distribution of my questions and answers by their score","Description":null,"QueryBody":"DECLARE  @UserId int = ##UserId##\n\nSELECT\nPosts.Score,\nCOUNT(*) AS Number,\n(CASE WHEN MIN(Posts.PostTypeId) = 1 THEN 'Question' ELSE 'Answer' END) AS Type\nFROM Posts\nWHERE Posts.OwnerUserId = @UserId\nAND Posts.PostTypeId IN (1, 2)\nGROUP BY Posts.Score, Posts.PostTypeId\nORDER BY Type, Score DESC","CreationDate":"2019-09-23 20:36:35","validated":true,"QueryBody_Original":"DECLARE  @UserId int = ##UserId##\n\nSELECT\nPosts.Score,\nCOUNT(*) AS Number,\n(CASE WHEN MIN(Posts.PostTypeId) = 1 THEN 'Question' ELSE 'Answer' END) AS Type\nFROM Posts\nWHERE Posts.OwnerUserId = @UserId\nAND Posts.PostTypeId IN (1, 2)\nGROUP BY Posts.Score, Posts.PostTypeId\nORDER BY Type, Score DESC"},{"QuerySetId":1115877,"Title":"Most upvoted answers of the past 6 months in a tag","Description":null,"QueryBody":"DECLARE  @TagName nvarchar(255) = '##TagName##'\n\nSELECT Posts.Id AS [Post Link], Posts.Score\nFROM Posts\nINNER JOIN PostTags ON PostTags.PostId = Posts.Id\nINNER JOIN Tags ON Tags.Id = PostTags.TagId\nWHERE Posts.PostTypeId = 1\n  AND Posts.CreationDate >= DATEADD(MONTH, -6, GETDATE())\n  AND Posts.CreationDate <= GETDATE()\n  AND Tags.TagName = @TagName\nORDER BY Score DESC","CreationDate":"2019-09-28 7:40:21","validated":true,"QueryBody_Original":"DECLARE  @TagName nvarchar(255) = '##TagName##'\n\nSELECT Posts.Id AS [Post Link], Posts.Score\nFROM Posts\nINNER JOIN PostTags ON PostTags.PostId = Posts.Id\nINNER JOIN Tags ON Tags.Id = PostTags.TagId\nWHERE Posts.PostTypeId = 1\n  AND Posts.CreationDate >= DATEADD(MONTH, -6, GETDATE())\n  AND Posts.CreationDate <= GETDATE()\n  AND Tags.TagName = @TagName\nORDER BY Score DESC"},{"QuerySetId":1117714,"Title":"Comments on a post by a user","Description":null,"QueryBody":"SELECT  c.Id As [Comment Link], c.Text\nFROM Comments c JOIN Posts p ON p.Id=c.PostId\nWHERE (p.OwnerDisplayName='user' + Convert(nvarchar(20), ##UserId##))","CreationDate":"2019-09-30 20:41:56","validated":true,"QueryBody_Original":"SELECT  c.Id As [Comment Link], c.Text\nFROM Comments c JOIN Posts p ON p.Id=c.PostId\nWHERE (p.OwnerDisplayName='user' + Convert(nvarchar(20), ##UserId##))"},{"QuerySetId":1120813,"Title":"Shortest time to Famous Badge","Description":null,"QueryBody":"SELECT  TOP(##num?100##)\n  p.Id AS [Post Link],\n  p.OwnerUserId AS [User Link],\n  p.CreationDate, b.Date,\n  DATEDIFF(month, p.CreationDate, b.Date) AS Months,\n  DATEDIFF(day, p.CreationDate, b.Date) AS Days,\n  DATEDIFF(hour, p.CreationDate, b.Date) AS Hours,\n  DATEDIFF(minute, p.CreationDate, b.Date) AS Minutes,\n  p.ViewCount, p.Score, p.AnswerCount, p.Tags\nFROM Posts p JOIN Badges b ON (p.OwnerUserId=b.UserId)\nWHERE (p.PostTypeId=1) and (p.ViewCount>=10000)\n  and (b.Name='Famous Question') and (p.CreationDate<=b.Date)\nORDER BY DATEDIFF(minute, CreationDate, b.Date) ASC","CreationDate":"2019-10-05 14:20:23","validated":true,"QueryBody_Original":null},{"QuerySetId":1128256,"Title":"All posts by user","Description":null,"QueryBody":"SELECT \n  Post.Id as [Post Link],\n  Type.Name as [Type],\n  Post.Score as [Score],\n  Post.CreationDate as [CreationDate],\n  coalesce(Post.Tags, Parent.Tags) as [Tags]\nfrom Posts as Post\n  left join PostTypes as Type on Type.Id = Post.PostTypeId\n  left join Posts as Parent on Parent.Id = Post.ParentId\nwhere Post.OwnerDisplayName = ##UserName:string##\norder by Post.Id ASC","CreationDate":"2019-10-19 22:23:50","validated":true,"QueryBody_Original":null},{"QuerySetId":1139362,"Title":"Get score by post type for UserName","Description":null,"QueryBody":"DECLARE  @UserId as int\nselect @UserId = Id From Users where DisplayName = '##UserName##'\nSelect (Select SUM(Score) From Posts where OwnerUserId = @UserId AND PostTypeId = 2) AS AnswerScore,\n(Select SUM(Score) From Posts where OwnerUserId = @UserId AND PostTypeId = 1) AS QuestionScore,\n(Select SUM(Score) From Comments where UserId = @UserId) AS CommentScore,\n(Select TOP(1) Id From Users where Id = @UserId) As UserId","CreationDate":"2019-10-31 20:03:21","validated":true,"QueryBody_Original":"DECLARE  @UserId as int\nselect @UserId = Id From Users where DisplayName = '##UserName##'\nSelect (Select SUM(Score) From Posts where OwnerUserId = @UserId AND PostTypeId = 2) AS AnswerScore,\n(Select SUM(Score) From Posts where OwnerUserId = @UserId AND PostTypeId = 1) AS QuestionScore,\n(Select SUM(Score) From Comments where UserId = @UserId) AS CommentScore,\n(Select TOP(1) Id From Users where Id = @UserId) As UserId"},{"QuerySetId":1157669,"Title":"Posts containing two given words","Description":null,"QueryBody":"SELECT  TOP ##num?100##\n  Id As [Post Link], OwnerUserId AS [User Link], CreationDate, LastActivityDate,  Score, ViewCount, Body\n  FROM Posts WHERE\n    (CONCAT(LOWER(Title),' ',LOWER(Body)) LIKE '%##text1?cauchy##%') AND (CONCAT(LOWER(Title),' ',LOWER(Body)) Like '%##text2?swartz##%')\n  ORDER BY CreationDate DESC","CreationDate":"2019-11-24 1:44:03","validated":true,"QueryBody_Original":null},{"QuerySetId":1159016,"Title":"Returns, for each user, the total amount of reputation offered as bounty, the number of bounties offered, and current reputation, ordered by the total reputation offered.","Description":"Returns, for each user, the total amount of reputation offered as bounty, the number of bounties offered, and current reputation, ordered by the total reputation offered.","QueryBody":"SELECT  TOP 100\nRANK() OVER (ORDER BY SUM(Votes.BountyAmount) DESC) AS Rank,\n  SUM(Votes.BountyAmount) AS BountyTotal\nFROM\n  Votes\n  INNER JOIN Users ON Votes.UserId = Users.Id\n  LEFT JOIN Posts questions ON Votes.PostId = questions.Id\nWHERE\n  Votes.VoteTypeId = 8\n  AND Votes.UserId > -1\n  AND Users.Reputation > ##MinReputation?1##\nGROUP BY\n  Votes.UserId,\n  Users.Id\nHAVING \n  COUNT(Votes.BountyAmount) >= ##MinBountyNo?1##\nORDER BY\n  SUM(Votes.BountyAmount) DESC","CreationDate":"2020-05-27 0:12:54","validated":true,"QueryBody_Original":null},{"QuerySetId":1159238,"Title":"questions by 1 or more people","Description":null,"QueryBody":"SELECT  \n  owneruserid as [User Link],\n  id as [Post Link],\n  format(creationdate,'yyyy-MM-dd') as Asked,\n  len(body) as length,\n  ViewCount as Views,\n  AnswerCount as Answers,\n  FavoriteCount as Favs,\n  Score,\n  Tags\ninto #tmp\nfrom posts\nwhere posttypeid=1\nand owneruserid in ( ##UserID## )\n\n\nSELECT * from #tmp\norder by score desc, views desc\n\n--UserID: Enter one or more (comma separated) numeric UserID's:","CreationDate":"2019-11-26 18:09:03","validated":true,"QueryBody_Original":null},{"QuerySetId":1159501,"Title":"Number of upvotes for posts by a certain user in a certain tag","Description":null,"QueryBody":"SELECT  COUNT(*) AS 'Number of upvotes'\n  FROM Posts AS p\n  INNER JOIN PostTags AS pt\n    ON COALESCE(p.ParentId, p.Id) = pt.PostId\n  INNER JOIN Tags AS t\n    ON t.Id = pt.TagId\n  INNER JOIN Votes AS v\n    ON v.PostId = p.Id\n  WHERE v.VoteTypeId = 2 -- Upvote\n    AND p.OwnerUserId = ##UserId:int##\n    AND t.TagName = ##TagName:string##","CreationDate":"2019-11-27 17:36:36","validated":true,"QueryBody_Original":null},{"QuerySetId":1160377,"Title":"top omments by a user within a length limit, sorted by creation date","Description":"See also sorted by score https:\/\/data.stackexchange.com\/stackoverflow\/query\/1291565","QueryBody":"SELECT  TOP ##Limit:int?50000##\n  c.Score,\n  c.Text AS [Text],\n  c.CreationDate,\n  'site:\/\/posts\/comments\/' + CONVERT(nvarchar(20),c.Id) AS [Comment Permalink]\nFROM Comments c\nWHERE\n  LEN(c.Text) >= ##MinCommentLength:int?0## AND\n  LEN(c.Text) <= ##MaxCommentLength:int?500## AND\n  (\n    c.UserId = ##UserId:int##\n  ) AND\n  c.CreationDate < DATEADD(dd, -##MinCommentAgeDays:int?0##, GETDATE())\nORDER BY c.CreationDate DESC","CreationDate":"2020-09-06 14:36:00","validated":true,"QueryBody_Original":null},{"QuerySetId":1162837,"Title":"Ratio between downvoted and commented posts","Description":null,"QueryBody":"SELECT  \n  u.Id AS [User Link],\n  u.Downvotes,\n  COUNT(DISTINCT c.PostId) AS CommentedPosts,\n  CAST(u.Downvotes as decimal)\/CAST(COUNT(DISTINCT c.PostId) as decimal) AS Ratio\nFROM Users u INNER JOIN Comments c ON c.UserId=u.Id\nWHERE u.Downvotes>##min?100##\nGROUP BY u.Id, u.Downvotes\nORDER BY CAST(u.Downvotes as decimal)\/CAST(COUNT(DISTINCT c.PostId) as decimal) DESC","CreationDate":"2019-12-05 22:02:15","validated":true,"QueryBody_Original":null},{"QuerySetId":1163637,"Title":"Top 10 questions with worst score from users from Monterrey","Description":null,"QueryBody":"SELECT  #, DisplayName AS 'Owner', Location, Title AS 'Question', Tags, Body, T.Score, Text AS 'Answer' FROM \n(\n\u00a0 SELECT TOP 10\n\u00a0 row_number() OVER (ORDER BY Score) AS '#',\n\u00a0 A.*,\n\u00a0 B.DisplayName,\n\u00a0 B.Location\n\u00a0 FROM Posts A \n\u00a0 INNER JOIN Users B ON A.OwnerUserId = B.Id\n\u00a0 WHERE (A.PostTypeId = 1 AND B.Location LIKE 'Monterrey%')\n\u00a0 ORDER BY Score\n) T\nINNER JOIN Comments C ON C.PostId = T.Id\nORDER BY T.#","CreationDate":"2020-12-06 9:40:34","validated":true,"QueryBody_Original":null},{"QuerySetId":1163670,"Title":"Comments Search with Score, Length, Age Filters","Description":null,"QueryBody":"SELECT  TOP ##Limit:int?100##\n  Id AS [Id],\n  Score,\n  LOWER(Text) AS [Text],\n  'site:\/\/posts\/comments\/' + CONVERT(nvarchar(20),Id) AS [Comment Permalink]\nFROM Comments c\nWHERE\n  Score <= ##MaxCommentScore:int?5## AND\n  LEN(Text) >= ##MinCommentLength:int?15## AND\n  LEN(Text) <= ##MaxCommentLength:int?15## AND\n  Id >= ##MinCommentId:int?0## AND\n  CreationDate < DATEADD(dd, -##MinCommentAgeDays:int?30##, GETDATE())\nORDER BY Id ASC","CreationDate":"2019-12-11 8:15:38","validated":true,"QueryBody_Original":null},{"QuerySetId":1166779,"Title":"Get Top Users for Snowflake-datawarehouse","Description":null,"QueryBody":"DECLARE  @limit int = 100;\nDECLARE @tag_name nvarchar(35) = 'snowflake-datawarehouse';\nDECLARE @tag_id int = (select id from tags where tagname = @tag_name);\nSELECT\n  users.id \"User Link\",\n    Count(*) AS AnswerCount1\n    \nFROM \n    Posts\n    join users on (users.id = Posts.OwnerUserid)\n    \nWHERE PostTypeId = 2\nGROUP BY \n    users.id\nORDER BY \n    AnswerCount1 DESC","CreationDate":"2019-12-13 6:05:10","validated":true,"QueryBody_Original":"DECLARE  @limit int = 100;\nDECLARE @tag_name nvarchar(35) = 'snowflake-datawarehouse';\nDECLARE @tag_id int = (select id from tags where tagname = @tag_name);\nSELECT\n  users.id \"User Link\",\n    Count(*) AS AnswerCount1\n    \nFROM \n    Posts\n    join users on (users.id = Posts.OwnerUserid)\n    \nWHERE PostTypeId = 2\nGROUP BY \n    users.id\nORDER BY \n    AnswerCount1 DESC"},{"QuerySetId":1168041,"Title":"Search for answers of a specific user to questions in my favorites","Description":null,"QueryBody":"SELECT  a.id AS [Post Link], a.body\n  FROM Posts AS a\n  INNER JOIN Votes AS v\n    ON v.PostId = a.ParentId\n  WHERE v.UserId = ##UserId:int##\n    AND v.VoteTypeId = 5 -- Favorite\n    AND a.OwnerUserId = ##AnotherUserId:int##","CreationDate":"2019-12-16 2:05:19","validated":true,"QueryBody_Original":null},{"QuerySetId":1168819,"Title":"Users with most answers in a given tag","Description":null,"QueryBody":"SELECT  TOP(##num?100##)\n  a.OwnerUserId AS [User Link], a.OwnerDisplayName,\n  COUNT (a.Id) AS [Question Count],\n  SUM (a.Score) AS [Total Score]\nFROM Posts a INNER JOIN Posts q ON a.ParentId=q.Id\nWHERE (a.PostTypeId=2) AND (q.PostTypeId=1) AND (q.Tags LIKE '%<##tagName?data-explorer##>%')\n---PostTypeId=2 means answer\nGROUP BY a.OwnerUserId, a.OwnerDisplayName\nORDER BY COUNT (a.Id) DESC","CreationDate":"2019-12-17 20:09:36","validated":true,"QueryBody_Original":null},{"QuerySetId":1173606,"Title":"Find posts by history event type","Description":null,"QueryBody":"DECLARE  @HistoryEventType int = ##HistoryEventType##\n\nSELECT ph.PostId as [Post Link], pht.Name\nFROM PostHistory ph JOIN PostHistoryTypes pht ON ph.PostHistoryTypeId = pht.Id\nWHERE ph.PostHistoryTypeId=@HistoryEventType","CreationDate":"2020-01-02 2:51:50","validated":true,"QueryBody_Original":"DECLARE  @HistoryEventType int = ##HistoryEventType##\n\nSELECT ph.PostId as [Post Link], pht.Name\nFROM PostHistory ph JOIN PostHistoryTypes pht ON ph.PostHistoryTypeId = pht.Id\nWHERE ph.PostHistoryTypeId=@HistoryEventType"},{"QuerySetId":1183135,"Title":"Users with highest percentage of approved edits","Description":null,"QueryBody":"WITH  perc_cte as\n(\nSELECT \n  OwnerUserId AS uid,\n  COUNT(Id) AS Total,\n  COUNT(ApprovalDate) AS Approved,\n  COUNT(RejectionDate) AS Rejected,\n  ROUND((COUNT(ApprovalDate))*100.0\/(COUNT(Id)),2) AS PercApproved,\n  ROUND((COUNT(RejectionDate))*100.0\/(COUNT(Id)),2) AS PercRejected\nFROM SuggestedEdits\nGROUP BY OwnerUserId\n)\n\nSELECT TOP(##num?100##)\n  uid AS [User Link],\n  PercApproved, PercRejected,\n  Approved, Rejected, Total\nFROM perc_cte\nORDER BY PercApproved DESC","CreationDate":"2020-01-20 0:34:04","validated":true,"QueryBody_Original":null},{"QuerySetId":1183586,"Title":"Most often visited questions with a score in a certain range","Description":null,"QueryBody":"SELECT Id as [Post Link], Score, ViewCount, CreationDate, Tags\nFROM Posts\nWHERE PostTypeId = 1 -- questions\n  and ClosedDate is null -- not closed\n  and Score >= ##S1:int?0## and Score <= ##S2:int?0##\nORDER BY ViewCount DESC","CreationDate":"2020-01-27 16:09:06","validated":true,"QueryBody_Original":null},{"QuerySetId":1196119,"Title":"Top users with same name","Description":null,"QueryBody":"WITH  topusers_cte AS (\nSELECT TOP(##num?100##)\n  Id AS uid, DisplayName as udn\nFROM Users\nORDER BY Reputation DESC\n)\n\nSELECT \n  udn AS Name, COUNT(udn) AS Count\nFROM topusers_cte\nGROUP BY udn\nHAVING COUNT(udn)>1","CreationDate":"2020-02-13 13:02:21","validated":true,"QueryBody_Original":null},{"QuerySetId":1198009,"Title":"Top 50 posts by total votes within specific tag from the last 6 months","Description":null,"QueryBody":"SELECT  top 50 count(v.postid) as 'Total Votes', v.postid AS [Post Link]\nFROM Votes v\n\tINNER JOIN Posts p ON p.id = v.postid\nWHERE \nPostTypeId = 1 \nAND v.VoteTypeId=2 \nAND p.tags like LOWER('%<' + ##tagname:string## + '>%')\nAND p.CreationDate >= DATEADD(month, -6, GETDATE())\ngroup by v.postid\norder by 'Total Votes' desc","CreationDate":"2020-03-03 7:04:18","validated":true,"QueryBody_Original":null},{"QuerySetId":1200781,"Title":"Questions answered by two users","Description":null,"QueryBody":"SELECT  p.ParentId as [Post Link] from Posts p \ninner join Posts q on q.ParentId = p.ParentId\nwhere p.OwnerUserId = ##id1## and q.OwnerUserId = ##id2##","CreationDate":"2020-02-24 0:51:32","validated":true,"QueryBody_Original":"SELECT  p.ParentId as [Post Link] from Posts p \ninner join Posts q on q.ParentId = p.ParentId\nwhere p.OwnerUserId = ##id1## and q.OwnerUserId = ##id2##"},{"QuerySetId":1200793,"Title":"Questions Answers Without Votes by Year","Description":null,"QueryBody":"SELECT  'Questions' as [Type], year(p.CreationDate) as [Post Year], count(*) as [Total Count]\nfrom Posts p left join Votes v on p.Id = v.PostId\nwhere p.DeletionDate is null and v.PostId is null and p.PostTypeId = 1\ngroup by year(p.CreationDate)\n)\nUNION\n(\nSELECT 'Answers' as [Type], year(p.CreationDate) as [Post Year], count(*) as [Total Count]\nfrom Posts p left join Votes v on p.Id = v.PostId\nwhere p.DeletionDate is null and v.PostId is null and p.PostTypeId = 2\ngroup by year(p.CreationDate)\n\n)\norder by year(p.CreationDate);","CreationDate":"2020-02-24 6:53:41","validated":true,"QueryBody_Original":null},{"QuerySetId":1201603,"Title":"Most related, correlated or anticorrelated tags","Description":"Calculates the correlation coefficient between all tag pairs. 0 correlation means that the tags are independent from each other. Negative correlation means that having a tag makes unlikely to have the other tag. Positive correlation means that a question tagged with one of them, makes likely to be tagged by the other.","QueryBody":"DECLARE  @TotalQ INT;\n\nSELECT @TotalQ = COUNT(*) FROM Posts WHERE PostTypeId = 1;\n\nWITH Raw AS (\n  SELECT\n    A.TagId AS TagA,\n    B.TagId AS TagB,\n    COUNT(*) AS Count\n  FROM PostTags A, PostTags B\n  WHERE\n    A.PostId = B.PostId\n    AND\n    A.TagId <> B.TagId\n  GROUP BY A.TagId, B.TagId\n)\nSELECT TOP 100\n  A.TagName AS TagNameA,\n  A.Count AS CountA,\n  B.TagName AS TagNameB,\n  B.Count AS CountB,\n  Raw.Count AS BothCount,\n  (1.0 * Raw.Count * @TotalQ - 1.0 * A.Count * B.Count)\n    \/\n    SQRT(1.0\n      * A.Count * (@TotalQ - A.Count)\n      * B.Count * (@TotalQ - B.Count))\n    AS Corr\nFROM Tags A, Tags B, Raw\nWHERE\n  Raw.TagA = A.Id\n  AND\n  Raw.TagB = B.Id\n  AND\n  A.Count > 5\n  AND\n  B.Count > 5\n  AND\n  A.TagName < B.TagName\nORDER BY Corr DESC;","CreationDate":"2020-02-24 19:54:57","validated":true,"QueryBody_Original":"DECLARE  @TotalQ INT;\n\nSELECT @TotalQ = COUNT(*) FROM Posts WHERE PostTypeId = 1;\n\nWITH Raw AS (\n  SELECT\n    A.TagId AS TagA,\n    B.TagId AS TagB,\n    COUNT(*) AS Count\n  FROM PostTags A, PostTags B\n  WHERE\n    A.PostId = B.PostId\n    AND\n    A.TagId <> B.TagId\n  GROUP BY A.TagId, B.TagId\n)\nSELECT TOP 100\n  A.TagName AS TagNameA,\n  A.Count AS CountA,\n  B.TagName AS TagNameB,\n  B.Count AS CountB,\n  Raw.Count AS BothCount,\n  (1.0 * Raw.Count * @TotalQ - 1.0 * A.Count * B.Count)\n    \/\n    SQRT(1.0\n      * A.Count * (@TotalQ - A.Count)\n      * B.Count * (@TotalQ - B.Count))\n    AS Corr\nFROM Tags A, Tags B, Raw\nWHERE\n  Raw.TagA = A.Id\n  AND\n  Raw.TagB = B.Id\n  AND\n  A.Count > 5\n  AND\n  B.Count > 5\n  AND\n  A.TagName < B.TagName\nORDER BY Corr DESC;"},{"QuerySetId":1206756,"Title":"list all posts for a given user by user id","Description":null,"QueryBody":"DECLARE  @UserId int = ##UserId##\n\nSELECT id, PostTypeId, posts.Title, Body, CreationDate\nFROM posts\nWHERE Posts.OwnerUserId = @UserId","CreationDate":"2020-03-07 16:55:07","validated":true,"QueryBody_Original":"DECLARE  @UserId int = ##UserId##\n\nSELECT id, PostTypeId, posts.Title, Body, CreationDate\nFROM posts\nWHERE Posts.OwnerUserId = @UserId"},{"QuerySetId":1211040,"Title":"Logarithmic vote distribution by month","Description":null,"QueryBody":"DECLARE  @Ts DATETIME;\n\nSELECT @Ts = DATEFROMPARTS(\n  YEAR(MAX(Votes.CreationDate)),\n  MONTH(MAX(Votes.CreationDate)),\n  1)\nFROM Votes;\n\nSELECT\n  DATEFROMPARTS(\n    YEAR(Votes.CreationDate),\n    MONTH(Votes.CreationDate),\n    1) AS Month,\n  MIN(VoteTypes.Name) AS VoteType,\n  LOG(COUNT(*))\/LOG(2) AS Log2Count\nFROM Votes, VoteTypes\nWHERE\n  Votes.VoteTypeId = VoteTypes.Id\n  AND\n  Votes.CreationDate < @Ts\nGROUP BY\n  DATEFROMPARTS(\n    YEAR(Votes.CreationDate),\n    MONTH(Votes.CreationDate),\n    1),\n  Votes.VoteTypeId\nORDER BY Month DESC, Log2Count DESC","CreationDate":"2020-03-16 21:29:21","validated":true,"QueryBody_Original":"DECLARE  @Ts DATETIME;\n\nSELECT @Ts = DATEFROMPARTS(\n  YEAR(MAX(Votes.CreationDate)),\n  MONTH(MAX(Votes.CreationDate)),\n  1)\nFROM Votes;\n\nSELECT\n  DATEFROMPARTS(\n    YEAR(Votes.CreationDate),\n    MONTH(Votes.CreationDate),\n    1) AS Month,\n  MIN(VoteTypes.Name) AS VoteType,\n  LOG(COUNT(*))\/LOG(2) AS Log2Count\nFROM Votes, VoteTypes\nWHERE\n  Votes.VoteTypeId = VoteTypes.Id\n  AND\n  Votes.CreationDate < @Ts\nGROUP BY\n  DATEFROMPARTS(\n    YEAR(Votes.CreationDate),\n    MONTH(Votes.CreationDate),\n    1),\n  Votes.VoteTypeId\nORDER BY Month DESC, Log2Count DESC"},{"QuerySetId":1213618,"Title":"AWS Answers by Year for a given user","Description":null,"QueryBody":"SELECT \n  CONVERT(nvarchar(4), Question.CreationDate, 23) AS Year,\n  COUNT(Answer.Id) AS Answers\n\nFROM Posts as Question\nJOIN Posts as Answer ON Question.Id = Answer.ParentId\n\nWHERE Question.PostTypeId = 1 -- Question\n  AND Answer.PostTypeId = 2 -- Answer\n  AND Question.ClosedDate IS NULL -- Exclude Closed questions\n  AND (Question.Tags LIKE '%<amazon-%' OR Question.Tags LIKE '%<aws-%')\n  AND Answer.OwnerUserId = ##UserId##\n\nGROUP BY CONVERT(nvarchar(4), Question.CreationDate, 23)\nORDER BY CONVERT(nvarchar(4), Question.CreationDate, 23)","CreationDate":"2020-03-24 14:21:23","validated":true,"QueryBody_Original":"SELECT \n  CONVERT(nvarchar(4), Question.CreationDate, 23) AS Year,\n  COUNT(Answer.Id) AS Answers\n\nFROM Posts as Question\nJOIN Posts as Answer ON Question.Id = Answer.ParentId\n\nWHERE Question.PostTypeId = 1 -- Question\n  AND Answer.PostTypeId = 2 -- Answer\n  AND Question.ClosedDate IS NULL -- Exclude Closed questions\n  AND (Question.Tags LIKE '%<amazon-%' OR Question.Tags LIKE '%<aws-%')\n  AND Answer.OwnerUserId = ##UserId##\n\nGROUP BY CONVERT(nvarchar(4), Question.CreationDate, 23)\nORDER BY CONVERT(nvarchar(4), Question.CreationDate, 23)"},{"QuerySetId":1215993,"Title":"Search posts by user and partial title","Description":null,"QueryBody":"SELECT  p.Id AS [Post Link], p.CreationDate, p.Score\n  FROM Posts AS p\n  LEFT OUTER JOIN Posts AS q\n    ON p.ParentId = q.Id\n  WHERE p.OwnerUserId = ##UserId:int##\n    AND COALESCE(p.Title, q.Title) LIKE '%##Query##%'\n  ORDER BY p.CreationDate DESC","CreationDate":"2020-03-30 16:46:49","validated":true,"QueryBody_Original":null},{"QuerySetId":1217621,"Title":"AWS Answers by Month for a given User","Description":null,"QueryBody":"SELECT \n  CONVERT(nvarchar(7), Answer.CreationDate, 23) AS Month,\n  COUNT(Answer.Id) AS Answers\n\nFROM Posts as Answer\nJOIN Posts as Question ON Question.Id = Answer.ParentId\n\nWHERE Question.PostTypeId = 1 -- Question\n  AND Answer.PostTypeId = 2 -- Answer\n  --AND Question.ClosedDate IS NULL -- Exclude Closed questions\n  AND (Question.Tags LIKE '%<amazon-%' OR Question.Tags LIKE '%<aws-%')\n  AND Answer.OwnerUserId = ##UserId##\n\nGROUP BY CONVERT(nvarchar(7), Answer.CreationDate, 23)\nORDER BY CONVERT(nvarchar(7), Answer.CreationDate, 23)","CreationDate":"2020-06-12 14:00:21","validated":true,"QueryBody_Original":"SELECT \n  CONVERT(nvarchar(7), Answer.CreationDate, 23) AS Month,\n  COUNT(Answer.Id) AS Answers\n\nFROM Posts as Answer\nJOIN Posts as Question ON Question.Id = Answer.ParentId\n\nWHERE Question.PostTypeId = 1 -- Question\n  AND Answer.PostTypeId = 2 -- Answer\n  --AND Question.ClosedDate IS NULL -- Exclude Closed questions\n  AND (Question.Tags LIKE '%<amazon-%' OR Question.Tags LIKE '%<aws-%')\n  AND Answer.OwnerUserId = ##UserId##\n\nGROUP BY CONVERT(nvarchar(7), Answer.CreationDate, 23)\nORDER BY CONVERT(nvarchar(7), Answer.CreationDate, 23)"},{"QuerySetId":1222162,"Title":"Users by the amount of bounties won on their first week of activities","Description":null,"QueryBody":"WITH  Raw AS (\n  SELECT\n    Posts.OwnerUserId AS UserId,\n    Votes.CreationDate AS VoteDay,\n    Votes.Id AS VoteId,\n    Votes.PostId,\n    Votes.VoteTypeId,\n    Votes.BountyAmount\n  FROM Posts, Votes\n  WHERE\n    Votes.PostId = Posts.Id\n    AND\n    Posts.OwnerUserId > 0\n),\nRaw2 AS (\n  SELECT UserId, MIN(VoteDay) AS FirstVoteDay\n  FROM Raw\n  GROUP BY UserId\n),\nRaw3 AS (\n  SELECT\n    Raw.UserId,\n    Raw.VoteDay,\n    Raw.PostId,\n    Raw.VoteId,\n    Raw.BountyAmount,\n    SUM(BountyAmount) OVER (PARTITION BY Raw.UserId) AS StartBounty\n  FROM Raw, Raw2\n  WHERE\n    Raw.UserId = Raw2.UserId\n    AND\n    DATEDIFF(day, Raw2.FirstVoteDay, Raw.VoteDay) < ##FirstDays:int?7##\n    AND\n    Raw.VoteTypeId = 9\n)\nSELECT TOP 100 *\nFROM Raw3\nORDER BY StartBounty DESC, UserId, VoteId","CreationDate":"2020-04-08 12:35:55","validated":true,"QueryBody_Original":null},{"QuerySetId":1224755,"Title":"This query shows all answer posts which are relevant for the \"Unsung Hero\" badge sorted by the creation date. In addition it shows if a post is already counting (older than 10 days) or not.","Description":"This query shows all answer posts which are relevant for the \"Unsung Hero\" badge sorted by the creation date. In addition it shows if a post is already counting (older than 10 days) or not.","QueryBody":"DECLARE  @UserId int = ##UserId##\n\nSELECT\n    a.Id AS [Post Link],\n    a.CreationDate AS [Answer Creation Date],\n    (case when datediff(dd, a.CreationDate, getdate()) < 10 then 0 else 1 end) AS [10 days criterion met]\nFROM\n    Posts q\n  INNER JOIN\n    Posts a\n  ON a.Id = q.AcceptedAnswerId\nWHERE\n      a.CommunityOwnedDate is null\n  and a.OwnerUserId = @UserId\n  and q.OwnerUserId != @UserId\n  and a.postTypeId = 2\n  and a.Score = 0\nORDER BY a.CreationDate DESC","CreationDate":"2020-04-13 4:28:30","validated":true,"QueryBody_Original":"DECLARE  @UserId int = ##UserId##\n\nSELECT\n    a.Id AS [Post Link],\n    a.CreationDate AS [Answer Creation Date],\n    (case when datediff(dd, a.CreationDate, getdate()) < 10 then 0 else 1 end) AS [10 days criterion met]\nFROM\n    Posts q\n  INNER JOIN\n    Posts a\n  ON a.Id = q.AcceptedAnswerId\nWHERE\n      a.CommunityOwnedDate is null\n  and a.OwnerUserId = @UserId\n  and q.OwnerUserId != @UserId\n  and a.postTypeId = 2\n  and a.Score = 0\nORDER BY a.CreationDate DESC"},{"QuerySetId":1225566,"Title":"Lonsgest time - answer after question closed","Description":null,"QueryBody":"SELECT  Top(##num?1000##)\n  a.Id AS [Post Link],\n  a.CreationDate, q.ClosedDate,\n  DATEDIFF(month, q.ClosedDate, a.CreationDate) AS Months,\n  DATEDIFF(day, q.ClosedDate, a.CreationDate) AS Days,\n  DATEDIFF(hour, q.ClosedDate, a.CreationDate) AS Hours,\n  DATEDIFF(minute, q.ClosedDate, a.CreationDate) AS Minutes\nFROM Posts q INNER JOIN Posts a ON a.ParentId=q.Id\nWHERE (q.ClosedDate IS NOT NULL) and (q.ClosedDate<a.CreationDate)\nORDER BY DATEDIFF(minute, q.ClosedDate, a.CreationDate) DESC","CreationDate":"2020-04-14 15:31:19","validated":true,"QueryBody_Original":null},{"QuerySetId":1232894,"Title":"Find answers to HNQ by a specific user that were posted before the question became HNQ, between dates","Description":null,"QueryBody":"SELECT answers.Id [Post Link], answers.CreationDate as 'Answer Posted', ph.CreationDate as 'Became HNQ'\nFROM PostHistory ph\nINNER JOIN Posts answers ON answers.ParentId=ph.PostId\nWHERE answers.OwnerUserId= ##userId##\n  AND answers.CreationDate between @StartDate and @EndDate\n  AND ph.PostHistoryTypeId=52\n  AND answers.CreationDate < ph.CreationDate","CreationDate":"2020-04-29 2:51:12","validated":true,"QueryBody_Original":"SELECT answers.Id [Post Link], answers.CreationDate as 'Answer Posted', ph.CreationDate as 'Became HNQ'\nFROM PostHistory ph\nINNER JOIN Posts answers ON answers.ParentId=ph.PostId\nWHERE answers.OwnerUserId= ##userId##\n  AND answers.CreationDate between @StartDate and @EndDate\n  AND ph.PostHistoryTypeId=52\n  AND answers.CreationDate < ph.CreationDate"},{"QuerySetId":1233457,"Title":"Top 100 users with very similar tag score distribution to you","Description":null,"QueryBody":"WITH  Raw AS (\n  SELECT\n    Posts.OwnerUserId AS UserId,\n    PostTags.TagId,\n    SUM(5 - 2 * Votes.VoteTypeId) AS Score\n  FROM Posts, Votes, PostTags\n  WHERE\n    Votes.PostId = Posts.Id\n    AND\n    Votes.VoteTypeId BETWEEN 2 AND 3\n    AND\n    Posts.PostTypeId = 2\n    AND\n    Posts.ParentId = PostTags.PostId\n    AND\n    Posts.OwnerUserId > 0\n  GROUP BY Posts.OwnerUserId, PostTags.TagId\n)\nSELECT TOP 100 *\nFROM Raw You\nFULL JOIN Raw Other ON Other.TagId = You.TagId\nWHERE\n  You.UserId = ##SiteAccountId:int##\n  AND\n  Other.UserId <> You.UserId\nORDER BY Other.UserId, COALESCE(You.TagId, Other.TagId)","CreationDate":"2020-04-30 17:05:46","validated":true,"QueryBody_Original":null},{"QuerySetId":1234442,"Title":"All answers by a specific user (title and body)","Description":null,"QueryBody":"SELECT \n  a.Id AS [Post Link],\n  q.Title,\n  a.Score,\n  q.ViewCount, q.AnswerCount,\n  a.body\nFROM Posts a INNER JOIN Posts q ON q.Id=a.ParentId\nWHERE (a.OwnerUserId=##userid##)\nORDER BY a.Id","CreationDate":"2020-05-03 12:39:48","validated":true,"QueryBody_Original":"SELECT \n  a.Id AS [Post Link],\n  q.Title,\n  a.Score,\n  q.ViewCount, q.AnswerCount,\n  a.body\nFROM Posts a INNER JOIN Posts q ON q.Id=a.ParentId\nWHERE (a.OwnerUserId=##userid##)\nORDER BY a.Id"},{"QuerySetId":1236853,"Title":"Users with largest number of \"trackable\" badges","Description":null,"QueryBody":"SELECT  TOP(##num?100##)\n  u.Id AS [User Link],\n  COUNT(DISTINCT b.Name) AS BadgeCount\nFROM Users u INNER JOIN Badges b ON b.UserId = u.Id\nWHERE b.Name in (\n'Altruist',\n'Benefactor',\n'Curious',\n'Inquisitive',\n'Socratic',\n'Investor',\n'Explainer',\n'Promoter',\n'Scholar',\n'Student',\n'Explainer'\n)\nGROUP BY u.Id\nORDER BY COUNT(DISTINCT b.Name) DESC","CreationDate":"2020-05-10 12:23:54","validated":true,"QueryBody_Original":null},{"QuerySetId":1237032,"Title":"Longest time until entering the HNQ","Description":null,"QueryBody":"SELECT  TOP (##num?1000##)\np.Id AS [Post Link],\np.CreationDate,\nph.CreationDate,\nDATEDIFF(day, p.CreationDate, ph.CreationDate) AS Days,\nDATEDIFF(hour, p.CreationDate, ph.CreationDate) AS Hours,\nDATEDIFF(minute, p.CreationDate, ph.CreationDate) AS Minutes\nFROM PostHistory ph INNER JOIN Posts p ON ph.PostId=p.Id\nWHERE ph.PostHistoryTypeId=52\n---52 = Question became hot network question\nORDER BY DATEDIFF(minute, p.CreationDate, ph.CreationDate) DESC","CreationDate":"2020-05-11 10:57:45","validated":true,"QueryBody_Original":null},{"QuerySetId":1237844,"Title":"Get the tags that are used frequently together for a given tag","Description":"With inputs from this questions : https:\/\/meta.stackoverflow.com\/questions\/397374\/query-the-tags-that-appear-together-frequently","QueryBody":"SELECT  tt.tagname, count(*) [count] \nfrom posttags pt -- tags on posts\ninner join tags st on st.id = pt.tagid -- SELECTion tag\ninner join posttags ptt on ptt.postid = pt.postid -- other tags\ninner join tags tt on tt.id =  ptt.tagid -- other tag names\nwhere st.tagname = ##tagname:string?teradata##\nand tt.tagname <> ##tagname:string?teradata##\ngroup by tt.tagname\norder by count(*) desc","CreationDate":"2020-05-13 9:45:40","validated":true,"QueryBody_Original":null},{"QuerySetId":1239553,"Title":"Top 500 Posts with accepted answers between dates for a tag","Description":null,"QueryBody":"SELECT  TOP(500)  p.Id, p.Title, p.Body\nFROM Posts p\nJOIN PostTags pt ON p.Id = pt.PostId\nJOIN Tags t ON pt.TagId = t.Id\nJOIN Posts a ON p.AcceptedAnswerId = a.Id\nWHERE (t.TagName = ##TagName:string##) AND\n(p.AcceptedAnswerId IS NOT NULL) AND\n(p.CreationDate >= '##Date1?2016-01-01##') AND\n(p.CreationDate <= '##Date2?2019-12-31##')","CreationDate":"2020-05-17 18:16:09","validated":true,"QueryBody_Original":null},{"QuerySetId":1239858,"Title":"Questions by the given user with the given phrase in the title (case, accent insensitive)","Description":null,"QueryBody":"SELECT \n  Id AS [Post Link],\n  Score\nFROM Posts\nWHERE (PostTypeId=1) AND (OwnerUserId=##userid?25510##)\n  AND (Title Like '%##word?urgent##%' COLLATE Latin1_General_CI_AI)\nORDER BY Id","CreationDate":"2020-05-18 12:25:34","validated":true,"QueryBody_Original":null},{"QuerySetId":1240746,"Title":"Questions with a specific word in the initial body (length limit, case insensitive)","Description":null,"QueryBody":"SELECT p.Id AS [Post Link], ph.Text AS [Initial Title], concat('site:\/\/posts\/', p.Id, '\/revisions' ) [Revisions Link], p.OwnerUserId AS [User Link], p.Score, p.Tags, p.CreationDate FROM Posts p INNER JOIN PostHistory ph ON ph.PostId=p.Id WHERE (ph.PostHistoryTypeId=2) AND (p.PostTypeId=1) AND (len(ph.Text)<=##len?150##) AND (ph.Text Like '%##word?urgent##%' COLLATE Latin1_General_CI_AI) ORDER BY p.Id DESC","CreationDate":"2020-06-06 6:33:06","validated":true,"QueryBody_Original":null},{"QuerySetId":1240763,"Title":"Questions with tag1 and tag2, without tag3","Description":null,"QueryBody":"SELECT  q.Id as [Post Link], q.Tags, q.CreationDate, q.LastActivityDate\nFROM Posts q INNER JOIN PostTags pt ON q.Id=pt.PostId\nINNER JOIN Tags t ON t.id = pt.TagId\nWHERE t.TagName=##tag1:string?discrete-mathematics##\n  AND (q.Tags LIKE '%<##tag2?graph-theory##>%')\n  AND NOT(q.Tags LIKE '%<##tag3?co.combinatorics##>%')\nORDER BY q.CreationDate DESC","CreationDate":"2020-05-20 10:05:32","validated":true,"QueryBody_Original":null},{"QuerySetId":1250705,"Title":"Number of posts per month by the given users","Description":null,"QueryBody":"SELECT \n  eomonth(p.creationdate) AS Month,\n  u.Id AS [User Link],\n  Count(p.Id) AS Count\nFROM Users u INNER JOIN Posts p ON p.OwnerUserId=u.Id\nWHERE u.Id IN (##list?2,3,66,121,1409,2000,2926##)\nGROUP BY eomonth(p.creationdate), u.Id\nORDER BY eomonth(p.creationdate)","CreationDate":"2020-06-12 13:45:40","validated":true,"QueryBody_Original":"SELECT \n  eomonth(p.creationdate) AS Month,\n  u.Id AS [User Link],\n  Count(p.Id) AS Count\nFROM Users u INNER JOIN Posts p ON p.OwnerUserId=u.Id\nWHERE u.Id IN (##list?2,3,66,121,1409,2000,2926##)\nGROUP BY eomonth(p.creationdate), u.Id\nORDER BY eomonth(p.creationdate)"},{"QuerySetId":1252003,"Title":"Posthistory for a specific post","Description":null,"QueryBody":"SELECT \n  Id,\n  PostHistoryTypeId,\n  CASE PostHistoryTypeId \n   WHEN 1 THEN 'Initial Title'\n   WHEN 2 THEN 'Initial Body'\n   WHEN 3 THEN 'Initial Tags'\n   WHEN 4 THEN 'Edit Title'\n   WHEN 5 THEN 'Edit Body'\n   WHEN 6 THEN 'Edit Tags'   \n   WHEN 7 THEN 'Rollback Title'\n   WHEN 8 THEN 'Rollback Body'\n   WHEN 9 THEN 'Rollback Tags'\n  END, \n  CreationDate,\n  UserId AS [User Link], UserDisplayName,\n  Comment, Text\nFROM PostHistory\nWHERE PostId=##id?1##","CreationDate":"2020-06-16 18:41:56","validated":true,"QueryBody_Original":null},{"QuerySetId":1252021,"Title":"Questions answered by more than 3 \"Top N\" users","Description":"Thanks to https:\/\/codereview.stackexchange.com\/a\/244191\/103675 for the improvements!","QueryBody":"SELECT  Q.Id AS [Post Link], Q.AnswerCount\nFROM Posts Q\nWHERE Q.AnswerCount >= 3\nAND\n(\n  SELECT COUNT( DISTINCT A.OwnerUserId)\n  FROM Posts A\n  WHERE A.ParentId = Q.Id\n  AND A.OwnerUserId IN\n  (\n    SELECT TOP ##TopN## Id\n    FROM Users\n    ORDER BY Reputation DESC\n  )\n) = 3","CreationDate":"2020-06-23 16:59:34","validated":true,"QueryBody_Original":null},{"QuerySetId":1252482,"Title":"Number of edits before and after CW","Description":null,"QueryBody":"WITH  cw_cte as\n(SELECT\n  ph.Id AS cwid,\n  ph.PostId AS pid\nFROM PostHistory ph INNER JOIN Posts p ON ph.PostId=p.Id\nWHERE (ph.PostHistoryTypeId=16)\n---16 = Community Owned - post now community owned\n)\n\nSELECT TOP(##num?100##)\n  COUNT (DISTINCT RevisionGUID) AS [All edits],\n  SUM(CASE WHEN (ph.Id<c.cwid) THEN 1 ELSE 0 END) AS [Edits before CW],\n  SUM(CASE WHEN (ph.Id>c.cwid) THEN 1 ELSE 0 END) AS [Edits after CW],\n  ph.PostId AS [Post Link],\n  revisions = 'site:\/\/posts\/' + CAST(ph.PostId AS varchar)+'\/revisions'\nFROM cw_cte c INNER JOIN PostHistory ph ON (ph.PostId=c.pid) \nWHERE (ph.PostHistoryTypeId in (1,2,3,4,5,6,7,8,9))\n---only edits\nGROUP BY ph.PostId\nORDER BY ph.PostId DESC","CreationDate":"2020-06-17 17:14:51","validated":true,"QueryBody_Original":null},{"QuerySetId":1253112,"Title":"Suggested edit votes on a specific posts","Description":null,"QueryBody":"SELECT \n  sv.Id,\n  sv.CreationDate,\n  CASE sv.VoteTypeId\n    WHEN 2 THEN 'Approve'\n    WHEN 3 THEN 'Reject'\n  END AS Vote,\n  sv.UserId AS [User Link],\n  sv.TargetUserId AS [User Link],\n  sv.TargetRepChange,\n  sv.SuggestedEditId AS [Suggested Edit Link]\nFROM SuggestedEdits se INNER JOIN SuggestedEditVotes sv ON se.Id=sv.SuggestedEditId\nWHERE se.PostId=##postid?3376##\nORDER BY sv.Id","CreationDate":"2020-06-18 21:21:06","validated":true,"QueryBody_Original":null},{"QuerySetId":1253323,"Title":"Combined PostHistory (question and all the answers)","Description":null,"QueryBody":"SELECT \n  p.Id, \n  CASE \n    WHEN (p.ParentId IS NULL) \n    THEN 'Question'\n    ELSE 'Answer'\n  END,\n  ---ph.Id, \n  ---ph.CreationDate\n  ph.PostHistoryTypeId,\n  CASE ph.PostHistoryTypeId\n    WHEN 1 THEN 'Initial Title'\n    WHEN 2 THEN 'Initial Body'\n    WHEN 3 THEN 'Initial Tags'\n    WHEN 4 THEN 'Edit Title'\n    WHEN 5 THEN 'Edit Body'\n    WHEN 6 THEN 'Edit Tags'\n    WHEN 7 THEN 'Initial Title'\n    WHEN 8 THEN 'Initial Body'\n    WHEN 9 THEN 'Initial Tags'\n  END,\n  ph.UserId AS [User Link],\n  ph.Comment\nFROM PostHistory ph INNER JOIN Posts p ON p.Id=ph.PostId\nWHERE coalesce(p.parentid, p.id)=##qid?85211##\n---either the post or the parent has this id\nORDER BY ph.Id DESC","CreationDate":"2020-06-19 6:39:36","validated":true,"QueryBody_Original":null},{"QuerySetId":1255205,"Title":"Answers posted by users within specific creation date","Description":null,"QueryBody":"SELECT  *\nFROM Posts p\nINNER JOIN Users u ON u.Id = p.OwnerUserId \nWHERE convert(date, p.CreationDate) >= convert(date, ##Start:string##)\nAND convert(date, p.CreationDate) <= convert(date, ##End:string##)\nAND p.PostTypeId = 2\nORDER BY u.Id, convert(date, p.CreationDate)","CreationDate":"2020-06-24 11:23:54","validated":true,"QueryBody_Original":null},{"QuerySetId":1256324,"Title":"Get user information for users who first posted a question during specific time period","Description":null,"QueryBody":"SELECT  u.Id, u.Reputation, u.CreationDate, u.DisplayName, u.LastAccessDate, p.Id\nfrom (\n  SELECT OwnerUserId, MIN(CreationDate) as firstdate\n  from Posts\n  group by OwnerUserID ) as latest\n  inner join Posts as p on p.OwnerUserId = latest.OwnerUserId and p.CreationDate = latest.firstdate\n  inner join Users as u on u.Id = p.OwnerUserId\nwhere\n  convert(date, p.CreationDate) >= convert(date, ##Start:string##)\n  AND convert(date, p.CreationDate) <= convert(date, ##End:string##)\n  AND p.PostTypeId = 1","CreationDate":"2020-06-27 16:05:57","validated":true,"QueryBody_Original":null},{"QuerySetId":1257269,"Title":"Get comments to users' first answer posts between dates","Description":null,"QueryBody":"SELECT  c.PostId, c.Score, c.Text, c.CreationDate\nfrom (\n  SELECT OwnerUserId, MIN(CreationDate) as firstdate\n  from Posts\n  group by OwnerUserID ) as latest\n  inner join Posts as p on p.OwnerUserId = latest.OwnerUserId and p.CreationDate = latest.firstdate\n  inner join Comments as c on c.PostId = p.Id\nwhere\n  convert(date, p.CreationDate) >= convert(date, ##Start:string##)\n  AND convert(date, p.CreationDate) <= convert(date, ##End:string##)\n  AND p.PostTypeId = 2","CreationDate":"2020-06-30 12:13:38","validated":true,"QueryBody_Original":null},{"QuerySetId":1259149,"Title":"after how many hours after the first nomination of that election was in","Description":"after how many hours after the first nomination of that election was in","QueryBody":"WITH  nominations as \n(select row_number() over(order by creationdate asc) num\n      , creationdate\nfrom posts\nwhere posttypeid = 6\n)\n\nselect *\ninto #nominations\nfrom nominations\n\nselect f.num\n     , f.creationdate\n     , datediff(\n         d\n       , coalesce(\n          (select creationdate \n           from #nominations\n           where num = f.num -1)\n          , f.creationdate)\n       , f.creationdate) [diff]\ninto #nom_diff\nfrom #nominations f\norder by f.num\n\nselect row_number() over(order by num) [election]\n     , *\ninto #elections\nfrom (\nselect *\nfrom #nom_diff\nwhere num = 1\nunion\nselect *\nfrom #nom_diff\nwhere diff > 7\n) data\n\nselect *\nfrom #elections","CreationDate":"2020-07-05 23:59:03","validated":true,"QueryBody_Original":null},{"QuerySetId":1259600,"Title":"Average total score of users depending on number of posts","Description":null,"QueryBody":"WITH postgroups_cte AS (\nSELECT\n  u.Id AS uid,\n  SUM(p.Score) AS sco,\n  CAST(COUNT(p.Id)\/##mult?100## AS int) AS pgroup\n  FROM Users u INNER JOIN Posts p ON p.OwnerUserId=u.Id\n  GROUP BY u.Id\n)\n\nSELECT\n  pgroup,\n  AVG(CAST(sco AS decimal)) AS Average\nFROM postgroups_cte\nGROUP BY pgroup\nORDER BY pgroup DESC","CreationDate":"2020-07-07 5:24:39","validated":true,"QueryBody_Original":null},{"QuerySetId":1260991,"Title":"Questions with the highest number of bounties","Description":null,"QueryBody":"SELECT  TOP(##num?100##)\nRANK() OVER(ORDER BY Count(bs.Id) DESC) AS Rank,\nCOUNT(bs.Id) AS [Number of bounties],\nSUM(bs.BountyAmount) AS [Total amount],\np.Id AS [Post Link],\np.Score, p.AnswerCount, \np.OwnerUserId AS [User Link],\np.Tags\nFROM Posts p INNER JOIN Votes bs ON p.Id = bs.PostId\nWHERE bs.VoteTypeId = 8  -- BountyStart\nGROUP BY p.Id, p.Score, p.AnswerCount, p.OwnerUserId, p.Tags \nORDER BY COUNT(bs.Id) DESC","CreationDate":"2020-07-09 19:37:07","validated":true,"QueryBody_Original":null},{"QuerySetId":1261570,"Title":"Number of gold, silver, bronze badges for users from a list","Description":null,"QueryBody":"SELECT \n  UserId AS [User Link],\n  sum(case when class = 1 then 1 else 0 end) AS gold,\n  sum(case when class = 2 then 1 else 0 end) AS silver,\n  sum(case when class = 3 then 1 else 0 end) AS bronze,\n  count(Id) AS total\nFROM Badges\nWHERE UserId IN (##list?2,3,66,121,1409,2000,2926##)\nGROUP BY UserId\nORDER BY gold DESC, silver DESC, bronze DESC, total DESC","CreationDate":"2020-07-11 7:11:53","validated":true,"QueryBody_Original":"SELECT \n  UserId AS [User Link],\n  sum(case when class = 1 then 1 else 0 end) AS gold,\n  sum(case when class = 2 then 1 else 0 end) AS silver,\n  sum(case when class = 3 then 1 else 0 end) AS bronze,\n  count(Id) AS total\nFROM Badges\nWHERE UserId IN (##list?2,3,66,121,1409,2000,2926##)\nGROUP BY UserId\nORDER BY gold DESC, silver DESC, bronze DESC, total DESC"},{"QuerySetId":1261831,"Title":"Questions with short initial body","Description":null,"QueryBody":"SELECT  TOP(##num?100##)\n  p.Id AS [Post Link], \n  ph.Text AS [Initial Title], \n  concat('site:\/\/posts\/',\n        p.Id,\n        '\/revisions'\n        ) [Revisions Link],\n  p.OwnerUserId AS [User Link], p.Score, p.Tags, p.CreationDate\nFROM Posts p INNER JOIN PostHistory ph ON ph.PostId=p.Id\nWHERE (ph.PostHistoryTypeId=2) AND (p.PostTypeId=1) \n  AND (len(ph.Text)<=##len?150##)\nORDER BY p.Id DESC\n---PostHistoryTypeId (listed in the PostHistoryTypes table)\n---1 = Initial Title - initial title (questions only)\n---2 = Initial Body - initial post raw body text","CreationDate":"2020-07-12 12:46:25","validated":true,"QueryBody_Original":null},{"QuerySetId":1261938,"Title":"Find all users above given reputation (just names)","Description":null,"QueryBody":"SELECT \n  Id AS [User Link], DisplayName\nFROM Users   \nWHERE Reputation > ##rep?1000##\nORDER BY Id","CreationDate":"2020-07-12 18:52:07","validated":true,"QueryBody_Original":null},{"QuerySetId":1262581,"Title":"users assigned caucus badge between dates","Description":null,"QueryBody":"SELECT  b.name,\n    CONVERT(VARCHAR(10), b.Date, 111) [date],\n    CONVERT(VARCHAR(10), u.Reputation \/ 1000) + 'k' reputation,\n    count(*) [number of users]\nfrom users u\ninner join badges b on b.userid = u.id\nwhere b.name = ##badgename:string?Caucus## collate SQL_Latin1_General_Cp1_ci_ai\nand b.Date >= CONVERT(DATETIME, ##begindate:string?2020-07-06##,102)\nand  b.Date <= CONVERT(DATETIME, ##enddate:string?2020-07-13##,102)\nand tagbased = 0\ngroup by b.name, b.class, CONVERT(VARCHAR(10),b.Date, 111), u.Reputation \/ 1000\norder by  CONVERT(VARCHAR(10),b.Date, 111), u.Reputation \/ 1000, count(*)","CreationDate":"2020-07-13 17:59:08","validated":true,"QueryBody_Original":null},{"QuerySetId":1263093,"Title":"How many questions tagged with [tag] in retag\u2039","Description":null,"QueryBody":"DECLARE  @question int = 1;\nDECLARE @reTag int = 3;\nDECLARE @tagToSearch nvarchar(35) = ##tag:string?google-apps-script-web-application##;\n\n\nselect\ncast(Posts.CreationDate as date),\nPosts.Tags,\nPosts.Id as [Post Link]\nfrom\nPosts\nwhere\nPosts.PostTypeId = @question\nand\n  Posts.Tags = ('<' + @tagToSearch + '>' )\n\ngroup by\nPosts.Tags,Posts.Id, cast(Posts.CreationDate as date)\norder by\ncast(Posts.CreationDate as date) desc","CreationDate":"2020-08-10 9:37:20","validated":true,"QueryBody_Original":"DECLARE  @question int = 1;\nDECLARE @reTag int = 3;\nDECLARE @tagToSearch nvarchar(35) = ##tag:string?google-apps-script-web-application##;\n\n\nselect\ncast(Posts.CreationDate as date),\nPosts.Tags,\nPosts.Id as [Post Link]\nfrom\nPosts\nwhere\nPosts.PostTypeId = @question\nand\n  Posts.Tags = ('<' + @tagToSearch + '>' )\n\ngroup by\nPosts.Tags,Posts.Id, cast(Posts.CreationDate as date)\norder by\ncast(Posts.CreationDate as date) desc"},{"QuerySetId":1267286,"Title":"Posts tagged with tag that contain the tag as title prefix","Description":null,"QueryBody":"DECLARE  @tag nvarchar(35) = ##tag:string##\n\nselect\n  Id as [Post Link],\n  Tags,\n  Score,\n  AnswerCount as Answers\nfrom\n  Posts\nwhere\n  charindex(@tag,Tags) > 0\n  and\n  lower(Title) like replace(@tag,'-',' ') + '%'\n  and\n  ClosedDate is null\norder by\n  Score\ndesc","CreationDate":"2020-08-23 1:13:06","validated":true,"QueryBody_Original":"DECLARE  @tag nvarchar(35) = ##tag:string##\n\nselect\n  Id as [Post Link],\n  Tags,\n  Score,\n  AnswerCount as Answers\nfrom\n  Posts\nwhere\n  charindex(@tag,Tags) > 0\n  and\n  lower(Title) like replace(@tag,'-',' ') + '%'\n  and\n  ClosedDate is null\norder by\n  Score\ndesc"},{"QuerySetId":1268684,"Title":"Lowest reputation users with a specific badge","Description":null,"QueryBody":"SELECT  TOP(##num?500##)\n  RANK() OVER(ORDER BY u.Reputation ASC) AS Rank,\n  u.Id AS [User Link],\n  u.Reputation,\n  COUNT (b.Id) AS [Count]\nFROM Badges b INNER JOIN Users u ON b.UserId=u.Id\n  WHERE (b.Name = '##name?Famous Question##')\nGROUP BY u.Id, u.Reputation\nORDER BY u.Reputation ASC","CreationDate":"2020-07-29 11:00:13","validated":true,"QueryBody_Original":null},{"QuerySetId":1273464,"Title":"Users with at least n gold badges","Description":null,"QueryBody":"WITH  tagbadges_cte AS (\nSELECT\n  b.UserId AS uid,\n  sum(case when b.class = 1 then 1 else 0 end) AS gold,\n  sum(case when b.class = 2 then 1 else 0 end) AS silver,\n  sum(case when b.class = 3 then 1 else 0 end) AS bronze,\n  count(b.Id) AS total\nFROM Badges b INNER JOIN Tags t on t.TagName = Name\nGROUP BY UserId\n)\n\nSELECT TOP(##num?100##)\n  u.Id As [User Link],\n  u.Reputation,\n  b.gold, b.silver, b.bronze\nFROM tagbadges_cte b INNER JOIN Users u ON b.uid=u.Id\nWHERE (gold>=##min?5##)\nORDER BY gold DESC,silver DESC,bronze DESC","CreationDate":"2020-08-08 11:46:44","validated":true,"QueryBody_Original":null},{"QuerySetId":1293945,"Title":"Search comments by user ID and search term, by length of text","Description":null,"QueryBody":"SELECT  TOP 500\n  PostId AS [Post Link],\n  CreationDate,\n  Id AS [Comment Link]\nFROM\n  comments\nWHERE\n  UserId = '##UserId:int##'\n  AND LOWER(text) LIKE '%' + LOWER(##SearchString:string##) + '%'\nORDER BY LEN(text) ASC","CreationDate":"2020-09-13 16:01:31","validated":true,"QueryBody_Original":"SELECT  TOP 500\n  PostId AS [Post Link],\n  CreationDate,\n  Id AS [Comment Link]\nFROM\n  comments\nWHERE\n  UserId = '##UserId:int##'\n  AND LOWER(text) LIKE '%' + LOWER(##SearchString:string##) + '%'\nORDER BY LEN(text) ASC"},{"QuerySetId":1304813,"Title":"User with highest average comment score","Description":null,"QueryBody":"SELECT  TOP ##num?100##\nc.UserId AS [User Link], c.UserDisplayName,\nAVG(CAST(c.Score AS decimal)) AS [Average Score], SUM(c.Score) AS [Total Score], COUNT(c.Id) AS [Total Count],\n'site:\/\/users\/' + CAST(c.UserId AS varchar) + '?tab=activity&sort=comments' AS [Link to comments]\nFROM Comments c\nGROUP BY c.UserId, c.UserDisplayName\nHAVING COUNT(c.Score)>=##min?5##\nORDER BY AVG(CAST(c.Score AS decimal)) DESC","CreationDate":"2020-10-13 16:20:31","validated":true,"QueryBody_Original":null},{"QuerySetId":1307455,"Title":"Tag edits by a specific user between two dates","Description":null,"QueryBody":"SELECT \n  Text AS [Tags],\n  PostId AS [Post Link],\n  'site:\/\/posts\/' + CAST(PostId AS varchar)+'\/revisions' AS [Revision History],\n  CreationDate,\n  UserId AS [User Link]\nFROM PostHistory  \nWHERE (PostHistoryTypeId=6) AND \n  (UserId=##userid?14094##) AND \n  (CreationDate >= '##Date1?2020-01-01##') AND (CreationDate <= '##Date2?2021-01-01##')","CreationDate":"2020-10-09 13:59:54","validated":true,"QueryBody_Original":null},{"QuerySetId":1307996,"Title":"Top users for a tag","Description":null,"QueryBody":"DECLARE  @tagName nvarchar(35) = '##tagName##'\n\nSELECT TOP 200\n    ROW_NUMBER() OVER (ORDER BY TagName) AS [Rank],\n    Users.Id AS [User Link],\n    SUM(CASE votes.votetypeid \n            WHEN 2 THEN 1  -- upvote\n            WHEN 3 THEN -1  -- downvote\n            END) as [Tag score],\n    COUNT(DISTINCT(Posts.Id)) AS [Number of answers]\nFROM Tags\n    INNER JOIN PostTags ON PostTags.TagId = Tags.id\n    INNER JOIN Posts ON Posts.ParentId = PostTags.PostId\n    INNER JOIN Users ON Posts.OwnerUserId = Users.Id                \n    LEFT OUTER JOIN Votes ON Votes.PostId = Posts.Id\nWHERE Tags.TagName = @tagName\n    AND Posts.CommunityOwnedDate IS NULL\nGROUP BY TagName, Users.Id\nORDER BY 3 DESC","CreationDate":"2020-10-11 19:11:51","validated":true,"QueryBody_Original":"DECLARE  @tagName nvarchar(35) = '##tagName##'\n\nSELECT TOP 200\n    ROW_NUMBER() OVER (ORDER BY TagName) AS [Rank],\n    Users.Id AS [User Link],\n    SUM(CASE votes.votetypeid \n            WHEN 2 THEN 1  -- upvote\n            WHEN 3 THEN -1  -- downvote\n            END) as [Tag score],\n    COUNT(DISTINCT(Posts.Id)) AS [Number of answers]\nFROM Tags\n    INNER JOIN PostTags ON PostTags.TagId = Tags.id\n    INNER JOIN Posts ON Posts.ParentId = PostTags.PostId\n    INNER JOIN Users ON Posts.OwnerUserId = Users.Id                \n    LEFT OUTER JOIN Votes ON Votes.PostId = Posts.Id\nWHERE Tags.TagName = @tagName\n    AND Posts.CommunityOwnedDate IS NULL\nGROUP BY TagName, Users.Id\nORDER BY 3 DESC"},{"QuerySetId":1308442,"Title":"Newer Users with More Reputation Than Me","Description":"Find useres that have been members for a shorter time than me\nbut have more reputation points.\n","QueryBody":"DECLARE  @UserId int = ##UserId##\n\nselect u.id as [User Link], u.Reputation, u.Reputation - me.Reputation as Difference\nfrom users u cross join users me\nwhere me.id = @UserId\nand u.CreationDate > me.CreationDate\nand u.Reputation > me.Reputation\norder by Difference desc, u.CreationDate Desc","CreationDate":"2020-10-11 19:35:43","validated":true,"QueryBody_Original":"DECLARE  @UserId int = ##UserId##\n\nselect u.id as [User Link], u.Reputation, u.Reputation - me.Reputation as Difference\nfrom users u cross join users me\nwhere me.id = @UserId\nand u.CreationDate > me.CreationDate\nand u.Reputation > me.Reputation\norder by Difference desc, u.CreationDate Desc"},{"QuerySetId":1309162,"Title":"Answers on Closed Question by a User","Description":"shows all closed answers for the specified user","QueryBody":"SELECT p.id as [Post Link] FROM Posts p LEFT JOIN Posts Q ON Q.Id = P.ParentId WHERE p.OwnerUserId = ##USERID## AND p.PostTypeId = 2 AND Q.ClosedDate IS NOT NULL ORDER BY p.CreationDate","CreationDate":"2020-10-21 3:56:09","validated":true,"QueryBody_Original":"SELECT p.id as [Post Link] FROM Posts p LEFT JOIN Posts Q ON Q.Id = P.ParentId WHERE p.OwnerUserId = ##USERID## AND p.PostTypeId = 2 AND Q.ClosedDate IS NOT NULL ORDER BY p.CreationDate"},{"QuerySetId":1310900,"Title":"Since when I upvoted this answer?","Description":"I find myself frequently looking for answer in StackExchange websites and found that I've already upvoted the useful answers, but I don't know since when I upvoted this answer.\n\n\nThis query can tell me since when I upvote this answer\/post?\n\n\nanswers\/question -> Posts table","QueryBody":"DECLARE  @UserId int = ##UserId##\nDECLARE @PostId int = ##PostId##\n\n\nSELECT *\nFROM Votes\nWHERE PostId = @PostId\nAND UserId = @UserId","CreationDate":"2020-10-17 20:32:03","validated":true,"QueryBody_Original":"DECLARE  @UserId int = ##UserId##\nDECLARE @PostId int = ##PostId##\n\n\nSELECT *\nFROM Votes\nWHERE PostId = @PostId\nAND UserId = @UserId"},{"QuerySetId":1311362,"Title":"User with most famous\/notable\/popular badges","Description":null,"QueryBody":"SELECT  TOP(##num?200##)\n  UserId AS [User Link],\n  sum(case when class = 1 then 1 else 0 end) AS gold,\n  sum(case when class = 2 then 1 else 0 end) AS silver,\n  sum(case when class = 3 then 1 else 0 end) AS bronze,\n  count(Id) AS total\nFROM Badges\nWHERE (Name = '##name1?Famous Question##') OR (Name = '##name2?Notable Question##') OR  (Name = '##name3?Popular Question##')\nGROUP BY UserId\nORDER BY gold DESC, silver DESC, bronze DESC, total DESC","CreationDate":"2020-10-18 18:43:50","validated":true,"QueryBody_Original":null},{"QuerySetId":1313326,"Title":"Comments are like an encylopedia","Description":null,"QueryBody":"SELECT  p.PostId AS [Post Link],\n       p.Comment,\n       p.UserId AS [User Link]\nFROM PostHistory p\nWHERE p.UserId = ##UserId##\n  AND p.PostHistoryTypeId = 5 -- Edit Body\n  AND p.Comment LIKE '%encyclopedia%'","CreationDate":"2020-10-22 4:44:13","validated":true,"QueryBody_Original":"SELECT  p.PostId AS [Post Link],\n       p.Comment,\n       p.UserId AS [User Link]\nFROM PostHistory p\nWHERE p.UserId = ##UserId##\n  AND p.PostHistoryTypeId = 5 -- Edit Body\n  AND p.Comment LIKE '%encyclopedia%'"},{"QuerySetId":1315590,"Title":"Average Score in Top 5 Tags","Description":null,"QueryBody":"SELECT TOP (5)\n  Tags.tagName,\n  SUM(CASE WHEN Posts.PostTypeId = 1 THEN Posts.Score ELSE 0 END)\n    AS [Total Question Score],\n  COUNT(*) AS [Post Count],\n  SUM(Posts.Score) AS [Total Score],\n  COUNT(*) AS [Post Count],\n  ROUND(AVG(CAST(Posts.Score AS FLOAT)), 1, 1) AS [Average Score]\nFROM Posts\nJOIN PostTags\n  ON Posts.Id = PostTags.PostId OR Posts.ParentId = PostTags.PostId\nJOIN Tags\n  ON PostTags.TagId = Tags.Id\nGROUP BY Tags.tagName\nORDER BY [Average Score] DESC","CreationDate":"2020-10-26 20:37:39","validated":true,"QueryBody_Original":null},{"QuerySetId":1337178,"Title":"Answers to the given question ordered by last activity","Description":null,"QueryBody":"SELECT \n  a.Id AS [Post Link],\n  a.LastActivityDate,\n  a.OwnerUserId AS [User Link],\n  a.OwnerDisplayName,\n  a.Score\nFROM Posts q INNER JOIN Posts a ON a.ParentId=q.Id\nWHERE (q.Id=##id?17209##)\nORDER BY a.LastActivityDate DESC","CreationDate":"2020-11-26 13:10:33","validated":true,"QueryBody_Original":null},{"QuerySetId":1344742,"Title":"Recent 250 suggested edits on tag-infos","Description":null,"QueryBody":"SELECT  TOP(##num?250##)\n  s.Id AS [Suggested Edit Link],  \n  concat(\n          'site:\/\/tags\/',\n          t.tagname,\n          '\/info|',\n          t.tagname,\n          ' ',\n          case when p.posttypeid = 4 then 'excerpt' else 'wiki' end\n          ) [Tag Link],\n   s.OwnerUserId AS [User Link], s.CreationDate\nFROM SuggestedEdits s LEFT OUTER JOIN Posts p ON s.PostId=p.Id\n  left outer join tags t on (t.wikipostid = p.id or t.excerptpostid = p.id)\nWHERE p.PostTypeId IN (4,5)  \nORDER BY s.Id DESC","CreationDate":"2020-12-10 11:56:11","validated":true,"QueryBody_Original":null},{"QuerySetId":1344748,"Title":"Recent 250 suggested edits on tag-infos (only pending)","Description":null,"QueryBody":"SELECT  TOP(##num?250##)\n  s.Id AS [Suggested Edit Link],  \n  concat(\n          'site:\/\/tags\/',\n          t.tagname,\n          '\/info|',\n          t.tagname,\n          ' ',\n          case when p.posttypeid = 4 then 'excerpt' else 'wiki' end\n          ) [Tag Link],\n   s.OwnerUserId AS [User Link], s.CreationDate\nFROM SuggestedEdits s LEFT OUTER JOIN Posts p ON s.PostId=p.Id\n  left outer join tags t on (t.wikipostid = p.id or t.excerptpostid = p.id)\nWHERE p.PostTypeId IN (4,5)  \n  AND ApprovalDate IS NULL\n  AND RejectionDate IS NULL\nORDER BY s.Id DESC","CreationDate":"2020-12-10 14:42:00","validated":true,"QueryBody_Original":null}]