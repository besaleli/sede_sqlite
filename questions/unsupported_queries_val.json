[{"QuerySetId":3055,"Title":"Users with 10+ Accounts Including Reputation","Description":"A copy of http:\/\/odata.stackexchange.com\/stackoverflow\/s\/88\/users-with-more-than-10-duplicate-accounts with reputation included. I thought it would be interesting to see if the multiple accounts were being used to  boost one.\n","QueryBody":"SELECT\n    sum(u1.Reputation) AS TotalRep,\n    max(u1.Reputation) AS RepMaxID,\n    u1.EmailHash,\n    Count(u1.Id) AS Accounts,\n(SELECT Cast(u2.Id AS varchar) + ' (' + u2.DisplayName + ' (' + Cast(u2.Reputation AS varchar) + ')), ' FROM Users u2 WHERE u2.EmailHash = u1.EmailHash ORDER BY u2.Reputation DESC FOR XML PATH ('') ) AS IdsNameRep\nFROM\n    Users u1\nWHERE\n    u1.EmailHash IS NOT NULL\nGROUP BY\n    u1.EmailHash\nHAVING\n    Count(u1.Id) > 10\nORDER BY\n    TotalRep DESC","CreationDate":"2010-06-13 21:30:53","validated":true,"QueryBody_Original":null},{"QuerySetId":3525,"Title":"Top Answerers for a Given Tag","Description":"The Stats of a Tag only gives the Top-20 answerers. This query can list more of them and give other info as well.\n","QueryBody":"SELECT  TOP ##n##\n  Users.Id as [User Link],\n  COUNT(Answers.Id) as Answers\nFROM Tags    \n  JOIN PostTags ON PostTags.TagId = Tags.Id\n  JOIN Posts ON Posts.Id = PostTags.PostId \n  JOIN Posts as Answers ON Answers.ParentId = Posts.Id\n  JOIN Users ON Users.Id = Answers.OwnerUserId\nWHERE    \n  Tags.TagName = '##TagName##'\nGROUP BY \n  Users.Id\nORDER BY \n  Answers DESC","CreationDate":"2020-09-19 13:25:14","validated":true,"QueryBody_Original":null},{"QuerySetId":4617,"Title":"Question I answered with no accepted answer","Description":"Question I answered with no accepted answer\n","QueryBody":"SELECT p2.Id as QuestionId, P2.Title as QuestionTitle, Count(p3.Id) as NumberOfAnswer\nFROM Posts p1, Posts p2, Posts p3\nWHERE p1.PostTypeId=2 \n  AND p1.OwnerUserId=##UserId## \n  AND p1.ParentId=p2.Id \n  AND P2.AcceptedAnswerId is null\n  AND p3.ParentId=p2.id\nGROUP BY p2.Id, P2.Title\nORDER BY NumberOfAnswer DESC","CreationDate":"2010-06-20 17:31:29","validated":true,"QueryBody_Original":"SELECT p2.Id as QuestionId, P2.Title as QuestionTitle, Count(p3.Id) as NumberOfAnswer\nFROM Posts p1, Posts p2, Posts p3\nWHERE p1.PostTypeId=2 \n  AND p1.OwnerUserId=##UserId## \n  AND p1.ParentId=p2.Id \n  AND P2.AcceptedAnswerId is null\n  AND p3.ParentId=p2.id\nGROUP BY p2.Id, P2.Title\nORDER BY NumberOfAnswer DESC"},{"QuerySetId":7753,"Title":"Does a user have any flagged posts?","Description":null,"QueryBody":"SELECT  id as id from Users\n\nSELECT\n p.Id as [Post Link],\n (\n  SELECT count(v.Id) from Votes v\n  where v.PostId = p.Id and (v.VoteTypeId = 4 or v.VoteTypeId = 12 or v.VoteTypeId = 13)\n ) as Flags\nfrom Posts p\nwhere p.OwnerUserId = id","CreationDate":"2015-07-26 6:34:43","validated":true,"QueryBody_Original":null},{"QuerySetId":13710,"Title":"Compare Answers To Common Question Vs. Another User","Description":"And updated query to the query \"Jon Skeet comparison\" that allows for comparison against any user.","QueryBody":"DECLARE  @UserId int = ##UserId##;\nDECLARE @OpponentUserId int = ##OpponentUserId##;\n\nwith fights as (\n  select myAnswer.ParentId as Question,\n   myAnswer.Score as MyScore,\n   opponentAnswer.Score as OpponentScore\n  from Posts as myAnswer\n  inner join Posts as opponentAnswer\n   on opponentAnswer.OwnerUserId = @OpponentUserId and myAnswer.ParentId = opponentAnswer.ParentId\n  where myAnswer.ownerUserId = @UserId and myAnswer.postTypeId = 2\n)\n\nselect\n  case\n   when myScore > OpponentScore then 'You win'\n   when myScore < OpponentScore then 'You lose'\n   else 'Tie'\n  end as 'Winner',\n  Question as [Post Link],\n  myScore as 'My score',\n  OpponentScore as \"Opponent's score\"\nfrom fights;","CreationDate":"2010-11-04 20:25:36","validated":true,"QueryBody_Original":"DECLARE  @UserId int = ##UserId##;\nDECLARE @OpponentUserId int = ##OpponentUserId##;\n\nwith fights as (\n  select myAnswer.ParentId as Question,\n   myAnswer.Score as MyScore,\n   opponentAnswer.Score as OpponentScore\n  from Posts as myAnswer\n  inner join Posts as opponentAnswer\n   on opponentAnswer.OwnerUserId = @OpponentUserId and myAnswer.ParentId = opponentAnswer.ParentId\n  where myAnswer.ownerUserId = @UserId and myAnswer.postTypeId = 2\n)\n\nselect\n  case\n   when myScore > OpponentScore then 'You win'\n   when myScore < OpponentScore then 'You lose'\n   else 'Tie'\n  end as 'Winner',\n  Question as [Post Link],\n  myScore as 'My score',\n  OpponentScore as \"Opponent's score\"\nfrom fights;"},{"QuerySetId":15605,"Title":"My Keystrokes per rep point","Description":null,"QueryBody":"DECLARE  @UserId int = ##UserId##\n\nSelect u.Id As [User Link], \n   (sum(coalesce(datalength(p.Body),0)) + sum(coalesce(datalength(p.Title),0))) As keystrokes, \n   u.Reputation, \n   (sum(coalesce(datalength(p.Body),0)) + sum(coalesce(datalength(p.Title),0)))\/u.Reputation As rate \nFrom users u inner join posts p  on p.OwnerUserId = u.Id\nWhere  u.id = @UserId \nGroup By u.Id, u.Reputation\nOrder By rate Asc","CreationDate":"2010-12-03 0:10:46","validated":true,"QueryBody_Original":"DECLARE  @UserId int = ##UserId##\n\nSelect u.Id As [User Link], \n   (sum(coalesce(datalength(p.Body),0)) + sum(coalesce(datalength(p.Title),0))) As keystrokes, \n   u.Reputation, \n   (sum(coalesce(datalength(p.Body),0)) + sum(coalesce(datalength(p.Title),0)))\/u.Reputation As rate \nFrom users u inner join posts p  on p.OwnerUserId = u.Id\nWhere  u.id = @UserId \nGroup By u.Id, u.Reputation\nOrder By rate Asc"},{"QuerySetId":15691,"Title":"Top scored answers for a given question","Description":"\n","QueryBody":"WITH  x as(\n\nSELECT Posts.ParentId,Posts.body, Posts.Score, ROW_NUMBER()\nOVER(PARTITION BY Posts.ParentId ORDER BY Posts.Score desc) num\nFROM Posts where posts.PostTypeId =2\n)\n\nSelect  x.num as [rank], x.Score,x.body from X \nwhere x.ParentId = ##QuestionID:int##","CreationDate":"2010-12-03 21:17:54","validated":true,"QueryBody_Original":null},{"QuerySetId":15758,"Title":"Show the users in a specified reputation range, with ratio of answers accepted.\n","Description":"Show the users in a specified reputation range, with ratio of answers accepted.\n","QueryBody":"DECLARE  @RepMin int = ##RepMin##\nDECLARE @RepMax int = ##RepMax##\n\nSELECT\n    u.DisplayName, u.Reputation,\n    u.Id,\n    Count(a.ID) as AcceptCount,\n    (SELECT Count(*) FROM Posts WHERE OwnerUserId = u.Id AND PostTypeId = 2) as AnswerCount,\n    (CAST(Count(a.Id) AS float) \/ (SELECT Count(*) FROM Posts WHERE OwnerUserId = u.Id AND PostTypeId = 2) * 100) AS AcceptedPercentage\nFROM\n    Posts q\n  INNER JOIN\n    Posts a ON q.AcceptedAnswerId = a.Id\n  INNER JOIN\n    Users u on u.Id = a.OwnerUserId\nWHERE\n    (u.Reputation >= @RepMin and u.Reputation <= @RepMax)\n  AND\n    a.PostTypeId = 2\nGROUP BY u.Id, u.DisplayName, u.Reputation\nORDER BY AcceptedPercentage DESC","CreationDate":"2010-12-05 2:16:01","validated":true,"QueryBody_Original":"DECLARE  @RepMin int = ##RepMin##\nDECLARE @RepMax int = ##RepMax##\n\nSELECT\n    u.DisplayName, u.Reputation,\n    u.Id,\n    Count(a.ID) as AcceptCount,\n    (SELECT Count(*) FROM Posts WHERE OwnerUserId = u.Id AND PostTypeId = 2) as AnswerCount,\n    (CAST(Count(a.Id) AS float) \/ (SELECT Count(*) FROM Posts WHERE OwnerUserId = u.Id AND PostTypeId = 2) * 100) AS AcceptedPercentage\nFROM\n    Posts q\n  INNER JOIN\n    Posts a ON q.AcceptedAnswerId = a.Id\n  INNER JOIN\n    Users u on u.Id = a.OwnerUserId\nWHERE\n    (u.Reputation >= @RepMin and u.Reputation <= @RepMax)\n  AND\n    a.PostTypeId = 2\nGROUP BY u.Id, u.DisplayName, u.Reputation\nORDER BY AcceptedPercentage DESC"},{"QuerySetId":15762,"Title":"Questions with more than two required tags (Meta sites only)","Description":"Finds all questions with more than two of: [support], [discussion], [feature-request], [bug].\n","QueryBody":"WITH  more than two required tags (Meta sites only)\n-- Finds all questions WITH more than two of: [support], [discussion], [feature-request], [bug].\n\nWITH RequiredTagIds AS\n(\n    SELECT Id\n        FROM Tags\n        WHERE TagName IN ('support', 'discussion', 'feature-request', 'bug')\n)\nSELECT\n    Id AS [Post Link],\n    RequiredTagCount\n    FROM\n    (\n        SELECT\n            p.Id,\n            (\n                SELECT COUNT(*) FROM PostTags pt\n                    WHERE\n                        (pt.PostId = p.Id) AND\n                        (pt.TagId IN (SELECT Id FROM RequiredTagIds))\n            ) AS RequiredTagCount\n            FROM Posts p\n            WHERE p.PostTypeId = 1\n    ) a\n    WHERE RequiredTagCount > 2","CreationDate":"2010-12-05 21:37:05","validated":true,"QueryBody_Original":null},{"QuerySetId":25441,"Title":"Which of my posts have been downvoted?","Description":"Lets you see where you went wrong.\n","QueryBody":"DECLARE  @UserId int = ##UserId##\n\nSELECT p.Id as [Post Link],\n       (SELECT COUNT(1)\n        FROM Votes v\n        JOIN VoteTypes t ON v.VoteTypeId = t.Id\n        WHERE v.PostId = p.Id\n        AND t.Name = 'UpMod') as Upvotes,\n       (SELECT COUNT(1)\n        FROM Votes v\n        JOIN VoteTypes t ON v.VoteTypeId = t.Id\n        WHERE v.PostId = p.Id\n        AND t.Name = 'DownMod') as Downvotes\nFROM Posts p\nWHERE p.OwnerUserId = @UserId\nORDER BY Downvotes DESC, Upvotes DESC","CreationDate":"2011-01-26 22:27:27","validated":true,"QueryBody_Original":"DECLARE  @UserId int = ##UserId##\n\nSELECT p.Id as [Post Link],\n       (SELECT COUNT(1)\n        FROM Votes v\n        JOIN VoteTypes t ON v.VoteTypeId = t.Id\n        WHERE v.PostId = p.Id\n        AND t.Name = 'UpMod') as Upvotes,\n       (SELECT COUNT(1)\n        FROM Votes v\n        JOIN VoteTypes t ON v.VoteTypeId = t.Id\n        WHERE v.PostId = p.Id\n        AND t.Name = 'DownMod') as Downvotes\nFROM Posts p\nWHERE p.OwnerUserId = @UserId\nORDER BY Downvotes DESC, Upvotes DESC"},{"QuerySetId":26416,"Title":"Questions asked over a year ago with score <= 0, no answers, low views proportional to age, one or less comments\n","Description":"Questions asked over a year ago with score <= 0, no answers, low views proportional to age, one or less comments\n","QueryBody":"WITH  a last activity date over a year ago, score <= 0, low views, no comments, no answers\n\nSELECT TOP 20000\np.Score, p.Id AS [Post Link], p.ViewCount, p.Tags, DATEDIFF(day, p.CreationDate, GETUTCDATE()) as DaysOld\nFROM Posts p\nWHERE \np.PostTypeId = 1 AND \np.ViewCount < DATEDIFF(day, p.CreationDate, GETUTCDATE()) * 1.5 AND \np.Score < 1 AND \nISNULL(p.AnswerCount,0) = 0 AND\nISNULL(p.CommentCount,0) <= 1 AND \nDATEDIFF(day, p.CreationDate, GETUTCDATE()) > 365\nORDER BY p.Score, p.ViewCount","CreationDate":"2019-10-19 4:36:27","validated":true,"QueryBody_Original":null},{"QuerySetId":31506,"Title":"Users active in the last two months with reputation over 500 and less than one vote per day since joining the site.\n","Description":"Users active in the last two months with reputation over 500 and less than one vote per day since joining the site.\n","QueryBody":"WITH  Low Participation in Voting\n-- Users active in the last two months WITH reputation over 500 and less than one vote per day since joining the site.\n\nselect\n  id as [User Link],\n  Reputation as Rep,\n  UpVotes + DownVotes as \"Votes\",\n  UpVotes as \"Up\",\n  DownVotes as \"Down\",\n  round((UpVotes + DownVotes + 0.0) \/ datediff(day,CreationDate,(SELECT MAX(LastActivityDate) FROM Posts)),3) as \"Per Day\"\nfrom Users\nwhere Reputation > 500\n  and datediff(month,LastAccessDate,(SELECT MAX(LastActivityDate) FROM Posts)) < 2\n  and (UpVotes + DownVotes) \/ datediff(day,CreationDate,(SELECT MAX(LastActivityDate) FROM Posts)) < 1\norder by \"Per Day\" asc","CreationDate":"2012-03-29 0:46:19","validated":true,"QueryBody_Original":null},{"QuerySetId":32821,"Title":"Search user by email hash","Description":null,"QueryBody":"SELECT  \n    u1.EmailHash,\n    Count(u1.Id) AS Accounts,\n    (SELECT Cast(u2.Id AS varchar) + ' (' + u2.DisplayName + '), ' FROM Users u2 WHERE u2.EmailHash = u1.EmailHash FOR XML PATH ('')) AS IdsAndNames,\n    u1.Id as [User Link]\nFROM\n    Users u1\nWHERE\n    u1.EmailHash = '##EmailHash##'\nGROUP BY\n    u1.EmailHash,u1.Id\nHAVING\n    Count(u1.Id) >= 1\nORDER BY \n    Accounts DESC","CreationDate":"2011-04-18 9:03:09","validated":true,"QueryBody_Original":null},{"QuerySetId":38284,"Title":"The longest answers by an user.","Description":"To find those that required a lot of work. :-)\nOr a copy\/paste. :-(\n","QueryBody":"SELECT  TOP 1000 Id AS [Post Link], LEN(Body) AS Length, LastActivityDate AS [Last Activity Date]  FROM Posts WHERE PostTypeId = 2 AND OwnerUserId = ##UserId## ORDER BY Length DESC","CreationDate":"2011-06-20 5:14:09","validated":true,"QueryBody_Original":"SELECT  TOP 1000 Id AS [Post Link], LEN(Body) AS Length, LastActivityDate AS [Last Activity Date]  FROM Posts WHERE PostTypeId = 2 AND OwnerUserId = ##UserId## ORDER BY Length DESC"},{"QuerySetId":44233,"Title":"Top100 Ranked Users by Location","Description":"Top 100 users by reputation from a location\n","QueryBody":"SELECT  top 100 \n   id as [User Link],\n   reputation,\n   row_number() over(order by reputation desc) as 'Rank'\nfrom Users with (nolock)\nwhere lower(location) like '%' + lower(##Location:string##) + '%'\norder by reputation desc","CreationDate":"2011-08-14 7:43:53","validated":true,"QueryBody_Original":"SELECT  top 100 \n   id as [User Link],\n   reputation,\n   row_number() over(order by reputation desc) as 'Rank'\nfrom Users with (nolock)\nwhere lower(location) like '%' + lower(##Location:string##) + '%'\norder by reputation desc"},{"QuerySetId":44811,"Title":"Which of my edits to other people's posts where edited later by someone else?","Description":"These are edits which seem to have been not quite as good as possible.\n(This query takes quite some time - 53 seconds for me on sunday morning)\n","QueryBody":"DECLARE  @UserId int = ##UserId##\n\nSELECT Distinct\n    my.PostId AS [Post Link], my.Id, type.Name, other.UserId\n    FROM Posts p\n    JOIN PostHistory my ON p.Id = my.PostId\n    JOIN PostHistory other ON p.Id = other.PostId \n    JOIN PostHistoryTypes type ON my.PostHistoryTypeId = type.Id\n    ORDER BY my.Id DESC","CreationDate":"2013-03-01 22:55:24","validated":true,"QueryBody_Original":"DECLARE  @UserId int = ##UserId##\n\nSELECT Distinct\n    my.PostId AS [Post Link], my.Id, type.Name, other.UserId\n    FROM Posts p\n    JOIN PostHistory my ON p.Id = my.PostId\n    JOIN PostHistory other ON p.Id = other.PostId \n    JOIN PostHistoryTypes type ON my.PostHistoryTypeId = type.Id\n    ORDER BY my.Id DESC"},{"QuerySetId":45319,"Title":"Average Answer Score by Content Length","Description":"Investigating the effects of tl;dr","QueryBody":"SELECT \n  (len(body)\/##ChunkSize:int##) * ##ChunkSize## AS size,\n  avg(CAST(score AS float)) AS \"average answer score\",\n  (SELECT MAX(score) \n     FROM (SELECT TOP 50 percent score\n           FROM Posts as PU\n           WHERE PostTypeId=2\n           ORDER BY Score\n           ) as t\n     ) AS \"median answer score\",\n  count(*) AS answers\nFROM posts\nWHERE posttypeid=2\nGROUP BY len(body)\/##ChunkSize##\nORDER BY size;","CreationDate":"2019-09-04 6:43:24","validated":true,"QueryBody_Original":null},{"QuerySetId":45578,"Title":"Top 100 Users In A Given Tag","Description":"\nWhat better way to learn interesting things about tags you are interested in than to check out the top 100 users in that tag?\n\nInspired by this query:\n\nhttp:\/\/data.stackexchange.com\/stackoverflow\/s\/1688\/c-top100-users\n","QueryBody":"DECLARE  @TagName nvarchar(25) = ##Tag:string##\n\nSELECT TOP 100\n    u.Id as [User Link],\n    COUNT(*) AS UpVotes \nFROM Tags t with (nolock)\n    INNER JOIN PostTags pt with (nolock)ON pt.TagId = t.id\n    INNER JOIN Posts p with (nolock) ON p.ParentId = pt.PostId\n    INNER JOIN Votes v with (nolock) ON v.PostId = p.Id and v.VoteTypeId = 2\n    inner join Users u with (nolock) on u.Id = p.OwnerUserId\nWHERE \n    p.CommunityOwnedDate IS NULL\n    and t.TagName = @TagName\nGROUP BY u.Id\nORDER BY UpVotes DESC","CreationDate":"2019-08-07 10:58:47","validated":true,"QueryBody_Original":"DECLARE  @TagName nvarchar(25) = ##Tag:string##\n\nSELECT TOP 100\n    u.Id as [User Link],\n    COUNT(*) AS UpVotes \nFROM Tags t with (nolock)\n    INNER JOIN PostTags pt with (nolock)ON pt.TagId = t.id\n    INNER JOIN Posts p with (nolock) ON p.ParentId = pt.PostId\n    INNER JOIN Votes v with (nolock) ON v.PostId = p.Id and v.VoteTypeId = 2\n    inner join Users u with (nolock) on u.Id = p.OwnerUserId\nWHERE \n    p.CommunityOwnedDate IS NULL\n    and t.TagName = @TagName\nGROUP BY u.Id\nORDER BY UpVotes DESC"},{"QuerySetId":46342,"Title":"Find out if two users have ever answered the same question.","Description":"Find out if two users have ever answered the same question.\n","QueryBody":"DECLARE  @MyUserId int = ##MyUserId##; -- 176569;\nDECLARE @OtherUserId int = ##OtherUserId##; -- 179573;\n\n  select myAnswer.ParentId as QuestionId,\n   question.Title as QuestionTitle,\n   myAnswer.Score as MyScore,\n   otherAnswer.Score as otherScore\n  from Posts as myAnswer\n  inner join Posts as otherAnswer\n   on otherAnswer.OwnerUserId = @OtherUserId \n  inner join Posts as question\n   on question.id = myAnswer.ParentId\n  and myAnswer.ParentId = otherAnswer.ParentId\n  where myAnswer.ownerUserId = @MyUserId \n  and myAnswer.postTypeId = 2","CreationDate":"2011-09-04 19:07:45","validated":true,"QueryBody_Original":"DECLARE  @MyUserId int = ##MyUserId##; -- 176569;\nDECLARE @OtherUserId int = ##OtherUserId##; -- 179573;\n\n  select myAnswer.ParentId as QuestionId,\n   question.Title as QuestionTitle,\n   myAnswer.Score as MyScore,\n   otherAnswer.Score as otherScore\n  from Posts as myAnswer\n  inner join Posts as otherAnswer\n   on otherAnswer.OwnerUserId = @OtherUserId \n  inner join Posts as question\n   on question.id = myAnswer.ParentId\n  and myAnswer.ParentId = otherAnswer.ParentId\n  where myAnswer.ownerUserId = @MyUserId \n  and myAnswer.postTypeId = 2"},{"QuerySetId":46351,"Title":"Who are answering the same questions as me? List those users that have answered at least two questions which I have also answered","Description":"List those users that have answered at least two questions which I have also answered\n","QueryBody":"DECLARE  @MyUserId int = ##MyUserId##; -- 176569;\n\nselect count(distinct myAnswer.ParentId) as QuestionCount,\n otherAnswer.OwnerUserId as [User Link]\nfrom Posts as myAnswer, Posts as otherAnswer\nwhere otherAnswer.OwnerUserId != @MyUserId \n and myAnswer.ownerUserId = @MyUserId   \n and myAnswer.ParentId = otherAnswer.ParentId\n and otherAnswer.postTypeId = 2\n and myAnswer.postTypeId = 2\ngroup by otherAnswer.OwnerUserId\nhaving count(distinct myAnswer.ParentId) > 1\norder by QuestionCount desc ","CreationDate":"2011-09-04 19:28:10","validated":true,"QueryBody_Original":"DECLARE  @MyUserId int = ##MyUserId##; -- 176569;\n\nselect count(distinct myAnswer.ParentId) as QuestionCount,\n otherAnswer.OwnerUserId as [User Link]\nfrom Posts as myAnswer, Posts as otherAnswer\nwhere otherAnswer.OwnerUserId != @MyUserId \n and myAnswer.ownerUserId = @MyUserId   \n and myAnswer.ParentId = otherAnswer.ParentId\n and otherAnswer.postTypeId = 2\n and myAnswer.postTypeId = 2\ngroup by otherAnswer.OwnerUserId\nhaving count(distinct myAnswer.ParentId) > 1\norder by QuestionCount desc "},{"QuerySetId":50151,"Title":"A user's questions not voted by a Voter","Description":"Select all posts (questions and answers) from 'Owner' that have not\nbeen voted by 'Voter'\n","QueryBody":"SELECT  Type, Title FROM (\n(SELECT Id, 'Question' Type, Title FROM Posts\nWHERE PostTypeID=1)\nUNION ALL\n(SELECT A.Id, 'Answer' Type, Q.Title FROM Posts A\nINNER JOIN Posts Q ON Q.Id=A.ParentID)\n)O\nLEFT JOIN (SELECT PostId FROM Votes WHERE UserId=##Voter##)V\n ON V.PostId=O.Id\nWHERE V.PostId IS NULL","CreationDate":"2015-05-01 15:38:25","validated":true,"QueryBody_Original":"SELECT  Type, Title FROM (\n(SELECT Id, 'Question' Type, Title FROM Posts\nWHERE PostTypeID=1)\nUNION ALL\n(SELECT A.Id, 'Answer' Type, Q.Title FROM Posts A\nINNER JOIN Posts Q ON Q.Id=A.ParentID)\n)O\nLEFT JOIN (SELECT PostId FROM Votes WHERE UserId=##Voter##)V\n ON V.PostId=O.Id\nWHERE V.PostId IS NULL"},{"QuerySetId":50166,"Title":"Look for all questions where two users have contributed with any of question, answer or comment\n","Description":"Look for all questions where two users have contributed with any of question, answer or comment\n","QueryBody":"SELECT  coalesce(parentid,id)  \nfrom posts \nwhere owneruserid=##UserA## --1396\n intersect\nSELECT coalesce(parentid,id) \nfrom posts \nwhere owneruserid=##UserB## --807\n order by coalesce(parentid,id) desc","CreationDate":"2013-10-27 16:35:07","validated":true,"QueryBody_Original":"SELECT  coalesce(parentid,id)  \nfrom posts \nwhere owneruserid=##UserA## --1396\n intersect\nSELECT coalesce(parentid,id) \nfrom posts \nwhere owneruserid=##UserB## --807\n order by coalesce(parentid,id) desc"},{"QuerySetId":54489,"Title":"This query shows the ratio between the number of posts and the number of accepted posts AKA accuracy\n","Description":"This query shows the ratio between the number of posts and the number of accepted posts AKA accuracy\n","QueryBody":"SELECT  TOP 100 posts.NumberOfPost, answers.NumberOfAccepted, answers.NumberOfAccepted \/ (CAST (posts.NumberOfPost AS FLOAT) \/100) AS accuracy, u.id as [User Link]\nFROM Users u CROSS APPLY \n(\n SELECT count(p.OwnerUserId) AS NumberOfPost\n FROM Posts p\n WHERE u.id = p.OwnerUserId \n GROUP BY p.OwnerUserId ) AS posts CROSS APPLY\n(\n SELECT count(answers.OwnerUserId) AS NumberOfAccepted\n FROM Posts posts, Posts answers\n WHERE u.id = answers.OwnerUserId AND\n posts.id = answers.ParentId AND\n posts.AcceptedAnswerId = answers.id \n GROUP BY answers.OwnerUserId ) AS answers\n\nWHERE NumberOfAccepted > 1 AND NumberOfPost > 50\nORDER BY accuracy DESC","CreationDate":"2011-12-01 19:55:01","validated":true,"QueryBody_Original":null},{"QuerySetId":55509,"Title":"Questions per day for a specific tag","Description":"all time count of questions of a specific tag per day, with rollup\n","QueryBody":"DECLARE  @tagName varchar(255) = ##TagName:string##\n\nselect \n  year(p.CreationDate) as [Year],\n  month(p.CreationDate) as [Month],\n  day(p.CreationDate) as [Day],\n  count(*) as [QuestionsAskedToday]\nfrom Posts p \n  inner join PostTags pt on p.id = pt.postid\n  inner join Tags t on t.id = pt.tagid\nwhere \n  t.tagname = @tagName \ngroup by year(p.CreationDate), month(p.CreationDate),day(p.CreationDate)\norder by year(p.CreationDate) desc, month(p.CreationDate) desc,day(p.CreationDate) desc","CreationDate":"2011-12-07 22:55:29","validated":true,"QueryBody_Original":"DECLARE  @tagName varchar(255) = ##TagName:string##\n\nselect \n  year(p.CreationDate) as [Year],\n  month(p.CreationDate) as [Month],\n  day(p.CreationDate) as [Day],\n  count(*) as [QuestionsAskedToday]\nfrom Posts p \n  inner join PostTags pt on p.id = pt.postid\n  inner join Tags t on t.id = pt.tagid\nwhere \n  t.tagname = @tagName \ngroup by year(p.CreationDate), month(p.CreationDate),day(p.CreationDate)\norder by year(p.CreationDate) desc, month(p.CreationDate) desc,day(p.CreationDate) desc"},{"QuerySetId":59521,"Title":"Which votes did I gave?","Description":"Give me a list of votes I casted.\n","QueryBody":"DECLARE  @UserId int = ##UserId##\n\nSELECT\n    Votes.PostID,\n    Posts.Title\nFROM \n    Votes\n    INNER JOIN Posts ON Posts.ID = Votes.postID\nWHERE \n    Votes.UserId = @UserId","CreationDate":"2013-02-20 22:13:53","validated":true,"QueryBody_Original":"DECLARE  @UserId int = ##UserId##\n\nSELECT\n    Votes.PostID,\n    Posts.Title\nFROM \n    Votes\n    INNER JOIN Posts ON Posts.ID = Votes.postID\nWHERE \n    Votes.UserId = @UserId"},{"QuerySetId":59548,"Title":"Late votes by seconds by time period of 7 days","Description":null,"QueryBody":"SELECT \n  Convert(datetime, v.CreationDate, 112) AS [Day],\n  Count(*) AS [Late Votes]\nFROM Votes v, Posts p\nWHERE v.PostId = p.Id\n  AND DateDiff(second, p.CreationDate, v.CreationDate) > 7*24*3600\n  AND p.OwnerUserId = ##User##\nGROUP BY Convert(datetime, v.CreationDate, 112)\nORDER BY Convert(datetime, v.CreationDate, 112) ASC","CreationDate":"2012-01-18 3:35:40","validated":true,"QueryBody_Original":"SELECT \n  Convert(datetime, v.CreationDate, 112) AS [Day],\n  Count(*) AS [Late Votes]\nFROM Votes v, Posts p\nWHERE v.PostId = p.Id\n  AND DateDiff(second, p.CreationDate, v.CreationDate) > 7*24*3600\n  AND p.OwnerUserId = ##User##\nGROUP BY Convert(datetime, v.CreationDate, 112)\nORDER BY Convert(datetime, v.CreationDate, 112) ASC"},{"QuerySetId":60949,"Title":"See all the votes on all my different posts grouped by vote type","Description":null,"QueryBody":"DECLARE  @UserId int = ##UserId##;\n\nwith vote_results as (\n  select votetypeid, count(*) as \"number of votes\"\n  from posts \n  inner join votes\n  on posts.id = votes.postid\n  where posts.owneruserid = @Userid\n  group by votetypeid\n)\n\nselect *\nfrom vote_results\ninner join\nvotetypes\non vote_results.votetypeid = votetypes.id\norder by id","CreationDate":"2012-02-06 20:29:15","validated":true,"QueryBody_Original":"DECLARE  @UserId int = ##UserId##;\n\nwith vote_results as (\n  select votetypeid, count(*) as \"number of votes\"\n  from posts \n  inner join votes\n  on posts.id = votes.postid\n  where posts.owneruserid = @Userid\n  group by votetypeid\n)\n\nselect *\nfrom vote_results\ninner join\nvotetypes\non vote_results.votetypeid = votetypes.id\norder by id"},{"QuerySetId":61164,"Title":"Top questions by tag in time range by view and score","Description":null,"QueryBody":"SELECT  * FROM\n(\n  SELECT TOP 5\n    'By View' AS Label,\n    OwnerUserId AS [User Link],\n    po.Id AS [Post Link],\n    Score, \n    ViewCount\n  FROM Posts po\n  JOIN PostTags pt\n  ON po.Id = pt.PostId\n  JOIN Tags t\n  ON pt.TagId = t.Id\n  WHERE t.TagName = ##Tag:string?language-agnostic## AND\n    DATEDIFF(WEEK, po.CreationDate, GetDate()) < ##Weeks?10##\n  ORDER BY ViewCount DESC\n) Q\nUNION ALL\nSELECT * FROM (\n  SELECT TOP 5\n    'By Score' AS Label,\n    OwnerUserId AS [User Link],\n    po.Id AS [Post Link],\n    Score, \n    ViewCount\n  FROM Posts po\n  JOIN PostTags pt\n  ON po.Id = pt.PostId\n  JOIN Tags t\n  ON pt.TagId = t.Id\n  WHERE t.TagName = ##Tag:string?language-agnostic## AND\n    DATEDIFF(WEEK, po.CreationDate, GetDate()) < ##Weeks?10##\n  ORDER BY Score DESC\n) R","CreationDate":"2012-08-09 20:01:37","validated":true,"QueryBody_Original":null},{"QuerySetId":62881,"Title":"What are the most viewed questions for a given tag?","Description":null,"QueryBody":"DECLARE  @TagString nvarchar(25) = ##tagName:string##\n\nselect TOP ##ResultSize## ViewCount, Id AS [Post Link]\nfrom Posts \nwhere Id in\n  (\n    select PostId \n    from PostTags \n    where TagId =\n    (\n      select Id \n      from Tags \n      where TagName = @TagString\n     )\n  )\n  AND CreationDate > GETDATE() - ##Days##\n  AND CreationDate < GETDATE() - ##Olddays##\nGroup by ViewCount, Id\nORDER by ViewCount DESC","CreationDate":"2020-06-27 16:52:08","validated":true,"QueryBody_Original":"DECLARE  @TagString nvarchar(25) = ##tagName:string##\n\nselect TOP ##ResultSize## ViewCount, Id AS [Post Link]\nfrom Posts \nwhere Id in\n  (\n    select PostId \n    from PostTags \n    where TagId =\n    (\n      select Id \n      from Tags \n      where TagName = @TagString\n     )\n  )\n  AND CreationDate > GETDATE() - ##Days##\n  AND CreationDate < GETDATE() - ##Olddays##\nGroup by ViewCount, Id\nORDER by ViewCount DESC"},{"QuerySetId":62883,"Title":"Average number of views for a Tag","Description":"Provides a number of views for a tag you provide.","QueryBody":"DECLARE  @TagString nvarchar(25) = ##tagName:string##\n\nselect t.tagName,(sum(p.ViewCount)\/count(*)) as [Average Views] \nfrom Posts p\ninner join PostTags pt on p.Id = pt.PostId\ninner join Tags t on pt.TagId = t.Id\nGroup By t.tagName\nOrder by [Average Views] Desc","CreationDate":"2012-03-02 8:20:11","validated":true,"QueryBody_Original":"DECLARE  @TagString nvarchar(25) = ##tagName:string##\n\nselect t.tagName,(sum(p.ViewCount)\/count(*)) as [Average Views] \nfrom Posts p\ninner join PostTags pt on p.Id = pt.PostId\ninner join Tags t on pt.TagId = t.Id\nGroup By t.tagName\nOrder by [Average Views] Desc"},{"QuerySetId":64663,"Title":"How many upvotes and downvotes have I received?","Description":null,"QueryBody":"SELECT  \n  SUM(CASE WHEN a.VoteTypeId = 2 THEN 1 ELSE 0 END) AS UpVotes,\n  SUM(CASE WHEN a.VoteTypeId = 3 THEN 1 ELSE 0 END) AS DownVotes,\n  (CAST(SUM(CASE WHEN a.VoteTypeId = 2 THEN 1 ELSE 0 END) AS FLOAT) \/ COUNT(*)) * 100 AS UpVotePercentage,\n  (CAST(SUM(CASE WHEN a.VoteTypeId = 3 THEN 1 ELSE 0 END) AS FLOAT) \/ COUNT(*)) * 100 AS DownVotePercentage\nFROM Votes a\n  INNER JOIN Posts b\n    ON \n      a.PostId = b.Id\n      AND b.PostTypeId IN (1,2) -- Only questions and answers\nWHERE \n  b.OwnerUserId = ##UserId##\n  AND a.VoteTypeId IN (2,3) -- Only up and down votes","CreationDate":"2012-03-22 8:03:19","validated":true,"QueryBody_Original":"SELECT  \n  SUM(CASE WHEN a.VoteTypeId = 2 THEN 1 ELSE 0 END) AS UpVotes,\n  SUM(CASE WHEN a.VoteTypeId = 3 THEN 1 ELSE 0 END) AS DownVotes,\n  (CAST(SUM(CASE WHEN a.VoteTypeId = 2 THEN 1 ELSE 0 END) AS FLOAT) \/ COUNT(*)) * 100 AS UpVotePercentage,\n  (CAST(SUM(CASE WHEN a.VoteTypeId = 3 THEN 1 ELSE 0 END) AS FLOAT) \/ COUNT(*)) * 100 AS DownVotePercentage\nFROM Votes a\n  INNER JOIN Posts b\n    ON \n      a.PostId = b.Id\n      AND b.PostTypeId IN (1,2) -- Only questions and answers\nWHERE \n  b.OwnerUserId = ##UserId##\n  AND a.VoteTypeId IN (2,3) -- Only up and down votes"},{"QuerySetId":66267,"Title":"How many characters has user X typed?","Description":null,"QueryBody":"SELECT \n  SUM(LEN(p.Body))\nFROM\n  Users u\nJOIN\n  Posts p on u.Id = p.OwnerUserId\nWHERE\n  u.Id = ##User##","CreationDate":"2012-04-09 15:53:54","validated":true,"QueryBody_Original":"SELECT \n  SUM(LEN(p.Body))\nFROM\n  Users u\nJOIN\n  Posts p on u.Id = p.OwnerUserId\nWHERE\n  u.Id = ##User##"},{"QuerySetId":67945,"Title":"My answers to questions with no accepted answer","Description":null,"QueryBody":"SELECT  a.Score,\n       a.Id           AS [Post Link],\n       q.AnswerCount  AS Answers,\n       q.OwnerUserId  AS [User Link],\n       a.CreationDate AS [Answered On],\n       a.PostTypeId\nFROM   Posts a\n       INNER JOIN Posts q\n         ON q.Id = a.ParentId\nWHERE  q.AcceptedAnswerId IS NULL\n       AND a.OwnerUserId = ##MyID##\nORDER BY a.CreationDate DESC","CreationDate":"2012-04-27 15:23:43","validated":true,"QueryBody_Original":"SELECT  a.Score,\n       a.Id           AS [Post Link],\n       q.AnswerCount  AS Answers,\n       q.OwnerUserId  AS [User Link],\n       a.CreationDate AS [Answered On],\n       a.PostTypeId\nFROM   Posts a\n       INNER JOIN Posts q\n         ON q.Id = a.ParentId\nWHERE  q.AcceptedAnswerId IS NULL\n       AND a.OwnerUserId = ##MyID##\nORDER BY a.CreationDate DESC"},{"QuerySetId":70682,"Title":"Close votes cast by a user","Description":null,"QueryBody":"DECLARE  @UserId int = ##UserId##\n\nSELECT CreationDate AS Date, PostId AS [Post Link] \nFROM Votes\nWHERE UserId = @UserId AND VoteTypeId = 6\nORDER BY CreationDate DESC","CreationDate":"2012-05-20 19:30:37","validated":true,"QueryBody_Original":"DECLARE  @UserId int = ##UserId##\n\nSELECT CreationDate AS Date, PostId AS [Post Link] \nFROM Votes\nWHERE UserId = @UserId AND VoteTypeId = 6\nORDER BY CreationDate DESC"},{"QuerySetId":73658,"Title":"Percentage of posts by top 10 %","Description":null,"QueryBody":"SELECT  CAST(SUM(k) as decimal (15,5)) \/ (cast(COUNT(*) as decimal(15,5) ) FROM posts) * 100\nFROM (\nSELECT TOP 10 PERCENT OwnerUserID , count(id) k\nFROM Posts p\nWHERE OwnerUserID > 0\nGROUP BY OwnerUserID\nORDER BY count(id) desc ) T","CreationDate":"2012-06-22 2:52:17","validated":true,"QueryBody_Original":null},{"QuerySetId":75098,"Title":"My Total Posts View Count","Description":null,"QueryBody":"DECLARE  @UserId INT = ##UserId##;\n\nselect sum(ViewCount) from Posts\nwhere owneruserid = ##UserId##","CreationDate":"2012-07-11 12:45:15","validated":true,"QueryBody_Original":"DECLARE  @UserId INT = ##UserId##;\n\nselect sum(ViewCount) from Posts\nwhere owneruserid = ##UserId##"},{"QuerySetId":75337,"Title":"Bizarre question stats by Tag","Description":null,"QueryBody":"WITH TaggedPosts(PostId)\nAS (\n  SELECT pt.PostId as PostId\n  FROM PostTags pt INNER JOIN Tags t ON t.Id=pt.TagId\n  WHERE t.TagName LIKE '%' + ##tag:string## + '%'\n  GROUP BY pt.PostId\n)\n\nSELECT Id as [Post Link], * FROM Posts\nWHERE Id IN (SELECT PostId FROM TaggedPosts)\nAND PostTypeId = 1\nAND AnswerCount = 0\nAND AcceptedAnswerId IS NOT NULL","CreationDate":"2019-06-25 18:34:33","validated":true,"QueryBody_Original":null},{"QuerySetId":76847,"Title":"Top questions asked less than N weeks ago, by tag by view and score","Description":null,"QueryBody":"SELECT  * FROM\n(\n  SELECT TOP 5\n    'By View' AS Label,\n    OwnerUserId AS [User Link],\n    po.Id AS [Post Link],\n    Score, \n    ViewCount\n  FROM Posts po\n  JOIN PostTags pt\n  ON po.Id = pt.PostId\n  JOIN Tags t\n  ON pt.TagId = t.Id\n  WHERE t.TagName = ##Tag:string?java## AND\n    DATEDIFF(WEEK, po.CreationDate, GetDate()) > ##WeeksOld?100##\n  ORDER BY ViewCount DESC\n) Q\nUNION ALL\nSELECT * FROM (\n  SELECT TOP 5\n    'By Score' AS Label,\n    OwnerUserId AS [User Link],\n    po.Id AS [Post Link],\n    Score, \n    ViewCount\n  FROM Posts po\n  JOIN PostTags pt\n  ON po.Id = pt.PostId\n  JOIN Tags t\n  ON pt.TagId = t.Id\n  WHERE t.TagName = ##Tag:string?java## AND\n    DATEDIFF(WEEK, po.CreationDate, GetDate()) > ##WeeksOld?100##\n  ORDER BY Score DESC\n) R","CreationDate":"2013-12-02 7:54:01","validated":true,"QueryBody_Original":null},{"QuerySetId":78134,"Title":"Distribution of reputation: % of Reputation Held by X Top Users","Description":null,"QueryBody":"DECLARE  @totalRep float\n\nSELECT @totalRep = SUM(Users.Reputation) FROM Users\n\nSELECT SUM(tmp.Reputation) \/ @totalRep \nFROM (SELECT TOP ##howMany##\n    ROW_NUMBER() OVER(ORDER BY Reputation DESC) AS [#], \n    Id AS [User Link], \n    Reputation\nFROM\n    Users\nORDER BY\nReputation DESC) as tmp;","CreationDate":"2012-08-25 17:05:22","validated":true,"QueryBody_Original":"DECLARE  @totalRep float\n\nSELECT @totalRep = SUM(Users.Reputation) FROM Users\n\nSELECT SUM(tmp.Reputation) \/ @totalRep \nFROM (SELECT TOP ##howMany##\n    ROW_NUMBER() OVER(ORDER BY Reputation DESC) AS [#], \n    Id AS [User Link], \n    Reputation\nFROM\n    Users\nORDER BY\nReputation DESC) as tmp;"},{"QuerySetId":78172,"Title":"Top users in specified age group","Description":null,"QueryBody":"DECLARE  @minAge int = ##UserMinimumAge##\nDECLARE @maxAge int = ##UserMaximumAge##\n\nSELECT\n  Id\n  , Reputation\n  , Age\n  , CreationDate\n  , DisplayName\n  , LastAccessDate\n  \nFROM\n  Users\n  \nWHERE\n    Age>@minAge\n  AND\n    Age<@maxAge\n    \nORDER BY\n  Reputation DESC","CreationDate":"2012-08-26 17:50:44","validated":true,"QueryBody_Original":"DECLARE  @minAge int = ##UserMinimumAge##\nDECLARE @maxAge int = ##UserMaximumAge##\n\nSELECT\n  Id\n  , Reputation\n  , Age\n  , CreationDate\n  , DisplayName\n  , LastAccessDate\n  \nFROM\n  Users\n  \nWHERE\n    Age>@minAge\n  AND\n    Age<@maxAge\n    \nORDER BY\n  Reputation DESC"},{"QuerySetId":80869,"Title":"What is my average post length?","Description":null,"QueryBody":"SELECT  AVG(LEN(Body)) As Length FROM Posts\nWHERE PostTypeId = 2\nAND OwnerUserId = ##UserId##","CreationDate":"2012-09-25 23:10:16","validated":true,"QueryBody_Original":"SELECT  AVG(LEN(Body)) As Length FROM Posts\nWHERE PostTypeId = 2\nAND OwnerUserId = ##UserId##"},{"QuerySetId":84270,"Title":"Comments with a score of 5 or more","Description":null,"QueryBody":"DECLARE  @UserId int = ##UserId##\n\nSELECT\nPostId as [Post Link],\nScore,\nText\nFROM\n    Comments\nWHERE \n    UserId = @UserId\nAND\n    Score >= 5\nORDER BY \n    Score DESC","CreationDate":"2012-11-05 8:18:37","validated":true,"QueryBody_Original":"DECLARE  @UserId int = ##UserId##\n\nSELECT\nPostId as [Post Link],\nScore,\nText\nFROM\n    Comments\nWHERE \n    UserId = @UserId\nAND\n    Score >= 5\nORDER BY \n    Score DESC"},{"QuerySetId":84423,"Title":"Whose questions have you answered","Description":null,"QueryBody":"SELECT \n  answer.owneruserid as [User Link],\n  count(*) as number\nFROM \n    posts as question\n INNER JOIN\n    posts as answer\n  ON\n    question.posttypeid = 1\n   AND\n    answer.posttypeid = 2\n   AND\n    question.owneruserid = ##userid##\n   AND\n    answer.parentid = question.id\nGROUP BY\n    answer.owneruserid\nORDER BY\n    number DESC","CreationDate":"2012-11-08 5:34:14","validated":true,"QueryBody_Original":"SELECT \n  answer.owneruserid as [User Link],\n  count(*) as number\nFROM \n    posts as question\n INNER JOIN\n    posts as answer\n  ON\n    question.posttypeid = 1\n   AND\n    answer.posttypeid = 2\n   AND\n    question.owneruserid = ##userid##\n   AND\n    answer.parentid = question.id\nGROUP BY\n    answer.owneruserid\nORDER BY\n    number DESC"},{"QuerySetId":84593,"Title":"My Comments with fixed score","Description":"How many comments do I have for each score.\n","QueryBody":"DECLARE  @UserId int = ##UserId##\nDECLARE @Score int = ##Score##\n\nSELECT \n    PostId, Text \nFROM \n    Comments\nWHERE \n    UserId = @UserId AND\n    Score = @Score","CreationDate":"2012-11-09 15:02:29","validated":true,"QueryBody_Original":"DECLARE  @UserId int = ##UserId##\nDECLARE @Score int = ##Score##\n\nSELECT \n    PostId, Text \nFROM \n    Comments\nWHERE \n    UserId = @UserId AND\n    Score = @Score"},{"QuerySetId":84740,"Title":"Answer tag stats per month and year","Description":null,"QueryBody":"DECLARE  @UserId int = ##UserId##;\n\nSELECT \n  Tags.TagName,\n  YEAR(Answers.CreationDate) AS Year,\n  MONTH(Answers.CreationDate) AS Month,\n  COUNT(*) as Total\nFROM \n  Posts AS Answers\n  INNER JOIN Posts Questions ON (Answers.ParentId = Questions.Id)\n  INNER JOIN PostTags ON (Questions.Id = PostTags.PostId)\n  INNER JOIN Tags ON (PostTags.TagId = Tags.Id)\nWHERE \n  Answers.OwnerUserId = @UserId AND \n  Answers.PostTypeId = 2\nGROUP BY\n  Tags.TagName,\n  YEAR(Answers.CreationDate),\n  MONTH(Answers.CreationDate)","CreationDate":"2012-11-11 23:57:26","validated":true,"QueryBody_Original":"DECLARE  @UserId int = ##UserId##;\n\nSELECT \n  Tags.TagName,\n  YEAR(Answers.CreationDate) AS Year,\n  MONTH(Answers.CreationDate) AS Month,\n  COUNT(*) as Total\nFROM \n  Posts AS Answers\n  INNER JOIN Posts Questions ON (Answers.ParentId = Questions.Id)\n  INNER JOIN PostTags ON (Questions.Id = PostTags.PostId)\n  INNER JOIN Tags ON (PostTags.TagId = Tags.Id)\nWHERE \n  Answers.OwnerUserId = @UserId AND \n  Answers.PostTypeId = 2\nGROUP BY\n  Tags.TagName,\n  YEAR(Answers.CreationDate),\n  MONTH(Answers.CreationDate)"},{"QuerySetId":87944,"Title":"Who are the 1%? (Active Users)","Description":"-- Who are the the 1% (Active Users)","QueryBody":"SELECT  DisplayName, Reputation\nfrom\n  (SELECT NTILE(100) OVER (ORDER BY Reputation DESC) as percentile, \n          DisplayName, Reputation\n    FROM Users) as q\n    where percentile <= ##SELECTTopPercentile?1##","CreationDate":"2012-12-05 18:56:41","validated":true,"QueryBody_Original":null},{"QuerySetId":88670,"Title":"Questions that had the Raw tag","Description":null,"QueryBody":"SELECT  * from tags where tagname = 'raw'\nSELECT p.* \nfrom Posts p\nleft join PostTags pt on p.Id = pt.PostId\nleft join Tags t on pt.TagId = t.Id","CreationDate":"2012-12-11 18:30:13","validated":true,"QueryBody_Original":null},{"QuerySetId":89069,"Title":"Answers for Tridion (Scores and Numbers)","Description":null,"QueryBody":"DECLARE  @tag_id int = (select id from tags where tagname = 'tridion');\n\nselect \n  users.id \"User Link\"\n  ,count(answers.id) as \"Nr\"\n  ,sum(answers.score) as \"Score\"\n  \nfrom users\njoin posts answers on (users.id = answers.owneruserid)\njoin posts parent on (answers.parentid = parent.id)\njoin posttags on (parent.id = posttags.postid)\nwhere posttags.tagid = @tag_id\nand answers.posttypeid = 2  -- answers only\nand answers.creationDate >  DATEADD(Month, -12, DATEADD(dd, DATEDIFF(dd, 0, getdate()), 0) )\ngroup by users.id\norder by Nr desc","CreationDate":"2012-12-15 2:26:45","validated":true,"QueryBody_Original":"DECLARE  @tag_id int = (select id from tags where tagname = 'tridion');\n\nselect \n  users.id \"User Link\"\n  ,count(answers.id) as \"Nr\"\n  ,sum(answers.score) as \"Score\"\n  \nfrom users\njoin posts answers on (users.id = answers.owneruserid)\njoin posts parent on (answers.parentid = parent.id)\njoin posttags on (parent.id = posttags.postid)\nwhere posttags.tagid = @tag_id\nand answers.posttypeid = 2  -- answers only\nand answers.creationDate >  DATEADD(Month, -12, DATEADD(dd, DATEDIFF(dd, 0, getdate()), 0) )\ngroup by users.id\norder by Nr desc"},{"QuerySetId":90598,"Title":"My answers to questions tagged jquery and not tagged javascript","Description":"My answers to questions tagged [r]\n","QueryBody":"SELECT \n    q.Id as [Post Link],q.Title, q.Tags, a.Score\nfrom\n    Posts q\n  inner join\n    Posts a\n  on q.Id = a.ParentId and a.postTypeId = 2 and q.postTypeId = 1\n   \/*join PostTags on q.Id = PostTags.PostId\n   join Tags on Tags.Id = PostTags.TagId and ... *\/\nwhere\n      a.CommunityOwnedDate is null\n  and a.OwnerUserId = ##UserId##\n  and q.Tags like '%jquery%'\n  and q.Tags NOT like '%javascript%'\norder by a.Score desc","CreationDate":"2015-05-03 11:02:57","validated":true,"QueryBody_Original":"SELECT \n    q.Id as [Post Link],q.Title, q.Tags, a.Score\nfrom\n    Posts q\n  inner join\n    Posts a\n  on q.Id = a.ParentId and a.postTypeId = 2 and q.postTypeId = 1\n   \/*join PostTags on q.Id = PostTags.PostId\n   join Tags on Tags.Id = PostTags.TagId and ... *\/\nwhere\n      a.CommunityOwnedDate is null\n  and a.OwnerUserId = ##UserId##\n  and q.Tags like '%jquery%'\n  and q.Tags NOT like '%javascript%'\norder by a.Score desc"},{"QuerySetId":91294,"Title":"Accepted answers average score per user","Description":null,"QueryBody":"DECLARE  @UserId int = ##UserId##\n\nselect cast(avg(cast(a.Score as float)) as decimal(20,3)) as average,\ncount(a.Score) as acceptedanswers,\na.OwnerUserId as [User Link],\n(select Reputation from Users where Id=a.OwnerUserId) as rep\nfrom Posts a\ngroup by a.OwnerUserId\nhaving (count(a.Score)>5 or a.OwnerUserId=@UserId)\norder by average desc","CreationDate":"2014-11-13 12:44:15","validated":true,"QueryBody_Original":"DECLARE  @UserId int = ##UserId##\n\nselect cast(avg(cast(a.Score as float)) as decimal(20,3)) as average,\ncount(a.Score) as acceptedanswers,\na.OwnerUserId as [User Link],\n(select Reputation from Users where Id=a.OwnerUserId) as rep\nfrom Posts a\ngroup by a.OwnerUserId\nhaving (count(a.Score)>5 or a.OwnerUserId=@UserId)\norder by average desc"},{"QuerySetId":95176,"Title":"Users scoring lower than the questions they answer. Does not count self-answers.\nShows users with at least @MinAnswers answers","Description":"Does not count self-answers.\nShows users with at least @MinAnswers answers.\n","QueryBody":"DECLARE  @MinAnswers int = ##MinAnswers##\n\n\nSELECT TOP 100\n  u.Id AS [User Link],\n  count(*) AS NumAnswers,\n  cast(avg(cast((q.Score - a.Score) as float)) as numeric(6,2)) AS AvgVoteDelta\nFROM Posts a\nINNER JOIN Users u ON u.Id = a.OwnerUserId\nINNER JOIN Posts q ON a.ParentId = q.Id\nWHERE \n  (q.OwnerUserId <> u.Id OR q.OwnerUserId IS NULL)   --no self answers\nGROUP BY u.Id\nHAVING count(*) >= @MinAnswers\nORDER BY AvgVoteDelta DESC, NumAnswers DESC","CreationDate":"2013-02-04 11:54:27","validated":true,"QueryBody_Original":"DECLARE  @MinAnswers int = ##MinAnswers##\n\n\nSELECT TOP 100\n  u.Id AS [User Link],\n  count(*) AS NumAnswers,\n  cast(avg(cast((q.Score - a.Score) as float)) as numeric(6,2)) AS AvgVoteDelta\nFROM Posts a\nINNER JOIN Users u ON u.Id = a.OwnerUserId\nINNER JOIN Posts q ON a.ParentId = q.Id\nWHERE \n  (q.OwnerUserId <> u.Id OR q.OwnerUserId IS NULL)   --no self answers\nGROUP BY u.Id\nHAVING count(*) >= @MinAnswers\nORDER BY AvgVoteDelta DESC, NumAnswers DESC"},{"QuerySetId":97651,"Title":"Grab all questions with both Android and Arduino tags asked on or after the specified date.","Description":"Grab all questions with both Android and Arduino tags asked on or after the specified date.","QueryBody":"DECLARE  @AndroidTagId INT = (SELECT Id FROM Tags WHERE TagName = 'android')\nDECLARE @ArduinoTagId INT = (SELECT Id FROM Tags WHERE TagName = 'arduino')\n\nSELECT Id as [Post Link], CreationDate\nFROM Posts\nWHERE \nPostTypeId = 1\nAND EXISTS (SELECT 1 FROM PostTags WHERE PostId = Posts.Id AND TagId = @AndroidTagId)\nAND EXISTS (SELECT 1 FROM PostTags WHERE PostId = Posts.Id AND TagId = @ArduinoTagId)\nAND CreationDate >= '##date##'\nORDER BY CreationDate DESC","CreationDate":"2013-02-14 3:49:33","validated":true,"QueryBody_Original":"DECLARE  @AndroidTagId INT = (SELECT Id FROM Tags WHERE TagName = 'android')\nDECLARE @ArduinoTagId INT = (SELECT Id FROM Tags WHERE TagName = 'arduino')\n\nSELECT Id as [Post Link], CreationDate\nFROM Posts\nWHERE \nPostTypeId = 1\nAND EXISTS (SELECT 1 FROM PostTags WHERE PostId = Posts.Id AND TagId = @AndroidTagId)\nAND EXISTS (SELECT 1 FROM PostTags WHERE PostId = Posts.Id AND TagId = @ArduinoTagId)\nAND CreationDate >= '##date##'\nORDER BY CreationDate DESC"},{"QuerySetId":98827,"Title":"Find out how many edits I've made","Description":"including rollbacks","QueryBody":"SELECT  count(Id)\nFROM PostHistory\nWHERE PostHistoryTypeId IN (4,5,6,7,8,9)\n  AND UserId = ##UserID##","CreationDate":"2013-02-21 19:04:39","validated":true,"QueryBody_Original":"SELECT  count(Id)\nFROM PostHistory\nWHERE PostHistoryTypeId IN (4,5,6,7,8,9)\n  AND UserId = ##UserID##"},{"QuerySetId":106229,"Title":"Computability tagged questions per month","Description":"How many questions per month does each area tag get","QueryBody":"SELECT  *, count(*) from\n(\n  SELECT CAST(\n      cast(DATEPART(YYYY, CreationDate) as varchar) + '-' + cast(DATEPART(MM, CreationDate) as varchar) + '-01'\n    as datetime) [Month], \n    t.TagName\n  from Posts p \n  join PostTags pt on pt.PostId = p.Id\n  join Tags t on t.Id = pt.TagId\n  where TagId in \n  (\n    SELECT top ##num## Id from Tags\n    where TagName like '%.%' or \n          TagName='computability' or \n          TagName='Quantum computation'\n    order by Count desc\n  )\n) as X\ngroup by TagName, [Month]\norder by [Month] asc, TagName asc","CreationDate":"2013-04-04 23:38:59","validated":true,"QueryBody_Original":null},{"QuerySetId":112755,"Title":"Top 100 posts of the last 2 weeks by FavoriteCount","Description":null,"QueryBody":"SELECT  TOP 100 p.id [Post Link], p.Tags, p.CreationDate, p.Score, p.ViewCount,p.FavoriteCount, v.UpVote, v.DownVote, p.AnswerCount FROM\n(SELECT Votes.PostID, UpVote = sum(case when VoteTypeId = 2 then 1 else 0 end), DownVote = sum(case when VoteTypeId = 3 then 1 else 0 end) FROM Votes WHERE VoteTypeId in (2,3) GROUP BY PostId) v\nJOIN Posts p on v.PostID = p.id\nWHERE p.PostTypeId = 1 AND p.CreationDate >= DATEADD(day, -14, GETDATE())\nORDER BY v.UpVote DESC","CreationDate":"2013-05-07 20:00:00","validated":true,"QueryBody_Original":"SELECT  TOP 100 p.id [Post Link], p.Tags, p.CreationDate, p.Score, p.ViewCount,p.FavoriteCount, v.UpVote, v.DownVote, p.AnswerCount FROM\n(SELECT Votes.PostID, UpVote = sum(case when VoteTypeId = 2 then 1 else 0 end), DownVote = sum(case when VoteTypeId = 3 then 1 else 0 end) FROM Votes WHERE VoteTypeId in (2,3) GROUP BY PostId) v\nJOIN Posts p on v.PostID = p.id\nWHERE p.PostTypeId = 1 AND p.CreationDate >= DATEADD(day, -14, GETDATE())\nORDER BY v.UpVote DESC"},{"QuerySetId":113603,"Title":"Posts edited after your comment","Description":null,"QueryBody":"SELECT  p.LastEditDate as [Edit Date], p.Id AS [Post Link], c.Text AS Comment FROM Posts p\nINNER JOIN Comments c\nON c.PostId=p.Id\nWHERE c.UserId=##UserId## AND c.CreationDate < p.LastEditDate \nORDER BY p.LastEditDate DESC","CreationDate":"2013-05-19 4:21:50","validated":true,"QueryBody_Original":"SELECT  p.LastEditDate as [Edit Date], p.Id AS [Post Link], c.Text AS Comment FROM Posts p\nINNER JOIN Comments c\nON c.PostId=p.Id\nWHERE c.UserId=##UserId## AND c.CreationDate < p.LastEditDate \nORDER BY p.LastEditDate DESC"},{"QuerySetId":114578,"Title":"Top 20 tags by number of posts for specific user","Description":null,"QueryBody":"DECLARE  @UserId int = ##UserId##\n\nSELECT TOP 20 TagName, COUNT(*) AS Posts \nFROM Tags\nINNER JOIN PostTags ON PostTags.TagId = Tags.id\nINNER JOIN Posts ON Posts.ParentId = PostTags.PostId\nWHERE Posts.OwnerUserId = @UserId\nAND Posts.CommunityOwnedDate IS NULL\nGROUP BY TagName ORDER BY Posts DESC","CreationDate":"2013-05-16 14:32:56","validated":true,"QueryBody_Original":"DECLARE  @UserId int = ##UserId##\n\nSELECT TOP 20 TagName, COUNT(*) AS Posts \nFROM Tags\nINNER JOIN PostTags ON PostTags.TagId = Tags.id\nINNER JOIN Posts ON Posts.ParentId = PostTags.PostId\nWHERE Posts.OwnerUserId = @UserId\nAND Posts.CommunityOwnedDate IS NULL\nGROUP BY TagName ORDER BY Posts DESC"},{"QuerySetId":121221,"Title":"People who have favorited your posts.","Description":null,"QueryBody":"DECLARE  @UID int = ##UserID##\n\nselect UserId as [User Link], PostId as [Post Link]\nfrom (select PostId, UserId\n      from Votes\n      where VoteTypeId = 5) as lclVotes\ninner join (select Score, Id\n            from Posts\n            where PostTypeId = 1 \n            and OwnerUserId = @UID) as lclPosts\non lclVotes.PostId = lclPosts.Id\norder by lclPosts.Score desc","CreationDate":"2013-08-21 11:27:26","validated":true,"QueryBody_Original":"DECLARE  @UID int = ##UserID##\n\nselect UserId as [User Link], PostId as [Post Link]\nfrom (select PostId, UserId\n      from Votes\n      where VoteTypeId = 5) as lclVotes\ninner join (select Score, Id\n            from Posts\n            where PostTypeId = 1 \n            and OwnerUserId = @UID) as lclPosts\non lclVotes.PostId = lclPosts.Id\norder by lclPosts.Score desc"},{"QuerySetId":122414,"Title":"Search the comments on posts by a user","Description":null,"QueryBody":"SELECT  p.Id as [Post Link], c.Text AS Comment, c.CreationDate FROM Posts p\nINNER JOIN Comments c\nON c.PostId=p.Id\nWHERE p.OwnerUserId=##Id## AND c.Text LIKE '%'+##SearchQuery:string##+'%'\nORDER BY c.CreationDate DESC","CreationDate":"2013-07-01 16:13:34","validated":true,"QueryBody_Original":null},{"QuerySetId":123298,"Title":"My Top-ranked comments >= 5 since 1\/1\/2019","Description":"The 50 highest ranked comments with post links\n","QueryBody":"DECLARE  @UserId int = 17034\n\nSELECT TOP 2500\nPostId as [Post Link],\nScore,\nText\nFROM\n    Comments\nWHERE \n    UserId = @UserId and Score >=5 and CreationDate > '1\/1\/2019'\nORDER BY Score","CreationDate":"2020-09-13 17:52:45","validated":true,"QueryBody_Original":"DECLARE  @UserId int = 17034\n\nSELECT TOP 2500\nPostId as [Post Link],\nScore,\nText\nFROM\n    Comments\nWHERE \n    UserId = @UserId and Score >=5 and CreationDate > '1\/1\/2019'\nORDER BY Score"},{"QuerySetId":124882,"Title":"Unanswered zero-score questions by low-rep users","Description":null,"QueryBody":"SELECT  p.CreationDate, p.Id AS [Post Link], p.Body \nFROM Posts p INNER JOIN Users u ON p.OwnerUserId = u.Id\nWHERE u.Reputation <= ##ReputationLimit## AND \n      p.PostTypeId = 1 AND \n      p.Score=0 AND\n      DATEDIFF(DAY,p.CreationDate, GETDATE())>25 AND\n      ISNULL(p.AnswerCount,0) = 0 AND \n      ClosedDate IS NULL\nORDER BY p.CreationDate DESC","CreationDate":"2013-12-19 11:28:38","validated":true,"QueryBody_Original":"SELECT  p.CreationDate, p.Id AS [Post Link], p.Body \nFROM Posts p INNER JOIN Users u ON p.OwnerUserId = u.Id\nWHERE u.Reputation <= ##ReputationLimit## AND \n      p.PostTypeId = 1 AND \n      p.Score=0 AND\n      DATEDIFF(DAY,p.CreationDate, GETDATE())>25 AND\n      ISNULL(p.AnswerCount,0) = 0 AND \n      ClosedDate IS NULL\nORDER BY p.CreationDate DESC"},{"QuerySetId":127167,"Title":"Who voted for my question?","Description":null,"QueryBody":"SELECT  u.DisplayName, vt.Name\nFrom\n   Users u inner join \n   (\n    Posts p inner join\n     (\n      Votes v inner join VoteTypes vt on v.VoteTypeId = vt.Id\n     ) \n     on p.Id = v.PostId\n    )\n    on u.Id = v.UserId\nWhere\n   --p.OwnerUserId = 2556654\n   p.Id = 240106\n   \n*\/\n\n\/*SELECT *\nFrom\nPosts p inner join\n(Votes v inner join VoteTypes vt on v.VoteTypeId = vt.Id)\n on p.Id = v.PostId\nWhere\n  p.Id = 10809063\n   --p.OwnerUserId = 2556654 *\/\n   \n   SELECT Name, \n       Count(*) TotalVotes, \n       SUM(CASE WHEN UserId IS NULL THEN 0 ELSE 1 END) TotalWithUserId\nFROM Votes Inner Join VoteTypes ON VoteTypeId = VoteTypes.Id\nGROUP BY Name","CreationDate":"2013-08-03 11:17:15","validated":true,"QueryBody_Original":null},{"QuerySetId":127651,"Title":"Who has favourited my questions","Description":null,"QueryBody":"DECLARE  @UserId int = ##UserId##\n\nselect a.UserId AS [User Link],\n       b.Id AS [Post Link]\n  from Votes a\n inner join Posts b on a.PostId = b.Id\n where a.VoteTypeId = 5\n   and b.PostTypeId = 1\n   and b.OwnerUserId = @UserId;","CreationDate":"2013-08-07 20:48:26","validated":true,"QueryBody_Original":"DECLARE  @UserId int = ##UserId##\n\nselect a.UserId AS [User Link],\n       b.Id AS [Post Link]\n  from Votes a\n inner join Posts b on a.PostId = b.Id\n where a.VoteTypeId = 5\n   and b.PostTypeId = 1\n   and b.OwnerUserId = @UserId;"},{"QuerySetId":129799,"Title":"Questions with answers that received lots of votes quickly","Description":null,"QueryBody":"SELECT  distinct p3.parentId  [Post Link]\nFROM posts p3, (\n  SELECT COUNT(*) [Limited Score],\n         p.score  [Answer Score],\n         p2.score [Question Score],\n         p.id, -- [Post Link], \n         p.owneruserid -- [User Link]\n  FROM votes v, posts p, posts p2\n  WHERE v.voteTypeId = 2 -- only look at upvotes\n  AND v.postid = p.id\n  AND p.parentid = p2.id\n  AND v.creationDate - p2.creationDate \n      < ##DaysThreshhold:int?14## --only count votes within two weeks of post\n  GROUP BY p.id, p.owneruserid, p.score, p2.score\n  HAVING COUNT(*) > ##ScoreThreshhold:int?8##   \n  ORDER BY COUNT(*) desc\n  ) z\nWHERE z.id = p3.id","CreationDate":"2013-08-14 7:57:02","validated":true,"QueryBody_Original":null},{"QuerySetId":130540,"Title":"Possible answers that will fetch you Sportsmanship badge","Description":null,"QueryBody":"DECLARE  @UserId int = ##UserId##\n\nselect \na.ID as [Post Link], --my answer\na.Score, --my score\n'site:\/\/questions\/' + CAST(b.Id AS nvarchar) as [Other Answer Link], --other answer with atleast one upvote\nb.Score --other answers's sore\n  from Posts a inner join Posts b\n       on a.ParentId = b.ParentId and a.Id <> b.Id\n where a.OwnerUserId = @UserId\n   and a.PostTypeId = 2\n   and a.Score > 0\n   and b.ParentId <> @UserId\n   and b.PostTypeId = 2\n   and exists (select 1 from Votes c\n                where c.PostId = b.Id\n                and c.VoteTypeId = 2)\n order by a.ParentId;","CreationDate":"2013-08-16 15:40:50","validated":true,"QueryBody_Original":"DECLARE  @UserId int = ##UserId##\n\nselect \na.ID as [Post Link], --my answer\na.Score, --my score\n'site:\/\/questions\/' + CAST(b.Id AS nvarchar) as [Other Answer Link], --other answer with atleast one upvote\nb.Score --other answers's sore\n  from Posts a inner join Posts b\n       on a.ParentId = b.ParentId and a.Id <> b.Id\n where a.OwnerUserId = @UserId\n   and a.PostTypeId = 2\n   and a.Score > 0\n   and b.ParentId <> @UserId\n   and b.PostTypeId = 2\n   and exists (select 1 from Votes c\n                where c.PostId = b.Id\n                and c.VoteTypeId = 2)\n order by a.ParentId;"},{"QuerySetId":133278,"Title":"Feedback on my Posts from Anonymous users","Description":null,"QueryBody":"DECLARE  @UserId int = ##UserId##\n\nselect b.Id as [Post Link],\n       c.Name PostType, \n       b.Score PostScore,\n       count(case when a. VoteTypeId = 2 then 1 end) Helpful,\n       count(case when a. VoteTypeId = 3 then 1 end) Unhelpful\n  from PostFeedback a inner join Posts b on a.PostId = b.Id\n                      inner join PostTypes c on b.PostTypeId = c.Id\n where b.OwnerUserId = @UserId\n group by b.Id , b.Score, c.Name ;","CreationDate":"2013-08-29 10:18:01","validated":true,"QueryBody_Original":"DECLARE  @UserId int = ##UserId##\n\nselect b.Id as [Post Link],\n       c.Name PostType, \n       b.Score PostScore,\n       count(case when a. VoteTypeId = 2 then 1 end) Helpful,\n       count(case when a. VoteTypeId = 3 then 1 end) Unhelpful\n  from PostFeedback a inner join Posts b on a.PostId = b.Id\n                      inner join PostTypes c on b.PostTypeId = c.Id\n where b.OwnerUserId = @UserId\n group by b.Id , b.Score, c.Name ;"},{"QuerySetId":134491,"Title":"Posts grouped by time of the day for specific user","Description":null,"QueryBody":"DECLARE  @UserId int = ##UserId##\n\nselect cast(DATEPART(HOUR,CreationDate) as varchar)\n      +'-'\n      +cast(DATEPART(HOUR,CreationDate) + 1 as varchar)\n      +' UTC' time_of_the_day,\n      cast(DATEPART(HOUR,CreationDate) + 5.5 as varchar)\n      +'-'\n      +cast(DATEPART(HOUR,CreationDate) + 6.5 as varchar)\n      +' IST' time_of_the_day_ist,\n      count(1) no_of_posts\n  from Posts\n where OwnerUserId = @UserId\n group by DATEPART(HOUR,CreationDate);","CreationDate":"2013-09-16 9:06:09","validated":true,"QueryBody_Original":"DECLARE  @UserId int = ##UserId##\n\nselect cast(DATEPART(HOUR,CreationDate) as varchar)\n      +'-'\n      +cast(DATEPART(HOUR,CreationDate) + 1 as varchar)\n      +' UTC' time_of_the_day,\n      cast(DATEPART(HOUR,CreationDate) + 5.5 as varchar)\n      +'-'\n      +cast(DATEPART(HOUR,CreationDate) + 6.5 as varchar)\n      +' IST' time_of_the_day_ist,\n      count(1) no_of_posts\n  from Posts\n where OwnerUserId = @UserId\n group by DATEPART(HOUR,CreationDate);"},{"QuerySetId":138270,"Title":"What is the view count of my questions?","Description":null,"QueryBody":"SELECT\np2.ViewCount,\np.Score\nFROM Posts p JOIN Posts p2 ON p.Id = p2.Id \nWHERE p.PostTypeId = 2 AND p.OwnerUserId = ##userid##\nORDER BY ViewCount DESC","CreationDate":"2013-10-03 19:45:27","validated":true,"QueryBody_Original":"SELECT\np2.ViewCount,\np.Score\nFROM Posts p JOIN Posts p2 ON p.Id = p2.Id \nWHERE p.PostTypeId = 2 AND p.OwnerUserId = ##userid##\nORDER BY ViewCount DESC"},{"QuerySetId":141761,"Title":"Top 100 most economical posts (votes \/ characters)","Description":null,"QueryBody":"SELECT  TOP 100\nId as [Post Link],\nlen(body) AS Length,\nScore,\n(Score \/ CAST(len(body) AS DECIMAL (9,2))) AS Economy\nFROM posts p\nWHERE p.OwnerUserId = ##UserId##\nORDER BY Economy DESC","CreationDate":"2013-10-09 12:41:20","validated":true,"QueryBody_Original":"SELECT  TOP 100\nId as [Post Link],\nlen(body) AS Length,\nScore,\n(Score \/ CAST(len(body) AS DECIMAL (9,2))) AS Economy\nFROM posts p\nWHERE p.OwnerUserId = ##UserId##\nORDER BY Economy DESC"},{"QuerySetId":143257,"Title":"Top 50 posts by tag","Description":"Enter the tag which you are interested in\n","QueryBody":"SELECT count(*)\nFROM posts p\nWHERE tags LIKE '<' + ##tag:string## + '>'\nORDER by p.score DESC","CreationDate":"2014-05-12 21:14:03","validated":true,"QueryBody_Original":null},{"QuerySetId":144638,"Title":"Posts by @userId since @startDate","Description":null,"QueryBody":"DECLARE  @userId int = ##userId##;\nDECLARE @startDate datetime = ##startDate##;\n\nselect t.Name, count(*)\nfrom Posts p join PostTypes t on p.PostTypeId = t.Id\nwhere OwnerUserId = @userId\nand CreationDate >= @startDate\ngroup by t.Name;","CreationDate":"2013-10-27 3:42:29","validated":true,"QueryBody_Original":"DECLARE  @userId int = ##userId##;\nDECLARE @startDate datetime = ##startDate##;\n\nselect t.Name, count(*)\nfrom Posts p join PostTypes t on p.PostTypeId = t.Id\nwhere OwnerUserId = @userId\nand CreationDate >= @startDate\ngroup by t.Name;"},{"QuerySetId":144725,"Title":"Number of users posting in homework","Description":null,"QueryBody":"SELECT  [Month], \n       sum(1) ActiveUsers\n   \nfrom\n(\n\nSELECT Z.[Month], count(Z.ouid) cnt, Z.ouid as [User Link] \nfrom(\nSELECT CAST(\n      cast(DATEPART(YYYY, Y.CreationDate) as varchar) + '-' + cast(DATEPART(MM, Y.CreationDate) as varchar) + '-01'\n      as datetime) [Month], ouid\n     \n  from (\n   SELECT p1.creationdate  CreationDate ,p1.owneruserid  ouid from posts p1\n      inner join posts p2  on p1.parentid=p2.id \n      where p1.posttypeid=2 and \n      (p2.tags LIKE '%homework%') and\n      p1.closeddate is null\ngroup by p1.owneruserid, p1.creationdate\n  ) Y group by ouid, CreationDate\n  \n) Z group by Z.ouid,Z.[Month]\n\n) as X where X.cnt>##Threshhold?2##\ngroup by [Month]\norder by [Month] asc","CreationDate":"2013-10-27 22:54:20","validated":true,"QueryBody_Original":null},{"QuerySetId":146671,"Title":"Most popular questions one has answered to.","Description":"This is to know what are the most popular questions you have answered to. It also computes the percentage of people who has viewed the question that have upvoted your answer.","QueryBody":"DECLARE  @UserId int = ##UserId##;\n\n\nselect \n  answer.ParentID as [Post Link],\n  answer.Score as Score,\n  question.Score as \"Question score\",\n  question.ViewCount as \"Question views\",\n  SUBSTRING(\n    CONVERT(\n      varchar(10), \n      convert(int,100000.0 * answer.Score \/ question.ViewCount)\/1000.0\n      ),\n    0, 6) + '%' as Perct,\n  question.FavoriteCount as \"Favorite count\",\n  (case\n    when answer.Id = question.AcceptedAnswerId Then 1\n    else 0\n    end) as Accepted\nfrom\n  Posts as answer\ninner\n  join \n    Posts as question\n  on\n    question.Id = answer.ParentID\nwhere\n  answer.ownerUserId = @UserId\nOrder by\n  question.ViewCount DESC","CreationDate":"2013-11-08 0:25:30","validated":true,"QueryBody_Original":"DECLARE  @UserId int = ##UserId##;\n\n\nselect \n  answer.ParentID as [Post Link],\n  answer.Score as Score,\n  question.Score as \"Question score\",\n  question.ViewCount as \"Question views\",\n  SUBSTRING(\n    CONVERT(\n      varchar(10), \n      convert(int,100000.0 * answer.Score \/ question.ViewCount)\/1000.0\n      ),\n    0, 6) + '%' as Perct,\n  question.FavoriteCount as \"Favorite count\",\n  (case\n    when answer.Id = question.AcceptedAnswerId Then 1\n    else 0\n    end) as Accepted\nfrom\n  Posts as answer\ninner\n  join \n    Posts as question\n  on\n    question.Id = answer.ParentID\nwhere\n  answer.ownerUserId = @UserId\nOrder by\n  question.ViewCount DESC"},{"QuerySetId":150892,"Title":"Display all questions of a given user","Description":null,"QueryBody":"DECLARE  @UserId int = ##UserId##\n\nSELECT Q.Title AS Title, Q.Score AS QScore, Q.Body AS Question, A.Score AS AScore, A.Body AS Answer\nFROM Posts Q, Posts A\nWHERE A.OwnerUserId = @UserId AND Q.Id=A.ParentId","CreationDate":"2020-01-17 15:31:19","validated":true,"QueryBody_Original":"DECLARE  @UserId int = ##UserId##\n\nSELECT Q.Title AS Title, Q.Score AS QScore, Q.Body AS Question, A.Score AS AScore, A.Body AS Answer\nFROM Posts Q, Posts A\nWHERE A.OwnerUserId = @UserId AND Q.Id=A.ParentId"},{"QuerySetId":152569,"Title":"List of Users in a given location fragment sorted location","Description":"This query lists all users in a given location sorted by location.\n","QueryBody":"DECLARE  @location varchar = ##location##\n-- select  Id as [User Link], location, reputation\n\nselect Id as [User Link], location, reputation\n\nfrom users\n\n--where UPPER(LEFT(location,5)) LIKE UPPER('%##location##%') and \nWHERE UPPER(LEFT(location,5)) = 'INDIA' \n      and Reputation >= ##minimumReputation##\n\n--order by reputation desc\norder by location asc","CreationDate":"2013-12-13 4:58:53","validated":true,"QueryBody_Original":"DECLARE  @location varchar = ##location##\n-- select  Id as [User Link], location, reputation\n\nselect Id as [User Link], location, reputation\n\nfrom users\n\n--where UPPER(LEFT(location,5)) LIKE UPPER('%##location##%') and \nWHERE UPPER(LEFT(location,5)) = 'INDIA' \n      and Reputation >= ##minimumReputation##\n\n--order by reputation desc\norder by location asc"},{"QuerySetId":153568,"Title":"User List: Top N - Philippines - with false positive exclusion","Description":"List of users in the Philippines.","QueryBody":"SELECT    RankNo, \n         [User Link], \n         Reputation, \n         Location\n\nFROM\n         (\n            SELECT Id [User Link], Reputation, Location,\n                   DENSE_RANK() OVER (ORDER BY Reputation DESC) RankNo\n            FROM   Users\n            WHERE \n              (\n               lower(Location) LIKE '%philippines%'\n               \n               --Location LIKE '%##Location##%'\n               \n               --\n               OR lower(Location) LIKE 'baguio city'\n              \n               )   \n                  \n            ) derivedtable\n\nWHERE   LEN(Location) > 1  and  RankNo <= ##MaximumRankNo## \n\n--ORDER    BY RankNo\nORDER    BY location","CreationDate":"2013-12-14 5:14:20","validated":true,"QueryBody_Original":"SELECT    RankNo, \n         [User Link], \n         Reputation, \n         Location\n\nFROM\n         (\n            SELECT Id [User Link], Reputation, Location,\n                   DENSE_RANK() OVER (ORDER BY Reputation DESC) RankNo\n            FROM   Users\n            WHERE \n              (\n               lower(Location) LIKE '%philippines%'\n               \n               --Location LIKE '%##Location##%'\n               \n               --\n               OR lower(Location) LIKE 'baguio city'\n              \n               )   \n                  \n            ) derivedtable\n\nWHERE   LEN(Location) > 1  and  RankNo <= ##MaximumRankNo## \n\n--ORDER    BY RankNo\nORDER    BY location"},{"QuerySetId":153870,"Title":"User List: Highest downvotes per day ratio with minimum downvotes","Description":"from http:\/\/data.stackexchange.com\/stackoverflow\/query\/13007\/top-100-users-having-highest-votes-per-day-ratio\nExcludes community user.","QueryBody":"SELECT  top ##Top##\n     id [User Link]\n     , datediff(dd, creationdate, GETDATE() )\"Days\"\n     , downvotes\n     , round(cast(nullif(downvotes, 0)as float) \/ datediff(dd, creationdate, GETDATE()),2)  \"DownVotes\/Day Ratio\"\nfrom users\nwhere  id <> -1\nand  downvotes > ##MinDownVotes:int?100##\norder by \"DownVotes\/Day Ratio\" desc","CreationDate":"2014-01-12 23:16:53","validated":true,"QueryBody_Original":null},{"QuerySetId":153874,"Title":"User List: Reputation, DownVotes, UpVotes and percentage","Description":null,"QueryBody":"SELECT  TOP ##MaxNumUsers##\n  \n  ROW_NUMBER() OVER(ORDER BY Reputation DESC) AS [# by Rep],\n  Id as [User Link],\n  ROW_NUMBER() OVER(ORDER BY UpVotes DESC) AS [# by Up Votes], \n  \n  UpVotes as [Up Votes],\n  DownVotes [Down Votes],\n  UpVotes - DownVotes as [Net Votes],\n  \n  ROUND((100.0 * UpVotes \/ (UpVotes + DownVotes) ), 2) as [Up Votes PCT]\n    \n  FROM Users\n  WHERE  UpVotes > ##UpVotesGreaterThan:int?3999##\n   and DownVotes >= ##MinDownVotes:int?0##\n  \n  ORDER BY [Up Votes PCT] DESC, [Net Votes] DESC\n  ","CreationDate":"2014-01-07 9:36:03","validated":true,"QueryBody_Original":null},{"QuerySetId":154622,"Title":"Not very recent, unanswered zero-score questions by low-rep users","Description":null,"QueryBody":"SELECT  TOP 100 p.CreationDate, p.Id AS [Post Link], p.Body \nFROM Posts p INNER JOIN Users u ON p.OwnerUserId = u.Id\nWHERE u.Reputation <= ##ReputationLimit## AND \n      p.PostTypeId = 1 AND \n      p.Score=0 AND\n      DATEDIFF(DAY,p.CreationDate, GETDATE())>29 AND\n      ISNULL(p.AnswerCount,0) = 0 AND \n      ClosedDate IS NULL\nORDER BY p.CreationDate DESC","CreationDate":"2015-03-02 1:34:44","validated":true,"QueryBody_Original":"SELECT  TOP 100 p.CreationDate, p.Id AS [Post Link], p.Body \nFROM Posts p INNER JOIN Users u ON p.OwnerUserId = u.Id\nWHERE u.Reputation <= ##ReputationLimit## AND \n      p.PostTypeId = 1 AND \n      p.Score=0 AND\n      DATEDIFF(DAY,p.CreationDate, GETDATE())>29 AND\n      ISNULL(p.AnswerCount,0) = 0 AND \n      ClosedDate IS NULL\nORDER BY p.CreationDate DESC"},{"QuerySetId":155639,"Title":"User List: Top N - by Tag","Description":null,"QueryBody":"WITH  USER_BY_TAG\nAS\n(\n  SELECT \n    ROW_NUMBER() OVER(ORDER BY COUNT(*) DESC) Rank,\n    u.Id AS [User Link],\n    DisplayName,\n    Location,    \n    --TagName,\n    COUNT(*) AS UpVotes\n  FROM Tags t\n      INNER JOIN PostTags pt ON pt.TagId = t.id\n      INNER JOIN Posts     p ON p.ParentId = pt.PostId\n      INNER JOIN Votes     v ON v.PostId = p.Id and VoteTypeId = 2\n      INNER JOIN Users     u ON u.Id = p.OwnerUserId\n  WHERE \n     TagName = ##tagName:string##\n     \n  GROUP BY u.id, DisplayName, Location\n)\n\nSELECT * FROM USER_BY_TAG WHERE rank <= 1000\n\nORDER BY upvotes DESC ;","CreationDate":"2013-12-23 4:24:20","validated":true,"QueryBody_Original":null},{"QuerySetId":157678,"Title":"My answers in POPULAR QUESTIONS","Description":null,"QueryBody":"SELECT \nSUM(q.ViewCount) AS views, q.id AS [Post Link] ,a.score\nFROM Posts q\nINNER JOIN Posts a ON a.ParentId = q.Id\nWHERE a.OwnerUserId = ##userid##\nHAVING SUM(q.ViewCount) > 1000\nORDER BY views desc","CreationDate":"2014-01-03 18:16:35","validated":true,"QueryBody_Original":"SELECT \nSUM(q.ViewCount) AS views, q.id AS [Post Link] ,a.score\nFROM Posts q\nINNER JOIN Posts a ON a.ParentId = q.Id\nWHERE a.OwnerUserId = ##userid##\nHAVING SUM(q.ViewCount) > 1000\nORDER BY views desc"},{"QuerySetId":157834,"Title":"User List: Top N - Argentina - with false positive exclusions","Description":"List of Users in Argentina","QueryBody":"SELECT \n    Top ##Top##\n    ROW_NUMBER() OVER(ORDER BY Reputation DESC) AS [#], \n    Id AS [User Link], \n    Reputation,\n    Location,\n    --CreationDate,\n    LastAccessDate,\n    UpVotes,\n    DownVotes\n    \nFROM\n    Users\n\nWHERE\n    (\n    lower(location) like lower('%Argentina%')\n\n      or location like ('%ARG')\n     )\n  \n     and not\n     (\n     lower(location) LIKE lower('%##Exclusion##%')\n     )\n order by location asc","CreationDate":"2014-01-05 2:27:21","validated":true,"QueryBody_Original":null},{"QuerySetId":158240,"Title":"User List: Downvoters by Percentage","Description":null,"QueryBody":"SELECT  TOP ##NumOfUsers:Int?100##\n  id as [User Link],\n  UpVotes as [Up Votes],\n  DownVotes [Down Votes],\n  UpVotes - DownVotes as [Net Votes],\n  ROUND((100.0 * DownVotes \/ (UpVotes + DownVotes) ), 1) as [DownVotes Percent]\nFROM Users\nWHERE\n  DownVotes > ##DownVotesGreaterThan:Int?9##\norder by [DownVotes Percent] desc, DownVotes desc","CreationDate":"2014-01-07 6:01:31","validated":true,"QueryBody_Original":null},{"QuerySetId":158758,"Title":"Answers of mine that are voted higher than the accepted answer","Description":"Inverse query of http:\/\/data.stackexchange.com\/stackoverflow\/query\/158759\/accepted-answers-of-mine-that-are-not-the-highest-voted-answer","QueryBody":"SELECT \n  q.Id AS [Post Link],\n  p.Score AS [Your Score],\n  a.Score AS [Accepted Answer Score]\nFROM Posts p\n  JOIN Posts q ON p.ParentId = q.Id\n  JOIN Posts a ON q.AcceptedAnswerId = a.Id  -- accepted answer\nWHERE p.OwnerUserId = ##UserId##\n  AND p.PostTypeId = 2\n  AND p.Score > a.Score\nORDER BY p.Score DESC","CreationDate":"2014-01-09 12:42:02","validated":true,"QueryBody_Original":"SELECT \n  q.Id AS [Post Link],\n  p.Score AS [Your Score],\n  a.Score AS [Accepted Answer Score]\nFROM Posts p\n  JOIN Posts q ON p.ParentId = q.Id\n  JOIN Posts a ON q.AcceptedAnswerId = a.Id  -- accepted answer\nWHERE p.OwnerUserId = ##UserId##\n  AND p.PostTypeId = 2\n  AND p.Score > a.Score\nORDER BY p.Score DESC"},{"QuerySetId":158759,"Title":"Accepted answers of mine that are not the highest voted answer","Description":"Inverse query of http:\/\/data.stackexchange.com\/stackoverflow\/query\/158758\/answers-of-mine-that-are-voted-higher-than-the-accepted-answer","QueryBody":"SELECT \n  q.Id AS [Post Link],\n  a.Score AS [Your Score],\n  MAX(p.Score) AS [Highest Score]\nFROM Posts a  -- accepted answers\n  JOIN Posts q ON q.AcceptedAnswerId = a.Id\n  JOIN Posts p ON p.ParentId = q.Id\nWHERE a.OwnerUserId = ##UserId##\n  AND a.PostTypeId = 2\n  AND a.Score < p.Score\nGROUP BY q.Id, a.Score\nORDER BY a.Score DESC","CreationDate":"2014-01-09 12:42:07","validated":true,"QueryBody_Original":"SELECT \n  q.Id AS [Post Link],\n  a.Score AS [Your Score],\n  MAX(p.Score) AS [Highest Score]\nFROM Posts a  -- accepted answers\n  JOIN Posts q ON q.AcceptedAnswerId = a.Id\n  JOIN Posts p ON p.ParentId = q.Id\nWHERE a.OwnerUserId = ##UserId##\n  AND a.PostTypeId = 2\n  AND a.Score < p.Score\nGROUP BY q.Id, a.Score\nORDER BY a.Score DESC"},{"QuerySetId":159260,"Title":"User List: Top N - Austria - with false positive exclusions","Description":null,"QueryBody":"SELECT \n    Top ##Top##\n    ROW_NUMBER() OVER(ORDER BY Reputation DESC) AS [#], \n    Id AS [User Link], \n    Reputation,\n    Location,\n    --CreationDate,\n    LastAccessDate,\n    UpVotes,\n    DownVotes\n    \nFROM\n    Users\n\nWHERE\n     (\n      lower(Location) LIKE '%austria%' \n      -- http:\/\/sustainablesources.com\/resources\/country-abbreviations\/\n      OR Location LIKE '%AT' \n              \n      OR lower(Location) LIKE 'dummy'  \n      )\n    \n       -- exclusions\n       and not\n       (   \n       lower(Location) LIKE '%dummy%'\n       )   \n                  \n    --Temporarily sort by location to more easily pick out false positive entries\n    ORDER BY Location ASC;","CreationDate":"2014-01-11 19:14:31","validated":true,"QueryBody_Original":null},{"QuerySetId":159325,"Title":"Count: New Users per Month","Description":null,"QueryBody":"SELECT \nmonth(CreationDate), Count(Id)\nfrom Users\nwhere year(CreationDate) = ##Year##\ngroup by month(CreationDate)\norder by month(CreationDate) asc","CreationDate":"2014-01-15 17:49:20","validated":true,"QueryBody_Original":"SELECT \nmonth(CreationDate), Count(Id)\nfrom Users\nwhere year(CreationDate) = ##Year##\ngroup by month(CreationDate)\norder by month(CreationDate) asc"},{"QuerySetId":160592,"Title":"Non answered questions for a tag","Description":null,"QueryBody":"SELECT  Id AS [Post Link],\n       Tags AS [Tags],\n       Score,\n       ViewCount AS Views,\n       CreationDate AS [Date Asked]\n    FROM Posts\n    WHERE\n    Tags LIKE '%<' + ##TagName:string## + '>%' AND\n    ClosedDate IS NULL AND\n    (AnswerCount = 1)","CreationDate":"2016-01-05 17:24:31","validated":true,"QueryBody_Original":null},{"QuerySetId":160757,"Title":"All my answers for a given year","Description":"All my answers on the site\n","QueryBody":"DECLARE  @UserId int = ##UserId##\nDECLARE @Year int = ##Year##\n\nSELECT \n    a.Id AS [Post Link],\n    CASE WHEN q.AcceptedAnswerId=a.Id THEN 'Accepted' END AS Accepted,\n    CASE WHEN q.OwnerUserId=a.OwnerUserId THEN 'Self' END AS Self,\n    a.Score,\n    a.CreationDate,\n    CASE WHEN q.CommunityOwnedDate IS NOT NULL THEN 'Q'\n         WHEN a.CommunityOwnedDate IS NOT NULL THEN 'A' END AS CW   \nFROM\n    Posts q\n  INNER JOIN\n    Posts a ON q.Id = a.ParentId\nWHERE\n    a.OwnerUserId = @UserId\n  AND\n    a.PostTypeId = 2\n  AND \n    Year(q.CreationDate) = @Year\nORDER BY\n    a.Score DESC, a.CreationDate DESC","CreationDate":"2014-01-18 0:33:08","validated":true,"QueryBody_Original":"DECLARE  @UserId int = ##UserId##\nDECLARE @Year int = ##Year##\n\nSELECT \n    a.Id AS [Post Link],\n    CASE WHEN q.AcceptedAnswerId=a.Id THEN 'Accepted' END AS Accepted,\n    CASE WHEN q.OwnerUserId=a.OwnerUserId THEN 'Self' END AS Self,\n    a.Score,\n    a.CreationDate,\n    CASE WHEN q.CommunityOwnedDate IS NOT NULL THEN 'Q'\n         WHEN a.CommunityOwnedDate IS NOT NULL THEN 'A' END AS CW   \nFROM\n    Posts q\n  INNER JOIN\n    Posts a ON q.Id = a.ParentId\nWHERE\n    a.OwnerUserId = @UserId\n  AND\n    a.PostTypeId = 2\n  AND \n    Year(q.CreationDate) = @Year\nORDER BY\n    a.Score DESC, a.CreationDate DESC"},{"QuerySetId":162722,"Title":"Users with the most posts above a score of N.","Description":null,"QueryBody":"DECLARE  @minScore numeric = ##MinScore?100##\n\nSELECT TOP 50\n    Posts.OwnerUserId AS [User Link],\n    Count(Posts.Score) AS [Count],\n    Sum(Posts.Score) AS [Total Score]\nFROM Posts\nWHERE\n    Posts.Score >= @minScore and\n    Posts.PostTypeId <= 2 and\n    Posts.OwnerUserId is not null\nGROUP BY Posts.OwnerUserId\nORDER BY [Count] DESC, [Total Score] DESC","CreationDate":"2017-08-01 17:07:39","validated":true,"QueryBody_Original":"DECLARE  @minScore numeric = ##MinScore?100##\n\nSELECT TOP 50\n    Posts.OwnerUserId AS [User Link],\n    Count(Posts.Score) AS [Count],\n    Sum(Posts.Score) AS [Total Score]\nFROM Posts\nWHERE\n    Posts.Score >= @minScore and\n    Posts.PostTypeId <= 2 and\n    Posts.OwnerUserId is not null\nGROUP BY Posts.OwnerUserId\nORDER BY [Count] DESC, [Total Score] DESC"},{"QuerySetId":162872,"Title":"My answer count since Feb 1 2013","Description":null,"QueryBody":"DECLARE  @UserId int = 103167;\n\nselect COUNT(myAnswer.ParentId) as NumQuestionsAnswerOffered\n  from Posts as myAnswer\n  left join Posts as theQuestion on theQuestion.Id = myAnswer.ParentId\n  where myAnswer.ownerUserId = @UserId and myAnswer.postTypeId = 2 and myAnswer.CreationDate > {d '2013-02-01'}\n  and myAnswer.Id = theQuestion.AcceptedAnswerId\n;","CreationDate":"2014-01-25 10:38:49","validated":true,"QueryBody_Original":null},{"QuerySetId":163527,"Title":"person's comments on foreign posts","Description":null,"QueryBody":"SELECT \n       comment.Id AS [Comment Link],\n       commenter.DisplayName AS commenter,\n       CASE\n         WHEN pop.DisplayName IS NULL THEN NULL \n         ELSE op.DisplayName END\n       AS answerer, CASE \n         WHEN pop.DisplayName IS NULL THEN op.DisplayName \n         ELSE pop.DisplayName END\n       AS asker\n\nFROM Comments AS comment\n     JOIN Users AS commenter ON commenter.Id = comment.UserId\n     JOIN (Posts AS opPost JOIN Users AS op ON op.Id = opPost.OwnerUserId)\n  ON opPost.Id = comment.PostId\nLEFT JOIN (Posts AS popPost JOIN Users AS pop ON pop.Id = popPost.OwnerUserId)\n       ON popPost.Id = opPost.ParentId\n       \nWHERE commenter.Id  = ##UserID##\n  AND op.Id        != ##UserID##\n  AND (pop.Id       != ##UserID## OR pop.Id IS NULL)\n\nORDER BY comment.Id DESC","CreationDate":"2014-01-28 13:01:18","validated":true,"QueryBody_Original":"SELECT \n       comment.Id AS [Comment Link],\n       commenter.DisplayName AS commenter,\n       CASE\n         WHEN pop.DisplayName IS NULL THEN NULL \n         ELSE op.DisplayName END\n       AS answerer, CASE \n         WHEN pop.DisplayName IS NULL THEN op.DisplayName \n         ELSE pop.DisplayName END\n       AS asker\n\nFROM Comments AS comment\n     JOIN Users AS commenter ON commenter.Id = comment.UserId\n     JOIN (Posts AS opPost JOIN Users AS op ON op.Id = opPost.OwnerUserId)\n  ON opPost.Id = comment.PostId\nLEFT JOIN (Posts AS popPost JOIN Users AS pop ON pop.Id = popPost.OwnerUserId)\n       ON popPost.Id = opPost.ParentId\n       \nWHERE commenter.Id  = ##UserID##\n  AND op.Id        != ##UserID##\n  AND (pop.Id       != ##UserID## OR pop.Id IS NULL)\n\nORDER BY comment.Id DESC"},{"QuerySetId":163670,"Title":"How many downvotes do I have for each question?","Description":null,"QueryBody":"DECLARE  @UserId int = ##UserId##\n\nSELECT --TOP 20 \n    TagName,\n    COUNT(*) AS DownVotes \nFROM Tags\n    INNER JOIN PostTags ON PostTags.TagId = Tags.id\n    INNER JOIN Posts ON Posts.ParentId = PostTags.PostId\n    INNER JOIN Votes ON Votes.PostId = Posts.Id and VoteTypeId = 2\nWHERE \n    Posts.OwnerUserId = @UserId\nGROUP BY TagName \nORDER BY DownVotes DESC","CreationDate":"2014-01-28 22:15:29","validated":true,"QueryBody_Original":"DECLARE  @UserId int = ##UserId##\n\nSELECT --TOP 20 \n    TagName,\n    COUNT(*) AS DownVotes \nFROM Tags\n    INNER JOIN PostTags ON PostTags.TagId = Tags.id\n    INNER JOIN Posts ON Posts.ParentId = PostTags.PostId\n    INNER JOIN Votes ON Votes.PostId = Posts.Id and VoteTypeId = 2\nWHERE \n    Posts.OwnerUserId = @UserId\nGROUP BY TagName \nORDER BY DownVotes DESC"},{"QuerySetId":167634,"Title":"Questions with close votes by tag with at least two tags (multiple tags same question)","Description":null,"QueryBody":"SELECT  row_number() over (order by p.id),\n  p.id AS [Post Link], \n  p.tags\nfrom posts p\ninner join votes v\n  on p.id = v.postid\ninner join posttags pt\n  on p.id = pt.postid\ninner join tags t\n  on pt.tagid = t.id\nwhere v.votetypeid = 6\n  and p.closeddate is null\n  and t.tagname IN (##Tag1:string?tagname##, ##Tag2:string?tagname##)\ngroup by p.id, p.tags\nhaving count(distinct t.tagname) >= 2","CreationDate":"2014-02-15 0:39:19","validated":true,"QueryBody_Original":null},{"QuerySetId":168412,"Title":"Search for obsolete \"please accept\" comments on my answers","Description":"Search your own comments for a string. Results show the comment, its score, the date, and a link to the post, newest comments first.","QueryBody":"DECLARE  @MyUserID INT = ##UserID:int##\n\nSELECT\n    Comments.Id AS [Comment Link],\n    Comments.CreationDate,\n    Comments.PostId AS [Post Link]\nFROM Comments, Posts Answer\nLEFT JOIN Posts Question ON Answer.ParentId = Question.id\nWHERE\n    Comments.PostId in (Answer.Id, Question.Id) AND\n    Answer.Id = Question.AcceptedAnswerId  AND\n    Answer.PostTypeId = 2 AND\n    Answer.OwnerUserId = @MyUserID AND\n    Comments.UserId = ##UserID## AND\n    Comments.Text LIKE '%\/questions\/5234\/how-does-accepting-an-answer-work%'\nORDER BY Comments.CreationDate DESC","CreationDate":"2014-08-03 14:41:36","validated":true,"QueryBody_Original":"DECLARE  @MyUserID INT = ##UserID:int##\n\nSELECT\n    Comments.Id AS [Comment Link],\n    Comments.CreationDate,\n    Comments.PostId AS [Post Link]\nFROM Comments, Posts Answer\nLEFT JOIN Posts Question ON Answer.ParentId = Question.id\nWHERE\n    Comments.PostId in (Answer.Id, Question.Id) AND\n    Answer.Id = Question.AcceptedAnswerId  AND\n    Answer.PostTypeId = 2 AND\n    Answer.OwnerUserId = @MyUserID AND\n    Comments.UserId = ##UserID## AND\n    Comments.Text LIKE '%\/questions\/5234\/how-does-accepting-an-answer-work%'\nORDER BY Comments.CreationDate DESC"},{"QuerySetId":169693,"Title":"Normalized Reputation Frequency Distribution with parameters","Description":"From http:\/\/data.stackexchange.com\/stackoverflow\/query\/90233\/reputation-frequency-distribution","QueryBody":"SELECT  FLOOR(0.5 + reputation \/ 1000 \/ DATEDIFF(day, CreationDate, LastAccessDate+1)) * ##step## AS [UserReputationPerDayActive],\n       Count(id)         AS [UserCount],\n       MAX(DisplayName)\nFROM   users \nGROUP  BY FLOOR(0.5 + reputation \/ 1000 \/ DATEDIFF(day, CreationDate, LastAccessDate+1)) * 1000\nORDER  BY [UserReputationPerDayActive] ASC","CreationDate":"2014-02-21 13:13:11","validated":true,"QueryBody_Original":"SELECT  FLOOR(0.5 + reputation \/ 1000 \/ DATEDIFF(day, CreationDate, LastAccessDate+1)) * ##step## AS [UserReputationPerDayActive],\n       Count(id)         AS [UserCount],\n       MAX(DisplayName)\nFROM   users \nGROUP  BY FLOOR(0.5 + reputation \/ 1000 \/ DATEDIFF(day, CreationDate, LastAccessDate+1)) * 1000\nORDER  BY [UserReputationPerDayActive] ASC"},{"QuerySetId":170479,"Title":"Answers that confess they should be comments","Description":null,"QueryBody":"SELECT \nid [Post Link], body\nfrom posts\nwhere posttypeid = 2\nand creationdate between '##StartDate?2015-01-01## 00:00:00'\nand CONVERT(DATETIME, DATEADD(day, ##Days?30##, '##StartDate##')) \nand (\n  body like '%my rep%'\n  or\n  body like '%not enough rep%'\n  or\n  body like '%I don''t have enough rep%'\n  or\n  body like '%should be a comment%'\n  or\n  body like '%should have been a comment%'\n  )","CreationDate":"2015-09-30 18:17:38","validated":true,"QueryBody_Original":"SELECT \nid [Post Link], body\nfrom posts\nwhere posttypeid = 2\nand creationdate between '##StartDate?2015-01-01## 00:00:00'\nand CONVERT(DATETIME, DATEADD(day, ##Days?30##, '##StartDate##')) \nand (\n  body like '%my rep%'\n  or\n  body like '%not enough rep%'\n  or\n  body like '%I don''t have enough rep%'\n  or\n  body like '%should be a comment%'\n  or\n  body like '%should have been a comment%'\n  )"},{"QuerySetId":172705,"Title":"Number of questions in a tag","Description":null,"QueryBody":"DECLARE  @Tag nvarchar(25) = ##Tag:string##\n\nSELECT\n  COUNT(*) AS numQ\nFROM\n  Posts\nWHERE\n  Tags=@Tag","CreationDate":"2014-03-05 14:33:06","validated":true,"QueryBody_Original":"DECLARE  @Tag nvarchar(25) = ##Tag:string##\n\nSELECT\n  COUNT(*) AS numQ\nFROM\n  Posts\nWHERE\n  Tags=@Tag"},{"QuerySetId":174143,"Title":"What are my non-voted comments?","Description":null,"QueryBody":"SELECT \n  c.CreationDate,\n  c.Id AS [Comment Link]\nFROM\n  Comments c\nWHERE\n  c.UserId = ##UserId## AND c.Score = 0\nORDER BY\n  c.CreationDate DESC","CreationDate":"2014-05-18 12:54:04","validated":true,"QueryBody_Original":"SELECT \n  c.CreationDate,\n  c.Id AS [Comment Link]\nFROM\n  Comments c\nWHERE\n  c.UserId = ##UserId## AND c.Score = 0\nORDER BY\n  c.CreationDate DESC"},{"QuerySetId":180327,"Title":"How many posts have I edited?","Description":null,"QueryBody":"SELECT  Posts.LastEditorUserId AS [UserId]\n    , COUNT(DISTINCT Posts.Id) AS [Edited Posts]\nFROM Posts\nWHERE Posts.LastEditorUserId = ##UserId## \nand Posts.PostTypeId = 1\nand Posts.OwnerUserId != ##UserId## \nand Posts.ClosedDate is null\nand Posts.CommunityOwnedDate is null\nGROUP BY Posts.LastEditorUserId","CreationDate":"2014-08-01 20:52:13","validated":true,"QueryBody_Original":"SELECT  Posts.LastEditorUserId AS [UserId]\n    , COUNT(DISTINCT Posts.Id) AS [Edited Posts]\nFROM Posts\nWHERE Posts.LastEditorUserId = ##UserId## \nand Posts.PostTypeId = 1\nand Posts.OwnerUserId != ##UserId## \nand Posts.ClosedDate is null\nand Posts.CommunityOwnedDate is null\nGROUP BY Posts.LastEditorUserId"},{"QuerySetId":184521,"Title":"Number of questions with ViewCount > nviews","Description":null,"QueryBody":"WITH  TaggedPosts AS (\nSELECT ViewCount\nFROM Posts\nWHERE PostTypeId = 1 and Tags LIKE '%##tagSubstring?python##%'\n),MostViewedQuestions AS (\n  SELECT Count = Count(*) \n  FROM TaggedPosts \n  WHERE ViewCount > ##nviews:int?10000##\n)\nSELECT Count, CAST(Count AS decimal(20, 5)) * 100.0 \/ (SELECT Count(*) FROM TaggedPosts) as Percentile\nFROM MostViewedQuestions","CreationDate":"2014-04-20 2:41:38","validated":true,"QueryBody_Original":null},{"QuerySetId":185843,"Title":"Answer length and character rentability","Description":null,"QueryBody":"SELECT \n  p.id as [Post Link],\n  Len(p.Body) AS Length,\n  p.Score,\n  CAST(p.Score AS FLOAT)\/ Len(p.Body) AS rentability\n  , v.BountyAmount, v.VoteTypeId\nFROM Posts p\n  JOIN Users u on u.Id = p.OwnerUserId\n  JOIN Votes v on v.PostId = p.Id\nWHERE p.OwnerUserId = ##UserId##\n  --AND u.Id = p.OwnerUserId\n  AND p.PostTypeId = 2\nORDER BY rentability DESC, Length ASC","CreationDate":"2014-06-04 10:28:03","validated":true,"QueryBody_Original":"SELECT \n  p.id as [Post Link],\n  Len(p.Body) AS Length,\n  p.Score,\n  CAST(p.Score AS FLOAT)\/ Len(p.Body) AS rentability\n  , v.BountyAmount, v.VoteTypeId\nFROM Posts p\n  JOIN Users u on u.Id = p.OwnerUserId\n  JOIN Votes v on v.PostId = p.Id\nWHERE p.OwnerUserId = ##UserId##\n  --AND u.Id = p.OwnerUserId\n  AND p.PostTypeId = 2\nORDER BY rentability DESC, Length ASC"},{"QuerySetId":189571,"Title":"Highest Upvoted Comments (with links)","Description":"\n","QueryBody":"DECLARE  @UserId int = ##UserId##\n\nSELECT\n    Id [Comment Link],\n    Score\nFROM \n    Comments\nWHERE \n    UserId = @UserId\n    AND Score > 0\nORDER BY \n    Score DESC","CreationDate":"2014-05-03 0:27:48","validated":true,"QueryBody_Original":"DECLARE  @UserId int = ##UserId##\n\nSELECT\n    Id [Comment Link],\n    Score\nFROM \n    Comments\nWHERE \n    UserId = @UserId\n    AND Score > 0\nORDER BY \n    Score DESC"},{"QuerySetId":189839,"Title":"Top 100 editors in the past 30 days","Description":null,"QueryBody":"SELECT TOP (100)\n  ph.UserId AS [User Link],\n  COUNT(*) AS [Count]\nFROM\n  PostHistory ph\nWHERE\n  ph.PostHistoryTypeId IN (4, 5, 6) -- edit title\/body\/tags\n  AND ph.CreationDate >= DATEADD(DAY, -30, GETDATE())\nGROUP BY\n  ph.UserId\nORDER BY\n  [Count] DESC","CreationDate":"2016-12-26 20:56:10","validated":true,"QueryBody_Original":"SELECT TOP (100)\n  ph.UserId AS [User Link],\n  COUNT(*) AS [Count]\nFROM\n  PostHistory ph\nWHERE\n  ph.PostHistoryTypeId IN (4, 5, 6) -- edit title\/body\/tags\n  AND ph.CreationDate >= DATEADD(DAY, -30, GETDATE())\nGROUP BY\n  ph.UserId\nORDER BY\n  [Count] DESC"},{"QuerySetId":190611,"Title":"most \"linked from\" posts for a user","Description":null,"QueryBody":"SELECT \n  pl.PostId as Post_Link,\n  count(pl.PostId) as Number_of_Links\nfrom PostLinks pl\njoin Posts p on p.ParentId = pl.PostId\nwhere p.OwnerUserId = ##UserId##\ngroup by pl.PostId\norder by Number_of_Links desc","CreationDate":"2014-05-06 12:23:16","validated":true,"QueryBody_Original":"SELECT \n  pl.PostId as Post_Link,\n  count(pl.PostId) as Number_of_Links\nfrom PostLinks pl\njoin Posts p on p.ParentId = pl.PostId\nwhere p.OwnerUserId = ##UserId##\ngroup by pl.PostId\norder by Number_of_Links desc"},{"QuerySetId":190620,"Title":"enumerate links for a post","Description":null,"QueryBody":"SELECT \n  PostId as [Post Link],\n  LinkTypeId,\n  CreationDate,\n  RelatedPostId\nfrom PostLinks\nwhere PostId = ##PostId:int##\norder by PostId","CreationDate":"2014-05-06 12:08:33","validated":true,"QueryBody_Original":null},{"QuerySetId":190636,"Title":"Most \"linked to\" user posts with tags","Description":null,"QueryBody":"SELECT \n  pl.RelatedPostId as [Post Link],\n  count(pl.RelatedPostId) as Number_of_Links\nfrom PostLinks pl\njoin Posts p on p.ParentId = pl.RelatedPostId\njoin Posts q on q.Id = p.ParentId\nwhere p.OwnerUserId = ##UserId:int##  and q.Tags like '%##Tags##%'\ngroup by pl.RelatedPostId\norder by Number_of_Links desc","CreationDate":"2014-05-07 18:38:35","validated":true,"QueryBody_Original":null},{"QuerySetId":193428,"Title":"Top users per tag by country","Description":null,"QueryBody":"DECLARE  @limit int = ##Limit##;\nDECLARE @tag_id int = (select id from tags where tagname = '##TagName##');\n\n--select rank() over (order by score desc) \"Rank\", * from (\nselect top (@limit)\n  rank() over (order by sum(answers.score) desc) \"Rank\",\n  users.id \"User Link\",\n  sum(answers.score) as \"Score\"\nfrom users\n  join posts answers on (users.id = answers.owneruserid)\n  join posts parent on (answers.parentid = parent.id)\n  join posttags on (parent.id = posttags.postid)\nwhere posttags.tagid = @tag_id\n  and answers.posttypeid = 2  -- answers only\n  and LOWER(users.location) LIKE LOWER('%##CountryName##%')\ngroup by users.id\norder by sum(answers.score) desc;","CreationDate":"2014-05-12 4:02:21","validated":true,"QueryBody_Original":null},{"QuerySetId":194663,"Title":"User Ratio of Upvotes to Downvotes received.","Description":"Displays the number of upvotes and downvotes received on questions and answers and their ratio.","QueryBody":"SELECT \n    SUM(CASE WHEN VoteTypeId = 2 THEN 1 ELSE 0 END) AS UpVotes,\n    SUM(CASE WHEN VoteTypeId = 3 THEN 1 ELSE 0 END) AS DownVotes,\n    (CAST(SUM(CASE WHEN VoteTypeId = 2 THEN 1 ELSE 0 END) AS float) \/ CAST(SUM(CASE WHEN VoteTypeId = 3 THEN 1 ELSE 0 END) AS float)) AS Ratio\nfrom\n    Votes v inner join Posts p on v.PostId=p.Id\nwhere\n    p.OwnerUserId=##UserId##","CreationDate":"2014-05-17 0:01:19","validated":true,"QueryBody_Original":"SELECT \n    SUM(CASE WHEN VoteTypeId = 2 THEN 1 ELSE 0 END) AS UpVotes,\n    SUM(CASE WHEN VoteTypeId = 3 THEN 1 ELSE 0 END) AS DownVotes,\n    (CAST(SUM(CASE WHEN VoteTypeId = 2 THEN 1 ELSE 0 END) AS float) \/ CAST(SUM(CASE WHEN VoteTypeId = 3 THEN 1 ELSE 0 END) AS float)) AS Ratio\nfrom\n    Votes v inner join Posts p on v.PostId=p.Id\nwhere\n    p.OwnerUserId=##UserId##"},{"QuerySetId":195056,"Title":"Get all questions which have (at least) an answer by a specified user and with no accepted answer","Description":null,"QueryBody":"SELECT  Count(q.Id) as count\nFROM Posts a\nJOIN Posts q on a.ParentId = q.Id\nWHERE a.OwnerUserId = ##UserId##\nand a.PostTypeId = 2\nand q.AcceptedAnswerId is null","CreationDate":"2017-08-19 5:26:12","validated":true,"QueryBody_Original":"SELECT  Count(q.Id) as count\nFROM Posts a\nJOIN Posts q on a.ParentId = q.Id\nWHERE a.OwnerUserId = ##UserId##\nand a.PostTypeId = 2\nand q.AcceptedAnswerId is null"},{"QuerySetId":199825,"Title":"View recent edits to tag wikis and excerpts","Description":null,"QueryBody":"DECLARE  @max_days_ago int = 180\n\nSELECT\n  u.Count,\n  u.TagName,\n  u.LastEditDate,\n  u.LastEditorUserId AS [User Link],\n  'site:\/\/edit-tag-wiki\/'+CAST(u.Id AS varchar)+'|(edit)' AS [Edit],\n  'site:\/\/posts\/'+CAST(u.WikiPartId AS varchar)+'\/revisions|('+u.Type+' hist)' AS [Hist]\nFROM\n  (SELECT t.Count, t.TagName, p.LastEditDate, p.LastEditorUserId, t.Id, \n          t.ExcerptPostId AS [WikiPartId], 'excerpt' AS [Type]\n   FROM Tags AS t LEFT OUTER JOIN Posts p ON t.ExcerptPostId = p.Id\n   UNION ALL\n   SELECT t.Count, t.TagName, p.LastEditDate, p.LastEditorUserId, t.Id, \n          t.WikiPostId AS [WikiPartId], 'wiki' AS [Type]\n   FROM Tags AS t LEFT OUTER JOIN Posts p ON t.WikiPostId = p.Id) AS u\nWHERE\n  DATEDIFF(DAY, u.LastEditDate, GETDATE()) < @max_days_ago\nORDER BY\n  [LastEditDate] DESC","CreationDate":"2015-04-14 19:31:54","validated":true,"QueryBody_Original":"DECLARE  @max_days_ago int = 180\n\nSELECT\n  u.Count,\n  u.TagName,\n  u.LastEditDate,\n  u.LastEditorUserId AS [User Link],\n  'site:\/\/edit-tag-wiki\/'+CAST(u.Id AS varchar)+'|(edit)' AS [Edit],\n  'site:\/\/posts\/'+CAST(u.WikiPartId AS varchar)+'\/revisions|('+u.Type+' hist)' AS [Hist]\nFROM\n  (SELECT t.Count, t.TagName, p.LastEditDate, p.LastEditorUserId, t.Id, \n          t.ExcerptPostId AS [WikiPartId], 'excerpt' AS [Type]\n   FROM Tags AS t LEFT OUTER JOIN Posts p ON t.ExcerptPostId = p.Id\n   UNION ALL\n   SELECT t.Count, t.TagName, p.LastEditDate, p.LastEditorUserId, t.Id, \n          t.WikiPostId AS [WikiPartId], 'wiki' AS [Type]\n   FROM Tags AS t LEFT OUTER JOIN Posts p ON t.WikiPostId = p.Id) AS u\nWHERE\n  DATEDIFF(DAY, u.LastEditDate, GETDATE()) < @max_days_ago\nORDER BY\n  [LastEditDate] DESC"},{"QuerySetId":200761,"Title":"Active users here with High SO Rep","Description":null,"QueryBody":"DECLARE  @epoch as DateTime = DateAdd(Week, - ##Weeks:int?8##, CURRENT_TIMESTAMP)\n;\nwith UserData as (\nselect here.Id as Id,\n       here.Reputation,\n       so.Reputation as SORep\nfrom Users here, [stackoverflow]..Users so\nwhere here.AccountId = so.AccountId\n  and so.Reputation >= ##SORep:int?50000##\n  and here.LastAccessDate >= @epoch\n  \n  )\n\nselect Id as [User Link],\n       (select max(Posts.Id)\n        from Posts\n        where CreationDate > @epoch\n          and OwnerUserId = UserData.Id) as [Post Link],\n       Reputation,\n       SORep\nfrom UserData","CreationDate":"2014-06-12 9:22:10","validated":true,"QueryBody_Original":null},{"QuerySetId":203461,"Title":"per user: list of answers that are top-voted for their respective questions","Description":null,"QueryBody":"SELECT  id as Post_Link, score from posts as p\nwhere posttypeid=2\nand score=(SELECT max(score) from posts\n  where posttypeid=2\n  and p.parentid=parentid)\nand owneruserid=##userID##\nand score > 0\norder by score desc","CreationDate":"2014-06-24 22:34:14","validated":true,"QueryBody_Original":"SELECT  id as Post_Link, score from posts as p\nwhere posttypeid=2\nand score=(SELECT max(score) from posts\n  where posttypeid=2\n  and p.parentid=parentid)\nand owneruserid=##userID##\nand score > 0\norder by score desc"},{"QuerySetId":204368,"Title":"All questions with a *single* tag","Description":null,"QueryBody":"SELECT  Id as [Post Link], AnswerCount\nFROM Posts\nWHERE PostTypeId = 1\n  AND Tags = CONCAT('<', ##Tag:string##, '>')\n  AND ClosedDate IS NULL\nORDER BY CreationDate DESC","CreationDate":"2019-08-29 1:10:47","validated":true,"QueryBody_Original":"SELECT  Id as [Post Link], AnswerCount\nFROM Posts\nWHERE PostTypeId = 1\n  AND Tags = CONCAT('<', ##Tag:string##, '>')\n  AND ClosedDate IS NULL\nORDER BY CreationDate DESC"},{"QuerySetId":206983,"Title":"Mean Expertise Contribution (MEC) in a tag","Description":null,"QueryBody":"DECLARE  @tag_debate float = 2.22;\n\nwith answers as (\n  select a.OwnerUserId UserId,\n         1.0\/rank() over (partition by q.Id order by a.Score desc) utility,\n         1.0*q.AnswerCount debatableness,\n         1.0\/rank() over (partition by q.Id order by a.Score desc) *\n         q.AnswerCount\/@tag_debate EC\n  from Posts q\n       join Posts a on q.Id = a.ParentId\n       join PostTags on q.Id = PostId\n       join Tags t on TagId = t.Id\n  where TagName = '##tag##' --and q.Id = 9929585\n),\n\nuser_MEC as (\n  select UserId as [User Link],\n         sum(EC)\/count(*) MEC,\n         avg(utility) AU, \n         avg(debatableness) D,\n         @tag_debate D_avg_t,\n         count(*) Q_u_t\n  from answers\n  group by UserId  \n)\n\nselect count(*)\nfrom user_MEC","CreationDate":"2014-07-11 0:31:41","validated":true,"QueryBody_Original":"DECLARE  @tag_debate float = 2.22;\n\nwith answers as (\n  select a.OwnerUserId UserId,\n         1.0\/rank() over (partition by q.Id order by a.Score desc) utility,\n         1.0*q.AnswerCount debatableness,\n         1.0\/rank() over (partition by q.Id order by a.Score desc) *\n         q.AnswerCount\/@tag_debate EC\n  from Posts q\n       join Posts a on q.Id = a.ParentId\n       join PostTags on q.Id = PostId\n       join Tags t on TagId = t.Id\n  where TagName = '##tag##' --and q.Id = 9929585\n),\n\nuser_MEC as (\n  select UserId as [User Link],\n         sum(EC)\/count(*) MEC,\n         avg(utility) AU, \n         avg(debatableness) D,\n         @tag_debate D_avg_t,\n         count(*) Q_u_t\n  from answers\n  group by UserId  \n)\n\nselect count(*)\nfrom user_MEC"},{"QuerySetId":207274,"Title":"Returns links to answers that have a negative overall score, what the overall score is and if the answer was accepted.","Description":"Returns links to answers that have a negative overall score, what the overall score is and if the answer was accepted.","QueryBody":"SELECT \n  a.id [Post Link],\n  sum(case v.votetypeid when 1 then 15 when 2 then 10 when 3 then -2 end) [Net reputation]\nfrom Posts a\nleft join Votes v on v.postid = a.id and v.votetypeid in (1, 2, 3)\nwhere a.owneruserId = ##UserId## and a.posttypeid = 2\ngroup by a.id\nhaving sum(case v.votetypeid when 1 then 15 when 2 then 10 when 3 then -2 else 1 end) < 0\norder by 2","CreationDate":"2014-07-10 5:01:48","validated":true,"QueryBody_Original":"SELECT \n  a.id [Post Link],\n  sum(case v.votetypeid when 1 then 15 when 2 then 10 when 3 then -2 end) [Net reputation]\nfrom Posts a\nleft join Votes v on v.postid = a.id and v.votetypeid in (1, 2, 3)\nwhere a.owneruserId = ##UserId## and a.posttypeid = 2\ngroup by a.id\nhaving sum(case v.votetypeid when 1 then 15 when 2 then 10 when 3 then -2 else 1 end) < 0\norder by 2"},{"QuerySetId":208548,"Title":"Downvote percentages for users within a specific rep range","Description":null,"QueryBody":"Select\nId as [User Link], Reputation, UpVotes, Downvotes, Round(((Cast((Downvotes*100) AS float))\/(Cast ((Upvotes+Downvotes) as float))),2) as PercentDownvotes \nFrom Users\nWhere Reputation >= ##MinReputation## and Reputation<= ##MaxReputation## and (UpVotes + Downvotes > 0)\nOrder by PercentDownvotes Desc","CreationDate":"2014-07-15 15:57:01","validated":true,"QueryBody_Original":"Select\nId as [User Link], Reputation, UpVotes, Downvotes, Round(((Cast((Downvotes*100) AS float))\/(Cast ((Upvotes+Downvotes) as float))),2) as PercentDownvotes \nFrom Users\nWhere Reputation >= ##MinReputation## and Reputation<= ##MaxReputation## and (UpVotes + Downvotes > 0)\nOrder by PercentDownvotes Desc"},{"QuerySetId":210595,"Title":"Questions with (likely) uninformative titles answered by a user","Description":null,"QueryBody":"SELECT  q.Id as [Post Link], q.Tags from Posts q\ninner join Posts a \non a.ParentId = q.Id \nwhere a.OwnerUserId = ##UserId## and \n(q.Title like  '%anyone%' \nor q.Title like '%difficult%' \nor q.Title like '%doubt%'\nor q.Title like '%easy%'\nor q.Title like '%exercise%'\nor q.Title like '%hard%'\nor q.Title like '%help%'\nor q.Title like '%homework%'\nor q.Title like '%interesting%'\nor q.Title like '% math%'\nor q.Title like '%please%'\nor q.Title like '%problem%'\nor q.Title like '%question%'\nor q.Title like '%someone%'\nor q.Title like '%struggl%'\nor q.Title like '%stuck%'\nor q.Title like '% very%'\nor q.Title like '%wrong%'\n)\norder by a.CreationDate desc","CreationDate":"2014-07-27 19:29:31","validated":true,"QueryBody_Original":"SELECT  q.Id as [Post Link], q.Tags from Posts q\ninner join Posts a \non a.ParentId = q.Id \nwhere a.OwnerUserId = ##UserId## and \n(q.Title like  '%anyone%' \nor q.Title like '%difficult%' \nor q.Title like '%doubt%'\nor q.Title like '%easy%'\nor q.Title like '%exercise%'\nor q.Title like '%hard%'\nor q.Title like '%help%'\nor q.Title like '%homework%'\nor q.Title like '%interesting%'\nor q.Title like '% math%'\nor q.Title like '%please%'\nor q.Title like '%problem%'\nor q.Title like '%question%'\nor q.Title like '%someone%'\nor q.Title like '%struggl%'\nor q.Title like '%stuck%'\nor q.Title like '% very%'\nor q.Title like '%wrong%'\n)\norder by a.CreationDate desc"},{"QuerySetId":211467,"Title":"Average Time to (in seconds) to answer a question by language tag","Description":null,"QueryBody":"DECLARE  @Language nvarchar(25) = ##LanguageTag:string##;\nDECLARE @tagid int;\n\nselect @tagid = Id\nfrom Tags\nwhere TagName = @Language\n\nprint @Language + Convert(NVarchar(max), @tagid);","CreationDate":"2014-07-31 21:03:53","validated":true,"QueryBody_Original":null},{"QuerySetId":213154,"Title":"Get All Tags for All Questions with LIKE term in Title","Description":null,"QueryBody":"DECLARE  @SearchTerm VARCHAR(30) = ##SearchTerm:string##\n\nSELECT Id AS [Post Link], Tags\nFROM Posts\nWHERE PostTypeId = 1 \n  AND LOWER(Title) LIKE '%'+@SearchTerm+'%'","CreationDate":"2014-08-02 5:41:58","validated":true,"QueryBody_Original":"DECLARE  @SearchTerm VARCHAR(30) = ##SearchTerm:string##\n\nSELECT Id AS [Post Link], Tags\nFROM Posts\nWHERE PostTypeId = 1 \n  AND LOWER(Title) LIKE '%'+@SearchTerm+'%'"},{"QuerySetId":213738,"Title":"Average upvotes over time for a post","Description":null,"QueryBody":"SELECT \n  SUM([Count]) AS [Upvotes],\n  COUNT(*) AS [Months],\n  AVG([Count]) AS [Upvotes\/Month] \nFROM (\n  SELECT\n    DATEPART(year, CreationDate) AS [Year],\n    DATEPART(month, CreationDate) AS [Month],\n    COUNT(*) AS [Count]\n  FROM Votes\n  WHERE PostId = ##PostId:int##\n    AND VoteTypeId = 2 -- upvote\n  GROUP BY DATEPART(month, CreationDate), DATEPART(year, CreationDate)\n) AS X","CreationDate":"2014-08-02 21:09:59","validated":true,"QueryBody_Original":null},{"QuerySetId":215919,"Title":"Virtual Meta Reputation for User X","Description":null,"QueryBody":"SELECT \n  SUM(CASE\n    WHEN v.VoteTypeId = 1 THEN 15\n    WHEN v.VoteTypeId = 2 AND p.PostTypeId = 1 THEN 5\n    WHEN v.VoteTypeId = 2 AND p.PostTypeId = 2 THEN 10\n    WHEN v.VoteTypeId = 3 THEN -2\n  END) AS Reputation,\n  COUNT(CASE v.VoteTypeId WHEN 1 THEN 1 END) AS Accepts,\n  COUNT(CASE WHEN v.VoteTypeId = 2 AND p.PostTypeId = 1 THEN 1 END) AS QuestionsUpVotes,\n  COUNT(CASE WHEN v.VoteTypeId = 2 AND p.PostTypeId = 2 THEN 1 END) AS AnswerUpVotes,\n  COUNT(CASE v.VoteTypeId WHEN 3 THEN 1 END) AS DownVotes\nFROM Posts p\n  INNER JOIN Votes v ON p.Id = v.PostId\n  INNER JOIN Users u ON p.OwnerUserId = u.Id\nWHERE v.VoteTypeId IN (1,2,3)\n  AND p.OwnerUserId = ##UserId:int?456814##","CreationDate":"2020-01-12 21:05:29","validated":true,"QueryBody_Original":null},{"QuerySetId":218381,"Title":"All Answers for User X","Description":null,"QueryBody":"SELECT \n  a.Id,\n  q.Title,\n  a.Score,\n  FORMAT(a.CreationDate, 'yyyy-MM-dd') AS [Date]\nFROM Users u\n  INNER JOIN Posts a ON u.Id = a.OwnerUserId\n  INNER JOIN Posts q ON a.ParentID = q.Id\nWHERE u.Id = ##UserId:int##\nORDER BY a.Score DESC, [Date] DESC","CreationDate":"2014-08-18 10:11:34","validated":true,"QueryBody_Original":null},{"QuerySetId":218583,"Title":"High-rep Users with only one post","Description":null,"QueryBody":"SELECT  \n  u.Id as [User Link], \n  u.Reputation\nfrom Users as u, Posts as p\nwhere u.Reputation > ##RepThreshold:int?10000## \n  and u.Id = p.OwnerUserId\n  and p.PostTypeId in (1, 2) -- question, answer\ngroup by u.Id, u.Reputation\nhaving count(p.Id) = 1 and not count(p.Id) > 1\norder by u.Reputation desc","CreationDate":"2014-08-18 11:49:14","validated":true,"QueryBody_Original":null},{"QuerySetId":220703,"Title":"Where are my questions answered with more votes than accepted answer","Description":null,"QueryBody":"SELECT \n  A.id as [Post Link],\n  A.score,\n  max(OA.score) as \"other max score\",\n  CASE\n      WHEN max(OA.score) - A.score > 0 THEN '***'\n  END as \"look here\"\nfrom\n  Posts Q\n  join Posts A on (A.id = Q.AcceptedAnswerId)\n  left join Posts OA on (Q.id = OA.ParentId and OA.id != Q.AcceptedAnswerId)\nwhere\n  Q.OwnerUserId = ##UserId##\ngroup by\n  A.id, A.score\norder by\n  A.score ASC","CreationDate":"2014-08-26 4:28:33","validated":true,"QueryBody_Original":"SELECT \n  A.id as [Post Link],\n  A.score,\n  max(OA.score) as \"other max score\",\n  CASE\n      WHEN max(OA.score) - A.score > 0 THEN '***'\n  END as \"look here\"\nfrom\n  Posts Q\n  join Posts A on (A.id = Q.AcceptedAnswerId)\n  left join Posts OA on (Q.id = OA.ParentId and OA.id != Q.AcceptedAnswerId)\nwhere\n  Q.OwnerUserId = ##UserId##\ngroup by\n  A.id, A.score\norder by\n  A.score ASC"},{"QuerySetId":228334,"Title":"The average score of my answers","Description":null,"QueryBody":"SELECT  sum(Score), count(Score), cast(sum(Score) as float)\/count(Score) from Posts where PostTypeId = 2 and OwnerUserId = ##UserId##","CreationDate":"2014-09-27 2:45:51","validated":true,"QueryBody_Original":"SELECT  sum(Score), count(Score), cast(sum(Score) as float)\/count(Score) from Posts where PostTypeId = 2 and OwnerUserId = ##UserId##"},{"QuerySetId":235493,"Title":"Most effective Illuminators with accept rate","Description":"Illuminator badge holders ranked by their effectiveness; percentage of their answers that qualify for the badge times the number of qualifying answers. This gives a better ranking for how effectively people have improved the original question (how often they edited the question compared to the number of answers they gave).","QueryBody":"SELECT  ct AS [Total answers]\n     , accept AS [Accepted answers]\n     , accept * 100 \/ ct AS [Accept rate]\nFROM (\n   SELECT count(*) AS ct\n         ,sum(CASE WHEN q.AcceptedAnswerId = a.Id THEN 1 ELSE 0 END) AS accept\n   FROM   Posts q \n   JOIN   Posts a on a.ParentId = q.Id\n   WHERE  q.PostTypeId = 1 \n   AND    a.ClosedDate IS NULL\n   AND    q.ClosedDate IS NULL\n   -- AND    a.CommunityOwnedDate IS NULL\n   AND    a.PostTypeId = 2 \n   AND    a.OwnerUserId = ##UserId##\n   ) AS sub;","CreationDate":"2014-10-18 15:00:55","validated":true,"QueryBody_Original":"SELECT  ct AS [Total answers]\n     , accept AS [Accepted answers]\n     , accept * 100 \/ ct AS [Accept rate]\nFROM (\n   SELECT count(*) AS ct\n         ,sum(CASE WHEN q.AcceptedAnswerId = a.Id THEN 1 ELSE 0 END) AS accept\n   FROM   Posts q \n   JOIN   Posts a on a.ParentId = q.Id\n   WHERE  q.PostTypeId = 1 \n   AND    a.ClosedDate IS NULL\n   AND    q.ClosedDate IS NULL\n   -- AND    a.CommunityOwnedDate IS NULL\n   AND    a.PostTypeId = 2 \n   AND    a.OwnerUserId = ##UserId##\n   ) AS sub;"},{"QuerySetId":238846,"Title":"total score of a tag","Description":"http:\/\/meta.stackexchange.com\/questions\/242611\/how-can-i-calculate-the-total-score-of-a-tag#242611","QueryBody":"SELECT  sum(upvote) as totup\n, sum(downvote) as totdown\n,  sum(upvote) *5 - sum(downvote)*2 as [score]\nfrom (\n   SELECT p.id\n   , sum(case when v.votetypeid = 2 then 1 else 0 end) as upvote\n   , sum(case when v.votetypeid = 3 then 1 else 0 end) as downvote\n   from posts p\n   inner join posttags pt on pt.postid = p.id\n   inner join tags t on t.id = pt.tagid\n   inner join votes v on v.postid = p.id\n   where t.tagname= ##tag:String##\n   and v.votetypeid in (2,3) -- upvote, downvote\n   and p.posttypeid = 1 -- Q \n   group by p.id\n) as basedata","CreationDate":"2014-10-27 2:00:19","validated":true,"QueryBody_Original":null},{"QuerySetId":238863,"Title":"All user edits that isn't on their post","Description":null,"QueryBody":"SELECT  ph.PostId as [Post Link], * FROM PostHistory ph\nJOIN Posts p on ph.PostId = p.Id\nWHERE p.OwnerUserId != ##UserId## AND ph.UserId = ##UserId##","CreationDate":"2014-10-27 3:23:06","validated":true,"QueryBody_Original":"SELECT  ph.PostId as [Post Link], * FROM PostHistory ph\nJOIN Posts p on ph.PostId = p.Id\nWHERE p.OwnerUserId != ##UserId## AND ph.UserId = ##UserId##"},{"QuerySetId":239843,"Title":"Top 20 users from provided location (country) and their most voted tags","Description":null,"QueryBody":"DECLARE  @Country nvarchar(100) = ##Location:string##\n\nSELECT TOP 20\n    ROW_NUMBER() OVER(ORDER BY Reputation DESC) AS [#], \n    Users.Id AS [User Link], \n    Reputation,\n    (\n      SELECT TOP 1 TagName \n      FROM Tags\n      INNER JOIN PostTags ON PostTags.TagId = Tags.id\n      INNER JOIN Posts ON Posts.ParentId = PostTags.PostId\n      INNER JOIN Votes ON Votes.PostId = Posts.Id and VoteTypeId = 2\n      WHERE \n      Posts.OwnerUserId = Users.Id\n      GROUP BY TagName \n      ORDER BY COUNT(*) DESC\n    ) AS Tag\nFROM Users\nWHERE LOWER(Location) LIKE CONCAT('%', LOWER(@Country), '%')\nORDER BY\n    Reputation DESC;","CreationDate":"2014-11-05 21:38:15","validated":true,"QueryBody_Original":"DECLARE  @Country nvarchar(100) = ##Location:string##\n\nSELECT TOP 20\n    ROW_NUMBER() OVER(ORDER BY Reputation DESC) AS [#], \n    Users.Id AS [User Link], \n    Reputation,\n    (\n      SELECT TOP 1 TagName \n      FROM Tags\n      INNER JOIN PostTags ON PostTags.TagId = Tags.id\n      INNER JOIN Posts ON Posts.ParentId = PostTags.PostId\n      INNER JOIN Votes ON Votes.PostId = Posts.Id and VoteTypeId = 2\n      WHERE \n      Posts.OwnerUserId = Users.Id\n      GROUP BY TagName \n      ORDER BY COUNT(*) DESC\n    ) AS Tag\nFROM Users\nWHERE LOWER(Location) LIKE CONCAT('%', LOWER(@Country), '%')\nORDER BY\n    Reputation DESC;"},{"QuerySetId":244431,"Title":"Users with at least number of downvotes on a site","Description":null,"QueryBody":"SELECT  Id as [User Link], Downvotes from Users where Downvotes>=##minvotes## and Id>-1\norder by Downvotes desc","CreationDate":"2014-11-24 1:14:57","validated":true,"QueryBody_Original":"SELECT  Id as [User Link], Downvotes from Users where Downvotes>=##minvotes## and Id>-1\norder by Downvotes desc"},{"QuerySetId":244507,"Title":"Relation between user's reputations and their votes on a post","Description":null,"QueryBody":"DECLARE  @PostId int = ##PostId?18018493## -- PostId: ID of the post, you can find it in its URL\nDECLARE @RepLevelStart int = ##ReputationLevelStart?0## -- ReputationLevelStart: The start of the reputations level interval\nDECLARE @RepLevelEnd int = ##ReputationLevelEnd?1000## -- ReputationLevelEnd: The  end  of the reputations level interval  \n\nSelect Votes.VoteTypeId\nFrom Votes\nWhere PostId = @PostId\n\nSelect  Max(Votes.PostId) as [Post Link], Max(Votes.UserId),\n(Select Name from VoteTypes where VoteTypes.Id=Votes.VoteTypeId) As VoteType,\nCount(Votes.Id) As VoteCount \nFROM Votes\nwhere \n      Votes.PostId = @PostId AND\n      Votes.UserId IN (Select Id from Users)\ngroup by VoteTypeId","CreationDate":"2014-11-10 17:33:34","validated":true,"QueryBody_Original":"DECLARE  @PostId int = ##PostId?18018493## -- PostId: ID of the post, you can find it in its URL\nDECLARE @RepLevelStart int = ##ReputationLevelStart?0## -- ReputationLevelStart: The start of the reputations level interval\nDECLARE @RepLevelEnd int = ##ReputationLevelEnd?1000## -- ReputationLevelEnd: The  end  of the reputations level interval  \n\nSelect Votes.VoteTypeId\nFrom Votes\nWhere PostId = @PostId\n\nSelect  Max(Votes.PostId) as [Post Link], Max(Votes.UserId),\n(Select Name from VoteTypes where VoteTypes.Id=Votes.VoteTypeId) As VoteType,\nCount(Votes.Id) As VoteCount \nFROM Votes\nwhere \n      Votes.PostId = @PostId AND\n      Votes.UserId IN (Select Id from Users)\ngroup by VoteTypeId"},{"QuerySetId":248102,"Title":"Top 75 users from [Country]","Description":null,"QueryBody":"DECLARE  @Country nvarchar(100) = ##Location:string##\n\nSELECT TOP 75\n    ROW_NUMBER() OVER(ORDER BY Reputation DESC) AS [#], \n    Users.Id AS [User Link], \n    Reputation,\n    (\n      SELECT TOP 1 TagName \n      FROM Tags\n      INNER JOIN PostTags ON PostTags.TagId = Tags.id\n      INNER JOIN Posts ON Posts.ParentId = PostTags.PostId\n      INNER JOIN Votes ON Votes.PostId = Posts.Id and VoteTypeId = 2\n      WHERE \n      Posts.OwnerUserId = Users.Id\n      GROUP BY TagName \n      ORDER BY COUNT(*) DESC\n    ) AS Tag\nFROM Users\nWHERE\nLOWER(Location) LIKE CONCAT('%', LOWER(@Country), '%')\nORDER BY\n    Reputation DESC;","CreationDate":"2014-11-17 20:42:08","validated":true,"QueryBody_Original":"DECLARE  @Country nvarchar(100) = ##Location:string##\n\nSELECT TOP 75\n    ROW_NUMBER() OVER(ORDER BY Reputation DESC) AS [#], \n    Users.Id AS [User Link], \n    Reputation,\n    (\n      SELECT TOP 1 TagName \n      FROM Tags\n      INNER JOIN PostTags ON PostTags.TagId = Tags.id\n      INNER JOIN Posts ON Posts.ParentId = PostTags.PostId\n      INNER JOIN Votes ON Votes.PostId = Posts.Id and VoteTypeId = 2\n      WHERE \n      Posts.OwnerUserId = Users.Id\n      GROUP BY TagName \n      ORDER BY COUNT(*) DESC\n    ) AS Tag\nFROM Users\nWHERE\nLOWER(Location) LIKE CONCAT('%', LOWER(@Country), '%')\nORDER BY\n    Reputation DESC;"},{"QuerySetId":255746,"Title":"Get User Info and Tags (Total answers and Accepted Answers)","Description":"Returns the URL with the user's original inputted URL, the users reputation, number of answers posted, number of answers accepted and stats for supplied tags. \n\nFor https:\/\/www.codersclan.net\/ticket\/671","QueryBody":"SELECT\n  answer.OwnerUserId As [User Link],\n  'http:\/\/stackoverflow.com\/users\/' + Cast(answer.OwnerUserId as nvarchar(10)) As [Permalink],\n  Users.Reputation,\n  question.tags,\n  count(answer.id) AS [Total Answers],\n  count(question.id) AS [Accepted Answers]\nFROM\n  Posts answer\n  LEFT OUTER JOIN Posts question ON question.AcceptedAnswerId = answer.id\n  INNER JOIN Users ON answer.OwnerUserId = Users.id\nWHERE\n  answer.OwnerUserId in (##UserId##)\n  AND\n  answer.postTypeId = 2\nGROUP BY \n  answer.OwnerUserId, \n  Users.Reputation, question.tags","CreationDate":"2014-12-09 2:46:08","validated":true,"QueryBody_Original":"SELECT\n  answer.OwnerUserId As [User Link],\n  'http:\/\/stackoverflow.com\/users\/' + Cast(answer.OwnerUserId as nvarchar(10)) As [Permalink],\n  Users.Reputation,\n  question.tags,\n  count(answer.id) AS [Total Answers],\n  count(question.id) AS [Accepted Answers]\nFROM\n  Posts answer\n  LEFT OUTER JOIN Posts question ON question.AcceptedAnswerId = answer.id\n  INNER JOIN Users ON answer.OwnerUserId = Users.id\nWHERE\n  answer.OwnerUserId in (##UserId##)\n  AND\n  answer.postTypeId = 2\nGROUP BY \n  answer.OwnerUserId, \n  Users.Reputation, question.tags"},{"QuerySetId":259881,"Title":"all questions with a particular tag","Description":"how long before I get tag badges?\n","QueryBody":"DECLARE  @MyTag nvarchar(25) = ##Tag:string##;\n\nSELECT --TOP 20\n    Posts.Id AS [Post Link]\n    , Posts.Id\n    , Posts.Score\n    , Tags.TagName AS [TagName]\nFROM Posts\n   INNER JOIN PostTags ON PostTags.PostId=Posts.Id\n   INNER JOIN Tags ON Tags.Id=PostTags.TagId\nWHERE \n   Posts.PostTypeId = 1 AND \n   Tags.TagName = @MyTag\nORDER BY Posts.Score DESC;","CreationDate":"2014-12-23 4:31:49","validated":true,"QueryBody_Original":"DECLARE  @MyTag nvarchar(25) = ##Tag:string##;\n\nSELECT --TOP 20\n    Posts.Id AS [Post Link]\n    , Posts.Id\n    , Posts.Score\n    , Tags.TagName AS [TagName]\nFROM Posts\n   INNER JOIN PostTags ON PostTags.PostId=Posts.Id\n   INNER JOIN Tags ON Tags.Id=PostTags.TagId\nWHERE \n   Posts.PostTypeId = 1 AND \n   Tags.TagName = @MyTag\nORDER BY Posts.Score DESC;"},{"QuerySetId":259951,"Title":"Badge holders with minimal reputation","Description":null,"QueryBody":"SELECT  count(u.Id) from Users u\ninner join Badges b on b.UserId=u.Id\nwhere b.Name='##Badge##'\nand u.Reputation >= ##MinRep##","CreationDate":"2014-12-22 3:17:38","validated":true,"QueryBody_Original":"SELECT  count(u.Id) from Users u\ninner join Badges b on b.UserId=u.Id\nwhere b.Name='##Badge##'\nand u.Reputation >= ##MinRep##"},{"QuerySetId":263123,"Title":"Past Bountied Questions for a Given Tag","Description":null,"QueryBody":"SELECT  v.PostId as [Post Link],\n       v.CreationDate as [Bounty Date],\n       v.BountyAmount as [Bounty Amount],\n       v.UserId as [Bounty Giver],\n       p.Tags as [Tags],\n       p.CreationDate as [Question Date]\nfrom Votes v\n    inner join PostTags pt\n        on pt.PostId = v.PostId\n    inner join Tags t\n        on pt.TagId = t.Id\n       and t.TagName = ##TagName:string## \n    inner join Posts p\n        on p.Id = pt.PostId\n       and p.PostTypeId = 1\nwhere v.VoteTypeId = 8\norder by v.CreationDate desc","CreationDate":"2015-01-07 0:53:12","validated":true,"QueryBody_Original":null},{"QuerySetId":264528,"Title":"What is my accepted answer percentage rate for well-received answers for answers above certain score","Description":"On avg how often are answers I give, accepted\n","QueryBody":"DECLARE  @UserId int = ##UserId##\nDECLARE @Score int = ##Score##\n\nSELECT \n    (CAST(Count(a.Id) AS float) \/\n    (\n      SELECT\n          Count(*)\n      FROM\n          Posts q\n      WHERE\n          OwnerUserId = @UserId\n        AND\n          PostTypeId = 2\n        AND\n          q.Score >= @Score\n    ) * 100) AS AcceptedPercentage\nFROM\n    Posts q\n  INNER JOIN\n    Posts a ON q.AcceptedAnswerId = a.Id\nWHERE\n    a.OwnerUserId = @UserId\n  AND\n    a.PostTypeId = 2\n  AND\n    a.Score >= @Score","CreationDate":"2015-01-13 18:32:33","validated":true,"QueryBody_Original":"DECLARE  @UserId int = ##UserId##\nDECLARE @Score int = ##Score##\n\nSELECT \n    (CAST(Count(a.Id) AS float) \/\n    (\n      SELECT\n          Count(*)\n      FROM\n          Posts q\n      WHERE\n          OwnerUserId = @UserId\n        AND\n          PostTypeId = 2\n        AND\n          q.Score >= @Score\n    ) * 100) AS AcceptedPercentage\nFROM\n    Posts q\n  INNER JOIN\n    Posts a ON q.AcceptedAnswerId = a.Id\nWHERE\n    a.OwnerUserId = @UserId\n  AND\n    a.PostTypeId = 2\n  AND\n    a.Score >= @Score"},{"QuerySetId":264652,"Title":"Get average answer score by user","Description":null,"QueryBody":"DECLARE  @UserId int = 8972915\n\nSELECT AVG(CAST(Score as float)) AS VOTE\nFROM Posts \nWHERE Posts.OwnerUserId = @UserId AND Posts.PostTypeId = 2","CreationDate":"2020-09-23 16:28:32","validated":true,"QueryBody_Original":"DECLARE  @UserId int = 8972915\n\nSELECT AVG(CAST(Score as float)) AS VOTE\nFROM Posts \nWHERE Posts.OwnerUserId = @UserId AND Posts.PostTypeId = 2"},{"QuerySetId":270397,"Title":"Accepted answer rate per tag","Description":null,"QueryBody":"DECLARE  @TagName nvarchar(25) = ##TagName:string##\n\nselect \nCount(*) as Total, count(p.AcceptedAnswerId) as Answered, (cast(Count(p.AcceptedAnswerId) as float) \/ count(*) * 100) as Percentage\nfrom Posts p\njoin PostTags pt on p.Id = pt.PostId\njoin Tags t on pt.TagId = t.Id\nwhere t.TagName = @TagName\nand p.PostTypeId=1","CreationDate":"2015-02-04 18:17:48","validated":true,"QueryBody_Original":"DECLARE  @TagName nvarchar(25) = ##TagName:string##\n\nselect \nCount(*) as Total, count(p.AcceptedAnswerId) as Answered, (cast(Count(p.AcceptedAnswerId) as float) \/ count(*) * 100) as Percentage\nfrom Posts p\njoin PostTags pt on p.Id = pt.PostId\njoin Tags t on pt.TagId = t.Id\nwhere t.TagName = @TagName\nand p.PostTypeId=1"},{"QuerySetId":271223,"Title":"Downvotes on posts containing 'aple' for a user","Description":null,"QueryBody":"DECLARE  @UserId int = ##UserId##\n\nselect\n COUNT(*) AS NumPosts\nfrom Posts\nwhere Posts.PostTypeId=2 and Posts.OwnerUserId = @UserId and \n      Posts.body like '%aple%'\n--Order By DownVotes Desc","CreationDate":"2015-02-07 7:28:54","validated":true,"QueryBody_Original":"DECLARE  @UserId int = ##UserId##\n\nselect\n COUNT(*) AS NumPosts\nfrom Posts\nwhere Posts.PostTypeId=2 and Posts.OwnerUserId = @UserId and \n      Posts.body like '%aple%'\n--Order By DownVotes Desc"},{"QuerySetId":272459,"Title":"The total number of questions asked so far vs. time?","Description":"http:\/\/meta.stackexchange.com\/questions\/248396\/how-can-i-get-stats-for-the-total-number-of-questions-asked-so-far-vs-time","QueryBody":"DECLARE  @Increments int = ##Increments?30##\n-- Increments: Number of days per group \"Default is 30\"\nDECLARE @Results int = ##Results?12##\n-- Results: Number of groups to pull \"Default is 12\"\n\nDECLARE @lowest datetime\nselect @lowest =  dateadd(d, - (@Increments * @Results), max(creationdate)) \n                 from posts;\n\nselect dateadd(d, days, @lowest) as [date]\n     , sum(qcnt) over ( order by days) as Questions\n     , sum(acnt) over ( order by days) as Answers\nfrom (\n    select\n           datediff(m,  @lowest, creationdate) as days\n         , sum(case when posttypeid=1 then 1 else 0 end) as qcnt\n         , sum(case when posttypeid=2 then 1 else 0 end) as acnt\n    from posts\n    where creationdate >= @lowest\n    group by datediff(m,  @lowest, creationdate)\n   \n    ) as counts","CreationDate":"2015-02-11 15:15:48","validated":true,"QueryBody_Original":"DECLARE  @Increments int = ##Increments?30##\n-- Increments: Number of days per group \"Default is 30\"\nDECLARE @Results int = ##Results?12##\n-- Results: Number of groups to pull \"Default is 12\"\n\nDECLARE @lowest datetime\nselect @lowest =  dateadd(d, - (@Increments * @Results), max(creationdate)) \n                 from posts;\n\nselect dateadd(d, days, @lowest) as [date]\n     , sum(qcnt) over ( order by days) as Questions\n     , sum(acnt) over ( order by days) as Answers\nfrom (\n    select\n           datediff(m,  @lowest, creationdate) as days\n         , sum(case when posttypeid=1 then 1 else 0 end) as qcnt\n         , sum(case when posttypeid=2 then 1 else 0 end) as acnt\n    from posts\n    where creationdate >= @lowest\n    group by datediff(m,  @lowest, creationdate)\n   \n    ) as counts"},{"QuerySetId":280873,"Title":"comments like acceptance rate","Description":null,"QueryBody":"comments like acceptance rate - 1 flag auto-nuke","CreationDate":"2015-03-02 7:43:13","validated":true,"QueryBody_Original":null},{"QuerySetId":281370,"Title":"Interesting recent questions by users with high accept rates since date","Description":null,"QueryBody":"DECLARE  @start date = dateadd(week, -1, getdate())\n\nselect\n  p.Id as [Post Link], p.Score, p.AnswerCount, p.LastActivityDate, u.Id as [User Link], u.Reputation\nfrom Posts as p\n  join Users as u\n    left join Posts as q\n    on q.OwnerUserId = u.Id\n  on u.Id = p.OwnerUserId\nwhere p.PostTypeId = 1 -- question\nand p.CreationDate >= @start\nand p.Score > 2\nand p.AcceptedAnswerId is null\nand p.ClosedDate is null\n\ngroup by\n p.Id\n,p.Score\n,p.AnswerCount\n,p.LastActivityDate\n,p.Title\n,u.Id\n,u.Reputation\nhaving sum(iif(q.AcceptedAnswerId is null, 0.0, 1.0)) > 2\nand sum(iif(q.AcceptedAnswerId is null, 0.0, 1.0)) \/ nullif(count(q.Id),0) > .5","CreationDate":"2018-04-03 1:29:37","validated":true,"QueryBody_Original":"DECLARE  @start date = dateadd(week, -1, getdate())\n\nselect\n  p.Id as [Post Link], p.Score, p.AnswerCount, p.LastActivityDate, u.Id as [User Link], u.Reputation\nfrom Posts as p\n  join Users as u\n    left join Posts as q\n    on q.OwnerUserId = u.Id\n  on u.Id = p.OwnerUserId\nwhere p.PostTypeId = 1 -- question\nand p.CreationDate >= @start\nand p.Score > 2\nand p.AcceptedAnswerId is null\nand p.ClosedDate is null\n\ngroup by\n p.Id\n,p.Score\n,p.AnswerCount\n,p.LastActivityDate\n,p.Title\n,u.Id\n,u.Reputation\nhaving sum(iif(q.AcceptedAnswerId is null, 0.0, 1.0)) > 2\nand sum(iif(q.AcceptedAnswerId is null, 0.0, 1.0)) \/ nullif(count(q.Id),0) > .5"},{"QuerySetId":281877,"Title":"Total Answers\/Month & ~Answers\/Day for a User","Description":null,"QueryBody":"SELECT  [Month], \n       COUNT(*) AS [Answers\/Month],\n       CAST(CAST(COUNT(*) AS FLOAT)\/DAY(EOMONTH(Month)) AS NUMERIC(10,3)) AS [Answers\/Day],\n       SUM(Score) AS [Score\/Month],\n       CAST(SUM(Score)\/CAST(COUNT(*) AS FLOAT) AS NUMERIC(10,3)) AS [Score\/Answer]\n\nFROM(\n  SELECT CAST( CAST(DATEPART(YYYY, CreationDate) AS varchar) + '-' \n             + CAST(DATEPART(MM, CreationDate) AS varchar) + '-01' AS DateTime) [Month], \n         Score\n  FROM Posts p \n  WHERE p.OwnerUserId = ##UserId:int## AND\n        P.PostTypeId = 2\n) AS X\n\n\nGROUP BY [Month]\nORDER BY [Month] DESC","CreationDate":"2015-08-19 23:37:12","validated":true,"QueryBody_Original":null},{"QuerySetId":282998,"Title":"Getting all users from a given location sorted by reputation 'desc'","Description":null,"QueryBody":"DECLARE  @location varchar = ##location##\nselect  Id as [User Link], location, reputation from users where location like '%##location##%'\norder by reputation desc","CreationDate":"2015-03-05 12:03:11","validated":true,"QueryBody_Original":"DECLARE  @location varchar = ##location##\nselect  Id as [User Link], location, reputation from users where location like '%##location##%'\norder by reputation desc"},{"QuerySetId":285305,"Title":"This is a list of all answers for a user that count for the Explainer, Refiner and Illuminator badges, sorted by newest answer first.","Description":"This is a list of all answers for a user that count for the Explainer, Refiner and Illuminator badges, sorted by newest answer first.","QueryBody":"SELECT  YEAR(a.CreationDate) AS [Year],\n       MONTH(a.CreationDate) AS [Month],\n       COUNT(a.Id) AS [Count]\nFROM Posts q\nINNER JOIN Posts a ON q.Id = a.ParentId\nWHERE q.PostTypeId = 1\n  AND q.ClosedDate IS NULL\n  AND a.PostTypeId = 2\n  AND a.Score >= 1\n  AND a.OwnerUserId = ##userid##\n  AND (q.OwnerUserId IS NULL\n       OR q.OwnerUserId <> a.OwnerUserId)\n  AND EXISTS\n    (SELECT 1\n     FROM PostHistory ph\n     WHERE ph.PostHistoryTypeId IN (4,5)\n       AND ph.PostId = a.ParentId\n       AND ph.UserId = a.OwnerUserId\n       AND ABS(DATEDIFF(hh, ph.CreationDate, a.CreationDate)) < 12)\nGROUP BY YEAR(a.CreationDate), MONTH(a.CreationDate)\nORDER BY YEAR(a.CreationDate) DESC, MONTH(a.CreationDate) DESC","CreationDate":"2015-03-16 0:05:13","validated":true,"QueryBody_Original":"SELECT  YEAR(a.CreationDate) AS [Year],\n       MONTH(a.CreationDate) AS [Month],\n       COUNT(a.Id) AS [Count]\nFROM Posts q\nINNER JOIN Posts a ON q.Id = a.ParentId\nWHERE q.PostTypeId = 1\n  AND q.ClosedDate IS NULL\n  AND a.PostTypeId = 2\n  AND a.Score >= 1\n  AND a.OwnerUserId = ##userid##\n  AND (q.OwnerUserId IS NULL\n       OR q.OwnerUserId <> a.OwnerUserId)\n  AND EXISTS\n    (SELECT 1\n     FROM PostHistory ph\n     WHERE ph.PostHistoryTypeId IN (4,5)\n       AND ph.PostId = a.ParentId\n       AND ph.UserId = a.OwnerUserId\n       AND ABS(DATEDIFF(hh, ph.CreationDate, a.CreationDate)) < 12)\nGROUP BY YEAR(a.CreationDate), MONTH(a.CreationDate)\nORDER BY YEAR(a.CreationDate) DESC, MONTH(a.CreationDate) DESC"},{"QuerySetId":285564,"Title":"Inactive unanswered questions for specific tag","Description":null,"QueryBody":"DECLARE  @Time DATETIME = dateadd(dd, -##Days:int?28##, getutcdate())\nDECLARE @Pattern VARCHAR(25) = ##Tag:string?identify-this-%##\n\nSELECT Q.Id AS [Post Link] FROM\n  Posts Q\n  INNER JOIN PostTags ON PostTags.PostId = Q.Id\n  INNER JOIN Tags ON Tags.Id = PostTags.TagId\nWHERE\n  patindex(@Pattern, Tags.TagName) != 0 AND\n  Q.LastActivityDate < @Time AND\n  Q.AcceptedAnswerId IS NULL AND\n  Q.AnswerCount = (SELECT count(*) FROM Posts A WHERE \n    A.ParentId = Q.Id AND\n    A.Score < 1 AND\n    Q.LastActivityDate < @Time AND\n    (SELECT count(*) FROM Comments WHERE\n      Comments.PostId = A.Id AND Comments.CreationDate > @Time) = 0)\nGROUP BY Q.Id, Q.LastActivityDate\nORDER BY Q.LastActivityDate DESC","CreationDate":"2015-03-11 19:55:59","validated":true,"QueryBody_Original":"DECLARE  @Time DATETIME = dateadd(dd, -##Days:int?28##, getutcdate())\nDECLARE @Pattern VARCHAR(25) = ##Tag:string?identify-this-%##\n\nSELECT Q.Id AS [Post Link] FROM\n  Posts Q\n  INNER JOIN PostTags ON PostTags.PostId = Q.Id\n  INNER JOIN Tags ON Tags.Id = PostTags.TagId\nWHERE\n  patindex(@Pattern, Tags.TagName) != 0 AND\n  Q.LastActivityDate < @Time AND\n  Q.AcceptedAnswerId IS NULL AND\n  Q.AnswerCount = (SELECT count(*) FROM Posts A WHERE \n    A.ParentId = Q.Id AND\n    A.Score < 1 AND\n    Q.LastActivityDate < @Time AND\n    (SELECT count(*) FROM Comments WHERE\n      Comments.PostId = A.Id AND Comments.CreationDate > @Time) = 0)\nGROUP BY Q.Id, Q.LastActivityDate\nORDER BY Q.LastActivityDate DESC"},{"QuerySetId":290585,"Title":"List UI5 related questions for a user","Description":null,"QueryBody":"SELECT \n  Title,\n  Posts.CreationDate,\n  AcceptedAnswerId,\n  Tags,\n  Posts.Id as [Post Link]\n  from Posts\n  inner join PostTags on PostTags.PostId = Posts.Id\n  inner join Tags on Tags.Id = PostTags.TagId\n  inner join Users on Users.Id = Posts.OwnerUserId\n  where PostTypeId = 1 \n  and DisplayName = ##Username:string##\n  and TagName = ##Tagname:string?sapui5##\n  order by Posts.CreationDate desc","CreationDate":"2015-03-19 12:02:27","validated":true,"QueryBody_Original":null},{"QuerySetId":298621,"Title":"Most viewed questions between date X and date Y","Description":null,"QueryBody":"SELECT  TOP ##Number## Id AS [Post Link], ViewCount, CreationDate\nFROM Posts\nWHERE PostTypeId = 1 AND CreationDate BETWEEN ##FromCreationDate:string## AND ##ToCreationDate:string##\nORDER BY ViewCount DESC;\n\n-- Number: Number of posts to show:\n-- FromCreationDate: From YYYY-MM-DD\n-- ToCreationDate: To YYYY-MM-DD","CreationDate":"2015-04-09 18:38:26","validated":true,"QueryBody_Original":null},{"QuerySetId":301169,"Title":"My Answer Count Per Language","Description":null,"QueryBody":"DECLARE  @UserId int = ##UserID##;\n\n\n\nwith EndIndex as (\n  select \n      Id, ParentId as QuestionId, Body,\n      charindex('|', \n      replace(replace(replace(replace(body, ' ', '|'), '<', '|'), ':', '|'), ',', '|')\n        , 5) as LanguageNameEndIndex\n  from\n      Posts\n  where \n      OwnerUserId = @UserId\n      and PostTypeId = 2 --answer\n      and Body like '<h[1-3]>%'\n), AnswerLanguages as (\n  select \n    Id, QuestionId, Body, \n    'http:\/\/codegolf.stackexchange.com\/a\/' + convert(varchar(99), Id) as Link,\n    lower(substring(Body, 5, LanguageNameEndIndex-5)) as Language\n  from EndIndex\n)\nselect * from AnswerLanguages where Language like 'javascript%'\n\/*select Language, count(1) as AnswerCount\nfrom AnswerLanguages\ngroup by Language\norder by count(1) desc*\/\n;","CreationDate":"2016-01-25 7:19:08","validated":true,"QueryBody_Original":"DECLARE  @UserId int = ##UserID##;\n\n\n\nwith EndIndex as (\n  select \n      Id, ParentId as QuestionId, Body,\n      charindex('|', \n      replace(replace(replace(replace(body, ' ', '|'), '<', '|'), ':', '|'), ',', '|')\n        , 5) as LanguageNameEndIndex\n  from\n      Posts\n  where \n      OwnerUserId = @UserId\n      and PostTypeId = 2 --answer\n      and Body like '<h[1-3]>%'\n), AnswerLanguages as (\n  select \n    Id, QuestionId, Body, \n    'http:\/\/codegolf.stackexchange.com\/a\/' + convert(varchar(99), Id) as Link,\n    lower(substring(Body, 5, LanguageNameEndIndex-5)) as Language\n  from EndIndex\n)\nselect * from AnswerLanguages where Language like 'javascript%'\n\/*select Language, count(1) as AnswerCount\nfrom AnswerLanguages\ngroup by Language\norder by count(1) desc*\/\n;"},{"QuerySetId":303988,"Title":"Get answered questions per Tag","Description":null,"QueryBody":"DECLARE  @TagName varchar(128) = '%##TagName##%'\n SELECT COUNT(*) from Posts P\n    WHERE P.Id IN (\n      SELECT DISTINCT(PostId) from PostTags \n      WHERE PostTags.TagId In (\n        SELECT Id From Tags Where TagName LIKE @TagName\n      )\n    ) AND P.AcceptedAnswerId IS NOT NULL","CreationDate":"2015-04-20 22:35:52","validated":true,"QueryBody_Original":"DECLARE  @TagName varchar(128) = '%##TagName##%'\n SELECT COUNT(*) from Posts P\n    WHERE P.Id IN (\n      SELECT DISTINCT(PostId) from PostTags \n      WHERE PostTags.TagId In (\n        SELECT Id From Tags Where TagName LIKE @TagName\n      )\n    ) AND P.AcceptedAnswerId IS NOT NULL"},{"QuerySetId":305228,"Title":"How much rep would I have without Rep Cap?","Description":null,"QueryBody":"DECLARE  @UserId int = 2765\n\n\nSELECT SUM(Case When VoteTypeID = 1 Then 15 WHEN VoteTypeID=2 THEN 10 WHEN VoteTypeID=3 THEN -2 ELSE 0 END)\nFROM Votes v\nINNER JOIN Posts p ON p.ID = v.PostID\nWHERE p.OwnerUserID = @UserID AND p.CommunityOwnedDate IS NULL","CreationDate":"2015-04-23 2:55:02","validated":true,"QueryBody_Original":"DECLARE  @UserId int = 2765\n\n\nSELECT SUM(Case When VoteTypeID = 1 Then 15 WHEN VoteTypeID=2 THEN 10 WHEN VoteTypeID=3 THEN -2 ELSE 0 END)\nFROM Votes v\nINNER JOIN Posts p ON p.ID = v.PostID\nWHERE p.OwnerUserID = @UserID AND p.CommunityOwnedDate IS NULL"},{"QuerySetId":306050,"Title":"Search comments by pattern and order by votes","Description":null,"QueryBody":"SELECT  CreationDate, Score, Id as [Comment Link], PostId as [Post Link], userId as [User Link]\nfrom Comments\nwhere lower(Text) like lower(##pattern:string?%%##)\norder by Score asc","CreationDate":"2015-11-30 19:26:44","validated":true,"QueryBody_Original":null},{"QuerySetId":306852,"Title":"All users who voted on a post","Description":null,"QueryBody":"DECLARE  @PostId int = ##PostId##\n\nSELECT\n  UserId AS [User Link],\n  CreationDate,\n  Name AS VoteType\nFROM Votes\nJOIN VoteTypes ON Votes.VoteTypeId = VoteTypes.Id\nWHERE PostId = @PostId\nORDER BY CreationDate","CreationDate":"2015-04-26 17:28:45","validated":true,"QueryBody_Original":"DECLARE  @PostId int = ##PostId##\n\nSELECT\n  UserId AS [User Link],\n  CreationDate,\n  Name AS VoteType\nFROM Votes\nJOIN VoteTypes ON Votes.VoteTypeId = VoteTypes.Id\nWHERE PostId = @PostId\nORDER BY CreationDate"},{"QuerySetId":307607,"Title":"Percentage of magic the gathering questions","Description":null,"QueryBody":"DECLARE  @total int\nDECLARE @target int\nselect @total = count(1) from Posts where PostTypeId = 1\nselect @target = count(1) from Posts where PostTypeId = 1 and Tags like '%magic-the-gathering%'\nselect cast(@target as float) \/ @total * 100","CreationDate":"2015-04-28 10:23:28","validated":true,"QueryBody_Original":"DECLARE  @total int\nDECLARE @target int\nselect @total = count(1) from Posts where PostTypeId = 1\nselect @target = count(1) from Posts where PostTypeId = 1 and Tags like '%magic-the-gathering%'\nselect cast(@target as float) \/ @total * 100"},{"QuerySetId":309553,"Title":"Get all related tags by tag","Description":null,"QueryBody":"DECLARE  @tagId int = ##TagID##\n\nSELECT Tags.TagName, COUNT(Posts.Id) as 'Count' FROM Posts\nINNER JOIN PostTags as PT on Posts.Id = PT.PostId\nINNER JOIN Tags on Tags.Id = PT.TagId\nWHERE Posts.Id in (SELECT PT.PostId FROM PostTags as PT\n                       WHERE PT.TagId = @tagId\n                  ) and \n                  Tags.Id <> @tagId\nGROUP BY Tags.TagName\nORDER BY 'Count' desc","CreationDate":"2015-05-03 7:07:42","validated":true,"QueryBody_Original":"DECLARE  @tagId int = ##TagID##\n\nSELECT Tags.TagName, COUNT(Posts.Id) as 'Count' FROM Posts\nINNER JOIN PostTags as PT on Posts.Id = PT.PostId\nINNER JOIN Tags on Tags.Id = PT.TagId\nWHERE Posts.Id in (SELECT PT.PostId FROM PostTags as PT\n                       WHERE PT.TagId = @tagId\n                  ) and \n                  Tags.Id <> @tagId\nGROUP BY Tags.TagName\nORDER BY 'Count' desc"},{"QuerySetId":310405,"Title":"How questions for a given tag have an accepted answer","Description":null,"QueryBody":"SELECT  count(p.id) as 'Questions with an accepted answer'\nfrom Posts p \n  join PostTags pt on p.id = pt.postid\n  join Tags t on t.id = pt.tagid\nwhere t.tagname = '##tagname##'' and p.acceptedanswerid > 0","CreationDate":"2015-05-06 0:08:44","validated":true,"QueryBody_Original":null},{"QuerySetId":311692,"Title":"Find answers that have been edited after I comment","Description":"This is hard-coded for gunr2171's SO account. It finds comments I've put on answers asking for more information, but the post has been edited afterwards. I use this list to go and delete those comments because they have served their purpose.","QueryBody":"SELECT \n  p.Id [Post Link],\n  max(ph.CreationDate) [Last Edited]\nfrom Comments c\ninner join Posts p on c.PostId = p.Id and p.PostTypeId = 2\ninner join PostHistory ph on\n  ph.PostId = p.Id and\n  ph.PostHistoryTypeId in (4,5,6) and\n  ph.CreationDate >= c.CreationDate\nwhere\n  c.UserId = ##UserID## and\n  p.OwnerUserId != ##UserID##\ngroup by p.Id\norder by [Last Edited] desc","CreationDate":"2016-07-02 14:55:30","validated":true,"QueryBody_Original":"SELECT \n  p.Id [Post Link],\n  max(ph.CreationDate) [Last Edited]\nfrom Comments c\ninner join Posts p on c.PostId = p.Id and p.PostTypeId = 2\ninner join PostHistory ph on\n  ph.PostId = p.Id and\n  ph.PostHistoryTypeId in (4,5,6) and\n  ph.CreationDate >= c.CreationDate\nwhere\n  c.UserId = ##UserID## and\n  p.OwnerUserId != ##UserID##\ngroup by p.Id\norder by [Last Edited] desc"},{"QuerySetId":313842,"Title":"Questions with version-specific tag lacking the generic tag","Description":"Find questions that lack the generic tag while having a version-specific one.  Suitable for retaggers :)","QueryBody":"SELECT  tags, \n       title, \n       acceptedanswerid, \n       creationdate,\n       'http:\/\/dba.stackexchange.com\/questions\/' + CAST(id AS varchar) AS URL\n  FROM posts \n WHERE tags LIKE '%' + ##mainTag:string## + '-%' \n   AND tags NOT LIKE '%<' + ##mainTag:string## + '>%'\n ORDER BY creationdate DESC","CreationDate":"2015-05-19 17:55:30","validated":true,"QueryBody_Original":null},{"QuerySetId":319030,"Title":"find closed questions that I voted to close","Description":"Find which posts and how many posts you voted to close as the 5th and final close vote.","QueryBody":"DECLARE  @userid as nvarchar(32)\nDECLARE @uid as int = ##UserId##\nselect @userid='\"Id\":'+cast(@uid as nvarchar)+','\nselect postid as [Post Link], CreationDate as DateClosed\nfrom posthistory\nwhere posthistorytypeid = 10\nand text like '%'+@userid+'%'\nORDER BY CreationDate DESC","CreationDate":"2015-05-26 19:03:34","validated":true,"QueryBody_Original":"DECLARE  @userid as nvarchar(32)\nDECLARE @uid as int = ##UserId##\nselect @userid='\"Id\":'+cast(@uid as nvarchar)+','\nselect postid as [Post Link], CreationDate as DateClosed\nfrom posthistory\nwhere posthistorytypeid = 10\nand text like '%'+@userid+'%'\nORDER BY CreationDate DESC"},{"QuerySetId":321842,"Title":"Top 50 Protected Questions by User Id","Description":null,"QueryBody":"SELECT  DISTINCT TOP(50)\n  PostId as [Post Link],\n  UserId as [User Link],\n  CreationDate\nfrom PostHistory\nwhere PostHistoryTypeId = 19\nAND UserId = ##UserId##\norder by Creationdate DESC","CreationDate":"2015-06-03 0:47:22","validated":true,"QueryBody_Original":"SELECT  DISTINCT TOP(50)\n  PostId as [Post Link],\n  UserId as [User Link],\n  CreationDate\nfrom PostHistory\nwhere PostHistoryTypeId = 19\nAND UserId = ##UserId##\norder by Creationdate DESC"},{"QuerySetId":323330,"Title":"High-Scoring Questions with Accepted Answers, Parameterized (Tutorial)","Description":null,"QueryBody":"SELECT  p.Title, p.Id, p.Score, a.Score AS \"Accepted Score\", \nu.DisplayName AS \"Asker\", au.DisplayName AS \"Answerer\"\n  \nFROM Posts p\nJOIN Posts a ON p.AcceptedAnswerId = a.Id\nJOIN Users u ON p.OwnerUserId = u.Id\nJOIN Users au ON a.OwnerUserId = au.Id\n\nWHERE p.PostTypeId = 1\nAND p.Score >= ##MinScore:int##\nand p.AcceptedAnswerId IS NOT NULL\n\nORDER BY p.Score DESC","CreationDate":"2020-09-17 7:16:00","validated":true,"QueryBody_Original":null},{"QuerySetId":327931,"Title":"How Quick Will My Rank Improve? Use this to find out if a small bump in reputation will leapfrog your rank.","Description":"Use this to find out if a small bump in reputation will leapfrog your rank.","QueryBody":"WITH  A(from1, blocksize)\nas \n(\n   select ##reputation##, power(10, floor(log10(##reputation##) - 1)) --from users where displayname = '##UserName##'\n)\nSELECT (reputation \/ blocksize) * blocksize 'Range start', count(*) 'Number of users in this range'\nfrom users\ninner join A on 1 = 1\nwhere reputation > floor(from1 \/ blocksize) * blocksize\nand reputation < (from1 + 100 * blocksize)\ngroup by reputation \/ blocksize, blocksize","CreationDate":"2015-07-19 7:22:45","validated":true,"QueryBody_Original":null},{"QuerySetId":328843,"Title":"Comments posted after your comment","Description":null,"QueryBody":"SELECT  c.UserId as [User Link], c.Id as [Comment Link], p.Id as [Post Link] FROM Posts p, Comments c\nINNER JOIN Comments b\nON c.PostId=b.PostId\nWHERE b.UserId=##UserId## AND c.UserId<>##UserId## AND c.CreationDate > b.CreationDate AND p.Id=c.PostId \nORDER BY c.CreationDate DESC","CreationDate":"2015-06-24 4:19:28","validated":true,"QueryBody_Original":"SELECT  c.UserId as [User Link], c.Id as [Comment Link], p.Id as [Post Link] FROM Posts p, Comments c\nINNER JOIN Comments b\nON c.PostId=b.PostId\nWHERE b.UserId=##UserId## AND c.UserId<>##UserId## AND c.CreationDate > b.CreationDate AND p.Id=c.PostId \nORDER BY c.CreationDate DESC"},{"QuerySetId":334495,"Title":"Posts with activity after your last comment","Description":null,"QueryBody":"SELECT  P.Id as [Post Link], P.LastActivityDate, C.Id as [Comment Link], C.CreationDate, P.OwnerUserId as [User Link], P.LastEditorUserId as [User Link]\n  from Comments as C inner join Posts as P\n  on P.Id = C.PostId\n  where C.UserId = ##UserId:int## \n  and C.CreationDate =\n  (\n    SELECT MAX(a.CreationDate) FROM Comments AS a\n    WHERE a.UserId = C.UserId and a.PostId = C.PostId      \n  )\n  and (C.CreationDate < P.LastActivityDate)\n  and (P.OwnerUserId != C.UserId)\n  and (P.LastEditorUserId != C.UserId)\n  order by P.LastActivityDate DESC","CreationDate":"2016-11-02 6:08:21","validated":true,"QueryBody_Original":null},{"QuerySetId":334859,"Title":"Posting users and posts by hour of week, GMT","Description":null,"QueryBody":"SELECT \n    (datepart(weekday, creationdate)-1) * 24\n    + datepart(hour, creationdate) as hour_of_week_GMT\n  , count (distinct owneruserid) as PostingUsers\n  , count (*) as NumPosts\nfrom posts p\nwhere datediff(d, creationdate, getdate()) <= ##DaysOfHistory## \ngroup by (datepart(weekday, creationdate)-1) * 24\n    + datepart(hour, creationdate)\norder by (datepart(weekday, creationdate)-1) * 24\n    + datepart(hour, creationdate)","CreationDate":"2015-07-10 22:51:00","validated":true,"QueryBody_Original":"SELECT \n    (datepart(weekday, creationdate)-1) * 24\n    + datepart(hour, creationdate) as hour_of_week_GMT\n  , count (distinct owneruserid) as PostingUsers\n  , count (*) as NumPosts\nfrom posts p\nwhere datediff(d, creationdate, getdate()) <= ##DaysOfHistory## \ngroup by (datepart(weekday, creationdate)-1) * 24\n    + datepart(hour, creationdate)\norder by (datepart(weekday, creationdate)-1) * 24\n    + datepart(hour, creationdate)"},{"QuerySetId":336366,"Title":"Get all of my questions and answers","Description":null,"QueryBody":"DECLARE  @UserId int = ##UserId##\n\nSELECT t1.Tags\nFROM Posts t1\nJOIN Posts t2 ON t2.ParentId = t1.Id AND t2.OwnerUserId = @UserId","CreationDate":"2015-07-14 23:31:27","validated":true,"QueryBody_Original":"DECLARE  @UserId int = ##UserId##\n\nSELECT t1.Tags\nFROM Posts t1\nJOIN Posts t2 ON t2.ParentId = t1.Id AND t2.OwnerUserId = @UserId"},{"QuerySetId":338198,"Title":"get all code sinppets by language","Description":null,"QueryBody":"DECLARE  @LANG str = ##Language##\n\nSELECT TOP 20 \n  BODY,\n  CHARINDEX('a', 'bcdf') as test\nFROM POSTS\nWHERE\n  POSTTYPEID=2","CreationDate":"2015-07-20 4:12:13","validated":true,"QueryBody_Original":"DECLARE  @LANG str = ##Language##\n\nSELECT TOP 20 \n  BODY,\n  CHARINDEX('a', 'bcdf') as test\nFROM POSTS\nWHERE\n  POSTTYPEID=2"},{"QuerySetId":339452,"Title":"answered questions for the last M months excluding closed questions","Description":null,"QueryBody":"DECLARE  @months_ago DATETIME = DateAdd(month, -##months:int##, GETUTCDATE())\n\n-- 1 - question\n-- 2 - answer\nselect 100*cast((select count(distinct Q.Id) from Posts Q, Posts A where A.ParentId = Q.Id and Q.ClosedDate is null and Q.CreationDate > @months_ago and (A.Score > 0 or Q.AcceptedAnswerId = A.Id)) as float) \/ (select count(*) from Posts where PostTypeId = 1 and ClosedDate is null and CreationDate > @months_ago) as [answer ratio]","CreationDate":"2015-07-23 19:48:49","validated":true,"QueryBody_Original":"DECLARE  @months_ago DATETIME = DateAdd(month, -##months:int##, GETUTCDATE())\n\n-- 1 - question\n-- 2 - answer\nselect 100*cast((select count(distinct Q.Id) from Posts Q, Posts A where A.ParentId = Q.Id and Q.ClosedDate is null and Q.CreationDate > @months_ago and (A.Score > 0 or Q.AcceptedAnswerId = A.Id)) as float) \/ (select count(*) from Posts where PostTypeId = 1 and ClosedDate is null and CreationDate > @months_ago) as [answer ratio]"},{"QuerySetId":345818,"Title":"Answers which have outscored [user]'s answers","Description":null,"QueryBody":"SELECT \n    ParentId as [Post Link],\n    Id as \"Post Link\",\n    PostTypeId as \"Post Type\",\n    OwnerUserId as \"User Link\",\n    Score as \"Score\",\n    count(*) as Count\nfrom Posts as P\nwhere\n    ParentId in (\n        SELECT\n            ParentId as \"Post Link\"\n        from Posts as TargetP\n        where\n            OwnerUserId = ##TargetUserId##\n            and P.Score > TargetP.Score\n    )\ngroup by OwnerUserId, ParentId, Id, PostTypeId, Score","CreationDate":"2015-08-10 2:37:11","validated":true,"QueryBody_Original":"SELECT \n    ParentId as [Post Link],\n    Id as \"Post Link\",\n    PostTypeId as \"Post Type\",\n    OwnerUserId as \"User Link\",\n    Score as \"Score\",\n    count(*) as Count\nfrom Posts as P\nwhere\n    ParentId in (\n        SELECT\n            ParentId as \"Post Link\"\n        from Posts as TargetP\n        where\n            OwnerUserId = ##TargetUserId##\n            and P.Score > TargetP.Score\n    )\ngroup by OwnerUserId, ParentId, Id, PostTypeId, Score"},{"QuerySetId":352554,"Title":"Find Probably-Unregistered users and their low-quality posts","Description":null,"QueryBody":"SELECT  u.CreationDate AS \"Account creation\",\nDATEDIFF(hour, u.CreationDate, u.LastAccessDate) AS \"Last access _ hours later\",\nu.Id as [User Link], p.Id as [Post Link], p.Score as \"Post score\"\n\nFROM Users u\nJOIN Posts p ON u.Id = p.OwnerUserId\n\nWHERE u.Reputation = 1\n\/*AND DATEDIFF(hour, u.CreationDate, GETDATE()) > 8760 *\/\nAND DATEDIFF(hour, u.CreationDate, u.LastAccessDate) <= ##MaxHours:int##\nAND p.PostTypeId = 1\n\n-- MaxHours: Maximum number of hours between registration and last access \n\nORDER BY p.Score ASC, u.CreationDate ASC","CreationDate":"2019-04-01 18:19:20","validated":true,"QueryBody_Original":null},{"QuerySetId":353480,"Title":"My posts with the most comments","Description":null,"QueryBody":"SELECT  Top ##TopHowMany##\n  Id as [Post Link], \n  OwnerUserId as [User Link], \n  Case When PostTypeId = 1 then 'Question' When PostTypeId = 2 then 'Answer' End as [Q or A], \n  Cast(LastActivityDate as Date) as [Last Activity Date],\n  len(body) as [Length],\n  CommentCount\nfrom Posts\nwhere PostTypeId in (1,2) and OwnerUserId = ##UserId##\norder by CommentCount Desc","CreationDate":"2015-08-22 1:00:27","validated":true,"QueryBody_Original":null},{"QuerySetId":354339,"Title":"Find text in comments to\/from me","Description":"Finds comments either posted by you, or posted to a Q\/A of yours, that contains (case insensitive) the search text. You may use \"%\" in the search text to mean \"any number of intervening characters\".","QueryBody":"SELECT  commentid [Comment Link], CreationDate, postid [Post Link]\nfrom (\nSELECT c.id commentid, text, c.CreationDate, p.id postid\nfrom comments c\njoin posts p on p.id = c.postid\nwhere userid = ##UserId##\nunion\nSELECT c.id, text, c.CreationDate, p.id postid\nfrom posts p\njoin comments c on c.postid = p.id\nwhere p.owneruserid = ##UserId##\n) x\nwhere lower(text) like lower('%##SearchText##%')\norder by CreationDate desc","CreationDate":"2015-08-25 7:32:50","validated":true,"QueryBody_Original":"SELECT  commentid [Comment Link], CreationDate, postid [Post Link]\nfrom (\nSELECT c.id commentid, text, c.CreationDate, p.id postid\nfrom comments c\njoin posts p on p.id = c.postid\nwhere userid = ##UserId##\nunion\nSELECT c.id, text, c.CreationDate, p.id postid\nfrom posts p\njoin comments c on c.postid = p.id\nwhere p.owneruserid = ##UserId##\n) x\nwhere lower(text) like lower('%##SearchText##%')\norder by CreationDate desc"},{"QuerySetId":355460,"Title":"All posts of a given type","Description":null,"QueryBody":"SELECT  * from Posts \nwhere PostTypeId = ##type##\norder by Id asc","CreationDate":"2015-08-27 1:53:51","validated":true,"QueryBody_Original":"SELECT  * from Posts \nwhere PostTypeId = ##type##\norder by Id asc"},{"QuerySetId":358005,"Title":"Own edits last 30 days","Description":null,"QueryBody":"SELECT  PostHistoryTypeId, PostId, CreationDate, Comment\nFROM PostHistory \nWHERE UserID = ##UserID## AND (DATEDIFF(day, CreationDate, GETDATE() ) ) < 30\nORDER BY CreationDate DESC","CreationDate":"2015-09-01 8:10:47","validated":true,"QueryBody_Original":"SELECT  PostHistoryTypeId, PostId, CreationDate, Comment\nFROM PostHistory \nWHERE UserID = ##UserID## AND (DATEDIFF(day, CreationDate, GETDATE() ) ) < 30\nORDER BY CreationDate DESC"},{"QuerySetId":359702,"Title":"n-th percentile score on accepted answers","Description":null,"QueryBody":"WITH  AcceptedAnswersScores as (\n  select a.Score from Posts as a\n  inner join Posts q on q.AcceptedAnswerId = a.id\n  where a.PostTypeId = 2\n), Percentiles as (\nSELECT perc = PERCENTILE_CONT(##n:float?0.5##) WITHIN GROUP (ORDER BY Score) OVER ()\nFROM AcceptedAnswersScores\n)\n\nselect avg(cast(perc as float)) from Percentiles","CreationDate":"2015-09-04 21:47:34","validated":true,"QueryBody_Original":null},{"QuerySetId":360792,"Title":"Questions by Tag and Quarter","Description":null,"QueryBody":"SELECT  \n  t.TagName as tag_name,\n  Year(p.CreationDate) as y,\n  datepart(QUARTER, p.CreationDate) as q,\n  count(*) as n,\n  count(distinct p.OwnerUserId) as n_users,\n  sum(p.Score) as score,\n  count(p.AcceptedAnswerId) as n_acc,\n  sum(p.AnswerCount) as n_ans,\n  sum(p.ViewCount) as views\nfrom Posts p\njoin PostTags pt\n  on p.Id = pt.PostId\njoin Tags t\n  on pt.TagId = t.Id\nwhere\n  and p.PostTypeId = 1\ngroup by \n  t.TagName, \n  Year(p.CreationDate),\n  datepart(QUARTER, p.CreationDate)\norder by n desc","CreationDate":"2015-09-06 21:38:37","validated":true,"QueryBody_Original":null},{"QuerySetId":360821,"Title":"Find tags where I can vote on tag-synonyms","Description":null,"QueryBody":"SELECT  ts.targettagname [tagname], concat('site:\/\/tags\/', ts.targettagname, '\/synonyms') link\nfrom posts p\njoin posttags pt on p.parentid=postid\njoin tags t on t.id=tagid\nleft join tagsynonyms n on tagname=n.sourcetagname\n  and n.approvaldate is not null\njoin tagsynonyms ts on ts.targettagname=coalesce(n.targettagname, tagname)\n  and ts.approvaldate is null\nwhere p.owneruserid=##userid:int## and p.communityowneddate is null\n  and p.score!=0 and p.posttypeid=2\ngroup by ts.targettagname\nhaving sum(p.score)\/count(distinct ts.sourcetagname)>=5","CreationDate":"2015-09-06 19:49:29","validated":true,"QueryBody_Original":null},{"QuerySetId":361436,"Title":"High-viewcount posts on specific days","Description":null,"QueryBody":"SELECT  TOP 10\n  Id AS [Post Link], CreationDate, ViewCount,##date:string##\nFROM\n  Posts\nWHERE CreationDate>=DATEADD(day,-1,##date:string##)\n  AND CreationDate<DATEADD(day,1,##date##)\nORDER BY ViewCount DESC","CreationDate":"2015-09-17 0:53:04","validated":true,"QueryBody_Original":"SELECT  TOP 10\n  Id AS [Post Link], CreationDate, ViewCount,##date:string##\nFROM\n  Posts\nWHERE CreationDate>=DATEADD(day,-1,##date:string##)\n  AND CreationDate<DATEADD(day,1,##date##)\nORDER BY ViewCount DESC"},{"QuerySetId":363107,"Title":"Number of answers among users with every answer scoring at least \"minScore\"","Description":null,"QueryBody":"SELECT  uu.Id AS [User Link], aCt.aCt AS NumAnswers\nFROM Users uu\nINNER JOIN\n  (SELECT uuu.Id, COUNT(*) AS aCt\n   FROM Posts pp\n   INNER JOIN Users uuu ON pp.OwnerUserId=uuu.Id\n   WHERE pp.PostTypeId=2\n   GROUP BY uuu.Id\n  ) AS aCt ON uu.Id=aCt.Id\nWHERE uu.Id NOT IN \n  (SELECT u.Id\n   FROM Posts p\n   INNER JOIN Users u ON p.OwnerUserId=u.Id\n   WHERE p.Score < ##minScore## AND p.PostTypeId=2) AND\n  aCt.aCt >= ##minAnswers##","CreationDate":"2015-09-12 22:52:12","validated":true,"QueryBody_Original":"SELECT  uu.Id AS [User Link], aCt.aCt AS NumAnswers\nFROM Users uu\nINNER JOIN\n  (SELECT uuu.Id, COUNT(*) AS aCt\n   FROM Posts pp\n   INNER JOIN Users uuu ON pp.OwnerUserId=uuu.Id\n   WHERE pp.PostTypeId=2\n   GROUP BY uuu.Id\n  ) AS aCt ON uu.Id=aCt.Id\nWHERE uu.Id NOT IN \n  (SELECT u.Id\n   FROM Posts p\n   INNER JOIN Users u ON p.OwnerUserId=u.Id\n   WHERE p.Score < ##minScore## AND p.PostTypeId=2) AND\n  aCt.aCt >= ##minAnswers##"},{"QuerySetId":363132,"Title":"Users with at least \"minAnswers\" answers, all scoring at least \"minScore\"","Description":null,"QueryBody":"SELECT  uu.Id AS [User Link], aCt.aCt AS NumAnswers\nFROM Users uu\nINNER JOIN\n  (SELECT uuu.Id, COUNT(*) AS aCt\n   FROM Posts pp\n   INNER JOIN Users uuu ON pp.OwnerUserId=uuu.Id\n   WHERE pp.PostTypeId=2\n   GROUP BY uuu.Id\n  ) AS aCt ON uu.Id=aCt.Id\nWHERE uu.Id NOT IN \n  (SELECT u.Id\n   FROM Posts p\n   INNER JOIN Users u ON p.OwnerUserId=u.Id\n   WHERE p.Score >= ##minScore## AND p.PostTypeId=2) AND\n  aCt.aCt >= ##minAnswers##","CreationDate":"2015-09-13 5:39:19","validated":true,"QueryBody_Original":"SELECT  uu.Id AS [User Link], aCt.aCt AS NumAnswers\nFROM Users uu\nINNER JOIN\n  (SELECT uuu.Id, COUNT(*) AS aCt\n   FROM Posts pp\n   INNER JOIN Users uuu ON pp.OwnerUserId=uuu.Id\n   WHERE pp.PostTypeId=2\n   GROUP BY uuu.Id\n  ) AS aCt ON uu.Id=aCt.Id\nWHERE uu.Id NOT IN \n  (SELECT u.Id\n   FROM Posts p\n   INNER JOIN Users u ON p.OwnerUserId=u.Id\n   WHERE p.Score >= ##minScore## AND p.PostTypeId=2) AND\n  aCt.aCt >= ##minAnswers##"},{"QuerySetId":364337,"Title":"Number of questions by month between dates","Description":null,"QueryBody":"SELECT \n  datepart(year,p.CreationDate) + (datepart(month,p.CreationDate)-1)\/12.0 \n    as ddd,\n  count(*) as N\nFROM Posts p\nWHERE \n  datepart(year, p.CreationDate) >= ##startYear?2010##\n  AND datepart(year, p.CreationDate) <= ##endYear?2015##\nGROUP BY \n  datepart(year,p.CreationDate) + (datepart(month,p.CreationDate)-1)\/12.0\nORDER BY \n  datepart(year,p.CreationDate) + (datepart(month,p.CreationDate)-1)\/12.0","CreationDate":"2015-09-17 12:19:42","validated":true,"QueryBody_Original":null},{"QuerySetId":364926,"Title":"which of my post have been downvoted ?","Description":null,"QueryBody":"SELECT  P.Id as [Post Link], P.LastActivityDate, count(*) As NumberOfDownvotes\nFrom Posts as P\nJOIN Votes as V on P.Id = V.PostID\nWhere P.OwnerUserId = ##UserId## AND V.VoteTypeId = 3 \nGROUP BY P.Id,  P.LastActivityDate","CreationDate":"2015-09-17 12:29:08","validated":true,"QueryBody_Original":"SELECT  P.Id as [Post Link], P.LastActivityDate, count(*) As NumberOfDownvotes\nFrom Posts as P\nJOIN Votes as V on P.Id = V.PostID\nWhere P.OwnerUserId = ##UserId## AND V.VoteTypeId = 3 \nGROUP BY P.Id,  P.LastActivityDate"},{"QuerySetId":365393,"Title":"Users by questions favorited by me","Description":null,"QueryBody":"SELECT  *\nfrom(\n  SELECT p.OwnerUserId as [User Link], count(*) as \"Favorite questions\"\n  from Votes v\n    inner join Posts p on p.Id=v.PostId\n  where UserId = ##UserId##\n    and VoteTypeId = 5\n  group by p.OwnerUserId\n  ) I\norder by \"Favorite questions\" desc","CreationDate":"2015-09-17 17:03:35","validated":true,"QueryBody_Original":"SELECT  *\nfrom(\n  SELECT p.OwnerUserId as [User Link], count(*) as \"Favorite questions\"\n  from Votes v\n    inner join Posts p on p.Id=v.PostId\n  where UserId = ##UserId##\n    and VoteTypeId = 5\n  group by p.OwnerUserId\n  ) I\norder by \"Favorite questions\" desc"},{"QuerySetId":366317,"Title":"Search for questions that were closed as duplicate to one of your questions","Description":null,"QueryBody":"SELECT  pl.PostId AS [Post Link], pl.RelatedPostId AS [Post Link]\nFROM PostLinks AS pl\nJOIN Posts AS p\nON p.Id = pl.RelatedPostId\nWHERE\n  p.Id = ##questionId##\n  and p.PostTypeId = 1\n  and pl.LinkTypeId = 3","CreationDate":"2015-09-22 21:23:06","validated":true,"QueryBody_Original":"SELECT  pl.PostId AS [Post Link], pl.RelatedPostId AS [Post Link]\nFROM PostLinks AS pl\nJOIN Posts AS p\nON p.Id = pl.RelatedPostId\nWHERE\n  p.Id = ##questionId##\n  and p.PostTypeId = 1\n  and pl.LinkTypeId = 3"},{"QuerySetId":367001,"Title":"Separate a post in id, title, question and answers for given post Id","Description":"\nExample input: 3006643,2106715,1429318 \n(.csv downloadable for about 200 PostID's)\n","QueryBody":"SELECT \n    p.Id, p.Title, p.Body, k.Body\nFROM\n    Posts AS p inner join\n    Posts AS k ON\n    p.id = k.parentid\nWHERE\np.Id in (##id##) and k.posttypeid=2","CreationDate":"2016-04-12 21:06:00","validated":true,"QueryBody_Original":"SELECT \n    p.Id, p.Title, p.Body, k.Body\nFROM\n    Posts AS p inner join\n    Posts AS k ON\n    p.id = k.parentid\nWHERE\np.Id in (##id##) and k.posttypeid=2"},{"QuerySetId":367275,"Title":"Top User Of a Particular Tag in Israel","Description":null,"QueryBody":"WITH  USER_BY_TAG\nAS\n(\n  SELECT \n    ROW_NUMBER() OVER(ORDER BY COUNT(*) DESC) Rank,\n    u.Id AS [User Link], \n    u.Reputation,\n    TagName,\n    COUNT(*) AS UpVotes\n  FROM Tags t\n      INNER JOIN PostTags pt ON pt.TagId = t.id\n      INNER JOIN Posts     p ON p.ParentId = pt.PostId\n      INNER JOIN Votes     v ON v.PostId = p.Id and VoteTypeId = 2\n      INNER JOIN Users     u ON u.Id = p.OwnerUserId\n  WHERE \n      TagName = ##tagName:string##\n  GROUP BY u.id, TagName, u.Reputation\n)\n\nSELECT * FROM USER_BY_TAG WHERE rank <= 100 AND LOWER(location) LIKE '%israel%' ORDER BY upvotes DESC ;","CreationDate":"2015-09-22 7:09:11","validated":true,"QueryBody_Original":null},{"QuerySetId":368751,"Title":"downvoted questions with downvoted self-answer","Description":null,"QueryBody":"SELECT  a.Id AS [Post Link],q.Score AS [Q Score],a.Score AS [A Score],q.ClosedDate,a.CommunityOwnedDate\nFROM Posts q INNER JOIN Posts a\nON a.ParentId=q.Id AND q.OwnerUserId=a.OwnerUserId\nWHERE q.PostTypeId=1 AND a.PostTypeId=2 AND q.Score<=##qscore:int?-3## AND a.Score<=##ascore:int?-3##\n","CreationDate":"2015-09-27 13:00:26","validated":true,"QueryBody_Original":null},{"QuerySetId":369939,"Title":"When did I get votes on my post","Description":null,"QueryBody":"SELECT  creationdate, name, count(votes.id)\nfrom votes inner join\nvotetypes on votetypes.id = votes.votetypeid\nwhere postid = ##postid:int##\ngroup by creationdate, name\norder by creationdate, name","CreationDate":"2015-10-01 5:01:56","validated":true,"QueryBody_Original":null},{"QuerySetId":370521,"Title":"New Oracle questions and answers per day","Description":null,"QueryBody":"SELECT  CONVERT(date, p.CreationDate,126) as \"Date\", count(1) AS questions, SUM(p.AnswerCount) as Answers\nFROM posts p\n    WHERE p.tags LIKE '%oracle%'\n      GROUP BY CONVERT(date, p.CreationDate,126)\n        ORDER BY 1 DESC;","CreationDate":"2015-10-02 22:17:44","validated":true,"QueryBody_Original":null},{"QuerySetId":370807,"Title":"Revival badge progress for user for specific tag","Description":null,"QueryBody":"DECLARE  @tag VARCHAR(30) = ##tag:string##\n\nSELECT TOP 1000\n    a.Id AS [Post Link],\n    a.Score,\n    a.CreationDate\nFROM Posts a\nWHERE\n    a.PostTypeId = 2\n    AND EXISTS\n    (\n        SELECT *\n        FROM Posts q\n        WHERE q.Id = a.ParentId\n        AND q.PostTypeId = 1\n        AND a.CreationDate > q.CreationDate + 30\n        AND Tags LIKE '%<' + LOWER(@tag) + '>%'\n    )\n    \nORDER BY a.Score DESC","CreationDate":"2015-11-24 13:10:56","validated":true,"QueryBody_Original":"DECLARE  @tag VARCHAR(30) = ##tag:string##\n\nSELECT TOP 1000\n    a.Id AS [Post Link],\n    a.Score,\n    a.CreationDate\nFROM Posts a\nWHERE\n    a.PostTypeId = 2\n    AND EXISTS\n    (\n        SELECT *\n        FROM Posts q\n        WHERE q.Id = a.ParentId\n        AND q.PostTypeId = 1\n        AND a.CreationDate > q.CreationDate + 30\n        AND Tags LIKE '%<' + LOWER(@tag) + '>%'\n    )\n    \nORDER BY a.Score DESC"},{"QuerySetId":371182,"Title":"Top comments by the Community User","Description":null,"QueryBody":"SELECT  TOP ##topn:int?50## Id as [Comment Link],Score,CreationDate,UserDisplayName\nFROM Comments WHERE UserId=-1\nORDER BY ##orderby?Score DESC##","CreationDate":"2015-10-05 14:07:45","validated":true,"QueryBody_Original":null},{"QuerySetId":371187,"Title":"Top tags by average score of recent questions","Description":null,"QueryBody":"SELECT  TOP ##topn:int?50##\nMIN(t.TagName) AS [TagName],AVG(p.Score) AS avgScore,COUNT(p.Id) AS nposts\nFROM Posts p INNER JOIN PostTags pt ON p.Id=pt.PostId INNER JOIN Tags t ON pt.TagId=t.Id\nWHERE p.PostTypeId=1\nGROUP BY pt.TagId\nHAVING COUNT(*) >= 30\nORDER BY AVG(p.Score) DESC","CreationDate":"2015-10-05 14:34:33","validated":true,"QueryBody_Original":null},{"QuerySetId":373167,"Title":"Questions (with answers stats) which ever had a tag","Description":null,"QueryBody":"SELECT  p.id [Post Link]\n, case when p.tags like concat('%<', ##tag:string##, '>%') then 1 end tagged\n, p.score\n, case when p.acceptedanswerid is not null then 1 end accepted\n, p.answercount\n, p.viewcount\nfrom posts p\njoin posthistory h on p.id=h.postid\nwhere h.posthistorytypeid in (3, 6)\nand h.text like concat('%<', ##tag##, '>%')\ngroup by p.id, p.acceptedanswerid, p.score, p.viewcount, p.tags, p.answercount\norder by p.score desc","CreationDate":"2015-10-08 23:25:19","validated":true,"QueryBody_Original":"SELECT  p.id [Post Link]\n, case when p.tags like concat('%<', ##tag:string##, '>%') then 1 end tagged\n, p.score\n, case when p.acceptedanswerid is not null then 1 end accepted\n, p.answercount\n, p.viewcount\nfrom posts p\njoin posthistory h on p.id=h.postid\nwhere h.posthistorytypeid in (3, 6)\nand h.text like concat('%<', ##tag##, '>%')\ngroup by p.id, p.acceptedanswerid, p.score, p.viewcount, p.tags, p.answercount\norder by p.score desc"},{"QuerySetId":374628,"Title":"Users with the highest average score per post","Description":null,"QueryBody":"WITH scoreByPost AS (\n    SELECT\n                p.OwnerUserId,\n                COUNT (p.Id) AS PostCount,\n                AVG (CAST (p.Score AS FLOAT) ) AS AverageScore\n    FROM\n                Posts p\n    GROUP BY    p.OwnerUserId\n)\nSELECT      TOP 1000\n            u.Id    AS [User Link],\n            u.Reputation,\n            FORMAT (sbp.AverageScore, '#,###,##0.000') AS [Average Score]\nFROM        scoreByPost sbp\nINNER JOIN  Users u\nON          u.Id = sbp.OwnerUserId\nWHERE       sbp.PostCount >= ##MinPosts:INT?10##\nORDER BY\n            sbp.AverageScore    DESC,\n            sbp.PostCount       DESC","CreationDate":"2015-10-12 9:08:20","validated":true,"QueryBody_Original":null},{"QuerySetId":377110,"Title":"Breakdown of posts by post type and by score, given UID.","Description":null,"QueryBody":"DECLARE  @uid int = ##UserId##\n\nSELECT \nPostTypes.Name as [Type],\nPosts.Score,\nCOUNT(*) as [Count]\nFrom Posts INNER JOIN PostTypes On Posts.PostTypeId=PostTypes.Id\nWhere OwnerUserId=@uid\nGroup By PostTypes.Name, Posts.Score\nORDER BY PostTypes.Name ASC, Posts.Score DESC","CreationDate":"2015-10-18 16:42:47","validated":true,"QueryBody_Original":"DECLARE  @uid int = ##UserId##\n\nSELECT \nPostTypes.Name as [Type],\nPosts.Score,\nCOUNT(*) as [Count]\nFrom Posts INNER JOIN PostTypes On Posts.PostTypeId=PostTypes.Id\nWhere OwnerUserId=@uid\nGroup By PostTypes.Name, Posts.Score\nORDER BY PostTypes.Name ASC, Posts.Score DESC"},{"QuerySetId":377982,"Title":"New answers or questions from specific period","Description":null,"QueryBody":"DECLARE  @From DATETIME = convert(DATETIME, '##From?2015\/07\/01 00:00:00##')\nDECLARE @To DATETIME = convert(DATETIME, '##To?2015\/09\/30 00:00:00##')\nDECLARE @SubFrom DATETIME = convert(DATETIME, '##SubFrom?2015\/07\/01 00:00:00##')\nDECLARE @SubTo DATETIME = convert(DATETIME, '##SubTo?2015\/09\/30 00:00:00##')\nDECLARE @Pattern VARCHAR(25) = ##TagPattern:string?%identify-this-%##\n\nSELECT Q.Id AS [Post Link], Q.LastActivityDate FROM Posts Q WHERE\n  Q.PostTypeId = 1 AND \n  Q.Tags NOT LIKE @Pattern AND \n  Q.LastActivityDate BETWEEN @SubFrom AND @SubTo AND \n  (Q.CreationDate BETWEEN @From AND @To OR \n  EXISTS (SELECT * FROM Posts A WHERE \n    A.PostTypeId = 2 AND A.ParentId = Q.Id AND \n    A.CreationDate BETWEEN @From AND @To))\nORDER BY Q.LastActivityDate ASC","CreationDate":"2015-10-21 1:34:58","validated":true,"QueryBody_Original":"DECLARE  @From DATETIME = convert(DATETIME, '##From?2015\/07\/01 00:00:00##')\nDECLARE @To DATETIME = convert(DATETIME, '##To?2015\/09\/30 00:00:00##')\nDECLARE @SubFrom DATETIME = convert(DATETIME, '##SubFrom?2015\/07\/01 00:00:00##')\nDECLARE @SubTo DATETIME = convert(DATETIME, '##SubTo?2015\/09\/30 00:00:00##')\nDECLARE @Pattern VARCHAR(25) = ##TagPattern:string?%identify-this-%##\n\nSELECT Q.Id AS [Post Link], Q.LastActivityDate FROM Posts Q WHERE\n  Q.PostTypeId = 1 AND \n  Q.Tags NOT LIKE @Pattern AND \n  Q.LastActivityDate BETWEEN @SubFrom AND @SubTo AND \n  (Q.CreationDate BETWEEN @From AND @To OR \n  EXISTS (SELECT * FROM Posts A WHERE \n    A.PostTypeId = 2 AND A.ParentId = Q.Id AND \n    A.CreationDate BETWEEN @From AND @To))\nORDER BY Q.LastActivityDate ASC"},{"QuerySetId":382983,"Title":"Go vs Scala by Year","Description":null,"QueryBody":"SELECT  TagName, substring(convert(VARCHAR, p.CreationDate, 126),1,4), count(1)\nfrom Posts p, PostTags pt, Tags t\nwhere p.id = pt.PostId and pt.TagId = t.id\nand TagName in( 'go', 'scala')\ngroup by TagName, substring(convert(VARCHAR, p.CreationDate, 126),1,4)\norder by 1","CreationDate":"2016-03-07 11:34:10","validated":true,"QueryBody_Original":null},{"QuerySetId":391288,"Title":"Top Users by answer score and Tag from Country","Description":null,"QueryBody":"Top Users by Tag from Country","CreationDate":"2016-08-10 14:14:38","validated":true,"QueryBody_Original":null},{"QuerySetId":391638,"Title":"up \/ downvote split for a specific question","Description":null,"QueryBody":"SELECT  sum(case when votetypeid = 2 then 1 else 0 end) as upvotes\n    , sum(case when votetypeid = 3 then 1 else 0 end) as downvotes\n    , count(*) as total\nfrom votes\nwhere postid = ##id##\nand votetypeid in (2,3)","CreationDate":"2015-11-14 0:53:33","validated":true,"QueryBody_Original":"SELECT  sum(case when votetypeid = 2 then 1 else 0 end) as upvotes\n    , sum(case when votetypeid = 3 then 1 else 0 end) as downvotes\n    , count(*) as total\nfrom votes\nwhere postid = ##id##\nand votetypeid in (2,3)"},{"QuerySetId":397261,"Title":"Number of posts with a tag name grouped by day","Description":null,"QueryBody":"SELECT  CAST(CreationDate AS DATE), count(PostId)\nfrom Tags, PostTags, Posts \nwhere \nTags.Id = PostTags.TagId \nand Posts.Id = PostId\nand Tags.TagName=##TagName:string##\ngroup by CAST(CreationDate AS DATE) order by CAST(CreationDate AS DATE)","CreationDate":"2015-11-26 1:06:08","validated":true,"QueryBody_Original":null},{"QuerySetId":398004,"Title":"How many words have a user written all together?","Description":null,"QueryBody":"SELECT  sum(len(Body) - len(replace(Body, ' ', '')) + 1) as NumbofWords\nfrom Posts p\nwhere p.OwnerUserId = ##UserId##","CreationDate":"2015-11-24 22:48:23","validated":true,"QueryBody_Original":"SELECT  sum(len(Body) - len(replace(Body, ' ', '')) + 1) as NumbofWords\nfrom Posts p\nwhere p.OwnerUserId = ##UserId##"},{"QuerySetId":407633,"Title":"Questions with low score answers (from high rep users)","Description":"Tries locating hidden gems by searching for answers by high rep users which has low score. To help decide score level it also lists max and average score on that question. It does however _not_ list the user, as we don't want to actually focus on the users when looking for hidden gems, but more to revisit and up-vote worthy answers. ","QueryBody":"DECLARE  @reputationLimit AS INT = ##ReputationLimit:int?5000##;\nDECLARE @lowScoreLimit AS INT = ##LowScoreLimit:int?5##;\nDECLARE @tag as NVARCHAR(60) = ##Tag:string? ##;\n\nSELECT TOP ##Limit:int?100##\n  u.Id AS [User Link],\n  a.Id AS [Post Link],\n  a.CreationDate,\n  a.Score,\n  q.MaxAns,\n  q.AvgAns,\n  q.Tags\nFROM Posts a\n  JOIN Users u ON a.OwnerUserId = u.Id\n  JOIN (\n  SELECT q.Id, q.Tags, AVG(a.Score) AvgAns, MAX(a.Score) MaxAns\n    FROM Posts q\n    JOIN Posts a ON a.ParentId = q.Id\n    WHERE q.AcceptedAnswerId IS NULL\n    GROUP BY q.Id, q.Tags\n  ) q\n  ON a.ParentId = q.Id\nWHERE (u.Reputation > @reputationLimit)\n  AND a.Score <= @lowScoreLimit\n  -- AND q.MaxAnswerScore = 0\n  AND (@tag = '' or q.tags like '%'+@tag+'%')\nORDER BY a.CreationDate DESC","CreationDate":"2015-12-15 20:04:22","validated":true,"QueryBody_Original":null},{"QuerySetId":410452,"Title":"Ratio of questions with specific tag","Description":null,"QueryBody":"DECLARE  @BeginDate DATETIME = (SELECT min(CreationDate) FROM PostHistory);\nDECLARE @EndDate DATETIME = (SELECT max(CreationDate) FROM PostHistory);\nDECLARE @Pattern VARCHAR(25) = ##TagPattern:string?%identification%##;\n\nWITH Dates AS\n(\n  SELECT @BeginDate AS [DateValue]\n  UNION ALL\n  SELECT DateValue + 1 FROM Dates WHERE DateValue + 1 < @EndDate\n)\n\nSELECT D.DateValue AS [Date],\n\n  (CASE WHEN EXISTS (SELECT * FROM Posts P \n    WHERE P.PostTypeId = 1 AND P.CreationDate < D.DateValue)\n   THEN\n    100.0 * (SELECT count(*) FROM Posts P \n      WHERE P.Tags LIKE @Pattern AND P.CreationDate < D.DateValue) \/ \n    (SELECT count(*) FROM Posts P \n      WHERE P.PostTypeId = 1 AND P.CreationDate < D.DateValue)\n   ELSE 0 END) AS [SW %]\nFROM\n  Dates AS D\nORDER BY D.DateValue ASC\nOPTION (MAXRECURSION 0)","CreationDate":"2015-12-17 0:05:33","validated":true,"QueryBody_Original":null},{"QuerySetId":413714,"Title":"Closed percentage (user vs. the site)","Description":null,"QueryBody":"SELECT  'proportion of questions closed'\n,1.0*count(all p.closeddate)\/count(p.id) as fraction\nfrom posts p\nwhere p.posttypeid = 1\nunion all\nSELECT concat('proportion of questions closed for user ', ##userID##)\n,1.0*count(all p.closeddate)\/count(p.id) as fraction\nfrom posts p\nwhere p.owneruserid = ##userID##\nand p.posttypeid = 1","CreationDate":"2015-12-22 5:04:48","validated":true,"QueryBody_Original":null},{"QuerySetId":417253,"Title":"Posts by tag per week","Description":null,"QueryBody":"DECLARE  @Tag nvarchar(25) = 'google-bigquery';\n\nSELECT\n  WeekStart, COUNT(UniqueId)\nFROM \n(\n  SELECT\n    Posts.Id AS UniqueId, \n    dateadd(week, datediff(day, '20000109', Posts.CreationDate) \/ 7, '20000109') AS WeekStart  \n  FROM Tags\n    INNER JOIN PostTags ON PostTags.TagId = Tags.Id\n    INNER JOIN Posts ON Posts.Id = PostTags.PostId\n  WHERE\n    Tags.TagName = @Tag and\n    Posts.PostTypeId = 1 -- Questions\n) RelevantQuestionsByWeek\nGROUP BY WeekStart;","CreationDate":"2015-12-29 18:17:29","validated":true,"QueryBody_Original":"DECLARE  @Tag nvarchar(25) = 'google-bigquery';\n\nSELECT\n  WeekStart, COUNT(UniqueId)\nFROM \n(\n  SELECT\n    Posts.Id AS UniqueId, \n    dateadd(week, datediff(day, '20000109', Posts.CreationDate) \/ 7, '20000109') AS WeekStart  \n  FROM Tags\n    INNER JOIN PostTags ON PostTags.TagId = Tags.Id\n    INNER JOIN Posts ON Posts.Id = PostTags.PostId\n  WHERE\n    Tags.TagName = @Tag and\n    Posts.PostTypeId = 1 -- Questions\n) RelevantQuestionsByWeek\nGROUP BY WeekStart;"},{"QuerySetId":421501,"Title":"Posts and comments by anonymous user","Description":null,"QueryBody":"SELECT \n    Posts.Id as [Post Link],\n    PostTypes.Name as [Type],\n    CreationDate,\n    Score\n  from Posts\n    join PostTypes on PostTypes.Id = PostTypeId\n  where OwnerDisplayName = ##UserName:string## )\nunion all\n( SELECT\n    PostId as [Post Link],\n    'Comment' as [Type],\n    CreationDate,\n    Score\n  from Comments\n  where UserDisplayName = ##UserName:string## )\norder by CreationDate desc","CreationDate":"2016-01-10 4:11:13","validated":true,"QueryBody_Original":null},{"QuerySetId":424985,"Title":"Number of accounts per email address","Description":null,"QueryBody":"SELECT  \n    u1.EmailHash,\n    Count(u1.Id) AS Accounts,\n    (SELECT Cast(u2.Id AS varchar) + ' (' + u2.DisplayName + '), ' FROM Users u2 WHERE u2.EmailHash = u1.EmailHash FOR XML PATH ('')) AS IdsAndNames\nFROM\n    Users u1\nWHERE\n    u1.EmailHash IS NOT NULL\nGROUP BY\n    u1.EmailHash\nHAVING\n    Count(u1.Id) > 1\nORDER BY \n    Accounts DESC","CreationDate":"2016-01-18 20:12:38","validated":true,"QueryBody_Original":null},{"QuerySetId":429233,"Title":"What percentage of down votes are users responsible for?","Description":null,"QueryBody":"WITH  DownVoteCount AS (\n  SELECT DownVoteCount = CAST(SUM(DownVotes) AS float)\n  FROM Users\n WITH the table's total downvote count\n), DownVoteWeight AS (\n  SELECT DisplayName, UpVotes, DownVoteWeight = ROUND(\n            DownVotes \/ (SELECT DownVoteCount from DownVoteCount) * 100, 4\n          ),\n          DownVoteLikelihood = ROUND(\n            DownVotes \/ CAST((DownVotes + UpVotes) AS float) * 100, 4\n          )\n  FROM Users\n  WHERE Users.DownVotes > 0\n)\n\nSELECT DisplayName, DownVoteWeight, DownVoteLikelihood\nFROM DownVoteWeight\n\nORDER BY DownVoteWeight DESC, UpVotes","CreationDate":"2016-01-30 20:17:56","validated":true,"QueryBody_Original":null},{"QuerySetId":431143,"Title":"controversial suggested edits - edits with most reviews","Description":null,"QueryBody":"SELECT  TOP ##topn:int?200##\nrt.SuggestedEditId AS [Suggested Edit Link],COUNT(*) AS totalreviews,\nSUM(CASE WHEN rr.ReviewTaskResultTypeId=1 THEN 1 ELSE 0 END) AS skips,\nSUM(CASE WHEN rr.ReviewTaskResultTypeId=3 THEN 1 ELSE 0 END) AS rejects,\nSUM(CASE WHEN rr.ReviewTaskResultTypeId=2 THEN 1 ELSE 0 END) AS approves\nFROM ReviewTasks rt INNER JOIN ReviewTaskResults rr ON rr.ReviewTaskId=rt.Id\nWHERE rt.ReviewTaskTypeId=1\nGROUP BY rt.SuggestedEditId\n\nORDER BY COUNT(*) DESC","CreationDate":"2016-02-02 14:40:24","validated":true,"QueryBody_Original":null},{"QuerySetId":432322,"Title":"Unanswered unremarkable posts by low-reputation users","Description":null,"QueryBody":"SELECT  p.CreationDate, p. AnswerCount, p.Id AS [Post Link]\nFROM Posts p \nINNER JOIN Users u \nON p.OwnerUserId =  u.Id\nWHERE (\n  p.PostTypeId = 1 AND\n  u.Reputation <= ##ReputationLimit## AND\n  len(p.Body) <= ##LengthLimit## AND\n  p.ClosedDate IS NULL AND\n  p.Score = 0 AND\n  p.AnswerCount = 0 \n)\nORDER BY p.CreationDate DESC","CreationDate":"2016-02-05 4:55:26","validated":true,"QueryBody_Original":"SELECT  p.CreationDate, p. AnswerCount, p.Id AS [Post Link]\nFROM Posts p \nINNER JOIN Users u \nON p.OwnerUserId =  u.Id\nWHERE (\n  p.PostTypeId = 1 AND\n  u.Reputation <= ##ReputationLimit## AND\n  len(p.Body) <= ##LengthLimit## AND\n  p.ClosedDate IS NULL AND\n  p.Score = 0 AND\n  p.AnswerCount = 0 \n)\nORDER BY p.CreationDate DESC"},{"QuerySetId":433214,"Title":"Count of answers by user over time, by month","Description":null,"QueryBody":"DECLARE  @UserId int = ##UserId?209103##\n\nSELECT \n  DATEADD(MONTH, DATEDIFF(MONTH, 0, CreationDate), 0) AS [MONTH]\n  , COUNT(*) AS Count\nFROM Posts\nWHERE OwnerUserId = @UserId\nGROUP BY DATEADD(MONTH, DATEDIFF(MONTH, 0, CreationDate), 0)\nORDER BY [MONTH] DESC","CreationDate":"2018-06-03 18:58:09","validated":true,"QueryBody_Original":"DECLARE  @UserId int = ##UserId?209103##\n\nSELECT \n  DATEADD(MONTH, DATEDIFF(MONTH, 0, CreationDate), 0) AS [MONTH]\n  , COUNT(*) AS Count\nFROM Posts\nWHERE OwnerUserId = @UserId\nGROUP BY DATEADD(MONTH, DATEDIFF(MONTH, 0, CreationDate), 0)\nORDER BY [MONTH] DESC"},{"QuerySetId":433509,"Title":"Bluemix multi-tag query - standard fields","Description":null,"QueryBody":"DECLARE  @tag1 int\nDECLARE @tag2 int\nselect @tag1=Id from Tags where TagName='ibm-bluemix'\nselect @tag2=Id from Tags where TagName='ibm'\n\nselect distinct\nPosts.Id,\nPosts.Title,\nPosts.CreationDate,\nPosts.LastActivityDate,\nPosts.ClosedDate,\nPosts.Score,\nPosts.ViewCount,\nPosts.AnswerCount,\nPosts.AcceptedAnswerId,\nPosts.Tags\n\nfrom Posts\nINNER JOIN PostTags ON PostTags.PostId = Posts.Id\nINNER JOIN Tags ON Tags.Id = PostTags.TagId\nINNER JOIN PostTypes ON PostTypes.Id = Posts.PostTypeId\nleft JOIN Users ON Users.Id = Posts.OwnerUserId\n\nWHERE\n\nPosts.Id in (select PostId from PostTags where TagId = @tag1)\nAND\nPosts.Id in (select PostId from PostTags where TagId = @tag2)\n\nORder by Posts.CreationDate Desc","CreationDate":"2016-06-14 19:29:12","validated":true,"QueryBody_Original":"DECLARE  @tag1 int\nDECLARE @tag2 int\nselect @tag1=Id from Tags where TagName='ibm-bluemix'\nselect @tag2=Id from Tags where TagName='ibm'\n\nselect distinct\nPosts.Id,\nPosts.Title,\nPosts.CreationDate,\nPosts.LastActivityDate,\nPosts.ClosedDate,\nPosts.Score,\nPosts.ViewCount,\nPosts.AnswerCount,\nPosts.AcceptedAnswerId,\nPosts.Tags\n\nfrom Posts\nINNER JOIN PostTags ON PostTags.PostId = Posts.Id\nINNER JOIN Tags ON Tags.Id = PostTags.TagId\nINNER JOIN PostTypes ON PostTypes.Id = Posts.PostTypeId\nleft JOIN Users ON Users.Id = Posts.OwnerUserId\n\nWHERE\n\nPosts.Id in (select PostId from PostTags where TagId = @tag1)\nAND\nPosts.Id in (select PostId from PostTags where TagId = @tag2)\n\nORder by Posts.CreationDate Desc"},{"QuerySetId":434740,"Title":"Find posts with over X duplicate targets linking back","Description":null,"QueryBody":"SELECT  distinct *\nfrom (\n  SELECT count(*) as dups, \n   RelatedPostId as [Post Link]\n   \n  from PostLinks\n   join Posts q on q.Id=RelatedPostId\n\n  where LinkTypeId=3\n  group by RelatedPostId\n\n) d\nwhere dups > ##numdupes##;","CreationDate":"2017-07-21 8:14:51","validated":true,"QueryBody_Original":"SELECT  distinct *\nfrom (\n  SELECT count(*) as dups, \n   RelatedPostId as [Post Link]\n   \n  from PostLinks\n   join Posts q on q.Id=RelatedPostId\n\n  where LinkTypeId=3\n  group by RelatedPostId\n\n) d\nwhere dups > ##numdupes##;"},{"QuerySetId":435037,"Title":"Search single tag","Description":null,"QueryBody":"SELECT  Id as [Post Link] FROM Posts\nWHERE PostTypeId = 1\nAND Tags = CONCAT('<', ##Tag:string##, '>')\nORDER BY CreationDate DESC","CreationDate":"2016-02-11 6:05:15","validated":true,"QueryBody_Original":"SELECT  Id as [Post Link] FROM Posts\nWHERE PostTypeId = 1\nAND Tags = CONCAT('<', ##Tag:string##, '>')\nORDER BY CreationDate DESC"},{"QuerySetId":435141,"Title":"My 50 Lowest Rated Answers On Questions With No Accepted Answer","Description":null,"QueryBody":"DECLARE  @UserId int = ##UserId##\n\nSELECT TOP 50\n  p.Id AS [Post Link],\n  COALESCE(p.LastEditDate,p.CreationDate) AS MostRecentChange,\n  (\n    Select Count(v.Id) \n    FROM Votes v\n    INNER JOIN VoteTypes vt ON v.VoteTypeId = vt.Id\n    WHERE vt.Name='UpMod' AND\n      v.PostId = p.Id\n  ) AS UpVotes,\n  (\n    Select Count(v.Id) \n    FROM Votes v\n    INNER JOIN VoteTypes vt ON v.VoteTypeId = vt.Id\n    WHERE vt.Name='DownMod' AND\n      v.PostId = p.Id\n  ) AS DownVotes,\n  p.Score\nFROM Posts p\nINNER JOIN PostTypes pt ON pt.Id = p.PostTypeId\nINNER JOIN Posts p2 ON p.ParentId = p2.Id\nWHERE \n  pt.Name='Answer' AND\n  p.OwnerUserId=@UserId AND\n  p2.AcceptedAnswerId IS NULL\nORDER BY \n  p.Score, \n  p.LastEditDate DESC","CreationDate":"2016-02-11 12:34:14","validated":true,"QueryBody_Original":"DECLARE  @UserId int = ##UserId##\n\nSELECT TOP 50\n  p.Id AS [Post Link],\n  COALESCE(p.LastEditDate,p.CreationDate) AS MostRecentChange,\n  (\n    Select Count(v.Id) \n    FROM Votes v\n    INNER JOIN VoteTypes vt ON v.VoteTypeId = vt.Id\n    WHERE vt.Name='UpMod' AND\n      v.PostId = p.Id\n  ) AS UpVotes,\n  (\n    Select Count(v.Id) \n    FROM Votes v\n    INNER JOIN VoteTypes vt ON v.VoteTypeId = vt.Id\n    WHERE vt.Name='DownMod' AND\n      v.PostId = p.Id\n  ) AS DownVotes,\n  p.Score\nFROM Posts p\nINNER JOIN PostTypes pt ON pt.Id = p.PostTypeId\nINNER JOIN Posts p2 ON p.ParentId = p2.Id\nWHERE \n  pt.Name='Answer' AND\n  p.OwnerUserId=@UserId AND\n  p2.AcceptedAnswerId IS NULL\nORDER BY \n  p.Score, \n  p.LastEditDate DESC"},{"QuerySetId":437469,"Title":"questions with many duplicates","Description":null,"QueryBody":"SELECT  TOP ##topn:int?200## t.Id AS [Post Link],t.Score,t.ClosedDate,COUNT(*) AS num\nFROM Posts t INNER JOIN PostLinks l ON t.Id=l.RelatedPostId INNER JOIN Posts s ON s.Id=l.PostId\nWHERE l.LinkTypeId=3\nGROUP BY t.Id,t.Score,t.ClosedDate\nORDER BY COUNT(*) DESC","CreationDate":"2016-02-16 16:29:36","validated":true,"QueryBody_Original":null},{"QuerySetId":439545,"Title":"Top 500 Android Questions by View Count, Past 3 Months","Description":null,"QueryBody":"SELECT  TOP 500\n  Id,\n  Title,\n  CreationDate,\n  Score,\n  ViewCount,\n  Tags\nFROM Posts\nWHERE ClosedDate IS NULL\n  AND Tags LIKE '%android%'\n  AND CreationDate > DateAdd(m, -3, GetDate())\nORDER BY ViewCount DESC","CreationDate":"2016-02-21 20:42:50","validated":true,"QueryBody_Original":"SELECT  TOP 500\n  Id,\n  Title,\n  CreationDate,\n  Score,\n  ViewCount,\n  Tags\nFROM Posts\nWHERE ClosedDate IS NULL\n  AND Tags LIKE '%android%'\n  AND CreationDate > DateAdd(m, -3, GetDate())\nORDER BY ViewCount DESC"},{"QuerySetId":446466,"Title":"No comments no answers and title or body contains \"Excel\"","Description":null,"QueryBody":"No comments no answers and title or body contains phrase","CreationDate":"2016-03-07 17:07:18","validated":true,"QueryBody_Original":null},{"QuerySetId":446467,"Title":"No comments no answers and title contains \"Excel\"","Description":null,"QueryBody":"DECLARE  @phrase nvarchar(200) = 'Excel'\n\nselect TOP 30\n  p.Id as [Post Link]\n  FROM Posts p\n  WHERE \n  p.PostTypeId = 1 AND \n  p.score >= 0 AND\n  p.closeddate is null AND\n  ISNULL(p.AnswerCount,0) = 0 AND\n  ISNULL(p.CommentCount,0) = 0 AND\n  p.title like '%' + @phrase + '%' \n  order by p.score desc","CreationDate":"2016-03-07 4:21:48","validated":true,"QueryBody_Original":"DECLARE  @phrase nvarchar(200) = 'Excel'\n\nselect TOP 30\n  p.Id as [Post Link]\n  FROM Posts p\n  WHERE \n  p.PostTypeId = 1 AND \n  p.score >= 0 AND\n  p.closeddate is null AND\n  ISNULL(p.AnswerCount,0) = 0 AND\n  ISNULL(p.CommentCount,0) = 0 AND\n  p.title like '%' + @phrase + '%' \n  order by p.score desc"},{"QuerySetId":449112,"Title":"Get the percentage of closed questions for each tag with minimum tag popularity, excluding duplicates","Description":"Get the percentage of closed questions for each tag, excluding duplicates. You can set the minimum tag popularity with a parameter.","QueryBody":"DECLARE  @min_total INT = ##MinTotal:INT?1##;\n\nSELECT *\nFROM\n  (\n    SELECT\n      t.TagName,\n      Count(TagName) as Closed,\n      t.Count as Total,\n      ROUND(100.*Count(TagName)\/t.Count,3) as [% Closed]\n      FROM Posts p\n      INNER JOIN PostTags pt ON p.Id = pt.PostId\n      INNER JOIN Tags t ON pt.TagId = t.Id\n      INNER JOIN PostHistory h ON p.Id = h.PostId\n      WHERE\n        (p.PostTypeId = 1) AND      -- match questions\n        (p.ClosedDate IS NOT NULL)  -- that have been closed at some point\n       AND h.PostHistoryTypeId = 10      -- and have a history entry for it\n       AND h.Comment NOT IN ('1', '101') -- that says it's not a dupe\n      GROUP BY TagName, t.Count\n  ) a\nWHERE a.Total >= @min_total\nORDER BY\n    [% Closed] desc, TagName","CreationDate":"2016-03-12 6:56:50","validated":true,"QueryBody_Original":"DECLARE  @min_total INT = ##MinTotal:INT?1##;\n\nSELECT *\nFROM\n  (\n    SELECT\n      t.TagName,\n      Count(TagName) as Closed,\n      t.Count as Total,\n      ROUND(100.*Count(TagName)\/t.Count,3) as [% Closed]\n      FROM Posts p\n      INNER JOIN PostTags pt ON p.Id = pt.PostId\n      INNER JOIN Tags t ON pt.TagId = t.Id\n      INNER JOIN PostHistory h ON p.Id = h.PostId\n      WHERE\n        (p.PostTypeId = 1) AND      -- match questions\n        (p.ClosedDate IS NOT NULL)  -- that have been closed at some point\n       AND h.PostHistoryTypeId = 10      -- and have a history entry for it\n       AND h.Comment NOT IN ('1', '101') -- that says it's not a dupe\n      GROUP BY TagName, t.Count\n  ) a\nWHERE a.Total >= @min_total\nORDER BY\n    [% Closed] desc, TagName"},{"QuerySetId":450070,"Title":"Jason Goemaat upvotes by tag","Description":null,"QueryBody":"DECLARE  @UserId int = 369792\n\nSELECT --TOP 20 \n    TagName,\n    COUNT(*) AS UpVotes \nFROM Tags\n    INNER JOIN PostTags ON PostTags.TagId = Tags.id\n    INNER JOIN Posts ON Posts.ParentId = PostTags.PostId\n    INNER JOIN Votes ON Votes.PostId = Posts.Id and VoteTypeId = 2\nWHERE \n    Posts.OwnerUserId = @UserId\nGROUP BY TagName \nORDER BY UpVotes DESC","CreationDate":"2016-03-14 3:34:55","validated":true,"QueryBody_Original":"DECLARE  @UserId int = 369792\n\nSELECT --TOP 20 \n    TagName,\n    COUNT(*) AS UpVotes \nFROM Tags\n    INNER JOIN PostTags ON PostTags.TagId = Tags.id\n    INNER JOIN Posts ON Posts.ParentId = PostTags.PostId\n    INNER JOIN Votes ON Votes.PostId = Posts.Id and VoteTypeId = 2\nWHERE \n    Posts.OwnerUserId = @UserId\nGROUP BY TagName \nORDER BY UpVotes DESC"},{"QuerySetId":450520,"Title":"Comments that greatly outscore their parent post score. Has a default minimum post score of 20 and a outscoring threshold of 10.","Description":"Comments (especially for MSO) that greatly outscore their parent post score.  Has a default minimum post score of 20 and a outscoring threshold of 10.","QueryBody":"SELECT  C.id as [Comment Link]\n  , C.score as 'Comment Score'\n  , P.score as 'Post Score'\nfrom comments C\n  join Posts P on C.postId = P.id\nwhere P.score > ##minPostScore:int?20##\n  and C.score > P.score + ##commentOutscoresBy:int?10##","CreationDate":"2016-03-15 0:18:16","validated":true,"QueryBody_Original":null},{"QuerySetId":450771,"Title":"How to say \u201cthank you\u201d","Description":null,"QueryBody":"SELECT  TOP ##topn:int?1000## Text COLLATE SQL_Latin1_General_CP1_CI_AS,\nCOUNT(*) AS num,MIN(c.Id) AS [Comment Link]\nFROM Comments c INNER JOIN Users u ON c.UserId=u.Id\nWHERE u.Reputation<=##maxrep:int?10## AND\nText COLLATE SQL_Latin1_General_CP1_CI_AS Like '%than[kx]%'\nGROUP BY Text COLLATE SQL_Latin1_General_CP1_CI_AS\nORDER BY COUNT(*) DESC","CreationDate":"2016-04-09 11:21:55","validated":true,"QueryBody_Original":null},{"QuerySetId":451377,"Title":"Zero-score answers with at least one \u201cthank you\u201d answer","Description":null,"QueryBody":"SELECT  TOP ##topn:int?1000## p.Id as [Post Link], \nc.Id AS [Comment Link], p.CreationDate as [Answer creation date]\nFROM Comments c \nINNER JOIN Users u ON c.UserId=u.Id\nINNER JOIN Posts p ON p.Id=c.PostId\nWHERE p.PostTypeId = 2 AND\np.Score <= 0 AND\nText COLLATE SQL_Latin1_General_CP1_CI_AS Like '%than[kx]%'\nORDER BY p.CreationDate DESC","CreationDate":"2016-03-16 13:09:19","validated":true,"QueryBody_Original":null},{"QuerySetId":459737,"Title":"Number of questions asked per week given a starting creation date","Description":null,"QueryBody":"DECLARE  @CreationDate datetime = '##CreationDate?2014-01-01##';\n\nSELECT\n  COUNT(UniqueId) as NrOfQuestions, WeekStart\nFROM \n(\n  SELECT\n    Posts.Id AS UniqueId,     \n    dateadd(week, datediff(day, '20000109', Posts.CreationDate) \/ 7, '20000109') AS WeekStart  \n  FROM Tags\n    INNER JOIN PostTags ON PostTags.TagId = Tags.Id\n    INNER JOIN Posts ON Posts.Id = PostTags.PostId\n  WHERE\n    \n    Posts.CreationDate  >= @CreationDate\n    AND Posts.PostTypeId = 1 -- Questions  \n) RelevantQuestionsByWeek\nGROUP BY WeekStart\nOrder by WeekStart desc;","CreationDate":"2016-08-21 4:32:41","validated":true,"QueryBody_Original":"DECLARE  @CreationDate datetime = '##CreationDate?2014-01-01##';\n\nSELECT\n  COUNT(UniqueId) as NrOfQuestions, WeekStart\nFROM \n(\n  SELECT\n    Posts.Id AS UniqueId,     \n    dateadd(week, datediff(day, '20000109', Posts.CreationDate) \/ 7, '20000109') AS WeekStart  \n  FROM Tags\n    INNER JOIN PostTags ON PostTags.TagId = Tags.Id\n    INNER JOIN Posts ON Posts.Id = PostTags.PostId\n  WHERE\n    \n    Posts.CreationDate  >= @CreationDate\n    AND Posts.PostTypeId = 1 -- Questions  \n) RelevantQuestionsByWeek\nGROUP BY WeekStart\nOrder by WeekStart desc;"},{"QuerySetId":461132,"Title":"Questions by someone answered by someone else","Description":null,"QueryBody":"DECLARE  @answerer int = ##answerer##\n\nselect\n  a.Id [Post Link]\nfrom\n  Posts q join\n  Posts a on q.Id = a.ParentId\nwhere\n  a.PostTypeId = 2 and a.OwnerUserId = @answerer","CreationDate":"2020-02-19 11:18:00","validated":true,"QueryBody_Original":"DECLARE  @answerer int = ##answerer##\n\nselect\n  a.Id [Post Link]\nfrom\n  Posts q join\n  Posts a on q.Id = a.ParentId\nwhere\n  a.PostTypeId = 2 and a.OwnerUserId = @answerer"},{"QuerySetId":469941,"Title":"Simple data on reputation parity above a given lower bound","Description":null,"QueryBody":"SELECT \n  Count(*) as [Total],\n  Sum(Case When Reputation % 2 = 0 then 1 else 0 end) as [Even],\n  Sum(Case When Reputation % 2 = 1 then 1 else 0 end) as [Odd],\n  Round((Sum(Case When Reputation % 2 = 0 then 1 else 0 end)*100.0)\/Count(*),3) as [%Even],\n  Round((Sum(Case When Reputation % 2 = 1 then 1 else 0 end)*100.0)\/Count(*),3) as [%Odd],\n  Case When Sum(Case When Reputation % 2 = 1 then 1 else 0 end) = 0 then 0 else Round((Sum(Case When Reputation % 2 = 0 then 1 else 0 end)*1.0)\/Sum(Case When Reputation % 2 = 1 then 1 else 0 end),3) end as [Even\/Odd],\n  Round(Avg(Reputation*1.0),3) as [Mean]\nFrom Users\nWhere Reputation >= ##lowerBound##","CreationDate":"2016-04-11 13:25:45","validated":true,"QueryBody_Original":"SELECT \n  Count(*) as [Total],\n  Sum(Case When Reputation % 2 = 0 then 1 else 0 end) as [Even],\n  Sum(Case When Reputation % 2 = 1 then 1 else 0 end) as [Odd],\n  Round((Sum(Case When Reputation % 2 = 0 then 1 else 0 end)*100.0)\/Count(*),3) as [%Even],\n  Round((Sum(Case When Reputation % 2 = 1 then 1 else 0 end)*100.0)\/Count(*),3) as [%Odd],\n  Case When Sum(Case When Reputation % 2 = 1 then 1 else 0 end) = 0 then 0 else Round((Sum(Case When Reputation % 2 = 0 then 1 else 0 end)*1.0)\/Sum(Case When Reputation % 2 = 1 then 1 else 0 end),3) end as [Even\/Odd],\n  Round(Avg(Reputation*1.0),3) as [Mean]\nFrom Users\nWhere Reputation >= ##lowerBound##"},{"QuerySetId":470501,"Title":"Did I mark all my questions as accepted?","Description":null,"QueryBody":"SELECT  Id AS [Post Link], *\nfrom posts\nwhere posttypeid=1\nand acceptedanswerid is NULL\nand ClosedDate is NULL\nand AnswerCount > 0\nand OwnerUserId=##ownerid##","CreationDate":"2016-05-02 19:56:16","validated":true,"QueryBody_Original":"SELECT  Id AS [Post Link], *\nfrom posts\nwhere posttypeid=1\nand acceptedanswerid is NULL\nand ClosedDate is NULL\nand AnswerCount > 0\nand OwnerUserId=##ownerid##"},{"QuerySetId":478515,"Title":"My Answers to Negatively Scored Questions","Description":null,"QueryBody":"SELECT  P.Id AS [Post Link], (SELECT P2.Score FROM Posts P2 WHERE P2.Id = P.ParentId) AS [Question Score], (SELECT P2.ClosedDate FROM Posts P2 WHERE P2.Id = P.ParentId) AS [Question Closed Date]\nFROM Posts P\nWHERE P.ParentId in (\n                   SELECT Id FROM Posts P2\n                   WHERE P2.PostTypeId = 1\n                   AND P2.Score < 0\n                  )\n\nAND P.PostTypeId = 2\nAND P.OwnerUserID = ##userid##","CreationDate":"2016-04-27 18:05:39","validated":true,"QueryBody_Original":"SELECT  P.Id AS [Post Link], (SELECT P2.Score FROM Posts P2 WHERE P2.Id = P.ParentId) AS [Question Score], (SELECT P2.ClosedDate FROM Posts P2 WHERE P2.Id = P.ParentId) AS [Question Closed Date]\nFROM Posts P\nWHERE P.ParentId in (\n                   SELECT Id FROM Posts P2\n                   WHERE P2.PostTypeId = 1\n                   AND P2.Score < 0\n                  )\n\nAND P.PostTypeId = 2\nAND P.OwnerUserID = ##userid##"},{"QuerySetId":485239,"Title":"Migrated questions from ELU with scores less than parameter","Description":null,"QueryBody":"SELECT  p.Score, ph.CreationDate [Migrated], ph.PostId [Post Link], cr.Name \"Closed as\"\nfrom PostHistory ph\njoin Posts p on p.Id=ph.PostId\nleft join PostHistory cph on cph.PostId=ph.PostId and cph.CreationDate=p.ClosedDate and cph.PostHistoryTypeId=10\nleft join CloseReasonTypes cr on cr.Id=cph.Comment\nwhere ph.PostHistoryTypeId=36\nand p.PostTypeId=1\nand ph.Comment like 'from %english.stackexchange.com%'\nand p.Score <= ##MaximumScore?50##\norder by score","CreationDate":"2017-08-07 2:44:19","validated":true,"QueryBody_Original":null},{"QuerySetId":492298,"Title":"Dump answers to questions for user","Description":null,"QueryBody":"SELECT \n    q.Id, q.CreationDate, q.Title, q.Body, a.Id, a.CreationDate, a.Body\nfrom\n    Posts q\n  inner join\n    Posts a\n  on q.Id = a.ParentId and a.postTypeId = 2 and q.postTypeId = 1\nwhere\n  a.OwnerUserId = ##UserId##\norder by a.Id desc","CreationDate":"2016-05-30 18:31:18","validated":true,"QueryBody_Original":"SELECT \n    q.Id, q.CreationDate, q.Title, q.Body, a.Id, a.CreationDate, a.Body\nfrom\n    Posts q\n  inner join\n    Posts a\n  on q.Id = a.ParentId and a.postTypeId = 2 and q.postTypeId = 1\nwhere\n  a.OwnerUserId = ##UserId##\norder by a.Id desc"},{"QuerySetId":492729,"Title":"All questions with a *single* tag and a *word* in Title","Description":null,"QueryBody":"\nSELECT Id as [Post Link] FROM Posts\nWHERE PostTypeId = 1\n   AND Tags = CONCAT('<', ##Tag:string##, '>')\n   AND UPPER(Title) LIKE UPPER('%##word##%')\nORDER BY CreationDate;","CreationDate":"2016-05-31 8:39:46","validated":true,"QueryBody_Original":"\nSELECT Id as [Post Link] FROM Posts\nWHERE PostTypeId = 1\n   AND Tags = CONCAT('<', ##Tag:string##, '>')\n   AND UPPER(Title) LIKE UPPER('%##word##%')\nORDER BY CreationDate;"},{"QuerySetId":498554,"Title":"Tags most associated with another, by year.","Description":"Given a primary tag, and year, list the associated tags by popularity.","QueryBody":"SELECT  \n  Tags.TagName AS [Tag Name], \n  COUNT(*) AS [Number of associated posts]\nFROM PostTags\n  INNER JOIN Tags\n    ON Tags.Id = PostTags.TagId\nWHERE \n  PostTags.PostId IN \n  (\n    --Gets all the PostIds that have this tag\n    SELECT DISTINCT PostId\n    FROM PostTags\n      INNER JOIN Tags\n        ON Tags.Id = PostTags.TagId\n      INNER JOIN Posts\n        ON Posts.Id = PostTags.PostId\n    WHERE Tags.TagName = ##TagName:string##\n    AND YEAR(Posts.CreationDate) = ##Year:int##\n  )\n  AND Tags.TagName <> ##TagName:string##--Remove the tag your looking for from \"related\" search results.\nGROUP BY Tags.TagName\nORDER BY COUNT(*) DESC","CreationDate":"2016-06-10 9:11:28","validated":true,"QueryBody_Original":null},{"QuerySetId":506979,"Title":"Search for posts which have attracted significantly more controversial or bad answers than good ones\n","Description":"Search for posts which have attracted significantly more controversial or bad answers than good ones\n","QueryBody":"SELECT  p.Id as [Post Link], p.Score from (\nSELECT p.ParentId, count(*) as ContACnt from (\n    SELECT\n      PostId,\n      up = sum(case when VoteTypeId = 2 then 1 else 0 end),\n      down = sum(case when VoteTypeId = 3 then 1 else 0 end)\n    from Votes v join Posts p on p.Id = v.PostId\n    where VoteTypeId in (2,3) and PostTypeId = 2\n    group by PostId\n  ) as ContA\n  join posts p on ContA.PostId = p.Id\n  where down > (up \/ ##UVDVRatio:int##) and (down + up) > ##MinVotes:int##\n  group by p.ParentId\n) as ContQ\njoin posts p on ContQ.ParentId = p.Id\nwhere ContQ.ContACnt > (p.AnswerCount \/ 2) and p.AnswerCount > 1\norder by Score desc","CreationDate":"2016-07-05 4:02:40","validated":true,"QueryBody_Original":null},{"QuerySetId":507450,"Title":"Your own answers, sorted by oldest","Description":null,"QueryBody":"SELECT  \n  P.Title AS [Question title],\n  P.Id AS [Question id],\n  P2.Id AS [Answer id]\nFROM Posts AS P\nJOIN Posts AS P2\nON P2.ParentId = P.Id\nWHERE P2.OwnerUserId = ##UserId## AND P2.PostTypeId = 2\nORDER BY P2.CreationDate ASC","CreationDate":"2016-07-03 18:30:20","validated":true,"QueryBody_Original":"SELECT  \n  P.Title AS [Question title],\n  P.Id AS [Question id],\n  P2.Id AS [Answer id]\nFROM Posts AS P\nJOIN Posts AS P2\nON P2.ParentId = P.Id\nWHERE P2.OwnerUserId = ##UserId## AND P2.PostTypeId = 2\nORDER BY P2.CreationDate ASC"},{"QuerySetId":509895,"Title":"Count my answers about JavaScript","Description":null,"QueryBody":"SELECT  COUNT(*)\nFROM   Posts a\nJOIN   Posts q\nON     q.Id = a.ParentId\nWHERE  a.OwnerUserId = ##UserId##\nAND    a.PostTypeId = 2\nAND    (q.Tags LIKE '%<javascript>%' OR q.Tags LIKE '%<jquery>%');","CreationDate":"2016-07-10 16:37:19","validated":true,"QueryBody_Original":"SELECT  COUNT(*)\nFROM   Posts a\nJOIN   Posts q\nON     q.Id = a.ParentId\nWHERE  a.OwnerUserId = ##UserId##\nAND    a.PostTypeId = 2\nAND    (q.Tags LIKE '%<javascript>%' OR q.Tags LIKE '%<jquery>%');"},{"QuerySetId":520970,"Title":"Algerian top  stackoverflow users","Description":null,"QueryBody":"SELECT  TOP ##Count:int?500##\n        ROW_NUMBER() OVER(ORDER BY Reputation DESC) AS [#],\n        u.Id AS [User Link],\n        u.Reputation,\n        u.Age,\n        u.Location,\n        u.WebsiteUrl as Wesbite,\n        u.LastAccessDate AS LastSeen,\n        u.CreationDate   \n        \nFROM Users u\nWHERE \n        Reputation >= ##MinimalReputation:int?11## \n        AND (\n               UPPER(Location) LIKE UPPER('%tunis%')\n               OR UPPER(Location) LIKE UPPER('%\u062a\u0648\u0646\u0633%')\n               )  \n             \nORDER BY Reputation DESC","CreationDate":"2018-02-08 14:21:20","validated":true,"QueryBody_Original":null},{"QuerySetId":521232,"Title":"Graph of answer quality and number - with minimum reputation threshold","Description":null,"QueryBody":"SELECT  \n   *,\n   count(*)\nfrom (\n  SELECT \n    p.OwnerUserId as [User Link], \n    u.Reputation,\n    round(avg(cast(p.Score as real)),2) as [Avg Score], \n    count(*) as [# Questions]\n  from Posts p\n  join Users u on u.Id = p.OwnerUserId\n  where p.posttypeid = 2 and\n    p.communityowneddate is null and\n    p.closeddate is null and\n    u.Reputation > ##MinimumReputation## and\n    u.Views > ##MinimumUserProfileViewCount##\n  group by u.Reputation, p.OwnerUserId\n) as X\ngroup by [# Questions] , [Avg Score], Reputation, [User Link]\norder by [Avg Score] desc, [# Questions] desc","CreationDate":"2016-08-05 5:11:59","validated":true,"QueryBody_Original":"SELECT  \n   *,\n   count(*)\nfrom (\n  SELECT \n    p.OwnerUserId as [User Link], \n    u.Reputation,\n    round(avg(cast(p.Score as real)),2) as [Avg Score], \n    count(*) as [# Questions]\n  from Posts p\n  join Users u on u.Id = p.OwnerUserId\n  where p.posttypeid = 2 and\n    p.communityowneddate is null and\n    p.closeddate is null and\n    u.Reputation > ##MinimumReputation## and\n    u.Views > ##MinimumUserProfileViewCount##\n  group by u.Reputation, p.OwnerUserId\n) as X\ngroup by [# Questions] , [Avg Score], Reputation, [User Link]\norder by [Avg Score] desc, [# Questions] desc"},{"QuerySetId":522366,"Title":"How high would my reputation approximately be if there was no cap?","Description":null,"QueryBody":"DECLARE  @UserId int = ##UserId##\n\nSELECT \n    SUM(CASE\n      WHEN VoteTypeId = 1 THEN 15 -- Accepted answer.\n      WHEN VoteTypeId = 2 AND PostTypeId = 1 THEN 5 -- Upvoted question\n      WHEN VoteTypeId = 2 AND PostTypeId = 2 THEN 10 -- Upvoted answer.\n      WHEN VoteTypeId = 3 THEN -2 -- Downvote.\n      WHEN VoteTypeId = 9 THEN BountyAmount -- Earned Bounty\nEND) AS UncappedReputation\nFROM\n    Votes\n  INNER JOIN \n    Posts ON Posts.Id = Votes.PostId\nWHERE\n    Posts.OwnerUserId = @UserId","CreationDate":"2016-08-09 4:49:17","validated":true,"QueryBody_Original":"DECLARE  @UserId int = ##UserId##\n\nSELECT \n    SUM(CASE\n      WHEN VoteTypeId = 1 THEN 15 -- Accepted answer.\n      WHEN VoteTypeId = 2 AND PostTypeId = 1 THEN 5 -- Upvoted question\n      WHEN VoteTypeId = 2 AND PostTypeId = 2 THEN 10 -- Upvoted answer.\n      WHEN VoteTypeId = 3 THEN -2 -- Downvote.\n      WHEN VoteTypeId = 9 THEN BountyAmount -- Earned Bounty\nEND) AS UncappedReputation\nFROM\n    Votes\n  INNER JOIN \n    Posts ON Posts.Id = Votes.PostId\nWHERE\n    Posts.OwnerUserId = @UserId"},{"QuerySetId":522726,"Title":"All posts with two tags","Description":null,"QueryBody":"WITH  \n  Posts_WITH_Tag1 AS\n  ( SELECT posts.title as title, posts.tags as tags, p.PostId as PostId, (1.*(COUNT(*) OVER (PARTITION BY 1))) as cnt\n       FROM PostTags p\n       JOIN Tags t ON t.Id = p.TagId\n       JOIN Posts posts ON posts.Id = p.PostId \n      WHERE t.TagName = ##FirstTag:string##\n   ),\n   \n  Posts_WITH_Tag2 AS\n  ( SELECT p.PostId as PostId, (1.*(COUNT(*) OVER (PARTITION BY 1))) as cnt\n      FROM PostTags p\n        JOIN Tags t ON t.Id = p.TagId\n      WHERE t.TagName = ##SecondTag:string##\n   ),\n   \n   Posts_WITH_Both AS\n   ( select p1.title as title, p1.tags as tags, p1.PostID as PostID, (1.*(COUNT(*) OVER (PARTITION BY 1))) as cnt\n     from Posts_WITH_Tag1 p1\n       Inner join Posts_WITH_Tag2 p2 ON p1.PostID=p2.PostID\n   )\n Select * from Posts_WITH_Both","CreationDate":"2016-08-10 4:06:06","validated":true,"QueryBody_Original":null},{"QuerySetId":522812,"Title":"Most downvoted post by user","Description":null,"QueryBody":"SELECT  posts.id as [Post Link], count(votes.id)\nfrom posts inner join\nvotes on votes.postid = posts.id\nwhere votetypeid = 3 and posts.owneruserid = ##User##\ngroup by posts.id\norder by count(votes.id) desc","CreationDate":"2016-08-10 5:13:25","validated":true,"QueryBody_Original":"SELECT  posts.id as [Post Link], count(votes.id)\nfrom posts inner join\nvotes on votes.postid = posts.id\nwhere votetypeid = 3 and posts.owneruserid = ##User##\ngroup by posts.id\norder by count(votes.id) desc"}]