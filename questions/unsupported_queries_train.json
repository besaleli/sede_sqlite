[
    {
        "QuerySetId": 785,
        "Title": "How many upvotes do I have for each tag?",
        "Description": "how long before I get tag badges?\n",
        "QueryBody": "DECLARE  @UserId int = ##UserId##\n\nSELECT --TOP 20 \n    TagName,\n    COUNT(*) AS UpVotes,\n    COUNT(Posts.Id)\nFROM Tags\n    INNER JOIN PostTags ON PostTags.TagId = Tags.id\n    INNER JOIN Posts ON Posts.ParentId = PostTags.PostId\n    INNER JOIN Votes ON Votes.PostId = Posts.Id and VoteTypeId = 2\nWHERE \n    Posts.OwnerUserId = @UserId\nGROUP BY TagName \nORDER BY UpVotes DESC",
        "CreationDate": "2020-12-06 01:47:00",
        "validated": false,
        "QueryBody_Original": "DECLARE  @UserId int = ##UserId##\n\nSELECT --TOP 20 \n    TagName,\n    COUNT(*) AS UpVotes,\n    COUNT(Posts.Id)\nFROM Tags\n    INNER JOIN PostTags ON PostTags.TagId = Tags.id\n    INNER JOIN Posts ON Posts.ParentId = PostTags.PostId\n    INNER JOIN Votes ON Votes.PostId = Posts.Id and VoteTypeId = 2\nWHERE \n    Posts.OwnerUserId = @UserId\nGROUP BY TagName \nORDER BY UpVotes DESC"
    },
    {
        "QuerySetId": 949,
        "Title": "What is my accepted answer percentage rate",
        "Description": "On avg how often are answers I give, accepted\n",
        "QueryBody": "DECLARE  @UserId int = 2270762\n\nSELECT \n  COUNT(*) as answers,\n  COUNT(q.id) as accepted,\n  CAST(Count(q.id) AS float) \/ COUNT(*) * 100 AS AcceptedPercentage\nFROM Posts a\nLEFT JOIN Posts q ON q.AcceptedAnswerId = a.Id\nWHERE a.PostTypeId = 2",
        "CreationDate": "2020-07-15 21:05:30",
        "validated": false,
        "QueryBody_Original": "DECLARE  @UserId int = 2270762\n\nSELECT \n  COUNT(*) as answers,\n  COUNT(q.id) as accepted,\n  CAST(Count(q.id) AS float) \/ COUNT(*) * 100 AS AcceptedPercentage\nFROM Posts a\nLEFT JOIN Posts q ON q.AcceptedAnswerId = a.Id\nWHERE a.PostTypeId = 2"
    },
    {
        "QuerySetId": 975,
        "Title": "Users with more than one duplicate account and a more than 1000 reputation in aggregate",
        "Description": "A list of users that have duplicate accounts on site, based on the EmailHash and lots of reputation is riding on it\n",
        "QueryBody": "WITH  more than one duplicate account and a more that 1000 reputation in aggregate\n-- A list of users that have duplicate accounts on site, based on the EmailHash and lots of reputation is riding on it\n\nSELECT \n    u1.EmailHash,\n    Count(u1.Id) AS Accounts,\n    (\n        SELECT Cast(u2.Id AS varchar) + ' (' + u2.DisplayName + ' ' + Cast(u2.reputation as varchar) + '), ' \n        FROM Users u2 \n        WHERE u2.EmailHash = u1.EmailHash order by u2.Reputation desc FOR XML PATH ('')) AS IdsAndNames\nFROM\n    Users u1\nWHERE\n    u1.EmailHash IS NOT NULL\n    and (select count(*) from Users u3 where u3.EmailHash = u1.EmailHash and Reputation > 10) > 1\nGROUP BY\n    u1.EmailHash\nHAVING\n    Count(u1.Id) > 1\nORDER BY \n    Accounts DESC",
        "CreationDate": "2019-05-23 00:03:12",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 1619,
        "Title": "New user signup rates (SuperUser)",
        "Description": null,
        "QueryBody": "WITH  graph\n\nselect [Month], \n       count(*) Users\nfrom\n(\n  select CAST(\n      cast(DATEPART(YYYY, CreationDate) as varchar) + '-' + cast(DATEPART(MM, CreationDate) as varchar) + '-01'\n    as datetime) [Month]\n     \n  from Users p\n) as X\ngroup by [Month]\norder by [Month] asc",
        "CreationDate": "2012-08-16 13:45:41",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 1919,
        "Title": "Average Answerer's Age (among the tags answered by more than 1000 users with age filled)",
        "Description": null,
        "QueryBody": "SELECT   TagName AS Tags, AVG(Age * 1.0) AS [Average Answerer's Age], COUNT(*) AS [Number of Answerers]\nFROM    (\n        SELECT  DISTINCT pa.OwnerUserId, pt.TagId\n        FROM    Users u\n        JOIN    Posts pa\n        ON      pa.OwnerUserId = U.Id\n        JOIN    Posts pq\n        ON      pq.Id = pa.ParentId\n        JOIN    PostTags pt\n        ON      pt.PostId = pq.Id\n        ) ut\nJOIN    Tags t\nON      t.Id = ut.TagId\nJOIN    Users u\nON      u.Id = ut.OwnerUserId\nWHERE   u.Age BETWEEN 10 AND 90\nGROUP BY\n        t.Id, t.TagName\nHAVING  COUNT(*) > 1000\nORDER BY\n        2 DESC*\/\n        \n        SELECT * From Users",
        "CreationDate": "2020-01-21 07:02:11",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 2357,
        "Title": "How many upvotes do I have towards tag-specialist badges?",
        "Description": null,
        "QueryBody": "DECLARE  @UserId int = ##UserId##\n\nSELECT TOP 500 \n    TagName,\n    COUNT(*) AS UpVotes \nFROM Tags\n    INNER JOIN PostTags ON PostTags.TagId = Tags.id\n    INNER JOIN Posts ON Posts.ParentId = PostTags.PostId\n    INNER JOIN Votes ON Votes.PostId = Posts.Id and VoteTypeId = 2\nWHERE \n    Posts.OwnerUserId = @UserId\n    AND Posts.CommunityOwnedDate IS NULL\nGROUP BY TagName \nORDER BY UpVotes DESC",
        "CreationDate": "2020-07-23 13:58:56",
        "validated": false,
        "QueryBody_Original": "DECLARE  @UserId int = ##UserId##\n\nSELECT TOP 500 \n    TagName,\n    COUNT(*) AS UpVotes \nFROM Tags\n    INNER JOIN PostTags ON PostTags.TagId = Tags.id\n    INNER JOIN Posts ON Posts.ParentId = PostTags.PostId\n    INNER JOIN Votes ON Votes.PostId = Posts.Id and VoteTypeId = 2\nWHERE \n    Posts.OwnerUserId = @UserId\n    AND Posts.CommunityOwnedDate IS NULL\nGROUP BY TagName \nORDER BY UpVotes DESC"
    },
    {
        "QuerySetId": 2666,
        "Title": "Most common tags with singular and plural version (s-plural)",
        "Description": "Tags which that have singular and plural version (with s-plural).\nFor example [database] and [database].\n",
        "QueryBody": "WITH  singular and plural version (s-plur\n-- Tags which that have singular and plural version (WITH s-plural).\n-- For example [database] and [database].\n\n\nselect \n\n( select count(*) AS cnts\n  from posttags pts\n  where pts.TagId = t1.id) + \n( select count(*) AS cnts\n  from posttags pts\n  where pts.TagId = t2.id)\nas [Total count],\n\nt1.TagName [Singular name],\n\n( select count(*) AS cnts\n  from posttags pts\n  where pts.TagId = t1.id) as [Singular count],\n\nt2.TagName [Plural tag],\n\n( select count(*) AS cntp\n  from posttags ptp\n  where ptp.TagId = t2.id) as [Plural count]\n\nfrom Tags t1\njoin Tags t2 on ( t1.TagName + 's' = t2.TagName)\norder by [Total count] desc",
        "CreationDate": "2010-06-08 21:51:19",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 2667,
        "Title": "Most common tags with singular and plural version (es-plural)",
        "Description": "Tags which that have singular and plural version (with es-plural).\nFor example [hash] and [hashes].\n",
        "QueryBody": "WITH  singular and plural version (es-plural)\n-- Tags which that have singular and plural version (WITH es-plural). \n-- For example [hash] and [hashes].\n\nselect \n\n( select count(*) AS cnts\n  from posttags pts\n  where pts.TagId = t1.id) + \n( select count(*) AS cnts\n  from posttags pts\n  where pts.TagId = t2.id)\nas [Total count],\n\nt1.TagName [Singular name],\n\n( select count(*) AS cnts\n  from posttags pts\n  where pts.TagId = t1.id) as [Singular count],\n\nt2.TagName [Plural tag],\n\n( select count(*) AS cntp\n  from posttags ptp\n  where ptp.TagId = t2.id) as [Plural count]\n\nfrom Tags t1\njoin Tags t2 on ( t1.TagName + 'es' = t2.TagName)\norder by [Total count] desc",
        "CreationDate": "2010-06-08 22:00:13",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 2680,
        "Title": "Users with high self-accept rates (and having > 10 answe",
        "Description": "(the extreme self-learners)\n",
        "QueryBody": "WITH  high self-accept rates (and having > 10 answe\n-- (the extreme self-learners)\n\n\nSELECT \n    TOP 100\n    Users.Id AS [User Link],\nROUND((CAST(Count(a.Id) AS float) \/ CAST((SELECT Count(*) FROM Posts p WHERE p.OwnerUserId = Users.Id AND PostTypeId = 1) AS float) * 100),2) AS SelfAnswerPercentage\nFROM\n    Posts q\n  INNER JOIN \n    Posts a ON q.AcceptedAnswerId = a.Id\n  INNER JOIN\n    Users ON Users.Id = q.OwnerUserId\nWHERE \n    q.OwnerUserId = a.OwnerUserId\nGROUP BY\n    Users.Id, DisplayName\nHAVING\n    Count(a.Id) > 10\nORDER BY\n    SelfAnswerPercentage DESC",
        "CreationDate": "2010-06-09 06:03:08",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 2735,
        "Title": "Users ranked by badge per day",
        "Description": null,
        "QueryBody": "DECLARE  @endDate date\nSELECT @endDate = max(CreationDate) from Posts\n\nSELECT TOP 100\n  *, CONVERT(float, NumBadges)\/Days as [BadgePerDay]\nFROM (\n  SELECT\n    Users.Id as [User Link],\n    COUNT(*) as [NumBadges],\n    MAX(DateDiff(Day, Users.CreationDate, @endDate)) as [Days]\n  FROM\n    Users INNER JOIN Badges\n    ON Users.Id = Badges.UserId\n  GROUP BY\n    Users.Id\n) as UsersWithBadgeCount\nWHERE\n  Days > 30\nORDER BY\n  BadgePerDay DESC",
        "CreationDate": "2010-06-09 22:34:05",
        "validated": false,
        "QueryBody_Original": "DECLARE  @endDate date\nSELECT @endDate = max(CreationDate) from Posts\n\nSELECT TOP 100\n  *, CONVERT(float, NumBadges)\/Days as [BadgePerDay]\nFROM (\n  SELECT\n    Users.Id as [User Link],\n    COUNT(*) as [NumBadges],\n    MAX(DateDiff(Day, Users.CreationDate, @endDate)) as [Days]\n  FROM\n    Users INNER JOIN Badges\n    ON Users.Id = Badges.UserId\n  GROUP BY\n    Users.Id\n) as UsersWithBadgeCount\nWHERE\n  Days > 30\nORDER BY\n  BadgePerDay DESC"
    },
    {
        "QuerySetId": 2803,
        "Title": "Users by location, with a minimum reputation",
        "Description": null,
        "QueryBody": "WITH  a minimum reputation\n\nselect\n  Id as \"User Link\",\n  Reputation,\n  WebsiteUrl as \"Website URL\",\n  Location\nfrom Users\nwhere\n  Location like '%##location##%' and\n  Reputation >= ##minimumReputation##\norder by Reputation desc",
        "CreationDate": "2020-12-09 04:38:29",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 2868,
        "Title": "How high would my reputation approximately be when there was no cap or CW?",
        "Description": null,
        "QueryBody": "DECLARE  @UserId int = ##UserId##\n\nSELECT \n    SUM(CASE\n      WHEN VoteTypeId = 1 THEN 15 -- Accepted answer.\n      WHEN VoteTypeId = 2 AND PostTypeId = 1 THEN 10 -- Upvoted question\n      WHEN VoteTypeId = 2 AND PostTypeId = 2 THEN 10 -- Upvoted answer.\n      WHEN VoteTypeId = 3 THEN -2 -- Downvote.\n      WHEN VoteTypeId = 9 THEN BountyAmount -- Earned Bounty\nEND) AS UncappedReputation\nFROM\n    Votes\n  INNER JOIN \n    Posts ON Posts.Id = Votes.PostId\nWHERE\n    Posts.OwnerUserId = @UserId",
        "CreationDate": "2020-06-19 17:33:23",
        "validated": false,
        "QueryBody_Original": "DECLARE  @UserId int = ##UserId##\n\nSELECT \n    SUM(CASE\n      WHEN VoteTypeId = 1 THEN 15 -- Accepted answer.\n      WHEN VoteTypeId = 2 AND PostTypeId = 1 THEN 10 -- Upvoted question\n      WHEN VoteTypeId = 2 AND PostTypeId = 2 THEN 10 -- Upvoted answer.\n      WHEN VoteTypeId = 3 THEN -2 -- Downvote.\n      WHEN VoteTypeId = 9 THEN BountyAmount -- Earned Bounty\nEND) AS UncappedReputation\nFROM\n    Votes\n  INNER JOIN \n    Posts ON Posts.Id = Votes.PostId\nWHERE\n    Posts.OwnerUserId = @UserId"
    },
    {
        "QuerySetId": 3335,
        "Title": "Possible editors for the 'rebol' tag",
        "Description": "Lists every user who has ever answered a question on the 'rebol' tag, along with if they have sufficient rep to edit questions\n",
        "QueryBody": "WITH  if they have sufficient rep to edit questions\n\nSELECT MAX(Users.Reputation), Users.Id AS [User Link], [Can edit] = CASE WHEN MAX(Users.Reputation) >= 2000 THEN 'yes' ELSE 'no' END FROM Posts, Users, PostTags, Tags WHERE Posts.OwnerUserId = Users.Id AND Posts.ParentId = PostTags.PostId AND PostTags.TagId = Tags.Id AND Tags.TagName = 'rebol' GROUP BY Users.Id ORDER BY MAX(Reputation) DESC;",
        "CreationDate": "2010-06-14 18:37:40",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 3499,
        "Title": "Most popular replies to my comments",
        "Description": "Shows the highest-scoring comments to include \"@yourname\". Of course, people\ncan reply to you with only part of your username, and your username can change,\nand other users can have the same name as you, so it's not 100% accurate.\n",
        "QueryBody": "WITH  only part of your username, and your username can change,\n-- and other users can have the same name as you, so it's not 100% accurate.\n\n\nSELECT TOP 100 Comments.PostId AS [Post Link], Users.DisplayName, Comments.Score, Comments.Text, Comments.CreationDate\nFROM Comments\nLEFT JOIN Users on Comments.UserID = Users.ID\nWHERE Comments.Text LIKE '%@##UserName##%'\nORDER BY Comments.score DESC",
        "CreationDate": "2010-06-15 00:36:26",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 3773,
        "Title": "My top comments (eligible for Pundit badge)",
        "Description": "Show comments with 10 or more upvotes\n",
        "QueryBody": "WITH  10 or more upvotes\n\n\nselect row_number() over(order by score asc) as rownum,\n       postid as [Post Link], score, text\nfrom comments\nwhere userid = ##userid##\norder by score desc",
        "CreationDate": "2012-01-22 15:14:13",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 3938,
        "Title": "How many upvotes do I have for each tag? (Wiki & Non-Wiki)",
        "Description": "how long before I get tag badges?\n",
        "QueryBody": "DECLARE  @UserId int = ##UserId##\n\nSELECT --TOP 20 \n    TagName, \n    SUM(CASE WHEN Posts.CommunityOwnedDate IS NULL OR Votes.CreationDate < Posts.CommunityOwnedDate \n             THEN 1 \n             ELSE 0 \n        END) AS NonWikiUpvotes, \n    COUNT(*) AS UpVotes \nFROM Tags\n    INNER JOIN PostTags ON PostTags.TagId = Tags.id\n    INNER JOIN Posts ON Posts.ParentId = PostTags.PostId\n    INNER JOIN Votes ON Votes.PostId = Posts.Id and VoteTypeId = 2\nWHERE \n    Posts.OwnerUserId = @UserId \nGROUP BY TagName \nORDER BY UpVotes DESC",
        "CreationDate": "2010-06-16 18:36:19",
        "validated": false,
        "QueryBody_Original": "DECLARE  @UserId int = ##UserId##\n\nSELECT --TOP 20 \n    TagName, \n    SUM(CASE WHEN Posts.CommunityOwnedDate IS NULL OR Votes.CreationDate < Posts.CommunityOwnedDate \n             THEN 1 \n             ELSE 0 \n        END) AS NonWikiUpvotes, \n    COUNT(*) AS UpVotes \nFROM Tags\n    INNER JOIN PostTags ON PostTags.TagId = Tags.id\n    INNER JOIN Posts ON Posts.ParentId = PostTags.PostId\n    INNER JOIN Votes ON Votes.PostId = Posts.Id and VoteTypeId = 2\nWHERE \n    Posts.OwnerUserId = @UserId \nGROUP BY TagName \nORDER BY UpVotes DESC"
    },
    {
        "QuerySetId": 4272,
        "Title": "Top n posters for a given country",
        "Description": "Gets the top n poster for a country of your choice\n",
        "QueryBody": "DECLARE  @TopCount INT = ##TopCount##\n\nSELECT\n    TOP (@TopCount) \n    Id, DisplayName, reputation, LastAccessDate, Age, Location\nFROM\n    Users\nWHERE\n    Location LIKE '##COuntry##%'\nORDER BY\n    Reputation DESC",
        "CreationDate": "2010-06-18 10:41:41",
        "validated": false,
        "QueryBody_Original": "DECLARE  @TopCount INT = ##TopCount##\n\nSELECT\n    TOP (@TopCount) \n    Id, DisplayName, reputation, LastAccessDate, Age, Location\nFROM\n    Users\nWHERE\n    Location LIKE '##COuntry##%'\nORDER BY\n    Reputation DESC"
    },
    {
        "QuerySetId": 4608,
        "Title": "Question where my answer has been accepted but some answer has better score than mine",
        "Description": "This query will return, for a user, the list of question where his answer has been accepted but some others answer has better score\n",
        "QueryBody": "SELECT  Q.id as Qid, Q.title as Qtitle, myA.id as myAid, myA.Body as myAbody, allA.id as OthersAid, allA.Body as OthersAbody\nFROM Posts myA, Posts allA, Posts Q\nWHERE Q.id=allA.ParentId AND\n  Q.AcceptedAnswerId=myA.id AND\n  myA.OwnerUserId = ##UserId## AND\n  myA.PostTypeId = 2 AND\n  allA.PostTypeId = 2 AND allA.score > myA.score",
        "CreationDate": "2010-06-20 17:23:04",
        "validated": false,
        "QueryBody_Original": "SELECT  Q.id as Qid, Q.title as Qtitle, myA.id as myAid, myA.Body as myAbody, allA.id as OthersAid, allA.Body as OthersAbody\nFROM Posts myA, Posts allA, Posts Q\nWHERE Q.id=allA.ParentId AND\n  Q.AcceptedAnswerId=myA.id AND\n  myA.OwnerUserId = ##UserId## AND\n  myA.PostTypeId = 2 AND\n  allA.PostTypeId = 2 AND allA.score > myA.score"
    },
    {
        "QuerySetId": 4850,
        "Title": "Number of users with less or equal to X rep",
        "Description": "49% of users on Stack Overflow have 1 rep. Wow!",
        "QueryBody": "DECLARE  @LessThanX float\nselect @LessThanX = count(*) from users where reputation >= ##X##\n\nDECLARE @AllUsers float\nselect @AllUsers = count(*) from users\n\nselect @LessThanX",
        "CreationDate": "2017-05-15 17:58:44",
        "validated": false,
        "QueryBody_Original": "DECLARE  @LessThanX float\nselect @LessThanX = count(*) from users where reputation >= ##X##\n\nDECLARE @AllUsers float\nselect @AllUsers = count(*) from users\n\nselect @LessThanX"
    },
    {
        "QuerySetId": 5289,
        "Title": "How many upvotes do I have for each tag (Silver and Gold)?",
        "Description": "how long before I get tag badges?\n",
        "QueryBody": "DECLARE  @UserId int = ##UserId##\n\nSELECT --TOP 20 \n    TagName,\n    400 - COUNT(*) AS 'UpVotes to Silver', \n    1000 - COUNT(*) AS 'UpVotes to Gold'\nFROM Tags\n    INNER JOIN PostTags ON PostTags.TagId = Tags.id\n    INNER JOIN Posts ON Posts.ParentId = PostTags.PostId\n    INNER JOIN Votes ON Votes.PostId = Posts.Id and VoteTypeId = 2\nWHERE \n    Posts.OwnerUserId = @UserId\nGROUP BY TagName \nORDER BY 'UpVotes to Silver'",
        "CreationDate": "2010-06-25 15:21:37",
        "validated": false,
        "QueryBody_Original": "DECLARE  @UserId int = ##UserId##\n\nSELECT --TOP 20 \n    TagName,\n    400 - COUNT(*) AS 'UpVotes to Silver', \n    1000 - COUNT(*) AS 'UpVotes to Gold'\nFROM Tags\n    INNER JOIN PostTags ON PostTags.TagId = Tags.id\n    INNER JOIN Posts ON Posts.ParentId = PostTags.PostId\n    INNER JOIN Votes ON Votes.PostId = Posts.Id and VoteTypeId = 2\nWHERE \n    Posts.OwnerUserId = @UserId\nGROUP BY TagName \nORDER BY 'UpVotes to Silver'"
    },
    {
        "QuerySetId": 5465,
        "Title": "Testing WITH CUBE (and ROLLUP)",
        "Description": "It seems even though you cannot refer to column names in normal SQL\n(simple ORDER BY references excepted -- a SQL Extension I believe)\nyou do have to consider the matching expression as a name because\nalthough ISNULL(x,y) should never be null, it clearly is in the\nsubtotal for that row.\n",
        "QueryBody": "DECLARE  @UserId int = ##UserId##\n\nSELECT\n    datepart(year,creationdate) as [Year],\n    datepart(month,creationdate) as [Date],\n    ISNULL(Score,-1) AS [Score],\n    Count(*) AS CommentCount,\n    Sum(Len(Text)) As Typed\nFROM \n    Comments\nWHERE \n    UserId = @UserId\nGROUP BY \n    datepart(year,creationdate), datepart(month,creationdate), ISNULL(Score,-1) WITH cube\nORDER BY \n    ISNULL(datepart(year,creationdate),9999), ISNULL(datepart(month,creationdate),13), ISNULL(ISNULL(Score,-1),-2) DESC, CommentCount Desc",
        "CreationDate": "2010-06-26 10:56:57",
        "validated": false,
        "QueryBody_Original": "DECLARE  @UserId int = ##UserId##\n\nSELECT\n    datepart(year,creationdate) as [Year],\n    datepart(month,creationdate) as [Date],\n    ISNULL(Score,-1) AS [Score],\n    Count(*) AS CommentCount,\n    Sum(Len(Text)) As Typed\nFROM \n    Comments\nWHERE \n    UserId = @UserId\nGROUP BY \n    datepart(year,creationdate), datepart(month,creationdate), ISNULL(Score,-1) WITH cube\nORDER BY \n    ISNULL(datepart(year,creationdate),9999), ISNULL(datepart(month,creationdate),13), ISNULL(ISNULL(Score,-1),-2) DESC, CommentCount Desc"
    },
    {
        "QuerySetId": 5473,
        "Title": "Testing CUBE (and ROLLUP) using ISO-Compliant syntax",
        "Description": "It seems even though you cannot refer to column names in normal SQL\n(simple ORDER BY references excepted -- a SQL Extension I believe)\nyou do have to consider the matching expression as a name because\nalthough ISNULL(x,y) should never be null, it clearly is in the\nsubtotal for that row. But you can also use the Grouping() expression\nand this seems to be its main reason for existing.\n",
        "QueryBody": "DECLARE  @UserId int = ##UserId##\n\nSELECT\n    datepart(year,creationdate) as [Year],\n    datepart(month,creationdate) as [Date],\n    Score AS [Score],\n    Count(*) AS CommentCount,\n    Sum(Len(Text)) As Typed,\n    Grouping(datepart(year,creationdate)),\n    Grouping(datepart(month,creationdate)),\n    Grouping(Score)\nFROM \n    Comments\nWHERE \n    UserId = @UserId\nGROUP BY \n    CUBE(datepart(year,creationdate), datepart(month,creationdate), Score)\nORDER BY \n    ISNULL(datepart(year,creationdate),9999), ISNULL(datepart(month,creationdate),13), ISNULL(Score,CASE WHEN Grouping(Score)=0 THEN -1 ELSE -2 END) DESC, CommentCount Desc",
        "CreationDate": "2010-06-26 11:39:44",
        "validated": false,
        "QueryBody_Original": "DECLARE  @UserId int = ##UserId##\n\nSELECT\n    datepart(year,creationdate) as [Year],\n    datepart(month,creationdate) as [Date],\n    Score AS [Score],\n    Count(*) AS CommentCount,\n    Sum(Len(Text)) As Typed,\n    Grouping(datepart(year,creationdate)),\n    Grouping(datepart(month,creationdate)),\n    Grouping(Score)\nFROM \n    Comments\nWHERE \n    UserId = @UserId\nGROUP BY \n    CUBE(datepart(year,creationdate), datepart(month,creationdate), Score)\nORDER BY \n    ISNULL(datepart(year,creationdate),9999), ISNULL(datepart(month,creationdate),13), ISNULL(Score,CASE WHEN Grouping(Score)=0 THEN -1 ELSE -2 END) DESC, CommentCount Desc"
    },
    {
        "QuerySetId": 5530,
        "Title": "High Score Questions Without Accepted Answer by Reputable Users",
        "Description": "Find useful questions by users who are respected in the community.\n",
        "QueryBody": "WITH out Accepted Answer by Reputable Users\n-- Find useful questions by users who are respected in the community.\n\nSELECT\n  Posts.Id AS [Post Link],\n  Posts.Score AS [Score],\n  Posts.ViewCount AS [View Count],\n  Users.Reputation AS [Asker Rep]\nFROM\n  Posts\n  INNER JOIN PostTags ON Posts.Id = PostTags.PostId\n  INNER JOIN Tags ON PostTags.TagId = Tags.id\n  INNER JOIN Users ON Users.Id = Posts.OwnerUserId\nWHERE\n  Posts.ClosedDate is NULL AND\n  Posts.CommunityOwnedDate is NULL AND\n  Posts.AcceptedAnswerId is NULL AND\n  Posts.Score >= ##MinPostScore## AND\n  Users.Reputation >= ##MinAskerRep##\nORDER BY\n  Posts.Score DESC, Posts.ViewCount DESC",
        "CreationDate": "2014-12-12 18:53:10",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 6582,
        "Title": "How many non-CW upvotes do I have for each tag?",
        "Description": "Shows the totals of non community wiki upvotes in each tag\n",
        "QueryBody": "DECLARE  @UserId int = ##UserId##\n\nSELECT --TOP 20 \n    TagName,\n    COUNT(*) AS UpVotes \nFROM Tags\n    INNER JOIN PostTags ON PostTags.TagId = Tags.id\n    INNER JOIN Posts ON Posts.ParentId = PostTags.PostId\n    INNER JOIN Votes ON Votes.PostId = Posts.Id and VoteTypeId = 2\nWHERE \n    Posts.OwnerUserId = @UserID\n    AND (Votes.CreationDate < Posts.CommunityOwnedDate \n           OR Posts.CommunityOwnedDate IS NULL)\nGROUP BY TagName \nORDER BY UpVotes DESC",
        "CreationDate": "2010-07-08 02:13:08",
        "validated": false,
        "QueryBody_Original": "DECLARE  @UserId int = ##UserId##\n\nSELECT --TOP 20 \n    TagName,\n    COUNT(*) AS UpVotes \nFROM Tags\n    INNER JOIN PostTags ON PostTags.TagId = Tags.id\n    INNER JOIN Posts ON Posts.ParentId = PostTags.PostId\n    INNER JOIN Votes ON Votes.PostId = Posts.Id and VoteTypeId = 2\nWHERE \n    Posts.OwnerUserId = @UserID\n    AND (Votes.CreationDate < Posts.CommunityOwnedDate \n           OR Posts.CommunityOwnedDate IS NULL)\nGROUP BY TagName \nORDER BY UpVotes DESC"
    },
    {
        "QuerySetId": 6803,
        "Title": "How do I Rank Compared to Other Users",
        "Description": "What is my overall rank compared to other users and which user page am I on.\n",
        "QueryBody": "DECLARE  @UserId int = ##UserId##\n\nselect (count(*) + 1) as Rank, ((count(*) \/ 35) + 1) 'User Page',\n       (select reputation from users\n        where id = @UserId) Reputation\nfrom users\nwhere reputation > (select u.reputation from users u where u.id = @UserId)",
        "CreationDate": "2010-07-09 16:30:12",
        "validated": false,
        "QueryBody_Original": "DECLARE  @UserId int = ##UserId##\n\nselect (count(*) + 1) as Rank, ((count(*) \/ 35) + 1) 'User Page',\n       (select reputation from users\n        where id = @UserId) Reputation\nfrom users\nwhere reputation > (select u.reputation from users u where u.id = @UserId)"
    },
    {
        "QuerySetId": 7074,
        "Title": "Posts with many \"thank you\" answers, ordered by views",
        "Description": "Looking at posts shorter than 200 with the text `thank` somewhere in it, ordered by views\n",
        "QueryBody": "WITH  many \"thank you\" answers, ordered by views\n-- Looking at posts shorter than 200 WITH the text `thank` somewhere in it, ordered by views\n\nselect\n   a.ParentId as [Post Link],\n   count(a.id), sum(q.ViewCount) \/ count(a.id)\nfrom posts a\ninner join posts q\non a.ParentId = q.Id\nwhere q.posttypeid = 1 and \na.posttypeid = 2 and \nlen(a.body) <= 200 and \n(a.body like '%thank%')\ngroup by a.ParentId\nhaving count(a.Id) > 1\norder by count(a.Id) desc, sum(q.ViewCount) desc",
        "CreationDate": "2010-07-13 03:57:54",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 7147,
        "Title": "Unanswered Inactive Questions for a Specific Tag",
        "Description": "Inactive questions with no answers for a specific tag (ViewCount ASC)\n",
        "QueryBody": "WITH  No Answers for a Specific Tag\n-- Inactive questions WITH no answers for a specific tag (ViewCount ASC)\n\nSELECT TOP 100 \n    Id AS [Post Link], \n    Tags,\n    ViewCount,\n    CreationDate\nFROM \n    Posts \nWHERE\n    ParentId IS NULL AND \n    AnswerCount = 0 AND\n    \n    Tags LIKE '<batch-file>'\n\nORDER BY \n    ViewCount ASC",
        "CreationDate": "2017-10-06 12:29:26",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 7172,
        "Title": "My edits - S&W and Copy Editor",
        "Description": "Approximate number of edits performed.\n",
        "QueryBody": "DECLARE  @user int = ##userid##;\nselect count(p.id) as 'Edits'\nfrom posts p\nwhere p.owneruserid != @user and\np.lasteditoruserid = @user;",
        "CreationDate": "2010-07-13 16:11:21",
        "validated": false,
        "QueryBody_Original": "DECLARE  @user int = ##userid##;\nselect count(p.id) as 'Edits'\nfrom posts p\nwhere p.owneruserid != @user and\np.lasteditoruserid = @user;"
    },
    {
        "QuerySetId": 7245,
        "Title": "Check Strunk und White process",
        "Description": "Return how far I have to go to get S&W\n",
        "QueryBody": "DECLARE  @UserId int = 3038\n\nSELECT 100 - COUNT(*) AS 'Edits To Strunk & White' FROM Posts\nWHERE PostTypeId = 1\nAND   LastEditorUserId = @UserId\nAND   OwnerUserId != @UserId",
        "CreationDate": "2019-07-20 13:05:06",
        "validated": false,
        "QueryBody_Original": "DECLARE  @UserId int = 3038\n\nSELECT 100 - COUNT(*) AS 'Edits To Strunk & White' FROM Posts\nWHERE PostTypeId = 1\nAND   LastEditorUserId = @UserId\nAND   OwnerUserId != @UserId"
    },
    {
        "QuerySetId": 7296,
        "Title": "Count Users with X Reputation or Higher",
        "Description": "This query does a simple count of all users in the database with the specified minimum reputation.\n",
        "QueryBody": "WITH  X Reputation or Higher\n-- This query does a simple count of all users in the database WITH the specified minimum reputation.\n\nSELECT Count = COUNT(*) FROM Users WHERE Reputation >= '##reputation##'",
        "CreationDate": "2010-07-14 01:14:29",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 7570,
        "Title": "Users in Location including active tags, sorted by Rep.",
        "Description": "Users in Location including active tags, sorted by Rep.\n",
        "QueryBody": "SELECT \nId AS [User Link],\nReputation,\nWebsiteUrl,\nAge,\nLastAccessDate,\nTags = (\nSELECT TOP 3\n    TagName\nFROM Tags\n    INNER JOIN PostTags ON PostTags.TagId = Tags.id\n    INNER JOIN Posts ON Posts.ParentId = PostTags.PostId\n    INNER JOIN Votes ON Votes.PostId = Posts.Id and VoteTypeId = 2\nWHERE \n    Posts.OwnerUserId = U.ID\nGROUP BY TagName \nORDER BY COUNT(*) DESC\nFOR XML PATH('')\n)\nFROM Users U WHERE Location LIKE '%' + ##Location:string## + '%'\nORDER BY Reputation DESC",
        "CreationDate": "2010-07-18 15:47:28",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 7735,
        "Title": "Users sorted by average score.",
        "Description": "Votes per answer (non-CW, with at least 100 answers to their credit)\n",
        "QueryBody": "WITH  at least 100 answers to their credit)\n\nselect u.id as [User Link], u.reputation as 'Rep', count(a.id) as 'Answers', \nsum(a.score) as 'Total Score',\ncast (sum(a.score) as float) \/ cast(count(a.id) as float) as  'Average'\nfrom posts a, users u\nwhere a.owneruserid = u.id\nand a.posttypeid = 2 \nand a.communityowneddate is null \ngroup by u.id, u.reputation\nhaving count(a.id) > 400\norder by cast (sum(a.score) as float) \/ cast(count(a.id) as float) asc",
        "CreationDate": "2013-03-07 06:12:20",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 7885,
        "Title": "A user's posts, non-paged (non-Community Wiki)",
        "Description": "A way around paging for a user's posts, questions and answers. A view count of zero means it is  an answer.\n",
        "QueryBody": "SELECT \n    p.Id as [Post Link],\n    Score as [Votes],\n    ViewCount  as [Views],\n    p.CommunityOwnedDate as [CW]\nFROM Posts p\nWHERE p.OwnerUserId = ##UserId## AND\n      p.CommunityOwnedDate is null  -- Field CommunityOwnedDate is absent for non-CW posts.\nORDER BY ViewCount DESC",
        "CreationDate": "2010-07-21 03:43:16",
        "validated": false,
        "QueryBody_Original": "SELECT \n    p.Id as [Post Link],\n    Score as [Votes],\n    ViewCount  as [Views],\n    p.CommunityOwnedDate as [CW]\nFROM Posts p\nWHERE p.OwnerUserId = ##UserId## AND\n      p.CommunityOwnedDate is null  -- Field CommunityOwnedDate is absent for non-CW posts.\nORDER BY ViewCount DESC"
    },
    {
        "QuerySetId": 7888,
        "Title": "Highest Voted Posts (non-Community Wiki)",
        "Description": "Non-CW posts with the highest number of votes. If views is zero then it is an answer.\n",
        "QueryBody": "WITH  the highest number of votes. If views is zero then it is an answer.\n\nSELECT TOP 100\n    p.Id as [Post Link],\n    Score as [Votes],\n    ViewCount  as [Views]\nFROM Posts p\nWHERE p.CommunityOwnedDate is not null  AND -- Field CommunityOwnedDate is absent for non-CW posts.\n      p.OwnerUserId = ##UserId##\nORDER BY Score DESC",
        "CreationDate": "2018-08-15 00:42:28",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 8030,
        "Title": "Strunk & White and Copy Editor Progress",
        "Description": "Counts the number of edits a user has made.",
        "QueryBody": "DECLARE  @UserId int = ##UserId##\n\nSELECT COUNT(*) FROM Posts\nWHERE\nPostTypeId = 1 AND\nLastEditorUserId = @UserId AND\nOwnerUserId != @UserId",
        "CreationDate": "2010-07-23 12:54:27",
        "validated": false,
        "QueryBody_Original": "DECLARE  @UserId int = ##UserId##\n\nSELECT COUNT(*) FROM Posts\nWHERE\nPostTypeId = 1 AND\nLastEditorUserId = @UserId AND\nOwnerUserId != @UserId"
    },
    {
        "QuerySetId": 8153,
        "Title": "Worst Case Scenario, How Long Until the Electorate Badge",
        "Description": "These data dumps do not include how many questions I\nhave voted up or down.  So Assuming that none of the votes\nI have given are for questions, how many days voting on 30 questions\nper day do I have until I get the Electorate badge.\n",
        "QueryBody": "DECLARE  @UserId int = ##UserId##\nDECLARE @voteCount int\n\nselect @voteCount = u.UpVotes + u.DownVotes\nfrom Users u\nwhere u.Id = @UserId\n\n-- using equivalent of max function given by this answer: http:\/\/stackoverflow.com\/questions\/293804\n-- this is used to determine the max days when less than 600 total votes\n-- This will give the maximum of 5 days or the amount of days to reach 600\n\nselect @voteCount as TotalVotes,\ncase\n    when @voteCount < 600 then ceiling(0.5 * ((600 - @voteCount)\/30.0 + 5) + ((600 - @voteCount)\/30.0 - 5))\n    when exists(select 1 from Badges where UserId = @UserId and Name = 'Electorate') then 0\n    else ceiling(@voteCount \/ (4 * 30.0))\nend\nas MaxDaysUntilElectorate",
        "CreationDate": "2020-07-03 12:58:04",
        "validated": false,
        "QueryBody_Original": "DECLARE  @UserId int = ##UserId##\nDECLARE @voteCount int\n\nselect @voteCount = u.UpVotes + u.DownVotes\nfrom Users u\nwhere u.Id = @UserId\n\n-- using equivalent of max function given by this answer: http:\/\/stackoverflow.com\/questions\/293804\n-- this is used to determine the max days when less than 600 total votes\n-- This will give the maximum of 5 days or the amount of days to reach 600\n\nselect @voteCount as TotalVotes,\ncase\n    when @voteCount < 600 then ceiling(0.5 * ((600 - @voteCount)\/30.0 + 5) + ((600 - @voteCount)\/30.0 - 5))\n    when exists(select 1 from Badges where UserId = @UserId and Name = 'Electorate') then 0\n    else ceiling(@voteCount \/ (4 * 30.0))\nend\nas MaxDaysUntilElectorate"
    },
    {
        "QuerySetId": 8196,
        "Title": "Questions I have answered where asker has not accepted an answer",
        "Description": "Lists all questions I have proposed an answer to, but the original question asker hasn't accepted an answer\n",
        "QueryBody": "SELECT  p.Id AS [Post Link], p.AnswerCount\nFROM Posts a, Posts p\nWHERE a.OwnerUserId = ##UserId##\nAND a.PostTypeId = 2\nAND p.AcceptedAnswerId IS NOT NULL\nAND p.Id = a.ParentId\nORDER BY p.AnswerCount DESC",
        "CreationDate": "2017-12-15 04:28:26",
        "validated": false,
        "QueryBody_Original": "SELECT  p.Id AS [Post Link], p.AnswerCount\nFROM Posts a, Posts p\nWHERE a.OwnerUserId = ##UserId##\nAND a.PostTypeId = 2\nAND p.AcceptedAnswerId IS NOT NULL\nAND p.Id = a.ParentId\nORDER BY p.AnswerCount DESC"
    },
    {
        "QuerySetId": 8201,
        "Title": "What tag wikis can I edit?",
        "Description": "List all tags you have a score of 100 for. You also need 2,000 reputation. Remember: tag wikis are located on the tag page under the info tab.\n",
        "QueryBody": "DECLARE  @UserId int = ##UserId##\n\nSELECT\n    TagName as \"You can edit the following tag wikis\"\nFROM Tags\n    INNER JOIN PostTags ON PostTags.TagId = Tags.id\n    INNER JOIN Posts ON Posts.ParentId = PostTags.PostId\n    INNER JOIN Votes ON Votes.PostId = Posts.Id and VoteTypeId = 2\nWHERE \n    Posts.OwnerUserId = @UserId\nGROUP BY TagName\nHAVING count(*) >= 10\nORDER BY TagName DESC",
        "CreationDate": "2016-03-30 01:14:16",
        "validated": false,
        "QueryBody_Original": "DECLARE  @UserId int = ##UserId##\n\nSELECT\n    TagName as \"You can edit the following tag wikis\"\nFROM Tags\n    INNER JOIN PostTags ON PostTags.TagId = Tags.id\n    INNER JOIN Posts ON Posts.ParentId = PostTags.PostId\n    INNER JOIN Votes ON Votes.PostId = Posts.Id and VoteTypeId = 2\nWHERE \n    Posts.OwnerUserId = @UserId\nGROUP BY TagName\nHAVING count(*) >= 10\nORDER BY TagName DESC"
    },
    {
        "QuerySetId": 8265,
        "Title": "What tag wikis can I edit? (Corrected to exclude CW posts)",
        "Description": "List all tags you have 100 upvotes for. (Excludes CW posts) Remember: tag wikis are located on the tag page under the info tab.\n",
        "QueryBody": "DECLARE  @UserId int = ##UserId##\n\nSELECT\n    TagName as \"You can edit the following tag wikis\"\nFROM Tags\n    INNER JOIN PostTags ON PostTags.TagId = Tags.id\n    INNER JOIN Posts ON Posts.ParentId = PostTags.PostId\n    INNER JOIN Votes ON Votes.PostId = Posts.Id and VoteTypeId = 2\nWHERE \n    Posts.OwnerUserId = @UserId AND\n    Posts.CommunityOwnedDate is null\nGROUP BY TagName\nHAVING count(*) >= 100\nORDER BY TagName DESC",
        "CreationDate": "2010-07-27 16:33:09",
        "validated": false,
        "QueryBody_Original": "DECLARE  @UserId int = ##UserId##\n\nSELECT\n    TagName as \"You can edit the following tag wikis\"\nFROM Tags\n    INNER JOIN PostTags ON PostTags.TagId = Tags.id\n    INNER JOIN Posts ON Posts.ParentId = PostTags.PostId\n    INNER JOIN Votes ON Votes.PostId = Posts.Id and VoteTypeId = 2\nWHERE \n    Posts.OwnerUserId = @UserId AND\n    Posts.CommunityOwnedDate is null\nGROUP BY TagName\nHAVING count(*) >= 100\nORDER BY TagName DESC"
    },
    {
        "QuerySetId": 8384,
        "Title": "Users Answer and Question Votes",
        "Description": "See the total up and down votes for answers and questions for a given user.",
        "QueryBody": "DECLARE  @userid int = ##UserID##\n\nselect\n (case \n  when p.posttypeid = 1 then 'Question'\n  when p.posttypeid = 2 then 'Answer'\nend) as [Post Type],\n(case\n  when v.votetypeid = 2 then 'Up Vote'\n  when v.votetypeid = 3 then 'Down Vote'\nend) as [Vote Type], \ncount(*) As Votes\nfrom votes v join posts p on v.postid = p.id\nwhere v.votetypeid in (2,3) and v.userid = @userid\ngroup by p.posttypeid, v.votetypeid",
        "CreationDate": "2013-09-07 19:21:24",
        "validated": false,
        "QueryBody_Original": "DECLARE  @userid int = ##UserID##\n\nselect\n (case \n  when p.posttypeid = 1 then 'Question'\n  when p.posttypeid = 2 then 'Answer'\nend) as [Post Type],\n(case\n  when v.votetypeid = 2 then 'Up Vote'\n  when v.votetypeid = 3 then 'Down Vote'\nend) as [Vote Type], \ncount(*) As Votes\nfrom votes v join posts p on v.postid = p.id\nwhere v.votetypeid in (2,3) and v.userid = @userid\ngroup by p.posttypeid, v.votetypeid"
    },
    {
        "QuerySetId": 8394,
        "Title": "Questions by Tag and Minimum Asker Reputation",
        "Description": "Show all questions with the specified tag where the question's asker has at least the specified reputation\n",
        "QueryBody": "WITH  the specified tag where the question's asker has at least the specified reputation\n\nSELECT Posts.Id AS [Post Link], Posts.CreationDate, Users.ID AS [User Link], Users.Reputation\nFROM Posts, Users\n\/*WHERE Posts.Id = PostTags.PostId\nAND PostTags.TagId = Tags.Id\nAND Tags.TagName = '##TagName##' *\/\nWHERE Posts.OwnerUserId = Users.Id\nAND Users.Reputation >= ##MinReputation##\nORDER BY CreationDate DESC;",
        "CreationDate": "2012-02-03 06:59:47",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 8782,
        "Title": "Users who post long answers",
        "Description": "Statistical summary of users who like to post long answers.\nFilters for users above a minimal post count.\n",
        "QueryBody": "SELECT  TOP 2000\n    Rank = Row_Number() OVER (ORDER BY avg(len(p.Body)) DESC),\n    UserId = p.OwnerUserId,\n    Username = Min(u.DisplayName),\n    Total_Posts = Count(*),\n    Average_Length_Of_Posts = avg(len(p.Body)),\n    Total_Length_Of_Posts = sum(len(p.Body)),\n    Longest_Post = max(len(p.Body)),\n    Standard_Deviation_Of_Post_Lengths = stdev(len(p.Body)),\n    Total_Rep = Min(u.Reputation),\n    Rep_Per_Character = Min(Convert(float, u.Reputation)) \/ sum(len(p.Body))\nFROM Posts p\nINNER JOIN Users u ON\n    u.Id = p.OwnerUserId\nWHERE\n    p.PostTypeId = 2 and u.Id=1094246\nGROUP BY\n    p.OwnerUserId\nHAVING\n    Count(*) >= ##MinimumPostCount##",
        "CreationDate": "2018-07-21 11:54:44",
        "validated": false,
        "QueryBody_Original": "SELECT  TOP 2000\n    Rank = Row_Number() OVER (ORDER BY avg(len(p.Body)) DESC),\n    UserId = p.OwnerUserId,\n    Username = Min(u.DisplayName),\n    Total_Posts = Count(*),\n    Average_Length_Of_Posts = avg(len(p.Body)),\n    Total_Length_Of_Posts = sum(len(p.Body)),\n    Longest_Post = max(len(p.Body)),\n    Standard_Deviation_Of_Post_Lengths = stdev(len(p.Body)),\n    Total_Rep = Min(u.Reputation),\n    Rep_Per_Character = Min(Convert(float, u.Reputation)) \/ sum(len(p.Body))\nFROM Posts p\nINNER JOIN Users u ON\n    u.Id = p.OwnerUserId\nWHERE\n    p.PostTypeId = 2 and u.Id=1094246\nGROUP BY\n    p.OwnerUserId\nHAVING\n    Count(*) >= ##MinimumPostCount##"
    },
    {
        "QuerySetId": 9300,
        "Title": "Query for Nerd Dinner Prospects!",
        "Description": "Users with certain minimum requirements!\n",
        "QueryBody": "WITH  certain minimum requirements!\n\nselect  Id as \"User Link\",  \nReputation,LastAccessDate,  WebsiteUrl as \"Website URL\", \nAge ,  Location,  \nAboutMe as \"About me\"\nfrom Users\nwhere  Location \nlike '%##location##%' \nand  Reputation >= ##minimumReputation##\nand Age <= ##age##\norder by LastAccessDate desc",
        "CreationDate": "2010-08-12 23:45:01",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 9320,
        "Title": "Find Stack Overflow Users In Your City (with user-links)",
        "Description": "A simply query to find users in your city or country. Added user links to the original version.\n",
        "QueryBody": "WITH  user-links)\n-- A simply query to find users in your city or country. Added user links.\n\nselect Id [User Link], Reputation, DisplayName, Location\nfrom Users\nwhere Location like '%##Location##%' \norder by Reputation desc",
        "CreationDate": "2020-11-29 23:44:33",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 9412,
        "Title": "Users with '.com' in their display name",
        "Description": null,
        "QueryBody": "WITH  '.com' in their display name\n\nSELECT Id AS [User Link] FROM Users WHERE DisplayName LIKE '%.com'",
        "CreationDate": "2020-07-18 22:23:00",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 9900,
        "Title": "Distribution of scores on my answers",
        "Description": "Shows how often a user's answers get a specific score. Related to http:\/\/odata.stackexchange.com\/stackoverflow\/q\/1930\n",
        "QueryBody": "DECLARE  @totalAnswers DECIMAL\nSELECT @totalAnswers = COUNT(*) FROM posts WHERE posttypeid = 2 AND owneruserid = ##UserId## AND creationdate > ##postStart:string?2020-01-01## AND DeletionDate is null\n\nSELECT score AS AnswerScore, Occurences,\n  CASE WHEN Frequency < 1 THEN '<1%' ELSE Cast(Cast(ROUND(Frequency, 0) AS INT) AS VARCHAR) + '%' END AS Frequency\nFROM (\n  SELECT score, COUNT(*) AS Occurences, (COUNT(*) \/ @totalAnswers) * 100 AS Frequency\n  FROM posts\n  WHERE posttypeid = 2                 -- answers\n    AND owneruserid = ##UserId##       -- by you\n    AND creationdate > ##postStart:string?2020-01-01##\n    AND DeletionDate is null\n  GROUP BY score\n) AS answers\nORDER BY answers.Frequency DESC, Score",
        "CreationDate": "2020-10-11 20:40:02",
        "validated": false,
        "QueryBody_Original": "DECLARE  @totalAnswers DECIMAL\nSELECT @totalAnswers = COUNT(*) FROM posts WHERE posttypeid = 2 AND owneruserid = ##UserId## AND creationdate > ##postStart:string?2020-01-01## AND DeletionDate is null\n\nSELECT score AS AnswerScore, Occurences,\n  CASE WHEN Frequency < 1 THEN '<1%' ELSE Cast(Cast(ROUND(Frequency, 0) AS INT) AS VARCHAR) + '%' END AS Frequency\nFROM (\n  SELECT score, COUNT(*) AS Occurences, (COUNT(*) \/ @totalAnswers) * 100 AS Frequency\n  FROM posts\n  WHERE posttypeid = 2                 -- answers\n    AND owneruserid = ##UserId##       -- by you\n    AND creationdate > ##postStart:string?2020-01-01##\n    AND DeletionDate is null\n  GROUP BY score\n) AS answers\nORDER BY answers.Frequency DESC, Score"
    },
    {
        "QuerySetId": 10075,
        "Title": "How popular is tag X?",
        "Description": "List the number of questions tagged with X.\n",
        "QueryBody": "DECLARE  @Name AS varchar(100) = '##TagName##'\n\nSELECT Tags.TagName AS Name, count(*) AS Total\nFROM Tags JOIN PostTags ON PostTags.TagId = Tags.Id\nWHERE Tags.TagName = @Name\nGROUP BY Tags.TagName\nORDER BY Total DESC",
        "CreationDate": "2015-12-14 03:00:24",
        "validated": false,
        "QueryBody_Original": "DECLARE  @Name AS varchar(100) = '##TagName##'\n\nSELECT Tags.TagName AS Name, count(*) AS Total\nFROM Tags JOIN PostTags ON PostTags.TagId = Tags.Id\nWHERE Tags.TagName = @Name\nGROUP BY Tags.TagName\nORDER BY Total DESC"
    },
    {
        "QuerySetId": 10386,
        "Title": "Users With the Highest Quality Posts (filter reputation)",
        "Description": "Enter the minimum reputation that a user must have, and this will show the\nusers who have the highest reputation per post in that group.\n",
        "QueryBody": "DECLARE  @MinRep int = ##MinReputation##\nSELECT\n    Id AS [User Link],\n    Reputation,\n    (SELECT COUNT(*)\n    FROM posts\n    WHERE posts.OwnerUserId = Users.Id\n    ) AS [# Posts],\n    Reputation \/\n    (SELECT COUNT(*)\n    FROM posts\n    WHERE posts.OwnerUserId = Users.Id\n    ) AS [Rep Per Post]\nFROM Users\nWHERE Reputation > @MinRep\nORDER BY [Rep Per Post] DESC",
        "CreationDate": "2010-09-05 09:22:33",
        "validated": false,
        "QueryBody_Original": "DECLARE  @MinRep int = ##MinReputation##\nSELECT\n    Id AS [User Link],\n    Reputation,\n    (SELECT COUNT(*)\n    FROM posts\n    WHERE posts.OwnerUserId = Users.Id\n    ) AS [# Posts],\n    Reputation \/\n    (SELECT COUNT(*)\n    FROM posts\n    WHERE posts.OwnerUserId = Users.Id\n    ) AS [Rep Per Post]\nFROM Users\nWHERE Reputation > @MinRep\nORDER BY [Rep Per Post] DESC"
    },
    {
        "QuerySetId": 10437,
        "Title": "Users With the Highest Quality Posts (filter num posts)",
        "Description": "Enter the minimum number of posts that a user must have, and this will show the\nusers who have the highest reputation per post in that group.\n",
        "QueryBody": "WITH  the Highest Quality Posts (filter num posts)\n-- Enter the minimum number of posts that a user must have, and this will show the\n-- users who have the highest reputation per post in that group.\n\nSELECT\n    Id AS [User Link],\n    Reputation,\n    Reputation * 1.0 \/ C.Cnt AS [Rep Per Post]\nFROM\n   Users U\n   INNER JOIN (\n      SELECT OwnerUserId, Cnt = Count(*)\n      FROM posts\n      GROUP BY OwnerUserID\n      HAVING Count(*) >= ##MinNumberOfPosts##\n   ) C ON U.Id = C.OwnerUserId\nORDER BY [Rep Per Post] DESC",
        "CreationDate": "2010-09-06 03:31:04",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 10747,
        "Title": "How many votes do I receive per answer?",
        "Description": "On average, how many upvotes do I receive for each answer I give?\n",
        "QueryBody": "DECLARE  @UserID int = ##UserId##;\n\nWITH VotesOnPosts AS (\nSELECT v.Id AS VoteId\n, p.Id AS PostId\n, p.PostTypeId AS PostTypeId\n, p.OwnerUserId AS UserId\n, vt.Name AS VoteTypeName\nFROM Votes v\nINNER JOIN Posts p ON v.PostId = p.Id\nINNER JOIN VoteTypes vt ON v.voteTypeId = vt.Id\n)\n, Answers AS (SELECT OwnerUserId AS UserId, Id AS PostId FROM Posts WHERE PostTypeId = 2)\n, Counts AS (\nSELECT\n(SELECT COUNT(*) FROM VotesOnPosts WHERE VoteTypeName = 'UpMod' AND UserId = @UserID AND PostTypeId = 2) AS TotalUpVotes,\n(SELECT COUNT(*) FROM Answers WHERE UserId = @UserID) AS TotalAnswers\n)\nSELECT TotalUpVotes, TotalAnswers, (CAST(TotalUpVotes AS float) \/ TotalAnswers) AS VotesPerAnswer FROM Counts",
        "CreationDate": "2010-09-11 02:59:15",
        "validated": false,
        "QueryBody_Original": "DECLARE  @UserID int = ##UserId##;\n\nWITH VotesOnPosts AS (\nSELECT v.Id AS VoteId\n, p.Id AS PostId\n, p.PostTypeId AS PostTypeId\n, p.OwnerUserId AS UserId\n, vt.Name AS VoteTypeName\nFROM Votes v\nINNER JOIN Posts p ON v.PostId = p.Id\nINNER JOIN VoteTypes vt ON v.voteTypeId = vt.Id\n)\n, Answers AS (SELECT OwnerUserId AS UserId, Id AS PostId FROM Posts WHERE PostTypeId = 2)\n, Counts AS (\nSELECT\n(SELECT COUNT(*) FROM VotesOnPosts WHERE VoteTypeName = 'UpMod' AND UserId = @UserID AND PostTypeId = 2) AS TotalUpVotes,\n(SELECT COUNT(*) FROM Answers WHERE UserId = @UserID) AS TotalAnswers\n)\nSELECT TotalUpVotes, TotalAnswers, (CAST(TotalUpVotes AS float) \/ TotalAnswers) AS VotesPerAnswer FROM Counts"
    },
    {
        "QuerySetId": 11483,
        "Title": "Users with Largest difference between highest scoring answer and lowest scoring answer",
        "Description": "Enter Query Description\n",
        "QueryBody": "DECLARE  @HighScoreLimit int  = ##HighScoreLimit##\n\n\nSELECT Top 100\n Max(Score) High,\n Min(Score) Low,\n Max(Score) - MIN(Score) Delta,\n OwnerUserId [User Link]\nFROM \n posts\nGROUP BY\n OwnerUserId\nHAVING \n Max(Score) <= @HighScoreLimit \n\nORDER BY\n Delta Desc\n\n ",
        "CreationDate": "2010-09-21 01:04:40",
        "validated": false,
        "QueryBody_Original": "DECLARE  @HighScoreLimit int  = ##HighScoreLimit##\n\n\nSELECT Top 100\n Max(Score) High,\n Min(Score) Low,\n Max(Score) - MIN(Score) Delta,\n OwnerUserId [User Link]\nFROM \n posts\nGROUP BY\n OwnerUserId\nHAVING \n Max(Score) <= @HighScoreLimit \n\nORDER BY\n Delta Desc\n\n "
    },
    {
        "QuerySetId": 11730,
        "Title": "Questions that don't have any required tags (Meta sites only)",
        "Description": "Finds all questions without one of: [support], [discussion], [feature-request], [bug].\n",
        "QueryBody": "WITH out one of: [support], [discussion], [feature-request], [bug].\n\nWITH RequiredTagIds AS\n(\n    SELECT Id\n        FROM Tags\n        WHERE TagName IN ('support', 'discussion', 'feature-request', 'bug')\n)\nSELECT\n    p.Id AS [Post Link],\n    p.ClosedDate\n    FROM Posts p\n    WHERE\n        (p.PostTypeId = 1) AND\n        NOT EXISTS\n        (\n            SELECT * FROM PostTags pt\n                WHERE\n                    (pt.PostId = p.Id) AND\n                    (pt.TagId IN (SELECT Id FROM RequiredTagIds))\n        )\n    ORDER BY p.ClosedDate DESC",
        "CreationDate": "2010-09-26 22:54:54",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 11868,
        "Title": "Number of Votes per Month",
        "Description": "The total number of votes (upvotes and downvotes) per month\n",
        "QueryBody": "SELECT    UpVotes, DownVotes\nFROM     users\n  WHERE id = ##userid##",
        "CreationDate": "2012-03-02 02:13:34",
        "validated": false,
        "QueryBody_Original": "SELECT    UpVotes, DownVotes\nFROM     users\n  WHERE id = ##userid##"
    },
    {
        "QuerySetId": 11937,
        "Title": "Users with lots of poor-scoring answers",
        "Description": "Specify maximum answer score and minimum number of answers\n",
        "QueryBody": "DECLARE  @ScoreThreshold int = ##ScoreThreshold##\nDECLARE @AnswerThreshold int = ##AnswerThreshold##\n\nSelect OwnerUserId As [User Link],\n       (Select Count(*) From Posts p Where p.OwnerUserId=Posts.OwnerUserId And Score<=@ScoreThreshold And posttypeid=2 And communityowneddate is Null) * 100.0 \/ Count(*) As [% Below Threshold],\n       Count(*) As [Total Answers]\nFrom Posts\nWhere posttypeid=2 And communityowneddate is Null\nGroup By owneruserid\nHaving Count(*) > @AnswerThreshold\nOrder By [% Below Threshold] Desc",
        "CreationDate": "2010-10-01 02:46:24",
        "validated": false,
        "QueryBody_Original": "DECLARE  @ScoreThreshold int = ##ScoreThreshold##\nDECLARE @AnswerThreshold int = ##AnswerThreshold##\n\nSelect OwnerUserId As [User Link],\n       (Select Count(*) From Posts p Where p.OwnerUserId=Posts.OwnerUserId And Score<=@ScoreThreshold And posttypeid=2 And communityowneddate is Null) * 100.0 \/ Count(*) As [% Below Threshold],\n       Count(*) As [Total Answers]\nFrom Posts\nWhere posttypeid=2 And communityowneddate is Null\nGroup By owneruserid\nHaving Count(*) > @AnswerThreshold\nOrder By [% Below Threshold] Desc"
    },
    {
        "QuerySetId": 12006,
        "Title": "Whats the age demographic per tag?",
        "Description": "I tried to make this accept the tag as a\nparameter but I kepy getting an error.\n",
        "QueryBody": "DECLARE  @TagParam varchar = ##TagParam##\n\n\nSELECT \n    TagName,    \n    count(TagName) as TagsPerAge,  \n    Age    \nFROM Tags\n    INNER JOIN PostTags ON PostTags.TagId = Tags.id\n    INNER JOIN Posts ON Posts.ParentId = PostTags.PostId\n    INNER JOIN Users ON Users.id = Posts.OwnerUserId \nWHERE TagName = 'php' AND age > 0\nGROUP BY Age, TagName\nORDER BY TagsPerAge DESC",
        "CreationDate": "2010-10-02 00:57:20",
        "validated": false,
        "QueryBody_Original": "DECLARE  @TagParam varchar = ##TagParam##\n\n\nSELECT \n    TagName,    \n    count(TagName) as TagsPerAge,  \n    Age    \nFROM Tags\n    INNER JOIN PostTags ON PostTags.TagId = Tags.id\n    INNER JOIN Posts ON Posts.ParentId = PostTags.PostId\n    INNER JOIN Users ON Users.id = Posts.OwnerUserId \nWHERE TagName = 'php' AND age > 0\nGROUP BY Age, TagName\nORDER BY TagsPerAge DESC"
    },
    {
        "QuerySetId": 13151,
        "Title": "Q's with no A's >= 0 after three months",
        "Description": "Finds number of questions that have no accepted answer and no answers with a score >= 0 after three months\n",
        "QueryBody": "WITH  no A's >= 0 after three months\n-- Finds number of questions that have no accepted answer and no answers WITH a score >= 0 after three months\n\nselect count(*), Min(CreationDate), Max(CreationDate), Count(Distinct OwnerUserId) from posts as q\nwhere PostTypeId=1\nAND Score < 1\nAND CreationDate < DATEADD(MONTH, -3, GETDATE())\nAND ClosedDate is null\nand AcceptedAnswerId is null\nAND NOT EXISTS (\n    select * from posts as a where PostTypeId=2 and ParentId=q.id and Score>=0\n)",
        "CreationDate": "2012-08-17 10:06:01",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 13283,
        "Title": "DEMO for Need help with a complex SQL query",
        "Description": "http:\/\/stackoverflow.com\/q\/4015915\/119477\n",
        "QueryBody": "WITH  a complex SQL query \n-- http:\/\/stackoverflow.com\/q\/4015915\/119477\n \nSELECT DISTINCT   t2.TagName Other\nfrom \ntags t\nINNER JOIN postTags pt ON t.id = pt.tagid\nINNER JOIN postTags pt2 ON pt.PostId = pt2.PostId\nINNER JOIN tags t2 on pt2.Tagid = t2.id\nwhere t.tagname = 'MySQL'",
        "CreationDate": "2010-10-25 19:58:24",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 13348,
        "Title": "Count the Number of Questions with No Answer Post",
        "Description": null,
        "QueryBody": "WITH  No Answer Post\n\nselect count(id) as \"Number of Questions WITH No Answer Post\"\nfrom Posts\nwhere AnswerCount = 0",
        "CreationDate": "2010-10-27 18:02:48",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 13932,
        "Title": "How many upvotes do I have for each tag? Non-wiki",
        "Description": "how long before I get tag badges?\n",
        "QueryBody": "DECLARE  @UserId int = ##UserId##\n\nSELECT --TOP 20 \n    TagName,\n    COUNT(*) AS UpVotes \nFROM Tags\n    INNER JOIN PostTags ON PostTags.TagId = Tags.id\n    INNER JOIN Posts ON Posts.ParentId = PostTags.PostId\n    INNER JOIN Votes ON Votes.PostId = Posts.Id and VoteTypeId = 2\nWHERE \n    Posts.OwnerUserId = @UserId\nand communityowneddate is null\nGROUP BY TagName \nORDER BY UpVotes DESC",
        "CreationDate": "2010-11-11 01:10:35",
        "validated": false,
        "QueryBody_Original": "DECLARE  @UserId int = ##UserId##\n\nSELECT --TOP 20 \n    TagName,\n    COUNT(*) AS UpVotes \nFROM Tags\n    INNER JOIN PostTags ON PostTags.TagId = Tags.id\n    INNER JOIN Posts ON Posts.ParentId = PostTags.PostId\n    INNER JOIN Votes ON Votes.PostId = Posts.Id and VoteTypeId = 2\nWHERE \n    Posts.OwnerUserId = @UserId\nand communityowneddate is null\nGROUP BY TagName \nORDER BY UpVotes DESC"
    },
    {
        "QuerySetId": 13964,
        "Title": "Average Reputation Of All Users",
        "Description": "This will tell you the average reputation of all users.\n",
        "QueryBody": "DECLARE  @MinimumReputation int = ##MinimumReputation##\n\nSELECT\n  SUM(Reputation) AS \"Total Reputation\",\n  COUNT(Id) AS \"User Count\",\n  SUM(Reputation) \/ COUNT(Id) AS \"Average Reputation\"\nFROM\n  Users\nWHERE\n  Reputation >= @MinimumReputation;",
        "CreationDate": "2010-11-11 14:47:40",
        "validated": false,
        "QueryBody_Original": "DECLARE  @MinimumReputation int = ##MinimumReputation##\n\nSELECT\n  SUM(Reputation) AS \"Total Reputation\",\n  COUNT(Id) AS \"User Count\",\n  SUM(Reputation) \/ COUNT(Id) AS \"Average Reputation\"\nFROM\n  Users\nWHERE\n  Reputation >= @MinimumReputation;"
    },
    {
        "QuerySetId": 14517,
        "Title": "Keystrokes per rep point (lower limit)",
        "Description": "Ranks users with over 1000 reputation points by how many characters they needed to type to achieve that reputation (counts title and body characters)\n",
        "QueryBody": "WITH  over 5000 reputation points by how many characters they needed to type to achieve that reputation (counts title and body characters)\n\nSelect u.Id As [User Link], \n   (sum(coalesce(datalength(p.Body),0)) + sum(coalesce(datalength(p.Title),0))) As keystrokes, \n   u.Reputation, \n   (sum(coalesce(datalength(p.Body),0)) + sum(coalesce(datalength(p.Title),0)))\/u.Reputation As rate \nFrom users u, posts p \nWhere p.OwnerUserId = u.Id And u.Reputation >= 1000 \nGroup By u.Id, u.Reputation\nOrder By rate Asc",
        "CreationDate": "2017-04-19 19:02:53",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 15490,
        "Title": "Which of my answers are unsung?",
        "Description": "Zero and non-zero accepted answers. Self-accepted answers do not count.\n",
        "QueryBody": "SELECT \na.score, q.title, q.Tags from\n    Posts q\n  inner join\n    Posts a\n  on a.Id = q.AcceptedAnswerId\nwhere\n      a.CommunityOwnedDate is null\n  and a.OwnerUserId = ##UserId##\n  and q.OwnerUserId != ##UserId##\n  and a.score =0\nand a.postTypeId = 2\n\norder by q.Tags",
        "CreationDate": "2015-08-11 14:18:49",
        "validated": false,
        "QueryBody_Original": "SELECT \na.score, q.title, q.Tags from\n    Posts q\n  inner join\n    Posts a\n  on a.Id = q.AcceptedAnswerId\nwhere\n      a.CommunityOwnedDate is null\n  and a.OwnerUserId = ##UserId##\n  and q.OwnerUserId != ##UserId##\n  and a.score =0\nand a.postTypeId = 2\n\norder by q.Tags"
    },
    {
        "QuerySetId": 16111,
        "Title": "MELS questions with answers and votes",
        "Description": null,
        "QueryBody": "WITH  answers and votes\nSELECT\n     p.id,  p.title, count(answers.id) answerCount ,  p.Score,  count(answers.id)-p.Score as subtraction\nFROM posts p\n     INNER JOIN posts answers \n    ON p.id = answers.parentId\n    INNER JOIN (SELECT\n                   postid, Count(v.id) votes \n                FROM  posts p\n                   INNER JOIN posts answers \n                   ON p.id = answers.parentId \n                   INNER JOIN votes v\n                   ON p.id = v.postID\n                WHERE\n                  p.postTypeId = '1'\n                  --- and p.OwnerUserID = 276959\n                GROUP BY postid) v \n     on v.postID = p.id\nWHERE\n    p.postTypeId = '1'\n    --- and p.OwnerUserID = 276959\nGROUP BY\n--v.votes, \np.Score ,\np.id, p.title",
        "CreationDate": "2015-09-01 15:12:17",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 16808,
        "Title": "How many comments do I have with score greater than 1 ?",
        "Description": "How many comments do I have with score greater than 1 ?\n",
        "QueryBody": "WITH  score greater than 1 ?\n-- How many comments do I have WITH score greater than 1 ?\n\nselect count(score) from comments where userid = ##UserID## and score > 1",
        "CreationDate": "2010-12-21 03:02:45",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 17304,
        "Title": "Average Answer Score by Hour",
        "Description": "Find out if time of day when you ask answer question may\naffect the number of votes you receive.\n\nResults are skewed by different parts of the world being awake\nat different times, with each region possibly posting answers of\ndifferent perceived quality.\n",
        "QueryBody": "WITH  each region possibly posting answers of\n-- different perceived quality.\n\nSELECT\n  datepart(hour,creationdate) AS hour,\n  count(*) AS answers,\n  avg(CAST(score AS float)) AS \"average answer score\"\nFROM posts\nWHERE posttypeid=2\nGROUP BY datepart(hour,creationdate)\nORDER BY hour;",
        "CreationDate": "2011-01-01 02:07:05",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 17305,
        "Title": "Average Comment Score by Hour",
        "Description": "Find out if time of day when you make a comment may\naffect the number of votes you receive.\n\nResults are skewed by different parts of the world being awake\nat different times, with each region possibly posting comments of\ndifferent perceived quality.\n",
        "QueryBody": "WITH  each region possibly posting comments of\n-- different perceived quality.\n\nSELECT\n  datepart(hour,creationdate) AS hour,\n  count(*) AS comments,\n  avg(CAST(score AS float)) AS \"average comment score\"\nFROM comments\nGROUP BY datepart(hour,creationdate)\nORDER BY hour;",
        "CreationDate": "2011-01-01 02:07:57",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 17950,
        "Title": "How many questions have I helped to close?",
        "Description": "Shows the breakdown of the close reasons you've used in successfully closed questions.\n",
        "QueryBody": "DECLARE  @userId int = ##UserId##\nDECLARE @searchUserId1 nvarchar(25) = '%\"Id\":' + CAST(@userId AS nvarchar(MAX)) + '}'\nDECLARE @searchUserId2 nvarchar(25) = '%\"Id\":' + CAST(@userId AS nvarchar(MAX)) + ',%'\n\nSELECT\n    t.Name AS 'Close Reason',\n    SUM(Count) AS Count\n    FROM\n    (\n        SELECT\n            CAST(PostHistory.Comment AS int) AS CloseReasonId,\n            1 AS Count\n            FROM PostHistory\n            WHERE\n                (PostHistoryTypeId = 10) AND\n                ((Text LIKE @searchUserId1) OR (Text LIKE @searchUserId2))\n    ) a, CloseReasonTypes as t\n    WHERE a.CloseReasonId = t.Id\n    GROUP BY a.CloseReasonId, t.Name\n    ORDER BY\n        a.CloseReasonId,\n        SUM(Count) DESC",
        "CreationDate": "2015-04-21 03:08:24",
        "validated": false,
        "QueryBody_Original": "DECLARE  @userId int = ##UserId##\nDECLARE @searchUserId1 nvarchar(25) = '%\"Id\":' + CAST(@userId AS nvarchar(MAX)) + '}'\nDECLARE @searchUserId2 nvarchar(25) = '%\"Id\":' + CAST(@userId AS nvarchar(MAX)) + ',%'\n\nSELECT\n    t.Name AS 'Close Reason',\n    SUM(Count) AS Count\n    FROM\n    (\n        SELECT\n            CAST(PostHistory.Comment AS int) AS CloseReasonId,\n            1 AS Count\n            FROM PostHistory\n            WHERE\n                (PostHistoryTypeId = 10) AND\n                ((Text LIKE @searchUserId1) OR (Text LIKE @searchUserId2))\n    ) a, CloseReasonTypes as t\n    WHERE a.CloseReasonId = t.Id\n    GROUP BY a.CloseReasonId, t.Name\n    ORDER BY\n        a.CloseReasonId,\n        SUM(Count) DESC"
    },
    {
        "QuerySetId": 18836,
        "Title": "Keystrokes per rep point, mod. for user defined rep cutoff",
        "Description": "Ranks users with over RepCutoff reputation points by how many characters they needed to type to achieve that reputation (counts title and body characters). Original by shog9.\n",
        "QueryBody": "WITH  over RepCutoff reputation points by how many characters they needed to type to achieve that reputation (counts title and body characters). Original by shog9.\n\nSelect u.Id As [User Link], \n   (sum(coalesce(datalength(p.Body),0)) + sum(coalesce(datalength(p.Title),0))) As keystrokes, \n   u.Reputation, \n   (sum(coalesce(datalength(p.Body),0)) + sum(coalesce(datalength(p.Title),0)))\/u.Reputation As rate \nFrom users u, posts p \nWhere p.OwnerUserId = u.Id And u.Reputation >=##RepCutoff## \nGroup By u.Id, u.Reputation\nOrder By rate Asc",
        "CreationDate": "2011-01-16 22:08:08",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 24616,
        "Title": "Users with highest number of combined Views",
        "Description": "Returns the Users with the highest number of total views for their questions\n",
        "QueryBody": "DECLARE  @total float\n\nSELECT @total = Sum(ViewCount) FROM Posts WHERE PostTypeId = 1\n\nSELECT \n  Users.Id AS [User Link],\n  Sum(ViewCount) AS TotalViews,\n  Count(*) AS NumberOfQuestions,\n  Sum(ViewCount)\/Count(*) AS AvgViewsPerQuestion,\n  100 * Sum(ViewCount) \/ @total AS PercentOfSite\nFROM Posts \nINNER JOIN Users ON Users.Id = Posts.OwnerUserId \nWHERE PostTypeId = 1 \nGROUP BY Users.Id \nORDER BY TotalViews DESC",
        "CreationDate": "2011-01-20 01:08:29",
        "validated": false,
        "QueryBody_Original": "DECLARE  @total float\n\nSELECT @total = Sum(ViewCount) FROM Posts WHERE PostTypeId = 1\n\nSELECT \n  Users.Id AS [User Link],\n  Sum(ViewCount) AS TotalViews,\n  Count(*) AS NumberOfQuestions,\n  Sum(ViewCount)\/Count(*) AS AvgViewsPerQuestion,\n  100 * Sum(ViewCount) \/ @total AS PercentOfSite\nFROM Posts \nINNER JOIN Users ON Users.Id = Posts.OwnerUserId \nWHERE PostTypeId = 1 \nGROUP BY Users.Id \nORDER BY TotalViews DESC"
    },
    {
        "QuerySetId": 24807,
        "Title": "Who has the most copies of one badge?",
        "Description": "Determines the ranking of who has the most of one badge, for example Nice Question.\n",
        "QueryBody": "DECLARE  @Badge nvarchar(50) = ##BadgeName:string##\n\nSELECT UserId as [User Link], Count(*) as Count FROM Badges WHERE Name=@Badge GROUP BY UserId ORDER BY Count DESC",
        "CreationDate": "2011-01-21 19:05:27",
        "validated": false,
        "QueryBody_Original": "DECLARE  @Badge nvarchar(50) = ##BadgeName:string##\n\nSELECT UserId as [User Link], Count(*) as Count FROM Badges WHERE Name=@Badge GROUP BY UserId ORDER BY Count DESC"
    },
    {
        "QuerySetId": 24862,
        "Title": "Food for my blekko unicorn",
        "Description": "Web site links of SO users with over NN rep, used to feed my blekko\nunicorn slashtag (length of 12 filters out most non-links)\n",
        "QueryBody": "DECLARE  @MinRep int = ##MinimumReputation##\nDECLARE @MinLinkLen int = ##MinimumLinkLength##\n\nselect\n  DisplayName as [User],\n  WebsiteUrl as [Website Link],\n  Reputation as [Reputation]\n  from Users where Reputation > @MinRep and Len(WebsiteUrl) > @MinLinkLen\n  order by Reputation desc",
        "CreationDate": "2011-01-22 05:06:10",
        "validated": false,
        "QueryBody_Original": "DECLARE  @MinRep int = ##MinimumReputation##\nDECLARE @MinLinkLen int = ##MinimumLinkLength##\n\nselect\n  DisplayName as [User],\n  WebsiteUrl as [Website Link],\n  Reputation as [Reputation]\n  from Users where Reputation > @MinRep and Len(WebsiteUrl) > @MinLinkLen\n  order by Reputation desc"
    },
    {
        "QuerySetId": 24898,
        "Title": "How much rep would I have if there were no rep cap? [FIXED]",
        "Description": "By Joel Coehoorn in this answer:  http:\/\/meta.stackoverflow.com\/questions\/42121\/is-there-a-script-tool-to-calculate-the-rep-as-if-there-were-no-cap\nEdited to use a specified User ID.\n",
        "QueryBody": "DECLARE  @UserId int = ##UserId##\n\n\nSELECT SUM(Case When VoteTypeID = 1 Then 15 WHEN VoteTypeID=2 THEN 10 WHEN VoteTypeID=3 THEN -2 ELSE 0 END) - Reputation as LostRep,\n1.0 - (Reputation * 1.0 \/ SUM(Case When VoteTypeID = 1 Then 15 WHEN VoteTypeID=2 THEN 10 WHEN VoteTypeID=3 THEN -2 ELSE 0 END)) as [LostRep%]\nFROM Votes v\nINNER JOIN Posts p ON p.ID = v.PostID INNER JOIN\nUsers ON Users.ID = p.owneruserid\nWHERE p.OwnerUserID = @UserID AND p.CommunityOwnedDate IS NULL\nGROUP BY Reputation",
        "CreationDate": "2016-07-14 08:02:59",
        "validated": false,
        "QueryBody_Original": "DECLARE  @UserId int = ##UserId##\n\n\nSELECT SUM(Case When VoteTypeID = 1 Then 15 WHEN VoteTypeID=2 THEN 10 WHEN VoteTypeID=3 THEN -2 ELSE 0 END) - Reputation as LostRep,\n1.0 - (Reputation * 1.0 \/ SUM(Case When VoteTypeID = 1 Then 15 WHEN VoteTypeID=2 THEN 10 WHEN VoteTypeID=3 THEN -2 ELSE 0 END)) as [LostRep%]\nFROM Votes v\nINNER JOIN Posts p ON p.ID = v.PostID INNER JOIN\nUsers ON Users.ID = p.owneruserid\nWHERE p.OwnerUserID = @UserID AND p.CommunityOwnedDate IS NULL\nGROUP BY Reputation"
    },
    {
        "QuerySetId": 24936,
        "Title": "Posts By User Where Parent Tags Like",
        "Description": "Posts by a user with a parent post that has a tag containing a word\n",
        "QueryBody": "DECLARE  @UserId int = ##UserId##\n\nSELECT d.id as [Post Link], a.body, b.tags, c.viewcount\nFROM posts a\nINNER JOIN posts d\nON a.parentid=d.id\nINNER JOIN posts b\nON a.parentid=b.id\nINNER JOIN posts c\nON a.parentid=c.id\nWHERE a.owneruserid=@UserID\nAND b.tags LIKE '%##TagContains##%'\nORDER BY c.viewcount DESC",
        "CreationDate": "2015-01-11 08:17:24",
        "validated": false,
        "QueryBody_Original": "DECLARE  @UserId int = ##UserId##\n\nSELECT d.id as [Post Link], a.body, b.tags, c.viewcount\nFROM posts a\nINNER JOIN posts d\nON a.parentid=d.id\nINNER JOIN posts b\nON a.parentid=b.id\nINNER JOIN posts c\nON a.parentid=c.id\nWHERE a.owneruserid=@UserID\nAND b.tags LIKE '%##TagContains##%'\nORDER BY c.viewcount DESC"
    },
    {
        "QuerySetId": 25300,
        "Title": "Inactive quetsions with score of 1 or higher",
        "Description": "This searches for questions that are inactive and have a score of 1 or higher...\n",
        "QueryBody": "WITH  score of 1 or higher\n-- This searches for questions that are inactive and have a score of 1 or higher...\n\nSELECT  \n  p.Id AS [Post Link],\n  p.LastActivityDate,\n  p.Score\n  FROM dbo.Posts p\n\n  WHERE p.Score > 3 AND p.CreationDate <= DATEADD(mm, -2, GETDATE()) AND p.AcceptedAnswerId IS NULL AND p.AnswerCount < 2 \n  AND p.ClosedDate IS NULL\n  ORDER BY p.LastActivityDate",
        "CreationDate": "2011-01-26 01:14:50",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 25349,
        "Title": "Average votes for mid-level users",
        "Description": "Calculate the average upvotes for users with 1000-10000 reputation\n",
        "QueryBody": "DECLARE  @MinReputation int = ##MinReputation?1000##\n-- MinAnswers: Minimum number of answers\nDECLARE @MinAnswers int = ##MinAnswers?100##\n\nselect Users.Id as [User Link], max(Users.Reputation) as Reputation, count(1) as Answers, avg(Score) as AnswerScore, avg(Accepted) as AcceptRate\nfrom Users, (\n  select Posts.OwnerUserId as OwnerUserId, sum(case Votes.VoteTypeId when 2 then 1.0 when 3 then -1.0 else 0 end) as Score, sum(case Votes.VoteTypeId when 1 then 1.0 else 0 end) as Accepted from Posts left join Votes\n  on\n    Posts.Id = Votes.PostId\n  where\n    Posts.PostTypeId = 2\n  group by\n    Posts.Id, Posts.OwnerUserId\n) VotesSum\nwhere\n  VotesSum.OwnerUserId = Users.Id and\n  Users.Reputation > @MinReputation\ngroup by\n  Users.Id\nhaving\n  count(1) > @MinAnswers;",
        "CreationDate": "2018-10-26 12:37:04",
        "validated": false,
        "QueryBody_Original": "DECLARE  @MinReputation int = ##MinReputation?1000##\n-- MinAnswers: Minimum number of answers\nDECLARE @MinAnswers int = ##MinAnswers?100##\n\nselect Users.Id as [User Link], max(Users.Reputation) as Reputation, count(1) as Answers, avg(Score) as AnswerScore, avg(Accepted) as AcceptRate\nfrom Users, (\n  select Posts.OwnerUserId as OwnerUserId, sum(case Votes.VoteTypeId when 2 then 1.0 when 3 then -1.0 else 0 end) as Score, sum(case Votes.VoteTypeId when 1 then 1.0 else 0 end) as Accepted from Posts left join Votes\n  on\n    Posts.Id = Votes.PostId\n  where\n    Posts.PostTypeId = 2\n  group by\n    Posts.Id, Posts.OwnerUserId\n) VotesSum\nwhere\n  VotesSum.OwnerUserId = Users.Id and\n  Users.Reputation > @MinReputation\ngroup by\n  Users.Id\nhaving\n  count(1) > @MinAnswers;"
    },
    {
        "QuerySetId": 25365,
        "Title": "Where have I commented ?",
        "Description": "Lists number of comments and score against it for each post.\n",
        "QueryBody": "SELECT  \n    postid [Post Link],\n    CreationDate [datetime]\nFROM \n    Comments\nWHERE \n    UserId = ##UserId##\nORDER BY \n    CreationDate",
        "CreationDate": "2015-04-19 16:58:27",
        "validated": false,
        "QueryBody_Original": "SELECT  \n    postid [Post Link],\n    CreationDate [datetime]\nFROM \n    Comments\nWHERE \n    UserId = ##UserId##\nORDER BY \n    CreationDate"
    },
    {
        "QuerySetId": 26337,
        "Title": "Old unloved questions possibly eligible for auto-deletion",
        "Description": "Questions with score <= 0, low views, no answers\n",
        "QueryBody": "WITH  score = 0 and no answers\n\nSELECT TOP 200\np.Id AS [Post Link], p.Tags, p.Body\nFROM Posts p join PostHistory h ON h.PostId = p.Id\nWHERE \np.PostTypeId = 1 AND \np.Score = 0 AND \nisnull(p.AnswerCount,0) = 0 AND\np.LastActivityDate < (DateAdd(d, -365, GetDate()))\nGROUP BY p.Id, p.Tags, p.Body\nhaving SUM(CASE\nWHEN h.PostHistoryTypeId = 14 OR h.PostHistoryTypeId = 10 THEN 1\nWHEN h.PostHistoryTypeId = 15 OR h.PostHistoryTypeId = 11 then -1\nELSE 0 END) <= 0\nORDER BY Len(p.Body) ASC",
        "CreationDate": "2015-04-03 08:10:38",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 26493,
        "Title": "Questions with accepted answers that have a negative score",
        "Description": null,
        "QueryBody": "WITH  accepted answers that have a negative score\n\n\nselect a.Id as [Post Link], q.Score [Question Score], a.Score [Answer Score]\nfrom Posts q\njoin Posts a on a.Id = q.AcceptedAnswerId\nwhere q.Score > 0 and a.Score < 0\norder by a.Score desc, q.Score desc",
        "CreationDate": "2019-07-30 00:39:20",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 26520,
        "Title": "Tags with a high proportion of unanswered questions",
        "Description": "with score <= 0, low views, no answers\n",
        "QueryBody": "WITH  a high proportion of unanswered questions\n-- WITH score <= 0, low views, no answers\n\nSELECT t.TagName\n, 100 * CAST( COUNT(p.id) AS FLOAT ) \/ COUNT(*) AS '% Unanswered'\n, COUNT( p.id ) AS Unanswered\n, COUNT( * ) AS Posts\nFROM Tags t\nLEFT JOIN\n     PostTags pt\nON   t.id = pt.TagId\nLEFT OUTER JOIN\n     Posts p\nON   pt.PostId = p.id\nAND p.PostTypeId = 1\nAND p.ViewCount < 500\nAND ( p.AnswerCount < 1 OR p.AnswerCount IS NULL )\nGROUP BY t.TagName\nHAVING COUNT(*) > 2000\nORDER BY 2 DESC",
        "CreationDate": "2011-02-08 05:21:32",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 26540,
        "Title": "Tags with a high proportion of zero-vote accepted answers",
        "Description": null,
        "QueryBody": "WITH  a high proportion of zero-vote accepted answers\n\nSELECT t.TagName\n, COUNT(*) AS 'Questions'\n, CAST( COUNT(a.id) AS FLOAT ) \/ COUNT(*) AS 'Zero-Vote AcceptedPercent'\nFROM Tags t\nLEFT JOIN\n     PostTags pt\nON   t.id = pt.TagId\nLEFT OUTER JOIN\n     Posts p\nON   pt.PostId = p.id\nAND  p.AcceptedAnswerId != 0\nLEFT JOIN\n     Posts a\nON   a.Id = p.AcceptedAnswerId\nAND a.Score = 0\nGROUP BY t.TagName\nHAVING COUNT(*) > 1000\nORDER BY 3 ASC",
        "CreationDate": "2011-02-08 05:35:15",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 27067,
        "Title": "Answers to Delphi Posts with Accepted Answer and Fav Count>2",
        "Description": "Enter Query Description\n",
        "QueryBody": "WITH  Accepted Answer and Fav Count>2\n-- Enter Query Description\nselect * from Posts \nwhere ParentId in\n(\nselect Id from Posts\nwhere FavoriteCount>2 and AcceptedAnswerId is not null\nand id in (select PostId from PostTags where TagId in (select Id from Tags where TagName like '%delphi%') )\n)",
        "CreationDate": "2011-02-10 20:11:47",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 27385,
        "Title": "Most active users (action every X min)",
        "Description": "Users who spend A LOT of time posting, editing, commenting and voting.\n",
        "QueryBody": "DECLARE  @dt DateTime = getdate()\n\nSELECT TOP 20 UserId AS [User Link], sum(c) as actions\nFROM (\n    SELECT UserId, count(*) AS c\n    FROM PostHistory\n    WHERE UserId > 0\n    GROUP BY UserId\n    UNION ALL\n    SELECT UserId, count(*) AS c\n    FROM Comments\n    WHERE UserId > 0\n    GROUP BY UserId\n    UNION ALL\n    SELECT UserId, count(*) AS c\n    FROM Votes\n    WHERE UserId > 0\n    GROUP BY UserId\n) a\nINNER JOIN Users on Id = UserId\nWHERE dateadd(dd,1,CreationDate) < @dt -- users have to be at least a day old\nGROUP BY UserId, CreationDate\nORDER BY actions",
        "CreationDate": "2019-04-11 09:32:00",
        "validated": false,
        "QueryBody_Original": "DECLARE  @dt DateTime = getdate()\n\nSELECT TOP 20 UserId AS [User Link], sum(c) as actions\nFROM (\n    SELECT UserId, count(*) AS c\n    FROM PostHistory\n    WHERE UserId > 0\n    GROUP BY UserId\n    UNION ALL\n    SELECT UserId, count(*) AS c\n    FROM Comments\n    WHERE UserId > 0\n    GROUP BY UserId\n    UNION ALL\n    SELECT UserId, count(*) AS c\n    FROM Votes\n    WHERE UserId > 0\n    GROUP BY UserId\n) a\nINNER JOIN Users on Id = UserId\nWHERE dateadd(dd,1,CreationDate) < @dt -- users have to be at least a day old\nGROUP BY UserId, CreationDate\nORDER BY actions"
    },
    {
        "QuerySetId": 27599,
        "Title": "What question should I accept answeres to?",
        "Description": null,
        "QueryBody": "DECLARE  @UserId int = ##UserId##\n\nDECLARE @ScoreWeight float = ##ScoreWeight##\nDECLARE @AnswerWeight float = ##AnswerWeight##\nDECLARE @ViewWeight float = ##ViewWeight##\nDECLARE @AgeWeight float = ##AgeWeight##\n\nSELECT q.Id as [Post Link], q.tags, \n       q.Score, q.AnswerCount, q.ViewCount, DATEDIFF(day, q.CreationDate, CURRENT_TIMESTAMP) as age\nFROM Posts q\nWHERE\n    q.OwnerUserId = @UserId and q.AcceptedAnswerId is null\n  AND q.PostTypeId = 1\n  AND q.Score > 0 AND q.AnswerCount > 0 and q.ViewCount > 0\nOrder by\n    (log(q.Score)*@ScoreWeight+\n     log(q.AnswerCount)*@AnswerWeight+\n     log(q.ViewCount)*@ViewWeight+\n     log(DATEDIFF(day, q.CreationDate, CURRENT_TIMESTAMP))*@AgeWeight) DESC",
        "CreationDate": "2011-02-15 21:48:52",
        "validated": false,
        "QueryBody_Original": "DECLARE  @UserId int = ##UserId##\n\nDECLARE @ScoreWeight float = ##ScoreWeight##\nDECLARE @AnswerWeight float = ##AnswerWeight##\nDECLARE @ViewWeight float = ##ViewWeight##\nDECLARE @AgeWeight float = ##AgeWeight##\n\nSELECT q.Id as [Post Link], q.tags, \n       q.Score, q.AnswerCount, q.ViewCount, DATEDIFF(day, q.CreationDate, CURRENT_TIMESTAMP) as age\nFROM Posts q\nWHERE\n    q.OwnerUserId = @UserId and q.AcceptedAnswerId is null\n  AND q.PostTypeId = 1\n  AND q.Score > 0 AND q.AnswerCount > 0 and q.ViewCount > 0\nOrder by\n    (log(q.Score)*@ScoreWeight+\n     log(q.AnswerCount)*@AnswerWeight+\n     log(q.ViewCount)*@ViewWeight+\n     log(DATEDIFF(day, q.CreationDate, CURRENT_TIMESTAMP))*@AgeWeight) DESC"
    },
    {
        "QuerySetId": 27779,
        "Title": "Users (with minimum rep) ranked by Median Post Score",
        "Description": "Under construction\n",
        "QueryBody": "WITH  minimum rep) ranked by Median Post Score\n\nSELECT\n   OwnerUserId AS [User Link],\n   AVG(Score) AS MedianScore\nFROM\n(\n   SELECT\n      OwnerUserId,\n      Score,\n      ROW_NUMBER() OVER (\n         PARTITION BY OwnerUserId\n         ORDER BY Score ASC) AS RowAsc,\n      ROW_NUMBER() OVER (\n         PARTITION BY OwnerUserId\n         ORDER BY Score DESC) AS RowDesc\n   FROM Posts\n   INNER JOIN Users ON Users.Id = OwnerUserId\n   WHERE Users.Reputation >= ##MinReputation## AND Posts.PostTypeId=2\n) x\nWHERE \n   RowAsc IN (RowDesc, RowDesc - 1, RowDesc + 1)\nGROUP BY OwnerUserId\nORDER BY MedianScore DESC",
        "CreationDate": "2011-02-17 04:42:54",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 28443,
        "Title": "How many views your questions received?",
        "Description": "Total views, views per day and score per question.\n",
        "QueryBody": "SELECT  \n  ViewCount, \n  convert(decimal(10,2), \n    convert(decimal(10,2), ViewCount) \/ \n    datediff(day, CreationDate, GETUTCDATE())) as [Views per day], \n  Score, \n  Id as [Post Link] \nFROM Posts\nWHERE PostTypeId = 1 and OwnerUserId = ##UserId##\nORDER BY ViewCount DESC",
        "CreationDate": "2011-02-23 23:13:26",
        "validated": false,
        "QueryBody_Original": "SELECT  \n  ViewCount, \n  convert(decimal(10,2), \n    convert(decimal(10,2), ViewCount) \/ \n    datediff(day, CreationDate, GETUTCDATE())) as [Views per day], \n  Score, \n  Id as [Post Link] \nFROM Posts\nWHERE PostTypeId = 1 and OwnerUserId = ##UserId##\nORDER BY ViewCount DESC"
    },
    {
        "QuerySetId": 28464,
        "Title": "What posts have I edited?",
        "Description": "Searches for all edits made\n",
        "QueryBody": "DECLARE  @UserId int = ##UserId##\n\nSELECT PostId AS [Post Link], *\n    FROM PostHistory\n    WHERE UserId = @UserId\n    ORDER BY PostId DESC, Id DESC",
        "CreationDate": "2011-02-24 01:20:17",
        "validated": false,
        "QueryBody_Original": "DECLARE  @UserId int = ##UserId##\n\nSELECT PostId AS [Post Link], *\n    FROM PostHistory\n    WHERE UserId = @UserId\n    ORDER BY PostId DESC, Id DESC"
    },
    {
        "QuerySetId": 28497,
        "Title": "Questions I've answerd and added to Favorites",
        "Description": "(that's how I mark answers I liked)\n",
        "QueryBody": "DECLARE  @UserId int = ##UserId##\n\nselect answer.Id as \"Post Link\"\nfrom posts answer inner join votes v on answer.ParentId = v.PostId\nwhere answer.OwnerUserId = v.UserId and answer.OwnerUserId = @UserId\norder by answer.Score desc",
        "CreationDate": "2011-02-24 11:09:10",
        "validated": false,
        "QueryBody_Original": "DECLARE  @UserId int = ##UserId##\n\nselect answer.Id as \"Post Link\"\nfrom posts answer inner join votes v on answer.ParentId = v.PostId\nwhere answer.OwnerUserId = v.UserId and answer.OwnerUserId = @UserId\norder by answer.Score desc"
    },
    {
        "QuerySetId": 28702,
        "Title": "Editor, Strunk & White, Copy Editor",
        "Description": null,
        "QueryBody": "WITH  Requirements(Description, Requirement) as\n(\n    select 'Editor'        ,   1 union all\n    select 'Strunk & White',  80 union all\n    select 'Copy Editor'   , 500\n)\nselect [User Link]   = ##UserId##,\n       [Edits]       = c.countRevisions,\n       [Badge]       = r.description,\n       [Requirement] = r.Requirement,\n       [To Go]       = (select max(ToGo) from (values\n                         (r.Requirement - countRevisions),\n                         (0)) [ ] (ToGo))\nfrom\n(\n    select count(DISTINCT ph.RevisionGUID) as countRevisions\n    from PostHistory ph\n    where ph.UserId = ##UserId##\n      and not exists (select * from Posts p       \n                      where p.OwnerUserId = ph.UserId and p.Id = ph.PostId)\n) c\ninner loop join Requirements r on 1=1\norder by r.Requirement desc",
        "CreationDate": "2014-12-10 18:36:02",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 28715,
        "Title": "Best Scoring Post Lengths For User",
        "Description": "Score per post for a specific user, grouped by post length (in increments\nof 500).\n\nEnter 1 for Questions, 2 for Answers, 1,2 for both\n",
        "QueryBody": "SELECT \n  FLOOR(LEN(Body)\/500) * 500 AS [Post Length],\n  SUM(Score) AS [Total Score],\n  COUNT(Id) AS [Num of Posts],\n  CAST(SUM(Score) AS FLOAT) \/ COUNT(Id) AS [Score Per Post]\nFROM\n  Posts\nWHERE\n  OwnerUserId = ##UserId##\n  AND PostTypeId=2\nGROUP BY\n  FLOOR(LEN(Body)\/500) * 500\nORDER BY [Post Length] DESC",
        "CreationDate": "2011-02-25 10:39:34",
        "validated": false,
        "QueryBody_Original": "SELECT \n  FLOOR(LEN(Body)\/500) * 500 AS [Post Length],\n  SUM(Score) AS [Total Score],\n  COUNT(Id) AS [Num of Posts],\n  CAST(SUM(Score) AS FLOAT) \/ COUNT(Id) AS [Score Per Post]\nFROM\n  Posts\nWHERE\n  OwnerUserId = ##UserId##\n  AND PostTypeId=2\nGROUP BY\n  FLOOR(LEN(Body)\/500) * 500\nORDER BY [Post Length] DESC"
    },
    {
        "QuerySetId": 28722,
        "Title": "My Posts By Post Length",
        "Description": "All of my posts sorted by Body length\n",
        "QueryBody": "SELECT \n  Id,\n  Id as [Post Link],\n  LEN(Body) as [Post Length],\n  Score\nFROM Posts\nWHERE\n  OwnerUserId = ##UserId##\nORDER BY\n  [Post Length] DESC",
        "CreationDate": "2011-02-25 10:44:36",
        "validated": false,
        "QueryBody_Original": "SELECT \n  Id,\n  Id as [Post Link],\n  LEN(Body) as [Post Length],\n  Score\nFROM Posts\nWHERE\n  OwnerUserId = ##UserId##\nORDER BY\n  [Post Length] DESC"
    },
    {
        "QuerySetId": 28757,
        "Title": "Newer users with higher rep",
        "Description": "List users that have been members shorter, but have higher rep than this user.\nThe last Entry will be this user, for comparison\n",
        "QueryBody": "DECLARE  @UserId int = ##UserId##\n\nSELECT \n    u.id as [User Link],\n    cast(datediff(day, u.creationDate, current_timestamp) as nvarchar) + ' Days'\n      as [Member for],\n    u.reputation as [Rep],\n    u.reputation - you.reputation as [Rep more than yours],\n    (u.reputation \/ datediff(day, u.creationDate, current_timestamp)) as [Avg rep per Day]\nFROM \n    Users u, Users you\nWHERE \n    you.Id = @UserId\nAND u.creationdate >= you.creationdate\nAND\n    u.reputation >= you.reputation\nORDER BY \n    u.creationdate DESC",
        "CreationDate": "2011-02-25 22:10:58",
        "validated": false,
        "QueryBody_Original": "DECLARE  @UserId int = ##UserId##\n\nSELECT \n    u.id as [User Link],\n    cast(datediff(day, u.creationDate, current_timestamp) as nvarchar) + ' Days'\n      as [Member for],\n    u.reputation as [Rep],\n    u.reputation - you.reputation as [Rep more than yours],\n    (u.reputation \/ datediff(day, u.creationDate, current_timestamp)) as [Avg rep per Day]\nFROM \n    Users u, Users you\nWHERE \n    you.Id = @UserId\nAND u.creationdate >= you.creationdate\nAND\n    u.reputation >= you.reputation\nORDER BY \n    u.creationdate DESC"
    },
    {
        "QuerySetId": 28959,
        "Title": "Breadcrumbing for Copy Editor with \"Belongs on\"",
        "Description": "Posts ripe for editing out \"belongs on\" in the answer where they should have been comments or votes to migrate instead\n",
        "QueryBody": "WITH  \"Belongs on\"\n-- Posts ripe for editing out \"belongs on\" in the answer where they should have been comments or votes to migrate instead\n\nSELECT TOP 200  p.Id AS [Post Link], p.body, LastActivityDate \nFROM posts p\nWhere  p.body LIKE '%belongs on %'\nand PostTypeId='2'\nOrder By p.LastActivityDate desc",
        "CreationDate": "2011-02-28 09:32:12",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 29151,
        "Title": "Everyone's favourite questions for a tag",
        "Description": "Non community wiki questions on a particular tag\n",
        "QueryBody": "SELECT  FavoriteCount, Posts.Id, Title, 'http:\/\/stackoverflow.com\/questions\/' + cast(Posts.Id as varchar) + '\/' as Link\nFROM Posts\nJOIN PostTags ON Posts.Id = PostTags.PostId\nJOIN Tags ON PostTags.TagId = Tags.Id\nWHERE Posts.PostTypeId = 1\nand Tags.TagName = ##Tag:string##\nand CommunityOwnedDate is null\nand FavoriteCount >= ##MinFavCount:int##\norder by FavoriteCount desc",
        "CreationDate": "2011-03-04 10:29:06",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 29540,
        "Title": "N most recent answers tagged X from user Y",
        "Description": "Show the N most recent answers tagged X from user Y. See also http:\/\/data.stackexchange.com\/stackoverflow\/s\/1071\n[Note: The site's own search facility can do most of this, and probably better; details: http:\/\/stackoverflow.com\/search]",
        "QueryBody": "DECLARE  @tagid int\n\nSELECT @tagid = Id FROM Tags WHERE TagName = ##JustOneTag:string##\n\nSELECT TOP ##Limit##\n    p.Tags as [T],\n    p.Id as [Post Link],\n    p.CreationDate as [Answer Date]\nFROM\n    Posts p\nINNER JOIN\n    PostTags pt ON p.ParentId = pt.PostId AND pt.TagId = @tagid\nWHERE\n    p.PostTypeId = 2 -- 2 = Answer\nORDER BY\n    p.CreationDate DESC",
        "CreationDate": "2019-06-14 02:00:07",
        "validated": false,
        "QueryBody_Original": "DECLARE  @tagid int\n\nSELECT @tagid = Id FROM Tags WHERE TagName = ##JustOneTag:string##\n\nSELECT TOP ##Limit##\n    p.Tags as [T],\n    p.Id as [Post Link],\n    p.CreationDate as [Answer Date]\nFROM\n    Posts p\nINNER JOIN\n    PostTags pt ON p.ParentId = pt.PostId AND pt.TagId = @tagid\nWHERE\n    p.PostTypeId = 2 -- 2 = Answer\nORDER BY\n    p.CreationDate DESC"
    },
    {
        "QuerySetId": 29798,
        "Title": "Top 10 users without downvotes",
        "Description": "Top 10 users with more than 101 rep, at least 1 upvote and no downvotes.",
        "QueryBody": "WITH  no downvotes\n-- These users didn't downvote any posts. EVER.\n\nSELECT TOP 10 Id, Reputation, DisplayName, UpVotes  FROM USERS WHERE Reputation > 101 AND UpVotes > 0 AND DownVotes = 0 ORDER BY UpVotes DESC;",
        "CreationDate": "2011-03-13 16:33:26",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 29940,
        "Title": "Find users under a certain age",
        "Description": "Used for finding users who may violate the SE policy on users under 13\n",
        "QueryBody": "SELECT \n  Id as [User Link],\n  DisplayName as Name,\n  Age\nfrom\n  Users\nwhere\n  -- Usually you would use 13\n  Age < ##Age##\norder by Age asc",
        "CreationDate": "2011-03-15 22:50:10",
        "validated": false,
        "QueryBody_Original": "SELECT \n  Id as [User Link],\n  DisplayName as Name,\n  Age\nfrom\n  Users\nwhere\n  -- Usually you would use 13\n  Age < ##Age##\norder by Age asc"
    },
    {
        "QuerySetId": 30732,
        "Title": "Low Voted Answers by Users with high reputation",
        "Description": "Shows the stockpiles of low-voted answers that high-rep users have\n",
        "QueryBody": "WITH  high reputation\n-- Shows the stockpiles of low-voted answers that high-rep users have\n\nWITH TopUsers AS (\n  SELECT TOP ##HowManyUsers##\n    Id,\n    Reputation\n  FROM Users\n  ORDER BY Reputation DESC\n)\n\nSELECT\n  TopUsers.Reputation,\n  [User Link] = TopUsers.Id,\n  Posts.Score,\n  COUNT(*)\nFROM\n  TopUsers\nINNER JOIN Posts on Posts.OwnerUserId = TopUsers.Id\nWHERE\n  Posts.Score ##Operator## ##Score##\nGROUP BY\n  Posts.Score, TopUsers.Id, TopUsers.Reputation\nWITH ROLLUP\nORDER BY\n  TopUsers.Reputation DESC,\n  Posts.Score DESC",
        "CreationDate": "2011-03-25 23:04:31",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 31069,
        "Title": "Up\/down votes for my answers",
        "Description": "Up\/down vote count for my answers\n",
        "QueryBody": "SELECT \n    SUM(CASE WHEN votes.votetypeid = 2 THEN 1 ELSE 0 END) AS UpVotes,\n    SUM(CASE WHEN votes.votetypeid = 3 THEN 1 ELSE 0 END) AS DownVotes,\n    SUM(CASE WHEN votes.votetypeid IN (2, 3) THEN 1 ELSE 0 END) AS TotalVotes\nFROM votes\nINNER JOIN posts ON votes.postid = posts.id\nWHERE\n    posts.posttypeid = 2 AND\n    posts.owneruserid = ##UserId##",
        "CreationDate": "2014-10-17 15:59:02",
        "validated": false,
        "QueryBody_Original": "SELECT \n    SUM(CASE WHEN votes.votetypeid = 2 THEN 1 ELSE 0 END) AS UpVotes,\n    SUM(CASE WHEN votes.votetypeid = 3 THEN 1 ELSE 0 END) AS DownVotes,\n    SUM(CASE WHEN votes.votetypeid IN (2, 3) THEN 1 ELSE 0 END) AS TotalVotes\nFROM votes\nINNER JOIN posts ON votes.postid = posts.id\nWHERE\n    posts.posttypeid = 2 AND\n    posts.owneruserid = ##UserId##"
    },
    {
        "QuerySetId": 31362,
        "Title": "Show top 1000 users by accepted answer percentage",
        "Description": "Add a minimum question treshold to filter out people with very few answers\nDoesn't seem to be fully working yet\n",
        "QueryBody": "WITH  very few answers\n-- Doesn't seem to be fully working yet\n\nSELECT TOP 1000\n    a.OwnerUserId as [User Link],\n    (select Reputation from Users WHERE Id = a.OwnerUserId) as Reputation,\n    (\n         SELECT Count(*) FROM Posts \n         WHERE OwnerUserId = a.OwnerUserId AND PostTypeId = 2\n    ) as NumAnswers,\n    (CAST(Count(a.Id) AS float) \/ (SELECT Count(*) FROM Posts WHERE OwnerUserId = a.OwnerUserId AND PostTypeId = 2) * 100) AS AcceptedPercentage\nFROM\n    Posts q\n\nINNER JOIN Posts a ON q.AcceptedAnswerId = a.Id\n\nWHERE a.OwnerUserId = q.OwnerUserId\nAND a.PostTypeId = 2\n\nGROUP BY a.OwnerUserId\nHAVING\n(\n    SELECT Count(*) FROM Posts \n    WHERE OwnerUserId = a.OwnerUserId AND PostTypeId = 2\n) >= ##MinumumAnswerTreshold##\n\nORDER BY AcceptedPercentage DESC",
        "CreationDate": "2011-04-01 13:57:17",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 32286,
        "Title": "Recent questions with a score of 5 or more.",
        "Description": "List of recent questions on a site with score of 5 or more, capped at 500\n",
        "QueryBody": "WITH  a score of 5 or more.\n-- List of recent questions on a site WITH score of 5 or more, capped at 500\n\nSELECT TOP 500\n  [Post Link] = Id,\n  Score,\n  CONVERT(VARCHAR(11), CreationDate, 106) AS Date\nFROM Posts\nWHERE PostTypeId=1 AND Score>=5 AND ClosedDate IS NULL\nORDER BY CreationDate DESC",
        "CreationDate": "2011-04-11 21:21:36",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 33124,
        "Title": "List user with Deputy badge and less than 10K reputation.",
        "Description": "List user with Deputy badge with no access to moderation tools\n",
        "QueryBody": "WITH  Deputy badge and less than 10K reputation.\n-- List user WITH Deputy badge WITH no access to moderation tools\nSelect userid as [User Link]\nfrom Badges\ninner join users on users.id = Badges.userid\nwhere Name like 'Deputy'\nand reputation < 10000;",
        "CreationDate": "2011-04-20 18:01:08",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 33162,
        "Title": "Most popular comments for a user",
        "Description": "Exactly what it says on the tin. Shows the most popular comments for a given user\n",
        "QueryBody": "SELECT  TOP 20 C.PostId AS [Post Link] , C.Score, C.Text\nFROM Comments C\nWHERE C.UserId = ##UserId##\nORDER BY C.Score DESC\n ",
        "CreationDate": "2011-04-21 11:34:43",
        "validated": false,
        "QueryBody_Original": "SELECT  TOP 20 C.PostId AS [Post Link] , C.Score, C.Text\nFROM Comments C\nWHERE C.UserId = ##UserId##\nORDER BY C.Score DESC\n "
    },
    {
        "QuerySetId": 33372,
        "Title": "Search Recent Comments by User ID and Text",
        "Description": "Search for comments after a given date using a user ID and LIKE string\n",
        "QueryBody": "SELECT  PostId as [Post Link], * from Comments\nwhere UserId = ##UserId##\nand CreationDate >= ##DateAsString:string##\nand text like ##TextInLikeForm:string##",
        "CreationDate": "2011-04-25 18:07:19",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 33522,
        "Title": "Missing R tag in R related tag",
        "Description": "Find posts without R tag, but with one of closely related tag\n",
        "QueryBody": "WITH out R tag, but WITH one of closely related tag\n\nSELECT Id AS [Post Link], Tags, LastActivityDate\nFROM Posts\nWHERE\n    Posts.Id IN (\n        SELECT PostTags.PostId--, max(Tags.TagName) AS TagName\n        FROM PostTags\n        INNER JOIN Tags ON Tags.Id = PostTags.TagId\n        WHERE Tags.TagName in ('ggplot2','lattice','plyr',\n            'data.frame','sweave','lapply','sapply','r')\n        GROUP BY\n            PostTags.PostId\n        HAVING\n            count(CASE WHEN Tags.TagName='r' THEN 1 END) = 0 -- no R-tag\n            AND count(*)>0 -- but some other\n    )\n    AND LastActivityDate > '2011-03-01'\nORDER BY\n    LastActivityDate DESC\n;",
        "CreationDate": "2011-04-27 11:50:14",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 33977,
        "Title": "Search accepted answers for YOU",
        "Description": null,
        "QueryBody": "SELECT  \n    q.Id as [Post Link]\nFROM\n    Posts q\n  INNER JOIN \n    Posts a ON q.AcceptedAnswerId = a.Id\n  INNER JOIN\n    Users ON Users.Id = q.OwnerUserId\nWHERE \n    a.OwnerUserId = ##UserId## and\n    q.answercount > 1\nORDER BY\n    q.LastActivityDate DESC",
        "CreationDate": "2011-05-02 18:14:41",
        "validated": false,
        "QueryBody_Original": "SELECT  \n    q.Id as [Post Link]\nFROM\n    Posts q\n  INNER JOIN \n    Posts a ON q.AcceptedAnswerId = a.Id\n  INNER JOIN\n    Users ON Users.Id = q.OwnerUserId\nWHERE \n    a.OwnerUserId = ##UserId## and\n    q.answercount > 1\nORDER BY\n    q.LastActivityDate DESC"
    },
    {
        "QuerySetId": 34077,
        "Title": "List bounties won by tag names",
        "Description": null,
        "QueryBody": "DECLARE  @TagName1 nvarchar(25) = ##Tag1:string##\nDECLARE @TagName2 nvarchar(25) = ##Tag2:string##\nDECLARE @TagName3 nvarchar(25) = ##Tag3:string##\n\nSELECT \n  p.Id As [Post Link], \n  SUM(v.BountyAmount) As BountyWon, \n  p.Tags AS PostTags\nFROM Votes v\n  JOIN Posts p ON v.PostId = p.Id \n  JOIN PostTags pt ON pt.PostId = p.Id \n  JOIN Tags t ON t.Id = pt.TagId\nWHERE\n  (t.TagName = @TagName1 \n  OR t.TagName = @TagName2 \n  OR t.TagName = @TagName3)\n  AND v.BountyAmount > 0\nGROUP BY\n  p.Id, p.Tags\nORDER BY\n  BountyWon DESC",
        "CreationDate": "2012-11-09 16:15:30",
        "validated": false,
        "QueryBody_Original": "DECLARE  @TagName1 nvarchar(25) = ##Tag1:string##\nDECLARE @TagName2 nvarchar(25) = ##Tag2:string##\nDECLARE @TagName3 nvarchar(25) = ##Tag3:string##\n\nSELECT \n  p.Id As [Post Link], \n  SUM(v.BountyAmount) As BountyWon, \n  p.Tags AS PostTags\nFROM Votes v\n  JOIN Posts p ON v.PostId = p.Id \n  JOIN PostTags pt ON pt.PostId = p.Id \n  JOIN Tags t ON t.Id = pt.TagId\nWHERE\n  (t.TagName = @TagName1 \n  OR t.TagName = @TagName2 \n  OR t.TagName = @TagName3)\n  AND v.BountyAmount > 0\nGROUP BY\n  p.Id, p.Tags\nORDER BY\n  BountyWon DESC"
    },
    {
        "QuerySetId": 34097,
        "Title": "Bounty winning answers with low score",
        "Description": "See http:\/\/data.stackexchange.com\/stackoverflow\/qe\/375\/bounties-won\n",
        "QueryBody": "WITH  few votes\n-- See http:\/\/data.stackexchange.com\/stackoverflow\/qe\/375\/bounties-won\n\nSELECT \n  Posts.Id As [Post Link], Posts.Score, v.BountyAmount, Posts.OwnerUserId As [User Link]\nFROM \n  Votes v \n  INNER JOIN Posts ON v.PostId = Posts.Id \nWHERE\n  v.VoteTypeId=9 AND Posts.Score < 1 AND v.BountyAmount > 0\nORDER BY\n  Posts.Score ",
        "CreationDate": "2011-05-03 16:45:18",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 34515,
        "Title": "100 longest posts by user",
        "Description": null,
        "QueryBody": "SELECT  TOP 100\nId as [Post Link],\nlen(body) AS Length,\nScore,\n(Score \/ CAST(len(body) AS DECIMAL (9,2))) AS Economy\nFROM posts p\nWHERE p.OwnerUserId = ##UserId##\nORDER BY Economy asc",
        "CreationDate": "2013-10-09 03:37:50",
        "validated": false,
        "QueryBody_Original": "SELECT  TOP 100\nId as [Post Link],\nlen(body) AS Length,\nScore,\n(Score \/ CAST(len(body) AS DECIMAL (9,2))) AS Economy\nFROM posts p\nWHERE p.OwnerUserId = ##UserId##\nORDER BY Economy asc"
    },
    {
        "QuerySetId": 34887,
        "Title": "Tags that new users are asking questions in.",
        "Description": "Specify at least 2 months because 1 month doesn't show anything because of the data dump.",
        "QueryBody": "SELECT  t.TagName AS Tag, COUNT(p.OwnerUserId) AS Count\nFROM Tags t\nJOIN PostTags pt ON t.Id = pt.TagId\nJOIN Posts p     ON p.Id = pt.PostId\nJOIN Users u     ON u.Id = p.OwnerUserId\nWHERE {fn NOW()} - u.CreationDate < 30 * ##Months##\nGROUP BY t.TagName\nORDER BY Count DESC",
        "CreationDate": "2011-05-10 16:26:16",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 34888,
        "Title": "Tags that new users are answering questions in.",
        "Description": "Specify at least 2 months because 1 month doesn't show anything because of the data dump.",
        "QueryBody": "SELECT  t.TagName AS Tag, COUNT(a.OwnerUserId) AS Count\nFROM Tags t\nJOIN PostTags pt ON t.Id = pt.TagId\nJOIN Posts p     ON p.Id = pt.PostId\nJOIN Users u     ON u.Id = p.OwnerUserId\nJOIN Posts a     ON p.Id = a.ParentId\nWHERE {fn NOW()} - u.CreationDate < 30 * ##Months##\nGROUP BY t.TagName\nORDER BY Count DESC",
        "CreationDate": "2011-05-10 16:28:45",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 34895,
        "Title": "New questions that are striking up a lot of views.",
        "Description": "Specify at least 2 months because 1 month doesn't show anything because of the data dump.",
        "QueryBody": "SELECT  t.TagName AS Tag, SUM(p.ViewCount) AS Views\nFROM Tags t\nJOIN PostTags pt ON t.Id = pt.TagId\nJOIN Posts p     ON p.Id = pt.PostId\nWHERE {fn NOW()} - p.CreationDate < 30 * ##Months##\nGROUP BY t.TagName\nORDER BY Views DESC",
        "CreationDate": "2011-05-10 16:32:33",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 34975,
        "Title": "Nice Questions without Nice Answers",
        "Description": "All non-CW questions scored at least 10 with no non-CW answer that high.\n",
        "QueryBody": "WITH out Nice Answers\n-- All non-CW questions scored at least 10 WITH no non-CW answer that high.\n\nSelect\n  question.Id as [Post Link],\n  question.Score,\n  max(answer.Score) as \"Top Answer\",\n  question.AnswerCount as \"Answer Count\",\n  question.ViewCount as \"View Count\"\nfrom\n  Posts as question,\n  Posts as answer\nwhere  \n  answer.CommunityOwnedDate is null and\n  question.CommunityOwnedDate is null and\n  answer.PostTypeId=2 and\n  answer.ParentId = question.Id and\n  question.Score > 10 \ngroup by\n  question.Id,\n  question.Score,\n  question.Title,\n  question.AnswerCount,\n  question.ViewCount\nhaving max(answer.score) < 10\norder by question.score - max(answer.score) desc",
        "CreationDate": "2011-05-11 20:01:53",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 35034,
        "Title": "Lesser Questions with Good Answers",
        "Description": "All non-CW questions scored less than 25 with answers scored over that.\n",
        "QueryBody": "WITH  Good Answers\n-- All non-CW questions scored less than 25 WITH answers scored over that.\n\nSelect Top 1000\n  question.Id as [Post Link],\n  question.Score,\n  max(answer.Score) as \"Top Answer Score\",\n  question.AnswerCount as \"Answers\",\n  question.ViewCount as \"Views\"\nfrom\n  Posts as question,\n  Posts as answer\nwhere  \n  answer.CommunityOwnedDate is null and\n  question.CommunityOwnedDate is null and\n  answer.PostTypeId=2 and\n  answer.ParentId = question.Id and\n  question.Score < 25\ngroup by\n  question.Id,\n  question.Score,\n  question.Title,\n  question.AnswerCount,\n  question.ViewCount\nhaving max(answer.score) > 25\norder by max(answer.score) - question.score  desc",
        "CreationDate": "2016-10-04 23:06:13",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 35261,
        "Title": "Users who self-answered with a score of < 0",
        "Description": "possibly newbies who don't know what they are doing\n",
        "QueryBody": "WITH  a score of < 0\n-- possibly newbies who don't know what they are doing\n\nselect q.Id as [Post Link] \nfrom Posts q\njoin Users u on q.OwnerUserId = u.Id\njoin Posts a on q.Id = a.ParentId and q.OwnerUserId = a.OwnerUserId\nwhere a.Score < 0\nand q.AcceptedAnswerId != a.Id \nand u.Reputation < 15\norder by a.CreationDate DESC",
        "CreationDate": "2011-05-14 15:46:08",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 35262,
        "Title": "Users who self-answered with a score equal to zero",
        "Description": "possibly newbies who don't know what they are doing\n",
        "QueryBody": "WITH  a score of < 0\n-- possibly newbies who don't know what they are doing\n\nselect q.Id as [Post Link] \nfrom Posts q\njoin Users u on q.OwnerUserId = u.Id\njoin Posts a on q.Id = a.ParentId and q.OwnerUserId = a.OwnerUserId\nwhere a.Score = 0\nand q.AcceptedAnswerId != a.Id \nand u.Reputation < 15\norder by a.CreationDate DESC",
        "CreationDate": "2011-05-14 15:47:06",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 35295,
        "Title": "Find posts by you that contain images",
        "Description": "Looks for posts owned by the UserId that contain images by querying\nfor the string \"<img\" and an optional specific host.\n",
        "QueryBody": "SELECT  Id AS [Post Link] FROM Posts\nWHERE OwnerUserId=##UserId## AND Body LIKE '%img%http:%'",
        "CreationDate": "2017-10-02 11:14:41",
        "validated": false,
        "QueryBody_Original": "SELECT  Id AS [Post Link] FROM Posts\nWHERE OwnerUserId=##UserId## AND Body LIKE '%img%http:%'"
    },
    {
        "QuerySetId": 35596,
        "Title": "How Unsung am I? (+verdict)",
        "Description": "Zero and non-zero accepted count.\nSelf-accepted answers do not count.\nIdentifies unsung heroes visually as well.\n",
        "QueryBody": "SELECT  \n    *, \n    CASE \n        WHEN [Unscored Answers] > 10 AND [Percentage Unscored] >= 25 \n             THEN 'Unsung Hero Indeed !!' \n        ELSE 'Not just yet..' \n    END as [Is User Unsung ?]\nFROM\n(\nSELECT\n    count(a.Id) as [Accepted Answers],\n    sum(case when a.Score = 0 then 0 else 1 end) as [Scored Answers],  \n    sum(case when a.Score = 0 then 1 else 0 end) as [Unscored Answers],\n    sum(CASE WHEN a.Score = 0 then 1 else 0 end)*1000 \/ count(a.Id) \/ 10.0 as [Percentage Unscored]\nfrom\n    Posts q\n  inner join\n    Posts a\n  on a.Id = q.AcceptedAnswerId\nwhere\n      a.CommunityOwnedDate is null\n  and a.OwnerUserId = ##UserId##\n  and q.OwnerUserId != ##UserId##\n  and a.postTypeId = 2\n) as UnsungInfo",
        "CreationDate": "2011-05-19 15:34:54",
        "validated": false,
        "QueryBody_Original": "SELECT  \n    *, \n    CASE \n        WHEN [Unscored Answers] > 10 AND [Percentage Unscored] >= 25 \n             THEN 'Unsung Hero Indeed !!' \n        ELSE 'Not just yet..' \n    END as [Is User Unsung ?]\nFROM\n(\nSELECT\n    count(a.Id) as [Accepted Answers],\n    sum(case when a.Score = 0 then 0 else 1 end) as [Scored Answers],  \n    sum(case when a.Score = 0 then 1 else 0 end) as [Unscored Answers],\n    sum(CASE WHEN a.Score = 0 then 1 else 0 end)*1000 \/ count(a.Id) \/ 10.0 as [Percentage Unscored]\nfrom\n    Posts q\n  inner join\n    Posts a\n  on a.Id = q.AcceptedAnswerId\nwhere\n      a.CommunityOwnedDate is null\n  and a.OwnerUserId = ##UserId##\n  and q.OwnerUserId != ##UserId##\n  and a.postTypeId = 2\n) as UnsungInfo"
    },
    {
        "QuerySetId": 35723,
        "Title": "Count the number of Deputy with less than 10K reputation",
        "Description": "Compute how much user with deputy badge does not have access to moderation tool. Also show the average reputation of those users. Also show the average reputation of those users.\nParameter used to filter on the minimum global reputation\n",
        "QueryBody": "WITH  less than 10K reputation\n-- Compute how much user WITH deputy badge does not have access to moderation tool. Also show the average reputation of those users. Also show the average reputation of those users.\n\nSelect count(*) as Total, avg(reputation) as avergage_reputation\nfrom Badges\ninner join users on users.id = Badges.userid\nwhere Name like 'Deputy'\nand reputation < 10000\nand Reputation >= ##Rep##;",
        "CreationDate": "2011-05-20 13:27:05",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 36628,
        "Title": "Posts with titles of 3 words or less",
        "Description": "http:\/\/meta.stackoverflow.com\/questions\/93051\/view-all-questions-that-have-titles-of-3-words-or-less\n",
        "QueryBody": "WITH  titles of 3 words or less\n-- http:\/\/meta.stackoverflow.com\/questions\/93051\/view-all-questions-that-have-titles-of-3-words-or-less\n\nselect Id, \nTitle\nfrom Posts\nwhere \nPostTypeId = 1 and \nLEN(Title) - LEN(REPLACE(Title, ' ', '')) <= 2\norder by LEN(Title)",
        "CreationDate": "2011-06-03 13:55:37",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 36787,
        "Title": "Show tags with non-alphanumeric characters other than a hyphen",
        "Description": "Show all tags containing '[^-0-9a-z]'\n",
        "QueryBody": "WITH  non-alphanumeric characters other than a hyphen\n-- Show all tags containing '[^-0-9a-z]'\n\nSELECT TagName, Count FROM Tags\nWHERE TagName LIKE '%[^-0-9a-z]%'\nORDER BY Count DESC",
        "CreationDate": "2011-06-04 16:51:58",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 36802,
        "Title": "Show posts with tags with non-alphanumeric characters other than a hyphen",
        "Description": "Show posts with at least one tag containing '[^-0-9a-z]'\n",
        "QueryBody": "WITH  tags WITH non-alphanumeric characters other than a hyphen\n-- Show posts WITH at least one tag containing '[^-0-9a-z]'\n\nSELECT TOP 100\n    CASE\n        WHEN Len(Tags) >= 2 THEN\n            Replace(Replace(\n                    Substring(Tags, 2, Len(Tags) - 2),\n                    '><', ' '), '\u00e0\u00e9', ' ')\n        ELSE Tags\n    END As [Tags],\n    Count(*) As [Count]\nFROM Posts\nWHERE Tags LIKE '%[^-\u00f6\u00e9\u00e0abcdefghijklmnopqrstuvwxyz0-9]%'\nGROUP BY Tags\nORDER BY Count DESC",
        "CreationDate": "2011-06-04 17:04:50",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 36919,
        "Title": "Kill 11.04 crap questions with Fire",
        "Description": "Unanswered 11.04 questions sorted by score and time\n",
        "QueryBody": "WITH  Fire\n-- Unanswered 11.04 questions sorted by score and time\nSELECT P.Id AS [Post Link], P.CreationDate, P.Score\nFROM Posts AS P, PostTags AS PT, Tags AS T\nWHERE (T.Id = PT.TagId AND P.Id = PT.PostID)\nAND T.TagName = '11.04' AND AcceptedAnswerID IS NULL\n-- GROUP BY , P.Id, P.Score\nORDER BY P.Score ASC, P.CreationDate DESC",
        "CreationDate": "2011-06-06 00:54:31",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 38557,
        "Title": "Get all your posts and comments",
        "Description": "This displays all posts and comments on Stack Overflow for a particular user.\n",
        "QueryBody": "SELECT  CreationDate, Title, Body, PostTypeId from Posts where OwnerUserId=##User:int##) UNION (SELECT CreationDate, null, text, 1 from comments where UserId=##User:int##)",
        "CreationDate": "2014-03-03 21:01:44",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 38923,
        "Title": "Bounty amount with user count before\/after 2010-06-18",
        "Description": "Code to retrieve the count of bounties and users before\nand after any user-any bounty change.\n",
        "QueryBody": "WITH  user count before\/after 2010-06-18\n-- Code to retrieve the count of bounties and users before\n-- and after any user-any bounty change.\n\nSELECT 'Before' 'befaf',\n       COUNT(*) bounties,\n       (SELECT COUNT(*) FROM Users WHERE CreationDate <= '2010-06-18') 'Users registered'\n  FROM Votes\n WHERE CreationDate <= '2010-06-18'\n   AND BountyAmount IS NOT NULL\nUNION ALL\nSELECT 'After',\n       COUNT(*),\n       (SELECT COUNT(*) FROM Users WHERE CreationDate > '2010-06-18')\n  FROM Votes\n WHERE CreationDate > '2010-06-18'\n   AND BountyAmount IS NOT NULL\nUNION ALL\nSELECT 'Total',\n       COUNT(*),\n       (SELECT COUNT(*) FROM Users)\n  FROM Votes\n WHERE BountyAmount IS NOT NULL",
        "CreationDate": "2011-06-29 00:06:54",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 38979,
        "Title": "Closed Questions with less than 100 views and greater than -2 score.",
        "Description": null,
        "QueryBody": "WITH  less than 100 views and greater than -2 score.\n\nSELECT  \n  q.Id AS [Post Link],\n  q.ViewCount AS Views\nFROM Posts q\nWHERE\n  q.ClosedDate < '2011-06-01'\n    AND q.Score > -2\n    AND q.ViewCount < 100\nORDER BY Views ASC",
        "CreationDate": "2011-06-29 05:33:03",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 39048,
        "Title": "Questions with highest rated answers",
        "Description": "highest rated non-CW answers to non-CW questions\n",
        "QueryBody": "WITH  highest rated answers\n-- Questions WITH highest non-CW answers\nSELECT TOP 500 answer.Id as [Post Link], answer.ParentId,question.Title,answer.Score\nFROM posts AS answer, posts AS question\nWHERE answer.ParentId = question.Id\nAND question.CommunityOwnedDate IS NULL\nAND answer.CommunityOwnedDate IS NULL\nORDER BY Score DESC",
        "CreationDate": "2018-02-07 22:33:32",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 39522,
        "Title": "Badge data for a user from date to now.",
        "Description": "Get's the badges that a user has obtained from a point in time (inclusive) to now.",
        "QueryBody": "SELECT  \n    b.* \nfrom \n    Badges as b\nwhere \n    b.UserId = ##UserId## and\n    b.[Date] >= ##AsOf##\norder by\n    b.Date",
        "CreationDate": "2012-07-03 19:38:27",
        "validated": false,
        "QueryBody_Original": "SELECT  \n    b.* \nfrom \n    Badges as b\nwhere \n    b.UserId = ##UserId## and\n    b.[Date] >= ##AsOf##\norder by\n    b.Date"
    },
    {
        "QuerySetId": 39822,
        "Title": "My top 10 Posts with highest score for Comments",
        "Description": "My top 10 Posts with highest score for Comments\n",
        "QueryBody": "DECLARE  @UserId int = ##UserId##\nSELECT TOP 10 \n  a.Score, \n  a.PostId as [Post Link]  \nFROM\n  (SELECT *, row_number() over(partition BY PostId\n                               ORDER BY Score) cn\n   FROM Comments\n   WHERE UserId = @UserId )a\nWHERE cn = 1 \nORDER BY score DESC",
        "CreationDate": "2011-07-09 01:05:48",
        "validated": false,
        "QueryBody_Original": "DECLARE  @UserId int = ##UserId##\nSELECT TOP 10 \n  a.Score, \n  a.PostId as [Post Link]  \nFROM\n  (SELECT *, row_number() over(partition BY PostId\n                               ORDER BY Score) cn\n   FROM Comments\n   WHERE UserId = @UserId )a\nWHERE cn = 1 \nORDER BY score DESC"
    },
    {
        "QuerySetId": 40297,
        "Title": "Number of Android questions and answers on Stack Overflow (weekdays)",
        "Description": "Grouped by Month\n",
        "QueryBody": "SELECT  convert(varchar(8), CreationDate, 126) as Date, count(id) as Questions, sum(AnswerCount) as Answers\n    from Posts\n   where Tags like '%android%' and ((DATEPART(dw, CreationDate) + @@DATEFIRST) % 7) NOT IN (0, 1)\ngroup by convert(varchar(8), CreationDate, 126)\norder by convert(varchar(8), CreationDate, 126) desc;",
        "CreationDate": "2011-07-14 18:04:33",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 41007,
        "Title": "Answers with best score, but question has no accepted answer",
        "Description": "Find all your unappreciated answers.\n",
        "QueryBody": "WITH  best score, but question has no accepted answer\n-- Find all your unappreciated answers.\n\nSELECT a1.id as [Post Link],  \n        a1.CreationDate, a1.Score, Scores.maxScore as [Next Best], a1.lastActivityDate, a1.CommentCount\nFROM Posts a1\nINNER JOIN Posts q \n     ON q.ID = a1.ParentID\nINNER JOIN (SELECT MAX(p.Score) as maxScore,p.ParentID as ID FROM Posts p WHERE p.OwnerUserId<>##UserId## GROUP BY p.ParentId) Scores\n     ON a1.ParentID = Scores.ID\nWHERE \n    a1.OwnerUserID= ##UserId## \n    AND q.AcceptedAnswerID IS NULL\nAND Scores.maxScore < a1.Score\nORDER BY a1.lastActivityDate DESC",
        "CreationDate": "2011-07-21 02:04:59",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 42479,
        "Title": "Find a user's 30 shortest posts (both questions and answers).",
        "Description": "Obtains a user's shortest 30 posts, including both questions *and* answers.\n",
        "QueryBody": "DECLARE  @UserId int = ##UserId##;\n\nSELECT TOP 30\n       Id                                             AS [Post Link],\n       Len(Body)                                      AS [Characters],\n       Replace(Replace(Body, '<p>', ' '), '<\/p>', '') AS [Body],\n       Score                                          As [Total Score]\nFROM   Posts\nWHERE  (OwnerUserID = @UserId)\nORDER BY Len(Body) ASC",
        "CreationDate": "2011-07-29 17:09:45",
        "validated": false,
        "QueryBody_Original": "DECLARE  @UserId int = ##UserId##;\n\nSELECT TOP 30\n       Id                                             AS [Post Link],\n       Len(Body)                                      AS [Characters],\n       Replace(Replace(Body, '<p>', ' '), '<\/p>', '') AS [Body],\n       Score                                          As [Total Score]\nFROM   Posts\nWHERE  (OwnerUserID = @UserId)\nORDER BY Len(Body) ASC"
    },
    {
        "QuerySetId": 42480,
        "Title": "Find a user's 30 longest posts (both questions and answers).",
        "Description": "Obtains a user's longest 30 posts, including both questions *and* answers.\n",
        "QueryBody": "DECLARE  @UserId int = ##UserId##;\n\nSELECT TOP 30\n       Id                                             AS [Post Link],\n       Len(Body)                                      AS [Characters],\n       Replace(Replace(Body, '<p>', ' '), '<\/p>', '') AS [Body],\n       Score                                          As [Total Score]\nFROM   Posts\nWHERE  (OwnerUserID = @UserId)\nORDER BY Len(Body) DESC",
        "CreationDate": "2011-07-29 17:10:08",
        "validated": false,
        "QueryBody_Original": "DECLARE  @UserId int = ##UserId##;\n\nSELECT TOP 30\n       Id                                             AS [Post Link],\n       Len(Body)                                      AS [Characters],\n       Replace(Replace(Body, '<p>', ' '), '<\/p>', '') AS [Body],\n       Score                                          As [Total Score]\nFROM   Posts\nWHERE  (OwnerUserID = @UserId)\nORDER BY Len(Body) DESC"
    },
    {
        "QuerySetId": 42594,
        "Title": "Monthly growth of given tag",
        "Description": "\n",
        "QueryBody": "DECLARE  @tag nvarchar(25) = ##tag:string##\n\nselect datepart(year, Posts.CreationDate), datepart(month, Posts.CreationDate) , count(tags.tagname) from Posts\ninner join PostTags on PostTags.PostId = Posts.id\ninner join tags on tags.id = PostTags.TagId\nwhere tags.tagname = @tag\ngroup by datepart(month, Posts.CreationDate), datepart(year, Posts.CreationDate)",
        "CreationDate": "2011-07-30 15:32:47",
        "validated": false,
        "QueryBody_Original": "DECLARE  @tag nvarchar(25) = ##tag:string##\n\nselect datepart(year, Posts.CreationDate), datepart(month, Posts.CreationDate) , count(tags.tagname) from Posts\ninner join PostTags on PostTags.PostId = Posts.id\ninner join tags on tags.id = PostTags.TagId\nwhere tags.tagname = @tag\ngroup by datepart(month, Posts.CreationDate), datepart(year, Posts.CreationDate)"
    },
    {
        "QuerySetId": 43014,
        "Title": "Tags with Worst Acceptance Rates",
        "Description": "All tags sorted to show those the lowest % of accepted answers.\nOnly considers open questions.\nIncludes extra info for proportion of questions that are answered and average number of answers.\n",
        "QueryBody": "WITH  Worst Acceptance Rates\n-- All tags sorted to show those the lowest % of accepted answers.\n-- Only considers open questions.\n\nSELECT\n  T.TagName,\n  COUNT( P.Id ) AS Posts,\n  COUNT( P.AcceptedAnswerId ) AS WITHAccepted,\n  ROUND( CAST( COUNT( P.AcceptedAnswerId ) AS FLOAT) \/ COUNT( P.Id ) , 3 ) AS AcceptanceRate,\n  COUNT( P.AnswerCount ) AS WITHAnswers,\n  ROUND( AVG( CAST( P.AnswerCount AS FLOAT ) ) , 3 ) AS AveNumOfAnswers,\n  ROUND( CAST( COUNT( P.AnswerCount ) AS FLOAT )  \/ COUNT( P.Id ) , 3 ) AS AnsweredRate\n\nFROM Tags T\nJOIN PostTags PT ON T.Id = PT.TagId\nJOIN Posts P ON P.Id = PT.PostId\n\n\nWHERE P.ClosedDate IS NULL\n\nGROUP BY T.TagName\n\nORDER BY AcceptanceRate ASC",
        "CreationDate": "2013-06-02 12:59:59",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 43336,
        "Title": "Who Brings in the Crowds?",
        "Description": "Users sorted by total number of views of their questions per day (with a 30-day softener to keep hot new posts from skewing the results).\r\n",
        "QueryBody": "WITH  a slight softener to keep very new posts from skewing the results).\n\nSELECT\n  q.OwnerUserId as [User Link],\n  count(q.Id) as Questions,\n  sum(q.ViewCount\/(30+datediff(day, q.CreationDate, datadumptime ))) AS [Question Views per Day]\nFROM posts AS q, (select max(LastAccessDate) as datadumptime from Users) tmp\nWHERE  \n  q.CommunityOwnedDate is null AND\n  q.OwnerUserId is NOT null AND\n  q.PostTypeId=1\n  and q.OwnerUserId = ##UserId##\nGROUP BY q.OwnerUserId",
        "CreationDate": "2014-02-03 18:27:32",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 43481,
        "Title": "Tag statistics per year, month",
        "Description": "My gut feeling says there is smt happening with question of python, and\nthen i tried to find some proof to my gut feeling.\n\n",
        "QueryBody": "SELECT  \n(cast(datepart(year, p.CreationDate) as float) + (datepart(month, p.CreationDate) \/ 12.0)),\n  count(*) as questions,\n  count(p.ClosedDate) as closed_questions,\n  sum(p.Score*1.0) as total_score,\n  sum(p.AnswerCount*1.0) as total_answers,\n  sum(p.CommentCount*1.0) as total_comment,\n  sum(p.FavoriteCount * 1.0) as total_favorite\nfrom Posts p\njoin Posts p1 on p.Id = p1.ParentId\njoin PostTags pt on pt.PostId = p.Id\njoin Tags t on t.Id = pt.TagId \nwhere t.TagName = ##Tag:string## and p.PostTypeId = 1\ngroup by \n(cast(datepart(year, p.CreationDate) as float) + (datepart(month, p.CreationDate) \/ 12.0))",
        "CreationDate": "2016-03-18 21:26:38",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 44697,
        "Title": "Select Short Answers With a Score Equal or more than x",
        "Description": "\n",
        "QueryBody": "DECLARE  @score int = ##Score##\n\nSelect Id as [Post Link], body\nFrom Posts\nWhere posttypeid = 2 and len(body) <= 100 and Score >= @score",
        "CreationDate": "2011-08-20 02:17:38",
        "validated": false,
        "QueryBody_Original": "DECLARE  @score int = ##Score##\n\nSelect Id as [Post Link], body\nFrom Posts\nWhere posttypeid = 2 and len(body) <= 100 and Score >= @score"
    },
    {
        "QuerySetId": 44987,
        "Title": "Find questions with \"[in,using] <TAG>\" at the end of their title",
        "Description": "Returns all questions that end with \"in <TAG>\" or \"using <TAG>\" where the question is already tagged with <TAG>\n",
        "QueryBody": "WITH  \"in <TAG>\" at the end of their title\n-- Returns all questions that end WITH \"in <TAG>\" where the question is already tagged WITH <TAG>\n\nSelect p.id as [Post Link], p.tags as Tags\nFrom Posts p\nWhere p.Title Like '%[in,using] ##Tag##' And p.Tags Like '%<' + LOWER('##Tag##') + '>%'",
        "CreationDate": "2011-08-24 01:16:44",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 45901,
        "Title": "Find identical titles in a given tag (Trilogy version)",
        "Description": "We exclude closed questions, and also show the creation date of the posts.\nThis works only in the trilogy sites (SO, SU, SF, MSO) and some SE 2.0 sites\n(mathematics, gis, webapps, stats, stackapps, gamedev, webmasters),\nnot in most others of SE 2.0.\n\nUse  http:\/\/data.stackexchange.com\/ubuntu\/s\/1809  there.\n(Replace ubuntu with your site name.)\n",
        "QueryBody": "DECLARE  @tag nvarchar(25) = ##tag:string##;\nDECLARE @tagpattern nvarchar(25) = '%<' + LOWER(@tag) + '>%';\n\nSELECT a.Id AS [Post Link], a.CreationDate AS \"First Date\",\n       b.Id AS [Post Link], b.CreationDate AS \"Second Date\"\nFROM Posts AS a JOIN Posts AS b ON a.Title = b.Title\nWHERE a.Id < b.Id\n  and (a.Tags like @tagpattern or b.Tags like @tagpattern)\n  and a.ClosedDate IS NULL\n  and b.ClosedDate IS NULL;",
        "CreationDate": "2011-09-01 03:49:38",
        "validated": false,
        "QueryBody_Original": "DECLARE  @tag nvarchar(25) = ##tag:string##;\nDECLARE @tagpattern nvarchar(25) = '%<' + LOWER(@tag) + '>%';\n\nSELECT a.Id AS [Post Link], a.CreationDate AS \"First Date\",\n       b.Id AS [Post Link], b.CreationDate AS \"Second Date\"\nFROM Posts AS a JOIN Posts AS b ON a.Title = b.Title\nWHERE a.Id < b.Id\n  and (a.Tags like @tagpattern or b.Tags like @tagpattern)\n  and a.ClosedDate IS NULL\n  and b.ClosedDate IS NULL;"
    },
    {
        "QuerySetId": 46349,
        "Title": "My Tags ordered by frequency",
        "Description": "Tags of my answers, ordered by frequency\n",
        "QueryBody": "DECLARE  @MyUserId int = ##MyUserId##; -- 176569;\n\nselect count(distinct myAnswer.ParentId) as cnt, tag.Id tagID, tag.TagName tagName\n from Posts as myAnswer, PostTags as a2t, Tags as tag\nwhere a2t.PostId = myAnswer.ParentId and a2t.TagId = tag.Id\n  and myAnswer.ownerUserId = @MyUserId \n  and myAnswer.postTypeId = 2\ngroup by tag.Id, tag.TagName\norder by cnt desc",
        "CreationDate": "2011-09-04 19:24:58",
        "validated": false,
        "QueryBody_Original": "DECLARE  @MyUserId int = ##MyUserId##; -- 176569;\n\nselect count(distinct myAnswer.ParentId) as cnt, tag.Id tagID, tag.TagName tagName\n from Posts as myAnswer, PostTags as a2t, Tags as tag\nwhere a2t.PostId = myAnswer.ParentId and a2t.TagId = tag.Id\n  and myAnswer.ownerUserId = @MyUserId \n  and myAnswer.postTypeId = 2\ngroup by tag.Id, tag.TagName\norder by cnt desc"
    },
    {
        "QuerySetId": 46854,
        "Title": "Users with highest reputation\/# answers ratio",
        "Description": null,
        "QueryBody": "SELECT  TOP 100\nId [User Link], Reputation, count Answers, Reputation \/ count ratio\nFROM Users u\nINNER JOIN (SELECT OwnerUserId, COUNT(*) count\n            FROM Posts\n            GROUP BY OwnerUserId) a\nON u.Id = a.OwnerUserId\nWHERE Reputation > ##MinRep##\nORDER BY ratio DESC;\n-- Enter Query Description",
        "CreationDate": "2011-09-09 09:59:14",
        "validated": false,
        "QueryBody_Original": "SELECT  TOP 100\nId [User Link], Reputation, count Answers, Reputation \/ count ratio\nFROM Users u\nINNER JOIN (SELECT OwnerUserId, COUNT(*) count\n            FROM Posts\n            GROUP BY OwnerUserId) a\nON u.Id = a.OwnerUserId\nWHERE Reputation > ##MinRep##\nORDER BY ratio DESC;\n-- Enter Query Description"
    },
    {
        "QuerySetId": 46926,
        "Title": "Vote Breakdown on a user's answers\/questions.",
        "Description": "VoteType: 1 = Accept; 2 = Upvote; 3 = Downvote\nPostType: 1 = Question; 2 = Answer\n",
        "QueryBody": "DECLARE  @UserId int = ##UserId##\nDECLARE @VoteType int = ##VoteType##\nDECLARE @PostType int = ##PostType##\n\nselect COUNT(*)\nfrom Votes v\njoin Posts p on p.Id = v.PostId \n  and VoteTypeId = @VoteType\n  and PostTypeId = @PostType \n  and OwnerUserId = @UserId",
        "CreationDate": "2011-09-09 22:14:07",
        "validated": false,
        "QueryBody_Original": "DECLARE  @UserId int = ##UserId##\nDECLARE @VoteType int = ##VoteType##\nDECLARE @PostType int = ##PostType##\n\nselect COUNT(*)\nfrom Votes v\njoin Posts p on p.Id = v.PostId \n  and VoteTypeId = @VoteType\n  and PostTypeId = @PostType \n  and OwnerUserId = @UserId"
    },
    {
        "QuerySetId": 47309,
        "Title": "\"Best\" posts prior to 2010",
        "Description": "All questions that start with the word \"Best\" and were asked before 2010.\n\"Best way\" is excluded from the resulsts.\n",
        "QueryBody": "WITH  the word \"Best\" and were asked before 2010.\n-- \"Best way\" is excluded from the resulsts.\n\nselect\n  CreationDate, Id as [Post Link], Body, Score from Posts\nwhere\n  upper(Title) like 'BEST%' and\n  upper(Title) not like 'BEST WAY%' and\n  ClosedDate is null and\n  cast(CreationDate as DATE) < cast('2010-01-01 00:00:00.000' as DATE)\norder by Score desc",
        "CreationDate": "2011-09-15 02:45:56",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 47316,
        "Title": "How many edits until Copy Editor?",
        "Description": "Shows a user's total edits so far, how many edits until the \"Strunk and White\"\nbadge, and how many edits until the \"Copy Editor\" badge.\n",
        "QueryBody": "DECLARE  @USER int =  ##UserId##;\n\nSELECT\n   COUNT(0) AS 'Number of Edits',\n   100 - COUNT(0) AS 'Edits until \"Strunk and White\"',\n   600 - COUNT(0) AS 'Edits until \"Copy Editor\"'\nFROM\n   PostHistory\nWHERE\n   UserId = @User AND\n   PostHistoryTypeId >= 4 AND\n   PostHistoryTypeId <= 6 AND\n   (SELECT OwnerUserId FROM Posts WHERE Id = PostId) <> @User\n;",
        "CreationDate": "2011-09-15 07:48:38",
        "validated": false,
        "QueryBody_Original": "DECLARE  @USER int =  ##UserId##;\n\nSELECT\n   COUNT(0) AS 'Number of Edits',\n   100 - COUNT(0) AS 'Edits until \"Strunk and White\"',\n   600 - COUNT(0) AS 'Edits until \"Copy Editor\"'\nFROM\n   PostHistory\nWHERE\n   UserId = @User AND\n   PostHistoryTypeId >= 4 AND\n   PostHistoryTypeId <= 6 AND\n   (SELECT OwnerUserId FROM Posts WHERE Id = PostId) <> @User\n;"
    },
    {
        "QuerySetId": 47559,
        "Title": "Average Accepted Answer Score by Content Length",
        "Description": "Investigating the effects of tl;dr\n",
        "QueryBody": "SELECT \n  (len(a.body)\/##ChunkSize:int##) * ##ChunkSize## AS size,\n  avg(CAST(a.score AS float)) AS \"average answer score\",\n  count(*) AS answers\nFROM Posts q\nINNER JOIN Posts a ON a.Id = q.AcceptedAnswerId\nWHERE a.posttypeid=2\nGROUP BY len(a.body)\/##ChunkSize##\nORDER BY size;",
        "CreationDate": "2011-09-17 22:01:41",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 47659,
        "Title": "Lowest voted and highest voted",
        "Description": "Lowest voted question and answer and highest voted\n",
        "QueryBody": "DECLARE  @lowestq int, @highestq int, @lowesta int, @highesta int\n\nselect @lowestq = min(score), @highestq = max(score) from (\nselect score, count(*) cnt from posts where posttypeid in (1) group by score ) X\n\nselect @lowesta = min(score), @highesta = max(score) from (\nselect score, count(*) cnt from posts where posttypeid in (2) group by score ) X\n\nselect PT.name, P.id, P.score, P.title, P.parentid from posts P\ninner join posttypes PT on P.posttypeid = PT.id\nwhere ( ( posttypeid = 1 and score in (@lowestq, @highestq) )\nor ( posttypeid = 2 and score in (@lowesta, @highesta) ) )",
        "CreationDate": "2011-09-19 12:02:26",
        "validated": false,
        "QueryBody_Original": "DECLARE  @lowestq int, @highestq int, @lowesta int, @highesta int\n\nselect @lowestq = min(score), @highestq = max(score) from (\nselect score, count(*) cnt from posts where posttypeid in (1) group by score ) X\n\nselect @lowesta = min(score), @highesta = max(score) from (\nselect score, count(*) cnt from posts where posttypeid in (2) group by score ) X\n\nselect PT.name, P.id, P.score, P.title, P.parentid from posts P\ninner join posttypes PT on P.posttypeid = PT.id\nwhere ( ( posttypeid = 1 and score in (@lowestq, @highestq) )\nor ( posttypeid = 2 and score in (@lowesta, @highesta) ) )"
    },
    {
        "QuerySetId": 47910,
        "Title": "edits 4 badges - Matthew version",
        "Description": null,
        "QueryBody": "DECLARE  @userid int = ##user##\n\nSELECT COUNT(*) AS Edits4Badges\nFROM (\n    SELECT CAST(CreationDate AS SMALLDATETIME) AS foo, PostID\n    FROM PostHistory ph\n    WHERE PostHistoryTypeId IN (4,5)\n        AND PostId NOT IN (\n            SELECT p.Id\n            FROM Posts p\n            WHERE p.OwnerUserId = ph.UserId\n        )\n        AND UserID = @userid\n    GROUP BY CAST(CreationDate AS SMALLDATETIME), PostID\n) AS bar",
        "CreationDate": "2011-09-22 03:31:10",
        "validated": false,
        "QueryBody_Original": "DECLARE  @userid int = ##user##\n\nSELECT COUNT(*) AS Edits4Badges\nFROM (\n    SELECT CAST(CreationDate AS SMALLDATETIME) AS foo, PostID\n    FROM PostHistory ph\n    WHERE PostHistoryTypeId IN (4,5)\n        AND PostId NOT IN (\n            SELECT p.Id\n            FROM Posts p\n            WHERE p.OwnerUserId = ph.UserId\n        )\n        AND UserID = @userid\n    GROUP BY CAST(CreationDate AS SMALLDATETIME), PostID\n) AS bar"
    },
    {
        "QuerySetId": 47931,
        "Title": "Answers by me that contain code.",
        "Description": "This query produces a list of your answers where the answer contains one or more \"code \" blocks.\n",
        "QueryBody": "DECLARE  @UserId int = ##UserId##\n\nSELECT Id AS [Post Link], Score, ViewCount\nFROM Posts\nWHERE OwnerUserID = @UserID\nORDER BY ViewCount",
        "CreationDate": "2016-11-01 16:58:15",
        "validated": false,
        "QueryBody_Original": "DECLARE  @UserId int = ##UserId##\n\nSELECT Id AS [Post Link], Score, ViewCount\nFROM Posts\nWHERE OwnerUserID = @UserID\nORDER BY ViewCount"
    },
    {
        "QuerySetId": 48036,
        "Title": "People with Jesus in their about me section",
        "Description": "Yeah, what the name says\n",
        "QueryBody": "WITH  Jesus in their about me section\n-- Yeah, what the name says\n\nselect  Id as [User Link], location, reputation \nfrom users\nwhere aboutme like '%jesus%' or aboutme like '%Jesus%'\norder by reputation desc",
        "CreationDate": "2011-09-24 10:39:07",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 48077,
        "Title": "Posts with \"question\" in the title",
        "Description": null,
        "QueryBody": "WITH  \"question\" in the title\n\nSELECT Title\nFROM Posts\nWHERE PostTypeId = 1\nAND     lower(Title) like ('%question%')\nAND     lower(Title) not like ('%interview%')",
        "CreationDate": "2011-09-25 00:57:33",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 49938,
        "Title": "Show my answers to R tag",
        "Description": "Show my answers to R tag",
        "QueryBody": "SELECT \n    a.Score, a.Body, q.Tags, q.Title\nfrom\n    Posts q\n  inner join\n    Posts a\n  on q.Id = a.ParentId and a.postTypeId = 2 and q.postTypeId = 1\n   \/*join PostTags on q.Id = PostTags.PostId\n   join Tags on Tags.Id = PostTags.TagId and ... *\/\nwhere\n      a.CommunityOwnedDate is null\n  and a.OwnerUserId = ##UserId##\n  and q.Tags like '%<r>%'\norder by a.Score desc",
        "CreationDate": "2011-10-14 15:00:54",
        "validated": false,
        "QueryBody_Original": "SELECT \n    a.Score, a.Body, q.Tags, q.Title\nfrom\n    Posts q\n  inner join\n    Posts a\n  on q.Id = a.ParentId and a.postTypeId = 2 and q.postTypeId = 1\n   \/*join PostTags on q.Id = PostTags.PostId\n   join Tags on Tags.Id = PostTags.TagId and ... *\/\nwhere\n      a.CommunityOwnedDate is null\n  and a.OwnerUserId = ##UserId##\n  and q.Tags like '%<r>%'\norder by a.Score desc"
    },
    {
        "QuerySetId": 49988,
        "Title": "String search in a tag",
        "Description": "Search for questions and answers containing a specific string with a given tag.\n",
        "QueryBody": "WITH  a given tag.\n\nSELECT\n  Id as [Post Link],\n  OwnerUserId As [User Link],\n  CreationDate As [Date]\nFROM Posts p\nWHERE (p.PostTypeId = 1\n       AND (p.Body LIKE '%##Pattern##%' OR p.Title LIKE '%##Pattern##%')\n       AND (p.Tags LIKE '%<##Tag##>%' OR p.Tags LIKE '%\u00e9##Tag##\u00e0%'))\n   OR (p.PostTypeId = 2\n       AND (SELECT Count(*) FROM Posts q\n            WHERE q.Id = p.ParentId\n              AND (q.Tags LIKE '%<##Tag##>%' OR p.Tags LIKE '%\u00e9##Tag##\u00e0%')) <> 0\n       AND p.Body LIKE '%##Pattern##%')\nORDER BY Id ASC",
        "CreationDate": "2011-10-16 01:07:21",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 50037,
        "Title": "Top 100 users in a given tag (TeX version)",
        "Description": "This query fetches the top 100 users on a given tag name. The original\nquery is available here: data.stackexchange.com\/stackoverflow\/s\/1791\n",
        "QueryBody": "DECLARE  @TagName nvarchar(25) = ##Tag:string##\n\nSELECT TOP 1000\n    u.Id as [User Link],\n    COUNT(*) AS UpVotes\nFROM Tags t with (nolock)\n    INNER JOIN PostTags pt with (nolock)ON pt.TagId = t.id\n    INNER JOIN Posts p with (nolock) ON p.ParentId = pt.PostId\n    INNER JOIN Votes v with (nolock) ON v.PostId = p.Id and v.VoteTypeId = 2\n    inner join Users u with (nolock) on u.Id = p.OwnerUserId\nWHERE\n    p.CommunityOwnedDate IS NULL\n    and t.TagName = @TagName\nGROUP BY u.Id\nORDER BY UpVotes DESC",
        "CreationDate": "2015-07-24 20:53:44",
        "validated": false,
        "QueryBody_Original": "DECLARE  @TagName nvarchar(25) = ##Tag:string##\n\nSELECT TOP 1000\n    u.Id as [User Link],\n    COUNT(*) AS UpVotes\nFROM Tags t with (nolock)\n    INNER JOIN PostTags pt with (nolock)ON pt.TagId = t.id\n    INNER JOIN Posts p with (nolock) ON p.ParentId = pt.PostId\n    INNER JOIN Votes v with (nolock) ON v.PostId = p.Id and v.VoteTypeId = 2\n    inner join Users u with (nolock) on u.Id = p.OwnerUserId\nWHERE\n    p.CommunityOwnedDate IS NULL\n    and t.TagName = @TagName\nGROUP BY u.Id\nORDER BY UpVotes DESC"
    },
    {
        "QuerySetId": 50093,
        "Title": "Questions I have answered that contain some text but excluding questions with a tag",
        "Description": "For looking for questions you've answered that may need a tag added\n",
        "QueryBody": "DECLARE  @user int = ##user:int##\nDECLARE @excluded_tag nvarchar(25) = ##excludedtag:string##\nDECLARE @text nvarchar(25) = ##text:string##\n\nSELECT\n  q.Id As [Post Link],\n  a.Score As [Answer Score]\nFROM Posts q, Posts a\nWHERE q.Tags NOT LIKE '%<' + @excluded_tag + '>%'\n  AND (q.Body LIKE '%' + @text + '%' OR q.Title LIKE '%' + @text + '%')\n  AND a.ParentId = q.Id\n  AND a.OwnerUserId = @user\nORDER BY [Answer Score] DESC",
        "CreationDate": "2011-10-18 04:16:39",
        "validated": false,
        "QueryBody_Original": "DECLARE  @user int = ##user:int##\nDECLARE @excluded_tag nvarchar(25) = ##excludedtag:string##\nDECLARE @text nvarchar(25) = ##text:string##\n\nSELECT\n  q.Id As [Post Link],\n  a.Score As [Answer Score]\nFROM Posts q, Posts a\nWHERE q.Tags NOT LIKE '%<' + @excluded_tag + '>%'\n  AND (q.Body LIKE '%' + @text + '%' OR q.Title LIKE '%' + @text + '%')\n  AND a.ParentId = q.Id\n  AND a.OwnerUserId = @user\nORDER BY [Answer Score] DESC"
    },
    {
        "QuerySetId": 50371,
        "Title": "How many users have I helped?",
        "Description": "A count of the unique users who have accepted one of a user's answers.\n(Excludes the user accepting their own answers)\n",
        "QueryBody": "SELECT \n    COUNT(a.Id) as [Total Answers],\n    COUNT(DISTINCT q.OwnerUserId) as [Unique Users],\n    SUM(case when q.AcceptedAnswerId = a.Id then 1 else 0 end) as [Accepted Answers],\n    COUNT(DISTINCT case when q.AcceptedAnswerId = a.Id then q.OwnerUserId end) as [Unique Users Who Accepted],\n    SUM(q.ViewCount) as [Estimate views of answers],\n    SUM(case when q.AcceptedAnswerId = a.Id then q.ViewCount else 0 end) as [Estimate views of accepted answers]\nfrom\n    Posts q\n  inner join\n    Posts a\n  on a.ParentId = q.Id\nwhere\n      a.OwnerUserId = ##UserId##\n  and q.OwnerUserId != ##UserId##",
        "CreationDate": "2011-10-23 15:14:35",
        "validated": false,
        "QueryBody_Original": "SELECT \n    COUNT(a.Id) as [Total Answers],\n    COUNT(DISTINCT q.OwnerUserId) as [Unique Users],\n    SUM(case when q.AcceptedAnswerId = a.Id then 1 else 0 end) as [Accepted Answers],\n    COUNT(DISTINCT case when q.AcceptedAnswerId = a.Id then q.OwnerUserId end) as [Unique Users Who Accepted],\n    SUM(q.ViewCount) as [Estimate views of answers],\n    SUM(case when q.AcceptedAnswerId = a.Id then q.ViewCount else 0 end) as [Estimate views of accepted answers]\nfrom\n    Posts q\n  inner join\n    Posts a\n  on a.ParentId = q.Id\nwhere\n      a.OwnerUserId = ##UserId##\n  and q.OwnerUserId != ##UserId##"
    },
    {
        "QuerySetId": 50547,
        "Title": "Stack Overflow questions with outstanding close votes",
        "Description": "A list of Stack Overflow questions with outstanding close votes, sorted by number of votes.\n",
        "QueryBody": "WITH  outstanding close votes\n-- A list of Stack Overflow questions WITH outstanding close votes, sorted by number of votes.\n\n\nselect\n  Posts.Id as [Post Link],\n  avg(Posts.Score) as [Score],\n  count(*) as [Close Votes],\n  min(Votes.CreationDate) as [First Vote],\n  max(Votes.CreationDate) as [Last Vote]\nfrom Posts\ninner join Votes on Posts.Id=Votes.PostId\nwhere Votes.VoteTypeId=6 and Posts.ClosedDate is NULL and Posts.Tags LIKE '%<php>%'\ngroup by Posts.Id\norder by [Close Votes] desc, [Last Vote] desc",
        "CreationDate": "2012-01-29 18:38:55",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 50576,
        "Title": "Which of My Answers Have Been Accepted?",
        "Description": "Returns all the accepted answers for a given User ID on Stack Overflow.\n",
        "QueryBody": "SELECT  a.Id as [Post Link]\nfrom Posts q\ninner join Posts a on q.AcceptedAnswerId=a.Id\nwhere a.OwnerUserId=##UserId##\norder by a.CreationDate desc",
        "CreationDate": "2011-10-26 09:57:20",
        "validated": false,
        "QueryBody_Original": "SELECT  a.Id as [Post Link]\nfrom Posts q\ninner join Posts a on q.AcceptedAnswerId=a.Id\nwhere a.OwnerUserId=##UserId##\norder by a.CreationDate desc"
    },
    {
        "QuerySetId": 50579,
        "Title": "How Many of My Answers Have Been Accepted?",
        "Description": "Returns the number of accepted answers for a given User ID on Stack Overflow.\n",
        "QueryBody": "SELECT  count(*) as [# of Accepted Answers]\nfrom Posts q\ninner join Posts a on q.AcceptedAnswerId=a.Id\nwhere a.OwnerUserId=##UserId##",
        "CreationDate": "2011-10-26 09:59:00",
        "validated": false,
        "QueryBody_Original": "SELECT  count(*) as [# of Accepted Answers]\nfrom Posts q\ninner join Posts a on q.AcceptedAnswerId=a.Id\nwhere a.OwnerUserId=##UserId##"
    },
    {
        "QuerySetId": 50928,
        "Title": "Users with N or more closed posts",
        "Description": "ordered by close rate of the user's posts\nadapted from \"per tag close rate\": http:\/\/data.stackexchange.com\/stackoverflow\/s\/1266\/\n",
        "QueryBody": "WITH  N or more closed posts\n-- ordered by close rate of the user's posts\n-- adapted from \"per tag close rate\": http:\/\/data.stackexchange.com\/stackoverflow\/s\/1266\/\n\nSELECT TOP 100\n    u.id as [User Link],\n    COUNT(*) [Total Posts],\n    COUNT(ClosedDate) [Closed Posts],\n    100.0 * COUNT(ClosedDate) \/ count(*) as [Close Rate]\nFROM users as u\nJOIN Posts as p ON p.owneruserId = u.Id\nGROUP BY u.id\nHAVING COUNT(ClosedDate) >= ##MinimumClosedPostCount:int##\nORDER BY 100.0 * COUNT(ClosedDate) \/ COUNT(*) desc",
        "CreationDate": "2011-11-01 13:40:52",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 50969,
        "Title": "Developer in Israel That Do C++\/C#",
        "Description": "Users with Israel in their location who are active in C++\/C#, sorted by rep (having more than 100 rep)\n",
        "QueryBody": "WITH  Israel in their location who are active in C++\/C#, sorted by rep\n\nSELECT Users.DisplayName, Users.Reputation, Users.Id as ID, Users.WebsiteUrl\nFROM Users\n  JOIN \n   (\n    SELECT Users.Id as UserId\n      FROM Posts\n      JOIN PostTags ON Posts.Id = PostTags.PostId\n      JOIN Users on Users.Id = Posts.OwnerUserId\n      WHERE\n        (PostTags.TagId = 10 OR PostTags.TagId = 9)\n      GROUP BY Users.Id\n  ) As TopicUsers\n  ON UserId = Users.Id\nWHERE Users.Location = 'Israel'\n  AND Users.Reputation > 100\nORDER BY Users.Reputation DESC",
        "CreationDate": "2011-11-01 16:32:44",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 51195,
        "Title": "Deputy badges earned by <1000 rep users",
        "Description": "This query fetches all users with rep less than 1000 that earned the Deputy badge.\n",
        "QueryBody": "WITH  rep less than 1000 that earned the Deputy badge.\n\nselect u.DisplayName from Users u, Badges b\nwhere b.UserId = u.Id\nand b.Name = 'Deputy'\nand u.Reputation < 1000",
        "CreationDate": "2011-11-03 14:31:07",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 51360,
        "Title": "Find suggested duplicates that haven't led to question closure",
        "Description": "Locate old dupe suggestions where the flag has timed out\n",
        "QueryBody": "SELECT \n  p.Id as [Post Link],\n  p.CreationDate  \nfrom Comments c\njoin Posts p on c.PostId = p.Id\nwhere (p.Tags LIKE '%<email>%' or p.Tags like '%<spam>%')\nand p.ClosedDate is not null\nand p.PostTypeId = 1\nand c.UserId = ##UserId##\norder by p.CreationDate desc;",
        "CreationDate": "2015-08-19 21:00:44",
        "validated": false,
        "QueryBody_Original": "SELECT \n  p.Id as [Post Link],\n  p.CreationDate  \nfrom Comments c\njoin Posts p on c.PostId = p.Id\nwhere (p.Tags LIKE '%<email>%' or p.Tags like '%<spam>%')\nand p.ClosedDate is not null\nand p.PostTypeId = 1\nand c.UserId = ##UserId##\norder by p.CreationDate desc;"
    },
    {
        "QuerySetId": 51364,
        "Title": "Find suggested duplicates that haven't led to question closure in a tag",
        "Description": "Locate old dupe suggestions where the flag has timed out\n",
        "QueryBody": "DECLARE  @Tag varchar(100) = '##Tag##'\n\nselect\n  p.Id as [Post Link],\n  p.CreationDate  \nfrom Comments c\njoin Posts p on c.PostId = p.Id\njoin PostTags pt on pt.PostId = p.Id\njoin Tags t on t.Id = pt.TagId\nwhere c.Text LIKE '%possible duplicate%'\nand p.ClosedDate is null\nand p.PostTypeId = 1\nand t.TagName = @Tag\norder by p.Id",
        "CreationDate": "2011-11-06 17:21:41",
        "validated": false,
        "QueryBody_Original": "DECLARE  @Tag varchar(100) = '##Tag##'\n\nselect\n  p.Id as [Post Link],\n  p.CreationDate  \nfrom Comments c\njoin Posts p on c.PostId = p.Id\njoin PostTags pt on pt.PostId = p.Id\njoin Tags t on t.Id = pt.TagId\nwhere c.Text LIKE '%possible duplicate%'\nand p.ClosedDate is null\nand p.PostTypeId = 1\nand t.TagName = @Tag\norder by p.Id"
    },
    {
        "QuerySetId": 51386,
        "Title": "Questions with no answers and no activity for 6 months.",
        "Description": null,
        "QueryBody": "WITH  no answers and no activity for 6 months.\n\nSELECT  \n  q.Id AS [Post Link],\n  q.AnswerCount AS Answers\nFROM Posts q\nWHERE\n  q.LastActivityDate < '2011-05-06'\n    AND q.ViewCount <= 100\n    AND q.PostTypeId = 1\nORDER BY Score DESC",
        "CreationDate": "2011-11-07 05:22:05",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 51395,
        "Title": "Questions with titles like 'exists %\" or \"exist %\"",
        "Description": "posts that could probably use editing, as this is broken English\n",
        "QueryBody": "WITH  titles like 'exists %\" or \"exist %\"\n-- posts that could probably use editing, as this is broken English\n\nselect p.id as [Post Link], displayname, p.creationdate\nfrom posts as p\ninner join users as u\non p.owneruserid = u.id\nwhere p.title like 'exist %'\nor p.title like 'exists %'\nor p.title like 'Exist %'\nor p.title like 'Exists %'",
        "CreationDate": "2011-11-07 07:22:40",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 51411,
        "Title": "Posts with inverted question marks in title",
        "Description": "indicating possible broken English or non-English content\nattempts to ignore some common false-positives relating to unicode\n",
        "QueryBody": "WITH  inverted question marks in title\n-- indicating possible broken English or non-English content\n-- attempts to ignore some common false-positives relating to unicode\n\nselect p.id as [Post Link], displayname, p.creationdate\nfrom posts as p\ninner join users as u\non u.id = p.owneruserid\nwhere p.title like '%\u00bf%'\nand p.title not like '%tring%'\nand p.title not like '%nicode%'\nand p.title not like '%utf%'\nand p.title not like '%UTF%'\nand p.title not like '%\u00ef\u00bb\u00bf%'",
        "CreationDate": "2011-11-07 18:59:21",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 51761,
        "Title": "Min, max, and average of score to view count ratios per question over a given year",
        "Description": "thanks to http:\/\/data.stackexchange.com\/stackoverflow\/s\/1506\/average-answer-score\n",
        "QueryBody": "SELECT \nMIN(cast(Score as decimal)\/cast(viewcount as decimal)) AS \"Minimum\",\nMAX(cast(Score as decimal)\/cast(viewcount as decimal)) AS \"Maximum\",\n(SUM(cast(Score as decimal)\/cast(viewcount as decimal)) + 0.0) \/ Count(*) AS \"Average\"\n\nFROM posts\n\nWHERE\ncreationdate >= cast(##year:int## as char) + '-01-01'\nand creationdate < cast((##year:int## + 1) as char) + '-01-01'\nand posttypeid = 1",
        "CreationDate": "2011-11-09 02:44:50",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 52160,
        "Title": "The less valued post by tag",
        "Description": "Enter the tag which you are interested in\n",
        "QueryBody": "SELECT  TOP 50 p.id as [Post Link], score\nFROM posts p\nWHERE tags LIKE '<' + ##tag:string## + '>'\nORDER by p.score ASC",
        "CreationDate": "2011-11-11 17:14:59",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 52166,
        "Title": "Finding my Low Quality Answers",
        "Description": "This will rank your Questions by the length of the post.\n",
        "QueryBody": "SELECT  OwnerUserId as [User Link], Id as [Post Link], len(body) as [Length of Post] from Posts\nWhere ParentId Is Not Null and ownerUserId = ##UserId##\nOrder by [Length of Post] asc",
        "CreationDate": "2011-11-11 19:01:49",
        "validated": false,
        "QueryBody_Original": "SELECT  OwnerUserId as [User Link], Id as [Post Link], len(body) as [Length of Post] from Posts\nWhere ParentId Is Not Null and ownerUserId = ##UserId##\nOrder by [Length of Post] asc"
    },
    {
        "QuerySetId": 52195,
        "Title": "Open posts with body character count of 25 or less sorted (asc) by vote count",
        "Description": "Looking at open posts with less than 26 characters in it by vote count.\n",
        "QueryBody": "WITH  body character count of 25 or less.\n-- Looking at posts WITH less than 31 characters in it\n\nSELECT\n    ParentId as [Post Link],\n    body,\n    len(body),\n    score\nFROM posts\nWHERE posttypeid = 2 AND len(body) < 25 and closeddate IS NULL\nORDER BY score ASC;",
        "CreationDate": "2011-11-12 03:31:38",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 52377,
        "Title": "Post types with post counts.",
        "Description": "See http:\/\/data.stackexchange.com\/stackoverflow\/s\/2079\/posts-by-postid?TypeId=6\n(replace 6 with the Id) for the list of posts of a specific type.\nPrivilegeWiki is only available on MSO.\n",
        "QueryBody": "WITH  post counts.\n\nselect count(Posts.Id) as count\nfrom Posts",
        "CreationDate": "2014-06-05 17:29:59",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 52742,
        "Title": "Who Has Answered My Questions?",
        "Description": null,
        "QueryBody": "DECLARE  @UserId int = ##UserId##;\n-- Who Has Answered My Questions?\n\nselect u.Id as [UserId], u.displayname as [Name], a.Id as [Post Link]\nfrom users as u \ninner join posts as a on a.owneruserid = u.id and a.posttypeid = 2\nwhere \n (a.ParentId in (\n   select id \n   from posts \n   where owneruserid = @UserId and posttypeid = 1\n  ))\norder by u.displayname",
        "CreationDate": "2016-12-09 23:58:41",
        "validated": false,
        "QueryBody_Original": "DECLARE  @UserId int = ##UserId##;\n-- Who Has Answered My Questions?\n\nselect u.Id as [UserId], u.displayname as [Name], a.Id as [Post Link]\nfrom users as u \ninner join posts as a on a.owneruserid = u.id and a.posttypeid = 2\nwhere \n (a.ParentId in (\n   select id \n   from posts \n   where owneruserid = @UserId and posttypeid = 1\n  ))\norder by u.displayname"
    },
    {
        "QuerySetId": 52764,
        "Title": "Question asked by X which were answered by Y",
        "Description": null,
        "QueryBody": "SELECT  q.Id as [Post Link] FROM\nPosts a\nINNER JOIN Posts q\nON a.ParentId = q.Id\nWHERE a.OwnerUserId = ##Answerer##\nAND q.OwnerUserId = ##Asker##",
        "CreationDate": "2011-11-16 04:57:49",
        "validated": false,
        "QueryBody_Original": "SELECT  q.Id as [Post Link] FROM\nPosts a\nINNER JOIN Posts q\nON a.ParentId = q.Id\nWHERE a.OwnerUserId = ##Answerer##\nAND q.OwnerUserId = ##Asker##"
    },
    {
        "QuerySetId": 52881,
        "Title": "Users with Top Accepted Answer Percentage",
        "Description": "Displays the top X users according to their accepted answer percentage,\nwithin the group of users with more than Y answers in total.\nLooks only within open, non-CW questions and answers.\nSee also \"Users with Top Answer Effectiveness\" (http:\/\/data.stackexchange.com\/stackoverflow\/s\/2113\/users-with-top-answer-effectiveness-accepted-percentage-times-quantity)\n",
        "QueryBody": "WITH in the group of users WITH more than Y answers in total.\n-- Looks only WITHin open, non-CW questions and answers.\nSELECT  TOP ##MaxUsers##\n        a.OwnerUserId AS [User Link],\n        Count(a.Id) AS [Total Answers],\n        Sum(CASE q.AcceptedAnswerId WHEN a.Id THEN 1 ELSE 0 END) AS [Accepted Answers],  \n        Round(Sum(CASE q.AcceptedAnswerId WHEN a.Id THEN 1 ELSE 0 END) * 100.0 \/ Count(a.Id), 1) AS [Percentage Accepted]\nFROM    Posts AS a\nJOIN    Posts AS q\n     ON a.ParentId = q.Id\nWHERE\n        q.PostTypeId = 1\n    AND a.PostTypeId = 2\n    AND q.AcceptedAnswerId IS NOT NULL\nGROUP BY\n        a.OwnerUserId\nHAVING\n        Count(a.Id) > ##MinimumAnswersPerUser##\nORDER BY\n        [Total Answers] DESC",
        "CreationDate": "2014-09-25 00:27:45",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 52897,
        "Title": "Close count per tag with close rate >= 10%",
        "Description": "Lists 100 tags with close rate >= 10% (to weed out the legit tags like [php] with lots of closed questions)\nOrdered by number of closed questions (descending) to emphasize tags' significance\nThese tags are possibly problematic, but sometimes just misapplied\nA modification of http:\/\/data.stackexchange.com\/stackoverflow\/s\/1266\/per-tag-close-rate\n",
        "QueryBody": "WITH  close rate >= 10%\n-- Lists 100 tags WITH close rate >= 10% (to weed out the legit tags like [php] WITH lots of closed questions)\n-- Ordered by number of closed questions (descending)\n-- A modification of http:\/\/data.stackexchange.com\/stackoverflow\/s\/1266\/per-tag-close-rate\n\nSELECT TOP 100\n    TagName as [Tag],\n    COUNT(*) [Total Posts],\n    100.0 * COUNT(ClosedDate) \/ count(*) as [Close Rate],\n    COUNT(ClosedDate) [Closed Posts]\nFROM Tags\nJOIN PostTags ON Tags.Id = PostTags.TagId\nJOIN Posts ON Posts.Id = PostTags.PostId\nGROUP BY TagId, TagName\nHAVING COUNT(ClosedDate) >= 5 -- give the tag a chance to be useful\nand (100.0 * COUNT(ClosedDate) \/ count(*)) >= 10\nORDER BY COUNT(ClosedDate) desc",
        "CreationDate": "2011-11-18 01:57:41",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 52913,
        "Title": "Questions Where the OP Posted An Answer",
        "Description": "Finds 1000 answers posted by the person who originally posted the question where the answer was not accepted score of the answer is less than a parameter and the user's reputation is less than a parameter\n",
        "QueryBody": "SELECT  TOP 1000 question.Id as [Post Link], answer.Id as [Post Link]\nFROM Posts question\nINNER JOIN Posts answer\nON question.Id = answer.ParentId\nINNER JOIN Users poster\nON question.OwnerUserId = poster.Id\nWHERE question.OwnerUserId = answer.OwnerUserId\nAND question.AcceptedAnswerId != answer.Id\nAND answer.Score < ##maxanswerscore##\nAND poster.Reputation < ##maxreputation:int##",
        "CreationDate": "2011-11-18 05:40:56",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 53136,
        "Title": "The most valued answer by tag",
        "Description": "Enter the tag which you are interested in\n",
        "QueryBody": "SELECT  TOP 50 answer.id as [Post Link], answer.score\nFROM posts p, posts answer\nWHERE p.tags LIKE '<' + ##tag:string## + '>' AND\nanswer.parentid = p.id\nORDER by answer.score DESC",
        "CreationDate": "2011-11-20 04:18:27",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 53137,
        "Title": "The less valued answer by tag",
        "Description": "Enter the tag which you are interested in\n",
        "QueryBody": "SELECT  TOP 50 answer.id as [Post Link], answer.score\nFROM posts p, posts answer\nWHERE p.tags LIKE '<' + ##tag:string## + '>' AND\nanswer.parentid = p.id\nORDER by answer.score ASC",
        "CreationDate": "2011-11-20 04:20:37",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 53243,
        "Title": "Close rate for questions with \"getting started\" in the title",
        "Description": "exact phrase, case-insensitive\n",
        "QueryBody": "WITH  \"getting started\" in the title\n-- case-insensitive\n\nSELECT\n    COUNT(*) [Total Posts],\n    COUNT(ClosedDate) [Closed Posts],\n    100.0 * COUNT(ClosedDate) \/ count(*) as [Close Rate]\nFROM posts\nwhere\nlower(title) like '%getting%'\nand lower(title) like '%started%'\nand posttypeid = 1",
        "CreationDate": "2011-11-21 19:44:17",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 53244,
        "Title": "Close rate for questions with a given phrase in the title",
        "Description": "searches for exact phrase, case-insensitive\n",
        "QueryBody": "WITH  a given phrase in the title\n-- searches for exact phrase, case-insensitive\n\nSELECT\n    COUNT(*) [Total Posts],\n    COUNT(ClosedDate) [Closed Posts],\n    100.0 * COUNT(ClosedDate) \/ count(*) as [Close Rate]\nFROM posts\nwhere\nlower(title) like '%' + ##phrase:string## + '%'\nand posttypeid = 1",
        "CreationDate": "2011-11-21 19:48:23",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 55196,
        "Title": "Number of users with displayname like 'user%'",
        "Description": "i.e. user1020334, etc.\ncase-insensitive\n",
        "QueryBody": "WITH  displayname like 'user%'\n-- i.e. user1020334, etc.\n-- case-insensitive\n\nselect\ncount(id)\nfrom users\nwhere lower(displayname) like 'user%'",
        "CreationDate": "2011-12-06 01:09:43",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 55197,
        "Title": "Questions with letter transpositions of \"Android\" in the title",
        "Description": "case-insensitive\n",
        "QueryBody": "WITH  letter transpositions of \"Android\" in the title\n-- \n\nselect\n  id as [Post Link],\n  creationdate\nfrom posts\nwhere\n  posttypeid = 1\n  and (\n    title like    '%nadroid%' COLLATE SQL_Latin1_General_CP1_CI_AS\n    or title like '%adnroid%' COLLATE SQL_Latin1_General_CP1_CI_AS\n    or title like '%anrdoid%' COLLATE SQL_Latin1_General_CP1_CI_AS\n    or title like '%andorid%' COLLATE SQL_Latin1_General_CP1_CI_AS\n    or title like '%andriod%' COLLATE SQL_Latin1_General_CP1_CI_AS\n    or title like '%androdi%' COLLATE SQL_Latin1_General_CP1_CI_AS\n  )",
        "CreationDate": "2011-12-06 01:42:28",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 55316,
        "Title": "Count of posts with only one tag, grouped by tag",
        "Description": null,
        "QueryBody": "WITH  only one tag, grouped by tag\n\nselect count(p.id), p.tags from posts as p\nwhere p.tags not like '%><%'\ngroup by p.tags\norder by count(p.id) desc",
        "CreationDate": "2011-12-06 15:12:44",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 55320,
        "Title": "Questions without at least one of the required Meta Stack Overflow tags",
        "Description": "in chronological order of creation date\n",
        "QueryBody": "WITH out at least one of the required Meta Stack Overflow tags\n-- \n\nselect\nid as [Post Link], tags, creationdate\nfrom posts\nwhere tags not like '%><%'\nand posttypeid = 1\nand tags not like '%<support>%'\nand tags not like '%<bug>%'\nand tags not like '%<feature-request>%'\nand tags not like '%<discussion>%'\norder by creationdate asc",
        "CreationDate": "2011-12-06 15:19:02",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 56152,
        "Title": "Search UserId's Favorites  containing some Text (Wildcard)",
        "Description": "Search UserId's Favorites for text contents (case-insensitive).  Results are sorted (descending) by Question score.\n",
        "QueryBody": "SELECT  Posts.id as [Post Link], Posts.Score as [Score], Posts.Tags as [Tagged With]\n\nFROM Votes, Posts\n\nWHERE\n     (Votes.PostId=Posts.Id) AND\n     (Votes.VoteTypeId = 5) AND\n     (Votes.UserId=##User:int##) AND\n     ((lower(Posts.Tags) LIKE lower('%<##Text##>%')) OR\n     (lower(Posts.Title) LIKE lower('%##Text##%')) OR\n     (lower(Posts.Body) LIKE lower('%##Text##%')))\n\n\nORDER BY Posts.Score DESC",
        "CreationDate": "2011-12-13 17:36:21",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 56577,
        "Title": "Simple search for answers that may have useful comments",
        "Description": null,
        "QueryBody": "SELECT  a.id as [Post Link], a.score, count(c.id) as [Comment Count]\nfrom posts q\n  inner join postTags pt on pt.postid = q.id\n  inner join tags on tags.id = pt.tagid\n  inner join posts a on q.id = a.parentid\n  inner join comments c on c.postid = a.id \nwhere tags.tagname like ##tag:string##\n  and a.score > 1\n  and c.score > 1\ngroup by a.id, a.score\norder by [Comment Count] desc",
        "CreationDate": "2011-12-16 03:47:23",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 56643,
        "Title": "Answered questions with a RIA framework tag",
        "Description": null,
        "QueryBody": "WITH  tag 'vaadin' and 'extjs'\n\n-- Determines how many percent of all questions tagged WITH 'vaadin' and 'extjs' have been answered\nSELECT\nt.TagName AS tag_name,\nCOUNT(DISTINCT p.Id) AS total_posts, \nSUM(p.AnswerCount) AS answer_count,\nSUM(CASE WHEN p.AcceptedAnswerId IS NOT NULL THEN 1 ELSE 0 END) AS accepted_answer_count,\n(SUM(CASE WHEN p.AcceptedAnswerId IS NOT NULL THEN 1 ELSE 0 END)*100) \/ COUNT(p.Id) AS accepted_percentage\nFROM Posts AS p \nINNER JOIN PostTags AS pt ON p.Id = pt.PostId\nINNER JOIN Tags AS t ON t.Id = pt.TagId\nWHERE t.TagName IN ('vaadin', 'extjs', 'zk', 'flex')\nGROUP BY t.TagName\nORDER BY t.TagName",
        "CreationDate": "2011-12-16 16:13:25",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 56970,
        "Title": "Questions with accepted answers that have no upvote",
        "Description": null,
        "QueryBody": "WITH  accepted answers that have no upvote\nselect a.Id as [Post Link], q.Score [Question Score], a.Score [Answer Score]\nfrom Posts q\njoin Posts a on a.Id = q.AcceptedAnswerId\nwhere q.Score > 0 and a.Score = 0\norder by q.Score desc, a.Score asc",
        "CreationDate": "2011-12-21 01:01:04",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 57590,
        "Title": "Questions with no upvote which have an accepted answer.",
        "Description": null,
        "QueryBody": "WITH  no upvote which have an accepted answer.\n\nselect a.Id as [Post Link], q.Score [Question Score], a.Score [Answer Score]\nfrom Posts q\njoin Posts a on a.Id = q.AcceptedAnswerId\nwhere q.Score = 0 \norder by q.Score asc, a.Score asc",
        "CreationDate": "2011-12-29 18:01:07",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 57633,
        "Title": "Posts by hour of the day",
        "Description": "The number of posts in the last year occuring on each hour of the day\n",
        "QueryBody": "DECLARE  @start datetime, @total float\n\nselect @start = dateadd(d, -365, max(CreationDate))\nfrom posts\n\nselect @total = count(*)\nfrom posts\nwhere CreationDate > @start\n\nselect datepart(hh, CreationDate) hour, count(*) posts, convert(varchar(6), round((count(*) \/ @total) * 100, 2)) + '%' pct\nfrom posts\nwhere creationDate > @start\ngroup by datepart(hh, CreationDate)\norder by count(*)",
        "CreationDate": "2011-12-30 04:47:03",
        "validated": false,
        "QueryBody_Original": "DECLARE  @start datetime, @total float\n\nselect @start = dateadd(d, -365, max(CreationDate))\nfrom posts\n\nselect @total = count(*)\nfrom posts\nwhere CreationDate > @start\n\nselect datepart(hh, CreationDate) hour, count(*) posts, convert(varchar(6), round((count(*) \/ @total) * 100, 2)) + '%' pct\nfrom posts\nwhere creationDate > @start\ngroup by datepart(hh, CreationDate)\norder by count(*)"
    },
    {
        "QuerySetId": 57636,
        "Title": "Answer count by hour and day for a tag",
        "Description": "The number of answers for a given tag in the last year occuring on each day of the week and each hour of the day\r\n",
        "QueryBody": "DECLARE  @start datetime, @total float, @tag varchar(50) = '##Tag##'\n\nselect @start = dateadd(d, -364, max(CreationDate))\nfrom posts\n\nselect @total = count(*)\nfrom posts\nwhere CreationDate > @start\nand posttypeid = 2\nand parentid in (\n  select pt.postid\n  from posttags pt\n  join Tags t on pt.tagid = t.id\n  where t.tagname like @tag\n  )\n  \n\nselect \n   datepart(hh, CreationDate) hour\n  ,datename(dw, CreationDate) day\n  ,count(*) posts\n  ,convert(varchar(6), round((count(*) \/ @total) * 100, 2)) + '%' pct\nfrom posts\nwhere creationDate > @start\nand posttypeid = 2\nand parentid in (\n  select pt.postid\n  from posttags pt\n  join Tags t on pt.tagid = t.id\n  where t.tagname like @tag\n  )\ngroup by datepart(hh, CreationDate), datename(dw, CreationDate)\norder by count(*)",
        "CreationDate": "2013-02-06 03:25:17",
        "validated": false,
        "QueryBody_Original": "DECLARE  @start datetime, @total float, @tag varchar(50) = '##Tag##'\n\nselect @start = dateadd(d, -364, max(CreationDate))\nfrom posts\n\nselect @total = count(*)\nfrom posts\nwhere CreationDate > @start\nand posttypeid = 2\nand parentid in (\n  select pt.postid\n  from posttags pt\n  join Tags t on pt.tagid = t.id\n  where t.tagname like @tag\n  )\n  \n\nselect \n   datepart(hh, CreationDate) hour\n  ,datename(dw, CreationDate) day\n  ,count(*) posts\n  ,convert(varchar(6), round((count(*) \/ @total) * 100, 2)) + '%' pct\nfrom posts\nwhere creationDate > @start\nand posttypeid = 2\nand parentid in (\n  select pt.postid\n  from posttags pt\n  join Tags t on pt.tagid = t.id\n  where t.tagname like @tag\n  )\ngroup by datepart(hh, CreationDate), datename(dw, CreationDate)\norder by count(*)"
    },
    {
        "QuerySetId": 58372,
        "Title": "Votes to old posts by age",
        "Description": "(From 100 answers you get roughly 1 vote per week)\n",
        "QueryBody": "DECLARE  @base as int = 4;\n\nwith\nRecentVotes as (\n  select PostId, count(id) as VoteCount\n  from Votes\n  where datediff(week, CreationDate, getdate()) = @base\n  group by PostId\n),\nAnswerAge as (\n  select Id as PostId, datediff(week, CreationDate, getdate()) as Age\n  from Posts\n  where PostTypeId = 2\n)\n\nselect Age, sum(VoteCount) * 1.0 \/ count(AnswerAge.PostId) as PostVotes\nfrom AnswerAge\n     left outer join RecentVotes on AnswerAge.PostId = RecentVotes.PostId\nwhere Age > @base\ngroup by Age\norder by Age",
        "CreationDate": "2012-01-09 06:36:51",
        "validated": false,
        "QueryBody_Original": "DECLARE  @base as int = 4;\n\nwith\nRecentVotes as (\n  select PostId, count(id) as VoteCount\n  from Votes\n  where datediff(week, CreationDate, getdate()) = @base\n  group by PostId\n),\nAnswerAge as (\n  select Id as PostId, datediff(week, CreationDate, getdate()) as Age\n  from Posts\n  where PostTypeId = 2\n)\n\nselect Age, sum(VoteCount) * 1.0 \/ count(AnswerAge.PostId) as PostVotes\nfrom AnswerAge\n     left outer join RecentVotes on AnswerAge.PostId = RecentVotes.PostId\nwhere Age > @base\ngroup by Age\norder by Age"
    },
    {
        "QuerySetId": 58448,
        "Title": "My suggested edit votes that got overruled",
        "Description": "Provides links to the suggested edits that you voted on, where the outcome went against your vote.\n",
        "QueryBody": "DECLARE  @UserId int = ##UserId##\n\nSELECT edit.PostId, edit.Id as [Suggested Edit Link]\nFROM SuggestedEditVotes vote, SuggestedEdits edit\nWHERE vote.UserId = @UserId\nAND vote.SuggestedEditId = edit.Id\nAND (edit.ApprovalDate IS NOT NULL AND vote.VoteTypeId = 3\nOR   edit.RejectionDate IS NOT NULL AND vote.VoteTypeId = 2);",
        "CreationDate": "2012-01-09 18:41:45",
        "validated": false,
        "QueryBody_Original": "DECLARE  @UserId int = ##UserId##\n\nSELECT edit.PostId, edit.Id as [Suggested Edit Link]\nFROM SuggestedEditVotes vote, SuggestedEdits edit\nWHERE vote.UserId = @UserId\nAND vote.SuggestedEditId = edit.Id\nAND (edit.ApprovalDate IS NOT NULL AND vote.VoteTypeId = 3\nOR   edit.RejectionDate IS NOT NULL AND vote.VoteTypeId = 2);"
    },
    {
        "QuerySetId": 58790,
        "Title": "Find duplicate e-mail accounts (via e-mail hash)",
        "Description": null,
        "QueryBody": "SELECT  \n    u1.EmailHash,\n    Count(u1.Id) AS Accounts,\n    (SELECT Cast(u2.Id AS varchar) + ' (' + u2.DisplayName + '), ' FROM Users u2 WHERE u2.EmailHash = u1.EmailHash FOR XML PATH ('')) AS IdsAndNames\nFROM\n    Users u1\nWHERE\n    u1.EmailHash IS NOT NULL\nGROUP BY\n    u1.EmailHash\nHAVING\n    Count(u1.Id) > 0\nORDER BY \n    Accounts DESC",
        "CreationDate": "2014-02-11 05:03:24",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 58830,
        "Title": "How many upvotes do I have for each tag (with Google Chart)",
        "Description": "Modified Sam's query to test Google Charts embedding\r\n",
        "QueryBody": "DECLARE  @UserId int = ##UserId##\n\nSELECT TOP 5 \n    TagName,\n    COUNT(*) AS UpVotes \nINTO #orig    \nFROM Tags\n    INNER JOIN PostTags ON PostTags.TagId = Tags.id\n    INNER JOIN Posts ON Posts.ParentId = PostTags.PostId\n    INNER JOIN Votes ON Votes.PostId = Posts.Id and VoteTypeId = 2\nWHERE \n    Posts.OwnerUserId = @UserId\nGROUP BY TagName \nORDER BY UpVotes DESC\n\nDECLARE @TagList varchar(8000)\nSELECT @TagList = COALESCE(@TagList + '%7c', '') + TagName\nFROM #orig\n\nDECLARE @VotesList varchar(8000)\nSELECT @VotesList = COALESCE(@VotesList + ',', '') + CAST(UpVotes AS varchar(100))\nFROM #orig\n\nSELECT TagName, UpVotes,\n       'http:\/\/chart.apis.google.com\/chart?cht=p&chco=FF0000,FFFF00|FF8000,00FF00|00FF00,0000FF&chd=t:'+@VotesList+'&chs=250x100&chl='+@TagList+'|Chart' [Chart Link]\nFROM #orig",
        "CreationDate": "2012-01-10 21:59:50",
        "validated": false,
        "QueryBody_Original": "DECLARE  @UserId int = ##UserId##\n\nSELECT TOP 5 \n    TagName,\n    COUNT(*) AS UpVotes \nINTO #orig    \nFROM Tags\n    INNER JOIN PostTags ON PostTags.TagId = Tags.id\n    INNER JOIN Posts ON Posts.ParentId = PostTags.PostId\n    INNER JOIN Votes ON Votes.PostId = Posts.Id and VoteTypeId = 2\nWHERE \n    Posts.OwnerUserId = @UserId\nGROUP BY TagName \nORDER BY UpVotes DESC\n\nDECLARE @TagList varchar(8000)\nSELECT @TagList = COALESCE(@TagList + '%7c', '') + TagName\nFROM #orig\n\nDECLARE @VotesList varchar(8000)\nSELECT @VotesList = COALESCE(@VotesList + ',', '') + CAST(UpVotes AS varchar(100))\nFROM #orig\n\nSELECT TagName, UpVotes,\n       'http:\/\/chart.apis.google.com\/chart?cht=p&chco=FF0000,FFFF00|FF8000,00FF00|00FF00,0000FF&chd=t:'+@VotesList+'&chs=250x100&chl='+@TagList+'|Chart' [Chart Link]\nFROM #orig"
    },
    {
        "QuerySetId": 59234,
        "Title": "Number of users with 20k+ rep",
        "Description": "Number of users with 20k+ rep",
        "QueryBody": "SELECT  COUNT(*) FROM USERS WHERE Reputation >= ##N:int?20000##",
        "CreationDate": "2015-06-12 03:23:01",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 59235,
        "Title": "Number of users with 10k+ rep",
        "Description": null,
        "QueryBody": "WITH  1k+ rep\n-- Enter Query Description\n\nselect count(*) from users where reputation >= 10000",
        "CreationDate": "2012-01-14 08:50:28",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 59367,
        "Title": "My most viewed accepted answers (based on Question view count)",
        "Description": null,
        "QueryBody": "SELECT  Answers.Id as [Post Link], Question.ViewCount \nFROM Posts as Answers, Posts as Question \nWHERE Answers.PostTypeId = 2 \nAND Answers.OwnerUserId = ##UserId## \nAND Question.AcceptedAnswerId = Answers.Id\nORDER BY Question.ViewCount DESC;",
        "CreationDate": "2012-01-16 19:12:54",
        "validated": false,
        "QueryBody_Original": "SELECT  Answers.Id as [Post Link], Question.ViewCount \nFROM Posts as Answers, Posts as Question \nWHERE Answers.PostTypeId = 2 \nAND Answers.OwnerUserId = ##UserId## \nAND Question.AcceptedAnswerId = Answers.Id\nORDER BY Question.ViewCount DESC;"
    },
    {
        "QuerySetId": 59452,
        "Title": "Comments by one user on another user's posts",
        "Description": null,
        "QueryBody": "DECLARE  @CommentatorId int = ##CommentatorId##\nDECLARE @PosterId int = ##PosterId##\n\nselect c.Text, c.PostId as [Post Link]\nfrom Comments c join Posts p on (c.PostId = p.Id)\nwhere c.UserId = @CommentatorId\n  and p.OwnerUserId = @PosterId",
        "CreationDate": "2012-01-17 06:02:45",
        "validated": false,
        "QueryBody_Original": "DECLARE  @CommentatorId int = ##CommentatorId##\nDECLARE @PosterId int = ##PosterId##\n\nselect c.Text, c.PostId as [Post Link]\nfrom Comments c join Posts p on (c.PostId = p.Id)\nwhere c.UserId = @CommentatorId\n  and p.OwnerUserId = @PosterId"
    },
    {
        "QuerySetId": 59456,
        "Title": "Jon Skeet comparison (counts only)",
        "Description": "What questions does Jon Skeet have a higher\/lower score on than me?\r\n",
        "QueryBody": "DECLARE  @UserId int = ##UserId##;\n\nwith fights as (\n  select myAnswer.ParentId as Question,\n   myAnswer.Score as MyScore,\n   jonsAnswer.Score as JonsScore\n  from Posts as myAnswer\n  inner join Posts as jonsAnswer\n   on jonsAnswer.OwnerUserId = 22656 and myAnswer.ParentId = jonsAnswer.ParentId\n  where myAnswer.ownerUserId = @UserId and myAnswer.postTypeId = 2\n)\n\nselect Winner, count(*)\nfrom (select\n  case\n   when myScore > JonsScore then 'You win'\n   when myScore < JonsScore then 'Jon wins'\n   else 'Tie'\n  end as 'Winner'\n  from fights) sub\ngroup by sub.Winner",
        "CreationDate": "2012-01-17 06:31:03",
        "validated": false,
        "QueryBody_Original": "DECLARE  @UserId int = ##UserId##;\n\nwith fights as (\n  select myAnswer.ParentId as Question,\n   myAnswer.Score as MyScore,\n   jonsAnswer.Score as JonsScore\n  from Posts as myAnswer\n  inner join Posts as jonsAnswer\n   on jonsAnswer.OwnerUserId = 22656 and myAnswer.ParentId = jonsAnswer.ParentId\n  where myAnswer.ownerUserId = @UserId and myAnswer.postTypeId = 2\n)\n\nselect Winner, count(*)\nfrom (select\n  case\n   when myScore > JonsScore then 'You win'\n   when myScore < JonsScore then 'Jon wins'\n   else 'Tie'\n  end as 'Winner'\n  from fights) sub\ngroup by sub.Winner"
    },
    {
        "QuerySetId": 59711,
        "Title": "Question Body length percentile and statistics with tag input",
        "Description": null,
        "QueryBody": "WITH  cte as (\nSELECT\n      p.id,\n      ntile(100) over (order by len(p.body)) percentile\n      FROM posts p\n      INNER JOIN posttags pt\n      ON p.id = pt.postId\n      INNER JOIN tags t\n      ON pt.tagid = t.id\n       where p.posttypeid = 1\n       and t.tagname = ##tagname:string##\n      )\n\nSELECT\n\n    cte.percentile,\n    min(len(p.body)) LengthStart,\n    max(len(p.body)) LengthStop,\n    avg(cast(p.score as decimal(10,4))) avgScore,\n    avg(cast(p.answerCount as decimal(10,4))) AvgAnswerCount,\n    avg(cast(p.viewCount as decimal(10,4))) AvgViewCount,\n    avg(cast(p.CommentCount as decimal(10,4))) AvgCommentCount\nFROM\n   posts p\n   inner join cte \n   on p.id = cte.id\n\ngroup by cte.percentile\norder by cte.percentile",
        "CreationDate": "2012-01-20 03:17:53",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 59985,
        "Title": "Weighted Activity Gauge for Scifi",
        "Description": null,
        "QueryBody": "SELECT  DISTINCT\n  pt.Name as PostType, \n  p.Id as [Post Link],\n  p.CreationDate,\n  p.Score,\n  isnull(p.ViewCount, p2.ViewCount) as [View Count],\n  3 - p.PostTypeId as Weight --+ \n  -- Comment out the case if answers should have weight 1, \n  -- regardless of if they are the accepted answer.\n  --  CASE\n  --    WHEN p2.AcceptedAnswerId = p.Id \n  --    THEN 2\n  --    ELSE 0\n  --  END AS Weight\nFROM Posts p\nLEFT JOIN PostTypes pt\nON p.PostTypeId = pt.Id\nLEFT JOIN Posts p2\nON p.ParentId = p2.Id\nJOIN PostTags ptag\nON p.Id = ptag.PostId OR\n  p2.Id = ptag.PostId\nJOIN Tags t\nON t.Id = ptag.TagId\nWHERE t.TagName in ('comics','marvel-comics','dc-comics') AND\n  p.OwnerUserId = ##UserID:string##",
        "CreationDate": "2019-05-14 05:40:32",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 60065,
        "Title": "High Rep users with the peer pressure badge",
        "Description": "A way to find which users (mostly high rep) have the peer pressure badge. Was just playing around with T-SQL and cooked this. =D",
        "QueryBody": "DECLARE  @RepLimit int = ##ReputationLimit##\n\nSelect Id as [User Link], DisplayName, Reputation\n from Users\n where Reputation > @RepLimit\n   and not exists (Select Id from Badges b where b.UserId = Users.Id and b.Name = 'Peer Pressure')   \norder by Reputation desc",
        "CreationDate": "2020-08-15 00:30:53",
        "validated": false,
        "QueryBody_Original": "DECLARE  @RepLimit int = ##ReputationLimit##\n\nSelect Id as [User Link], DisplayName, Reputation\n from Users\n where Reputation > @RepLimit\n   and not exists (Select Id from Badges b where b.UserId = Users.Id and b.Name = 'Peer Pressure')   \norder by Reputation desc"
    },
    {
        "QuerySetId": 60631,
        "Title": "Top tags based on question count",
        "Description": "Select 200 tags with most questions\r\n",
        "QueryBody": "SELECT  200 tags with most questions\n\nSELECT  TOP 20\n    Tags.tagname AS 'Tag', \n    count(Posts.id) AS 'Questions'\n\nFROM Tags \n    JOIN PostTags ON PostTags.tagid = Tags.id\n    JOIN Posts ON Posts.id = PostTags.postid\n    \nWHERE Posts.ClosedDate IS NOT NULL\n\n\nGROUP BY Tags.tagname\nORDER BY count(Posts.id) DESC",
        "CreationDate": "2012-08-28 22:33:50",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 60862,
        "Title": "See non up\/down-votes on my posts",
        "Description": null,
        "QueryBody": "DECLARE  @UserId int = ##UserId##;\n\n\nselect * \nfrom posts \ninner join votes\non posts.id = votes.postid\ninner join votetypes\non votetypeid = votetypes.id\nwhere owneruserid = @UserId and votetypeid not in (2, 3)",
        "CreationDate": "2012-02-05 19:42:41",
        "validated": false,
        "QueryBody_Original": "DECLARE  @UserId int = ##UserId##;\n\n\nselect * \nfrom posts \ninner join votes\non posts.id = votes.postid\ninner join votetypes\non votetypeid = votetypes.id\nwhere owneruserid = @UserId and votetypeid not in (2, 3)"
    },
    {
        "QuerySetId": 60869,
        "Title": "See all of my suggested edits",
        "Description": null,
        "QueryBody": "DECLARE  @UserId int = ##UserId##;\n\nselect postid as [Post Link], * \nfrom suggestededits \nwhere owneruserid = @UserId;",
        "CreationDate": "2012-02-05 20:38:37",
        "validated": false,
        "QueryBody_Original": "DECLARE  @UserId int = ##UserId##;\n\nselect postid as [Post Link], * \nfrom suggestededits \nwhere owneruserid = @UserId;"
    },
    {
        "QuerySetId": 60981,
        "Title": "See my posts that have a suggested edit",
        "Description": null,
        "QueryBody": "DECLARE  @UserId int = ##userid##;\n\n\nselect p.id as [Post Link], * \nfrom posts p\ninner join suggestededits e\non p.id = e.postid\nwhere p.owneruserid = @UserId",
        "CreationDate": "2012-02-07 01:54:37",
        "validated": false,
        "QueryBody_Original": "DECLARE  @UserId int = ##userid##;\n\n\nselect p.id as [Post Link], * \nfrom posts p\ninner join suggestededits e\non p.id = e.postid\nwhere p.owneruserid = @UserId"
    },
    {
        "QuerySetId": 61112,
        "Title": "Is the site ready for the Generalist Badge?",
        "Description": "Lists the top 40 tags, how many times they're used each, and how many questions are needed with that tag so that the Site is eligible for the Generalist badge",
        "QueryBody": "WITH  that tag so that the Site is eligible for the Generalist badge\n\nSELECT TOP 40 TagName, COUNT(p.TagId) as 'Uses', 200-Count(p.TagId) as 'Questions Needed WITH this Tag Left'\nFROM Tags t\nINNER JOIN PostTags p\nON p.TagId = t.Id\nGROUP BY t.TagName\nORDER BY Uses DESC",
        "CreationDate": "2012-03-28 06:56:59",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 61143,
        "Title": "Which of my answers have helped the internet?",
        "Description": "Shows you which questions you've answered that have significant view counts.",
        "QueryBody": "SELECT  TOP 100 q.ViewCount                           AS [Views],\n               ROUND(q.ViewCount \/ q.AnswerCount, 2) AS [Views per Answer],\n               q.AnswerCount                         AS [Answer Count],\n               q.Id                                  AS [Post Link],\n               a.Score                               AS [Answer Score],\n               (CASE\n                   WHEN q.AcceptedAnswerId = a.Id THEN 'Yes'\n                   ELSE NULL\n                END)                                 AS [Accepted]\nFROM   Posts q\n       INNER JOIN Posts a\n         ON q.Id = a.ParentId\nWHERE  a.OwnerUserId = ##UserId:int##\nORDER  BY [Views per Answer] DESC",
        "CreationDate": "2012-02-08 20:44:04",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 61234,
        "Title": "User Answer Accepted Rate (per tag)",
        "Description": "Gives the percentage of accepted answers for a user, per tag.",
        "QueryBody": "DECLARE  @UserId int = ##UserId##\n\nSELECT\n  t.TagName,\n  count(*) AS NumAnswers,\n  sum(case when q.AcceptedAnswerId = a.Id then 1 else 0 end) AS NumAccepted,\n  (sum(case when q.AcceptedAnswerId = a.Id then 1 else 0 end)*100.0\/count(*)) AS AcceptedPercent\nFROM Posts a\nINNER JOIN Posts q ON a.ParentId = q.Id\nINNER JOIN PostTags pt ON pt.PostId = q.Id\nINNER JOIN Tags t ON t.Id = pt.TagId\nGROUP BY t.TagName\nORDER BY NumAnswers DESC, AcceptedPercent DESC",
        "CreationDate": "2013-03-16 18:07:19",
        "validated": false,
        "QueryBody_Original": "DECLARE  @UserId int = ##UserId##\n\nSELECT\n  t.TagName,\n  count(*) AS NumAnswers,\n  sum(case when q.AcceptedAnswerId = a.Id then 1 else 0 end) AS NumAccepted,\n  (sum(case when q.AcceptedAnswerId = a.Id then 1 else 0 end)*100.0\/count(*)) AS AcceptedPercent\nFROM Posts a\nINNER JOIN Posts q ON a.ParentId = q.Id\nINNER JOIN PostTags pt ON pt.PostId = q.Id\nINNER JOIN Tags t ON t.Id = pt.TagId\nGROUP BY t.TagName\nORDER BY NumAnswers DESC, AcceptedPercent DESC"
    },
    {
        "QuerySetId": 61457,
        "Title": "Votes and Posts Per Week",
        "Description": null,
        "QueryBody": "SELECT  Dateadd(week, Datepart(week, creationdate), '1\/1\/' + \n                   CAST(YEAR(creationdate) AS \n                                CHAR(4))) \n                    cdate,\n                id \n         FROM   posts \n         WHERE  OwneruserID = ##UserID##",
        "CreationDate": "2012-02-14 23:43:59",
        "validated": false,
        "QueryBody_Original": "SELECT  Dateadd(week, Datepart(week, creationdate), '1\/1\/' + \n                   CAST(YEAR(creationdate) AS \n                                CHAR(4))) \n                    cdate,\n                id \n         FROM   posts \n         WHERE  OwneruserID = ##UserID##"
    },
    {
        "QuerySetId": 61534,
        "Title": "Feedback for a specific post",
        "Description": "Get anonymous\/low-rep feedback for a specific post",
        "QueryBody": "SELECT  p.Id                                                           AS [Post Link],\n       SUM(CASE f.VoteTypeId WHEN 2 THEN 1 WHEN 3 THEN -1 ELSE 0 END) AS [Feedback Score],\n       SUM(CASE WHEN f.VoteTypeId = 2 THEN 1 ELSE 0 END)              AS Helpful,\n       SUM(CASE WHEN f.VoteTypeId = 3 THEN 1 ELSE 0 END)              AS Unhelpful,\n       p.Score                                                        AS [Actual Score]\nFROM   Posts p\n       JOIN PostFeedback f\n         ON f.PostId = p.Id\nWHERE  p.Id = ##PostId:int##\nGROUP  BY p.Id, p.Score",
        "CreationDate": "2012-02-15 23:03:44",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 61582,
        "Title": "Number of posts for a selected tag, broken down by month and year",
        "Description": null,
        "QueryBody": "DECLARE  @tag varchar(25) = ##tagname##;\n\n\nselect \n  row_number() over(order by \n    year(creationdate), month(creationdate)) as monthid, \n  month(creationdate) as month, \n  year(creationdate) as year, count(*) as number\nfrom (select p.postid\nfrom posttags p\ninner join tags t\non p.tagid = t.id\nwhere t.tagname = @tag) l\ninner join posts r\non l.postid = r.id\ngroup by year(creationdate), month(creationdate)\norder by year, month",
        "CreationDate": "2012-02-16 21:17:53",
        "validated": false,
        "QueryBody_Original": "DECLARE  @tag varchar(25) = ##tagname##;\n\n\nselect \n  row_number() over(order by \n    year(creationdate), month(creationdate)) as monthid, \n  month(creationdate) as month, \n  year(creationdate) as year, count(*) as number\nfrom (select p.postid\nfrom posttags p\ninner join tags t\non p.tagid = t.id\nwhere t.tagname = @tag) l\ninner join posts r\non l.postid = r.id\ngroup by year(creationdate), month(creationdate)\norder by year, month"
    },
    {
        "QuerySetId": 62075,
        "Title": "Highest rate  of question asking",
        "Description": null,
        "QueryBody": "SELECT  TOP 100 u.id\n--FROM users u\n--INNER JOIN posts p\n\n--WHERE p.posttypeid = 1\n\nSELECT * from posttypes",
        "CreationDate": "2012-02-20 20:11:38",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 62344,
        "Title": "Top 25 comments with text",
        "Description": null,
        "QueryBody": "WITH  text\n\nSELECT TOP 25\n  c.PostId AS [Post Link],\n  c.Score,\n  u.Id AS [User Link],\n  c.text\nFROM Comments AS c\n  INNER JOIN Users AS u\n    ON c.UserId = u.Id\nORDER BY\n c.Score DESC",
        "CreationDate": "2016-11-16 02:27:00",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 62357,
        "Title": "What have I voted by tag?",
        "Description": null,
        "QueryBody": "DECLARE  @UserId int = ##UserId##\n\nSELECT DISTINCT --TOP 20 \n    Posts.Title, Posts.Body, Posts.Id, Posts.Score, Posts.OwnerDisplayName, Posts.Tags, TagName\nFROM Tags\n    INNER JOIN PostTags ON PostTags.TagId = Tags.id\n    INNER JOIN Posts ON Posts.ParentId = PostTags.PostId\n    INNER JOIN Votes ON Votes.PostId = Posts.Id and VoteTypeId = 2\nWHERE \n    TagName = 'backbone.js'\nAND Score > 10\nAND Score < 25\n\nORDER BY Score DESC",
        "CreationDate": "2012-02-24 00:28:17",
        "validated": false,
        "QueryBody_Original": "DECLARE  @UserId int = ##UserId##\n\nSELECT DISTINCT --TOP 20 \n    Posts.Title, Posts.Body, Posts.Id, Posts.Score, Posts.OwnerDisplayName, Posts.Tags, TagName\nFROM Tags\n    INNER JOIN PostTags ON PostTags.TagId = Tags.id\n    INNER JOIN Posts ON Posts.ParentId = PostTags.PostId\n    INNER JOIN Votes ON Votes.PostId = Posts.Id and VoteTypeId = 2\nWHERE \n    TagName = 'backbone.js'\nAND Score > 10\nAND Score < 25\n\nORDER BY Score DESC"
    },
    {
        "QuerySetId": 62486,
        "Title": "Users with zero accept rate",
        "Description": "Does not count self-answers.\r\nShows users with at least @MinAnswers answers.\r\n",
        "QueryBody": "WITH  highest accept rate of their answers\n-- Does not count self-answers. \n-- Shows users WITH at least @MinAnswers answers.\n\nSELECT TOP 1000\n  u.Id AS [User Link]\n ,COUNT(*) AS NumQuestions\n ,SUM( CASE WHEN q.AcceptedAnswerId IS NOT NULL THEN 1 ELSE 0 END) AS NumAccepted\n ,MIN(u.Reputation) AS Reputation\nFROM       Posts q\nINNER JOIN Users u ON u.Id = q.OwnerUserId\nWHERE q.PostTypeId = 1 -- question\nGROUP BY u.Id\nORDER BY\n  NumAccepted ASC,\n  NumQuestions DESC",
        "CreationDate": "2016-06-19 00:43:01",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 62549,
        "Title": "Posts that are one upvote away from earning you \"Necromancer\"",
        "Description": "Returns a list of questions for a given user that have 4 upvotes and are at least 60 days old, meaning the next upvote on any of the posts will earn the user a Necromancer badge.",
        "QueryBody": "DECLARE  @userId int = ##userId##\n\nselect\n    p.ParentId as [Post Link]\n   ,datediff(day, parent.CreationDate, p.CreationDate) as [Days after Ask for Answer]\n   ,count(*) as voteCount\nfrom\n    Posts p         \n    inner join Votes v\n        on v.PostId = p.Id\n        and v.VoteTypeId = 2\n     inner join Posts parent\n        on parent.Id = p.ParentId\nwhere\n    p.OwnerUserId = @userId\n    and datediff(day, parent.CreationDate, p.CreationDate) >= 60\ngroup by\n    p.ParentId\n   ,p.Id\n   ,datediff(day, parent.CreationDate, p.CreationDate)\nhaving\n    count(*) >= 5\norder by\n    voteCount desc,\n    datediff(day, parent.CreationDate, p.CreationDate) desc",
        "CreationDate": "2020-07-14 23:22:28",
        "validated": false,
        "QueryBody_Original": "DECLARE  @userId int = ##userId##\n\nselect\n    p.ParentId as [Post Link]\n   ,datediff(day, parent.CreationDate, p.CreationDate) as [Days after Ask for Answer]\n   ,count(*) as voteCount\nfrom\n    Posts p         \n    inner join Votes v\n        on v.PostId = p.Id\n        and v.VoteTypeId = 2\n     inner join Posts parent\n        on parent.Id = p.ParentId\nwhere\n    p.OwnerUserId = @userId\n    and datediff(day, parent.CreationDate, p.CreationDate) >= 60\ngroup by\n    p.ParentId\n   ,p.Id\n   ,datediff(day, parent.CreationDate, p.CreationDate)\nhaving\n    count(*) >= 5\norder by\n    voteCount desc,\n    datediff(day, parent.CreationDate, p.CreationDate) desc"
    },
    {
        "QuerySetId": 62568,
        "Title": "My posts which contain an embedded video",
        "Description": "So this happened: http:\/\/meta.stackoverflow.com\/a\/123438\r\n\r\nAnd now I want to go back and fix some of my posts.",
        "QueryBody": "SELECT  Score,\n       Id AS [Post Link]\nFROM   Posts\nWHERE  OwnerUserId = ##UserId:int##\n       AND Body LIKE '%<object %'\nORDER  BY CreationDate DESC",
        "CreationDate": "2012-02-27 21:29:36",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 62570,
        "Title": "Answers to my questions which contain an embedded video",
        "Description": null,
        "QueryBody": "SELECT  q.Score,\n       a.Score       AS [Answer Score],\n       a.Id          AS [Post Link],\n       a.OwnerUserId AS [User Link]\nFROM   Posts q\n       INNER JOIN Posts a\n         ON a.ParentId = q.Id\nWHERE  q.OwnerUserId = ##UserId:int##\n       AND a.Body LIKE '%<object %'",
        "CreationDate": "2012-02-27 22:00:56",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 62625,
        "Title": "Posting activity by hour of day",
        "Description": null,
        "QueryBody": "SELECT  HourOfDay, count(*) as PostCount\nfrom\n  (SELECT datepart(hh,dateadd(hh,##UTCTimeShift##,CreationDate)) as HourOfDay\n  from Posts\n  where OwnerUserId = ##UserId##) sub\ngroup by HourOfDay\norder by HourOfDay",
        "CreationDate": "2012-02-28 08:26:55",
        "validated": false,
        "QueryBody_Original": "SELECT  HourOfDay, count(*) as PostCount\nfrom\n  (SELECT datepart(hh,dateadd(hh,##UTCTimeShift##,CreationDate)) as HourOfDay\n  from Posts\n  where OwnerUserId = ##UserId##) sub\ngroup by HourOfDay\norder by HourOfDay"
    },
    {
        "QuerySetId": 62727,
        "Title": "Votes breakdown by age, for each day",
        "Description": "Break down the number of upvotes received each day by the age of the post.",
        "QueryBody": "SELECT \n  Convert(datetime, v.CreationDate, 102) AS [Day],\n  Count(CASE WHEN DateDiff(second, p.CreationDate, v.CreationDate) > 30*86400 THEN 1 ELSE NULL END) AS [> 30 days],\n  Count(CASE WHEN DateDiff(second, p.CreationDate, v.CreationDate) BETWEEN 7*86400+1 AND 30*86400 THEN 1 ELSE NULL END) AS [8\u201330 days],\n  Count(CASE WHEN DateDiff(second, p.CreationDate, v.CreationDate) BETWEEN 86400+1 AND 7*86400 THEN 1 ELSE NULL END) AS [2\u20137 days],\n  Count(CASE WHEN DateDiff(second, p.CreationDate, v.CreationDate) <= 86400 THEN 1 ELSE NULL END) AS [<=2 days],\n  Count(*) AS [Total Votes]\nFROM Votes v, Posts p\nWHERE v.PostId = p.Id\n  AND p.OwnerUserId = ##User##\nGROUP BY Convert(datetime, v.CreationDate, 112)\nORDER BY [> 30 days]",
        "CreationDate": "2012-07-08 12:00:44",
        "validated": false,
        "QueryBody_Original": "SELECT \n  Convert(datetime, v.CreationDate, 102) AS [Day],\n  Count(CASE WHEN DateDiff(second, p.CreationDate, v.CreationDate) > 30*86400 THEN 1 ELSE NULL END) AS [> 30 days],\n  Count(CASE WHEN DateDiff(second, p.CreationDate, v.CreationDate) BETWEEN 7*86400+1 AND 30*86400 THEN 1 ELSE NULL END) AS [8\u201330 days],\n  Count(CASE WHEN DateDiff(second, p.CreationDate, v.CreationDate) BETWEEN 86400+1 AND 7*86400 THEN 1 ELSE NULL END) AS [2\u20137 days],\n  Count(CASE WHEN DateDiff(second, p.CreationDate, v.CreationDate) <= 86400 THEN 1 ELSE NULL END) AS [<=2 days],\n  Count(*) AS [Total Votes]\nFROM Votes v, Posts p\nWHERE v.PostId = p.Id\n  AND p.OwnerUserId = ##User##\nGROUP BY Convert(datetime, v.CreationDate, 112)\nORDER BY [> 30 days]"
    },
    {
        "QuerySetId": 62780,
        "Title": "Votes for a specific post",
        "Description": null,
        "QueryBody": "DECLARE  @PostId int = ##PostId##\n\nselect * from Votes\nwhere PostId = @PostId",
        "CreationDate": "2012-03-01 00:47:02",
        "validated": false,
        "QueryBody_Original": "DECLARE  @PostId int = ##PostId##\n\nselect * from Votes\nwhere PostId = @PostId"
    },
    {
        "QuerySetId": 62812,
        "Title": "List of unscored and accepted answers",
        "Description": "A list of all your answers that have no score and no accepts. :'(",
        "QueryBody": "SELECT \n    a.Id as [Post Link],\n    --q.Title,\n    a.Score,\n    a.CommunityOwnedDate,\n    a.postTypeId\nfrom\n--    Posts q\n--  inner join\n    Posts a\n  --on a.Id = q.AcceptedAnswerId\nwhere\n      a.OwnerUserId = ##UserId##\n  and a.postTypeId = 2\n  and a.score = 0 *\/\n  \nSELECT \n --a.Id as [Post Link], \n --a.Score, \n --a.CommunityOwnedDate, \n --a.postTypeId,\n --a.AcceptedAnswerId,\n --q.AcceptedAnswerId as [AnswerID],\n Count(*) as AnswerCount\n  --on a.Id = q.AcceptedAnswerId\n --v.VoteTypeId\nFROM \n Posts a \n left join\n Posts q\n ON a.Id = q.AcceptedAnswerId\nWHERE \n a.OwnerUserId = ##UserId## \n and a.postTypeId = 2 \n and a.score = 0\nGROUP BY \n    q.AcceptedAnswerId",
        "CreationDate": "2012-03-02 10:29:35",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 63250,
        "Title": "What are the most viewed questions for a given tag (+date)?",
        "Description": null,
        "QueryBody": "DECLARE  @lastDate DATE = ( \n\tselect MAX(CreationDate) \n\tfrom Posts \n)\nselect @lastDate",
        "CreationDate": "2013-01-31 20:17:27",
        "validated": false,
        "QueryBody_Original": "DECLARE  @lastDate DATE = ( \n\tselect MAX(CreationDate) \n\tfrom Posts \n)\nselect @lastDate"
    },
    {
        "QuerySetId": 64321,
        "Title": "User Counts of ratio of answer to question",
        "Description": null,
        "QueryBody": "SELECT  *\nFROM   (SELECT p.owneruserid, \n               p.id, \n               pt.name \n        FROM   posts p \n               INNER JOIN posttypes pt \n                 ON p.posttypeid = pt.id) p \n       PIVOT (\n       COUNT (p.id) \n       FOR p.name IN ([Question], [Answer])) AS pvt",
        "CreationDate": "2012-03-16 19:47:49",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 64377,
        "Title": "Percent Users Active In Last 30 Days",
        "Description": null,
        "QueryBody": "SELECT  Count(*) FROM Users WHERE DATEDIFF(day,LastAccessDate, GETDATE()) < 30 And (SELECT Count(*) FROM Posts WHERE (Posts.OwnerUserId = Users.Id) AND (DATEDIFF(day, CreationDate, GETDATE()) < 30)) > 1) --pople active in the last thirty days who posted itleast one post in the last thirty days\n(SELECT Count(*) FROM Users WHERE DATEDIFF(day,LastAccessDate, GETDATE()) < 30) --users visited in last 30 days\n(SELECT Count(*) FROM Users WHERE DATEDIFF(day,LastAccessDate, GETDATE()) > 30) --users who haven't visited in last 30 days\n(SELECT Count(*) FROM Users) -- total users",
        "CreationDate": "2012-03-18 22:57:27",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 64517,
        "Title": "Date Only \/ Time Only",
        "Description": null,
        "QueryBody": "SELECT  LTRIM(RIGHT(CONVERT(VARCHAR(20), GETDATE(), 106), 7))\n\n\nSELECT CONVERT(VARCHAR(20), GETDATE(), 106)",
        "CreationDate": "2019-08-13 09:48:07",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 64581,
        "Title": "TOP 100 users from Greece",
        "Description": "Lists the top 100 users (ranked by reputation) that are located in Greece according to their profile information.\r\nA range of options is used to pinpoint members from Greece based on popular locations used.\r\n",
        "QueryBody": "SELECT  TOP 100 \n   ROW_NUMBER() OVER(ORDER BY Reputation DESC) AS Rank#,\n   Id as [User Link],\n   Reputation,\n   WebsiteUrl,\n   Location\nFROM\n   Users\nWHERE\n   Location like N'%Thess%'\n   OR Location like N'%Greece%'\n   OR Location like N'%Gr'\n   OR Location like N'%Patra%'\n   OR (Location like N'%Athens%' AND Location NOT like N'%GA%')\nORDER BY\n   reputation DESC",
        "CreationDate": "2020-08-18 17:14:00",
        "validated": false,
        "QueryBody_Original": "SELECT  TOP 100 \n   ROW_NUMBER() OVER(ORDER BY Reputation DESC) AS Rank#,\n   Id as [User Link],\n   Reputation,\n   WebsiteUrl,\n   Location\nFROM\n   Users\nWHERE\n   Location like N'%Thess%'\n   OR Location like N'%Greece%'\n   OR Location like N'%Gr'\n   OR Location like N'%Patra%'\n   OR (Location like N'%Athens%' AND Location NOT like N'%GA%')\nORDER BY\n   reputation DESC"
    },
    {
        "QuerySetId": 64595,
        "Title": "User's comments ordered by score",
        "Description": null,
        "QueryBody": "SELECT  Score, Text, PostId as [Post Link] FROM Comments WHERE UserId = ##UserId:int## ORDER BY Score DESC",
        "CreationDate": "2012-03-21 19:12:42",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 64667,
        "Title": "Concatentate using group by ",
        "Description": null,
        "QueryBody": "DECLARE  @UserId int = ##UserId##\n\nselect C1.object_id,\n       stuff((select ','+C2.name\n              from sys.all_columns as C2\n              where C1.object_id = C2.object_id\n              for xml path(''),  type).value('.', 'nvarchar(max)'), 1, 1, '')\nfrom sys.all_columns as C1\ngroup by C1.object_id",
        "CreationDate": "2012-03-22 10:13:07",
        "validated": false,
        "QueryBody_Original": "DECLARE  @UserId int = ##UserId##\n\nselect C1.object_id,\n       stuff((select ','+C2.name\n              from sys.all_columns as C2\n              where C1.object_id = C2.object_id\n              for xml path(''),  type).value('.', 'nvarchar(max)'), 1, 1, '')\nfrom sys.all_columns as C1\ngroup by C1.object_id"
    },
    {
        "QuerySetId": 65154,
        "Title": "users by location (stack overflow)",
        "Description": null,
        "QueryBody": "SELECT  TOP(100)\n  u.Id,\n  u.DisplayName,\n  u.Reputation,\n  u.WebsiteUrl,\n  u.Age,\n  u.LastAccessDate,\n  u.Location\nFROM Users u\nWHERE (LOWER(u.Location) LIKE LOWER(##Location:string##)) or \n(LOWER(u.Location) like LOWER(##AltLocation:string##))\nOR (LOWER(u.Location) like LOWER(##AltLocation2:string##))\nORDER by u.Reputation DESC",
        "CreationDate": "2012-03-27 10:27:21",
        "validated": false,
        "QueryBody_Original": "SELECT  TOP(100)\n  u.Id,\n  u.DisplayName,\n  u.Reputation,\n  u.WebsiteUrl,\n  u.Age,\n  u.LastAccessDate,\n  u.Location\nFROM Users u\nWHERE (LOWER(u.Location) LIKE LOWER(##Location:string##)) or \n(LOWER(u.Location) like LOWER(##AltLocation:string##))\nOR (LOWER(u.Location) like LOWER(##AltLocation2:string##))\nORDER by u.Reputation DESC"
    },
    {
        "QuerySetId": 65887,
        "Title": "How close am I to the Self-learner badge? All self-answers to my own questions",
        "Description": "For each answer to my own questions I have question score and answer score. To get the Self-learner badge I need at least 3 votes on an answer among these.",
        "QueryBody": "SELECT  \n    q.Id as QuestionId,\n    a.Id as AnswerId,\n    q.Id as [Post Link],\n    q.Score as QuestionScore,\n    a.Score as MyAnswerScore\nFROM\n    Posts q\n  INNER JOIN \n    Posts a ON q.AcceptedAnswerId = a.Id\n  INNER JOIN\n    Users ON Users.Id = q.OwnerUserId\nWHERE \n    q.OwnerUserId = a.OwnerUserId and Users.Id = ##UserId##",
        "CreationDate": "2012-04-04 11:21:30",
        "validated": false,
        "QueryBody_Original": "SELECT  \n    q.Id as QuestionId,\n    a.Id as AnswerId,\n    q.Id as [Post Link],\n    q.Score as QuestionScore,\n    a.Score as MyAnswerScore\nFROM\n    Posts q\n  INNER JOIN \n    Posts a ON q.AcceptedAnswerId = a.Id\n  INNER JOIN\n    Users ON Users.Id = q.OwnerUserId\nWHERE \n    q.OwnerUserId = a.OwnerUserId and Users.Id = ##UserId##"
    },
    {
        "QuerySetId": 66093,
        "Title": "Posts by Jon Skeet per day versus total badges he's earnt",
        "Description": null,
        "QueryBody": "DECLARE  @UserId int = ##UserId##\n\nselect CAST(p.CreationDate as Date) as PostDate, count(p.Id) as Posts,\n(\nselect count(b.id) \/ 100\n  from badges b\n  where b.UserId = u.Id\n  and b.date <= CAST(p.CreationDate as Date)\n  ) as BadgesEarned\nfrom posts p, users u\n  where u.Id = @UserId\n  and p.OwnerUserId = u.Id\n  group by CAST(p.CreationDate as Date), u.Id\norder by CAST(p.CreationDate as Date)",
        "CreationDate": "2015-06-25 09:08:57",
        "validated": false,
        "QueryBody_Original": "DECLARE  @UserId int = ##UserId##\n\nselect CAST(p.CreationDate as Date) as PostDate, count(p.Id) as Posts,\n(\nselect count(b.id) \/ 100\n  from badges b\n  where b.UserId = u.Id\n  and b.date <= CAST(p.CreationDate as Date)\n  ) as BadgesEarned\nfrom posts p, users u\n  where u.Id = @UserId\n  and p.OwnerUserId = u.Id\n  group by CAST(p.CreationDate as Date), u.Id\norder by CAST(p.CreationDate as Date)"
    },
    {
        "QuerySetId": 66113,
        "Title": "First X badge on the site",
        "Description": null,
        "QueryBody": "SELECT  TOP 1 Name,\n             UserId AS [User Link],\n             'site:\/\/users\/' + CAST(UserId AS nvarchar) + '?tab=badges|User Badges' AS [User Badges],\n             Date\nFROM   Badges\nWHERE  Name = ##BadgeName:string##\nORDER  BY Date ASC",
        "CreationDate": "2012-04-06 17:12:40",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 66152,
        "Title": "Show Vote History for a Post",
        "Description": null,
        "QueryBody": "DECLARE  @PostId int = ##PostId##\n\nselect v.Id,\n  v.PostId as [Post Link],\n  v.UserId as [User Link],\n  v.CreationDate,\n  v.BountyAmount,\n  v.VoteTypeId,\n  vt.Name\nfrom Posts p\njoin Votes v on (p.Id = v.PostId)\njoin VoteTypes vt on (v.VoteTypeId = vt.Id)\nwhere p.Id = @PostId and v.VoteTypeId in (2,3)\norder by v.CreationDate desc",
        "CreationDate": "2013-07-11 11:09:36",
        "validated": false,
        "QueryBody_Original": "DECLARE  @PostId int = ##PostId##\n\nselect v.Id,\n  v.PostId as [Post Link],\n  v.UserId as [User Link],\n  v.CreationDate,\n  v.BountyAmount,\n  v.VoteTypeId,\n  vt.Name\nfrom Posts p\njoin Votes v on (p.Id = v.PostId)\njoin VoteTypes vt on (v.VoteTypeId = vt.Id)\nwhere p.Id = @PostId and v.VoteTypeId in (2,3)\norder by v.CreationDate desc"
    },
    {
        "QuerySetId": 66261,
        "Title": "Where did X rant the most?",
        "Description": null,
        "QueryBody": "SELECT  \n  p.Id AS [Post Link],\n  LEN(p.Body) AS [Length],\n  p.Score AS [Score]\nFROM\n  Users u\nJOIN\n  Posts p ON p.OwnerUserId = u.Id\nWHERE\n  u.Id = ##UserId##\nORDER BY\n  [Score], [Length] DESC",
        "CreationDate": "2012-04-09 14:26:00",
        "validated": false,
        "QueryBody_Original": "SELECT  \n  p.Id AS [Post Link],\n  LEN(p.Body) AS [Length],\n  p.Score AS [Score]\nFROM\n  Users u\nJOIN\n  Posts p ON p.OwnerUserId = u.Id\nWHERE\n  u.Id = ##UserId##\nORDER BY\n  [Score], [Length] DESC"
    },
    {
        "QuerySetId": 66849,
        "Title": "Which tags used most with the entered tag ",
        "Description": null,
        "QueryBody": "DECLARE  @TagName VARCHAR(255) = ##TagName:string##\n\nSelect TagId, TagName, TagCount FROM\n(\nSelect Top(20) TagId, Count(TagId) As TagCount FROM\n(\nSelect TagId FROM\n(\nSelect Distinct PostId As PostId from PostTags \nWhere TagId=(Select Id FROM Tags Where TagName=@TagName)\n) PostsWithTag\nJoin PostTags AllPostTags On PostsWithTag.PostId=AllPostTags.PostId\n) TagsUsed Group By TagId Order By TagCount Desc\n) TagsOrdered Left Join Tags On Tags.Id=TagsOrdered.TagId \nOrder By TagCount DESC",
        "CreationDate": "2012-04-16 16:23:32",
        "validated": false,
        "QueryBody_Original": "DECLARE  @TagName VARCHAR(255) = ##TagName:string##\n\nSelect TagId, TagName, TagCount FROM\n(\nSelect Top(20) TagId, Count(TagId) As TagCount FROM\n(\nSelect TagId FROM\n(\nSelect Distinct PostId As PostId from PostTags \nWhere TagId=(Select Id FROM Tags Where TagName=@TagName)\n) PostsWithTag\nJoin PostTags AllPostTags On PostsWithTag.PostId=AllPostTags.PostId\n) TagsUsed Group By TagId Order By TagCount Desc\n) TagsOrdered Left Join Tags On Tags.Id=TagsOrdered.TagId \nOrder By TagCount DESC"
    },
    {
        "QuerySetId": 67053,
        "Title": "Users with the most X badges",
        "Description": null,
        "QueryBody": "SELECT  TOP 100 UserId   AS [User Link],\n               COUNT(*) AS [Badge Count]\nFROM   Badges\nWHERE  Name = ##Badge:string##\nGROUP  BY UserId\nHAVING COUNT(*) > 1\nORDER  BY [Badge Count] DESC",
        "CreationDate": "2012-04-17 19:01:43",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 67060,
        "Title": "Find all the votes for one user",
        "Description": null,
        "QueryBody": "DECLARE  @UserId int = ##UserId##\n\nSELECT\n    VoteTypeId AS Type,\n    Votes.CreationDate AS Date\nFROM Votes\n    INNER JOIN Posts on Votes.PostId = Posts.id\nWHERE \n    Posts.OwnerUserId = @UserId\nOrder By\n    Date ASC",
        "CreationDate": "2012-04-17 19:32:35",
        "validated": false,
        "QueryBody_Original": "DECLARE  @UserId int = ##UserId##\n\nSELECT\n    VoteTypeId AS Type,\n    Votes.CreationDate AS Date\nFROM Votes\n    INNER JOIN Posts on Votes.PostId = Posts.id\nWHERE \n    Posts.OwnerUserId = @UserId\nOrder By\n    Date ASC"
    },
    {
        "QuerySetId": 67624,
        "Title": "Most Upvotes for CSS in a given Location",
        "Description": "Wanted to know who the serious players are in my city for various tags. Should turn TagName into an Input as well...",
        "QueryBody": "DECLARE  @City nvarchar(100) = '%##CityName##%';\nSELECT\n    DisplayName, Reputation, TagName, Age, WebsiteUrl,\n    COUNT(*) AS UpVotes \nFROM Tags\n    INNER JOIN PostTags ON PostTags.TagId = Tags.id\n    INNER JOIN Posts ON Posts.ParentId = PostTags.PostId\n    INNER JOIN Votes ON Votes.PostId = Posts.Id and VoteTypeId = 2\n    INNER JOIN Users ON Posts.OwnerUserId = Users.Id\nWHERE \n    Lower(Location) LIKE LOWER(@City)\nGROUP BY DisplayName, TagName, Reputation, UpVotes, Age, WebsiteUrl\nORDER BY UpVotes DESC",
        "CreationDate": "2012-07-16 17:18:52",
        "validated": false,
        "QueryBody_Original": "DECLARE  @City nvarchar(100) = '%##CityName##%';\nSELECT\n    DisplayName, Reputation, TagName, Age, WebsiteUrl,\n    COUNT(*) AS UpVotes \nFROM Tags\n    INNER JOIN PostTags ON PostTags.TagId = Tags.id\n    INNER JOIN Posts ON Posts.ParentId = PostTags.PostId\n    INNER JOIN Votes ON Votes.PostId = Posts.Id and VoteTypeId = 2\n    INNER JOIN Users ON Posts.OwnerUserId = Users.Id\nWHERE \n    Lower(Location) LIKE LOWER(@City)\nGROUP BY DisplayName, TagName, Reputation, UpVotes, Age, WebsiteUrl\nORDER BY UpVotes DESC"
    },
    {
        "QuerySetId": 67708,
        "Title": "List users from by location",
        "Description": null,
        "QueryBody": "DECLARE  @Location NVARCHAR(100) = '##Location##'\n\nSELECT --TOP 30\n  DisplayName As Name,\n  ('http:\/\/stackoverflow.com\/users\/' + CAST(Id As VARCHAR) + '\/' + REPLACE(Lower(DisplayName), ' ', '-')) As URI,\n  Reputation,\n  Views\nFROM\n  Users\nWHERE\n  Lower(Location) LIKE '%' + Lower(@Location) + '%'\nORDER BY Reputation DESC",
        "CreationDate": "2012-04-25 05:31:54",
        "validated": false,
        "QueryBody_Original": "DECLARE  @Location NVARCHAR(100) = '##Location##'\n\nSELECT --TOP 30\n  DisplayName As Name,\n  ('http:\/\/stackoverflow.com\/users\/' + CAST(Id As VARCHAR) + '\/' + REPLACE(Lower(DisplayName), ' ', '-')) As URI,\n  Reputation,\n  Views\nFROM\n  Users\nWHERE\n  Lower(Location) LIKE '%' + Lower(@Location) + '%'\nORDER BY Reputation DESC"
    },
    {
        "QuerySetId": 67773,
        "Title": "select         num.TagName as Tag,        row_number() over (order by rate.Rate desc) as MayRank,   ",
        "Description": null,
        "QueryBody": "SELECT  t.TagName, count (*) 'Tainted'\nfrom Posts p, Tags t, PostTags pt\nwhere p.Body like '%jquery%'\nand (pt.PostId = p.Id and t.Id = pt.TagId)\ngroup by t.TagName\norder by t.TagName DESC, Tainted DESC",
        "CreationDate": "2012-04-26 09:56:44",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 67999,
        "Title": "People Who Have Accepted My answer",
        "Description": null,
        "QueryBody": "SELECT  q.OwnerUserId AS [User Link],\n       COUNT(*)      AS [Answers Accepted]\nFROM   Posts q\n       INNER JOIN Posts a\n         ON q.AcceptedAnswerId = a.Id\nWHERE  a.OwnerUserId = ##UserId:int##\nGROUP  BY q.OwnerUserId\nORDER  BY [Answers Accepted] DESC",
        "CreationDate": "2012-04-27 23:52:54",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 68048,
        "Title": "Question View Count On my answers",
        "Description": null,
        "QueryBody": "SELECT  DISTINCT\n       q.Id AS [Post Link],\n       q.ViewCount,\n       a.score\nFROM   Posts q\n       INNER JOIN Posts a\n         ON q.AcceptedAnswerId = a.Id\nWHERE  a.OwnerUserId = ##UserId:int##\nORDER  BY q.ViewCount DESC",
        "CreationDate": "2012-04-28 01:35:26",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 68329,
        "Title": "Percentage of my answers that are accepted",
        "Description": null,
        "QueryBody": "SELECT \n  count(p.id)\nFROM\n  Posts p\nWHERE\n  p.OwnerUserId = ##userId##",
        "CreationDate": "2012-04-30 12:57:47",
        "validated": false,
        "QueryBody_Original": "SELECT \n  count(p.id)\nFROM\n  Posts p\nWHERE\n  p.OwnerUserId = ##userId##"
    },
    {
        "QuerySetId": 68380,
        "Title": "Quality of questions For an answer",
        "Description": null,
        "QueryBody": "SELECT \navg(cast(q.score as decimal(15,5)))\nFROM\nposts q\nINNER JOIN posts a\nON q.id = a.parentid\nWHERE\na.owneruserid = ##UserId##",
        "CreationDate": "2012-04-30 21:32:28",
        "validated": false,
        "QueryBody_Original": "SELECT \navg(cast(q.score as decimal(15,5)))\nFROM\nposts q\nINNER JOIN posts a\nON q.id = a.parentid\nWHERE\na.owneruserid = ##UserId##"
    },
    {
        "QuerySetId": 69218,
        "Title": "Improved StackOverflow Rank and Percentile",
        "Description": null,
        "QueryBody": "DECLARE  @rep int\nSELECT @rep=Reputation FROM Users WHERE Id = ##UserId##\nIF @rep <= ##UserRep##\n  BEGIN \n    RAISERROR(N'User reputation is %i; UserRep should be greater than %i.',\n      18, 1, @rep, ##UserRep## )\n  END\nELSE\nWITH Rankings AS (\n  SELECT Id, Ranking = ROW_NUMBER() OVER(ORDER BY Reputation DESC)\n  FROM Users\n  )\n  ,Counts AS (\n  SELECT Cnt = COUNT(*)\n  FROM Users WHERE Reputation > ##UserRep##\n  )\n  SELECT Id, Ranking, Cnt AS Total_Users, 100 - ((CAST(Ranking AS decimal(6))\/Cnt)\n  * 100) AS Percentile\n  FROM Rankings, Counts\n  WHERE Id = ##UserId##",
        "CreationDate": "2013-06-27 08:37:42",
        "validated": false,
        "QueryBody_Original": "DECLARE  @rep int\nSELECT @rep=Reputation FROM Users WHERE Id = ##UserId##\nIF @rep <= ##UserRep##\n  BEGIN \n    RAISERROR(N'User reputation is %i; UserRep should be greater than %i.',\n      18, 1, @rep, ##UserRep## )\n  END\nELSE\nWITH Rankings AS (\n  SELECT Id, Ranking = ROW_NUMBER() OVER(ORDER BY Reputation DESC)\n  FROM Users\n  )\n  ,Counts AS (\n  SELECT Cnt = COUNT(*)\n  FROM Users WHERE Reputation > ##UserRep##\n  )\n  SELECT Id, Ranking, Cnt AS Total_Users, 100 - ((CAST(Ranking AS decimal(6))\/Cnt)\n  * 100) AS Percentile\n  FROM Rankings, Counts\n  WHERE Id = ##UserId##"
    },
    {
        "QuerySetId": 69220,
        "Title": "All fields in Users for a given User ID",
        "Description": null,
        "QueryBody": "SELECT  * from Users where Id = ##UserID##",
        "CreationDate": "2013-06-17 10:54:05",
        "validated": false,
        "QueryBody_Original": "SELECT  * from Users where Id = ##UserID##"
    },
    {
        "QuerySetId": 69607,
        "Title": "What is my Archaeologist badge progress?",
        "Description": null,
        "QueryBody": "DECLARE  @UserId INT = ##UserId##;\n\nSELECT COUNT(*) FROM Posts p\nINNER JOIN Posts a on a.ParentId = p.Id\nWHERE \n-- p.LastEditDate < DATEADD(month, -6, p.LastActivityDate) AND\np.Title = 'Site statistics' \n--AND\n--(p.OwnerUserId = @UserId OR  a.OwnerUserId = @UserId)",
        "CreationDate": "2019-08-22 11:41:14",
        "validated": false,
        "QueryBody_Original": "DECLARE  @UserId INT = ##UserId##;\n\nSELECT COUNT(*) FROM Posts p\nINNER JOIN Posts a on a.ParentId = p.Id\nWHERE \n-- p.LastEditDate < DATEADD(month, -6, p.LastActivityDate) AND\np.Title = 'Site statistics' \n--AND\n--(p.OwnerUserId = @UserId OR  a.OwnerUserId = @UserId)"
    },
    {
        "QuerySetId": 69949,
        "Title": "List of Users in a given location of rep above 10",
        "Description": "This query lists all users in a given location sorted by reputation.\r\n",
        "QueryBody": "DECLARE  @location varchar = ##location##\nselect  Id, Id as [User Link], location, reputation from users \nwhere location like '%##location##%' and reputation > 10\norder by reputation desc",
        "CreationDate": "2012-07-26 11:24:08",
        "validated": false,
        "QueryBody_Original": "DECLARE  @location varchar = ##location##\nselect  Id, Id as [User Link], location, reputation from users \nwhere location like '%##location##%' and reputation > 10\norder by reputation desc"
    },
    {
        "QuerySetId": 70232,
        "Title": "How many answers have I given and what are their scores?",
        "Description": null,
        "QueryBody": "DECLARE  @UserId int = ##UserId##\nDECLARE @asOf datetime = '2011-10-01'\n\nSELECT Id, ParentId, Score, CreationDate\nFROM Posts\nWHERE\n    Posts.OwnerUserId = @UserId and\n    Posts.PostTypeId = 2 and\n    Posts.CreationDate > @asOf\norder by score desc",
        "CreationDate": "2012-05-15 22:14:37",
        "validated": false,
        "QueryBody_Original": "DECLARE  @UserId int = ##UserId##\nDECLARE @asOf datetime = '2011-10-01'\n\nSELECT Id, ParentId, Score, CreationDate\nFROM Posts\nWHERE\n    Posts.OwnerUserId = @UserId and\n    Posts.PostTypeId = 2 and\n    Posts.CreationDate > @asOf\norder by score desc"
    },
    {
        "QuerySetId": 70244,
        "Title": "Accepted Answers with Question metadata",
        "Description": null,
        "QueryBody": "WITH  Questions AS\n--(\n        SELECT --count(*) -- 1889160 accepted answers\n            TOP 10\n            qu.OwnerUserId as QuestionerId, qu.Id as QuestionId, qu.CreationDate as QuestionDate, qu.Title as QuestionTitle, qu.Body as QuestionBody, qu.Tags as QuestionTags, \n            an.Id as AnswerId, an.Body as AnswerBody, an.OwnerUserId as AnswererId, an.CreationDate as AnswerDate, \n            ROW_NUMBER() OVER (ORDER BY qu.CreationDate DESC) as RowNum\n        FROM Posts qu\n        LEFT JOIN Posts an ON qu.AcceptedAnswerId = an.Id\n        WHERE \n            qu.PostTypeId = 1\n--)",
        "CreationDate": "2012-05-15 23:06:09",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 70836,
        "Title": "Suggested edit statistics per day",
        "Description": null,
        "QueryBody": "SELECT \n  Count(*) AS [Suggested],\n  Count(ALL se.ApprovalDate) AS [Accepted],\n  Round(100.0 * Count(ALL se.ApprovalDate) \/ Count(*), 2) AS [Accepted %],\n  Count(*) - Count(ALL NullIf(p.PostTypeId, 4)) AS [Excerpts],\n  Count(*) - Count(ALL NullIf(p.PostTypeId, 5)) AS [Wikis],\n  Cast(se.CreationDate AS date) AS [Date]\nFROM SuggestedEdits se, Posts p\nWHERE se.PostId = p.Id\nGROUP BY Cast(se.CreationDate AS date)\nORDER BY Cast(se.CreationDate AS date)",
        "CreationDate": "2012-05-22 04:03:05",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 70847,
        "Title": "Most viewed posts of me",
        "Description": null,
        "QueryBody": "DECLARE  @UserId int = ##UserId##\n\nSELECT TOP 20 Id as [Post Link],ViewCount,Score,Tags \nFROM Posts\nWHERE Posts.OwnerUserId = @UserId\nAND ViewCount>0\nORDER BY ViewCount desc,Score desc",
        "CreationDate": "2012-05-22 11:51:53",
        "validated": false,
        "QueryBody_Original": "DECLARE  @UserId int = ##UserId##\n\nSELECT TOP 20 Id as [Post Link],ViewCount,Score,Tags \nFROM Posts\nWHERE Posts.OwnerUserId = @UserId\nAND ViewCount>0\nORDER BY ViewCount desc,Score desc"
    },
    {
        "QuerySetId": 70848,
        "Title": "Most scoring posts of me",
        "Description": null,
        "QueryBody": "DECLARE  @UserId int = ##UserId##\n\nSELECT TOP 20 Id as [Post Link],ViewCount,Score,Tags \nFROM Posts\nWHERE Posts.OwnerUserId = @UserId\nORDER BY Score desc,ViewCount desc",
        "CreationDate": "2012-05-22 11:58:32",
        "validated": false,
        "QueryBody_Original": "DECLARE  @UserId int = ##UserId##\n\nSELECT TOP 20 Id as [Post Link],ViewCount,Score,Tags \nFROM Posts\nWHERE Posts.OwnerUserId = @UserId\nORDER BY Score desc,ViewCount desc"
    },
    {
        "QuerySetId": 70949,
        "Title": "a User and her Tags and Expertise Level",
        "Description": null,
        "QueryBody": "DECLARE  @userid int = ##userid## \n\nselect tagname, count(*) as cnt\nfrom\n(\nselect\ndistinct\npa.owneruserid,\npa.parentid,\npt.tagid\nfrom users u\njoin posts pa on pa.owneruserid = u.id\njoin posts pq on pq.id = pa.parentid\njoin posttags pt on pt.postid = pq.id\n)as ut\njoin tags t on t.id = ut.tagid\njoin users u on u.id = ut.owneruserid\nwhere u.id = @userid\ngroup by t.id, t.tagname\norder by cnt desc",
        "CreationDate": "2012-05-23 07:11:22",
        "validated": false,
        "QueryBody_Original": "DECLARE  @userid int = ##userid## \n\nselect tagname, count(*) as cnt\nfrom\n(\nselect\ndistinct\npa.owneruserid,\npa.parentid,\npt.tagid\nfrom users u\njoin posts pa on pa.owneruserid = u.id\njoin posts pq on pq.id = pa.parentid\njoin posttags pt on pt.postid = pq.id\n)as ut\njoin tags t on t.id = ut.tagid\njoin users u on u.id = ut.owneruserid\nwhere u.id = @userid\ngroup by t.id, t.tagname\norder by cnt desc"
    },
    {
        "QuerySetId": 70953,
        "Title": "Post, its Participants & their Tags",
        "Description": null,
        "QueryBody": "DECLARE  @postid int = ##postid##\n\nselect \na.postid, \na.userid, \na.tagname  \nfrom (\nselect\npt.postid as postid,\nt.tagname as tagname,\nu.id as userid\nfrom tags t\njoin posttags pt on pt.tagid = t.id\njoin posts q on q.id = pt.postid\njoin posts a on a.parentid = q.id\njoin users u on u.id = a.owneruserid\n) a\nwhere a.postid = @postid",
        "CreationDate": "2012-05-23 07:12:34",
        "validated": false,
        "QueryBody_Original": "DECLARE  @postid int = ##postid##\n\nselect \na.postid, \na.userid, \na.tagname  \nfrom (\nselect\npt.postid as postid,\nt.tagname as tagname,\nu.id as userid\nfrom tags t\njoin posttags pt on pt.tagid = t.id\njoin posts q on q.id = pt.postid\njoin posts a on a.parentid = q.id\njoin users u on u.id = a.owneruserid\n) a\nwhere a.postid = @postid"
    },
    {
        "QuerySetId": 71003,
        "Title": "Elite Users: Those who hold > X% of all Reputation",
        "Description": "Find the highest-rep users whose combined reputation\r\nis more than X% of the total user reputation.\r\nLet's make Pareto proud.\r\n",
        "QueryBody": "DECLARE  @MyAnswerUpped       int = 0; -- +10\n\n-- SELECT\n    --@MyAnswerUpped = COUNT(*)\n    --select count(*) *10 as AnsRep, max(t1.Reputation) as TotRep ,t1.Id\n    select avg(RepRatio),count(*) from\n(\n    select (sum(case when Q.AcceptedAnswerId is null then 0 else 1 end)*15+\n     count(*) *10.0 )\/ max(t1.Reputation) as RepRatio ,t1.Id\nFROM Posts\n\n    INNER JOIN Votes ON Posts.Id = Votes.PostId \n                      and Votes.VoteTypeId = 2 \n                      and Posts.PostTypeId = 2\n    \n    INNER JOIN (\n      select  Id, Reputation \n      from Users\n\n      where Reputation > 10000 and Reputation < 11000\n\n      )as t1 ON t1.Id = Posts.OwnerUserId \n    LEFT JOIN Posts AS Q ON Q.Id = Posts.ParentId and Q.AcceptedAnswerId = Posts.Id\ngroup by t1.Id\n    \n    )as tratio",
        "CreationDate": "2019-11-15 11:47:55",
        "validated": false,
        "QueryBody_Original": "DECLARE  @MyAnswerUpped       int = 0; -- +10\n\n-- SELECT\n    --@MyAnswerUpped = COUNT(*)\n    --select count(*) *10 as AnsRep, max(t1.Reputation) as TotRep ,t1.Id\n    select avg(RepRatio),count(*) from\n(\n    select (sum(case when Q.AcceptedAnswerId is null then 0 else 1 end)*15+\n     count(*) *10.0 )\/ max(t1.Reputation) as RepRatio ,t1.Id\nFROM Posts\n\n    INNER JOIN Votes ON Posts.Id = Votes.PostId \n                      and Votes.VoteTypeId = 2 \n                      and Posts.PostTypeId = 2\n    \n    INNER JOIN (\n      select  Id, Reputation \n      from Users\n\n      where Reputation > 10000 and Reputation < 11000\n\n      )as t1 ON t1.Id = Posts.OwnerUserId \n    LEFT JOIN Posts AS Q ON Q.Id = Posts.ParentId and Q.AcceptedAnswerId = Posts.Id\ngroup by t1.Id\n    \n    )as tratio"
    },
    {
        "QuerySetId": 71096,
        "Title": "How many posts per month for a tag?",
        "Description": "Shows the trend for your favourite tag\r\n",
        "QueryBody": "DECLARE  @TagName varchar(255) = '##TagName##';\n\nDECLARE @PostCountByMonth TABLE\n(\n  [date] datetime,\n  [count] int\n);\n\nSELECT dateadd(month, DATEDIFF(month, '', p.CreationDate), '') [date], count(*) [count]\nFROM Posts p\nWHERE p.Tags LIKE '%<##TagName##>%'\nGROUP BY DATEDIFF(month, '', p.CreationDate)\nORDER BY DATEDIFF(month, '', p.CreationDate)",
        "CreationDate": "2012-05-25 12:37:56",
        "validated": false,
        "QueryBody_Original": "DECLARE  @TagName varchar(255) = '##TagName##';\n\nDECLARE @PostCountByMonth TABLE\n(\n  [date] datetime,\n  [count] int\n);\n\nSELECT dateadd(month, DATEDIFF(month, '', p.CreationDate), '') [date], count(*) [count]\nFROM Posts p\nWHERE p.Tags LIKE '%<##TagName##>%'\nGROUP BY DATEDIFF(month, '', p.CreationDate)\nORDER BY DATEDIFF(month, '', p.CreationDate)"
    },
    {
        "QuerySetId": 71220,
        "Title": "Tags by number of views",
        "Description": null,
        "QueryBody": "DECLARE  @TagThreshold int = ##TagThreshold##\n\nSELECT t.TagName, SUM(p.ViewCount) AS Views, SUM(p.ViewCount) \/ COUNT(*) AS [Avg Views]\n  FROM Posts p \nJOIN PostTags pt\n  ON p.Id = pt.PostId\nJOIN Tags t\n  ON pt.TagId = t.id\nWHERE t.Count > @TagThreshold\nGROUP BY t.TagName \n--ORDER BY t.TagName\n--ORDER BY [Views] DESC\nORDER BY [Avg Views] DESC",
        "CreationDate": "2012-06-12 16:19:28",
        "validated": false,
        "QueryBody_Original": "DECLARE  @TagThreshold int = ##TagThreshold##\n\nSELECT t.TagName, SUM(p.ViewCount) AS Views, SUM(p.ViewCount) \/ COUNT(*) AS [Avg Views]\n  FROM Posts p \nJOIN PostTags pt\n  ON p.Id = pt.PostId\nJOIN Tags t\n  ON pt.TagId = t.id\nWHERE t.Count > @TagThreshold\nGROUP BY t.TagName \n--ORDER BY t.TagName\n--ORDER BY [Views] DESC\nORDER BY [Avg Views] DESC"
    },
    {
        "QuerySetId": 71255,
        "Title": "Where are my high-score comments?",
        "Description": null,
        "QueryBody": "DECLARE  @UserId int = ##UserId##\n\nSELECT \n    PostId As [Post Link],\n    Score\nFROM \n    Comments\nWHERE \n    UserId = @UserId AND\n    Score > 5\nORDER BY\n    Score DESC",
        "CreationDate": "2012-05-28 15:05:44",
        "validated": false,
        "QueryBody_Original": "DECLARE  @UserId int = ##UserId##\n\nSELECT \n    PostId As [Post Link],\n    Score\nFROM \n    Comments\nWHERE \n    UserId = @UserId AND\n    Score > 5\nORDER BY\n    Score DESC"
    },
    {
        "QuerySetId": 71279,
        "Title": "Potential Redmond affiliation with more than 0.05% of total reputation",
        "Description": null,
        "QueryBody": "DECLARE  @TotalReputation int\nselect @TotalReputation = sum(Reputation)\nfrom Users\n\n\nselect\n  *\nfrom\n  Users \nwhere\n  Reputation > @TotalReputation * (0.05 \/ 100.0)\n  and (\n     Location   like '%Redmond%' \n  or Location   like '%WA%'\n  or WebsiteUrl like '%csharp%'\n  or WebsiteUrl like '%mvp%'\n  or WebsiteUrl like '%microsoft%'\n  or WebsiteUrl like '%msdn%'\n  or WebsiteUrl like '%azure%'\n  or WebsiteUrl like '%windows%'\n  or AboutMe    like '%microsoft%'\n  or AboutMe    like '%windows%'\n  or AboutMe    like '%msdn%'\n  or AboutMe    like '%ASP%'\n  or AboutMe    like '%.NET%'\n  or AboutMe    like '%SQL Server%'\n  or AboutMe    like '%C#%'\n  or AboutMe    like '%mvp%'\n  or AboutMe    like '%azure%'\n  )\norder by\n  Reputation desc",
        "CreationDate": "2012-05-28 20:35:21",
        "validated": false,
        "QueryBody_Original": "DECLARE  @TotalReputation int\nselect @TotalReputation = sum(Reputation)\nfrom Users\n\n\nselect\n  *\nfrom\n  Users \nwhere\n  Reputation > @TotalReputation * (0.05 \/ 100.0)\n  and (\n     Location   like '%Redmond%' \n  or Location   like '%WA%'\n  or WebsiteUrl like '%csharp%'\n  or WebsiteUrl like '%mvp%'\n  or WebsiteUrl like '%microsoft%'\n  or WebsiteUrl like '%msdn%'\n  or WebsiteUrl like '%azure%'\n  or WebsiteUrl like '%windows%'\n  or AboutMe    like '%microsoft%'\n  or AboutMe    like '%windows%'\n  or AboutMe    like '%msdn%'\n  or AboutMe    like '%ASP%'\n  or AboutMe    like '%.NET%'\n  or AboutMe    like '%SQL Server%'\n  or AboutMe    like '%C#%'\n  or AboutMe    like '%mvp%'\n  or AboutMe    like '%azure%'\n  )\norder by\n  Reputation desc"
    },
    {
        "QuerySetId": 71403,
        "Title": "Revision counts on answer to my quetsions",
        "Description": null,
        "QueryBody": "SELECT  \n      q.OwneruserID,\n      Cast(count(*) as decimal (15,5)) AnswerRevisionCount\n  FROM\n      posts q \n      INNER JOIN Posts a\n      ON q.id = a.ParentID\n      LEFT JOIN PostHistory ph\n      ON a.id = ph.PostId\n      and ph.PostHistoryTypeId = 5 -- Edit Body\n  WHERE q.OwneruserID = ##userid##\n  GROUP BY\n     q.OwneruserID",
        "CreationDate": "2012-05-31 01:56:39",
        "validated": false,
        "QueryBody_Original": "SELECT  \n      q.OwneruserID,\n      Cast(count(*) as decimal (15,5)) AnswerRevisionCount\n  FROM\n      posts q \n      INNER JOIN Posts a\n      ON q.id = a.ParentID\n      LEFT JOIN PostHistory ph\n      ON a.id = ph.PostId\n      and ph.PostHistoryTypeId = 5 -- Edit Body\n  WHERE q.OwneruserID = ##userid##\n  GROUP BY\n     q.OwneruserID"
    },
    {
        "QuerySetId": 72997,
        "Title": "Users with at least R reputation on a launched site",
        "Description": "List all the users with at least R reputation on any site in the data dump.\r\nIncludes a link to the user's profile page on each site.",
        "QueryBody": "DECLARE  @Template VARCHAR(MAX) = '(\n  SELECT\n    ~n AS [Site Name],\n    Id AS [User Link],\n    Reputation,\n    EmailHash\n  FROM ~.Users\n  WHERE Reputation >= ##Threshold##\n)'\nDECLARE @Separator VARCHAR(MAX) = ' UNION ALL '\nDECLARE @Query NVARCHAR(MAX) = (\n  SELECT\n    Replace(\n      Replace(Replace(@Template, '~n', '''' + Replace([Name], '.Exported', '') + ''''),\n              '~.', '[' + Name + ']..'),\n      '~~', '~') + @Separator\n  FROM sys.Databases\n  WHERE Name LIKE '%.Exported'\n    AND NOT Name LIKE '%.Meta.Exported'\n    AND (Name LIKE 'StackExchange.S%' OR NOT Name LIKE 'Stackexchange.%')\n  FOR XML PATH(''))\nSELECT @Query = '\n' + Substring(@Query, 1, Len(@Query) - Len(@Separator)) + '\n'\nPRINT @Query\n--EXEC sp_executesql @Query",
        "CreationDate": "2012-06-14 16:29:53",
        "validated": false,
        "QueryBody_Original": "DECLARE  @Template VARCHAR(MAX) = '(\n  SELECT\n    ~n AS [Site Name],\n    Id AS [User Link],\n    Reputation,\n    EmailHash\n  FROM ~.Users\n  WHERE Reputation >= ##Threshold##\n)'\nDECLARE @Separator VARCHAR(MAX) = ' UNION ALL '\nDECLARE @Query NVARCHAR(MAX) = (\n  SELECT\n    Replace(\n      Replace(Replace(@Template, '~n', '''' + Replace([Name], '.Exported', '') + ''''),\n              '~.', '[' + Name + ']..'),\n      '~~', '~') + @Separator\n  FROM sys.Databases\n  WHERE Name LIKE '%.Exported'\n    AND NOT Name LIKE '%.Meta.Exported'\n    AND (Name LIKE 'StackExchange.S%' OR NOT Name LIKE 'Stackexchange.%')\n  FOR XML PATH(''))\nSELECT @Query = '\n' + Substring(@Query, 1, Len(@Query) - Len(@Separator)) + '\n'\nPRINT @Query\n--EXEC sp_executesql @Query"
    },
    {
        "QuerySetId": 73107,
        "Title": "Oldest users with >10k rep",
        "Description": null,
        "QueryBody": "DECLARE  @MinRep int = 0\n\nSELECT TOP 100\n   Id AS [User Link],\n   CreationDate\nFROM Users\nWHERE Reputation > @MinRep\nORDER BY CreationDate ASC",
        "CreationDate": "2013-08-14 22:32:54",
        "validated": false,
        "QueryBody_Original": "DECLARE  @MinRep int = 0\n\nSELECT TOP 100\n   Id AS [User Link],\n   CreationDate\nFROM Users\nWHERE Reputation > @MinRep\nORDER BY CreationDate ASC"
    },
    {
        "QuerySetId": 73558,
        "Title": "Questions eligible for Archaeology ",
        "Description": "Posts eligible for Archaeology that are edit fodder",
        "QueryBody": "SELECT  TOP 1000 \n   p.Id AS [Post Link], \n   u.Id AS [User Link], \n   p.ViewCount,\n   CASE \n     WHEN P.PostTypeID = 1 THEN 'Question'\n     WHEN P.PostTypeID = 2 THEN 'Answer' \n     ELSE 'Not Eligible' END,\n   Year(p.LastActivityDate)AS 'Year', \n   Month(p.LastActivityDate)AS 'Month', \n   CASE WHEN p.ClosedDate IS NULL THEN 'No' ELSE 'Yes' END AS Closed\nFROM Posts p\nINNER JOIN Users U on P.OwnerUserId = U.Id\nWHERE p.Score < 5 \n   AND U.ID>0\n   --AND NOT EXISTS (SELECT c.[Id] FROM [Posts] c WHERE c.[Score] > 0 AND c.[ParentId] = p.[Id])\n   AND U.LastAccessDate < DATEADD(month, -6, GETDATE())\n   AND U.Reputation < 50\nORDER BY P.PostTypeID, Year(p.LastActivityDate), Month(p.LastActivityDate), p.Score, p.ViewCount",
        "CreationDate": "2012-08-18 23:52:31",
        "validated": false,
        "QueryBody_Original": "SELECT  TOP 1000 \n   p.Id AS [Post Link], \n   u.Id AS [User Link], \n   p.ViewCount,\n   CASE \n     WHEN P.PostTypeID = 1 THEN 'Question'\n     WHEN P.PostTypeID = 2 THEN 'Answer' \n     ELSE 'Not Eligible' END,\n   Year(p.LastActivityDate)AS 'Year', \n   Month(p.LastActivityDate)AS 'Month', \n   CASE WHEN p.ClosedDate IS NULL THEN 'No' ELSE 'Yes' END AS Closed\nFROM Posts p\nINNER JOIN Users U on P.OwnerUserId = U.Id\nWHERE p.Score < 5 \n   AND U.ID>0\n   --AND NOT EXISTS (SELECT c.[Id] FROM [Posts] c WHERE c.[Score] > 0 AND c.[ParentId] = p.[Id])\n   AND U.LastAccessDate < DATEADD(month, -6, GETDATE())\n   AND U.Reputation < 50\nORDER BY P.PostTypeID, Year(p.LastActivityDate), Month(p.LastActivityDate), p.Score, p.ViewCount"
    },
    {
        "QuerySetId": 73657,
        "Title": "Percentage of posts from the top 1 percent of posters",
        "Description": null,
        "QueryBody": "DECLARE  @allPosts decimal(15,5) \nSELECT @allPosts = cast(COUNT(*) as decimal(15,5) ) FROM posts\n\nSELECT  CAST(SUM(k) as decimal (15,5)) \/ @allPosts * 100\nFROM (\nSELECT TOP 1 PERCENT OwnerUserID , count(id) k\nFROM Posts p\nWHERE OwnerUserID > 0\nGROUP BY OwnerUserID\nORDER BY count(id) desc ) T",
        "CreationDate": "2012-06-22 02:51:43",
        "validated": false,
        "QueryBody_Original": "DECLARE  @allPosts decimal(15,5) \nSELECT @allPosts = cast(COUNT(*) as decimal(15,5) ) FROM posts\n\nSELECT  CAST(SUM(k) as decimal (15,5)) \/ @allPosts * 100\nFROM (\nSELECT TOP 1 PERCENT OwnerUserID , count(id) k\nFROM Posts p\nWHERE OwnerUserID > 0\nGROUP BY OwnerUserID\nORDER BY count(id) desc ) T"
    },
    {
        "QuerySetId": 73822,
        "Title": "Score Of Comments and PostId",
        "Description": null,
        "QueryBody": "DECLARE  @UserId int = ##UserId##\n\nSELECT \n    Count(*) AS CommentCount,\n    Score,\n    PostID as [Post Link]\nFROM \n    Comments\nWHERE \n    UserId = @UserId\nGROUP BY \n    Score, PostId\nORDER BY \n    Score DESC",
        "CreationDate": "2012-08-18 22:54:47",
        "validated": false,
        "QueryBody_Original": "DECLARE  @UserId int = ##UserId##\n\nSELECT \n    Count(*) AS CommentCount,\n    Score,\n    PostID as [Post Link]\nFROM \n    Comments\nWHERE \n    UserId = @UserId\nGROUP BY \n    Score, PostId\nORDER BY \n    Score DESC"
    },
    {
        "QuerySetId": 73917,
        "Title": "Anonymous Feedback for a specific question and its answers",
        "Description": "Gets: Score, Age, Views, and Anonymous Feedback for a specific post and any answers it may have.  \r\n(If given an answer-post ID, it just fetches data for that answer.)\r\n",
        "QueryBody": "DECLARE  @UserId INT = ##UserId##;\n\nSELECT TOP 15\n       pt.PostId, p.Title\n--       u.id\n--     , u.DisplayName\n     , COUNT(*) AS posts\n     , COUNT(CASE WHEN pf.VoteTypeId = 2 THEN 1 ELSE NULL END) AS Anon_up\n     , COUNT(CASE WHEN pf.VoteTypeId = 3 THEN 1 ELSE NULL END) AS Anon_down\nFROM   Tags         t\nJOIN   PostTags     pt ON pt.TagId = t.id\nJOIN   PostFeedback pf ON pf.PostId = pt.PostId\nJOIN   Posts        p  ON p.Id = pt.PostId\n-- JOIN   Users        u  ON u.Id = p.OwnerUserId\nWHERE  t.TagName = 'postgresql'\nGROUP  BY pt.PostId, p.Title -- u.id, u.DisplayName\nORDER  BY posts DESC;",
        "CreationDate": "2016-08-17 18:21:33",
        "validated": false,
        "QueryBody_Original": "DECLARE  @UserId INT = ##UserId##;\n\nSELECT TOP 15\n       pt.PostId, p.Title\n--       u.id\n--     , u.DisplayName\n     , COUNT(*) AS posts\n     , COUNT(CASE WHEN pf.VoteTypeId = 2 THEN 1 ELSE NULL END) AS Anon_up\n     , COUNT(CASE WHEN pf.VoteTypeId = 3 THEN 1 ELSE NULL END) AS Anon_down\nFROM   Tags         t\nJOIN   PostTags     pt ON pt.TagId = t.id\nJOIN   PostFeedback pf ON pf.PostId = pt.PostId\nJOIN   Posts        p  ON p.Id = pt.PostId\n-- JOIN   Users        u  ON u.Id = p.OwnerUserId\nWHERE  t.TagName = 'postgresql'\nGROUP  BY pt.PostId, p.Title -- u.id, u.DisplayName\nORDER  BY posts DESC;"
    },
    {
        "QuerySetId": 74563,
        "Title": "My answers to others posts...",
        "Description": "This query returns the linked list of the answers (with accept states) you've provided to a certain user. The UserID parameter is your user ID (by default prefilled with your user ID) and the OtherUserID is the ID of a user to whom you've provided the answer(s).",
        "QueryBody": "DECLARE  @MyUserID INT = ##UserID:int##\nDECLARE @OtherUserID INT = ##OtherUserID:int##\n\nSELECT\n    Answer.Id AS [Post Link],\n    Answer.Score AS [Score],\n    [Answer State] =\n    CASE\n        WHEN Answer.Id = Question.AcceptedAnswerId THEN\n            'Accepted'\n        ELSE \n            '---'\n    END,\n    Answer.CreationDate AS [Creation Date]\nFROM\n    Posts Question\nLEFT JOIN Posts Answer ON Question.ID = Answer.ParentId\nWHERE\n    Question.OwnerUserId = @OtherUserID AND\n    Answer.PostTypeId = 2 AND\n    Answer.OwnerUserId = @MyUserID    \nORDER BY\n    Question.CreationDate\nASC",
        "CreationDate": "2012-08-10 17:32:50",
        "validated": false,
        "QueryBody_Original": "DECLARE  @MyUserID INT = ##UserID:int##\nDECLARE @OtherUserID INT = ##OtherUserID:int##\n\nSELECT\n    Answer.Id AS [Post Link],\n    Answer.Score AS [Score],\n    [Answer State] =\n    CASE\n        WHEN Answer.Id = Question.AcceptedAnswerId THEN\n            'Accepted'\n        ELSE \n            '---'\n    END,\n    Answer.CreationDate AS [Creation Date]\nFROM\n    Posts Question\nLEFT JOIN Posts Answer ON Question.ID = Answer.ParentId\nWHERE\n    Question.OwnerUserId = @OtherUserID AND\n    Answer.PostTypeId = 2 AND\n    Answer.OwnerUserId = @MyUserID    \nORDER BY\n    Question.CreationDate\nASC"
    },
    {
        "QuerySetId": 74636,
        "Title": "Number of Posts edited by > 1 user",
        "Description": null,
        "QueryBody": "DECLARE  @totalPosts DECIMAL\nSELECT @totalPosts = COUNT(*) FROM posts;\nSelect (\n  Select (100.0 * Count(*) \/ @totalPosts) As PercentPostsEditedSeveralTimes\n  FROM (\n    Select\n    Count(*) AS NumRevisions\n    From PostHistory \n    Group By PostId\n  ) As Revisions\n  Where Revisions.NumRevisions > 1\n) As PostsEditedSeveralTimes,\n(\n  Select 100.0 * Count(*) \/ @totalPosts As PercentPostsEditedBySeveralUsers\n  FROM (\n    Select\n    Count(Distinct UserId) as NumUsers\n    From PostHistory \n    Group By PostId\n  ) As Revisions\n  Where Revisions.NumUsers > 1\n) As PostsEditedBySeveralUsers,\n(\n  Select 100.0 * Count(Distinct(PostId)) \/ @totalPosts\n  From SuggestedEdits\n  Where ApprovalDate IS NOT NULL\n) As PercentPostsWithAcceptedSuggestedEdits\n;",
        "CreationDate": "2012-07-04 22:29:19",
        "validated": false,
        "QueryBody_Original": "DECLARE  @totalPosts DECIMAL\nSELECT @totalPosts = COUNT(*) FROM posts;\nSelect (\n  Select (100.0 * Count(*) \/ @totalPosts) As PercentPostsEditedSeveralTimes\n  FROM (\n    Select\n    Count(*) AS NumRevisions\n    From PostHistory \n    Group By PostId\n  ) As Revisions\n  Where Revisions.NumRevisions > 1\n) As PostsEditedSeveralTimes,\n(\n  Select 100.0 * Count(*) \/ @totalPosts As PercentPostsEditedBySeveralUsers\n  FROM (\n    Select\n    Count(Distinct UserId) as NumUsers\n    From PostHistory \n    Group By PostId\n  ) As Revisions\n  Where Revisions.NumUsers > 1\n) As PostsEditedBySeveralUsers,\n(\n  Select 100.0 * Count(Distinct(PostId)) \/ @totalPosts\n  From SuggestedEdits\n  Where ApprovalDate IS NOT NULL\n) As PercentPostsWithAcceptedSuggestedEdits\n;"
    },
    {
        "QuerySetId": 74651,
        "Title": "How many tags am I the \"Top User\" in?",
        "Description": null,
        "QueryBody": "SELECT  distinct qTags.TagId from Posts ans\njoin\n  PostTags qTags on qTags.PostId = ans.ParentId\n  \nwhere \nans.OwnerUserId = ##UserId##\nand\nans.ParentId is not null\n*\/\nSELECT * from Tags where Id = 1",
        "CreationDate": "2012-07-05 00:31:14",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 74700,
        "Title": "Users with most questions with given tag from given country",
        "Description": null,
        "QueryBody": "SELECT  u.DisplayName, u.Reputation, count(*) as Questions from Users u, Posts p where u.Id in (\n    SELECT Id\n    from Users \n    where Location like ('%'+##location:string##)\n  )\n  and p.OwnerUserId = u.Id\n  and p.Tags like ('%<'+##tag:string##+'>%')\n  group by u.DisplayName, u.Reputation\n  order by u.Reputation desc",
        "CreationDate": "2015-07-10 19:46:39",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 74877,
        "Title": "Questions with scores less than -20",
        "Description": null,
        "QueryBody": "WITH  a score of less than -20\nselect q.Score, q.ID, q.Title\nfrom Posts q\nwhere q.Score = 0 and q.PostTypeId = 1",
        "CreationDate": "2016-12-28 04:05:12",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 74975,
        "Title": "What's my rank compared to people who signed up when I did.",
        "Description": null,
        "QueryBody": "DECLARE  @startDate AS DATETIME2\nDECLARE @reputation AS INT\n\nSELECT\n  @startDate = CreationDate,\n  @reputation = Reputation\nFROM\n  Users\nWHERE\n  Id = '##UserId##'\n  \nSELECT\n    COUNT(*)          AS [Total Users]\nFROM\n    Users\nWHERE\n        CreationDate  > @startDate\n    AND Reputation    > 200\n\nSELECT\n  COUNT(*) + 1         AS [My Rank]\nFROM\n    Users\nWHERE\n        CreationDate  > @startDate\n    AND Reputation    > @reputation\n\nSELECT\n    DisplayName,\n    Reputation,\n    CreationDate\nFROM\n    Users\nWHERE\n        CreationDate  > @startDate\n    AND Reputation    > @reputation\nORDER BY \n    Reputation        DESC",
        "CreationDate": "2012-07-09 07:56:25",
        "validated": false,
        "QueryBody_Original": "DECLARE  @startDate AS DATETIME2\nDECLARE @reputation AS INT\n\nSELECT\n  @startDate = CreationDate,\n  @reputation = Reputation\nFROM\n  Users\nWHERE\n  Id = '##UserId##'\n  \nSELECT\n    COUNT(*)          AS [Total Users]\nFROM\n    Users\nWHERE\n        CreationDate  > @startDate\n    AND Reputation    > 200\n\nSELECT\n  COUNT(*) + 1         AS [My Rank]\nFROM\n    Users\nWHERE\n        CreationDate  > @startDate\n    AND Reputation    > @reputation\n\nSELECT\n    DisplayName,\n    Reputation,\n    CreationDate\nFROM\n    Users\nWHERE\n        CreationDate  > @startDate\n    AND Reputation    > @reputation\nORDER BY \n    Reputation        DESC"
    },
    {
        "QuerySetId": 75097,
        "Title": "top users: Choose a country",
        "Description": "List of users by reputation score by country.",
        "QueryBody": "DECLARE  @country varchar(20) = '##Country##';\n\nSELECT\n    ROW_NUMBER() OVER(ORDER BY Reputation DESC) AS [#], \n    Id AS [User Link], \n    Reputation\nFROM\n    Users\nWHERE\n  LOWER(Location) LIKE lower('%##Country##%')\n    \nORDER BY\n    Reputation DESC;",
        "CreationDate": "2019-04-16 10:31:24",
        "validated": false,
        "QueryBody_Original": "DECLARE  @country varchar(20) = '##Country##';\n\nSELECT\n    ROW_NUMBER() OVER(ORDER BY Reputation DESC) AS [#], \n    Id AS [User Link], \n    Reputation\nFROM\n    Users\nWHERE\n  LOWER(Location) LIKE lower('%##Country##%')\n    \nORDER BY\n    Reputation DESC;"
    },
    {
        "QuerySetId": 75104,
        "Title": "Search the others answer posts...",
        "Description": "This query returns the linked list of the answers of a certain user partially matching the entered body text. This search is not case sensitive. The OtherUserID parameter is the ID of a user whose answers you want search in and the PostText is the text which you want to search for.",
        "QueryBody": "DECLARE  @OtherUserID INT = ##OtherUserID:int##\nDECLARE @PostText nvarchar(600) = ##PostText:string##\n\nSELECT @PostText = UPPER(@PostText)\nSELECT\n    Id AS [Post Link],\n    Score AS [Score],\n    CreationDate AS [Creation Date]\nFROM\n    Posts    \nWHERE\n    OwnerUserId = @OtherUserID AND\n    PostTypeId IN (2, 3) AND\n    UPPER(Body) LIKE '%' + @PostText + '%'\nORDER BY\n    CreationDate\nDESC",
        "CreationDate": "2012-08-10 15:30:15",
        "validated": false,
        "QueryBody_Original": "DECLARE  @OtherUserID INT = ##OtherUserID:int##\nDECLARE @PostText nvarchar(600) = ##PostText:string##\n\nSELECT @PostText = UPPER(@PostText)\nSELECT\n    Id AS [Post Link],\n    Score AS [Score],\n    CreationDate AS [Creation Date]\nFROM\n    Posts    \nWHERE\n    OwnerUserId = @OtherUserID AND\n    PostTypeId IN (2, 3) AND\n    UPPER(Body) LIKE '%' + @PostText + '%'\nORDER BY\n    CreationDate\nDESC"
    },
    {
        "QuerySetId": 75280,
        "Title": "High rep users with Farquaad Syndrome",
        "Description": null,
        "QueryBody": "SELECT  u.Id, u.DisplayName, LEN(p.Body) as Size, p.Id as [Post Link]\nfrom Users u\ninner join Posts p on u.Id = p.OwnerUserId\nwhere p.PostTypeId = 2 and LEN(p.Body) < 140 and u.Id = ##UserID:int##\norder by LEN(p.Body) ASC",
        "CreationDate": "2012-07-13 19:41:07",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 75332,
        "Title": "State of the your Tag",
        "Description": null,
        "QueryBody": "WITH  TaggedPosts(PostId)\nAS (\n  SELECT pt.PostId as PostId\n  FROM PostTags pt INNER JOIN Tags t ON t.Id=pt.TagId\n  WHERE t.TagName LIKE '%' + ##tag:string## + '%'\n  GROUP BY pt.PostId\n)\n\nSELECT count(tp.PostId)\nFROM TaggedPosts tp INNER JOIN Posts p ON p.Id=tp.PostId\nWHERE\n    PostTypeId = 1\nAND\n    AcceptedAnswerId IS NULL\nAND\n    AnswerCount > 0\nAND\n    ClosedDate IS NULL",
        "CreationDate": "2012-07-14 01:15:50",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 75438,
        "Title": "What's my Pundit badge progress?",
        "Description": "How many of my comments have scores of 5 and higher, thus qualifying for the Pundit badge?\r\n",
        "QueryBody": "DECLARE  @UserId INT = ##UserId##;\n\nSELECT Score, Text, PostId AS [Post Link]\nFROM Comments\nWHERE UserId = @UserId\nORDER BY Score DESC, Text ASC;",
        "CreationDate": "2020-06-01 21:05:53",
        "validated": false,
        "QueryBody_Original": "DECLARE  @UserId INT = ##UserId##;\n\nSELECT Score, Text, PostId AS [Post Link]\nFROM Comments\nWHERE UserId = @UserId\nORDER BY Score DESC, Text ASC;"
    },
    {
        "QuerySetId": 75554,
        "Title": "My Questions ordered by the most recent one",
        "Description": null,
        "QueryBody": "SELECT  Posts.Id as [Post Link], Title, CreationDate from Posts \nwhere PostTypeId = 1 --Question\nand OwnerUserId = ##UserId##\nOrder By CreationDate Desc",
        "CreationDate": "2015-03-30 20:35:30",
        "validated": false,
        "QueryBody_Original": "SELECT  Posts.Id as [Post Link], Title, CreationDate from Posts \nwhere PostTypeId = 1 --Question\nand OwnerUserId = ##UserId##\nOrder By CreationDate Desc"
    },
    {
        "QuerySetId": 75901,
        "Title": "Get Answer Times By User For Post x",
        "Description": null,
        "QueryBody": "DECLARE  @PostID int = ##PostID##\n\nSELECT *\nFROM Posts \nWHERE Posts.Id=@PostID",
        "CreationDate": "2012-07-24 22:47:11",
        "validated": false,
        "QueryBody_Original": "DECLARE  @PostID int = ##PostID##\n\nSELECT *\nFROM Posts \nWHERE Posts.Id=@PostID"
    },
    {
        "QuerySetId": 75911,
        "Title": "My comments on new user questions",
        "Description": null,
        "QueryBody": "SELECT  parent.id as [Post Link], comments.id as [Comment Id], comments.score as [Score] from comments join (SELECT p.id from posts p inner join users u \non (p.ownerUserId=u.id) \nand (DATEDIFF(d, u.CreationDate, p.CreationDate) < 3)\nwhere p.postTypeId = 1) parent \nON parent.id = comments.postId \nand comments.userId=##UserId##\norder by comments.score desc;",
        "CreationDate": "2012-07-25 07:26:46",
        "validated": false,
        "QueryBody_Original": "SELECT  parent.id as [Post Link], comments.id as [Comment Id], comments.score as [Score] from comments join (SELECT p.id from posts p inner join users u \non (p.ownerUserId=u.id) \nand (DATEDIFF(d, u.CreationDate, p.CreationDate) < 3)\nwhere p.postTypeId = 1) parent \nON parent.id = comments.postId \nand comments.userId=##UserId##\norder by comments.score desc;"
    },
    {
        "QuerySetId": 76196,
        "Title": " Who has downvoted your posts ?",
        "Description": null,
        "QueryBody": "DECLARE  @UserId int = ##UserId##\n\nSELECT TOP 40  PostId,UserId, Users.DisplayName, Users.Reputation, Users.Location \nFROM Votes, Posts, Users \nWHERE VoteTypeId=3  AND Users.id = Votes.UserId AND Posts.OwnerUserId = @UserId",
        "CreationDate": "2012-07-30 13:46:06",
        "validated": false,
        "QueryBody_Original": "DECLARE  @UserId int = ##UserId##\n\nSELECT TOP 40  PostId,UserId, Users.DisplayName, Users.Reputation, Users.Location \nFROM Votes, Posts, Users \nWHERE VoteTypeId=3  AND Users.id = Votes.UserId AND Posts.OwnerUserId = @UserId"
    },
    {
        "QuerySetId": 76197,
        "Title": "Votes on a Post and Date",
        "Description": null,
        "QueryBody": "DECLARE  @PostId int = ##PostId##\n\nSELECT Votes.CreationDate, VoteTypes.Name\nFROM Votes\n  INNER JOIN VoteTypes ON VoteTypeId = VoteTypes.Id\nWHERE PostId=@PostId\nORDER BY Votes.CreationDate",
        "CreationDate": "2012-07-30 14:20:41",
        "validated": false,
        "QueryBody_Original": "DECLARE  @PostId int = ##PostId##\n\nSELECT Votes.CreationDate, VoteTypes.Name\nFROM Votes\n  INNER JOIN VoteTypes ON VoteTypeId = VoteTypes.Id\nWHERE PostId=@PostId\nORDER BY Votes.CreationDate"
    },
    {
        "QuerySetId": 76427,
        "Title": "Worst Posts of All Time",
        "Description": "Finds the posts (questions or answers) with the lowest scores\r\n",
        "QueryBody": "WITH  the lowest scores\n\n\nWITH VoteCounts AS (\nSELECT v.PostId AS PostId, vt.Name AS VoteTypeName\nFROM Votes v\nINNER JOIN VoteTypes vt ON v.voteTypeId = vt.Id\n)\nSELECT TOP 10 Id as [Post Link], Score, PostTypeId AS [Post Type]\n, (SELECT COUNT(*) FROM VoteCounts vc WHERE vc.VoteTypeName = 'UpMod' AND vc.PostId = Id) AS [Total Up Votes]\n, (SELECT COUNT(*) FROM VoteCounts vc WHERE vc.VoteTypeName = 'DownMod' AND vc.PostId = Id) AS [Total Down Votes]\nFROM Posts\nORDER BY Score asc",
        "CreationDate": "2012-11-15 06:21:05",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 76464,
        "Title": "Suggested Edit Votes for a user on a day",
        "Description": null,
        "QueryBody": "SELECT  Row_number() \n                  OVER ( \n                    ORDER BY sev.id) rn, \n                userid, \n                creationdate, \n                suggestededitid, \n                'http:\/\/stackoverflow.com\/suggested-edits\/' + cast(suggestededitid  as varchar) as [Edit Link],\n                vt.Name \n         FROM   suggestededitvotes sev \n         INNER JOIN votetypes vt \n               ON sev.votetypeid = vt.id \n         WHERE  userid = ##TheUserid:int##\n                and Cast(creationdate AS DATE) = ##editday:string##\nORDER BY sev.id",
        "CreationDate": "2012-08-08 00:56:34",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 76941,
        "Title": "Frequency of a keyword, week by week",
        "Description": null,
        "QueryBody": "DECLARE  @keyword varchar(50) = '##Keyword##';\n\nselect CAST(DATEPART(yyyy,CreationDate) as CHAR(4))+'-week'+CAST(DATEPART(wk,CreationDate) as CHAR(2)),count(*) as freq from Posts\nWHERE Posts.PostTypeId=1 and Body LIKE '%<' + LOWER(@keyword) + '>%'\nGROUP BY DATEPART(yyyy,CreationDate),DATEPART(wk,CreationDate)\nORDER BY DATEPART(yyyy,CreationDate),DATEPART(wk,CreationDate)",
        "CreationDate": "2012-08-11 00:37:17",
        "validated": false,
        "QueryBody_Original": "DECLARE  @keyword varchar(50) = '##Keyword##';\n\nselect CAST(DATEPART(yyyy,CreationDate) as CHAR(4))+'-week'+CAST(DATEPART(wk,CreationDate) as CHAR(2)),count(*) as freq from Posts\nWHERE Posts.PostTypeId=1 and Body LIKE '%<' + LOWER(@keyword) + '>%'\nGROUP BY DATEPART(yyyy,CreationDate),DATEPART(wk,CreationDate)\nORDER BY DATEPART(yyyy,CreationDate),DATEPART(wk,CreationDate)"
    },
    {
        "QuerySetId": 77211,
        "Title": "Know the current status of my data, in data.stackexchange",
        "Description": null,
        "QueryBody": "DECLARE  @UserId int = ##UserId##\n\nSELECT * FROM Users\nWHERE \n   Id = @UserId",
        "CreationDate": "2012-08-24 09:17:36",
        "validated": false,
        "QueryBody_Original": "DECLARE  @UserId int = ##UserId##\n\nSELECT * FROM Users\nWHERE \n   Id = @UserId"
    },
    {
        "QuerySetId": 77269,
        "Title": "Progress towards Popular Question, Notable Question, and Famous Question",
        "Description": null,
        "QueryBody": "SELECT  TOP 500\n    Id as [Post Link],\n    ViewCount,\n    CAST(CONVERT(INT, CAST(ViewCount as float) \/ 10) as VARCHAR(5)) + '%' as Popular,\n    CAST(CONVERT(INT, CAST(ViewCount as float) \/ 25) as VARCHAR(5)) + '%' as Notable,\n    CAST(CONVERT(INT, CAST(ViewCount as float) \/ 100) as VARCHAR(5)) + '%' as Famous\nFROM Posts\nWHERE PostTypeId=1 and OwnerUserId=##UserID:int##\nORDER BY ViewCount DESC",
        "CreationDate": "2014-06-18 22:45:12",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 77274,
        "Title": "progress towards Self Learner badge",
        "Description": "Shows the scores for answers you've given to your own questions",
        "QueryBody": "DECLARE  @user INT = ##UserID:int##\n\nselect\n    Answer.Id as [Post Link],\n    Answer.Score\nfrom Posts as Answer\nLEFT JOIN Posts as Question on Question.Id=Answer.ParentId\nWHERE Answer.PostTypeId=2\n    and Answer.OwnerUserId=@user\n    and Question.OwnerUserId=@user\nORDER BY Score DESC",
        "CreationDate": "2012-08-14 11:00:06",
        "validated": false,
        "QueryBody_Original": "DECLARE  @user INT = ##UserID:int##\n\nselect\n    Answer.Id as [Post Link],\n    Answer.Score\nfrom Posts as Answer\nLEFT JOIN Posts as Question on Question.Id=Answer.ParentId\nWHERE Answer.PostTypeId=2\n    and Answer.OwnerUserId=@user\n    and Question.OwnerUserId=@user\nORDER BY Score DESC"
    },
    {
        "QuerySetId": 77365,
        "Title": "progress towards Research Assistant badge",
        "Description": "Counts the number of distinct tag wikis that you've edited.",
        "QueryBody": "SELECT \n    COUNT(DISTINCT Posts.Id) as TagWikisEdited,\n    CAST(CONVERT(DECIMAL(5,2), COUNT(DISTINCT Posts.Id) * 2.0)  as VARCHAR(6)) + '%' as Progress\nfrom SuggestedEdits as Edit\nLEFT JOIN Posts on Edit.PostId=Posts.Id\nWHERE Edit.OwnerUserId=##UserID:int##\nAND Posts.PostTypeId in (4,5)\nAND Edit.ApprovalDate is not null",
        "CreationDate": "2016-04-06 01:22:55",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 77372,
        "Title": "find candidates for Necromancer badge",
        "Description": "finds questions more than 60 days old having in the specified tag",
        "QueryBody": "DECLARE  @tag VARCHAR(30) = ##tag:string##\n\nSELECT TOP 1000\n    Id AS [Post Link],\n    Score,\n    ViewCount as Views,\n    AnswerCount as Answers,\n    Body,\n    CreationDate\nFROM Posts\nWHERE\n    AcceptedAnswerId IS NULL\n    AND PostTypeId = 1\n    AND CreationDate < GETDATE() - 60\n    AND ClosedDate IS NULL\n    AND Tags LIKE '%<' + LOWER(@tag) + '>%'\n    AND AnswerCount = 0",
        "CreationDate": "2018-01-24 05:06:46",
        "validated": false,
        "QueryBody_Original": "DECLARE  @tag VARCHAR(30) = ##tag:string##\n\nSELECT TOP 1000\n    Id AS [Post Link],\n    Score,\n    ViewCount as Views,\n    AnswerCount as Answers,\n    Body,\n    CreationDate\nFROM Posts\nWHERE\n    AcceptedAnswerId IS NULL\n    AND PostTypeId = 1\n    AND CreationDate < GETDATE() - 60\n    AND ClosedDate IS NULL\n    AND Tags LIKE '%<' + LOWER(@tag) + '>%'\n    AND AnswerCount = 0"
    },
    {
        "QuerySetId": 77412,
        "Title": "Unanswered Questions by Tag with at least 100 questions",
        "Description": "Shows all tags with at least 100 questions, their total questions and\r\nof those, how many are unanswered.\r\n",
        "QueryBody": "DECLARE  @minQuestionCount int = 100\n\nSELECT\n  *\nFROM\n  (\n    -- All unanswered questions grouped by tag\n    SELECT\n      t.TagName AS TagName,\n      COUNT(1) AS UnansweredCount,\n      t.Count AS QuestionCount\n      FROM Posts q\n      INNER JOIN PostTags pt ON q.Id = pt.PostId\n      INNER JOIN Tags t ON pt.TagId = t.Id\n      WHERE\n        (q.PostTypeId = 1) AND\n        (q.ClosedDate IS NULL) AND\n        NOT EXISTS\n        (\n          SELECT *\n            FROM Posts a\n            WHERE\n              (a.ParentId = q.Id) AND\n              ((a.Score > 0) OR (a.Id = q.AcceptedAnswerId))\n        )\n      GROUP BY TagName, t.Count\n  ) a\nWHERE a.QuestionCount > @minQuestionCount\nORDER BY\n    TagName",
        "CreationDate": "2012-08-16 10:04:40",
        "validated": false,
        "QueryBody_Original": "DECLARE  @minQuestionCount int = 100\n\nSELECT\n  *\nFROM\n  (\n    -- All unanswered questions grouped by tag\n    SELECT\n      t.TagName AS TagName,\n      COUNT(1) AS UnansweredCount,\n      t.Count AS QuestionCount\n      FROM Posts q\n      INNER JOIN PostTags pt ON q.Id = pt.PostId\n      INNER JOIN Tags t ON pt.TagId = t.Id\n      WHERE\n        (q.PostTypeId = 1) AND\n        (q.ClosedDate IS NULL) AND\n        NOT EXISTS\n        (\n          SELECT *\n            FROM Posts a\n            WHERE\n              (a.ParentId = q.Id) AND\n              ((a.Score > 0) OR (a.Id = q.AcceptedAnswerId))\n        )\n      GROUP BY TagName, t.Count\n  ) a\nWHERE a.QuestionCount > @minQuestionCount\nORDER BY\n    TagName"
    },
    {
        "QuerySetId": 77449,
        "Title": "Users with multiple Q's with no A's >= 0 after three months",
        "Description": "Finds number of questions that have no accepted answer and no answers with a score >= 0 after three months\r\n",
        "QueryBody": "WITH  multiple Q's WITH no A's >= 0 after three months\n-- Finds, per user, number of questions that have no accepted answer and no answers WITH a score >= 0 after three months\n\nselect Top 100 OwnerUserId As [User Link], Count(*) As [Unanswered Questions],\n(Select Count(*) From Posts as q2 Where PostTypeId=1 And ClosedDate is null And q2.OwnerUserId = q.OwnerUserId) As [Non-closed Questions]\nfrom posts as q\nwhere PostTypeId=1\nAND Score < 1\nAND CreationDate < DATEADD(MONTH, -3, GETDATE())\nAND ClosedDate is null\nand AcceptedAnswerId is null\nAND NOT EXISTS (\n    select * from posts as a where PostTypeId=2 and ParentId=q.id and Score>=0\n)\nGroup By OwnerUserId\nHaving Count(*)>3\nOrder By 2 Desc",
        "CreationDate": "2012-09-26 14:36:11",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 77538,
        "Title": "How close am I to the Proofreader badge?",
        "Description": "Proofreader requires 100 approvals+rejections, so your distance away is (100 - approvals - rejections).",
        "QueryBody": "DECLARE  @UserId int = ##UserId##\n\nSELECT *\nFROM SuggestedEditVotes\nWHERE UserId = @UserId",
        "CreationDate": "2014-12-02 06:09:10",
        "validated": false,
        "QueryBody_Original": "DECLARE  @UserId int = ##UserId##\n\nSELECT *\nFROM SuggestedEditVotes\nWHERE UserId = @UserId"
    },
    {
        "QuerySetId": 77565,
        "Title": "Which posts are eligible for Archaeologist edits? WIP",
        "Description": "Old low quality questions that are edit fodder",
        "QueryBody": "SELECT  TOP 1000 P.Id AS [Post Link], P.CreationDate, P.Score, P.PostTypeID, p.LastEditDate,p.LastActivityDate\nFROM Posts AS P\nWHERE  p.LastEditDate < DATEADD(month, -6, p.LastActivityDate) \nAND Score <= 5 \nORDER BY P.Score ASC, P.CreationDate ASC",
        "CreationDate": "2020-10-20 07:54:31",
        "validated": false,
        "QueryBody_Original": "SELECT  TOP 1000 P.Id AS [Post Link], P.CreationDate, P.Score, P.PostTypeID, p.LastEditDate,p.LastActivityDate\nFROM Posts AS P\nWHERE  p.LastEditDate < DATEADD(month, -6, p.LastActivityDate) \nAND Score <= 5 \nORDER BY P.Score ASC, P.CreationDate ASC"
    },
    {
        "QuerySetId": 77631,
        "Title": "Percentage of Answers Accepted Without Upvoting",
        "Description": "To help those trying to attain the Tenacious and Unsung Hero badges",
        "QueryBody": "SELECT  Id,Title, body from Posts where \nPostTypeId = 2 and OwnerUserId = ##UserId## \n and AcceptedAnswerId = Id",
        "CreationDate": "2016-03-08 23:40:15",
        "validated": false,
        "QueryBody_Original": "SELECT  Id,Title, body from Posts where \nPostTypeId = 2 and OwnerUserId = ##UserId## \n and AcceptedAnswerId = Id"
    },
    {
        "QuerySetId": 78135,
        "Title": "Reputation held by the top 1 percent of Users",
        "Description": "How much of the total reputation in SO is held by the top 1 percent of users",
        "QueryBody": "DECLARE  @numUsers int\n\nSELECT @numUsers = COUNT(*) FROM Users\n----\nDECLARE @top1Percent int\n\nSELECT @top1Percent = @numUsers \/ 100\n----\nDECLARE @totalRep float\n\nSELECT @totalRep = SUM(Users.Reputation) FROM Users\n----\nSELECT SUM(tmp.Reputation) \/ @totalRep \nFROM (SELECT TOP (@numUsers\/100)\n    ROW_NUMBER() OVER(ORDER BY Reputation DESC) AS [#], \n    Id AS [User Link], \n    Reputation\nFROM\n    Users\nORDER BY\nReputation DESC) as tmp;",
        "CreationDate": "2013-06-09 22:34:00",
        "validated": false,
        "QueryBody_Original": "DECLARE  @numUsers int\n\nSELECT @numUsers = COUNT(*) FROM Users\n----\nDECLARE @top1Percent int\n\nSELECT @top1Percent = @numUsers \/ 100\n----\nDECLARE @totalRep float\n\nSELECT @totalRep = SUM(Users.Reputation) FROM Users\n----\nSELECT SUM(tmp.Reputation) \/ @totalRep \nFROM (SELECT TOP (@numUsers\/100)\n    ROW_NUMBER() OVER(ORDER BY Reputation DESC) AS [#], \n    Id AS [User Link], \n    Reputation\nFROM\n    Users\nORDER BY\nReputation DESC) as tmp;"
    },
    {
        "QuerySetId": 78168,
        "Title": "Find which User IDs don't exist (deleted users)",
        "Description": "Enter the maximum user ID to retrieve up to and click \"Run Query.\"",
        "QueryBody": "DECLARE  @id int = ##MaxUserID##\n\nSELECT\n  Id,\n  DisplayName,\n  Reputation,\n  Age\n\nFROM\n  Users\n\nWHERE\n    Id>4\n  AND\n    Id<@id",
        "CreationDate": "2012-08-26 10:21:53",
        "validated": false,
        "QueryBody_Original": "DECLARE  @id int = ##MaxUserID##\n\nSELECT\n  Id,\n  DisplayName,\n  Reputation,\n  Age\n\nFROM\n  Users\n\nWHERE\n    Id>4\n  AND\n    Id<@id"
    },
    {
        "QuerySetId": 78170,
        "Title": "User's displayname (at the time of data dump)",
        "Description": null,
        "QueryBody": "SELECT  DisplayName from Users\nwhere Id=##UserId##",
        "CreationDate": "2012-08-26 13:33:24",
        "validated": false,
        "QueryBody_Original": "SELECT  DisplayName from Users\nwhere Id=##UserId##"
    },
    {
        "QuerySetId": 78183,
        "Title": "Top users by specified age",
        "Description": null,
        "QueryBody": "DECLARE  @age int = ##UserAge##\n\nSELECT TOP 100\n  Id AS [User Link]\n  , Reputation\n  , Age\n  , CreationDate\n  , LastAccessDate\n  \nFROM\n  Users\n  \nWHERE\n  Age=@age\n    \nORDER BY\n  Reputation DESC",
        "CreationDate": "2012-09-03 13:56:35",
        "validated": false,
        "QueryBody_Original": "DECLARE  @age int = ##UserAge##\n\nSELECT TOP 100\n  Id AS [User Link]\n  , Reputation\n  , Age\n  , CreationDate\n  , LastAccessDate\n  \nFROM\n  Users\n  \nWHERE\n  Age=@age\n    \nORDER BY\n  Reputation DESC"
    },
    {
        "QuerySetId": 78402,
        "Title": "How many more accepted answers do I need until Tenacious\/Unsung Hero",
        "Description": "Variation of Eric's query \"How unsung am I?\" Zero and non-zero accepted count. Self-accepted answers do not count. How many more accepted answers with a score of zero are needed, assuming no more accepted answers with a score greater than 0, to receive both badges.\r\n",
        "QueryBody": "WITH  a score of zero are needed, assuming no more accepted answers WITH a score greater than 0, to receive both badges.\n\nselect\n    count(a.Id) as [Accepted Answers],\n    sum(case when a.Score = 0 then 0 else 1 end) as [Scored Answers],  \n    sum(case when a.Score = 0 then 1 else 0 end) as [Unscored Answers],\n    sum(CASE WHEN a.Score = 0 then 1 else 0 end)*1000 \/ count(a.Id) \/ 10.0 as [Percentage Unscored],\n    (count(a.Id)\/5-sum(case when a.Score = 0 then 1 else 0 end))\/0.8 as [To Tenacious],\n    (count(a.Id)\/4-sum(case when a.Score = 0 then 1 else 0 end))\/0.75 as [To Unsung Hero]\nfrom\n    Posts q\n  inner join\n    Posts a\n  on a.Id = q.AcceptedAnswerId\nwhere\n      a.CommunityOwnedDate is null\n  and a.OwnerUserId = ##UserId##\n  and q.OwnerUserId != ##UserId##\n  and a.postTypeId = 2",
        "CreationDate": "2018-02-21 18:08:17",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 78438,
        "Title": "Users who have downvoted the most",
        "Description": null,
        "QueryBody": "WITH  the highest Up\/Down vote ratio\n\nSELECT \n    Id AS [User Link],\n    DownVotes,UpVotes,\n    CONVERT(float, DownVotes)\/UpVotes as du_ratio,\n    (DownVotes+UpVotes) as totalVotes,\n     Reputation\nFROM \n    Users\nWHERE \n    Reputation > 125 -- If we bring down 125 limit query will \n                     -- take huge time and wont complete\n    and DownVotes > 500\nORDER BY \n    [DownVotes] DESC",
        "CreationDate": "2012-08-29 16:07:02",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 78455,
        "Title": "A list of your Posts and the comments they have",
        "Description": null,
        "QueryBody": "SELECT  \n  p.Id as [Post Link],\n  \n --c.Text as [CommentText]\n Count(c.Id) As CommentCount,\n p.Score\nFROM\n Posts p\nINNER JOIN Comments c ON\n c.PostId = p.Id\nWHERE\n p.OwnerUserId = ##UserId##\nGROUP BY p.Id, p.Score\nOrder By CommentCount Desc",
        "CreationDate": "2012-08-30 11:12:46",
        "validated": false,
        "QueryBody_Original": "SELECT  \n  p.Id as [Post Link],\n  \n --c.Text as [CommentText]\n Count(c.Id) As CommentCount,\n p.Score\nFROM\n Posts p\nINNER JOIN Comments c ON\n c.PostId = p.Id\nWHERE\n p.OwnerUserId = ##UserId##\nGROUP BY p.Id, p.Score\nOrder By CommentCount Desc"
    },
    {
        "QuerySetId": 78556,
        "Title": "Search for potential link-only answers",
        "Description": null,
        "QueryBody": "DECLARE  @MaxAge int = ##MaxPosterInactivity##\n\nSELECT TOP 20 Id AS [Post Link] FROM Posts \nWHERE (Body LIKE '%http:\/\/%' OR BODY LIKE 'http:\/\/%' OR  BODY LIKE 'https:\/\/%' OR  BODY LIKE '%https:\/\/%') AND PostTypeId=2\nAND DateDiff(dd, CONVERT(date, (SELECT LastAccessDate FROM Users WHERE Id=Posts.OwnerUserId)), GETDATE())<@MaxAge\nORDER BY LEN(Body) ASC;",
        "CreationDate": "2012-08-30 23:08:16",
        "validated": false,
        "QueryBody_Original": "DECLARE  @MaxAge int = ##MaxPosterInactivity##\n\nSELECT TOP 20 Id AS [Post Link] FROM Posts \nWHERE (Body LIKE '%http:\/\/%' OR BODY LIKE 'http:\/\/%' OR  BODY LIKE 'https:\/\/%' OR  BODY LIKE '%https:\/\/%') AND PostTypeId=2\nAND DateDiff(dd, CONVERT(date, (SELECT LastAccessDate FROM Users WHERE Id=Posts.OwnerUserId)), GETDATE())<@MaxAge\nORDER BY LEN(Body) ASC;"
    },
    {
        "QuerySetId": 78629,
        "Title": "all votes and accepts users have cast for all your posts",
        "Description": null,
        "QueryBody": "SELECT  \n  TotalUpVotes = sum(case when VoteTypeId = 2 then 1 else 0 end), \n  TotalDownVotes = sum(case when VoteTypeId = 3 then 1 else 0 end),\n  Accepts = sum(case when VoteTypeId = 1 then 1 else 0 end)\nFROM Posts p INNER JOIN Votes v ON\n p.id = v.PostId\nWHERE p.OwnerUserId = ##UserId##",
        "CreationDate": "2012-08-31 21:12:39",
        "validated": false,
        "QueryBody_Original": "SELECT  \n  TotalUpVotes = sum(case when VoteTypeId = 2 then 1 else 0 end), \n  TotalDownVotes = sum(case when VoteTypeId = 3 then 1 else 0 end),\n  Accepts = sum(case when VoteTypeId = 1 then 1 else 0 end)\nFROM Posts p INNER JOIN Votes v ON\n p.id = v.PostId\nWHERE p.OwnerUserId = ##UserId##"
    },
    {
        "QuerySetId": 78630,
        "Title": "Find your comments with score of 5 or more",
        "Description": null,
        "QueryBody": "DECLARE  @UserId int = ##UserID##\n\nSELECT\n  Score,\n  CreationDate AS 'Posted',\n  Id AS [Comment Link]\n  \nFROM\n  Comments\n  \nWHERE\n    Score>=5\n  AND\n    UserId=@UserId",
        "CreationDate": "2012-08-31 21:18:35",
        "validated": false,
        "QueryBody_Original": "DECLARE  @UserId int = ##UserID##\n\nSELECT\n  Score,\n  CreationDate AS 'Posted',\n  Id AS [Comment Link]\n  \nFROM\n  Comments\n  \nWHERE\n    Score>=5\n  AND\n    UserId=@UserId"
    },
    {
        "QuerySetId": 79206,
        "Title": "Weighted Score of more 'successful' users",
        "Description": "Tries to gauge success by weighting number of answers by acceptance percentage. This is done as a way to weed out people who post very infrequently, but are accepted often (counter productive perhaps, but too cautious for my likes).",
        "QueryBody": "DECLARE  @MinAnswers int = ##MinAnswers##\n\nSELECT TOP 1000\n  u.Id AS [User Link],\n  count(*) AS NumAnswers,\n  sum(case when q.AcceptedAnswerId = a.Id then 1 else 0 end) AS NumAccepted,\n  (sum(case when q.AcceptedAnswerId = a.Id then 1 else 0 end)*100.0\/(count(*))) AS AcceptedPercent,\n  sum(case when q.AcceptedAnswerId = a.Id then 1 else 0 end)*(sum(case when q.AcceptedAnswerId = a.Id then 1 else 0 end)*100.0\/(count(*)))\/100 as WeightedScore\nFROM Posts a\nINNER JOIN Users u ON u.Id = a.OwnerUserId\nINNER JOIN Posts q ON a.ParentId = q.Id\nWHERE \n  (q.OwnerUserId <> u.Id OR q.OwnerUserId IS NULL)  --no self answers\n  AND u.Id = 918414\nGROUP BY u.Id\nORDER BY WeightedScore DESC, AcceptedPercent DESC, NumAnswers DESC",
        "CreationDate": "2013-03-04 00:10:21",
        "validated": false,
        "QueryBody_Original": "DECLARE  @MinAnswers int = ##MinAnswers##\n\nSELECT TOP 1000\n  u.Id AS [User Link],\n  count(*) AS NumAnswers,\n  sum(case when q.AcceptedAnswerId = a.Id then 1 else 0 end) AS NumAccepted,\n  (sum(case when q.AcceptedAnswerId = a.Id then 1 else 0 end)*100.0\/(count(*))) AS AcceptedPercent,\n  sum(case when q.AcceptedAnswerId = a.Id then 1 else 0 end)*(sum(case when q.AcceptedAnswerId = a.Id then 1 else 0 end)*100.0\/(count(*)))\/100 as WeightedScore\nFROM Posts a\nINNER JOIN Users u ON u.Id = a.OwnerUserId\nINNER JOIN Posts q ON a.ParentId = q.Id\nWHERE \n  (q.OwnerUserId <> u.Id OR q.OwnerUserId IS NULL)  --no self answers\n  AND u.Id = 918414\nGROUP BY u.Id\nORDER BY WeightedScore DESC, AcceptedPercent DESC, NumAnswers DESC"
    },
    {
        "QuerySetId": 79212,
        "Title": "My answers without custom tag",
        "Description": "List all answer posts to questions without Delphi tag.",
        "QueryBody": "DECLARE  @MyUserID INT = ##UserID:int##\nDECLARE @MyTagOfChoice nchar(25) = ##MyTagOfChoice##\n\nSELECT\n    Answer.Id AS [Post Link],\n    Answer.Score AS [Score],\n    Question.Tags,\n    Answer.CreationDate AS [Creation Date]\nFROM\n    Posts Question\nLEFT JOIN Posts Answer ON Question.ID = Answer.ParentId\nWHERE\n    Answer.PostTypeId = 2 AND\n    Answer.OwnerUserId = @MyUserID AND\n    Question.Tags NOT LIKE @MyTagOfChoice\nORDER BY\n    Question.CreationDate\nASC",
        "CreationDate": "2012-09-08 04:55:07",
        "validated": false,
        "QueryBody_Original": "DECLARE  @MyUserID INT = ##UserID:int##\nDECLARE @MyTagOfChoice nchar(25) = ##MyTagOfChoice##\n\nSELECT\n    Answer.Id AS [Post Link],\n    Answer.Score AS [Score],\n    Question.Tags,\n    Answer.CreationDate AS [Creation Date]\nFROM\n    Posts Question\nLEFT JOIN Posts Answer ON Question.ID = Answer.ParentId\nWHERE\n    Answer.PostTypeId = 2 AND\n    Answer.OwnerUserId = @MyUserID AND\n    Question.Tags NOT LIKE @MyTagOfChoice\nORDER BY\n    Question.CreationDate\nASC"
    },
    {
        "QuerySetId": 79437,
        "Title": "Strunk & White \/ Copy Editor Progress",
        "Description": "This query returns the number of edits you've made toward the Strunk & White or Copy Editor badge.",
        "QueryBody": "DECLARE  @userid int = ##UserId##\n\nSELECT COUNT(*)\nFROM (\n    SELECT   PostID\n    FROM     PostHistory ph\n    WHERE    PostHistoryTypeId IN (4,5)\n        AND  PostId NOT IN (\n            SELECT p.Id\n            FROM   Posts p\n            WHERE  p.OwnerUserId = ph.UserId\n        )\n        AND UserID = @userid\n    GROUP BY PostID\n) AS bar",
        "CreationDate": "2012-09-12 11:49:39",
        "validated": false,
        "QueryBody_Original": "DECLARE  @userid int = ##UserId##\n\nSELECT COUNT(*)\nFROM (\n    SELECT   PostID\n    FROM     PostHistory ph\n    WHERE    PostHistoryTypeId IN (4,5)\n        AND  PostId NOT IN (\n            SELECT p.Id\n            FROM   Posts p\n            WHERE  p.OwnerUserId = ph.UserId\n        )\n        AND UserID = @userid\n    GROUP BY PostID\n) AS bar"
    },
    {
        "QuerySetId": 79527,
        "Title": "My answers with non Delphi tag",
        "Description": "List all answer posts to questions without Delphi tag.",
        "QueryBody": "DECLARE  @MyUserID INT = ##UserID:int##\n\nSELECT\n    Answer.Id AS [Post Link],\n    Answer.Score AS [Score],\n    Question.Tags,\n    Answer.CreationDate AS [Creation Date]\nFROM\n    Posts Question\nLEFT JOIN Posts Answer ON Question.ID = Answer.ParentId\nWHERE\n    Answer.PostTypeId = 2 AND\n    Answer.OwnerUserId = @MyUserID AND\n    Question.Tags LIKE '%<server-socket>%'\nORDER BY\n    Question.CreationDate\nASC",
        "CreationDate": "2012-09-11 12:05:47",
        "validated": false,
        "QueryBody_Original": "DECLARE  @MyUserID INT = ##UserID:int##\n\nSELECT\n    Answer.Id AS [Post Link],\n    Answer.Score AS [Score],\n    Question.Tags,\n    Answer.CreationDate AS [Creation Date]\nFROM\n    Posts Question\nLEFT JOIN Posts Answer ON Question.ID = Answer.ParentId\nWHERE\n    Answer.PostTypeId = 2 AND\n    Answer.OwnerUserId = @MyUserID AND\n    Question.Tags LIKE '%<server-socket>%'\nORDER BY\n    Question.CreationDate\nASC"
    },
    {
        "QuerySetId": 79626,
        "Title": "Edits During a before during and after bounty",
        "Description": null,
        "QueryBody": "SELECT  * from votes v where votetypeid = 8 -- Boutystart\n\n\n\/* PostHistoryTypes\n4 --edit title\n5 --edit body\n6 --edit tags\n24 -- Suggested Edit\n*\/\n\nSELECT \n  Count(P.id) PostCount, \n  Count(Edits.id) EditsDuringBouty\nFROM posts P\n  INNER JOIN Votes bStart\n  ON p.id = bStart.PostID\n    AND bStart.VoteTypeID = 8 -- BountyStart\n  INNER JOIN Votes bEnd\n  ON p.id = bEnd.PostID\n    AND bStart.VoteTypeID = 9 -- BountyStart\n  LEFT JOIN PostHistory Edits\n  ON p.id = Edits.PostID\n  AND Edits.CreationDate >= bStart.CreationDate\n  AND Edits.CreationDate <= bEnd.CreationDate\n  AND Edits.PostHistoryTypeID IN (4,5,6,24)",
        "CreationDate": "2012-09-11 20:01:42",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 80364,
        "Title": "User-Tag Answer Stats Over Time",
        "Description": null,
        "QueryBody": "DECLARE  @Tag nvarchar(25) = ##Tag:string##;\nDECLARE @MinDate datetime = ##MinDate:string##;\nDECLARE @MaxDate datetime = ##MaxDate:string##;\n\nSELECT \n  COUNT(DISTINCT Answers.Id) AS Answers,\n  COUNT(DISTINCT Votes.BountyAmount) AS Votes\nFROM \n  Posts AS Answers\n  INNER JOIN Posts Questions ON (Answers.ParentId = Questions.Id)\n  INNER JOIN PostTags ON (Questions.Id = PostTags.PostId)\n  INNER JOIN Tags ON (PostTags.TagId = Tags.Id)\n  INNER JOIN Votes ON (Answers.Id = Votes.PostId)\nWHERE \n  Answers.CreationDate >= @MinDate AND\n  Answers.CreationDate <= @MaxDate AND\n  Tags.TagName = @Tag;",
        "CreationDate": "2014-07-30 04:14:23",
        "validated": false,
        "QueryBody_Original": "DECLARE  @Tag nvarchar(25) = ##Tag:string##;\nDECLARE @MinDate datetime = ##MinDate:string##;\nDECLARE @MaxDate datetime = ##MaxDate:string##;\n\nSELECT \n  COUNT(DISTINCT Answers.Id) AS Answers,\n  COUNT(DISTINCT Votes.BountyAmount) AS Votes\nFROM \n  Posts AS Answers\n  INNER JOIN Posts Questions ON (Answers.ParentId = Questions.Id)\n  INNER JOIN PostTags ON (Questions.Id = PostTags.PostId)\n  INNER JOIN Tags ON (PostTags.TagId = Tags.Id)\n  INNER JOIN Votes ON (Answers.Id = Votes.PostId)\nWHERE \n  Answers.CreationDate >= @MinDate AND\n  Answers.CreationDate <= @MaxDate AND\n  Tags.TagName = @Tag;"
    },
    {
        "QuerySetId": 80737,
        "Title": "How fast do my questions get answered?",
        "Description": null,
        "QueryBody": "SELECT  DateDiff(minute, SQ.QuestionDate, SQ.AnswerDate) As Diff\nFROM\n(\nSELECT Questions.Id, Questions.CreationDate as QuestionDate, \n        MIN(Answers.CreationDate) as AnswerDate \nfrom Posts as Questions\ninner join Posts as Answers on Questions.Id = Answers.ParentId\nwhere Questions.PostTypeId = 1\nand Questions.OwnerUserId = ##USERID##\nGroup By Questions.Id, Questions.CreationDate\n) As SQ\nORDER BY Diff",
        "CreationDate": "2012-09-24 21:59:48",
        "validated": false,
        "QueryBody_Original": "SELECT  DateDiff(minute, SQ.QuestionDate, SQ.AnswerDate) As Diff\nFROM\n(\nSELECT Questions.Id, Questions.CreationDate as QuestionDate, \n        MIN(Answers.CreationDate) as AnswerDate \nfrom Posts as Questions\ninner join Posts as Answers on Questions.Id = Answers.ParentId\nwhere Questions.PostTypeId = 1\nand Questions.OwnerUserId = ##USERID##\nGroup By Questions.Id, Questions.CreationDate\n) As SQ\nORDER BY Diff"
    },
    {
        "QuerySetId": 81190,
        "Title": "Comments with a particular word",
        "Description": null,
        "QueryBody": "SELECT  PostId as [Post Link], Text FROM comments\nWHERE UserId = ##UserId##\nAND Text LIKE '%fuck%'",
        "CreationDate": "2012-09-28 02:52:15",
        "validated": false,
        "QueryBody_Original": "SELECT  PostId as [Post Link], Text FROM comments\nWHERE UserId = ##UserId##\nAND Text LIKE '%fuck%'"
    },
    {
        "QuerySetId": 81304,
        "Title": "What hour of the day I post the most answers",
        "Description": null,
        "QueryBody": "DECLARE  @UserId int = ##UserId##\n\nSELECT \n  DATEPART(hour, p.CreationDate), Count(*)\nFROM\n  Posts p\nWHERE \n  p.OwnerUserId = @UserId\nAND\n  p.PostTypeId = 2\nGROUP BY\n  DATEPART(hour, p.CreationDate);",
        "CreationDate": "2012-09-30 03:06:22",
        "validated": false,
        "QueryBody_Original": "DECLARE  @UserId int = ##UserId##\n\nSELECT \n  DATEPART(hour, p.CreationDate), Count(*)\nFROM\n  Posts p\nWHERE \n  p.OwnerUserId = @UserId\nAND\n  p.PostTypeId = 2\nGROUP BY\n  DATEPART(hour, p.CreationDate);"
    },
    {
        "QuerySetId": 81655,
        "Title": "What Copy Editor\/Strunk & White-qualifying edits have I made?",
        "Description": "Lists title and\/or body revisions made on other people's non-deleted posts.",
        "QueryBody": "DECLARE \n--  @UserId int = 14073\n  @PostId int = 70000\n\nSELECT\n  MIN( ph.Id ) AS Id\n    ,\n  MIN( ph.PostId ) AS PostId\n    ,\n  MIN( ph.CreationDate ) AS CreationDate\n    ,\n  MIN( ph.UserId ) AS UserId\n    ,\n  MIN( ph.Comment ) AS Comment\n    ,\n  MIN( ph.Text ) AS Text\n\nFROM\n  PostHistory ph\n\nWHERE\n--  ph.UserId = @UserId\n--  ph.PostId = @PostId\n  ph.PostId > @PostId\n--    AND\n--  ph.PostHistoryTypeId IN ( 4 , 5 )\n--    AND\n--  ph.PostId NOT IN ( SELECT p.Id FROM Posts p WHERE p.OwnerUserId = @UserId )\n\nGROUP BY\n  ph.RevisionGUID\n\nORDER BY\n  CreationDate DESC",
        "CreationDate": "2012-10-03 21:54:50",
        "validated": false,
        "QueryBody_Original": "DECLARE \n--  @UserId int = 14073\n  @PostId int = 70000\n\nSELECT\n  MIN( ph.Id ) AS Id\n    ,\n  MIN( ph.PostId ) AS PostId\n    ,\n  MIN( ph.CreationDate ) AS CreationDate\n    ,\n  MIN( ph.UserId ) AS UserId\n    ,\n  MIN( ph.Comment ) AS Comment\n    ,\n  MIN( ph.Text ) AS Text\n\nFROM\n  PostHistory ph\n\nWHERE\n--  ph.UserId = @UserId\n--  ph.PostId = @PostId\n  ph.PostId > @PostId\n--    AND\n--  ph.PostHistoryTypeId IN ( 4 , 5 )\n--    AND\n--  ph.PostId NOT IN ( SELECT p.Id FROM Posts p WHERE p.OwnerUserId = @UserId )\n\nGROUP BY\n  ph.RevisionGUID\n\nORDER BY\n  CreationDate DESC"
    },
    {
        "QuerySetId": 81968,
        "Title": "Which and how many tags have the questions I answered?",
        "Description": null,
        "QueryBody": "DECLARE  @UserId int = ##UserId##\n\nSELECT \n  t.TagName, \n  COUNT(t.TagName) as Count\nFROM \n  Tags t, \n  PostTags pt, \n  Posts p\nWHERE \n  pt.PostId = p.ParentId \n  AND  pt.TagId = t.Id\n  AND p.OwnerUserId = @UserId\nGROUP BY t.TagName\nORDER BY Count DESC",
        "CreationDate": "2012-10-09 17:36:22",
        "validated": false,
        "QueryBody_Original": "DECLARE  @UserId int = ##UserId##\n\nSELECT \n  t.TagName, \n  COUNT(t.TagName) as Count\nFROM \n  Tags t, \n  PostTags pt, \n  Posts p\nWHERE \n  pt.PostId = p.ParentId \n  AND  pt.TagId = t.Id\n  AND p.OwnerUserId = @UserId\nGROUP BY t.TagName\nORDER BY Count DESC"
    },
    {
        "QuerySetId": 83009,
        "Title": "Top-N users for a tag",
        "Description": null,
        "QueryBody": "DECLARE  @Limit int = ##Limit:int##; \nDECLARE @Tag nvarchar(25) = ##TagName:string##;\n\n\nWITH t as \n ( SELECT TOP 10 sum(Score) as total,  DisplayName as name\n    FROM Posts \n       INNER JOIN PostTags on Posts.ParentId = PostTags.PostId\n       INNER JOIN Tags on  PostTags.TagId = Tags.id\n       INNER JOIN Users on Posts.OwnerUserId = Users.id\n    WHERE\n       Tags.Tagname = @Tag\n      and Score != 0\n    GROUP by Users.id, DisplayName\n    ORDER BY total DESC\n    )\n    \n    \nSELECT ROW_NUMBER() OVER (ORDER BY total DESC) as rank, total, name\nFROM t",
        "CreationDate": "2012-10-23 16:12:52",
        "validated": false,
        "QueryBody_Original": "DECLARE  @Limit int = ##Limit:int##; \nDECLARE @Tag nvarchar(25) = ##TagName:string##;\n\n\nWITH t as \n ( SELECT TOP 10 sum(Score) as total,  DisplayName as name\n    FROM Posts \n       INNER JOIN PostTags on Posts.ParentId = PostTags.PostId\n       INNER JOIN Tags on  PostTags.TagId = Tags.id\n       INNER JOIN Users on Posts.OwnerUserId = Users.id\n    WHERE\n       Tags.Tagname = @Tag\n      and Score != 0\n    GROUP by Users.id, DisplayName\n    ORDER BY total DESC\n    )\n    \n    \nSELECT ROW_NUMBER() OVER (ORDER BY total DESC) as rank, total, name\nFROM t"
    },
    {
        "QuerySetId": 83010,
        "Title": "Rank of user for a given tag",
        "Description": null,
        "QueryBody": "DECLARE  @UserId int = ##UserId##; \nDECLARE @Tag nvarchar(25) = ##TagName:string##;\n\nWITH t as \n ( SELECT  sum(Score) as total,  DisplayName as name, Users.id as Uid\n    FROM Posts \n       INNER JOIN PostTags on Posts.ParentId = PostTags.PostId\n       INNER JOIN Tags on  PostTags.TagId = Tags.id\n       INNER JOIN Users on Posts.OwnerUserId = Users.id\n    WHERE\n       Tags.Tagname = @Tag\n      and Score != 0\n    GROUP by Users.id, DisplayName\n    ),    \n    \n q as \n    ( SELECT ROW_NUMBER() OVER (ORDER BY total DESC) as rank, total, name, Uid\n    FROM t)\n    \nselect rank, total, name\nfrom q\n  WHERE Uid = @UserId",
        "CreationDate": "2012-10-31 12:29:32",
        "validated": false,
        "QueryBody_Original": "DECLARE  @UserId int = ##UserId##; \nDECLARE @Tag nvarchar(25) = ##TagName:string##;\n\nWITH t as \n ( SELECT  sum(Score) as total,  DisplayName as name, Users.id as Uid\n    FROM Posts \n       INNER JOIN PostTags on Posts.ParentId = PostTags.PostId\n       INNER JOIN Tags on  PostTags.TagId = Tags.id\n       INNER JOIN Users on Posts.OwnerUserId = Users.id\n    WHERE\n       Tags.Tagname = @Tag\n      and Score != 0\n    GROUP by Users.id, DisplayName\n    ),    \n    \n q as \n    ( SELECT ROW_NUMBER() OVER (ORDER BY total DESC) as rank, total, name, Uid\n    FROM t)\n    \nselect rank, total, name\nfrom q\n  WHERE Uid = @UserId"
    },
    {
        "QuerySetId": 83040,
        "Title": "How many votes have I casted?",
        "Description": "how long before I get tag badges?\r\n",
        "QueryBody": "DECLARE  @UserId int = ##UserId##\n\nselect id from votes where UserId = ##UserId## and VoteTypeId = 6",
        "CreationDate": "2014-09-08 20:34:42",
        "validated": false,
        "QueryBody_Original": "DECLARE  @UserId int = ##UserId##\n\nselect id from votes where UserId = ##UserId## and VoteTypeId = 6"
    },
    {
        "QuerySetId": 83125,
        "Title": "Tag usage chart (e.g. questions, answers count) by month.",
        "Description": null,
        "QueryBody": "DECLARE  @UserId int = ##UserId##\n\nSELECT --TOP 20 \n    TagName,\n    COUNT(*) AS UpVotes \nFROM Tags\n    INNER JOIN PostTags ON PostTags.TagId = Tags.id\n    INNER JOIN Posts ON Posts.ParentId = PostTags.PostId\n    INNER JOIN Votes ON Votes.PostId = Posts.Id and VoteTypeId = 2\nWHERE \n    Posts.OwnerUserId = @UserId\nGROUP BY TagName \nORDER BY UpVotes DESC",
        "CreationDate": "2012-10-24 22:51:01",
        "validated": false,
        "QueryBody_Original": "DECLARE  @UserId int = ##UserId##\n\nSELECT --TOP 20 \n    TagName,\n    COUNT(*) AS UpVotes \nFROM Tags\n    INNER JOIN PostTags ON PostTags.TagId = Tags.id\n    INNER JOIN Posts ON Posts.ParentId = PostTags.PostId\n    INNER JOIN Votes ON Votes.PostId = Posts.Id and VoteTypeId = 2\nWHERE \n    Posts.OwnerUserId = @UserId\nGROUP BY TagName \nORDER BY UpVotes DESC"
    },
    {
        "QuerySetId": 83375,
        "Title": "Count pairs of tags (number of posts with tag1 and tag2, for all tags)",
        "Description": "Returns counts of pairs of tags, which occur in the same question.",
        "QueryBody": "DECLARE  @MinCounts int = ##MinCounts##\n-- For StackOverflow 1000 is a typical value\n-- For other StackExachange sites you can safely use 0\n\nSELECT -- TOP 100\n    T1.TagName Tag1,\n    T2.TagName Tag2,\n    count(*) TagPairCount\nFROM Posts P\n    INNER JOIN PostTags PT1 ON PT1.PostId = P.Id\n    INNER JOIN PostTags PT2 ON PT2.PostId = P.Id \n    INNER JOIN Tags T1 ON T1.Id = PT1.TagId \n    INNER JOIN Tags T2 ON T2.Id = PT2.TagId\nWHERE\n    T1.TagName < T2.TagName\nGROUP BY\n    T1.TagName,\n    T2.TagName\nHAVING\n    count(*) >= @MinCounts\nORDER BY\n    TagPairCount DESC",
        "CreationDate": "2012-10-29 01:25:50",
        "validated": false,
        "QueryBody_Original": "DECLARE  @MinCounts int = ##MinCounts##\n-- For StackOverflow 1000 is a typical value\n-- For other StackExachange sites you can safely use 0\n\nSELECT -- TOP 100\n    T1.TagName Tag1,\n    T2.TagName Tag2,\n    count(*) TagPairCount\nFROM Posts P\n    INNER JOIN PostTags PT1 ON PT1.PostId = P.Id\n    INNER JOIN PostTags PT2 ON PT2.PostId = P.Id \n    INNER JOIN Tags T1 ON T1.Id = PT1.TagId \n    INNER JOIN Tags T2 ON T2.Id = PT2.TagId\nWHERE\n    T1.TagName < T2.TagName\nGROUP BY\n    T1.TagName,\n    T2.TagName\nHAVING\n    count(*) >= @MinCounts\nORDER BY\n    TagPairCount DESC"
    },
    {
        "QuerySetId": 83507,
        "Title": "Post Score\/View ratio - top 20 most valuable posts",
        "Description": "Returns 20 question posts with the highest Score\/View ratio, (arguably) being a measure of the post quality (as opposed to - popularity).",
        "QueryBody": "DECLARE  @MinScore int = ##MinScore##\nDECLARE @MinViews int = ##MinViews##\n-- Just to avoid very high SVRatio (sometimes 1) for new questions\n\nSELECT TOP 20\n  P.Title Title,\n  CAST(P.Score AS FLOAT) \/ CAST(P.ViewCount AS FLOAT) SVRatio,\n  P.Score Score,\n  P.ViewCount Views,\n  P.CreationDate CreationDate\nFROM\n  Posts P\nWHERE\n  P.PostTypeId = 1 -- only question posts\n  AND P.Score >= @MinScore\n  AND P.ViewCount >= @MinViews\nORDER BY\n  SVRatio DESC",
        "CreationDate": "2012-10-30 13:47:24",
        "validated": false,
        "QueryBody_Original": "DECLARE  @MinScore int = ##MinScore##\nDECLARE @MinViews int = ##MinViews##\n-- Just to avoid very high SVRatio (sometimes 1) for new questions\n\nSELECT TOP 20\n  P.Title Title,\n  CAST(P.Score AS FLOAT) \/ CAST(P.ViewCount AS FLOAT) SVRatio,\n  P.Score Score,\n  P.ViewCount Views,\n  P.CreationDate CreationDate\nFROM\n  Posts P\nWHERE\n  P.PostTypeId = 1 -- only question posts\n  AND P.Score >= @MinScore\n  AND P.ViewCount >= @MinViews\nORDER BY\n  SVRatio DESC"
    },
    {
        "QuerySetId": 83705,
        "Title": "How unsung am I ?",
        "Description": null,
        "QueryBody": "DECLARE  @UserId int = ##UserId##; \n\nselect a.OwnerUserId [User Link],\n       sum(case when a.Score = 0 then 0 else 1 end) as [Non Zero Score Answers],  \n       sum(case when a.Score = 0 then 1 else 0 end) as [Zero Score Answers]\nfrom Posts a\n     join Posts q on a.Id = q.AcceptedAnswerId \nwhere\n       a.OwnerUserId = @UserId\n   and a.CommunityOwnedDate is null\n   and a.OwnerUserId <> isnull(q.OwnerUserId,-1)\ngroup by a.OwnerUserId",
        "CreationDate": "2012-10-31 12:49:48",
        "validated": false,
        "QueryBody_Original": "DECLARE  @UserId int = ##UserId##; \n\nselect a.OwnerUserId [User Link],\n       sum(case when a.Score = 0 then 0 else 1 end) as [Non Zero Score Answers],  \n       sum(case when a.Score = 0 then 1 else 0 end) as [Zero Score Answers]\nfrom Posts a\n     join Posts q on a.Id = q.AcceptedAnswerId \nwhere\n       a.OwnerUserId = @UserId\n   and a.CommunityOwnedDate is null\n   and a.OwnerUserId <> isnull(q.OwnerUserId,-1)\ngroup by a.OwnerUserId"
    },
    {
        "QuerySetId": 84003,
        "Title": "Posts by a given user",
        "Description": null,
        "QueryBody": "SELECT  Posts.Id, Posts.Id  AS [Post Link]\nFROM Posts\nWHERE OwnerUserId=##UserId## \nAND PostTypeId=##PostType##\nORDER BY Posts.CreationDate DESC",
        "CreationDate": "2012-11-01 10:57:52",
        "validated": false,
        "QueryBody_Original": "SELECT  Posts.Id, Posts.Id  AS [Post Link]\nFROM Posts\nWHERE OwnerUserId=##UserId## \nAND PostTypeId=##PostType##\nORDER BY Posts.CreationDate DESC"
    },
    {
        "QuerySetId": 84005,
        "Title": "Posts by a given user by displayname",
        "Description": null,
        "QueryBody": "SELECT  Posts.Id, Posts.Id  AS [Post Link]\nFROM Posts\nWHERE OwnerDisplayName=##DisplayName##\nAND PostTypeId=##PostType##\nORDER BY Posts.CreationDate DESC",
        "CreationDate": "2012-11-01 11:04:39",
        "validated": false,
        "QueryBody_Original": "SELECT  Posts.Id, Posts.Id  AS [Post Link]\nFROM Posts\nWHERE OwnerDisplayName=##DisplayName##\nAND PostTypeId=##PostType##\nORDER BY Posts.CreationDate DESC"
    },
    {
        "QuerySetId": 84427,
        "Title": "Who has answered your questions most?",
        "Description": null,
        "QueryBody": "SELECT \n  answer.owneruserid as [User Link],\n  answer.owneruserid,\n  count(*) as number\nFROM \n    posts as question\n INNER JOIN\n    posts as answer\n  ON\n    question.posttypeid = 1\n   AND\n    answer.posttypeid = 2\n   AND\n    question.owneruserid = ##userid##\n   AND\n    answer.parentid = question.id\nGROUP BY\n    answer.owneruserid\nORDER BY\n    number DESC",
        "CreationDate": "2012-11-16 03:57:43",
        "validated": false,
        "QueryBody_Original": "SELECT \n  answer.owneruserid as [User Link],\n  answer.owneruserid,\n  count(*) as number\nFROM \n    posts as question\n INNER JOIN\n    posts as answer\n  ON\n    question.posttypeid = 1\n   AND\n    answer.posttypeid = 2\n   AND\n    question.owneruserid = ##userid##\n   AND\n    answer.parentid = question.id\nGROUP BY\n    answer.owneruserid\nORDER BY\n    number DESC"
    },
    {
        "QuerySetId": 84429,
        "Title": "Who has accepted your answers?",
        "Description": null,
        "QueryBody": "SELECT \n  question.owneruserid as [User Link],\n  count(*) as number\nFROM \n    posts as question\n INNER JOIN\n    posts as answer\n  ON\n    question.posttypeid = 1\n   AND\n    answer.posttypeid = 2\n   AND\n    answer.owneruserid = ##userid##\n   AND\n    answer.id = question.acceptedanswerid\nGROUP BY\n    question.owneruserid\nORDER BY\n    number DESC",
        "CreationDate": "2012-11-08 06:01:53",
        "validated": false,
        "QueryBody_Original": "SELECT \n  question.owneruserid as [User Link],\n  count(*) as number\nFROM \n    posts as question\n INNER JOIN\n    posts as answer\n  ON\n    question.posttypeid = 1\n   AND\n    answer.posttypeid = 2\n   AND\n    answer.owneruserid = ##userid##\n   AND\n    answer.id = question.acceptedanswerid\nGROUP BY\n    question.owneruserid\nORDER BY\n    number DESC"
    },
    {
        "QuerySetId": 84597,
        "Title": "Comments on my answers with fixed score",
        "Description": "How many comments do I have for each score.\r\n",
        "QueryBody": "DECLARE  @UserId int = ##UserId##\nDECLARE @Score int = ##Score##\n\nSELECT \n    p.Id AS [Post Link],\n    c.Text\nFROM \n    Posts p\n  JOIN\n    Comments c ON c.PostId = p.Id\nWHERE p.OwnerUserId = @UserId AND \n    NOT c.UserId = @UserId",
        "CreationDate": "2016-01-13 18:07:13",
        "validated": false,
        "QueryBody_Original": "DECLARE  @UserId int = ##UserId##\nDECLARE @Score int = ##Score##\n\nSELECT \n    p.Id AS [Post Link],\n    c.Text\nFROM \n    Posts p\n  JOIN\n    Comments c ON c.PostId = p.Id\nWHERE p.OwnerUserId = @UserId AND \n    NOT c.UserId = @UserId"
    },
    {
        "QuerySetId": 85864,
        "Title": "Find my posts from closed questions",
        "Description": null,
        "QueryBody": "SELECT  PostId as [Post Link],\n    Posts.CreationDate,\n    PostHistory.PostHistoryTypeId\n    from Posts join PostHistory on \n  Posts.id = PostHistory.PostId\nAND Posts.OwnerUserId = ##UserId##",
        "CreationDate": "2019-12-20 20:54:49",
        "validated": false,
        "QueryBody_Original": "SELECT  PostId as [Post Link],\n    Posts.CreationDate,\n    PostHistory.PostHistoryTypeId\n    from Posts join PostHistory on \n  Posts.id = PostHistory.PostId\nAND Posts.OwnerUserId = ##UserId##"
    },
    {
        "QuerySetId": 86725,
        "Title": "Simple Query to get started on Data Explorer",
        "Description": null,
        "QueryBody": "SELECT  state which columns you wish displayed separated by commas\nSELECT \nOwnerDisplayName, AnswerCount\n\n-- from which Schema\/Table\nFROM Posts\n\n--How do you want them sorted?\n-- Sort by Descending Number of Answers\nORDER BY AnswerCount DESC",
        "CreationDate": "2012-11-23 13:25:18",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 86768,
        "Title": "Using userid without an explicit declare",
        "Description": null,
        "QueryBody": "DECLARE \nSELECT Reputation, Location \nFrom Users\nWhere ID = ##UserId##",
        "CreationDate": "2012-11-24 09:54:09",
        "validated": false,
        "QueryBody_Original": "DECLARE \nSELECT Reputation, Location \nFrom Users\nWhere ID = ##UserId##"
    },
    {
        "QuerySetId": 86818,
        "Title": "Users who post longest answers",
        "Description": "Statistical summary of users who like to post long answers.\r\nFilters for users above a minimal post count.\r\n(Fixed to have user links and shorter column names.)\r\n",
        "QueryBody": "SELECT  TOP 50\n    Rank = Row_Number() OVER (ORDER BY avg(len(p.Body)) DESC),\n    [User Link] = p.OwnerUserId,\n    Posts = Count(*),\n    LengthAvg = avg(len(p.Body)),\n    LengthMax = max(len(p.Body)),\n    LengthStDev = Convert(int, stdev(len(p.Body))),\n    LengthTotal = sum(len(p.Body)),\n    Reputation = Min(u.Reputation),\n    RepPer1000Char = Convert(int, Min(Convert(float, u.Reputation)) \/ sum(len(p.Body)) * 1000)\nFROM Posts p\nINNER JOIN Users u ON\n    u.Id = p.OwnerUserId\nWHERE\n    p.PostTypeId = 2\nGROUP BY\n    p.OwnerUserId\nHAVING\n    Count(*) >= ##MinimumPostCount##",
        "CreationDate": "2012-12-05 09:41:45",
        "validated": false,
        "QueryBody_Original": "SELECT  TOP 50\n    Rank = Row_Number() OVER (ORDER BY avg(len(p.Body)) DESC),\n    [User Link] = p.OwnerUserId,\n    Posts = Count(*),\n    LengthAvg = avg(len(p.Body)),\n    LengthMax = max(len(p.Body)),\n    LengthStDev = Convert(int, stdev(len(p.Body))),\n    LengthTotal = sum(len(p.Body)),\n    Reputation = Min(u.Reputation),\n    RepPer1000Char = Convert(int, Min(Convert(float, u.Reputation)) \/ sum(len(p.Body)) * 1000)\nFROM Posts p\nINNER JOIN Users u ON\n    u.Id = p.OwnerUserId\nWHERE\n    p.PostTypeId = 2\nGROUP BY\n    p.OwnerUserId\nHAVING\n    Count(*) >= ##MinimumPostCount##"
    },
    {
        "QuerySetId": 87157,
        "Title": "Answers over the past X Days",
        "Description": null,
        "QueryBody": "DECLARE  @limit int = ##Limit##;\nDECLARE @tag_id int = (select id from tags where tagname = '##TagName##');\n\nDECLARE @windowstags TABLE (\ntagid int,\ntagname char(30) )\n\n\nselect top (@limit)\n  rank() over (order by sum(answers.score) desc) \"Rank\"\n  ,users.id \"User Link\"\n  ,sum(answers.score) as \"Score\"\nfrom users\njoin posts answers on (users.id = answers.owneruserid)\njoin posts parent on (answers.parentid = parent.id)\njoin posttags on (parent.id = posttags.postid)\nwhere posttags.tagid = @tag_id\nand answers.posttypeid = 2  -- answers only\ngroup by users.id\norder by sum(answers.score) desc\n;",
        "CreationDate": "2012-11-27 21:19:35",
        "validated": false,
        "QueryBody_Original": "DECLARE  @limit int = ##Limit##;\nDECLARE @tag_id int = (select id from tags where tagname = '##TagName##');\n\nDECLARE @windowstags TABLE (\ntagid int,\ntagname char(30) )\n\n\nselect top (@limit)\n  rank() over (order by sum(answers.score) desc) \"Rank\"\n  ,users.id \"User Link\"\n  ,sum(answers.score) as \"Score\"\nfrom users\njoin posts answers on (users.id = answers.owneruserid)\njoin posts parent on (answers.parentid = parent.id)\njoin posttags on (parent.id = posttags.postid)\nwhere posttags.tagid = @tag_id\nand answers.posttypeid = 2  -- answers only\ngroup by users.id\norder by sum(answers.score) desc\n;"
    },
    {
        "QuerySetId": 87213,
        "Title": "New users than me with more reputation",
        "Description": null,
        "QueryBody": "SELECT  Them.id as [User Link], *\nFROM Users Them, Users Me\nWHERE Me.id = ##userid## AND Them.reputation > Me.reputation \n  AND Them.creationDate >= Me.creationDate\nORDER BY Them.reputation",
        "CreationDate": "2012-12-21 00:16:06",
        "validated": false,
        "QueryBody_Original": "SELECT  Them.id as [User Link], *\nFROM Users Them, Users Me\nWHERE Me.id = ##userid## AND Them.reputation > Me.reputation \n  AND Them.creationDate >= Me.creationDate\nORDER BY Them.reputation"
    },
    {
        "QuerySetId": 87243,
        "Title": "Copy Editor progress (including tags and about me)",
        "Description": null,
        "QueryBody": "DECLARE  @UserId int = ##UserId##\n\nselect\n( -- No of valid tag edits\n    select\n        count(distinct t.TagName)\n    from\n        Tags t\n    join\n        Posts p on p.Id = WikiPostId or p.Id = ExcerptPostId\n    where\n        p.LastEditorUserId = @UserId\n)\n    \n+\n\n( -- No of valid post edits\n    select \n        count(distinct ph.PostId)\n    from   \n        PostHistory ph\n    join   \n        Posts p on p.Id = ph.PostId and p.OwnerUserId <> @UserId\n    where  \n        ph.UserId = @UserId\n        and    \n        ph.PostHistoryTypeId between 4 and 5 -- edit title, body\n)\n\n+\n\n(\n    select\n        count(distinct u.AboutMe)\n    from\n        Users u\n    where\n        u.Id = @UserId\n    and\n        u.AboutMe != ''\n)",
        "CreationDate": "2012-11-28 15:25:42",
        "validated": false,
        "QueryBody_Original": "DECLARE  @UserId int = ##UserId##\n\nselect\n( -- No of valid tag edits\n    select\n        count(distinct t.TagName)\n    from\n        Tags t\n    join\n        Posts p on p.Id = WikiPostId or p.Id = ExcerptPostId\n    where\n        p.LastEditorUserId = @UserId\n)\n    \n+\n\n( -- No of valid post edits\n    select \n        count(distinct ph.PostId)\n    from   \n        PostHistory ph\n    join   \n        Posts p on p.Id = ph.PostId and p.OwnerUserId <> @UserId\n    where  \n        ph.UserId = @UserId\n        and    \n        ph.PostHistoryTypeId between 4 and 5 -- edit title, body\n)\n\n+\n\n(\n    select\n        count(distinct u.AboutMe)\n    from\n        Users u\n    where\n        u.Id = @UserId\n    and\n        u.AboutMe != ''\n)"
    },
    {
        "QuerySetId": 87307,
        "Title": "Top N Users in the Country",
        "Description": null,
        "QueryBody": "SELECT    \ncount([User Link])\n\nFROM\n         (\n            SELECT Id [User Link], Reputation, DisplayName, Location,\n                   DENSE_RANK() OVER (ORDER BY Reputation DESC) RankNo\n            FROM   Users\n            WHERE  UPPER(Location) like UPPER('%Cameroun%')\n         ) derievedtable\n*\/\nSELECT DisplayName, Reputation from Users \nWhere\nUPPER(Location) like UPPER('%Cameroun%')",
        "CreationDate": "2019-04-16 02:59:18",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 87330,
        "Title": "Posts By year and month",
        "Description": null,
        "QueryBody": "DECLARE  @UserId INT = ##UserID##\n\nSELECT \n\nCast(Year(CreationDate) as char(4)) + '\/' + CAST(Month(CreationDate) as varchar(2))  [Month\/Year],\nCOUNT(id) PostCount\n  \nFROM\n  posts p\nWHERE\n   OwnerUserId = @UserId\nGROUP BY\nCAST(Year(CreationDate) as char(4))   + '\/' +  CAST(Month(CreationDate) as varchar(2)),\n  Month(CreationDate),\n  Year(CreationDate)\nORDER BY  \n    Year(CreationDate),Month(CreationDate)",
        "CreationDate": "2012-11-29 22:55:54",
        "validated": false,
        "QueryBody_Original": "DECLARE  @UserId INT = ##UserID##\n\nSELECT \n\nCast(Year(CreationDate) as char(4)) + '\/' + CAST(Month(CreationDate) as varchar(2))  [Month\/Year],\nCOUNT(id) PostCount\n  \nFROM\n  posts p\nWHERE\n   OwnerUserId = @UserId\nGROUP BY\nCAST(Year(CreationDate) as char(4))   + '\/' +  CAST(Month(CreationDate) as varchar(2)),\n  Month(CreationDate),\n  Year(CreationDate)\nORDER BY  \n    Year(CreationDate),Month(CreationDate)"
    },
    {
        "QuerySetId": 87391,
        "Title": "Finding distribution of answers over months for given PostID",
        "Description": null,
        "QueryBody": "DECLARE  @postId int = ##PostId##\n\nSELECT\n  dates.Date AS [Date],\n  COUNT(dates.Date) AS [Score]\nFROM (\n  SELECT\n    DATEADD(MONTH, MONTH(CreationDate) - 1, DATEADD(YEAR, YEAR(CreationDate) - 1900, 0)) AS Date\n  FROM\n    Posts\n  WHERE\n    PostTypeId = 2 AND\n    ParentId = @postId\n  ) dates\nGROUP BY\n  dates.Date\nORDER BY\n  dates.Date ASC",
        "CreationDate": "2012-11-30 13:55:49",
        "validated": false,
        "QueryBody_Original": "DECLARE  @postId int = ##PostId##\n\nSELECT\n  dates.Date AS [Date],\n  COUNT(dates.Date) AS [Score]\nFROM (\n  SELECT\n    DATEADD(MONTH, MONTH(CreationDate) - 1, DATEADD(YEAR, YEAR(CreationDate) - 1900, 0)) AS Date\n  FROM\n    Posts\n  WHERE\n    PostTypeId = 2 AND\n    ParentId = @postId\n  ) dates\nGROUP BY\n  dates.Date\nORDER BY\n  dates.Date ASC"
    },
    {
        "QuerySetId": 87395,
        "Title": "Find distribution of votes by months by PostId",
        "Description": null,
        "QueryBody": "DECLARE  @postId int = ##PostId##\n\nSELECT\n  dates.Date AS [Date],\n  COUNT(dates.Date) AS [Score]\nFROM (\n  SELECT\n    MONTH(CreationDate) - 1 + 12*(YEAR(CreationDate)-2000) AS Date\n  FROM\n    Votes\n  WHERE\n      VoteTypeId IN (2,3)\n    AND\n      PostId = @postId\n  ) dates\nGROUP BY\n  dates.Date\nORDER BY\n  dates.Date ASC",
        "CreationDate": "2012-11-30 14:08:05",
        "validated": false,
        "QueryBody_Original": "DECLARE  @postId int = ##PostId##\n\nSELECT\n  dates.Date AS [Date],\n  COUNT(dates.Date) AS [Score]\nFROM (\n  SELECT\n    MONTH(CreationDate) - 1 + 12*(YEAR(CreationDate)-2000) AS Date\n  FROM\n    Votes\n  WHERE\n      VoteTypeId IN (2,3)\n    AND\n      PostId = @postId\n  ) dates\nGROUP BY\n  dates.Date\nORDER BY\n  dates.Date ASC"
    },
    {
        "QuerySetId": 87627,
        "Title": "Most upvoteable Answers: Answers with highest Vote\/View ratio.",
        "Description": "Answers with the highest Vote\/View ratio among all answers on a question with X views.",
        "QueryBody": "DECLARE  @minViews numeric = ##MinimumViews##\n\nSELECT TOP 500\n    answer.Id as [Post Link],\n    answer.OwnerUserId as [User Link],\n    answer.Score,\n    question.ViewCount as [Views],\n    Cast(1.0 * answer.Score \/ question.ViewCount AS DECIMAL(20, 3)) as [Views per Vote]\nFROM posts AS answer, posts AS question\nWHERE answer.ParentId = question.Id and\n      answer.Score > 0 and\n      question.ViewCount > @minViews\nORDER BY [Views per Vote] DESC",
        "CreationDate": "2016-04-08 18:22:22",
        "validated": false,
        "QueryBody_Original": "DECLARE  @minViews numeric = ##MinimumViews##\n\nSELECT TOP 500\n    answer.Id as [Post Link],\n    answer.OwnerUserId as [User Link],\n    answer.Score,\n    question.ViewCount as [Views],\n    Cast(1.0 * answer.Score \/ question.ViewCount AS DECIMAL(20, 3)) as [Views per Vote]\nFROM posts AS answer, posts AS question\nWHERE answer.ParentId = question.Id and\n      answer.Score > 0 and\n      question.ViewCount > @minViews\nORDER BY [Views per Vote] DESC"
    },
    {
        "QuerySetId": 87746,
        "Title": "Creating time intervals in MSSQL",
        "Description": "http:\/\/stackoverflow.com\/questions\/13682754\/creating-time-intervals-in-mssql",
        "QueryBody": "DECLARE  @startDate DATETIME = '2012-12-03 00:00:00.000';\nDECLARE @endDate   DATETIME = '2012-12-03 00:20:00.000';\n\nDECLARE @nOfIntervals INT = DATEDIFF(minute, @startDate, @endDate) \/ 10;\n\nSELECT DATEADD(minute, 10, @startDate);\n\nSELECT @nOfIntervals;",
        "CreationDate": "2012-12-03 17:09:52",
        "validated": false,
        "QueryBody_Original": "DECLARE  @startDate DATETIME = '2012-12-03 00:00:00.000';\nDECLARE @endDate   DATETIME = '2012-12-03 00:20:00.000';\n\nDECLARE @nOfIntervals INT = DATEDIFF(minute, @startDate, @endDate) \/ 10;\n\nSELECT DATEADD(minute, 10, @startDate);\n\nSELECT @nOfIntervals;"
    },
    {
        "QuerySetId": 87751,
        "Title": "Tags sorted by your average post reputation",
        "Description": null,
        "QueryBody": "DECLARE  @UserId int = ##UserId##\n\nSELECT\n    TagName,\n    CAST(SUM(Posts.Score) AS FLOAT)\/COUNT(*) AS Reputation\nFROM Tags\n    INNER JOIN PostTags ON PostTags.TagId = Tags.id\n    INNER JOIN Posts ON Posts.ParentId = PostTags.PostId\nGROUP BY TagName\nHAVING COUNT(*) > 5000\nORDER BY Reputation ASC",
        "CreationDate": "2012-12-03 19:04:00",
        "validated": false,
        "QueryBody_Original": "DECLARE  @UserId int = ##UserId##\n\nSELECT\n    TagName,\n    CAST(SUM(Posts.Score) AS FLOAT)\/COUNT(*) AS Reputation\nFROM Tags\n    INNER JOIN PostTags ON PostTags.TagId = Tags.id\n    INNER JOIN Posts ON Posts.ParentId = PostTags.PostId\nGROUP BY TagName\nHAVING COUNT(*) > 5000\nORDER BY Reputation ASC"
    },
    {
        "QuerySetId": 87826,
        "Title": "Distribution of negative question votes by reputation",
        "Description": null,
        "QueryBody": "DECLARE  @Smoothing int = ##Smoothing##\nDECLARE @MaxReputation int = ##MaxReputation##\n\nSELECT\n  u.Reputation\/@Smoothing * @Smoothing,\n  \/* Log(u.Reputation\/@Smoothing+1), *\/\n  Count(1)\nFROM\n    Votes v\n  INNER JOIN\n    Posts p ON p.Id = v.PostId\n  INNER JOIN\n    Users u ON u.Id = p.OwnerUserId\nWHERE \n    v.VoteTypeId IN (3)\n  AND\n    p.PostTypeId IN (1)\n  AND\n    p.Score < 0\n  AND\n    u.Reputation < @MaxReputation\nGROUP BY\n  u.Reputation\/@Smoothing\nORDER BY\n  u.Reputation\/@Smoothing ASC",
        "CreationDate": "2012-12-04 14:43:44",
        "validated": false,
        "QueryBody_Original": "DECLARE  @Smoothing int = ##Smoothing##\nDECLARE @MaxReputation int = ##MaxReputation##\n\nSELECT\n  u.Reputation\/@Smoothing * @Smoothing,\n  \/* Log(u.Reputation\/@Smoothing+1), *\/\n  Count(1)\nFROM\n    Votes v\n  INNER JOIN\n    Posts p ON p.Id = v.PostId\n  INNER JOIN\n    Users u ON u.Id = p.OwnerUserId\nWHERE \n    v.VoteTypeId IN (3)\n  AND\n    p.PostTypeId IN (1)\n  AND\n    p.Score < 0\n  AND\n    u.Reputation < @MaxReputation\nGROUP BY\n  u.Reputation\/@Smoothing\nORDER BY\n  u.Reputation\/@Smoothing ASC"
    },
    {
        "QuerySetId": 88257,
        "Title": "Questions per month, for a tag",
        "Description": "How do Scala web frameworks compare to each other?\r\n\r\nI'm restricting the questions to those tagged Scala, to avoid polluting Playframework's result. It might be unfair, but I can't think of any other way to do it. At least all frameworks are being equally discriminated against.",
        "QueryBody": "WITH  them. These tags\n-- don't show up here, though.\n\n-- Filtering out posts not tagged WITH \"scala\" is ugly done,\n-- and maybe overly restrictive, but playframework results looks\n-- skewed otherwise\n\nselect *, count(*) from\n(\n  select CAST(\n      cast(DATEPART(YYYY, CreationDate) as varchar) + '-' + \n      cast(DATEPART(MM, CreationDate) as varchar) + '-01'\n    as date) Month, \n    t.TagName\n  from (\n    select p.Id, p.CreationDate from Posts p\n    join PostTags pt on pt.PostId = p.Id\n    join Tags t on t.Id = pt.TagId\n    where t.TagName = '##TagName##'\n    ) pp\n  join PostTags pt on pt.PostId = pp.Id\n  join Tags t on t.Id = pt.TagId\n  where t.TagName in ( \n  '##TagName##' )\n) as X\ngroup by TagName, Month\norder by Month asc, count(*) desc",
        "CreationDate": "2012-12-08 14:44:25",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 88271,
        "Title": "List of users of the given tag",
        "Description": null,
        "QueryBody": "DECLARE  @Tag NVARCHAR(25) = '##Tag##'\n\nSELECT\nROW_NUMBER() OVER(ORDER BY COUNT(v.Id) DESC) AS [#],\n    MAX(u.DisplayName) UserName,\n    COUNT(v.Id) AS TotalScore,\n    MAX(u.Reputation) Reputation\n    \nFROM Tags t\n    INNER JOIN PostTags pt ON pt.TagId = t.id\n    INNER JOIN Posts p ON p.ParentId = pt.PostId\n    INNER JOIN Votes v ON v.PostId = p.Id and v.VoteTypeId = 2\n    INNER JOIN Users u ON p.OwnerUserId = u.id\nWHERE \n    t.TagName = @Tag\nGROUP BY t.TagName, u.Id \nORDER BY TotalScore DESC",
        "CreationDate": "2012-12-08 17:14:17",
        "validated": false,
        "QueryBody_Original": "DECLARE  @Tag NVARCHAR(25) = '##Tag##'\n\nSELECT\nROW_NUMBER() OVER(ORDER BY COUNT(v.Id) DESC) AS [#],\n    MAX(u.DisplayName) UserName,\n    COUNT(v.Id) AS TotalScore,\n    MAX(u.Reputation) Reputation\n    \nFROM Tags t\n    INNER JOIN PostTags pt ON pt.TagId = t.id\n    INNER JOIN Posts p ON p.ParentId = pt.PostId\n    INNER JOIN Votes v ON v.PostId = p.Id and v.VoteTypeId = 2\n    INNER JOIN Users u ON p.OwnerUserId = u.id\nWHERE \n    t.TagName = @Tag\nGROUP BY t.TagName, u.Id \nORDER BY TotalScore DESC"
    },
    {
        "QuerySetId": 88613,
        "Title": "Top 10 question askers in 'windows-8' tag in the last 30 days",
        "Description": null,
        "QueryBody": "DECLARE  @Today DATETIME = GETDATE();\n\nSELECT TOP 10 p.OwnerUserId as [User Link], COUNT(*) as NumQuestionsAsked\nFROM Posts p\nINNER JOIN PostTags pt on pt.PostId = p.Id\nINNER JOIN Tags t on t.Id = pt.TagId\nWHERE PostTypeId = 1 AND t.TagName = 'windows-8'\n  AND p.CreationDate >= (@Today - 30)\nGROUP BY p.OwnerUserId\nORDER BY COUNT(*) DESC",
        "CreationDate": "2012-12-11 04:20:25",
        "validated": false,
        "QueryBody_Original": "DECLARE  @Today DATETIME = GETDATE();\n\nSELECT TOP 10 p.OwnerUserId as [User Link], COUNT(*) as NumQuestionsAsked\nFROM Posts p\nINNER JOIN PostTags pt on pt.PostId = p.Id\nINNER JOIN Tags t on t.Id = pt.TagId\nWHERE PostTypeId = 1 AND t.TagName = 'windows-8'\n  AND p.CreationDate >= (@Today - 30)\nGROUP BY p.OwnerUserId\nORDER BY COUNT(*) DESC"
    },
    {
        "QuerySetId": 88620,
        "Title": "Top 10 most upvoted comments last month on closed questions from new users",
        "Description": null,
        "QueryBody": "DECLARE  @Today DATETIME = GETDATE();\n\nSELECT TOP 10 author.DisplayName as CommentAuthor,\n              receiver.DisplayName as InReplyTo,\n              c.Score AS CommentScore, \n              c.Text,\n              p.Id as [Post Link]\nFROM Comments c\nINNER JOIN Posts p on p.Id = c.PostId\nINNER JOIN Users author on author.Id = c.UserId\nINNER JOIN Users receiver on receiver.Id = p.OwnerUserId\nWHERE c.CreationDate >= (@Today - 30)\n      AND p.PostTypeId = 1\n      AND p.ClosedDate IS NOT NULL\n      AND receiver.CreationDate >= (@Today - 7)\nORDER BY c.Score DESC",
        "CreationDate": "2012-12-11 04:19:29",
        "validated": false,
        "QueryBody_Original": "DECLARE  @Today DATETIME = GETDATE();\n\nSELECT TOP 10 author.DisplayName as CommentAuthor,\n              receiver.DisplayName as InReplyTo,\n              c.Score AS CommentScore, \n              c.Text,\n              p.Id as [Post Link]\nFROM Comments c\nINNER JOIN Posts p on p.Id = c.PostId\nINNER JOIN Users author on author.Id = c.UserId\nINNER JOIN Users receiver on receiver.Id = p.OwnerUserId\nWHERE c.CreationDate >= (@Today - 30)\n      AND p.PostTypeId = 1\n      AND p.ClosedDate IS NOT NULL\n      AND receiver.CreationDate >= (@Today - 7)\nORDER BY c.Score DESC"
    },
    {
        "QuerySetId": 88672,
        "Title": "Questions with a specific tag",
        "Description": null,
        "QueryBody": "SELECT  p.Id as [Post Link], p.Title\n  from Posts p\n  left join PostTags pt on p.Id = pt.PostId\n  left join Tags t on pt.TagId = t.Id\n  left join PostTags pt2 on p.Id = pt2.PostId\n  left join Tags t2 on pt2.TagId = t2.Id\n where postTypeId = 1\n   and t.tagName = 'raw'\n   and t2.tagName = ##tag:string##\n order by ViewCount desc;",
        "CreationDate": "2012-12-11 19:00:00",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 88902,
        "Title": "Get all the answers of a question",
        "Description": null,
        "QueryBody": "SELECT  Body FROM Posts WHERE ParentId = ##QuestionID## ORDER BY Score DESC",
        "CreationDate": "2012-12-14 02:25:22",
        "validated": false,
        "QueryBody_Original": "SELECT  Body FROM Posts WHERE ParentId = ##QuestionID## ORDER BY Score DESC"
    },
    {
        "QuerySetId": 89068,
        "Title": "Questions for Tridion (Scores and Numbers)",
        "Description": null,
        "QueryBody": "DECLARE  @tag_id int = (select id from tags where tagname = 'tridion');\n\nselect \n  users.id \"User Link\"\n  ,count(questions.id) as \"Nr\"\n  ,sum(questions.score) as \"Score\"\n  \nfrom users\njoin posts questions on (users.id = questions.owneruserid)\njoin posttags on (questions.id = posttags.postid)\nwhere posttags.tagid = @tag_id\nand questions.posttypeid = 1  -- questions only\nand questions.creationDate >  DATEADD(Month, -12, DATEADD(dd, DATEDIFF(dd, 0, getdate()), 0) )\ngroup by users.id\norder by Nr desc",
        "CreationDate": "2012-12-15 02:27:59",
        "validated": false,
        "QueryBody_Original": "DECLARE  @tag_id int = (select id from tags where tagname = 'tridion');\n\nselect \n  users.id \"User Link\"\n  ,count(questions.id) as \"Nr\"\n  ,sum(questions.score) as \"Score\"\n  \nfrom users\njoin posts questions on (users.id = questions.owneruserid)\njoin posttags on (questions.id = posttags.postid)\nwhere posttags.tagid = @tag_id\nand questions.posttypeid = 1  -- questions only\nand questions.creationDate >  DATEADD(Month, -12, DATEADD(dd, DATEDIFF(dd, 0, getdate()), 0) )\ngroup by users.id\norder by Nr desc"
    },
    {
        "QuerySetId": 89220,
        "Title": "Top User Of a Peticular Tag",
        "Description": null,
        "QueryBody": "WITH  USER_BY_TAG\nAS\n(\n  SELECT \n    ROW_NUMBER() OVER(ORDER BY COUNT(*) DESC) Rank,\n    u.DisplayName,\n    TagName,\n    COUNT(*) AS UpVotes\n  FROM Tags t\n      INNER JOIN PostTags pt ON pt.TagId = t.id\n      INNER JOIN Posts     p ON p.ParentId = pt.PostId\n      INNER JOIN Votes     v ON v.PostId = p.Id and VoteTypeId = 2\n      INNER JOIN Users     u ON u.Id = p.OwnerUserId\n  WHERE \n      TagName = ##tagName:string##\n  GROUP BY u.DisplayName, TagName\n)\n\nSELECT * FROM USER_BY_TAG ORDER BY upvotes DESC;",
        "CreationDate": "2012-12-17 21:28:31",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 89221,
        "Title": "Top User Of a Peticular Tag in India",
        "Description": null,
        "QueryBody": "WITH  USER_BY_TAG\nAS\n(\n  SELECT \n    ROW_NUMBER() OVER(ORDER BY COUNT(*) DESC) Rank,\n    u.Id AS [User Link], \n    TagName,\n    COUNT(*) AS UpVotes\n  FROM Tags t\n      INNER JOIN PostTags pt ON pt.TagId = t.id\n      INNER JOIN Posts     p ON p.ParentId = pt.PostId\n      INNER JOIN Votes     v ON v.PostId = p.Id and VoteTypeId = 2\n      INNER JOIN Users     u ON u.Id = p.OwnerUserId\n  WHERE \n     \n       TagName = ##tagName:string##\n  GROUP BY u.id, TagName\n)\n\nSELECT * FROM USER_BY_TAG WHERE rank <= 1000 ORDER BY upvotes DESC ;",
        "CreationDate": "2016-07-05 14:55:16",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 89272,
        "Title": "Links to my comments by score",
        "Description": null,
        "QueryBody": "DECLARE  @UserId int = ##UserId##\n\nSELECT \n    Count(*) AS CommentCount,\n    Score\nFROM \n    Comments\nWHERE \n    UserId = @UserId\nGROUP BY \n    Score\nORDER BY \n    Score DESC",
        "CreationDate": "2012-12-18 18:33:21",
        "validated": false,
        "QueryBody_Original": "DECLARE  @UserId int = ##UserId##\n\nSELECT \n    Count(*) AS CommentCount,\n    Score\nFROM \n    Comments\nWHERE \n    UserId = @UserId\nGROUP BY \n    Score\nORDER BY \n    Score DESC"
    },
    {
        "QuerySetId": 89393,
        "Title": "Questions per month per user",
        "Description": null,
        "QueryBody": "SELECT  cast(DATEPART(YYYY, CreationDate) as varchar) + '-' + \ncast(DATEPART(MM, CreationDate) as varchar) as 'Month', count(*) as 'Count'\nfrom   posts\nwhere  posttypeid=1\n and   OwnerUserId = ##userid##\ngroup  by cast(DATEPART(YYYY, CreationDate) as varchar) + '-' + \n      cast(DATEPART(MM, CreationDate) as varchar)\norder by cast(DATEPART(YYYY, CreationDate) as varchar) + '-' + \n      cast(DATEPART(MM, CreationDate) as varchar)",
        "CreationDate": "2012-12-19 23:09:55",
        "validated": false,
        "QueryBody_Original": "SELECT  cast(DATEPART(YYYY, CreationDate) as varchar) + '-' + \ncast(DATEPART(MM, CreationDate) as varchar) as 'Month', count(*) as 'Count'\nfrom   posts\nwhere  posttypeid=1\n and   OwnerUserId = ##userid##\ngroup  by cast(DATEPART(YYYY, CreationDate) as varchar) + '-' + \n      cast(DATEPART(MM, CreationDate) as varchar)\norder by cast(DATEPART(YYYY, CreationDate) as varchar) + '-' + \n      cast(DATEPART(MM, CreationDate) as varchar)"
    },
    {
        "QuerySetId": 89741,
        "Title": "How many posts have I edited (for badges)?",
        "Description": "This script counts the number of others' posts on which you have edited either the title or body.",
        "QueryBody": "DECLARE  @UserId int = 1749403\nselect count(distinct p.Id) as 'Posts Edited'\nfrom PostHistory h, Posts p where\nh.UserId=@UserId and p.Id=h.PostId and p.OwnerUserId!=@UserId and\nh.PostHistoryTypeId in (4,5,24)",
        "CreationDate": "2016-11-10 07:10:21",
        "validated": false,
        "QueryBody_Original": "DECLARE  @UserId int = 1749403\nselect count(distinct p.Id) as 'Posts Edited'\nfrom PostHistory h, Posts p where\nh.UserId=@UserId and p.Id=h.PostId and p.OwnerUserId!=@UserId and\nh.PostHistoryTypeId in (4,5,24)"
    },
    {
        "QuerySetId": 90036,
        "Title": "Number of users with rep >= 2",
        "Description": null,
        "QueryBody": "DECLARE  @numUsers float\n\nSELECT @numUsers = COUNT(*) FROM Users\n-------------------------------------\n\nSELECT tmp.editors as [can edit], \n  @numUsers as [total users] ,tmp.editors\/@numUsers as [% of total users]\nFROM (\n  SELECT \n      COUNT(*) as editors    \n  FROM\n      Users\n      WHERE Reputation >= 2000\n) as tmp;",
        "CreationDate": "2013-02-24 20:21:12",
        "validated": false,
        "QueryBody_Original": "DECLARE  @numUsers float\n\nSELECT @numUsers = COUNT(*) FROM Users\n-------------------------------------\n\nSELECT tmp.editors as [can edit], \n  @numUsers as [total users] ,tmp.editors\/@numUsers as [% of total users]\nFROM (\n  SELECT \n      COUNT(*) as editors    \n  FROM\n      Users\n      WHERE Reputation >= 2000\n) as tmp;"
    },
    {
        "QuerySetId": 90301,
        "Title": "Average length of answer bodies.",
        "Description": null,
        "QueryBody": "SELECT  sum(LEN(Body)) AS [Total Chars]\nFROM Posts\nWHERE PostTypeId = 2 and\nOwnerUserId = ##userId##",
        "CreationDate": "2014-11-04 19:51:07",
        "validated": false,
        "QueryBody_Original": "SELECT  sum(LEN(Body)) AS [Total Chars]\nFROM Posts\nWHERE PostTypeId = 2 and\nOwnerUserId = ##userId##"
    },
    {
        "QuerySetId": 90338,
        "Title": "How many upvotes, downvotes, net votes and total votes do I have for each tag?",
        "Description": null,
        "QueryBody": "DECLARE  @UserId int = ##UserId##\n\nSELECT --TOP 20 \n    TagName,\n    COUNT( Case when VoteTypeId = 2 then 1 end) AS UpVotes,\n    COUNT( Case when VoteTypeId = 3 then 1 end) AS DownVotes,\n    SUM( Case when VoteTypeId =2 then 1 when VoteTypeId = 3 then -1 end) AS NetVotes,\n    COUNT(*) AS TotalVotes \nFROM Tags\n    INNER JOIN PostTags ON PostTags.TagId = Tags.id\n    INNER JOIN Posts ON Posts.ParentId = PostTags.PostId\n    INNER JOIN Votes ON Votes.PostId = Posts.Id and (VoteTypeId = 2 or VoteTypeId=3)\nWHERE \n    Posts.OwnerUserId = @UserId\nGROUP BY TagName \nORDER BY UpVotes DESC",
        "CreationDate": "2020-06-21 16:45:31",
        "validated": false,
        "QueryBody_Original": "DECLARE  @UserId int = ##UserId##\n\nSELECT --TOP 20 \n    TagName,\n    COUNT( Case when VoteTypeId = 2 then 1 end) AS UpVotes,\n    COUNT( Case when VoteTypeId = 3 then 1 end) AS DownVotes,\n    SUM( Case when VoteTypeId =2 then 1 when VoteTypeId = 3 then -1 end) AS NetVotes,\n    COUNT(*) AS TotalVotes \nFROM Tags\n    INNER JOIN PostTags ON PostTags.TagId = Tags.id\n    INNER JOIN Posts ON Posts.ParentId = PostTags.PostId\n    INNER JOIN Votes ON Votes.PostId = Posts.Id and (VoteTypeId = 2 or VoteTypeId=3)\nWHERE \n    Posts.OwnerUserId = @UserId\nGROUP BY TagName \nORDER BY UpVotes DESC"
    },
    {
        "QuerySetId": 90608,
        "Title": "search comments, filter by by userid",
        "Description": null,
        "QueryBody": "SELECT  PostId as [Post Link], * from comments\nwhere UserId = ##UserId##\nand text like  '%##Text##%'\norder by CreationDate",
        "CreationDate": "2013-01-05 15:57:14",
        "validated": false,
        "QueryBody_Original": "SELECT  PostId as [Post Link], * from comments\nwhere UserId = ##UserId##\nand text like  '%##Text##%'\norder by CreationDate"
    },
    {
        "QuerySetId": 91021,
        "Title": "Get users with multiple accounts",
        "Description": "Ordered by Account-Number and Reputation\r\n",
        "QueryBody": "WITH  multiple accounts\n--- ordered my Account-Number and reputation\nselect id as [User Link]\n,Accounts\n,Reputation\n,LastAccessDate\nfrom(\nSELECT\n    Row_Number()Over(PARTITION BY EmailHash order by u1.reputation desc)as Rank\n    ,u1.ID\n    ,u1.Reputation\n    ,u1.EmailHash\n    ,u1.LastAccessDate\n    ,(Select count(*) from users u2 where u2.emailhash=u1.emailhash)AS Accounts\nFROM\n    Users u1\nWHERE\n    u1.EmailHash IS NOT NULL\n)email\nwhere Accounts>0 AND Rank=1\nORDER BY\n   Accounts DESC, Reputation DESC, LastAccessDate DESC",
        "CreationDate": "2013-01-07 07:58:23",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 91093,
        "Title": "Highest scored comments per site",
        "Description": null,
        "QueryBody": "WITH  most upvotes\n-- Ignores all comments not used for the Pundit badge (lower than 5).\nSELECT  TOP 50 \n    PostId as [Post Link], Score, Text\nFROM \n    Comments\nWHERE \n    Score >= 5\nORDER BY \n    Score DESC",
        "CreationDate": "2013-01-07 19:25:26",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 91329,
        "Title": "Questions someone may have said were abandoned",
        "Description": null,
        "QueryBody": "WITH  comments containing \"abandoned\". \nselect PostId as [Post Link], * from comments\nwhere text like  '%abandoned%'",
        "CreationDate": "2013-01-09 08:19:49",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 91780,
        "Title": "java commenters near in entered location",
        "Description": null,
        "QueryBody": "SELECT  *\nFROM Users u\nWHERE upper(u.location) LIKE UPPER('%' + ##YourLocation:string## + '%') AND\n      (u.id IN (SELECT userid\n                FROM Comments c\n                WHERE c.PostId IN (SELECT id\n                                   FROM Posts p\n                                   WHERE UPPER(p.tags) like UPPER('%<' + ##Tag:string## + '>%')\n                                   )\n                ) OR\n       u.id IN (SELECT OwnerUserId\n                FROM Posts p \n                WHERE p.tags like '<java>' OR\n                      p.parentid IN (SELECT id\n                                     FROM Posts p\n                                     WHERE UPPER(p.tags) like UPPER('%<' + ##Tag:string## + '>%')\n                                     )\n                )\n       )",
        "CreationDate": "2013-01-12 00:53:52",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 92183,
        "Title": "Which tags do popular questions tend to have?",
        "Description": "Lists tags sorted by the percentage of unclosed questions asked in the past year that have at least 1000 views.",
        "QueryBody": "DECLARE  @latest_date datetime = (select max(CreationDate) from Posts) - 365\n\nselect T.TagName, (\n\n    select cast(count(*) as numeric)\n    from PostTags QT\n    join Posts Q on QT.PostId = Q.Id\n    \n    where\n      Q.PostTypeId = 1 and\n      QT.TagId = T.Id and\n      Q.ViewCount >= 1000 and\n      Q.ClosedDate is not null and\n      Q.CreationDate >= @latest_date\n) \/ (\n    select cast(case when count(*) = 0 then 1 else count(*) end as numeric)\n    from PostTags QT\n    join Posts Q on QT.PostId = Q.Id\n    \n    where\n      Q.PostTypeId = 1 and\n      QT.TagId = T.Id and\n      Q.ClosedDate is not null and\n      Q.CreationDate >= @latest_date\n      \n) * 100 Percentage\n\nfrom Tags T\nwhere T.Count >= 5\norder by Percentage desc",
        "CreationDate": "2013-01-15 00:53:23",
        "validated": false,
        "QueryBody_Original": "DECLARE  @latest_date datetime = (select max(CreationDate) from Posts) - 365\n\nselect T.TagName, (\n\n    select cast(count(*) as numeric)\n    from PostTags QT\n    join Posts Q on QT.PostId = Q.Id\n    \n    where\n      Q.PostTypeId = 1 and\n      QT.TagId = T.Id and\n      Q.ViewCount >= 1000 and\n      Q.ClosedDate is not null and\n      Q.CreationDate >= @latest_date\n) \/ (\n    select cast(case when count(*) = 0 then 1 else count(*) end as numeric)\n    from PostTags QT\n    join Posts Q on QT.PostId = Q.Id\n    \n    where\n      Q.PostTypeId = 1 and\n      QT.TagId = T.Id and\n      Q.ClosedDate is not null and\n      Q.CreationDate >= @latest_date\n      \n) * 100 Percentage\n\nfrom Tags T\nwhere T.Count >= 5\norder by Percentage desc"
    },
    {
        "QuerySetId": 92332,
        "Title": "Who else likes your favorite questions?",
        "Description": "Lists users sorted by number of favorite questions in common with you.",
        "QueryBody": "DECLARE  @UserId int = ##UserId:int##;\n\nselect\n  HisVote.UserId [User Link],\n  count(*) [Common Favorites]\n\nfrom\n  Votes HisVote\n  join Votes MyVote on HisVote.PostId = MyVote.PostId\n  \nwhere\n  HisVote.UserId <> @UserId and MyVote.UserId = @UserId and\n  HisVote.VoteTypeId = 5 and MyVote.VoteTypeId = 5\n  \ngroup by HisVote.UserId\norder by count(*) desc;",
        "CreationDate": "2013-01-15 19:09:48",
        "validated": false,
        "QueryBody_Original": "DECLARE  @UserId int = ##UserId:int##;\n\nselect\n  HisVote.UserId [User Link],\n  count(*) [Common Favorites]\n\nfrom\n  Votes HisVote\n  join Votes MyVote on HisVote.PostId = MyVote.PostId\n  \nwhere\n  HisVote.UserId <> @UserId and MyVote.UserId = @UserId and\n  HisVote.VoteTypeId = 5 and MyVote.VoteTypeId = 5\n  \ngroup by HisVote.UserId\norder by count(*) desc;"
    },
    {
        "QuerySetId": 92338,
        "Title": "Which favorite questions do I have in common with another user?",
        "Description": "Lists all questions that are both your favorites and the other user's favorites, sorted by score.",
        "QueryBody": "DECLARE  @UserId int = ##UserId:int##;\nDECLARE @HisUserId int = ##HisUserId:int##;\n\nselect\n  HisVote.PostId [Post Link],\n  Question.Score Score\n\nfrom\n  Votes HisVote\n  join Votes MyVote on HisVote.PostId = MyVote.PostId\n  join Posts Question on Question.Id = HisVote.PostId\n  \nwhere\n  HisVote.UserId = @HisUserId and MyVote.UserId = @UserId and\n  HisVote.VoteTypeId = 5 and MyVote.VoteTypeId = 5\n  \norder by Question.Score desc;",
        "CreationDate": "2013-01-15 19:17:27",
        "validated": false,
        "QueryBody_Original": "DECLARE  @UserId int = ##UserId:int##;\nDECLARE @HisUserId int = ##HisUserId:int##;\n\nselect\n  HisVote.PostId [Post Link],\n  Question.Score Score\n\nfrom\n  Votes HisVote\n  join Votes MyVote on HisVote.PostId = MyVote.PostId\n  join Posts Question on Question.Id = HisVote.PostId\n  \nwhere\n  HisVote.UserId = @HisUserId and MyVote.UserId = @UserId and\n  HisVote.VoteTypeId = 5 and MyVote.VoteTypeId = 5\n  \norder by Question.Score desc;"
    },
    {
        "QuerySetId": 92399,
        "Title": "Searching All the Things ",
        "Description": null,
        "QueryBody": "SELECT  *  \nFROM Information_Schema.columns \nWHERE Table_Name LIKE '%%'\n*\/ \n\nSELECT * \nFROM Users\nWHERE DisplayName LIKE '%Mitchell%Hamann%'",
        "CreationDate": "2013-01-16 02:37:50",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 92676,
        "Title": "Aggregated Activity by Daily Interval",
        "Description": null,
        "QueryBody": "DECLARE  @UserId INT = ##UserId##\nDECLARE @Interval INT = ##Interval##\n\n; WITH\nRangeMinute AS\n(\n    SELECT 0 AS StartMinute, @Interval AS EndMinute\n    UNION ALL\n    SELECT CAST((1440 - @Interval) \/ @Interval AS INT) * @Interval AS StartMinute, 1440 AS EndMinute\n    UNION ALL\n    SELECT EndMinute AS StartMinute, EndMinute + @Interval AS EndMinute\n    FROM RangeMinute\n    WHERE EndMinute + @Interval < 1440\n),\nActivity AS\n(\n    SELECT (DATEPART(HOUR, CreationDate) * 60) + DATEPART(MINUTE, CreationDate) AS Minute\n    FROM Posts\n    WHERE OwnerUserId = @UserId\n)\nSELECT GETDATE(), StartMinute, COUNT(Minute)\nFROM RangeMinute\nLEFT OUTER JOIN Activity ON StartMinute <= Minute AND Minute < EndMinute\nGROUP BY StartMinute\nORDER BY StartMinute OPTION (MAXRECURSION 1440)",
        "CreationDate": "2013-01-18 09:00:37",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 93197,
        "Title": "Days with score >= 200",
        "Description": null,
        "QueryBody": "DECLARE  @userid int = ##UserId##;\n\nwith scores as (select convert(varchar(10), votes.creationdate, 120) as \"date\",\n                       sum(case votetypeid when 1 then 15\n                                           when 2 then 10\n                                           when 3 then -2 end) as score\n                from votes\n                inner join posts on posts.id = votes.postid\n                where posts.owneruserid = @userid\n                      and posts.communityowneddate is null\n                group by votes.creationdate)\nselect *\nfrom  scores\nwhere score >= 200\norder by \"date\" desc",
        "CreationDate": "2013-03-31 17:14:45",
        "validated": false,
        "QueryBody_Original": "DECLARE  @userid int = ##UserId##;\n\nwith scores as (select convert(varchar(10), votes.creationdate, 120) as \"date\",\n                       sum(case votetypeid when 1 then 15\n                                           when 2 then 10\n                                           when 3 then -2 end) as score\n                from votes\n                inner join posts on posts.id = votes.postid\n                where posts.owneruserid = @userid\n                      and posts.communityowneddate is null\n                group by votes.creationdate)\nselect *\nfrom  scores\nwhere score >= 200\norder by \"date\" desc"
    },
    {
        "QuerySetId": 93435,
        "Title": "Posts Within 1 Day Of User Creation",
        "Description": null,
        "QueryBody": "SELECT  COUNT(*) FROM Posts\n--WHERE CreationDate > DATEADD(day, -28, GETUTCDATE())\n\nSELECT TOP 10 Users.Id, COUNT(*) FROM Users\nJOIN Posts ON Users.Id = Posts.OwnerUserId\nWHERE ABS(DATEDIFF(day, Posts.CreationDate, Users.CreationDate)) < 1\nGROUP BY Users.Id",
        "CreationDate": "2013-01-24 02:20:49",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 93818,
        "Title": "Posts, Views, and View\/Post ratio per day",
        "Description": null,
        "QueryBody": "DECLARE  @TagName nvarchar (25) = '##TagName##'\n\nSELECT TOP 112 \n   CAST(p.CreationDate AS date) AS pdate,\n   COUNT(*) AS nposts_per_day,\n   SUM(p.ViewCount) AS nviews_per_day,\n   SUM(p.ViewCount)\/COUNT(*) AS view_post_ratio\n   FROM Tags \n   JOIN PostTags AS pt ON Tags.Id = pt.TagId \n   JOIN Posts AS p ON pt.PostId = p.Id\n   WHERE Tags.TagName = @TagName\n   GROUP BY CAST(p.CreationDate AS date)\n   ORDER BY pdate DESC",
        "CreationDate": "2013-01-27 23:03:43",
        "validated": false,
        "QueryBody_Original": "DECLARE  @TagName nvarchar (25) = '##TagName##'\n\nSELECT TOP 112 \n   CAST(p.CreationDate AS date) AS pdate,\n   COUNT(*) AS nposts_per_day,\n   SUM(p.ViewCount) AS nviews_per_day,\n   SUM(p.ViewCount)\/COUNT(*) AS view_post_ratio\n   FROM Tags \n   JOIN PostTags AS pt ON Tags.Id = pt.TagId \n   JOIN Posts AS p ON pt.PostId = p.Id\n   WHERE Tags.TagName = @TagName\n   GROUP BY CAST(p.CreationDate AS date)\n   ORDER BY pdate DESC"
    },
    {
        "QuerySetId": 93904,
        "Title": "Users with the best Up\/Down Vote ratio",
        "Description": null,
        "QueryBody": "DECLARE  @MinRep int = ##MinRep##\nDECLARE @MinDownVotes int = ##MinDownVotes##\nDECLARE @UserId int = ##UserId##\n\nSELECT\n    Id as [User Link],\n    UpVotes,\n    DownVotes,\n    Reputation,\n    ROUND(1000*CAST(DownVotes AS float) \/ CAST(Reputation AS float), 3) AS DownToRepPermil,\n    ROUND(100*CAST(DownVotes AS float) \/ CAST(UpVotes+DownVotes AS float), 3) AS DownVotesPercent\nFROM Users\nWHERE Id=@UserId\nOR (Reputation >= @MinRep\nAND DownVotes >= @MinDownVotes)\nORDER BY DownToRepPermil ASC",
        "CreationDate": "2015-01-09 21:58:54",
        "validated": false,
        "QueryBody_Original": "DECLARE  @MinRep int = ##MinRep##\nDECLARE @MinDownVotes int = ##MinDownVotes##\nDECLARE @UserId int = ##UserId##\n\nSELECT\n    Id as [User Link],\n    UpVotes,\n    DownVotes,\n    Reputation,\n    ROUND(1000*CAST(DownVotes AS float) \/ CAST(Reputation AS float), 3) AS DownToRepPermil,\n    ROUND(100*CAST(DownVotes AS float) \/ CAST(UpVotes+DownVotes AS float), 3) AS DownVotesPercent\nFROM Users\nWHERE Id=@UserId\nOR (Reputation >= @MinRep\nAND DownVotes >= @MinDownVotes)\nORDER BY DownToRepPermil ASC"
    },
    {
        "QuerySetId": 94050,
        "Title": "Dynamic SQL Procedure that can insert into a table using a while loop to control the number of row e",
        "Description": "http:\/\/stackoverflow.com\/questions\/14598850\/dynamic-sql-procedure-that-can-insert-into-a-table-using-a-while-loop-to-control",
        "QueryBody": "DECLARE  @Prison_Doors TABLE \n(\n DoorNum INT IDENTITY(1,1) PRIMARY KEY,\n DoorOpen BIT,\n DoorClosed BIT,\n Trips INT\n );\n \n WITH temp \n AS\n (\n   SELECT n\n   FROM (VALUES(1), (2), (3), (4)) temp(n)\n ) \n SELECT ROW_NUMBER() OVER(ORDER BY (SELECT 1)) AS n\n FROM temp t1, temp t2, temp t3;",
        "CreationDate": "2013-01-30 12:46:07",
        "validated": false,
        "QueryBody_Original": "DECLARE  @Prison_Doors TABLE \n(\n DoorNum INT IDENTITY(1,1) PRIMARY KEY,\n DoorOpen BIT,\n DoorClosed BIT,\n Trips INT\n );\n \n WITH temp \n AS\n (\n   SELECT n\n   FROM (VALUES(1), (2), (3), (4)) temp(n)\n ) \n SELECT ROW_NUMBER() OVER(ORDER BY (SELECT 1)) AS n\n FROM temp t1, temp t2, temp t3;"
    },
    {
        "QuerySetId": 94161,
        "Title": "Select users by location and \"About Me\" ordered by reputation",
        "Description": null,
        "QueryBody": "SELECT  TOP ##topn:int?300##\n      u.Id AS [User Link],\n      u.Location AS [Location],\n      u.LastAccessDate AS [Last Access],\n      u.WebsiteUrl AS [URL],\n      u.Reputation AS [Rep],\n      u.AboutMe AS AboutMe\nFROM \n    Users u\n    --INNER JOIN Tags t  ON t.Id =  u.Id\n    --INNER JOIN Posts p ON p.Id =  u.Id    \nWHERE \n     AboutMe like '##aboutme##' \nORDER BY \n  Reputation DESC",
        "CreationDate": "2015-12-12 13:41:36",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 95537,
        "Title": "Number of users by country for a specific tag",
        "Description": null,
        "QueryBody": "SELECT  u.DisplayName, u.Reputation, count(*) as Answers \n,u.Location\nfrom Users u, Posts p, Posts pp where u.Id in (\n    SELECT Id\n    from Users \n  )\n  and p.OwnerUserId = u.Id\n  and pp.Id = p.ParentId\n  and pp.Tags like ('%<'+##tag:string##+'>%')\n  group by u.DisplayName, u.Reputation, u.Location\n  order by u.Location desc",
        "CreationDate": "2013-03-20 19:10:42",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 95543,
        "Title": "Android tag users by country",
        "Description": null,
        "QueryBody": "SELECT  u.Location, count(distinct u.DisplayName)\nFROM Posts p\nJOIN Users u on u.Id = p.OwnerUserID\nWHERE p.Tags like ('%<'+##tag:string##+'>%')\nAND UPPER(u.Location) LIKE '% sri'\nGROUP BY u.Location\nORDER BY 1",
        "CreationDate": "2013-03-27 14:36:58",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 95855,
        "Title": "OP visits after late answer",
        "Description": null,
        "QueryBody": "SELECT  \nDateDiff(day,q.CreationDate,  a.CreationDate) 'Answer Delta',\nSUM(CASE WHEN q_u.LastAccessDate >= a.CreationDate THEN 1 ELSE 0 END) as 'Last Access After Answer',\nSUM(CASE WHEN q_u.LastAccessDate < a.CreationDate THEN 1 ELSE 0 END) as 'Last Access Before Answer'\n   \nFROM\n  posts q\n  INNER JOIN posts a\n  ON q.Id = a.ParentId\n  INNER JOIN Users q_u\n  ON q.OwnerUserID = q_u.Id\n  \nWHERE\n  q.PostTypeID = 1 --Question\n  and\n  a.PostTypeID = 2 --Answer\n  and DateDiff(day,q.CreationDate,  a.CreationDate) >=0 \n  --Excludes the wombats http:\/\/meta.stackoverflow.com\/q\/98816\/148672 and merges\nGROUP BY DateDiff(day,q.CreationDate,  a.CreationDate) \nORDER BY DateDiff(day,q.CreationDate,  a.CreationDate)",
        "CreationDate": "2013-02-06 23:29:45",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 97219,
        "Title": "Off Topic Post With tagname input",
        "Description": null,
        "QueryBody": "SELECT  Distinct t.tagname, \n       ph.postid [Post Link]\n       \nFROM   posttags pt \n       INNER JOIN tags t \n               ON pt.tagid = t.id \n       INNER JOIN posthistory ph\n              ON ph.postid = pt.postid \n                 AND ph.posthistorytypeid = 10 \n                 AND Cast(ph.comment AS INT) = 2 \nWHERE\n     t.tagname = ##Tagname:string##",
        "CreationDate": "2013-02-12 03:11:42",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 98321,
        "Title": "Have your own first posts been questions or an answers?",
        "Description": null,
        "QueryBody": "SELECT  TOP 10 Id as [Post Link],\n              [Post type] = case PostTypeID when 1 then 'Question'\n                                            when 2 then 'Answer'\n                                            else '???'\n                                            end\nFROM Posts\nWHERE (PostTypeId = 1 or PostTypeId = 2) AND OwnerUserId = ##UserID##\nORDER BY Id asc",
        "CreationDate": "2013-02-18 20:13:56",
        "validated": false,
        "QueryBody_Original": "SELECT  TOP 10 Id as [Post Link],\n              [Post type] = case PostTypeID when 1 then 'Question'\n                                            when 2 then 'Answer'\n                                            else '???'\n                                            end\nFROM Posts\nWHERE (PostTypeId = 1 or PostTypeId = 2) AND OwnerUserId = ##UserID##\nORDER BY Id asc"
    },
    {
        "QuerySetId": 98377,
        "Title": "Stack Overflow questions with outstanding close votes (PHP Tag)",
        "Description": "A list of Stack Overflow questions with outstanding close votes, sorted by number of votes.\r\n",
        "QueryBody": "WITH  outstanding close votes\n-- A list of Stack Overflow questions WITH outstanding close votes, sorted by number of votes.\n\n\nselect * FROM\n(select\n  Posts.Id as [Post Link],\n  avg(Posts.Score) as [Score],\n  count(*) as [Close Votes],\n  max(Votes.CreationDate) as [Last Vote],\n  min(Votes.CreationDate) as [First Vote]  \nfrom Posts\ninner join Votes on Posts.Id=Votes.PostId\nwhere \n  Votes.VoteTypeId=6 and Posts.ClosedDate is NULL and Posts.Tags LIKE '%<php>%'  \ngroup by Posts.Id\n) AS Myview \nwhere\n  [Close Votes] > 3\norder by [Last Vote] desc, [Score] asc, [Close Votes] desc",
        "CreationDate": "2013-04-29 14:46:22",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 99142,
        "Title": "Questions that both user X and the plagiarist answered",
        "Description": null,
        "QueryBody": "SELECT  a.parentid as [Post Link]\nfrom posts a\njoin posts b on b.parentid = a.parentid\nwhere a.posttypeid = 2   -- user A's answer\n and b.posttypeid = 2   -- plagiarist's answer\n and a.owneruserid = ##userid:int##\n and b.owneruserid = 9003",
        "CreationDate": "2013-02-22 09:30:52",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 99148,
        "Title": "Questions answered by both the plagiarist and a specified user",
        "Description": null,
        "QueryBody": "SELECT  a.parentid as [Post Link]\nfrom posts a\njoin posts b on b.parentid = a.parentid\nwhere a.posttypeid = 2   -- user A's answer\n and b.posttypeid = 2   -- plagiarist's answer\n and a.owneruserid = ##userid:int##\n and b.owneruserid = 9003",
        "CreationDate": "2013-02-23 00:31:41",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 99628,
        "Title": "Number of users who can edit questions and answers",
        "Description": null,
        "QueryBody": "DECLARE  @numUsers float\n\nSELECT @numUsers = COUNT(*) FROM Users\n-------------------------------------\n\nSELECT tmp.editors as [can edit], \n  @numUsers as [total users] ,tmp.editors\/@numUsers as [% of total users]\nFROM (\n  SELECT \n      COUNT(*) as editors    \n  FROM\n      Users\n      WHERE LastAccessDate >= getdate() - 14\n) as tmp;",
        "CreationDate": "2014-06-08 21:38:47",
        "validated": false,
        "QueryBody_Original": "DECLARE  @numUsers float\n\nSELECT @numUsers = COUNT(*) FROM Users\n-------------------------------------\n\nSELECT tmp.editors as [can edit], \n  @numUsers as [total users] ,tmp.editors\/@numUsers as [% of total users]\nFROM (\n  SELECT \n      COUNT(*) as editors    \n  FROM\n      Users\n      WHERE LastAccessDate >= getdate() - 14\n) as tmp;"
    },
    {
        "QuerySetId": 100124,
        "Title": "Average question and answer scores",
        "Description": null,
        "QueryBody": "SELECT \n sum(Score) \/ convert(decimal(15,3),count(*)) as AverageQuestionScore\nfrom\n Posts as Q\nwhere\n Q.posttypeid = 3\n \n SELECT\n sum(Score) \/ convert(decimal(15,3),count(*)) as AverageAnswerScore\nfrom\n Posts as Q\nwhere\n Q.posttypeid = 3",
        "CreationDate": "2019-08-21 13:18:39",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 100317,
        "Title": "Average question and answer scores for my questions and answers",
        "Description": null,
        "QueryBody": "DECLARE  @UserId int = ##UserId##\n\nselect\n sum(Score) \/ convert(decimal(15,3),count(*)) as AverageQuestionScore\nfrom\n Posts as Q\nwhere\n Q.posttypeid = 1\n AND Q.OwnerUserId = @UserId\n\n select\n sum(Score) \/ convert(decimal(15,3),count(*)) as AverageAnswerScore\nfrom\n Posts as Q\nwhere\n Q.posttypeid = 2\n AND Q.OwnerUserId = @UserId",
        "CreationDate": "2020-04-01 16:58:23",
        "validated": false,
        "QueryBody_Original": "DECLARE  @UserId int = ##UserId##\n\nselect\n sum(Score) \/ convert(decimal(15,3),count(*)) as AverageQuestionScore\nfrom\n Posts as Q\nwhere\n Q.posttypeid = 1\n AND Q.OwnerUserId = @UserId\n\n select\n sum(Score) \/ convert(decimal(15,3),count(*)) as AverageAnswerScore\nfrom\n Posts as Q\nwhere\n Q.posttypeid = 2\n AND Q.OwnerUserId = @UserId"
    },
    {
        "QuerySetId": 100538,
        "Title": "All answers by user, and the corresponding questions ",
        "Description": null,
        "QueryBody": "SELECT  a.Id, b.title, a.Body FROM Posts a\nINNER JOIN Posts b\nON a.ParentId=b.Id\nWHERE a.OwnerUserId=##UserId##\nORDER BY a.Id DESC",
        "CreationDate": "2018-05-09 05:05:51",
        "validated": false,
        "QueryBody_Original": "SELECT  a.Id, b.title, a.Body FROM Posts a\nINNER JOIN Posts b\nON a.ParentId=b.Id\nWHERE a.OwnerUserId=##UserId##\nORDER BY a.Id DESC"
    },
    {
        "QuerySetId": 100589,
        "Title": "Number of User accounts older than mine",
        "Description": null,
        "QueryBody": "DECLARE  @UserId int = ##UserId##\nDECLARE @CreationDate datetime\nSELECT @CreationDate = CreationDate FROM Users WHERE Id = @UserId\n\nSELECT 'User ID', @UserId\nUNION ALL\nSELECT 'Older User accounts', COUNT(*)\n  FROM Users WHERE CreationDate < @CreationDate\nUNION ALL\nSELECT 'Lower-IDed User accounts', COUNT(*)\n  FROM Users WHERE Id < @UserId\nUNION ALL\nSELECT '---', NULL\nUNION ALL\nSELECT TOP 1 'Largest ID', Id\n  FROM Users\nUNION ALL\nSELECT 'Number of User accounts', COUNT(*)\n  FROM Users",
        "CreationDate": "2013-03-01 11:07:05",
        "validated": false,
        "QueryBody_Original": "DECLARE  @UserId int = ##UserId##\nDECLARE @CreationDate datetime\nSELECT @CreationDate = CreationDate FROM Users WHERE Id = @UserId\n\nSELECT 'User ID', @UserId\nUNION ALL\nSELECT 'Older User accounts', COUNT(*)\n  FROM Users WHERE CreationDate < @CreationDate\nUNION ALL\nSELECT 'Lower-IDed User accounts', COUNT(*)\n  FROM Users WHERE Id < @UserId\nUNION ALL\nSELECT '---', NULL\nUNION ALL\nSELECT TOP 1 'Largest ID', Id\n  FROM Users\nUNION ALL\nSELECT 'Number of User accounts', COUNT(*)\n  FROM Users"
    },
    {
        "QuerySetId": 100677,
        "Title": "Questions which you answered, by title keyword",
        "Description": null,
        "QueryBody": "SELECT  a.Id AS [Post Link], a.Body FROM Posts a\nINNER JOIN Posts b\nON a.ParentId=b.Id\nWHERE a.OwnerUserId=##UserId##\nAND LOWER(b.Title) LIKE '%##Keyword##%'\nORDER BY a.Id DESC",
        "CreationDate": "2013-03-02 02:10:48",
        "validated": false,
        "QueryBody_Original": "SELECT  a.Id AS [Post Link], a.Body FROM Posts a\nINNER JOIN Posts b\nON a.ParentId=b.Id\nWHERE a.OwnerUserId=##UserId##\nAND LOWER(b.Title) LIKE '%##Keyword##%'\nORDER BY a.Id DESC"
    },
    {
        "QuerySetId": 100777,
        "Title": "Location for top users in tag [r]",
        "Description": null,
        "QueryBody": "DECLARE  @TagName nvarchar(25) = 'r';\n\nWITH topusers AS(\n    SELECT TOP 10000\n        u.id, \n        COUNT(*) AS UpVotes\n    FROM Tags t with (nolock)\n        INNER JOIN PostTags pt with (nolock)ON pt.TagId = t.id\n        INNER JOIN Posts p with (nolock) ON p.ParentId = pt.PostId\n        INNER JOIN Votes v with (nolock) ON v.PostId = p.Id and v.VoteTypeId = 2\n        inner join Users u with (nolock) on u.Id = p.OwnerUserId\n    WHERE \n        p.CommunityOwnedDate IS NULL\n        and t.TagName = @TagName\n    GROUP BY u.Id\n    ORDER BY UpVotes DESC\n)\nSELECT\n    topusers.id,\n    u.DisplayName,\n    topusers.UpVotes,\n    u.location\nFROM topusers\nJOIN Users u on (topusers.id = u.id)\nORDER BY UpVotes DESC",
        "CreationDate": "2015-09-27 05:06:13",
        "validated": false,
        "QueryBody_Original": "DECLARE  @TagName nvarchar(25) = 'r';\n\nWITH topusers AS(\n    SELECT TOP 10000\n        u.id, \n        COUNT(*) AS UpVotes\n    FROM Tags t with (nolock)\n        INNER JOIN PostTags pt with (nolock)ON pt.TagId = t.id\n        INNER JOIN Posts p with (nolock) ON p.ParentId = pt.PostId\n        INNER JOIN Votes v with (nolock) ON v.PostId = p.Id and v.VoteTypeId = 2\n        inner join Users u with (nolock) on u.Id = p.OwnerUserId\n    WHERE \n        p.CommunityOwnedDate IS NULL\n        and t.TagName = @TagName\n    GROUP BY u.Id\n    ORDER BY UpVotes DESC\n)\nSELECT\n    topusers.id,\n    u.DisplayName,\n    topusers.UpVotes,\n    u.location\nFROM topusers\nJOIN Users u on (topusers.id = u.id)\nORDER BY UpVotes DESC"
    },
    {
        "QuerySetId": 100787,
        "Title": "Questions answered by users with > X reputation",
        "Description": null,
        "QueryBody": "DECLARE  @Reputation int = ##Reputation##\n\nSELECT Q.Id, Sum(IIF(U.Reputation >= @Reputation, 1, 0)) As HighRep, Sum(IIF(U.Reputation < @Reputation, 1, 0)) AS LowRep\nFROM Posts AS Q LEFT JOIN (Posts AS A INNER JOIN Users AS U ON A.OwnerUserId=U.Id) ON A.ParentId=Q.Id\nWHERE Q.ParentID Is Null AND Q.CreationDate >  DateAdd(m, -1, GETDATE()) AND A.Id Is Not Null\nGROUP BY Q.Id",
        "CreationDate": "2013-03-02 17:18:09",
        "validated": false,
        "QueryBody_Original": "DECLARE  @Reputation int = ##Reputation##\n\nSELECT Q.Id, Sum(IIF(U.Reputation >= @Reputation, 1, 0)) As HighRep, Sum(IIF(U.Reputation < @Reputation, 1, 0)) AS LowRep\nFROM Posts AS Q LEFT JOIN (Posts AS A INNER JOIN Users AS U ON A.OwnerUserId=U.Id) ON A.ParentId=Q.Id\nWHERE Q.ParentID Is Null AND Q.CreationDate >  DateAdd(m, -1, GETDATE()) AND A.Id Is Not Null\nGROUP BY Q.Id"
    },
    {
        "QuerySetId": 100961,
        "Title": "Top User Of a Peticular Tag In Iran",
        "Description": null,
        "QueryBody": "WITH  USER_BY_TAG\nAS\n(\n  SELECT \n    ROW_NUMBER() OVER(ORDER BY COUNT(*) DESC) Rank,\n    u.Id AS [User Link], \n    TagName,\n    COUNT(*) AS UpVotes\n  FROM Tags t\n      INNER JOIN PostTags pt ON pt.TagId = t.id\n      INNER JOIN Posts     p ON p.ParentId = pt.PostId\n      INNER JOIN Votes     v ON v.PostId = p.Id and VoteTypeId = 2\n      INNER JOIN Users     u ON u.Id = p.OwnerUserId\n  WHERE \n      LOWER(Location) LIKE '%iran%'\n     AND  TagName = ##tagName:string##\n  GROUP BY u.id, TagName\n)\n\nSELECT * FROM USER_BY_TAG WHERE rank <= 1000 ORDER BY upvotes DESC ;",
        "CreationDate": "2013-03-03 18:38:22",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 101229,
        "Title": "Best time to answer Django questions",
        "Description": null,
        "QueryBody": "WITH  the \u201cDjango\u201d tag\n--\n-- Shows the best time in stackoverflow when you\n-- get fewest competetors for answering a question\n\nSELECT \n    DatePart(hour, Posts.CreationDate) AS [DayTime],\n    Count(Posts.Id) AS [NumAnswers]\nFROM\n    Posts\nINNER JOIN\n    PostTags ON Posts.ParentId = PostTags.PostId \nWHERE\n    PostTags.TagId = 17 and \n    Posts.PostTypeId = 2 and\n    Posts.CreationDate > DATEADD(year,-1,GETDATE())\nGROUP BY\n    DatePart(hour, Posts.CreationDate)",
        "CreationDate": "2014-06-08 13:15:35",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 101399,
        "Title": "My Top Voted Answer Rate",
        "Description": null,
        "QueryBody": "DECLARE  @UserId int = ##UserId##\n\nSELECT (\n  SELECT CAST(COUNT(Id) AS FLOAT)\n  FROM Posts a\n  WHERE a.OwnerUserId = @UserId\n  AND a.PostTypeId = 2\n  AND Score > 0\n  AND (Score = (\n    SELECT MAX(Score) FROM Posts b WHERE b.ParentId = a.ParentId)))\n  \/\n  (SELECT COUNT(*)\n  FROM Posts c\n  WHERE c.OwnerUserId = @UserId\n  AND c.PostTypeId = 2) * 100 AS [Top Voted Answer Rate];",
        "CreationDate": "2013-03-07 04:07:42",
        "validated": false,
        "QueryBody_Original": "DECLARE  @UserId int = ##UserId##\n\nSELECT (\n  SELECT CAST(COUNT(Id) AS FLOAT)\n  FROM Posts a\n  WHERE a.OwnerUserId = @UserId\n  AND a.PostTypeId = 2\n  AND Score > 0\n  AND (Score = (\n    SELECT MAX(Score) FROM Posts b WHERE b.ParentId = a.ParentId)))\n  \/\n  (SELECT COUNT(*)\n  FROM Posts c\n  WHERE c.OwnerUserId = @UserId\n  AND c.PostTypeId = 2) * 100 AS [Top Voted Answer Rate];"
    },
    {
        "QuerySetId": 101479,
        "Title": "Top Users Of a Particular Tag in Sweden",
        "Description": null,
        "QueryBody": "WITH  USER_BY_TAG\nAS\n(\n  SELECT \n    ROW_NUMBER() OVER(ORDER BY COUNT(*) DESC) Rank,\n    u.Id AS [User Link], \n    TagName,\n    COUNT(*) AS UpVotes\n  FROM Tags t\n      INNER JOIN PostTags pt ON pt.TagId = t.id\n      INNER JOIN Posts     p ON p.ParentId = pt.PostId\n      INNER JOIN Votes     v ON v.PostId = p.Id and VoteTypeId = 2\n      INNER JOIN Users     u ON u.Id = p.OwnerUserId\n  WHERE \n      LOWER(Location) LIKE '%sweden%'\n     AND  TagName = ##tagName:string##\n  GROUP BY u.id, TagName\n)\n\nSELECT * FROM USER_BY_TAG WHERE rank <= 1000 ORDER BY upvotes DESC ;",
        "CreationDate": "2013-03-06 16:57:55",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 101537,
        "Title": "Number of questions in the [r] tag by day",
        "Description": null,
        "QueryBody": "DECLARE  @TagName nvarchar(25) = 'r';\n\nWITH rquestions AS(\nSELECT CONVERT(VARCHAR(12),p.CreationDate,112) AS daydate,\n       CONVERT(VARCHAR(12),p.CreationDate,1) AS usdaydate\n    FROM Tags t with (nolock)\n        INNER JOIN PostTags pt with (nolock)ON pt.TagId = t.id\n        INNER JOIN Posts p with (nolock) ON p.Id = pt.PostId \n    WHERE \n        p.PostTypeId = 1\n        and t.TagName = @TagName\n)\nSELECT daydate, usdaydate, COUNT(*) AS nb FROM rquestions \n   GROUP BY daydate, usdaydate\n   ORDER BY daydate DESC",
        "CreationDate": "2013-03-06 21:24:35",
        "validated": false,
        "QueryBody_Original": "DECLARE  @TagName nvarchar(25) = 'r';\n\nWITH rquestions AS(\nSELECT CONVERT(VARCHAR(12),p.CreationDate,112) AS daydate,\n       CONVERT(VARCHAR(12),p.CreationDate,1) AS usdaydate\n    FROM Tags t with (nolock)\n        INNER JOIN PostTags pt with (nolock)ON pt.TagId = t.id\n        INNER JOIN Posts p with (nolock) ON p.Id = pt.PostId \n    WHERE \n        p.PostTypeId = 1\n        and t.TagName = @TagName\n)\nSELECT daydate, usdaydate, COUNT(*) AS nb FROM rquestions \n   GROUP BY daydate, usdaydate\n   ORDER BY daydate DESC"
    },
    {
        "QuerySetId": 101591,
        "Title": "Originating posting locations for a tag",
        "Description": null,
        "QueryBody": "SELECT  Owner.Location, COUNT(*) AS Count\nFROM Tags AS Tag\nJOIN PostTags AS pt ON pt.TagId = Tag.Id\nJOIN Posts AS Post ON Post.Id = pt.PostId\nJOIN Users AS Owner ON Owner.Id = Post.OwnerUserId\nWHERE Tag.TagName LIKE ##tagName:string## AND Post.ParentId Is Null\nGROUP BY Owner.Location\nORDER BY COUNT(*) DESC",
        "CreationDate": "2013-03-07 01:34:47",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 101639,
        "Title": "longest time to accept answer, by user",
        "Description": null,
        "QueryBody": "SELECT  p.id as [Post Link], p.owneruserid as [User Link], datediff(day,  a.creationdate, v.creationdate ) as [Days Elapsed],\na.creationdate as Answered, v.creationdate as Accepted\nfrom posts p, posts a, votes v\nwhere a.parentid = p.id\nand a.owneruserid = ##userid:int##\nand p.acceptedanswerid = v.postid\nand v.postid = a.id\nand v.votetypeid = 1\n     order  by v.creationdate - a.creationdate desc",
        "CreationDate": "2015-01-25 04:51:26",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 101641,
        "Title": "Users sorted by score per answer",
        "Description": "Votes per answer (non-CW, with at least 400 answers to their credit)\r\n",
        "QueryBody": "WITH  at least 100 answers to their credit)\n\nselect u.id as [User Link], u.reputation as 'Rep', count(a.id) as 'Answers', \nsum(a.score) as 'Total Score',\ncast (sum(a.score) as float) \/ cast(count(a.id) as float) as  'Average'\nfrom posts a, users u\nwhere a.owneruserid = u.id\nand a.posttypeid = 2 \nand a.communityowneddate is null \ngroup by u.id, u.reputation\nhaving count(a.id) > 10\norder by cast (sum(a.score) as float) \/ cast(count(a.id) as float) asc",
        "CreationDate": "2013-06-15 03:33:48",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 101696,
        "Title": "Tag badges vs tag questions",
        "Description": null,
        "QueryBody": "SELECT  name, \n\/*\nsum(case medal when 1 then medalcount else 0 end) [1],\nsum(case medal when 2 then medalcount else 0 end) [2],\nsum(case medal when 3 then medalcount else 0 end) [3],\n*\/\nsum(\n1+\ncase medalclass \n  when 1 then 10*medalcount\n  when 2 then 100*medalcount\n  when 3 then 1000*medalcount\n  end) as\n  expertness\nfrom (\nSELECT name, medalclass, count(*) medalcount\nfrom (\nSELECT name, userid, count(id) medalclass\nfrom badges\nwhere LOWER(SUBSTRING(Name,1,1)) = SUBSTRING(Name,1,1) \ngroup by name, userid\n) raw\ngroup by name, medalclass\n) raw2 \ngroup by name\n\n\nSELECT tagid, count(postid) from posttags\ngroup by tagid\n\nSELECT * from badges\nwhere name = 'c#'\nand userid = 71059",
        "CreationDate": "2013-03-07 19:31:28",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 102207,
        "Title": "accepted answers that weren't the top-scoring answer",
        "Description": null,
        "QueryBody": "SELECT  q.pid as [Post Link], q.max_score, q.acc_score, q.n_answers from\n(SELECT p.id  as pid,\n       min(a.score) as min_score,\n       max(a.score) as max_score,\n       max(c.score) as acc_score,\n       count(a.id) as n_answers\nfrom posts p\njoin posts a on a.parentid = p.id\njoin posts c on p.acceptedanswerid = c.id\nwhere c.owneruserid = ##userid:int##\ngroup by p.id\n) as q\nwhere q.acc_score < q.max_score\norder by q.max_score - q.acc_score desc",
        "CreationDate": "2013-03-09 08:20:39",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 102408,
        "Title": "view number of edited posts",
        "Description": null,
        "QueryBody": "DECLARE  @UserId int = ##UserId##\n\nSELECT PostId AS [Post Link], PostHistoryTypes.Name\nFROM PostHistory\nINNER JOIN PostHistoryTypes ON PostHistoryTypes.Id = Posthistory.PostHistoryTypeId\nWHERE UserId = @UserId AND PostHistoryTypes.Id > 3",
        "CreationDate": "2013-03-24 19:58:30",
        "validated": false,
        "QueryBody_Original": "DECLARE  @UserId int = ##UserId##\n\nSELECT PostId AS [Post Link], PostHistoryTypes.Name\nFROM PostHistory\nINNER JOIN PostHistoryTypes ON PostHistoryTypes.Id = Posthistory.PostHistoryTypeId\nWHERE UserId = @UserId AND PostHistoryTypes.Id > 3"
    },
    {
        "QuerySetId": 102718,
        "Title": "Marginal short answers with links",
        "Description": "Intended to find short answers with links for people to improve, downvote or delete.\r\n\r\nAdditional fields (closed date, and answer count) help identify questions that attract these short answers that should be modified or closed.\r\n\r\nFind answers with marginal votes (between the min and max) that have a length less than some size and contain a link.  Filter out questions that have been locked (many historical lock questions provide false positives).",
        "QueryBody": "SELECT \n  a.Score, LEN(a.Body) as length,\n  CASE WHEN q.closedDate is null\n    THEN ''\n    ELSE 'Closed'\n  END as Closed,\n  CASE WHEN q.CommunityOwnedDate is null\n    THEN ''\n    ELSE 'CW'\n  END as CommWiki,\n  q.AnswerCount as AnswerCount,\n  a.Id as [Post Link],\n  a.body\nfrom\n  Posts a,\n  Posts q\nwhere\n  a.PostTypeId = 2\n  and a.Score <=  ##AnswerScoreMax:int##\n  and a.Score >= ##AnswerScoreMin:int##\n  and LEN(a.Body) < ##AnswerLength##\n  and UPPER(a.body) like '%HTTP:\/\/%'\n  and a.ParentId = q.id\n  and q.closedDate is null\n  and not exists (\n    SELECT 1\n    from\n      PostHistory ph\n    where\n      ph.PostId = q.id\n      and ph.PostHistoryTypeId = 14\n  )\norder by length ASC, a.Score ASC",
        "CreationDate": "2013-09-28 17:28:37",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 103465,
        "Title": "Top x most downvoted questions",
        "Description": "Shows the most downvoted answers (with at least 25 downvotes)\r\n",
        "QueryBody": "WITH  A AS (select\n  p.Id as [Post Link], sum(CASE WHEN v.VoteTypeId = 3 THEN 1 ELSE 0 END) AS downvotes\nfrom\n Posts p\n inner join Votes v\n   on v.PostId = p.Id\nwhere\n  p.PostTypeId = 1\ngroup by\np.Id)\nSELECT TOP ##SelectNum## A.* FROM A order by\ndownvotes desc",
        "CreationDate": "2013-03-16 00:46:29",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 103962,
        "Title": "Potential Low Quality\/Not A Good Fit Questions",
        "Description": null,
        "QueryBody": "SELECT  TOP ##TopNum##\nQ.Id as [Post Link],\nQ.Score,\nQ.ViewCount,\nShortLInkAnswers.Count as NumShortLinkAnswers\nfrom\n Posts as Q\n inner join (\n   SELECT \n    PH.PostId, \n    PH.PostHistoryTypeID \n   FROM\n   PostHistory PH WHERE PostHistoryTypeID IN (1, 10)) H \n   ON H.PostId = Q.Id\n inner join \n (SELECT\n count(*) as Count,\n A.ParentID\n from\n Posts as A \n where\n A.posttypeid = 2\n and A.body like '%http:\/\/%' \n and len(A.body) between 40 and 80\n group by A.ParentID\n ) as ShortLinkAnswers on ShortLinkAnswers.ParentID = Q.Id\nwhere\n Q.posttypeid = 1\n and Q.ClosedDate is null\n AND H.PostHistoryTypeId <> 10\n AND ShortLinkAnswers.count > 0 \nGROUP BY\n Q.Id,\n Q.Score,\n Q.ViewCount,\n ShortLInkAnswers.Count\norder by \n Q.score desc, \n Q.ViewCount Desc",
        "CreationDate": "2013-03-19 19:15:21",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 104174,
        "Title": "Filter DownVotes in a Tag",
        "Description": "Find question in a tag that are getting down voted.",
        "QueryBody": "WITH  A AS (select\n  p.Id as [Post Link],p.ClosedDate,  sum(CASE WHEN v.VoteTypeId = 3 THEN 1 ELSE 0 END) AS downvotes\nfrom\n Posts p\n inner join Votes v   on v.PostId = p.Id\nINNER JOIN PostTags pt ON pt.PostId = p.Id\ninner join Tags t   on t.id = pt.TagId and t.TagName = '##TagToSearch##'\n\nwhere\n  p.PostTypeId = 1 \n  \n  \ngroup by\np.Id,p.ClosedDate )\n\nSELECT TOP ##SelectTopCount## A.* FROM A where downvotes<##DownVotesAndLess##  order by\ndownvotes desc",
        "CreationDate": "2013-03-20 17:37:58",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 104659,
        "Title": "Closed, no answers and no activity for a week",
        "Description": null,
        "QueryBody": "SELECT  q.Id as [Post Link]\n\nfrom Posts q\n\nwhere ClosedDate < getdate()-##deadline##\n\nand not exists (SELECT 1 from PostHistory h\n  where h.CreationDate > getdate()-7)",
        "CreationDate": "2013-03-23 07:19:16",
        "validated": false,
        "QueryBody_Original": "SELECT  q.Id as [Post Link]\n\nfrom Posts q\n\nwhere ClosedDate < getdate()-##deadline##\n\nand not exists (SELECT 1 from PostHistory h\n  where h.CreationDate > getdate()-7)"
    },
    {
        "QuerySetId": 104722,
        "Title": "view list of edited posts for a user",
        "Description": "View a list of all edits done on all posts of a site.",
        "QueryBody": "DECLARE  @UserId int = ##UserId##\n\nSELECT PostTypes.Name AS Type, PostHistory.PostId AS [Post Link], PostHistoryTypes.Name AS Modification, Comment\nFROM PostHistory\nINNER JOIN PostHistoryTypes ON PostHistoryTypes.Id = Posthistory.PostHistoryTypeId\nINNER JOIN Posts ON Posts.Id = PostHistory.PostId\nINNER JOIN PostTypes ON PostTypes.Id = Posts.PostTypeId\nWHERE UserId = @UserId AND PostHistoryTypes.Id > 3",
        "CreationDate": "2013-03-24 20:05:45",
        "validated": false,
        "QueryBody_Original": "DECLARE  @UserId int = ##UserId##\n\nSELECT PostTypes.Name AS Type, PostHistory.PostId AS [Post Link], PostHistoryTypes.Name AS Modification, Comment\nFROM PostHistory\nINNER JOIN PostHistoryTypes ON PostHistoryTypes.Id = Posthistory.PostHistoryTypeId\nINNER JOIN Posts ON Posts.Id = PostHistory.PostId\nINNER JOIN PostTypes ON PostTypes.Id = Posts.PostTypeId\nWHERE UserId = @UserId AND PostHistoryTypes.Id > 3"
    },
    {
        "QuerySetId": 104729,
        "Title": "Top answerers per tag with answer from <location> in the last n days",
        "Description": null,
        "QueryBody": "DECLARE  @limit int = ##Limit##;\nDECLARE @tag_id int = (select id from tags where tagname = '##TagName##');\n\nselect top (@limit)\n  rank() over (order by sum(answers.score) desc) \"Rank\"\n  ,users.id \"User Link\"\n  ,sum(answers.score) as \"Score\"\nfrom users\njoin posts answers on (users.id = answers.owneruserid)\njoin posts parent on (answers.parentid = parent.id)\njoin posttags on (parent.id = posttags.postid)\nwhere posttags.tagid = @tag_id\nand answers.posttypeid = 2  -- answers only\nand answers.CreationDate > getdate() - ##days##\nand (UPPER(Users.Location) LIKE UPPER('%##location##%')\nOR UPPER(Users.AboutMe) LIKE UPPER('%##location##%'))\ngroup by users.id\norder by sum(answers.score) desc\n;",
        "CreationDate": "2013-03-24 21:55:37",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 104780,
        "Title": "User Answered Questions without an accepted answer",
        "Description": null,
        "QueryBody": "SELECT  Id as [Post Link] FROM Posts\nWHERE Id IN (\nSELECT ParentId FROM Posts\nWHERE PostTypeId = 2 AND OwnerUserId = ##UserId##\n)\nAND AcceptedAnswerId IS NULL",
        "CreationDate": "2013-03-25 06:49:10",
        "validated": false,
        "QueryBody_Original": "SELECT  Id as [Post Link] FROM Posts\nWHERE Id IN (\nSELECT ParentId FROM Posts\nWHERE PostTypeId = 2 AND OwnerUserId = ##UserId##\n)\nAND AcceptedAnswerId IS NULL"
    },
    {
        "QuerySetId": 105463,
        "Title": "Top 5000 Best Ratio Reputation per Post",
        "Description": "A list of the top 500 users with the highest average answer score excluding\r\ncommunity wiki \/ closed posts or users with less than 10 answers\r\n",
        "QueryBody": "DECLARE  @MinPosts int = ##MinPosts##\n\nSELECT \n    TOP 5000\n    Users.Id as [User Link],\n    (Users.Reputation\/Count(Posts.Id)) AS Ratio,\n    Users.Reputation as [Rep],\n    Count(Posts.Id) AS [Answers]\nFROM\n    Users\n  INNER JOIN\n    Posts ON Posts.OwnerUserId = Users.Id\nWHERE \n    CommunityOwnedDate is null and ClosedDate is null\nGROUP BY \n    Users.Id, Users.Reputation\nHaving Count(Posts.Id)>@MinPosts\nORDER BY\n    Ratio DESC",
        "CreationDate": "2013-03-29 15:39:25",
        "validated": false,
        "QueryBody_Original": "DECLARE  @MinPosts int = ##MinPosts##\n\nSELECT \n    TOP 5000\n    Users.Id as [User Link],\n    (Users.Reputation\/Count(Posts.Id)) AS Ratio,\n    Users.Reputation as [Rep],\n    Count(Posts.Id) AS [Answers]\nFROM\n    Users\n  INNER JOIN\n    Posts ON Posts.OwnerUserId = Users.Id\nWHERE \n    CommunityOwnedDate is null and ClosedDate is null\nGROUP BY \n    Users.Id, Users.Reputation\nHaving Count(Posts.Id)>@MinPosts\nORDER BY\n    Ratio DESC"
    },
    {
        "QuerySetId": 105560,
        "Title": "Percentage of Askers that have only one question (Excluding Arduino)",
        "Description": null,
        "QueryBody": "SELECT  100*NRU.#NRU\/#U\nFROM \n(\n  SELECT count(IU.Id) as '#U'\n  FROM (\n    SELECT Users.Id as 'Id'\n    FROM Users, Posts\n    WHERE Users.Id = Posts.OwnerUserId and Posts.PostTypeId = 1 and Posts.Tags not like '%arduino%'\n    GROUP BY Users.Id\n      ) as IU\n) as U,\n(\n  SELECT count(INRU.Id) as '#NRU'\n  FROM (\n    SELECT Users.Id as 'Id'\n    FROM Users, Posts\n    WHERE Users.Id = Posts.OwnerUserId and Posts.PostTypeId = 1 and Posts.Tags not like '%arduino%'\n    GROUP BY Users.Id\n    HAVING count(Posts.Id) = 1\n      ) as INRU\n) as NRU",
        "CreationDate": "2013-03-30 08:00:11",
        "validated": false,
        "QueryBody_Original": "SELECT  100*NRU.#NRU\/#U\nFROM \n(\n  SELECT count(IU.Id) as '#U'\n  FROM (\n    SELECT Users.Id as 'Id'\n    FROM Users, Posts\n    WHERE Users.Id = Posts.OwnerUserId and Posts.PostTypeId = 1 and Posts.Tags not like '%arduino%'\n    GROUP BY Users.Id\n      ) as IU\n) as U,\n(\n  SELECT count(INRU.Id) as '#NRU'\n  FROM (\n    SELECT Users.Id as 'Id'\n    FROM Users, Posts\n    WHERE Users.Id = Posts.OwnerUserId and Posts.PostTypeId = 1 and Posts.Tags not like '%arduino%'\n    GROUP BY Users.Id\n    HAVING count(Posts.Id) = 1\n      ) as INRU\n) as NRU"
    },
    {
        "QuerySetId": 105561,
        "Title": "Percentage of Askers that have not logged in this month (Arduino)",
        "Description": null,
        "QueryBody": "SELECT  100*NRU.#NRU\/#U\nFROM \n(\n  SELECT count(IU.Id) as '#U'\n  FROM (\n    SELECT Users.Id as 'Id'\n    FROM Users, Posts\n    WHERE Users.Id = Posts.OwnerUserId and \n    Posts.PostTypeId = 1 and Posts.Tags like '%arduino%'\n    \n    GROUP BY Users.Id\n      ) as IU\n) as U,\n(\n  SELECT count(INRU.Id) as '#NRU'\n  FROM (\n    SELECT Users.Id as 'Id'\n    FROM Users, Posts\n    WHERE Users.Id = Posts.OwnerUserId and Posts.PostTypeId = 1 and Posts.Tags like '%arduino%' and\n    (year(Users.LastAccessDate)<2013 or month(Users.LastAccessDate)<3)\n    \n    GROUP BY Users.Id\n    HAVING count(Posts.Id) = 1\n\n      ) as INRU\n) as NRU",
        "CreationDate": "2013-03-30 08:18:55",
        "validated": false,
        "QueryBody_Original": "SELECT  100*NRU.#NRU\/#U\nFROM \n(\n  SELECT count(IU.Id) as '#U'\n  FROM (\n    SELECT Users.Id as 'Id'\n    FROM Users, Posts\n    WHERE Users.Id = Posts.OwnerUserId and \n    Posts.PostTypeId = 1 and Posts.Tags like '%arduino%'\n    \n    GROUP BY Users.Id\n      ) as IU\n) as U,\n(\n  SELECT count(INRU.Id) as '#NRU'\n  FROM (\n    SELECT Users.Id as 'Id'\n    FROM Users, Posts\n    WHERE Users.Id = Posts.OwnerUserId and Posts.PostTypeId = 1 and Posts.Tags like '%arduino%' and\n    (year(Users.LastAccessDate)<2013 or month(Users.LastAccessDate)<3)\n    \n    GROUP BY Users.Id\n    HAVING count(Posts.Id) = 1\n\n      ) as INRU\n) as NRU"
    },
    {
        "QuerySetId": 105684,
        "Title": "Rank User By Number of Upvotes",
        "Description": null,
        "QueryBody": "SELECT  [User Link], UpVotes, DownVotes, rn\nFROM\n(\n  SELECT a.ID as [User Link],\n         a.DownVotes, UpVotes,\n         DENSE_RANK() OVER (ORDER BY a.UpVotes DESC) rn\n  FROM   Users a\n)x\nWHERE  rn <= ##NumberOfUser## AND DownVotes=0\nORDER BY UpVotes DESC",
        "CreationDate": "2019-02-13 15:37:13",
        "validated": false,
        "QueryBody_Original": "SELECT  [User Link], UpVotes, DownVotes, rn\nFROM\n(\n  SELECT a.ID as [User Link],\n         a.DownVotes, UpVotes,\n         DENSE_RANK() OVER (ORDER BY a.UpVotes DESC) rn\n  FROM   Users a\n)x\nWHERE  rn <= ##NumberOfUser## AND DownVotes=0\nORDER BY UpVotes DESC"
    },
    {
        "QuerySetId": 106002,
        "Title": "Search my own answer posts by tag...",
        "Description": null,
        "QueryBody": "DECLARE  @MyUserID INT = ##UserID:int##\nDECLARE @PostText nvarchar(600) = ##PostText:string##\nDECLARE @PostTags nvarchar (150) = ##PostTags:string##\n\nSELECT @PostText = UPPER(@PostText)\nSELECT @PostTags = UPPER(@PostTags)\nSELECT\n    Answer.Id AS [Post Link],\n    Question.Tags AS [Tags],\n    Answer.Score AS [Score],    \n    Answer.CreationDate AS [Creation Date]   \nFROM\n    Posts Answer\nLEFT JOIN Posts Question ON Answer.ParentId = Question.Id\nWHERE\n    Answer.OwnerUserId = @MyUserID AND\n    Answer.PostTypeId IN (2, 3) AND\n    UPPER(Answer.Body) LIKE '%' + @PostText + '%' AND\n    UPPER(Question.Tags) LIKE '%' + @PostTags + '%'\nORDER BY\n    Answer.CreationDate\nDESC",
        "CreationDate": "2013-04-02 05:32:00",
        "validated": false,
        "QueryBody_Original": "DECLARE  @MyUserID INT = ##UserID:int##\nDECLARE @PostText nvarchar(600) = ##PostText:string##\nDECLARE @PostTags nvarchar (150) = ##PostTags:string##\n\nSELECT @PostText = UPPER(@PostText)\nSELECT @PostTags = UPPER(@PostTags)\nSELECT\n    Answer.Id AS [Post Link],\n    Question.Tags AS [Tags],\n    Answer.Score AS [Score],    \n    Answer.CreationDate AS [Creation Date]   \nFROM\n    Posts Answer\nLEFT JOIN Posts Question ON Answer.ParentId = Question.Id\nWHERE\n    Answer.OwnerUserId = @MyUserID AND\n    Answer.PostTypeId IN (2, 3) AND\n    UPPER(Answer.Body) LIKE '%' + @PostText + '%' AND\n    UPPER(Question.Tags) LIKE '%' + @PostTags + '%'\nORDER BY\n    Answer.CreationDate\nDESC"
    },
    {
        "QuerySetId": 106179,
        "Title": "Top User Of a Peticular Tag in Sri Lanka",
        "Description": null,
        "QueryBody": "WITH  USER_BY_TAG\nAS\n(\n  SELECT \n    ROW_NUMBER() OVER(ORDER BY COUNT(*) DESC) Rank,\n    u.Id AS [User Link], \n    TagName,\n    COUNT(*) AS UpVotes\n  FROM Tags t\n      INNER JOIN PostTags pt ON pt.TagId = t.id\n      INNER JOIN Posts     p ON p.ParentId = pt.PostId\n      INNER JOIN Votes     v ON v.PostId = p.Id and VoteTypeId = 2\n      INNER JOIN Users     u ON u.Id = p.OwnerUserId\n  WHERE \n  (LOWER(Location) LIKE '%iran%'OR LOWER(Location) LIKE '%iran%')\n     AND  TagName = ##tagName:string##\n  GROUP BY u.id, TagName\n)\n\nSELECT * FROM USER_BY_TAG WHERE rank <= 1000 ORDER BY upvotes DESC ;",
        "CreationDate": "2013-04-04 15:29:28",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 106250,
        "Title": "Average quality of answers by users",
        "Description": "Average votes of answers for users with at least MinAnswers answers ",
        "QueryBody": "SELECT  \n  Round(Cast(Votes AS Float) \/ Posts, 2) AS [Votes],\n  Round(Cast(Upvotes AS Float) \/ Posts, 2) AS [Upvotes],\n  Round(Cast(Downvotes AS Float) \/ Posts, 2) AS [Downvotes],\n  Round(Cast(Upvotes AS Float) \/ Downvotes, 2) AS [Up\/Down ratio]\nFROM\n(\nSELECT\n  Count(DISTINCT v.PostId) AS [Posts],\n  Count(*) AS [Votes],\n  Count(CASE v.VoteTypeID WHEN 2 THEN 1 END) AS [Upvotes],\n  Count(CASE v.VoteTypeID WHEN 3 THEN 1 END) AS [Downvotes]\nFROM \n  Votes v\nJOIN \n  Posts p ON v.PostId=p.Id\nWHERE \n  p.PostTypeId = ##POSTTYPE## and\n  p.ClosedDate is null and \n  ( \n    DATEPART(YYYY, p.CreationDate) > ##YYYY##  or \n    (\n      DATEPART(YYYY, p.CreationDate) = ##YYYY## and \n      DATEPART(MM, p.CreationDate) >= ##MM##\n    )\n  ) and\n  ( \n    v.VoteTypeId = 2 or\n    v.VoteTypeId = 3\n  )\n) AS Data",
        "CreationDate": "2013-05-13 15:02:20",
        "validated": false,
        "QueryBody_Original": "SELECT  \n  Round(Cast(Votes AS Float) \/ Posts, 2) AS [Votes],\n  Round(Cast(Upvotes AS Float) \/ Posts, 2) AS [Upvotes],\n  Round(Cast(Downvotes AS Float) \/ Posts, 2) AS [Downvotes],\n  Round(Cast(Upvotes AS Float) \/ Downvotes, 2) AS [Up\/Down ratio]\nFROM\n(\nSELECT\n  Count(DISTINCT v.PostId) AS [Posts],\n  Count(*) AS [Votes],\n  Count(CASE v.VoteTypeID WHEN 2 THEN 1 END) AS [Upvotes],\n  Count(CASE v.VoteTypeID WHEN 3 THEN 1 END) AS [Downvotes]\nFROM \n  Votes v\nJOIN \n  Posts p ON v.PostId=p.Id\nWHERE \n  p.PostTypeId = ##POSTTYPE## and\n  p.ClosedDate is null and \n  ( \n    DATEPART(YYYY, p.CreationDate) > ##YYYY##  or \n    (\n      DATEPART(YYYY, p.CreationDate) = ##YYYY## and \n      DATEPART(MM, p.CreationDate) >= ##MM##\n    )\n  ) and\n  ( \n    v.VoteTypeId = 2 or\n    v.VoteTypeId = 3\n  )\n) AS Data"
    },
    {
        "QuerySetId": 106579,
        "Title": "Questions with best score created within 3 month range",
        "Description": "The top 200 questions with the most views\r\n",
        "QueryBody": "DECLARE  @From_Date DATETIME = convert(DATETIME, '##StartDate?2013\/01\/01##')\nDECLARE @To_Date DATETIME = dateadd(mm, 3, @From_Date)\n\nPRINT 'from ' + format(@From_Date, 'D') + ' to ' + format(@To_Date, 'D')\n\nSELECT TOP 20 Posts.id AS [Post Link],\n\tusers.id AS [User Link],\n\tPosts.CreationDate,\n\tPosts.Score AS [Question Score],\n\tmax(Answer.Score) AS [max Answer Score],\n\tPosts.ViewCount,\n\tPosts.FavoriteCount\nFROM Posts\nINNER JOIN users\n\tON Posts.OwnerUserId = users.id\nLEFT JOIN Posts AS Answer\n\tON Answer.parentid = Posts.id\n\t\tAND Answer.posttypeid = 2\nWHERE Posts.ClosedDate IS NULL\n\tAND Posts.posttypeid = 1\n\tAND Posts.CreationDate BETWEEN @From_Date\n\t\tAND @To_Date\nGROUP BY Posts.Id,\n\tusers.id,\n\tPosts.CreationDate,\n\tPosts.Score,\n\tPosts.ViewCount,\n\tPosts.FavoriteCount\nORDER BY Posts.score DESC",
        "CreationDate": "2020-11-10 03:17:42",
        "validated": false,
        "QueryBody_Original": "DECLARE  @From_Date DATETIME = convert(DATETIME, '##StartDate?2013\/01\/01##')\nDECLARE @To_Date DATETIME = dateadd(mm, 3, @From_Date)\n\nPRINT 'from ' + format(@From_Date, 'D') + ' to ' + format(@To_Date, 'D')\n\nSELECT TOP 20 Posts.id AS [Post Link],\n\tusers.id AS [User Link],\n\tPosts.CreationDate,\n\tPosts.Score AS [Question Score],\n\tmax(Answer.Score) AS [max Answer Score],\n\tPosts.ViewCount,\n\tPosts.FavoriteCount\nFROM Posts\nINNER JOIN users\n\tON Posts.OwnerUserId = users.id\nLEFT JOIN Posts AS Answer\n\tON Answer.parentid = Posts.id\n\t\tAND Answer.posttypeid = 2\nWHERE Posts.ClosedDate IS NULL\n\tAND Posts.posttypeid = 1\n\tAND Posts.CreationDate BETWEEN @From_Date\n\t\tAND @To_Date\nGROUP BY Posts.Id,\n\tusers.id,\n\tPosts.CreationDate,\n\tPosts.Score,\n\tPosts.ViewCount,\n\tPosts.FavoriteCount\nORDER BY Posts.score DESC"
    },
    {
        "QuerySetId": 106608,
        "Title": "Follow posts by users with high reputation",
        "Description": null,
        "QueryBody": "SELECT  top ##num##\n  cast(\n    round(cast(u.reputation as real)\/1000,1) \n    as varchar)+'K' as [Rep],\n  p.owneruserid as [User Link],\n  case when p.posttypeid = 1 then 'Q' else 'A' end \n    as [Q\/A],\n  p.score as [Votes],\n  p.id as [Post Link],\n  p.lasteditdate as [Modified]\nfrom posts p\njoin users u on u.id = p.owneruserid\nwhere\n  u.id in ##ListofUserIDs##\norder by [Modified] desc",
        "CreationDate": "2013-04-05 06:07:21",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 106631,
        "Title": "Follow posts by favorite users",
        "Description": null,
        "QueryBody": "SELECT  top ##num##\n  cast(\n    round(cast(u.reputation as real)\/1000,1) \n    as varchar)+'K' as [Rep],\n  p.owneruserid as [User Link],\n  case when p.posttypeid = 1 then 'Q' else 'A' end \n    as [Q\/A],\n  p.score as [Votes],\n  p.id as [Post Link],\n  p.lasteditdate as [Modified]\nfrom posts p\njoin users u on u.id = p.owneruserid\nwhere\n  u.id in (##ListofUserIDs##)\norder by [Modified] desc",
        "CreationDate": "2013-04-05 06:09:42",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 106745,
        "Title": "Top User Of a Peticular Tag in Iran",
        "Description": null,
        "QueryBody": "WITH  USER_BY_TAG\nAS\n(\n  SELECT \n    ROW_NUMBER() OVER(ORDER BY COUNT(*) DESC) Rank,\n    u.Id AS [User Link], \n    TagName,\n    COUNT(*) AS UpVotes\n  FROM Tags t\n      INNER JOIN PostTags pt ON pt.TagId = t.id\n      INNER JOIN Posts     p ON p.ParentId = pt.PostId\n      INNER JOIN Votes     v ON v.PostId = p.Id and VoteTypeId = 2\n      INNER JOIN Users     u ON u.Id = p.OwnerUserId\n  WHERE \n  (LOWER(Location) LIKE '%iran%'OR LOWER(Location) LIKE '%iran%')\n     AND  TagName = ##tagName:string##\n  GROUP BY u.id, TagName\n)\n\nSELECT * FROM USER_BY_TAG WHERE rank <= 1000 ORDER BY upvotes DESC ;",
        "CreationDate": "2014-08-21 10:54:13",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 106848,
        "Title": "Posts per hour in last month(s)",
        "Description": "This query returns a graph of the posts per hour of the last _x_ months (you can select _x_ with the parameter LastMonths).",
        "QueryBody": "SELECT \n  DATEPART(HOUR,CreationDate) AS Hour,\n  COUNT(Id) AS PostsCount\nFROM \n  Posts\nWHERE\n  (\n    DATEPART(yy,CreationDate) >= DATEPART(yy,DATEADD(m,-##LastMonths:int##,GETDATE()))\n    AND \n    datepart(m,CreationDate) >= DATEPART(m,DATEADD(m,-##LastMonths:int##,GETDATE()))\n  )\nGROUP BY\n  DATEPART(hour,CreationDate)",
        "CreationDate": "2013-04-06 12:02:20",
        "validated": false,
        "QueryBody_Original": "SELECT \n  DATEPART(HOUR,CreationDate) AS Hour,\n  COUNT(Id) AS PostsCount\nFROM \n  Posts\nWHERE\n  (\n    DATEPART(yy,CreationDate) >= DATEPART(yy,DATEADD(m,-##LastMonths:int##,GETDATE()))\n    AND \n    datepart(m,CreationDate) >= DATEPART(m,DATEADD(m,-##LastMonths:int##,GETDATE()))\n  )\nGROUP BY\n  DATEPART(hour,CreationDate)"
    },
    {
        "QuerySetId": 107073,
        "Title": "Top users by upvotes for a tag",
        "Description": "Lists the user display names and upvotes for a tag. Allows input of a threshold to filter the output.",
        "QueryBody": "DECLARE  @Tag nvarchar(25) = ##Tag:string##\nDECLARE @uvmin int = ##Threshold:int##\n\nSELECT\n    Users.Id AS [User Link],\n    COUNT(*) AS UpVotes,\n    COUNT(DISTINCT Votes.PostId) AS Answers\nFROM Tags\n    INNER JOIN PostTags ON PostTags.TagId = Tags.id\n    INNER JOIN Posts ON Posts.ParentId = PostTags.PostId\n    INNER JOIN Users ON Users.Id = Posts.OwnerUserID\n    INNER JOIN Votes ON Votes.PostId = Posts.Id and VoteTypeId = 2\nWHERE TagName = @Tag\n  AND UpVotes >= @uvmin\nGROUP BY Users.Id\nORDER BY UpVotes DESC",
        "CreationDate": "2015-03-16 16:00:38",
        "validated": false,
        "QueryBody_Original": "DECLARE  @Tag nvarchar(25) = ##Tag:string##\nDECLARE @uvmin int = ##Threshold:int##\n\nSELECT\n    Users.Id AS [User Link],\n    COUNT(*) AS UpVotes,\n    COUNT(DISTINCT Votes.PostId) AS Answers\nFROM Tags\n    INNER JOIN PostTags ON PostTags.TagId = Tags.id\n    INNER JOIN Posts ON Posts.ParentId = PostTags.PostId\n    INNER JOIN Users ON Users.Id = Posts.OwnerUserID\n    INNER JOIN Votes ON Votes.PostId = Posts.Id and VoteTypeId = 2\nWHERE TagName = @Tag\n  AND UpVotes >= @uvmin\nGROUP BY Users.Id\nORDER BY UpVotes DESC"
    },
    {
        "QuerySetId": 107108,
        "Title": "Average Answer Score for a User",
        "Description": "Shows the average score for a given user's answers, as well as their total number of answers and the average reputation (simple multiplication by 10) for convenience.\r\n",
        "QueryBody": "SELECT \n  COUNT(1) as [Number of Answers],\n  ROUND(AVG(CAST(a.Score as Decimal)), 4) as [Average Answer Score],\n  ROUND(AVG(CAST(a.Score as Decimal)), 4) * 10 as [Average Answer Reputation]\nFROM Posts a\nINNER JOIN\n  Posts q ON a.ParentId = q.Id\nWHERE a.OwnerUserId = ##UserId:int##",
        "CreationDate": "2013-04-08 10:15:34",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 107940,
        "Title": "My answers ordered by score",
        "Description": "My answers ordered by score\r\n",
        "QueryBody": "SELECT \n    a.Score, a.Body, q.Id, q.Title, q.CreationDate\nfrom\n    Posts q\n  inner join\n    Posts a\n  on a.postTypeId = 3\n  WHERE a.OwnerUserId = ##UserId##\norder by a.Score asc",
        "CreationDate": "2013-09-26 22:34:30",
        "validated": false,
        "QueryBody_Original": "SELECT \n    a.Score, a.Body, q.Id, q.Title, q.CreationDate\nfrom\n    Posts q\n  inner join\n    Posts a\n  on a.postTypeId = 3\n  WHERE a.OwnerUserId = ##UserId##\norder by a.Score asc"
    },
    {
        "QuerySetId": 107944,
        "Title": "My answers (with body) ordered by CreationDate",
        "Description": "My answers ordered by score\r\n",
        "QueryBody": "SELECT \n    q.Id, q.Title, q.CreationDate, q.Tags,q.Body,a.Body\nfrom\n    Posts q\n  inner join\n    Posts a\n  on q.Id = a.ParentId and a.postTypeId = 2 and q.postTypeId = 1\nwhere\n  a.OwnerUserId = ##UserId##\norder by q.CreationDate asc",
        "CreationDate": "2016-11-21 19:06:16",
        "validated": false,
        "QueryBody_Original": "SELECT \n    q.Id, q.Title, q.CreationDate, q.Tags,q.Body,a.Body\nfrom\n    Posts q\n  inner join\n    Posts a\n  on q.Id = a.ParentId and a.postTypeId = 2 and q.postTypeId = 1\nwhere\n  a.OwnerUserId = ##UserId##\norder by q.CreationDate asc"
    },
    {
        "QuerySetId": 108002,
        "Title": "Total Number of Posted Answer and Accepted Answer to a certain user",
        "Description": null,
        "QueryBody": "DECLARE  @UserID int = ##UserId##\nDECLARE @MinimumAnswerCount int = ##MinimumAnswerCount##\nDECLARE @MaximumAnswerCount int = ##MaximumAnswerCount##\n\nSELECT  b.OwnerUserId AS [User Link],\n        COUNT(*) PostedAnswer,\n        COUNT(CASE WHEN b.AcceptedAnswerId = a.ID THEN 1 END) AS AcceptedAnswer,\n        CASE \n            WHEN COUNT(*) = COUNT(CASE WHEN b.AcceptedAnswerId = a.ID THEN 1 END)\n            THEN 'Perfect!'\n            ELSE ''\n        END [Status]\nFROM\tPosts a\n\t\tINNER JOIN Posts b\n\t\t\tON a.ParentID = b.ID\nWHERE   a.PostTypeId = 2 AND\n\t\ta.OwnerUserID = @UserID AND\n        b.OwnerUserId <> ''\nGROUP   BY b.OwnerUserId\nHAVING  COUNT(*) BETWEEN @MinimumAnswerCount AND @MaximumAnswerCount\nORDER   BY  PostedAnswer DESC, \n            AcceptedAnswer DESC,\n            [User Link] ASC",
        "CreationDate": "2013-04-14 10:40:03",
        "validated": false,
        "QueryBody_Original": "DECLARE  @UserID int = ##UserId##\nDECLARE @MinimumAnswerCount int = ##MinimumAnswerCount##\nDECLARE @MaximumAnswerCount int = ##MaximumAnswerCount##\n\nSELECT  b.OwnerUserId AS [User Link],\n        COUNT(*) PostedAnswer,\n        COUNT(CASE WHEN b.AcceptedAnswerId = a.ID THEN 1 END) AS AcceptedAnswer,\n        CASE \n            WHEN COUNT(*) = COUNT(CASE WHEN b.AcceptedAnswerId = a.ID THEN 1 END)\n            THEN 'Perfect!'\n            ELSE ''\n        END [Status]\nFROM\tPosts a\n\t\tINNER JOIN Posts b\n\t\t\tON a.ParentID = b.ID\nWHERE   a.PostTypeId = 2 AND\n\t\ta.OwnerUserID = @UserID AND\n        b.OwnerUserId <> ''\nGROUP   BY b.OwnerUserId\nHAVING  COUNT(*) BETWEEN @MinimumAnswerCount AND @MaximumAnswerCount\nORDER   BY  PostedAnswer DESC, \n            AcceptedAnswer DESC,\n            [User Link] ASC"
    },
    {
        "QuerySetId": 108194,
        "Title": "Just testing, hope it doesn't save.",
        "Description": null,
        "QueryBody": "DECLARE  @UserId INT = 1745573\n\nSELECT Score, Text, PostId AS [Post Link]\nFROM Comments\nWHERE UserId = @UserId\n  AND Score >= 5\nORDER BY Score DESC, Text ASC;",
        "CreationDate": "2013-04-15 14:33:32",
        "validated": false,
        "QueryBody_Original": "DECLARE  @UserId INT = 1745573\n\nSELECT Score, Text, PostId AS [Post Link]\nFROM Comments\nWHERE UserId = @UserId\n  AND Score >= 5\nORDER BY Score DESC, Text ASC;"
    },
    {
        "QuerySetId": 108214,
        "Title": "What is my Archaeologist badge progress? - With the CORRECT UserId",
        "Description": null,
        "QueryBody": "DECLARE  @UserId INT = ##UserId##;\n\nSELECT COUNT(*) FROM Posts p\nWHERE p.OwnerUserId != @UserId -- Not my post originally\n  AND p.LastEditorUserId = @UserId -- But I edited it\n  AND p.LastActivityDate < DATEADD(month, -6, p.LastEditDate)\n      -- more than 6 months after it was last edited.",
        "CreationDate": "2013-04-18 00:07:03",
        "validated": false,
        "QueryBody_Original": "DECLARE  @UserId INT = ##UserId##;\n\nSELECT COUNT(*) FROM Posts p\nWHERE p.OwnerUserId != @UserId -- Not my post originally\n  AND p.LastEditorUserId = @UserId -- But I edited it\n  AND p.LastActivityDate < DATEADD(month, -6, p.LastEditDate)\n      -- more than 6 months after it was last edited."
    },
    {
        "QuerySetId": 109275,
        "Title": "How Unsung am I with 10 days?",
        "Description": "Zero and non-zero accepted count. Self-accepted answers do not count.\r\n",
        "QueryBody": "SELECT   \n     count(a.Id) as [Accepted Answers]\n   , sum(case when a.Score = 0 then 0 else 1 end) as [Scored Answers]\n   , sum(case when a.Score = 0 then 1 else 0 end) as [Unscored Answers]\n   , sum(CASE WHEN a.Score = 0 then 1 else 0 end)*1000 \/ count(a.Id) \/ 10.0 as [Percentage Unscored]\n   , max(a.creationdate) as LastActivity\nfrom\n    Posts q\n  inner join\n    Posts a\n  on a.Id = q.AcceptedAnswerId\nwhere\n      a.CommunityOwnedDate is null\n  and a.OwnerUserId = ##UserId##\n  and q.OwnerUserId != ##UserId##\n  and a.postTypeId = 2\n  and a.CreationDate < DATEADD(DAY, -10, GETDATE()) -- get only post 10 days ago",
        "CreationDate": "2013-04-23 13:46:27",
        "validated": false,
        "QueryBody_Original": "SELECT   \n     count(a.Id) as [Accepted Answers]\n   , sum(case when a.Score = 0 then 0 else 1 end) as [Scored Answers]\n   , sum(case when a.Score = 0 then 1 else 0 end) as [Unscored Answers]\n   , sum(CASE WHEN a.Score = 0 then 1 else 0 end)*1000 \/ count(a.Id) \/ 10.0 as [Percentage Unscored]\n   , max(a.creationdate) as LastActivity\nfrom\n    Posts q\n  inner join\n    Posts a\n  on a.Id = q.AcceptedAnswerId\nwhere\n      a.CommunityOwnedDate is null\n  and a.OwnerUserId = ##UserId##\n  and q.OwnerUserId != ##UserId##\n  and a.postTypeId = 2\n  and a.CreationDate < DATEADD(DAY, -10, GETDATE()) -- get only post 10 days ago"
    },
    {
        "QuerySetId": 109508,
        "Title": "How much rep would a user have without a specific post?",
        "Description": null,
        "QueryBody": "DECLARE  @pid int = 6841479\n\nDECLARE @uid int\nSELECT @uid = OwnerUserId FROM Posts p WHERE p.Id = @pid\n\n\nSELECT\n        v.CreationDate,\n        p.Id,\n        VoteTypeId\n        \n    FROM Votes v\n        JOIN Posts p ON p.Id = v.PostId\n    WHERE p.OwnerUserId = @uid and v.PostId = @pid\n    GROUP BY\n        v.CreationDate,\n        p.Id,\n        VoteTypeId",
        "CreationDate": "2014-03-06 07:02:42",
        "validated": false,
        "QueryBody_Original": "DECLARE  @pid int = 6841479\n\nDECLARE @uid int\nSELECT @uid = OwnerUserId FROM Posts p WHERE p.Id = @pid\n\n\nSELECT\n        v.CreationDate,\n        p.Id,\n        VoteTypeId\n        \n    FROM Votes v\n        JOIN Posts p ON p.Id = v.PostId\n    WHERE p.OwnerUserId = @uid and v.PostId = @pid\n    GROUP BY\n        v.CreationDate,\n        p.Id,\n        VoteTypeId"
    },
    {
        "QuerySetId": 109511,
        "Title": "Metrics - Site - Basic Counts",
        "Description": null,
        "QueryBody": "SELECT  count(1) as Posts from Posts;\nSELECT count(1) as Users from Users;\nSELECT count(1) as Comments from Comments;\nSELECT count(1) as Badges from Badges;\nSELECT count(1) as PostFeedback from PostFeedback;\nSELECT count(1) as PostHistory from PostHistory;\nSELECT count(1) as PostTags from PostTags;\nSELECT count(1) as SuggestedEdits from SuggestedEdits;\nSELECT count(1) as SuggestedEditVotes from SuggestedEditVotes;\nSELECT count(1) as Tags from Tags;\nSELECT count(1) as TagSynonyms from TagSynonyms;\nSELECT count(1) as Votes from Votes;\n\nSELECT PostType = , count(1) as Posts from Posts\n  group by PostTypeId\n  order by PostTypeId;\n*\/\n\nSELECT (SELECT count(1) from Posts) Posts, (SELECT count(1) from Users) Users;",
        "CreationDate": "2013-04-21 10:00:03",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 109557,
        "Title": "Metrics - Users - Accumulated PU Ratio by Quarter",
        "Description": null,
        "QueryBody": "DECLARE  @minVote numeric = 5;\n-- DECLARE @minPost numeric = 5;\n\nDECLARE @minVote numeric = ##minvote:int##;\nDECLARE @minPost numeric = ##minpost:int##;\n\nselect r as Registrated,\n       count(1) as Users,\n       sum(s) as Writers,\n       round(sum(s) * 100.0 \/ count(1), 2) as [Writers %]\nfrom (\n  select\n    u.Id,\n    (case\n       when sum(case\n               when p.PostTypeId = 2 and (p.Score >= @minVote) then 1\n               else 0\n             end) >= @minPost then 1\n       else 0\n     end) s,\n     (datepart(year, u.CreationDate) * 100\n       + datepart(q, u.CreationDate)) as r\n from Users u\n left join Posts p on p.OwnerUserId = u.Id\n group by u.Id, u.CreationDate\n) as X\ngroup by r\norder by r",
        "CreationDate": "2013-04-21 16:05:48",
        "validated": false,
        "QueryBody_Original": "DECLARE  @minVote numeric = 5;\n-- DECLARE @minPost numeric = 5;\n\nDECLARE @minVote numeric = ##minvote:int##;\nDECLARE @minPost numeric = ##minpost:int##;\n\nselect r as Registrated,\n       count(1) as Users,\n       sum(s) as Writers,\n       round(sum(s) * 100.0 \/ count(1), 2) as [Writers %]\nfrom (\n  select\n    u.Id,\n    (case\n       when sum(case\n               when p.PostTypeId = 2 and (p.Score >= @minVote) then 1\n               else 0\n             end) >= @minPost then 1\n       else 0\n     end) s,\n     (datepart(year, u.CreationDate) * 100\n       + datepart(q, u.CreationDate)) as r\n from Users u\n left join Posts p on p.OwnerUserId = u.Id\n group by u.Id, u.CreationDate\n) as X\ngroup by r\norder by r"
    },
    {
        "QuerySetId": 109558,
        "Title": "Metrics - User - Accumulated PU Ratio by Quarter",
        "Description": null,
        "QueryBody": "DECLARE  @minVote numeric = 5;\n-- DECLARE @minPost numeric = 5;\n\nDECLARE @minVote numeric = ##minvote:int##;\nDECLARE @minPost numeric = ##minpost:int##;\n\nselect r as Registered,\n       count(1) as Users,\n       sum(s) as Writers,\n       round(sum(s) * 100.0 \/ count(1), 2) as [Writers %]\nfrom (\n  select\n    u.Id,\n    (case\n       when sum(case\n               when p.PostTypeId = 2 and (p.Score >= @minVote) then 1\n               else 0\n             end) >= @minPost then 1\n       else 0\n     end) s,\n     (datepart(year, u.CreationDate) * 100\n       + datepart(q, u.CreationDate)) as r\n from Users u\n left join Posts p on p.OwnerUserId = u.Id\n group by u.Id, u.CreationDate\n) as X\ngroup by r\norder by r",
        "CreationDate": "2013-04-22 06:33:22",
        "validated": false,
        "QueryBody_Original": "DECLARE  @minVote numeric = 5;\n-- DECLARE @minPost numeric = 5;\n\nDECLARE @minVote numeric = ##minvote:int##;\nDECLARE @minPost numeric = ##minpost:int##;\n\nselect r as Registered,\n       count(1) as Users,\n       sum(s) as Writers,\n       round(sum(s) * 100.0 \/ count(1), 2) as [Writers %]\nfrom (\n  select\n    u.Id,\n    (case\n       when sum(case\n               when p.PostTypeId = 2 and (p.Score >= @minVote) then 1\n               else 0\n             end) >= @minPost then 1\n       else 0\n     end) s,\n     (datepart(year, u.CreationDate) * 100\n       + datepart(q, u.CreationDate)) as r\n from Users u\n left join Posts p on p.OwnerUserId = u.Id\n group by u.Id, u.CreationDate\n) as X\ngroup by r\norder by r"
    },
    {
        "QuerySetId": 109560,
        "Title": "Metrics - User - Accumulated PU ratio",
        "Description": null,
        "QueryBody": "DECLARE  @minVote numeric = ##minvote:int##;\nDECLARE @minPost numeric = ##minpost:int##;\n\nselect count(1) as Users,\n       sum(s) as Writers,\n       round(sum(s) * 100.0 \/ count(1), 2) as [Writers %]\nfrom (\n  select\n    u.Id,\n    (case\n       when sum(case\n               when p.PostTypeId = 2 and (p.Score >= @minVote) then 1\n               else 0\n             end) >= @minPost then 1\n       else 0\n     end) s,\n     (datepart(year, u.CreationDate) * 100\n       + datepart(q, u.CreationDate)) as r\n from Users u\n left join Posts p on p.OwnerUserId = u.Id\n group by u.Id, u.CreationDate\n) as X",
        "CreationDate": "2013-04-21 18:19:28",
        "validated": false,
        "QueryBody_Original": "DECLARE  @minVote numeric = ##minvote:int##;\nDECLARE @minPost numeric = ##minpost:int##;\n\nselect count(1) as Users,\n       sum(s) as Writers,\n       round(sum(s) * 100.0 \/ count(1), 2) as [Writers %]\nfrom (\n  select\n    u.Id,\n    (case\n       when sum(case\n               when p.PostTypeId = 2 and (p.Score >= @minVote) then 1\n               else 0\n             end) >= @minPost then 1\n       else 0\n     end) s,\n     (datepart(year, u.CreationDate) * 100\n       + datepart(q, u.CreationDate)) as r\n from Users u\n left join Posts p on p.OwnerUserId = u.Id\n group by u.Id, u.CreationDate\n) as X"
    },
    {
        "QuerySetId": 109616,
        "Title": "Users with answers having a score of X or more.",
        "Description": null,
        "QueryBody": "SELECT  TOP 50\n--  Id as [User Link], Reputation\n--FROM\n--  (SELECT OwnerUserId\n--  FROM Posts\n--  WHERE Score>0 and Id>0\n--  GROUP BY OwnerUserId\n--  HAVING count(*)>=##mincount:int##) as P,\n--  Users as U\n--WHERE Id=OwnerUserId\n--ORDER BY Reputation DESC\n\nSELECT * from\n  (SELECT Reputation,\n    rnasc = row_number() over(order by reputation),\n    rndesc = row_number() over(order by reputation desc)\n  FROM\n    (SELECT OwnerUserId\n      FROM Posts\n      WHERE Score>0 and Id>0\n      GROUP BY OwnerUserId\n      HAVING count(*)>=##mincount:int##) as P,\n    Users as U\n  WHERE Id=OwnerUserId) as B\nwhere abs(rnasc-rndesc)<=1",
        "CreationDate": "2015-06-15 22:00:19",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 109982,
        "Title": "Most recent posts that reached a score of X in the first Y days.",
        "Description": null,
        "QueryBody": "DECLARE  @minScore numeric = ##MinScore##\nDECLARE @ageDays numeric = 30\n\nSELECT TOP 1000\n    (CASE Posts.PostTypeId\n        WHEN 1 THEN 'Q'\n        WHEN 2 THEN 'A'\n     END),\n    Posts.Id AS [Post Link],\n    Posts.OwnerUserId AS [User Link],\n    Posts.CreationDate AS [Date],\n    Posts.Score AS [Score],\n    SUM(CASE\n        WHEN VoteTypeId = 2 THEN 1\n        WHEN VoteTypeId = 3 THEN -1\n    END) AS [Early Score]\nFROM\n    Votes\n  INNER JOIN\n    Posts ON Posts.Id = Votes.PostId\nWHERE DATEDIFF(DAY,Posts.CreationDate,Votes.CreationDate) <= @ageDays\nGROUP BY\n    Posts.Id,\n    Posts.OwnerUserId,\n    Posts.PostTypeId,\n    Posts.Score,\n    Posts.CreationDate\nHAVING\n    SUM(CASE\n        WHEN VoteTypeId = 2 THEN 1\n        WHEN VoteTypeId = 3 THEN -1\n    END) >= @minScore\nORDER BY [Date] DESC",
        "CreationDate": "2013-04-24 12:43:44",
        "validated": false,
        "QueryBody_Original": "DECLARE  @minScore numeric = ##MinScore##\nDECLARE @ageDays numeric = 30\n\nSELECT TOP 1000\n    (CASE Posts.PostTypeId\n        WHEN 1 THEN 'Q'\n        WHEN 2 THEN 'A'\n     END),\n    Posts.Id AS [Post Link],\n    Posts.OwnerUserId AS [User Link],\n    Posts.CreationDate AS [Date],\n    Posts.Score AS [Score],\n    SUM(CASE\n        WHEN VoteTypeId = 2 THEN 1\n        WHEN VoteTypeId = 3 THEN -1\n    END) AS [Early Score]\nFROM\n    Votes\n  INNER JOIN\n    Posts ON Posts.Id = Votes.PostId\nWHERE DATEDIFF(DAY,Posts.CreationDate,Votes.CreationDate) <= @ageDays\nGROUP BY\n    Posts.Id,\n    Posts.OwnerUserId,\n    Posts.PostTypeId,\n    Posts.Score,\n    Posts.CreationDate\nHAVING\n    SUM(CASE\n        WHEN VoteTypeId = 2 THEN 1\n        WHEN VoteTypeId = 3 THEN -1\n    END) >= @minScore\nORDER BY [Date] DESC"
    },
    {
        "QuerySetId": 110539,
        "Title": "List all Close-Votes of mine",
        "Description": null,
        "QueryBody": "SELECT  * FROM (\n  SELECT * FROM Votes WHERE Votes.UserId = ##UserId##\n) AS Myvotes \nWHERE \n  Myvotes.VoteTypeId <> 5\nORDER BY\n  Myvotes.BountyAmount DESC\n  , CreationDate DESC",
        "CreationDate": "2013-04-29 14:16:32",
        "validated": false,
        "QueryBody_Original": "SELECT  * FROM (\n  SELECT * FROM Votes WHERE Votes.UserId = ##UserId##\n) AS Myvotes \nWHERE \n  Myvotes.VoteTypeId <> 5\nORDER BY\n  Myvotes.BountyAmount DESC\n  , CreationDate DESC"
    },
    {
        "QuerySetId": 110574,
        "Title": "Stack Overflow questions with outstanding final close vote (PHP Tag)",
        "Description": "A list of Stack Overflow questions with outstanding close votes, sorted by number of votes.\r\n",
        "QueryBody": "WITH  outstanding close votes\n-- A list of Stack Overflow questions WITH outstanding close votes, sorted by number of votes.\n-- This variant displays only those questions WITH four or more closevotes\n\nselect * FROM\n(select\n  Posts.Id as [Post Link],\n  avg(Posts.Score) as [Score],\n  count(*) as [Close Votes],\n  max(Votes.CreationDate) as [Last Vote],\n  min(Votes.CreationDate) as [First Vote]  \nfrom Posts\ninner join Votes on Posts.Id=Votes.PostId\nwhere \n  Votes.VoteTypeId=6 and Posts.ClosedDate is NULL  \ngroup by Posts.Id\n) AS Myview \nwhere\n  [Close Votes] > 3\norder by [Last Vote] desc, [Score] asc, [Close Votes] desc",
        "CreationDate": "2014-02-01 10:56:14",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 110585,
        "Title": "Stack Overflow Closed, Low-Quality Questions Voted for Deletion (PHP Tag)",
        "Description": null,
        "QueryBody": "WITH  outstanding close votes\n-- A list of Stack Overflow questions WITH outstanding close votes, sorted by number of votes.\n-- This variant displays only those questions WITH four or more closevotes\n-- based on: http:\/\/data.stackexchange.com\/stackoverflow\/query\/110574\/\n\nselect * FROM\n(select\n  Posts.Id as [Post Link],\n  avg(Posts.Score) as [Score],\n  count(*) as [Close Votes],\n  max(Votes.CreationDate) as [Last Vote],\n  min(Votes.CreationDate) as [First Vote]  \nfrom Posts\ninner join Votes on Posts.Id=Votes.PostId\nwhere \n  Votes.VoteTypeId=10 and Posts.ClosedDate > 0 and Posts.Tags LIKE '%<php>%'  \ngroup by Posts.Id\n) AS Myview \nwhere\n  [Close Votes] < 3\n  and [Score] < 0\norder by \n  [Score] asc, \n  [Close Votes] desc, \n  [Last Vote] asc,\n  1",
        "CreationDate": "2013-04-29 17:08:53",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 111205,
        "Title": "How much rep from accepts?",
        "Description": null,
        "QueryBody": "DECLARE  @UserId int = ##UserId##\n\nSELECT ((SELECT Count(*) FROM Posts WHERE OwnerUserId = @UserId AND PostTypeId = 2) * 15) AS [Rep Gained]",
        "CreationDate": "2013-05-02 03:51:53",
        "validated": false,
        "QueryBody_Original": "DECLARE  @UserId int = ##UserId##\n\nSELECT ((SELECT Count(*) FROM Posts WHERE OwnerUserId = @UserId AND PostTypeId = 2) * 15) AS [Rep Gained]"
    },
    {
        "QuerySetId": 111295,
        "Title": "How much vote did I do ?",
        "Description": "See how much time you vote (Civic Duty badge)",
        "QueryBody": "DECLARE  @UserId int = ##UserId##\n\nSelect (UpVotes) AS votes from Users where Id = ##UserId##",
        "CreationDate": "2013-05-02 11:35:07",
        "validated": false,
        "QueryBody_Original": "DECLARE  @UserId int = ##UserId##\n\nSelect (UpVotes) AS votes from Users where Id = ##UserId##"
    },
    {
        "QuerySetId": 111474,
        "Title": "My answers to questions that have no accepted answer",
        "Description": "See http:\/\/meta.stackoverflow.com\/questions\/178806\/search-for-not-accepted-questions-within-my-answers",
        "QueryBody": "DECLARE  @UserId         INT     = ##UserId##;\n\nSELECT      A.score,\n            A.id AS [Post Link],\n            Q.LastActivityDate\nFROM        posts               A\nINNER JOIN  posts               Q\nON          Q.id                = A.parentid\nAND         Q.AcceptedAnswerId  IS NULL\nWHERE       A.posttypeid        = 2             -- Answers\nAND         A.owneruserid       = @UserId       -- By the specified user\nORDER BY    --A.score             DESC,\n            Q.LastActivityDate  DESC\n            --Q.Title             ASC",
        "CreationDate": "2013-05-03 15:23:51",
        "validated": false,
        "QueryBody_Original": "DECLARE  @UserId         INT     = ##UserId##;\n\nSELECT      A.score,\n            A.id AS [Post Link],\n            Q.LastActivityDate\nFROM        posts               A\nINNER JOIN  posts               Q\nON          Q.id                = A.parentid\nAND         Q.AcceptedAnswerId  IS NULL\nWHERE       A.posttypeid        = 2             -- Answers\nAND         A.owneruserid       = @UserId       -- By the specified user\nORDER BY    --A.score             DESC,\n            Q.LastActivityDate  DESC\n            --Q.Title             ASC"
    },
    {
        "QuerySetId": 112227,
        "Title": "Pundit badge: How many comments of an user have a score of 5 or more?",
        "Description": null,
        "QueryBody": "DECLARE  @UserId int = ##UserId##\n DECLARE @MinScore int = 5\n DECLARE @MinCountForPundit int = 10\n\n  SELECT PostId as [Post Link], c.Text, c.Score\n    FROM Comments c\n   WHERE c.UserId = @UserId and c.Score>=3\n   ORDER BY c.Score desc",
        "CreationDate": "2013-06-19 14:18:30",
        "validated": false,
        "QueryBody_Original": "DECLARE  @UserId int = ##UserId##\n DECLARE @MinScore int = 5\n DECLARE @MinCountForPundit int = 10\n\n  SELECT PostId as [Post Link], c.Text, c.Score\n    FROM Comments c\n   WHERE c.UserId = @UserId and c.Score>=3\n   ORDER BY c.Score desc"
    },
    {
        "QuerySetId": 112459,
        "Title": "Number of Views for all posts given a specific tag and duration",
        "Description": null,
        "QueryBody": "DECLARE  @MaxRep int = ##MaxReputation##\n\nselect    SUM(p.viewcount) \"No. views\", @MaxRep\n  from    Posts p\nLEFT JOIN Users u ON u.id = p.OwnerUserId\n  where   p.posttypeid = 1\n    and   u.Reputation > @MaxRep",
        "CreationDate": "2020-03-04 11:39:30",
        "validated": false,
        "QueryBody_Original": "DECLARE  @MaxRep int = ##MaxReputation##\n\nselect    SUM(p.viewcount) \"No. views\", @MaxRep\n  from    Posts p\nLEFT JOIN Users u ON u.id = p.OwnerUserId\n  where   p.posttypeid = 1\n    and   u.Reputation > @MaxRep"
    },
    {
        "QuerySetId": 112469,
        "Title": "Get all posts by deleted user",
        "Description": "This displays all posts and comments on Stack Overflow for a particular user.\r\n",
        "QueryBody": "SELECT  CreationDate, Id as [Post Link], Score, Body from Posts\nwhere OwnerDisplayName=##Name:string##\nAND\nScore <= 1\nAND\nAnswerCount = 0\norder by CreationDate ASC",
        "CreationDate": "2015-04-16 17:03:34",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 113040,
        "Title": "Skeet and I on the same page",
        "Description": null,
        "QueryBody": "DECLARE  @MyId int = ##UserId:int##;\nDECLARE @SkeetId int = ##SkeetId:int##; -- Skeet: 22656\n\n-- My comments\n--SELECT\n--  PostId\n--FROM\n--  Comments\n--WHERE\n--  UserId = @MyId\n\n-- Skeet's comments\n--SELECT\n--  PostId\n--FROM\n--  Comments\n--WHERE\n--  UserId = @SkeetId\n\n-- Joining comments queries\nSELECT\n  a.PostId AS [Post Link]\nFROM\n  (\n    SELECT\n      PostId\n    FROM\n      Comments\n    WHERE\n      UserId = @MyId\n  ) As a\n  INNER JOIN\n  (\n    SELECT\n      PostId\n    FROM\n      Comments\n    WHERE\n      UserId = @SkeetId\n  ) As b\n  ON a.PostId = b.PostId",
        "CreationDate": "2013-05-09 05:42:33",
        "validated": false,
        "QueryBody_Original": "DECLARE  @MyId int = ##UserId:int##;\nDECLARE @SkeetId int = ##SkeetId:int##; -- Skeet: 22656\n\n-- My comments\n--SELECT\n--  PostId\n--FROM\n--  Comments\n--WHERE\n--  UserId = @MyId\n\n-- Skeet's comments\n--SELECT\n--  PostId\n--FROM\n--  Comments\n--WHERE\n--  UserId = @SkeetId\n\n-- Joining comments queries\nSELECT\n  a.PostId AS [Post Link]\nFROM\n  (\n    SELECT\n      PostId\n    FROM\n      Comments\n    WHERE\n      UserId = @MyId\n  ) As a\n  INNER JOIN\n  (\n    SELECT\n      PostId\n    FROM\n      Comments\n    WHERE\n      UserId = @SkeetId\n  ) As b\n  ON a.PostId = b.PostId"
    },
    {
        "QuerySetId": 113479,
        "Title": "Interest in Microsoft Visual Studio LightSwitch",
        "Description": null,
        "QueryBody": "SELECT TopNRows command from SSMS  ******\/\nSELECT\n  (CONVERT(nvarchar(50), [Year]) +'-'+ RIGHT('0' + CONVERT(nvarchar(50), [Month]), 2)) AS [Month],\n  NumQuestions\nFROM(\n\tSELECT \n\t\tDATEPART(year, CreationDate) [Year],\n\t\tDATEPART(month, CreationDate) [Month],\n\t\tCOUNT(*) [NumQuestions]\n\tFROM [StackOverflow].[dbo].[Posts] with(nolock)\n\tWHERE Tags LIKE '%lightswitch%' AND PostTypeId = 1\n\tGROUP BY DATEPART(year, CreationDate), DATEPART(month, CreationDate)\n) X\nORDER BY 1 ASC",
        "CreationDate": "2013-05-10 21:39:55",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 113480,
        "Title": "Microsoft LightSwitch Questions Over Time",
        "Description": null,
        "QueryBody": "SELECT TopNRows command from SSMS  ******\/\nSELECT\n  (CONVERT(nvarchar(50), [Year]) +'-'+ RIGHT('0' + CONVERT(nvarchar(50), [Month]), 2)) AS [Month],\n  CountOfQuestions,\n  SumOfViews,\n  SumOfComments\nFROM(\n\tSELECT \n\t\tDATEPART(year, CreationDate) [Year],\n\t\tDATEPART(month, CreationDate) [Month],\n        SUM (ViewCount) [SumOfViews],\n\t\tCOUNT(*) [CountOfQuestions],\n        SUM (CommentCount) [SumOfComments]\n        \n\tFROM [StackOverflow].[dbo].[Posts] with(nolock)\n\tWHERE Tags LIKE '%lightswitch%' AND PostTypeId = 1\n\tGROUP BY DATEPART(year, CreationDate), \n        DATEPART(month, CreationDate) \n) X\nORDER BY 1 DESC",
        "CreationDate": "2013-05-10 21:51:56",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 113482,
        "Title": "Select all questions with ONLY a specific tag.",
        "Description": null,
        "QueryBody": "DECLARE  @Tag nvarchar(50) = lower('##Tag##')\nselect id as [Post Link] \nfrom posts \nwhere lower(tags) = '<' + @Tag + '>'",
        "CreationDate": "2013-05-10 22:28:04",
        "validated": false,
        "QueryBody_Original": "DECLARE  @Tag nvarchar(50) = lower('##Tag##')\nselect id as [Post Link] \nfrom posts \nwhere lower(tags) = '<' + @Tag + '>'"
    },
    {
        "QuerySetId": 113953,
        "Title": "# of Posts Migrated Here by Source",
        "Description": "Displays number of post migrated per site\r\n",
        "QueryBody": "SELECT  \ncomment, tagname\nFrom PostHistory, Tags\nWhere PostHistoryTypeId = 36 \n\n-- Surround your variable in single quotes: 'text'\nand comment like 'from http:\/\/' + ##site## +'%'\nand tagname like ##tag## \n\n\nGroup By comment, TagName\nOrder by 2 desc",
        "CreationDate": "2015-01-30 19:20:49",
        "validated": false,
        "QueryBody_Original": "SELECT  \ncomment, tagname\nFrom PostHistory, Tags\nWhere PostHistoryTypeId = 36 \n\n-- Surround your variable in single quotes: 'text'\nand comment like 'from http:\/\/' + ##site## +'%'\nand tagname like ##tag## \n\n\nGroup By comment, TagName\nOrder by 2 desc"
    },
    {
        "QuerySetId": 114249,
        "Title": "Users Min Reputation and Posts, but low Votes.",
        "Description": null,
        "QueryBody": "DECLARE  @MinRep DATETIME = convert(int, '##MinimumRep?500##')\nDECLARE @MinPostCount DATETIME = convert(int, '##MinPostCount?5##')\nDECLARE @MaxVotes DATETIME = convert(int, '##MaxVotes?0##')\n\nSELECT users.id AS [User Link],\n\treputation,\n\tupvotes + downvotes AS Votes,\n\tcount(Posts.id) AS [Posts count]\nFROM users\nINNER JOIN Posts\n\tON users.id = Posts.owneruserid\nWHERE upvotes + downvotes <= @MaxVotes\n\tAND reputation >= @MinRep\nGROUP BY users.id,\n\treputation,\n\tupvotes,\n\tdownvotes\nHAVING count(Posts.id) >= @MinPostCount\nORDER BY reputation DESC",
        "CreationDate": "2013-05-16 20:20:15",
        "validated": false,
        "QueryBody_Original": "DECLARE  @MinRep DATETIME = convert(int, '##MinimumRep?500##')\nDECLARE @MinPostCount DATETIME = convert(int, '##MinPostCount?5##')\nDECLARE @MaxVotes DATETIME = convert(int, '##MaxVotes?0##')\n\nSELECT users.id AS [User Link],\n\treputation,\n\tupvotes + downvotes AS Votes,\n\tcount(Posts.id) AS [Posts count]\nFROM users\nINNER JOIN Posts\n\tON users.id = Posts.owneruserid\nWHERE upvotes + downvotes <= @MaxVotes\n\tAND reputation >= @MinRep\nGROUP BY users.id,\n\treputation,\n\tupvotes,\n\tdownvotes\nHAVING count(Posts.id) >= @MinPostCount\nORDER BY reputation DESC"
    },
    {
        "QuerySetId": 114950,
        "Title": "uses of the word \"qua\"",
        "Description": null,
        "QueryBody": "DECLARE  @match varchar(20) = '%[_ *]qua[_ *]%';\n\nselect userid, text, id, 'comment' from comments where text like @match\nunion\nselect userid, text, id, 'posthistory text' from posthistory where text like @match\nunion\nselect userid, comment, id, 'posthistory comment' from posthistory where comment like @match\nunion\nselect owneruserid, text, id, 'suggestededit text' from suggestededits where text like @match\nunion\nselect owneruserid, title, id, 'suggestededit title' from suggestededits where title like @match",
        "CreationDate": "2013-05-20 22:09:45",
        "validated": false,
        "QueryBody_Original": "DECLARE  @match varchar(20) = '%[_ *]qua[_ *]%';\n\nselect userid, text, id, 'comment' from comments where text like @match\nunion\nselect userid, text, id, 'posthistory text' from posthistory where text like @match\nunion\nselect userid, comment, id, 'posthistory comment' from posthistory where comment like @match\nunion\nselect owneruserid, text, id, 'suggestededit text' from suggestededits where text like @match\nunion\nselect owneruserid, title, id, 'suggestededit title' from suggestededits where title like @match"
    },
    {
        "QuerySetId": 116332,
        "Title": "Historic of posts on Meta",
        "Description": null,
        "QueryBody": "SELECT  TOP 10 Id AS [TopAskers], Score, OwnerUserId FROM Posts\nWHERE PostTypeId = 1\nORDER BY Score DESC\n\n-- Best Answers\n\nSELECT TOP 10 Id AS [TopAnswerers], Score, OwnerUserId FROM Posts\nWHERE PostTypeId = 2\nORDER BY Score DESC\n\n\n-- Worst Questions\n\nSELECT TOP 10 Id [WorstAskers], Score, OwnerUserId FROM Posts\nWHERE PostTypeId = 1\nORDER BY Score \n\n-- Worst Answers\n\nSELECT TOP 10 Id AS [WorstAnswerers], Score, OwnerUserId FROM Posts\nWHERE PostTypeId = 2\nORDER BY Score",
        "CreationDate": "2013-05-27 08:01:08",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 116454,
        "Title": "Non-CW posts with most revisions counting towards limit",
        "Description": null,
        "QueryBody": "SELECT  Posts.Id as [Post Link], COUNT(DISTINCT RevisionGUID) AS Revisions FROM PostHistory\nJOIN Posts ON PostHistory.PostId = Posts.Id\nWHERE Posts.CommunityOwnedDate IS NULL\nAND Posts.OwnerUserId = ##UserId##\nAND PostHistory.PostHistoryTypeId IN (1,2,3,4,5,6,7,8,9)\nGROUP BY Posts.Id\nHAVING COUNT(DISTINCT RevisionGUID) > 2\nORDER BY COUNT(DISTINCT RevisionGUID) DESC",
        "CreationDate": "2013-05-27 23:52:02",
        "validated": false,
        "QueryBody_Original": "SELECT  Posts.Id as [Post Link], COUNT(DISTINCT RevisionGUID) AS Revisions FROM PostHistory\nJOIN Posts ON PostHistory.PostId = Posts.Id\nWHERE Posts.CommunityOwnedDate IS NULL\nAND Posts.OwnerUserId = ##UserId##\nAND PostHistory.PostHistoryTypeId IN (1,2,3,4,5,6,7,8,9)\nGROUP BY Posts.Id\nHAVING COUNT(DISTINCT RevisionGUID) > 2\nORDER BY COUNT(DISTINCT RevisionGUID) DESC"
    },
    {
        "QuerySetId": 117007,
        "Title": "My comments by score with post link",
        "Description": null,
        "QueryBody": "SELECT  PostId as [Post Link],\n    Text,\n    Score\nFROM \n    Comments\nWHERE \n    UserId = ##UserId##\nORDER BY \n    Score DESC",
        "CreationDate": "2013-05-31 16:24:25",
        "validated": false,
        "QueryBody_Original": "SELECT  PostId as [Post Link],\n    Text,\n    Score\nFROM \n    Comments\nWHERE \n    UserId = ##UserId##\nORDER BY \n    Score DESC"
    },
    {
        "QuerySetId": 117664,
        "Title": "nottingham users above 2k under 2.3k",
        "Description": null,
        "QueryBody": "DECLARE  @UserId int = ##UserId##\n\nSELECT --TOP 20 \n    TagName,\n    COUNT(*) AS UpVotes \nFROM Tags\n    INNER JOIN PostTags ON PostTags.TagId = Tags.id\n    INNER JOIN Posts ON Posts.ParentId = PostTags.PostId\n    INNER JOIN Votes ON Votes.PostId = Posts.Id and VoteTypeId = 2\nWHERE \n    Posts.OwnerUserId = @UserId\nGROUP BY TagName \nORDER BY UpVotes DESC\n*\/\n\n\nSELECT --TOP 20 \n    id \nFROM Users\nWHERE Reputation >2000\nAND Reputation < 2300\nAND Location like '%United Kingdom%'\nAND DisplayName like 'p%'",
        "CreationDate": "2013-06-03 15:59:48",
        "validated": false,
        "QueryBody_Original": "DECLARE  @UserId int = ##UserId##\n\nSELECT --TOP 20 \n    TagName,\n    COUNT(*) AS UpVotes \nFROM Tags\n    INNER JOIN PostTags ON PostTags.TagId = Tags.id\n    INNER JOIN Posts ON Posts.ParentId = PostTags.PostId\n    INNER JOIN Votes ON Votes.PostId = Posts.Id and VoteTypeId = 2\nWHERE \n    Posts.OwnerUserId = @UserId\nGROUP BY TagName \nORDER BY UpVotes DESC\n*\/\n\n\nSELECT --TOP 20 \n    id \nFROM Users\nWHERE Reputation >2000\nAND Reputation < 2300\nAND Location like '%United Kingdom%'\nAND DisplayName like 'p%'"
    },
    {
        "QuerySetId": 117881,
        "Title": "Chatter: User's comment word-count per week",
        "Description": null,
        "QueryBody": "SELECT \n  --p.Id as [Post Link],\n  sum(Len(c.Text) - len(replace(c.Text,' ','')) + 1) as WordCount\nfrom Comments as c\njoin Posts as p on c.PostId = p.Id\n\nwhere c.UserId = ##UserId## and p.OwnerUserId <> ##UserId##\n  --and c.Score = 0\n  \n  --group by c.Text",
        "CreationDate": "2013-06-05 01:34:27",
        "validated": false,
        "QueryBody_Original": "SELECT \n  --p.Id as [Post Link],\n  sum(Len(c.Text) - len(replace(c.Text,' ','')) + 1) as WordCount\nfrom Comments as c\njoin Posts as p on c.PostId = p.Id\n\nwhere c.UserId = ##UserId## and p.OwnerUserId <> ##UserId##\n  --and c.Score = 0\n  \n  --group by c.Text"
    },
    {
        "QuerySetId": 119332,
        "Title": "Edits qualifying for Archaeologist badge progress",
        "Description": null,
        "QueryBody": "SELECT  DISTINCT p.Id AS [Post ID], p.Id AS [Post Link], ph.CreationDate AS [Revision Date] \nFROM Posts p INNER JOIN PostHistory ph ON p.Id = ph.PostId\nWHERE (\n  ph.PostHistoryTypeId IN (4,5) AND\n  ph.UserID = ##UserID## AND\n  DATEADD(MONTH, 0, ph.CreationDate) > ALL (\n    SELECT pph.CreationDate FROM PostHistory pph WHERE (\n      ph.PostID = pph.PostID AND\n      ph.CreationDate > pph.CreationDate\n    )\n  )\n)\nORDER BY ph.CreationDate DESC",
        "CreationDate": "2020-10-23 23:41:40",
        "validated": false,
        "QueryBody_Original": "SELECT  DISTINCT p.Id AS [Post ID], p.Id AS [Post Link], ph.CreationDate AS [Revision Date] \nFROM Posts p INNER JOIN PostHistory ph ON p.Id = ph.PostId\nWHERE (\n  ph.PostHistoryTypeId IN (4,5) AND\n  ph.UserID = ##UserID## AND\n  DATEADD(MONTH, 0, ph.CreationDate) > ALL (\n    SELECT pph.CreationDate FROM PostHistory pph WHERE (\n      ph.PostID = pph.PostID AND\n      ph.CreationDate > pph.CreationDate\n    )\n  )\n)\nORDER BY ph.CreationDate DESC"
    },
    {
        "QuerySetId": 119449,
        "Title": "Accounts that are older but have higher user IDs",
        "Description": null,
        "QueryBody": "DECLARE  @UserId int = 1114\nDECLARE @CreationDate datetime\n\nSELECT @CreationDate = CreationDate FROM Users WHERE Id = @UserId\n\nSELECT 'Accounts that are older but have higher user IDs.', NULL, '', '', ''\nUNION ALL\nSELECT 'My CreationDate:', @CreationDate, '', '', ''\nUNION ALL\nSELECT 'My UserId:', NULL, @Userid, '', ''\n\nUNION ALL\nSELECT\n  DisplayName,\n  CreationDate,\n  Id,\n  Id as [User Link],\n  Reputation\nFROM Users WHERE CreationDate < @CreationDate AND Id > @UserId",
        "CreationDate": "2013-06-10 04:54:06",
        "validated": false,
        "QueryBody_Original": "DECLARE  @UserId int = 1114\nDECLARE @CreationDate datetime\n\nSELECT @CreationDate = CreationDate FROM Users WHERE Id = @UserId\n\nSELECT 'Accounts that are older but have higher user IDs.', NULL, '', '', ''\nUNION ALL\nSELECT 'My CreationDate:', @CreationDate, '', '', ''\nUNION ALL\nSELECT 'My UserId:', NULL, @Userid, '', ''\n\nUNION ALL\nSELECT\n  DisplayName,\n  CreationDate,\n  Id,\n  Id as [User Link],\n  Reputation\nFROM Users WHERE CreationDate < @CreationDate AND Id > @UserId"
    },
    {
        "QuerySetId": 119458,
        "Title": "What are my highest rated comments?",
        "Description": "What are my 25 comments for which I got the highest score, and their respective post IDs.",
        "QueryBody": "DECLARE  @UserId int = ##UserId##\n\nSELECT TOP 100\n    PostId AS [Post Link],\n    [Text],\n    Score\nFROM \n    Comments\nWHERE \n    UserId = @UserId\nORDER BY \n    Score DESC",
        "CreationDate": "2013-06-11 17:58:31",
        "validated": false,
        "QueryBody_Original": "DECLARE  @UserId int = ##UserId##\n\nSELECT TOP 100\n    PostId AS [Post Link],\n    [Text],\n    Score\nFROM \n    Comments\nWHERE \n    UserId = @UserId\nORDER BY \n    Score DESC"
    },
    {
        "QuerySetId": 119538,
        "Title": "Total score of one's answers",
        "Description": null,
        "QueryBody": "SELECT  sum(p.Score) FROM Posts p \nWHERE(\n  p.OwnerUserId = ##UserID## AND\n  p.PostTypeId = 1\n)",
        "CreationDate": "2013-07-06 11:13:38",
        "validated": false,
        "QueryBody_Original": "SELECT  sum(p.Score) FROM Posts p \nWHERE(\n  p.OwnerUserId = ##UserID## AND\n  p.PostTypeId = 1\n)"
    },
    {
        "QuerySetId": 119820,
        "Title": "Average vote counts by tag",
        "Description": null,
        "QueryBody": "DECLARE  @Tag nvarchar(50) = lower('##Tag##')\n\n  select\n    sum(Score) as [Total Score],\n    count(*) as [Total],\n    sum(Score) \/ count(*) as [Average Post Score]\n  from\n    Posts\n  where\n    Tags LIKE '%' + @Tag + '%'",
        "CreationDate": "2013-06-12 12:03:24",
        "validated": false,
        "QueryBody_Original": "DECLARE  @Tag nvarchar(50) = lower('##Tag##')\n\n  select\n    sum(Score) as [Total Score],\n    count(*) as [Total],\n    sum(Score) \/ count(*) as [Average Post Score]\n  from\n    Posts\n  where\n    Tags LIKE '%' + @Tag + '%'"
    },
    {
        "QuerySetId": 119880,
        "Title": "Get badges from a user",
        "Description": null,
        "QueryBody": "SELECT \n  posts.id, posts.creationdate,\n  Users.Id [User Link]\nFROM\n  posts\nJOIN Users\nON (posts.Id = Users.Id)\nWHERE\n  Users.Id = ##UserID##\n  \nORDER BY\n  posts.id",
        "CreationDate": "2013-06-19 01:01:03",
        "validated": false,
        "QueryBody_Original": "SELECT \n  posts.id, posts.creationdate,\n  Users.Id [User Link]\nFROM\n  posts\nJOIN Users\nON (posts.Id = Users.Id)\nWHERE\n  Users.Id = ##UserID##\n  \nORDER BY\n  posts.id"
    },
    {
        "QuerySetId": 120332,
        "Title": "Get all your questions, ordered by viewcounts.",
        "Description": null,
        "QueryBody": "DECLARE  @UID int = ##UserID##\n\nselect Id as [Post Link], ViewCount from Posts where OwnerUserId = @UID AND ViewCount IS NOT NULL order by ViewCount desc",
        "CreationDate": "2013-06-18 22:38:58",
        "validated": false,
        "QueryBody_Original": "DECLARE  @UID int = ##UserID##\n\nselect Id as [Post Link], ViewCount from Posts where OwnerUserId = @UID AND ViewCount IS NOT NULL order by ViewCount desc"
    },
    {
        "QuerySetId": 120358,
        "Title": "Most suggested edits that have been rejected by reviewers",
        "Description": null,
        "QueryBody": "SELECT  TOP ##Limit:int?100##\n  Users.Id [User Link],\n  COUNT(*) [Total],\n  SUM(CASE WHEN SuggestedEdits.ApprovalDate IS NOT NULL THEN 1 ELSE 0 END) [Accepted],\n  SUM(CASE WHEN SuggestedEdits.RejectionDate IS NOT NULL THEN 1 ELSE 0 END) [Rejected],\n  ROUND(SUM(CASE WHEN SuggestedEdits.RejectionDate IS NOT NULL THEN 1 ELSE 0 END) * 1.0 \/ COUNT(*) * 100, 2) [Rejected %]\nFROM Users, SuggestedEdits\nWHERE  \n      Users.Id = SuggestedEdits.OwnerUserId\n  AND Users.Id > 0\n  AND SuggestedEdits.CreationDate >= DATEADD(dd, -##MaxAgeDays:int?30##, GETDATE())\nGROUP BY Users.Id\nHAVING SUM(CASE WHEN SuggestedEdits.RejectionDate IS NOT NULL THEN 1 ELSE 0 END) >= ##MinRejectedEdits:int?2##\nORDER BY Rejected DESC, \"Rejected %\" DESC",
        "CreationDate": "2020-08-30 07:40:03",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 120840,
        "Title": "Search for answers by a specific user to questions by another user",
        "Description": null,
        "QueryBody": "SELECT  A.Id as [Post Link] \nFROM Posts A \nJOIN Posts Q ON A.ParentId = Q.Id \nWHERE Q.OwnerUserId = ##AskerId## \nAND A.OwnerUserId = ##AnswererId##\nAND A.Body LIKE ##SearchText:string##",
        "CreationDate": "2013-06-19 08:32:01",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 120916,
        "Title": "Average accept rate of answers",
        "Description": "Does not count self-answers.\r\nShows users with at least @MinAnswers answers.\r\n",
        "QueryBody": "DECLARE  @MinAnswers int = ##MinAnswers##\n\nSELECT\navg(AcceptedPercent)\nFROM\n(\nSELECT\n  u.Id AS [User Link],\n  count(*) AS NumAnswers,\n  sum(case when q.AcceptedAnswerId = a.Id then 1 else 0 end) AS NumAccepted,\n  (sum(case when q.AcceptedAnswerId = a.Id then 1 else 0 end)*100.0\/count(*)) AS AcceptedPercent\nFROM Posts a\nINNER JOIN Users u ON u.Id = a.OwnerUserId\nINNER JOIN Posts q ON a.ParentId = q.Id\nWHERE \n  (q.OwnerUserId <> u.Id OR q.OwnerUserId IS NULL)   --no self answers\nGROUP BY u.Id\nHAVING count(*) >= @MinAnswers\n) X",
        "CreationDate": "2013-06-20 00:07:16",
        "validated": false,
        "QueryBody_Original": "DECLARE  @MinAnswers int = ##MinAnswers##\n\nSELECT\navg(AcceptedPercent)\nFROM\n(\nSELECT\n  u.Id AS [User Link],\n  count(*) AS NumAnswers,\n  sum(case when q.AcceptedAnswerId = a.Id then 1 else 0 end) AS NumAccepted,\n  (sum(case when q.AcceptedAnswerId = a.Id then 1 else 0 end)*100.0\/count(*)) AS AcceptedPercent\nFROM Posts a\nINNER JOIN Users u ON u.Id = a.OwnerUserId\nINNER JOIN Posts q ON a.ParentId = q.Id\nWHERE \n  (q.OwnerUserId <> u.Id OR q.OwnerUserId IS NULL)   --no self answers\nGROUP BY u.Id\nHAVING count(*) >= @MinAnswers\n) X"
    },
    {
        "QuerySetId": 121138,
        "Title": "A day accounted for \"How Unsung Am I?\"",
        "Description": null,
        "QueryBody": "SELECT \n    COUNT(answer.Id) as [Accepted Answers],\n    SUM(CASE WHEN answer.Score = 0 THEN 0 ELSE 1 END) AS [Scored Answers],  \n    SUM(CASE WHEN answer.Score = 0 THEN 1 ELSE 0 END) AS [Unscored Answers],\n    SUM(CASE WHEN answer.Score = 0 THEN 1 ELSE 0 END)*1000 \/ COUNT(answer.Id) \/ 10.0 AS [Percentage Unscored]\nFROM\n    Posts question\n    INNER JOIN\n        Posts answer\n    ON \n        answer.Id = question.AcceptedAnswerId\nWHERE\n    answer.CommunityOwnedDate is NULL\n    AND answer.OwnerUserId = ##UserId##\n    AND question.OwnerUserId != ##UserId##\n    AND answer.postTypeId = 2\n    AND answer.CreationDate < GETDATE()",
        "CreationDate": "2019-02-14 14:53:16",
        "validated": false,
        "QueryBody_Original": "SELECT \n    COUNT(answer.Id) as [Accepted Answers],\n    SUM(CASE WHEN answer.Score = 0 THEN 0 ELSE 1 END) AS [Scored Answers],  \n    SUM(CASE WHEN answer.Score = 0 THEN 1 ELSE 0 END) AS [Unscored Answers],\n    SUM(CASE WHEN answer.Score = 0 THEN 1 ELSE 0 END)*1000 \/ COUNT(answer.Id) \/ 10.0 AS [Percentage Unscored]\nFROM\n    Posts question\n    INNER JOIN\n        Posts answer\n    ON \n        answer.Id = question.AcceptedAnswerId\nWHERE\n    answer.CommunityOwnedDate is NULL\n    AND answer.OwnerUserId = ##UserId##\n    AND question.OwnerUserId != ##UserId##\n    AND answer.postTypeId = 2\n    AND answer.CreationDate < GETDATE()"
    },
    {
        "QuerySetId": 121332,
        "Title": "Average post length (last X days)",
        "Description": null,
        "QueryBody": "SELECT  sum(len(Body))\nfrom Posts\nwhere OwnerUserId = ##UserId##\n      and datediff(day, CreationDate, getdate()) < ##Days##",
        "CreationDate": "2014-12-24 13:51:07",
        "validated": false,
        "QueryBody_Original": "SELECT  sum(len(Body))\nfrom Posts\nwhere OwnerUserId = ##UserId##\n      and datediff(day, CreationDate, getdate()) < ##Days##"
    },
    {
        "QuerySetId": 121674,
        "Title": "How Close Am I to Unsung Hero Badge (Including 10 days requirement)?",
        "Description": "Zero and non-zero accepted count. Self-accepted answers do not count.\r\n",
        "QueryBody": "SELECT \n    count(a.Id) as [Accepted Answers],\n    sum(case when a.Score = 0 then 0 else 1 end) as [Scored Answers],  \n    sum(case when a.Score = 0 then 1 else 0 end) as [Unscored Answers],\n    sum(CASE WHEN a.Score = 0 then 1 else 0 end)*1000 \/ count(a.Id) \/ 10.0 as [Percentage Unscored]\nfrom\n    Posts q\n  inner join\n    Posts a\n  on a.Id = q.AcceptedAnswerId\nwhere\n      a.CommunityOwnedDate is null\n  and a.OwnerUserId = ##UserId##\n  and q.OwnerUserId != ##UserId##\n  and a.postTypeId = 2\n -- and a.CreationDate < DATEADD(d, -10, GETDATE())",
        "CreationDate": "2020-10-28 08:27:24",
        "validated": false,
        "QueryBody_Original": "SELECT \n    count(a.Id) as [Accepted Answers],\n    sum(case when a.Score = 0 then 0 else 1 end) as [Scored Answers],  \n    sum(case when a.Score = 0 then 1 else 0 end) as [Unscored Answers],\n    sum(CASE WHEN a.Score = 0 then 1 else 0 end)*1000 \/ count(a.Id) \/ 10.0 as [Percentage Unscored]\nfrom\n    Posts q\n  inner join\n    Posts a\n  on a.Id = q.AcceptedAnswerId\nwhere\n      a.CommunityOwnedDate is null\n  and a.OwnerUserId = ##UserId##\n  and q.OwnerUserId != ##UserId##\n  and a.postTypeId = 2\n -- and a.CreationDate < DATEADD(d, -10, GETDATE())"
    },
    {
        "QuerySetId": 121680,
        "Title": "Project support on Stack Overflow",
        "Description": null,
        "QueryBody": "DECLARE  @TagName varchar(128) = '%##TagName##%'\n\n    SELECT COUNT(*) from Posts P\n    WHERE P.Id IN (\n      SELECT DISTINCT(PostId) from PostTags \n      WHERE PostTags.TagId In (\n        SELECT Id From Tags Where TagName LIKE @TagName\n      )\n    )\n\n    SELECT COUNT(*) from Posts P\n    WHERE P.Id IN (\n      SELECT DISTINCT(PostId) from PostTags \n      WHERE PostTags.TagId In (\n        SELECT Id From Tags Where TagName LIKE @TagName\n      )\n    ) AND P.AcceptedAnswerId IS NOT NULL\n\n    SELECT SUM(P.AnswerCount) from Posts P\n    WHERE P.Id IN (\n      SELECT DISTINCT(PostId) from PostTags \n      WHERE PostTags.TagId In (\n        SELECT Id From Tags Where TagName LIKE @TagName\n      )\n    )",
        "CreationDate": "2013-06-24 02:35:58",
        "validated": false,
        "QueryBody_Original": "DECLARE  @TagName varchar(128) = '%##TagName##%'\n\n    SELECT COUNT(*) from Posts P\n    WHERE P.Id IN (\n      SELECT DISTINCT(PostId) from PostTags \n      WHERE PostTags.TagId In (\n        SELECT Id From Tags Where TagName LIKE @TagName\n      )\n    )\n\n    SELECT COUNT(*) from Posts P\n    WHERE P.Id IN (\n      SELECT DISTINCT(PostId) from PostTags \n      WHERE PostTags.TagId In (\n        SELECT Id From Tags Where TagName LIKE @TagName\n      )\n    ) AND P.AcceptedAnswerId IS NOT NULL\n\n    SELECT SUM(P.AnswerCount) from Posts P\n    WHERE P.Id IN (\n      SELECT DISTINCT(PostId) from PostTags \n      WHERE PostTags.TagId In (\n        SELECT Id From Tags Where TagName LIKE @TagName\n      )\n    )"
    },
    {
        "QuerySetId": 122297,
        "Title": "Recent comments on posts by a deleted user",
        "Description": null,
        "QueryBody": "SELECT  p.Id as [Post Link], c.Text AS Comment, c.CreationDate FROM Posts p\nINNER JOIN Comments c\nON c.PostId=p.Id\nWHERE p.OwnerDisplayName=##Name:string##\nORDER BY c.CreationDate DESC",
        "CreationDate": "2013-06-29 19:28:28",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 122298,
        "Title": "Recent comments on posts by a user",
        "Description": null,
        "QueryBody": "SELECT  p.Id as [Post Link], c.Text AS Comment, c.CreationDate FROM Posts p\nINNER JOIN Comments c\nON c.PostId=p.Id\nWHERE p.OwnerUserId=##Id##\nORDER BY c.CreationDate DESC",
        "CreationDate": "2013-06-29 19:32:39",
        "validated": false,
        "QueryBody_Original": "SELECT  p.Id as [Post Link], c.Text AS Comment, c.CreationDate FROM Posts p\nINNER JOIN Comments c\nON c.PostId=p.Id\nWHERE p.OwnerUserId=##Id##\nORDER BY c.CreationDate DESC"
    },
    {
        "QuerySetId": 122340,
        "Title": "Where did I meet this user (only comments)",
        "Description": null,
        "QueryBody": "SELECT  *\nfrom\n(SELECT *\nfrom\n(SELECT \n    (CASE WHEN PostTypeId = 2 THEN ParentId ELSE P.Id END) as Id\nfrom Posts as P\n    join Comments as C1 on C1.PostId = P.Id\n    left join Comments as C2 on C2.PostId = P.Id\n    where (P.PostTypeId = 1 or P.PostTypeId = 2)\n    and (\n    (P.OwnerUserId = ##UserId## and C1.UserId = ##OtherUser##) or \n    (P.OwnerUserId = ##OtherUser## and C1.UserId = ##UserId##) or \n    (C1.UserId = ##UserId## and C2.UserId = ##OtherUser##)\n    )\n    ) as t\ngroup by Id\n) as t join Posts as Q on t.Id = Q.Id",
        "CreationDate": "2013-06-30 02:29:24",
        "validated": false,
        "QueryBody_Original": "SELECT  *\nfrom\n(SELECT *\nfrom\n(SELECT \n    (CASE WHEN PostTypeId = 2 THEN ParentId ELSE P.Id END) as Id\nfrom Posts as P\n    join Comments as C1 on C1.PostId = P.Id\n    left join Comments as C2 on C2.PostId = P.Id\n    where (P.PostTypeId = 1 or P.PostTypeId = 2)\n    and (\n    (P.OwnerUserId = ##UserId## and C1.UserId = ##OtherUser##) or \n    (P.OwnerUserId = ##OtherUser## and C1.UserId = ##UserId##) or \n    (C1.UserId = ##UserId## and C2.UserId = ##OtherUser##)\n    )\n    ) as t\ngroup by Id\n) as t join Posts as Q on t.Id = Q.Id"
    },
    {
        "QuerySetId": 122341,
        "Title": "Where did I meet this user",
        "Description": "Questions at which the two users met\r\n\r\nOne of the following cases happenned:\r\n- one posted question, the other one answer\r\n- both posted two concurrent answers\r\n- one commented one the other one's post\r\n- both commented on the same post\r\n\r\nSo we don't involve cases when e.g. one user comments answer on the other user's question.\r\n",
        "QueryBody": "SELECT  Q.Title, T.Id\nfrom (\n\nSELECT *\nfrom\n(SELECT \n    (CASE WHEN PostTypeId = 2 THEN ParentId ELSE P.Id END) as Id\nfrom Posts as P\n    join Comments as C1 on C1.PostId = P.Id\n    left join Comments as C2 on C2.PostId = P.Id\n    where (P.PostTypeId = 1 or P.PostTypeId = 2)\n    and (\n        (P.OwnerUserId = ##UserId## and C1.UserId = ##OtherUser##) or \n        (P.OwnerUserId = ##OtherUser## and C1.UserId = ##UserId##) or \n        (C1.UserId = ##UserId## and C2.UserId = ##OtherUser##)\n    )\n) as t\ngroup by Id\n) as t\njoin Posts as Q on t.Id = Q.Id",
        "CreationDate": "2013-06-30 02:43:18",
        "validated": false,
        "QueryBody_Original": "SELECT  Q.Title, T.Id\nfrom (\n\nSELECT *\nfrom\n(SELECT \n    (CASE WHEN PostTypeId = 2 THEN ParentId ELSE P.Id END) as Id\nfrom Posts as P\n    join Comments as C1 on C1.PostId = P.Id\n    left join Comments as C2 on C2.PostId = P.Id\n    where (P.PostTypeId = 1 or P.PostTypeId = 2)\n    and (\n        (P.OwnerUserId = ##UserId## and C1.UserId = ##OtherUser##) or \n        (P.OwnerUserId = ##OtherUser## and C1.UserId = ##UserId##) or \n        (C1.UserId = ##UserId## and C2.UserId = ##OtherUser##)\n    )\n) as t\ngroup by Id\n) as t\njoin Posts as Q on t.Id = Q.Id"
    },
    {
        "QuerySetId": 122418,
        "Title": "Questions by a deleted user without an accepted answer",
        "Description": null,
        "QueryBody": "SELECT  CreationDate, Id as [Post Link], Body from Posts \nwhere OwnerDisplayName=##Name:string## AND PostTypeId=1 AND AcceptedAnswerId IS NULL\norder by CreationDate ASC",
        "CreationDate": "2013-07-01 16:23:27",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 122421,
        "Title": "Questions by a deleted user, with an accepted answer",
        "Description": null,
        "QueryBody": "SELECT  CreationDate, Id as [Post Link], Body from Posts \nwhere OwnerDisplayName=##Name:string## AND PostTypeId=1 AND AcceptedAnswerId IS NOT NULL\norder by CreationDate ASC",
        "CreationDate": "2013-07-01 16:31:11",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 122424,
        "Title": "My median and average answer score at given date",
        "Description": "Reports median and average answer score. The MedianAnswerScore2 is more precise version of median.",
        "QueryBody": "SELECT  \n    Count(Posts.Id) AS Answers,\n    (SELECT MAX(Score) \n     FROM (SELECT TOP 50 percent Score\n           FROM Posts as PU\n           WHERE PostTypeId = 2 and CommunityOwnedDate IS NULL and PU.OwnerUserId = ##UserId##\n           ORDER BY Score\n           ) as t\n     ) AS MedianAnswerScore\nFROM\n    Posts\nWHERE \n    PostTypeId = 2 and CommunityOwnedDate IS NULL and OwnerUserId = ##UserId##",
        "CreationDate": "2013-07-01 16:42:12",
        "validated": false,
        "QueryBody_Original": "SELECT  \n    Count(Posts.Id) AS Answers,\n    (SELECT MAX(Score) \n     FROM (SELECT TOP 50 percent Score\n           FROM Posts as PU\n           WHERE PostTypeId = 2 and CommunityOwnedDate IS NULL and PU.OwnerUserId = ##UserId##\n           ORDER BY Score\n           ) as t\n     ) AS MedianAnswerScore\nFROM\n    Posts\nWHERE \n    PostTypeId = 2 and CommunityOwnedDate IS NULL and OwnerUserId = ##UserId##"
    },
    {
        "QuerySetId": 122495,
        "Title": "Top 100 Answers for a User",
        "Description": null,
        "QueryBody": "DECLARE  @UserId int = ##UserId##\nDECLARE @NumberPosts int = ##NumberPosts##\n\nSELECT\n    TOP 100\n    Other.Title AS \"Question Title\",\n    Other.Body AS \"Question Body\",\n    Answers.Body AS \"Answer\"\nFROM Posts AS Answers\n    INNER JOIN Posts AS Other ON Answers.ParentId = Other.Id\nWHERE Answers.OwnerUserId = @UserId AND Answers.ParentId <> 0\nORDER BY Answers.Score DESC",
        "CreationDate": "2013-07-02 05:56:18",
        "validated": false,
        "QueryBody_Original": "DECLARE  @UserId int = ##UserId##\nDECLARE @NumberPosts int = ##NumberPosts##\n\nSELECT\n    TOP 100\n    Other.Title AS \"Question Title\",\n    Other.Body AS \"Question Body\",\n    Answers.Body AS \"Answer\"\nFROM Posts AS Answers\n    INNER JOIN Posts AS Other ON Answers.ParentId = Other.Id\nWHERE Answers.OwnerUserId = @UserId AND Answers.ParentId <> 0\nORDER BY Answers.Score DESC"
    },
    {
        "QuerySetId": 122812,
        "Title": "Get tags ordered by most posted",
        "Description": null,
        "QueryBody": "SELECT  OuterTags.TagName AS TagName,\n       STUFF((\n\n\n              SELECT ',' + Tags.TagName\n              FROM PostTags\n                INNER JOIN Tags\n                  ON Tags.Id = PostTags.TagId\n              WHERE \n                PostTags.PostId IN \n                (\n                  --Gets all the PostIds that have this tag\n                  SELECT DISTINCT PostId\n                  FROM PostTags\n                    INNER JOIN Tags\n                      ON Tags.Id = PostTags.TagId\n                  WHERE Tags.TagName = OuterTags.TagName\n                )\n                AND Tags.TagName <> OuterTags.TagName\n              GROUP BY Tags.TagName\n              ORDER BY COUNT(*) DESC\n              FOR XML PATH('')\n\n              \n       ), 1, 1, '' ) AS Synonyms\nFROM Tags AS OuterTags",
        "CreationDate": "2013-07-05 14:46:51",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 123291,
        "Title": "Users By moderation privileges ",
        "Description": null,
        "QueryBody": "DECLARE  @numUsers float\n\nSELECT @numUsers = COUNT(*) FROM Users\n\n---\nSELECT canUpvote, (canUpvote \/ @numUsers) FROM \n(SELECT COUNT(*) as canUpvote\nFROM Users\nWHERE Reputation >= 1) as tmp\n\n--- \nSELECT canUpvote, (canUpvote \/ @numUsers) FROM \n(SELECT COUNT(*) as canUpvote\nFROM Users\nWHERE Reputation >= 15) as tmp\n\n---\nSELECT canDownvote, (canDownvote \/ @numUsers) FROM \n(SELECT COUNT(*) as canDownvote\nFROM Users\nWHERE Reputation >= 125) as tmp\n\n--- \nSELECT canEdit, (canEdit \/ @numUsers) FROM \n(SELECT COUNT(*) as canEdit\nFROM Users\nWHERE Reputation >= 2000) as tmp\n\n---\nSELECT likeMe, (likeMe \/ @numUsers) FROM \n(SELECT COUNT(*) as likeMe\nFROM Users\nWHERE Reputation >= 3153) as tmp",
        "CreationDate": "2014-06-16 17:58:40",
        "validated": false,
        "QueryBody_Original": "DECLARE  @numUsers float\n\nSELECT @numUsers = COUNT(*) FROM Users\n\n---\nSELECT canUpvote, (canUpvote \/ @numUsers) FROM \n(SELECT COUNT(*) as canUpvote\nFROM Users\nWHERE Reputation >= 1) as tmp\n\n--- \nSELECT canUpvote, (canUpvote \/ @numUsers) FROM \n(SELECT COUNT(*) as canUpvote\nFROM Users\nWHERE Reputation >= 15) as tmp\n\n---\nSELECT canDownvote, (canDownvote \/ @numUsers) FROM \n(SELECT COUNT(*) as canDownvote\nFROM Users\nWHERE Reputation >= 125) as tmp\n\n--- \nSELECT canEdit, (canEdit \/ @numUsers) FROM \n(SELECT COUNT(*) as canEdit\nFROM Users\nWHERE Reputation >= 2000) as tmp\n\n---\nSELECT likeMe, (likeMe \/ @numUsers) FROM \n(SELECT COUNT(*) as likeMe\nFROM Users\nWHERE Reputation >= 3153) as tmp"
    },
    {
        "QuerySetId": 123441,
        "Title": "Answers in a given period",
        "Description": null,
        "QueryBody": "SELECT  \n  Count(*)\nFROM \n  Posts, Users\nWHERE\n  Posts.OwnerUserID = Users.Id\n  -- and Posts.PostTypeID = 3\n  and Users.Id = ##UserID##\n  and Posts.CreationDate BETWEEN '##StartDate##' and '##EndDate##'",
        "CreationDate": "2013-07-09 02:55:02",
        "validated": false,
        "QueryBody_Original": "SELECT  \n  Count(*)\nFROM \n  Posts, Users\nWHERE\n  Posts.OwnerUserID = Users.Id\n  -- and Posts.PostTypeID = 3\n  and Users.Id = ##UserID##\n  and Posts.CreationDate BETWEEN '##StartDate##' and '##EndDate##'"
    },
    {
        "QuerySetId": 123705,
        "Title": "Top users answering questions for specific tag",
        "Description": null,
        "QueryBody": "SELECT  OwnerUserId as [User Link], count(*) as Count\nfrom Posts\nwhere ParentId in \n  (\n  SELECT Id\n  from Posts\n  where tags like '%' + ##tag:string## + '%'\n    and PostTypeId = 1\n    and LastActivityDate > DATEADD(year,-1,GETDATE())\n  )\ngroup by OwnerUserId\norder by Count desc",
        "CreationDate": "2013-07-10 18:11:40",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 124006,
        "Title": "Posts Made Wiki By Me",
        "Description": null,
        "QueryBody": "SELECT \n   ph.PostID [Post Link]\nFROM PostHistory ph\n  WHERE ph.PostHistoryTypeId = 16 -- Wiki\n  AND ph.UserID = ##UserID##",
        "CreationDate": "2013-07-11 18:51:28",
        "validated": false,
        "QueryBody_Original": "SELECT \n   ph.PostID [Post Link]\nFROM PostHistory ph\n  WHERE ph.PostHistoryTypeId = 16 -- Wiki\n  AND ph.UserID = ##UserID##"
    },
    {
        "QuerySetId": 124798,
        "Title": "What is my accepted answer percentage",
        "Description": null,
        "QueryBody": "DECLARE  @UserId int = 659804\n\nSELECT \n    (CAST(Count(a.Id) AS float) \/ (SELECT Count(*) FROM Posts WHERE OwnerUserId = @UserId AND PostTypeId = 2) * 100) AS AcceptedPercentage\nFROM\n    Posts q\n  INNER JOIN\n    Posts a ON q.AcceptedAnswerId = a.Id\nWHERE\n    a.OwnerUserId = @UserId\n  AND\n    a.PostTypeId = 2",
        "CreationDate": "2013-07-20 07:42:20",
        "validated": false,
        "QueryBody_Original": "DECLARE  @UserId int = 659804\n\nSELECT \n    (CAST(Count(a.Id) AS float) \/ (SELECT Count(*) FROM Posts WHERE OwnerUserId = @UserId AND PostTypeId = 2) * 100) AS AcceptedPercentage\nFROM\n    Posts q\n  INNER JOIN\n    Posts a ON q.AcceptedAnswerId = a.Id\nWHERE\n    a.OwnerUserId = @UserId\n  AND\n    a.PostTypeId = 2"
    },
    {
        "QuerySetId": 124827,
        "Title": "All Questions and their Answers for tag 'java'",
        "Description": null,
        "QueryBody": "DECLARE  @tagId int;\n\nselect  @tagId = Id\nfrom    Tags\nwhere   TagName = 'xamarin';\n\n\n  select p1.* \n  from posts p1 \n  where \n    p1.ParentId in (\n      select p.Id \n      from posts p join PostTags pt on pt.PostId = p.Id \n      where \n        p.PostTypeId = 1 and \n        pt.TagId = @tagId  \n      )\n    and p1.PostTypeId = 2",
        "CreationDate": "2016-07-05 21:58:36",
        "validated": false,
        "QueryBody_Original": "DECLARE  @tagId int;\n\nselect  @tagId = Id\nfrom    Tags\nwhere   TagName = 'xamarin';\n\n\n  select p1.* \n  from posts p1 \n  where \n    p1.ParentId in (\n      select p.Id \n      from posts p join PostTags pt on pt.PostId = p.Id \n      where \n        p.PostTypeId = 1 and \n        pt.TagId = @tagId  \n      )\n    and p1.PostTypeId = 2"
    },
    {
        "QuerySetId": 124846,
        "Title": "Answers made Community Wiki by non-OP author in the past n weeks",
        "Description": "Doesn't include posts which were automatically wikified due to \r\n1) question having 30 answers and above\r\n2) answer being posted to a wikified question;\r\n\r\ndoesn't include closed questions ",
        "QueryBody": "SELECT \n   P.Id [Post Link], U.Reputation, U.CreationDate\nFROM Posts P\nINNER JOIN Users U\n   ON P.OwnerUserId = U.Id\nINNER JOIN Posts Q\n   ON P.ParentID = Q.Id\nWHERE P.PostTypeId = 2\n  and P.CommunityOwnedDate >= DATEADD(wk, -##WeeksAgo##, GETDATE())\n  and Q.ClosedDate is NULL\n  and Q.AnswerCount < 30\n  and Q.CommunityOwnedDate is NULL\n  and P.OwnerUserId <> Q.OwnerUserId\nORDER BY U.Reputation DESC",
        "CreationDate": "2013-07-22 19:09:19",
        "validated": false,
        "QueryBody_Original": "SELECT \n   P.Id [Post Link], U.Reputation, U.CreationDate\nFROM Posts P\nINNER JOIN Users U\n   ON P.OwnerUserId = U.Id\nINNER JOIN Posts Q\n   ON P.ParentID = Q.Id\nWHERE P.PostTypeId = 2\n  and P.CommunityOwnedDate >= DATEADD(wk, -##WeeksAgo##, GETDATE())\n  and Q.ClosedDate is NULL\n  and Q.AnswerCount < 30\n  and Q.CommunityOwnedDate is NULL\n  and P.OwnerUserId <> Q.OwnerUserId\nORDER BY U.Reputation DESC"
    },
    {
        "QuerySetId": 124865,
        "Title": "My posts in reverse chronological order",
        "Description": null,
        "QueryBody": "SELECT \n    p.Id as [Post Link],*\nfrom\n    Posts p \nwhere\n      p.OwnerUserId=##UserId## \norder by p.CreationDate desc",
        "CreationDate": "2013-08-24 00:04:13",
        "validated": false,
        "QueryBody_Original": "SELECT \n    p.Id as [Post Link],*\nfrom\n    Posts p \nwhere\n      p.OwnerUserId=##UserId## \norder by p.CreationDate desc"
    },
    {
        "QuerySetId": 124924,
        "Title": "Average score on a tag by day of week",
        "Description": null,
        "QueryBody": "SELECT  avg(100*Score)\/100.0 as AvgScore,datename(dw,CreationDate) as DayOfWeek,count(Id) as NumPosts\nFROM Posts\nwhere Tags like '%##Tag##%' and Score<##MaxScore##\ngroup by datename(dw,CreationDate)\norder by avg(100*Score)\/100.0 DESC;",
        "CreationDate": "2013-07-22 00:06:27",
        "validated": false,
        "QueryBody_Original": "SELECT  avg(100*Score)\/100.0 as AvgScore,datename(dw,CreationDate) as DayOfWeek,count(Id) as NumPosts\nFROM Posts\nwhere Tags like '%##Tag##%' and Score<##MaxScore##\ngroup by datename(dw,CreationDate)\norder by avg(100*Score)\/100.0 DESC;"
    },
    {
        "QuerySetId": 125081,
        "Title": "Talent Search Based on Location and Tags",
        "Description": "Useful query to find talents around a location with specified skill (via Tags). Returns Users with Age and Location, including Score (question and answer) based on Tags, ordered by Reputation.",
        "QueryBody": "SELECT  u.id as [User Link]\n     , sum(score) as totalscore\nfrom posts p\ninner join posttags pt on pt.postid = p.id \n                       or pt.postid = p.parentid\ninner join tags t on t.id = pt.tagid\ninner join users u on u.id = p.owneruserid\nwhere tagname = ##tag1:string## collate SQL_Latin1_General_CP1_CI_AI \nand location like '%'+ ##location:string## + '%'  collate SQL_Latin1_General_CP1_CI_AI \ngroup by u.id\norder by sum(score) desc",
        "CreationDate": "2015-11-02 13:32:09",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 125427,
        "Title": "Questions with close votes cast more than 4 days ago with <100 views",
        "Description": null,
        "QueryBody": "WITH  is unnecessary, I'm just testing the syntax\n\nWITH t as\n( \n  select p.id\n  from posts p\n  inner join votes v on v.postid = p.id\n  where v.votetypeid = 6 --close votes\n    and p.viewcount < 100 -- less than 100 views\n    and p.closeddate is null -- not closed yet\n    and v.creationdate < dateadd(d, -4, getdate())\n)\n\nselect count(distinct id)\nfrom t",
        "CreationDate": "2013-07-24 19:49:06",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 125786,
        "Title": "get all answer from jon skeet",
        "Description": "Gets all the question that have been answered by jon skeet",
        "QueryBody": "SELECT  * \nfrom Users\nwhere id = 22656)*\/\nSELECT * \nfrom Comments\nwhere userid = 22656",
        "CreationDate": "2013-07-26 00:07:29",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 126253,
        "Title": "Find posts where you offered more than one bounty",
        "Description": null,
        "QueryBody": "SELECT  PostId as [Post Link], Count(*) As Bounties From Votes\nWhere VoteTypeId=8 --BountyStart\nAnd UserId=##UserId##\nGroup By PostId\nOrder By Bounties Desc",
        "CreationDate": "2013-07-28 12:28:52",
        "validated": false,
        "QueryBody_Original": "SELECT  PostId as [Post Link], Count(*) As Bounties From Votes\nWhere VoteTypeId=8 --BountyStart\nAnd UserId=##UserId##\nGroup By PostId\nOrder By Bounties Desc"
    },
    {
        "QuerySetId": 126440,
        "Title": "posts because OP can't man page",
        "Description": null,
        "QueryBody": "SELECT  \n  COUNT(P.Id) RTFMP, \n (SELECT COUNT(B.Id) FROM Posts B WHERE B.PostTypeId=1 AND B.AcceptedAnswerId IS NOT NULL) 'All Questions'\nFROM Posts P JOIN Posts A ON P.Id=A.AcceptedAnswerId\nWHERE\n  A.Body LIKE '%manpages%' OR\n  A.Body LIKE '%man pages%'",
        "CreationDate": "2013-07-30 02:50:58",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 126484,
        "Title": "Highest Scoring Comments by User",
        "Description": "Finds the highest-scoring comments by a user.",
        "QueryBody": "SELECT  TOP 1000\n  Id AS [Comment Link],\n  PostId AS [Post Link],\n  CreationDate AS [Comment Date],\n  Score\nFROM Comments\nWHERE ##UserId:int## = UserId AND Score > 0\nORDER BY\n  Score DESC,\n  CreationDate DESC",
        "CreationDate": "2013-09-01 15:33:19",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 126623,
        "Title": "Upvotes from users with reputation 101",
        "Description": null,
        "QueryBody": "WITH  reputation 101\nSELECT Users.Id AS [User Link], Upvotes, CreationDate, LastAccessDate\nFROM Users\nWHERE (Reputation<102) AND (UpVotes>0)\nORDER BY Upvotes DESC",
        "CreationDate": "2013-12-22 10:00:55",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 126624,
        "Title": "Upvotes by users with low reputation",
        "Description": null,
        "QueryBody": "WITH  low reputation\nSELECT\n  SUM(Upvotes) AS [All upvotes]\nFROM Users\nORDER BY [All upvotes] DESC",
        "CreationDate": "2017-06-01 08:05:37",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 126743,
        "Title": "Get Reputation of Users Whose Questions You've Answered",
        "Description": "This query will look for all your answers, and get the Users and Reputations of the Users whose questions you've answered.",
        "QueryBody": "SELECT \n  X.*, u.Reputation\nfrom\n  (\n  SELECT \n    q.OwnerUserId as [User Link]\n  from\n    Posts a\n    join Posts q on q.Id = a.ParentId\n  where\n    a.PostTypeId = 2 \n    AND a.OwnerUserId = ##UserId##\n  ) As X\njoin Users u on u.Id = [User Link]",
        "CreationDate": "2013-07-31 10:45:56",
        "validated": false,
        "QueryBody_Original": "SELECT \n  X.*, u.Reputation\nfrom\n  (\n  SELECT \n    q.OwnerUserId as [User Link]\n  from\n    Posts a\n    join Posts q on q.Id = a.ParentId\n  where\n    a.PostTypeId = 2 \n    AND a.OwnerUserId = ##UserId##\n  ) As X\njoin Users u on u.Id = [User Link]"
    },
    {
        "QuerySetId": 127075,
        "Title": "Get Questions by ##User1## and ##User2## in [php] Tag",
        "Description": null,
        "QueryBody": "SELECT \n  X.*, [User Link]\nfrom\n  (\n  SELECT \n    p.Id as [Post Link], p.OwnerUserId as [User Link]\n  from\n    Posts p\n    JOIN PostTags pt ON pt.PostId = p.ParentId\n    JOIN Tags t ON t.Id = pt.TagId\n  where\n    ( p.OwnerUserId = ##UserId1:string##\n    OR p.OwnerUserId = ##UserId2:string## )\n \n\n  ) As X\njoin Users u on u.Id = [User Link]",
        "CreationDate": "2020-06-17 14:06:28",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 127510,
        "Title": "Show votes on my questions",
        "Description": null,
        "QueryBody": "SELECT \n  Posts.Id,\n  Posts.Title,\n  Posts.Score,  \n  CASE Votes.VoteTypeId\n    WHEN 2 THEN 'up'\n    WHEN 3 THEN 'down'\n    WHEN 15 THEN 'mod review'\n    WHEN 16 THEN 'approve edit'\n    ELSE CONCAT('<', Votes.VoteTypeId, '>')\n  END AS VoteType\n      \nFROM\n  Posts\nJOIN\n  Votes ON Posts.Id = Votes.PostId\n\nWHERE\n  Posts.OwnerUserId = ##UserId##\n  AND Posts.PostTypeId = 1\n\nORDER BY Posts.LastActivityDate DESC",
        "CreationDate": "2013-08-06 22:01:25",
        "validated": false,
        "QueryBody_Original": "SELECT \n  Posts.Id,\n  Posts.Title,\n  Posts.Score,  \n  CASE Votes.VoteTypeId\n    WHEN 2 THEN 'up'\n    WHEN 3 THEN 'down'\n    WHEN 15 THEN 'mod review'\n    WHEN 16 THEN 'approve edit'\n    ELSE CONCAT('<', Votes.VoteTypeId, '>')\n  END AS VoteType\n      \nFROM\n  Posts\nJOIN\n  Votes ON Posts.Id = Votes.PostId\n\nWHERE\n  Posts.OwnerUserId = ##UserId##\n  AND Posts.PostTypeId = 1\n\nORDER BY Posts.LastActivityDate DESC"
    },
    {
        "QuerySetId": 127565,
        "Title": "How close am I to the Sportsmanship badge?",
        "Description": "Count number of votes on competing answers",
        "QueryBody": "DECLARE  @UserId int = ##UserId##;\n\nwith UserPosts as (\n  select\n    Id as PostId\n  from\n    Posts\n  where\n    OwnerUserId = @UserId and\n    CommunityOwnedDate is null and\n    PostTypeId = 2 and\n    Score >= 1\n)\n\nselect\n  distinct UserPosts.PostId\n--  count(unique UserPosts.PostId) as UpVotes\nfrom\n  UserPosts\n  inner join Votes on Votes.PostId = UserPosts.PostId\nwhere\n  VoteTypeId = 2",
        "CreationDate": "2013-08-18 23:38:44",
        "validated": false,
        "QueryBody_Original": "DECLARE  @UserId int = ##UserId##;\n\nwith UserPosts as (\n  select\n    Id as PostId\n  from\n    Posts\n  where\n    OwnerUserId = @UserId and\n    CommunityOwnedDate is null and\n    PostTypeId = 2 and\n    Score >= 1\n)\n\nselect\n  distinct UserPosts.PostId\n--  count(unique UserPosts.PostId) as UpVotes\nfrom\n  UserPosts\n  inner join Votes on Votes.PostId = UserPosts.PostId\nwhere\n  VoteTypeId = 2"
    },
    {
        "QuerySetId": 128121,
        "Title": "Who has marked my questions as favourite",
        "Description": null,
        "QueryBody": "DECLARE  @UserId int = ##UserId##\n\nselect a.UserId AS [User Link],\n       b.Id AS [Post Link]\n  from Votes a\n inner join Posts b on a.PostId = b.Id\n where a.VoteTypeId = 5\n   and b.PostTypeId = 1\n   and b.OwnerUserId = @UserId;",
        "CreationDate": "2013-08-08 11:41:06",
        "validated": false,
        "QueryBody_Original": "DECLARE  @UserId int = ##UserId##\n\nselect a.UserId AS [User Link],\n       b.Id AS [Post Link]\n  from Votes a\n inner join Posts b on a.PostId = b.Id\n where a.VoteTypeId = 5\n   and b.PostTypeId = 1\n   and b.OwnerUserId = @UserId;"
    },
    {
        "QuerySetId": 128122,
        "Title": "My Voted Comments grouped by score",
        "Description": "How many comments do I have for each score.\r\n",
        "QueryBody": "DECLARE  @UserId int = ##UserId##\n\nSELECT \nScore, COUNT(1)\nFROM \n    Comments\nWHERE \n    UserId = @UserId\nGROUP BY Score\nORDER BY \n    Score DESC",
        "CreationDate": "2013-11-04 14:44:32",
        "validated": false,
        "QueryBody_Original": "DECLARE  @UserId int = ##UserId##\n\nSELECT \nScore, COUNT(1)\nFROM \n    Comments\nWHERE \n    UserId = @UserId\nGROUP BY Score\nORDER BY \n    Score DESC"
    },
    {
        "QuerySetId": 129374,
        "Title": "CV Users with most interesting answers",
        "Description": null,
        "QueryBody": "SELECT  MAX(score) [Max Score], count(p.id) [Good Answers], \n       (SELECT count(*) from posts p2 \n       where p2.posttypeid=2 and p2.owneruserid = u.id) [Total Answers],\n       u.Reputation, \n       --u.displayname,\n      'site:\/\/users\/' + CAST(u.Id AS nvarchar)\n                      + '?tab=answers&sort=votes|' \n                      + u.displayname  cv_user,\n       u.Age, u.Location, u.WebsiteURL,\n       LastAccessDate\nFROM users u, posts p\nWHERE u.id = p.owneruserid\nAND p.posttypeid = 2  -- answers only\nAND p.score >= ##scoreThreshhold?25##\nAND p.parentid NOT IN \n(1337 -- jokes\n,726  -- quotes\n,423  -- cartoons\n,5115 -- statisticians\n)\nGROUP BY reputation, u.displayname,\n       u.age, u.location, u.websiteurl, u.lastaccessdate, u.id\nORDER BY count(p.id) desc, max(score) desc",
        "CreationDate": "2013-08-14 18:23:26",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 129640,
        "Title": "How many upvotes do I have for each tag and what is my progress towards specialist badges?",
        "Description": "How long before I get tag badges?  \r\n\r\nBronze, silver and gold tag badges require respectively 100, 400 and 1,000 upvotes for a given tag.\r\n\r\nNote that Community Wiki answers do not count towards the badges.\r\n",
        "QueryBody": "DECLARE  @UserId int = ##UserId##\n\n--DECLARE @QueryResult CURSOR FOR\nSELECT --TOP 20 \n    TagName,\n    COUNT(*) AS [UpVotes],\n    ROUND(100.0 * COUNT(*) \/ 100, 0) AS [Bronze (%)],\n    ROUND(100.0 * COUNT(*) \/ 400, 0) AS [Silver (%)],\n    ROUND(100.0 * COUNT(*) \/ 1000, 0) AS [Gold (%)]\nFROM Tags\n    INNER JOIN PostTags ON PostTags.TagId = Tags.id\n    INNER JOIN Posts ON Posts.ParentId = PostTags.PostId\n    INNER JOIN Votes ON Votes.PostId = Posts.Id and VoteTypeId = 2\nWHERE \n    Posts.OwnerUserId = @UserId\n    AND Posts.CommunityOwnedDate IS NULL\nGROUP BY TagName \nORDER BY UpVotes DESC\n--OPEN @QueryResult",
        "CreationDate": "2013-08-14 04:08:21",
        "validated": false,
        "QueryBody_Original": "DECLARE  @UserId int = ##UserId##\n\n--DECLARE @QueryResult CURSOR FOR\nSELECT --TOP 20 \n    TagName,\n    COUNT(*) AS [UpVotes],\n    ROUND(100.0 * COUNT(*) \/ 100, 0) AS [Bronze (%)],\n    ROUND(100.0 * COUNT(*) \/ 400, 0) AS [Silver (%)],\n    ROUND(100.0 * COUNT(*) \/ 1000, 0) AS [Gold (%)]\nFROM Tags\n    INNER JOIN PostTags ON PostTags.TagId = Tags.id\n    INNER JOIN Posts ON Posts.ParentId = PostTags.PostId\n    INNER JOIN Votes ON Votes.PostId = Posts.Id and VoteTypeId = 2\nWHERE \n    Posts.OwnerUserId = @UserId\n    AND Posts.CommunityOwnedDate IS NULL\nGROUP BY TagName \nORDER BY UpVotes DESC\n--OPEN @QueryResult"
    },
    {
        "QuerySetId": 129835,
        "Title": "Number of questions tagged with Jetbrains",
        "Description": null,
        "QueryBody": "DECLARE  @base int;\nselect @base = Count FROM Tags WHERE TagName like '%fhir%';\n\n\nselect TagName as Tag, Count from Tags\nwhere TagName like '%fhir%'",
        "CreationDate": "2019-04-02 17:53:00",
        "validated": false,
        "QueryBody_Original": "DECLARE  @base int;\nselect @base = Count FROM Tags WHERE TagName like '%fhir%';\n\n\nselect TagName as Tag, Count from Tags\nwhere TagName like '%fhir%'"
    },
    {
        "QuerySetId": 130210,
        "Title": "Average Answerer's Age (among the tags answered by more than X users with age filled)",
        "Description": null,
        "QueryBody": "DECLARE  @minimumCount int = ##minimumCount##\nSELECT  TagName AS Tags, AVG(Age * 1.0) AS [Average Answerer's Age], COUNT(*) AS [Number of Answerers]\nFROM    (\n        SELECT  DISTINCT pa.OwnerUserId, pt.TagId\n        FROM    Users u\n        JOIN    Posts pa\n        ON      pa.OwnerUserId = U.Id\n        JOIN    Posts pq\n        ON      pq.Id = pa.ParentId\n        JOIN    PostTags pt\n        ON      pt.PostId = pq.Id\n        ) ut\nJOIN    Tags t\nON      t.Id = ut.TagId\nJOIN    Users u\nON      u.Id = ut.OwnerUserId\nWHERE   u.Age BETWEEN 10 AND 90\nGROUP BY\n        t.Id, t.TagName\nHAVING  COUNT(*) > @minimumCount\nORDER BY\n        2 DESC",
        "CreationDate": "2013-08-15 09:54:45",
        "validated": false,
        "QueryBody_Original": "DECLARE  @minimumCount int = ##minimumCount##\nSELECT  TagName AS Tags, AVG(Age * 1.0) AS [Average Answerer's Age], COUNT(*) AS [Number of Answerers]\nFROM    (\n        SELECT  DISTINCT pa.OwnerUserId, pt.TagId\n        FROM    Users u\n        JOIN    Posts pa\n        ON      pa.OwnerUserId = U.Id\n        JOIN    Posts pq\n        ON      pq.Id = pa.ParentId\n        JOIN    PostTags pt\n        ON      pt.PostId = pq.Id\n        ) ut\nJOIN    Tags t\nON      t.Id = ut.TagId\nJOIN    Users u\nON      u.Id = ut.OwnerUserId\nWHERE   u.Age BETWEEN 10 AND 90\nGROUP BY\n        t.Id, t.TagName\nHAVING  COUNT(*) > @minimumCount\nORDER BY\n        2 DESC"
    },
    {
        "QuerySetId": 130546,
        "Title": "Self-answered questions based on user id",
        "Description": null,
        "QueryBody": "SELECT  q.Id as [Post Link]\nfrom posts p\ninner join posts q\n        on q.Id = p.ParentId\nwhere p.OwnerUserId = q.OwnerUserId\n  and p.OwnerUserId = ##UserId##",
        "CreationDate": "2013-08-16 15:43:55",
        "validated": false,
        "QueryBody_Original": "SELECT  q.Id as [Post Link]\nfrom posts p\ninner join posts q\n        on q.Id = p.ParentId\nwhere p.OwnerUserId = q.OwnerUserId\n  and p.OwnerUserId = ##UserId##"
    },
    {
        "QuerySetId": 131389,
        "Title": "Finding Posts tagged only with one given tag",
        "Description": null,
        "QueryBody": "WITH  one given tag\nSELECT Posts.Id, Posts.Id  AS [Post Link]\nFROM Posts\nWHERE Tags='<##tagname##>'\nORDER BY Posts.LastEditDate",
        "CreationDate": "2020-03-07 20:12:18",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 131765,
        "Title": "Show the number of posts posted by users with <50 rep at least n weeks ago",
        "Description": null,
        "QueryBody": "DECLARE  @threshold datetime = DateAdd(wk, -##weekNum##, GetDate()); \n\nselect count(*)\n  from Posts p\n  inner join Users u\n          on p.OwnerUserId = u.Id\n  where p.PostTypeId = 1\n    and u.Reputation <= 50\n    and p.CreationDate < @threshold",
        "CreationDate": "2013-08-20 23:13:10",
        "validated": false,
        "QueryBody_Original": "DECLARE  @threshold datetime = DateAdd(wk, -##weekNum##, GetDate()); \n\nselect count(*)\n  from Posts p\n  inner join Users u\n          on p.OwnerUserId = u.Id\n  where p.PostTypeId = 1\n    and u.Reputation <= 50\n    and p.CreationDate < @threshold"
    },
    {
        "QuerySetId": 131957,
        "Title": "All questions with Bounty from last month",
        "Description": null,
        "QueryBody": "SELECT  * FROM Votes LEFT JOIN Posts on (Votes.PostId = Posts.Id) WHERE BountyAmount > 0 AND Tags like 'android' ORDER BY LastActivityDate desc\nSELECT TOP 10 * from Posts left join Votes on Votes.PostId = Posts.ID where tags like '%android%' and BountyAmount > 0 order by Posts.CreationDate desc",
        "CreationDate": "2018-10-07 23:22:46",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 131964,
        "Title": "Most edited posts per user",
        "Description": "Shows the edited posts by user\r\n",
        "QueryBody": "SELECT  TOP 50 \n  Posts.Id as [Post Link],\n  Posts.Score,\n  sum(case PostHistory.PostHistoryTypeId when 5 then 1 else 0 end) as Edits,\n  Posts.CommunityOwnedDate as Wiki\n  FROM Posts LEFT JOIN PostHistory\n    ON Posts.Id = PostHistory.PostId\n  WHERE Posts.OwnerUserId = ##UserID:int##\n  GROUP BY Posts.Id, Posts.CommunityOwnedDate, Posts.Score\n  ORDER BY Edits desc",
        "CreationDate": "2013-08-22 13:13:36",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 132487,
        "Title": "My posts (only links) in reverse chronological order",
        "Description": null,
        "QueryBody": "SELECT \n    p.Id as [Post Link]\nfrom\n    Posts p \nwhere\n      p.OwnerUserId=##UserId## \norder by p.CreationDate desc",
        "CreationDate": "2013-08-24 00:28:13",
        "validated": false,
        "QueryBody_Original": "SELECT \n    p.Id as [Post Link]\nfrom\n    Posts p \nwhere\n      p.OwnerUserId=##UserId## \norder by p.CreationDate desc"
    },
    {
        "QuerySetId": 132711,
        "Title": "How many edits have you made towards the archaeologist badge?",
        "Description": null,
        "QueryBody": "SELECT  TOP 10\nph.UserId as [User Link], count(DISTINCT p.Id) as Number\nFROM Posts p\nINNER JOIN PostHistory ph ON p.Id = ph.PostId\nWHERE p.OwnerUserId != ph.UserId\nAND ph.PostHistoryTypeId IN (4,5)\nAND ph.UserId != -1\nAND DATEADD(MONTH, -6, ph.CreationDate) > ALL (\n    SELECT pph.CreationDate FROM PostHistory pph WHERE (\n      ph.PostID = pph.PostID AND\n      ph.CreationDate > pph.CreationDate\n    )\n  )\nGROUP BY ph.UserId\nORDER BY Number DESC",
        "CreationDate": "2015-09-01 11:13:48",
        "validated": false,
        "QueryBody_Original": "SELECT  TOP 10\nph.UserId as [User Link], count(DISTINCT p.Id) as Number\nFROM Posts p\nINNER JOIN PostHistory ph ON p.Id = ph.PostId\nWHERE p.OwnerUserId != ph.UserId\nAND ph.PostHistoryTypeId IN (4,5)\nAND ph.UserId != -1\nAND DATEADD(MONTH, -6, ph.CreationDate) > ALL (\n    SELECT pph.CreationDate FROM PostHistory pph WHERE (\n      ph.PostID = pph.PostID AND\n      ph.CreationDate > pph.CreationDate\n    )\n  )\nGROUP BY ph.UserId\nORDER BY Number DESC"
    },
    {
        "QuerySetId": 132951,
        "Title": "Find my questions and answers with imgur in the body",
        "Description": null,
        "QueryBody": "WITH  imgur in the body\n-- Due to a migration to i.stack.imgur.com, some images are broken.  \n-- This query lists all posts so another script can try all images (HEAD) and report invalid images\n\nselect id [Post Link], Body, CreationDate \nfrom posts\nwhere owneruserid = ##UserID## AND\nBody LIKE '%.gif%' AND\nBody NOT LIKE '%http:\/\/i.imgur.com\/%' AND\nBody NOT LIKE '%http:\/\/i.stack.imgur.com\/%'",
        "CreationDate": "2013-09-03 00:28:06",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 133043,
        "Title": "SQL Questions with open bounty >= 150",
        "Description": null,
        "QueryBody": "SELECT  TOP 200 p.Id as [Post Link],\n               p.Tags,\n               vob.BountyAmount AS [Bounty],\n               LEFT(vob.CreationDate, 6) AS [Bounty],\n               LEFT(p.CreationDate, 11) AS [Asked],\n               ISNULL(p.AnswerCount, 0) AS [A],\n               vob.*\nFROM Posts p\nJOIN Votes vob\nON vob.PostId = p.Id AND vob.VoteTypeId = 8\nWHERE p.ClosedDate IS NULL\nAND vob.BountyAmount >= 150\nAND DATEADD(d, 7, vob.CreationDate) >= GETDATE()\nAND p.Tags LIKE '%sql%'\nAND NOT EXISTS (SELECT *\n                FROM Votes vcb\n                WHERE vcb.PostId = p.Id AND vcb.VoteTypeId = 9)\nORDER BY ISNULL(p.AnswerCount, 0) ASC,\n         vob.BountyAmount DESC,\n         vob.CreationDate DESC",
        "CreationDate": "2016-02-16 21:58:21",
        "validated": false,
        "QueryBody_Original": "SELECT  TOP 200 p.Id as [Post Link],\n               p.Tags,\n               vob.BountyAmount AS [Bounty],\n               LEFT(vob.CreationDate, 6) AS [Bounty],\n               LEFT(p.CreationDate, 11) AS [Asked],\n               ISNULL(p.AnswerCount, 0) AS [A],\n               vob.*\nFROM Posts p\nJOIN Votes vob\nON vob.PostId = p.Id AND vob.VoteTypeId = 8\nWHERE p.ClosedDate IS NULL\nAND vob.BountyAmount >= 150\nAND DATEADD(d, 7, vob.CreationDate) >= GETDATE()\nAND p.Tags LIKE '%sql%'\nAND NOT EXISTS (SELECT *\n                FROM Votes vcb\n                WHERE vcb.PostId = p.Id AND vcb.VoteTypeId = 9)\nORDER BY ISNULL(p.AnswerCount, 0) ASC,\n         vob.BountyAmount DESC,\n         vob.CreationDate DESC"
    },
    {
        "QuerySetId": 133083,
        "Title": "Posts by a deleted user.",
        "Description": "A query to bring up questions\/answers of deleted users",
        "QueryBody": "SELECT  * FROM Posts p WHERE OwnerDisplayName = ##Name:string##",
        "CreationDate": "2014-02-08 07:25:49",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 133092,
        "Title": "Upvoted, but not accepted Answers.",
        "Description": null,
        "QueryBody": "DECLARE  @UserId int = ##UserId##\n\nselect b.Id AS [Post Link],\n       'site:\/\/questions\/' + CAST(max(a.Id) AS nvarchar) as [Answer Link]\n  from Posts a inner join Posts b on a.ParentId = b.Id\n               inner join Posts c on c.ParentId = b.Id\n where a.PostTypeId = 2\n   and a.OwnerUserId = @UserId\n   and b.PostTypeId = 1\n   and b.AcceptedAnswerId is NULL\n   and c.PostTypeId = 2\n   and c.OwnerUserId <> @UserId\n   and a.Score > 0\n group by b.Id\nhaving max(a.Score) >= max(c.Score);",
        "CreationDate": "2013-08-27 09:37:39",
        "validated": false,
        "QueryBody_Original": "DECLARE  @UserId int = ##UserId##\n\nselect b.Id AS [Post Link],\n       'site:\/\/questions\/' + CAST(max(a.Id) AS nvarchar) as [Answer Link]\n  from Posts a inner join Posts b on a.ParentId = b.Id\n               inner join Posts c on c.ParentId = b.Id\n where a.PostTypeId = 2\n   and a.OwnerUserId = @UserId\n   and b.PostTypeId = 1\n   and b.AcceptedAnswerId is NULL\n   and c.PostTypeId = 2\n   and c.OwnerUserId <> @UserId\n   and a.Score > 0\n group by b.Id\nhaving max(a.Score) >= max(c.Score);"
    },
    {
        "QuerySetId": 133093,
        "Title": "What's the member name of the member with this ID?",
        "Description": null,
        "QueryBody": "SELECT  DisplayName From Users Where Id = ##UserId##",
        "CreationDate": "2013-08-27 12:13:45",
        "validated": false,
        "QueryBody_Original": "SELECT  DisplayName From Users Where Id = ##UserId##"
    },
    {
        "QuerySetId": 133106,
        "Title": "search comment by keyword and user id",
        "Description": null,
        "QueryBody": "SELECT  Id as [Comment Link], Text, CreationDate \nFROM Comments\nWHERE \n  UserId = ##UserId##\nAND\n  Text LIKE '%##Keyword##%'\norder by CreationDate desc",
        "CreationDate": "2014-03-29 06:44:19",
        "validated": false,
        "QueryBody_Original": "SELECT  Id as [Comment Link], Text, CreationDate \nFROM Comments\nWHERE \n  UserId = ##UserId##\nAND\n  Text LIKE '%##Keyword##%'\norder by CreationDate desc"
    },
    {
        "QuerySetId": 133131,
        "Title": "View votes of a post",
        "Description": null,
        "QueryBody": "SELECT  *\n from Votes as v\n join Users as u on v.UserId = u.Id\nwhere v.PostId=##PostId## order by v.CreationDate",
        "CreationDate": "2013-08-27 19:04:27",
        "validated": false,
        "QueryBody_Original": "SELECT  *\n from Votes as v\n join Users as u on v.UserId = u.Id\nwhere v.PostId=##PostId## order by v.CreationDate"
    },
    {
        "QuerySetId": 133147,
        "Title": "What are the top accepted answer percentage rate",
        "Description": "On avg how often are answers I give, accepted\r\n",
        "QueryBody": "SELECT  Count(*)+0.0001 avoids a divide by zero\n\nSELECT \n    (SELECT Count(*) FROM Posts WHERE OwnerUserId = a.OwnerUserId AND PostTypeId = 2) as NumAnswers,\n    (CAST(Count(a.Id) AS float) \/ (SELECT Count(*)+0.0001 FROM Posts WHERE OwnerUserId = a.OwnerUserId AND PostTypeId = 2) * 100) AS AcceptedPercentage,\n    a.OwnerUserId as UserId\nFROM\n    Posts q\n  INNER JOIN\n    Posts a ON q.AcceptedAnswerId = a.Id\nWHERE\n    a.PostTypeId = 2 AND\n    (SELECT Count(*) FROM Posts WHERE OwnerUserId = a.OwnerUserId AND PostTypeId = 2) > 10\nGROUP BY\n    a.OwnerUserId\nORDER BY\n    NumAnswers DESC",
        "CreationDate": "2013-08-27 19:56:45",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 133354,
        "Title": "Which posts for a specified tag are eligible for Archaeologist edits?",
        "Description": "Old low quality questions that are edit fodder",
        "QueryBody": "SELECT  TOP 300\n  P.Id AS [Post Link],\n  P.CreationDate,\n  P.Score,\n  P.PostTypeID,\n  p.LastEditDate,\n  p.LastActivityDate\nFROM Posts AS P\nWHERE p.LastActivityDate < DATEADD(month, -6, GETDATE())\nAND p.LastEditDate < DATEADD(month, -6, p.LastActivityDate) \nAND Score > 0\nAND AnswerCount = 0\nAND AcceptedAnswerId IS NULL\nAND ClosedDate IS NULL\n\nand p.OwnerUserId = '2016162'\nORDER BY score desc",
        "CreationDate": "2014-02-23 02:17:39",
        "validated": false,
        "QueryBody_Original": "SELECT  TOP 300\n  P.Id AS [Post Link],\n  P.CreationDate,\n  P.Score,\n  P.PostTypeID,\n  p.LastEditDate,\n  p.LastActivityDate\nFROM Posts AS P\nWHERE p.LastActivityDate < DATEADD(month, -6, GETDATE())\nAND p.LastEditDate < DATEADD(month, -6, p.LastActivityDate) \nAND Score > 0\nAND AnswerCount = 0\nAND AcceptedAnswerId IS NULL\nAND ClosedDate IS NULL\n\nand p.OwnerUserId = '2016162'\nORDER BY score desc"
    },
    {
        "QuerySetId": 133697,
        "Title": "Query with Specified Tag (Single Tag); show favourite count; show up vote count; show view count",
        "Description": null,
        "QueryBody": "SELECT  Id from Tags where TagName in ('r')\n\n-- SELECT Top 10\nSELECT\nquestion.Title,\nquestion.Id,\nquestion.Id  AS [Post Link],\nquestion.Tags,\nquestion.ViewCount,\ncount(votes.postid) as 'Vote count',\nquestion.FavoriteCount,\nquestion.CreationDate\n\nFROM Posts as question\n\nINNER JOIN \nVotes votes on question.id=votes.PostId\n\nWHERE \n-- 2013 July Range for R\nquestion.Id <= 17983004 and\nquestion.Id >= 17664116 and\nquestion.Tags like '%<r>%' and\nquestion.Title like '%date%' and\nquestion.PostTypeId = 1 and\nquestion.AcceptedAnswerId <> ''\n\nGROUP BY\nvotes.PostId,\nquestion.Id,\nquestion.Title,\nquestion.Tags,\nquestion.FavoriteCount,\nquestion.ViewCount,\nquestion.CreationDate\n\nORDER by\ncount(votes.postid) DESC,\nquestion.ViewCount DESC\n-- question.CreationDate DESC",
        "CreationDate": "2013-08-30 17:57:39",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 133820,
        "Title": "Suggested Edit Votes you lost",
        "Description": null,
        "QueryBody": "SELECT s all suggested edit votes by a user\n--where the result was the opposite of what they casted\n\n;with BaseResults as\n(\n  SELECT se.Id [Suggested Edit Link], se.CreationDate, se.ApprovalDate, se.RejectionDate,\n    sev.VoteTypeId\n  from SuggestedEditVotes sev\n  inner join SuggestedEdits se on se.ID = sev.SuggestedEditId\n  where UserId = 18061\n),\nVotedNo as --voted no, was yes\n(\n  SELECT *\n  from BaseResults\n  where VoteTypeId = 3 and RejectionDate is null\n),\nVotedYes as --voted yes, was no\n(\n  SELECT *\n  from BaseResults\n  where VoteTypeId = 2 and ApprovalDate is null\n)\nSELECT * from VotedYes\nunion\nSELECT * from VotedNo",
        "CreationDate": "2014-03-24 23:49:29",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 133979,
        "Title": "User activity in tag over time",
        "Description": "Unfinished query, meant to be extended to talk about top users (currently only taking top rep users)",
        "QueryBody": "SELECT  Z.[Month] [Month],Z.ouid UserName, count(Z.ouid) as cnt\nfrom(\nSELECT CAST(\n      cast(DATEPART(YYYY, Y.CreationDate) as varchar) + '-' + cast(DATEPART(MM, Y.CreationDate) as varchar) + '-01'\n      as datetime) [Month], U.DisplayName ouid\n     \n \n   from posts Y\n      inner join posts p2  on Y.parentid=p2.id inner join users U on Y.owneruserid=U.id\n      where Y.posttypeid=2 and (p2.tags like '%##TagName?quantum-mechanics##%') and U.reputation>##RepThreshhold?10000##\n  \n  \n) Z group by Z.ouid,Z.[Month] order by [Month] asc, UserName asc",
        "CreationDate": "2013-09-01 13:41:10",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 134920,
        "Title": "Accepted answer count by score",
        "Description": "Doesn't count self-accepted answers.",
        "QueryBody": "SELECT  a.score, count(*) count\nfrom posts a\njoin posts q on a.id = q.AcceptedAnswerId\n    and q.OwnerUserId != ##UserId##\nwhere a.OwnerUserId = ##UserId##\nand a.PostTypeId = 2\ngroup by a.score\norder by 1",
        "CreationDate": "2013-09-04 18:11:14",
        "validated": false,
        "QueryBody_Original": "SELECT  a.score, count(*) count\nfrom posts a\njoin posts q on a.id = q.AcceptedAnswerId\n    and q.OwnerUserId != ##UserId##\nwhere a.OwnerUserId = ##UserId##\nand a.PostTypeId = 2\ngroup by a.score\norder by 1"
    },
    {
        "QuerySetId": 135528,
        "Title": "Attention of Bug reports and feature requests",
        "Description": null,
        "QueryBody": "SELECT   \n   t.tagname,\n   t.count,\n   count(s_t.tagname) Status_Count,\n   (count(s_t.tagname))\/cast(t.count as decimal(20,5) )  as Ratio\nFROM\n  posts p \n  INNER JOIN POSTTAGS pt\n  on p.id = pt.PostId\n  INNER JOIN tags t \n    ON pt.TagId = T.Id\n  LEFT JOIN POSTTAGS s_pt\n    INNER JOIN tags s_t\n      ON s_pt.TagId = s_t.Id\n      and s_t.TagName like 'status%'\n  on p.id = s_pt.PostId\nWHERE  \n  t.TagName in ('support', 'bug', 'feature-request')\nGROUP BY \n   t.tagname,\n   t.count",
        "CreationDate": "2013-09-06 22:59:26",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 136173,
        "Title": "Posts commented on that were edited by the OP afterwards",
        "Description": null,
        "QueryBody": "SELECT  p.id as [Post Link]\n     , max(c.creationdate) as [Last Commented]\n     , max(ph.creationdate) as [Last OP Edit]\n     , max(p.closeddate) as [Closed]\n  from comments c\n  join posts p\n    on c.postid = p.id\n   and c.userid <> p.owneruserid\n   and p.lasteditdate > c.creationdate\n  join posthistory ph\n    on p.id = ph.postid\n   and p.owneruserid = ph.userid\n   and ph.creationdate > c.creationdate\n  join votes v\n    on p.id = v.postid\n   and v.creationdate < ph.creationdate\n where c.userid = ##userid##\n   and p.posttypeid = 1\n   and ph.posthistorytypeid = 5\n   and v.votetypeid = 3\n group by p.id\n order by max(ph.creationdate) desc",
        "CreationDate": "2013-09-22 20:08:44",
        "validated": false,
        "QueryBody_Original": "SELECT  p.id as [Post Link]\n     , max(c.creationdate) as [Last Commented]\n     , max(ph.creationdate) as [Last OP Edit]\n     , max(p.closeddate) as [Closed]\n  from comments c\n  join posts p\n    on c.postid = p.id\n   and c.userid <> p.owneruserid\n   and p.lasteditdate > c.creationdate\n  join posthistory ph\n    on p.id = ph.postid\n   and p.owneruserid = ph.userid\n   and ph.creationdate > c.creationdate\n  join votes v\n    on p.id = v.postid\n   and v.creationdate < ph.creationdate\n where c.userid = ##userid##\n   and p.posttypeid = 1\n   and ph.posthistorytypeid = 5\n   and v.votetypeid = 3\n group by p.id\n order by max(ph.creationdate) desc"
    },
    {
        "QuerySetId": 136396,
        "Title": "Most viewed question that I've answered",
        "Description": null,
        "QueryBody": "SELECT \n  p2.ViewCount\/nullif(p.Score, 0),\n  p2.ViewCount,\n  p.Score,\n  p.Id as [Post Link]\nFROM \n  Posts p \nJOIN \n  Posts p2\nON\n  p.ParentId = p2.Id\n--WHERE \n--  p.PostTypeId = 2 \nAND\n  p.OwnerUserId = ##UserId##\nORDER BY\n  p2.ViewCount\/nullif(p.Score, 0) DESC,\n  p2.ViewCount DESC",
        "CreationDate": "2013-09-09 21:33:01",
        "validated": false,
        "QueryBody_Original": "SELECT \n  p2.ViewCount\/nullif(p.Score, 0),\n  p2.ViewCount,\n  p.Score,\n  p.Id as [Post Link]\nFROM \n  Posts p \nJOIN \n  Posts p2\nON\n  p.ParentId = p2.Id\n--WHERE \n--  p.PostTypeId = 2 \nAND\n  p.OwnerUserId = ##UserId##\nORDER BY\n  p2.ViewCount\/nullif(p.Score, 0) DESC,\n  p2.ViewCount DESC"
    },
    {
        "QuerySetId": 137127,
        "Title": "users with no questions or answers",
        "Description": "Users with no questions",
        "QueryBody": "WITH  no questions or answers, but some votes\n\n\nselect u.Id as [User Link], count(p.OwnerUserId)as \"total posts\", u.UpVotes, u.DownVotes\nFROM Users u\n    LEFT JOIN Posts p ON u.Id = p.OwnerUserId\nWHERE u.UpVotes + u.DownVotes > 0\ngroup by u.Id,  u.UpVotes, u.DownVotes\norder by count(p.OwnerUserId) asc, u.UpVotes desc",
        "CreationDate": "2016-06-11 20:38:36",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 137413,
        "Title": "Users with votes but no or few posts",
        "Description": "Users with no questions",
        "QueryBody": "WITH  votes but no or few posts\n\nSELECT \n  u.Id as [User Link], \n  count(p.OwnerUserId) as TotalPosts, \n  u.UpVotes, \n  u.DownVotes\nFROM Users u\nLEFT JOIN Posts p ON u.Id = p.OwnerUserId\nWHERE  \n  p.Id is NULL and\n  u.UpVotes+u.DownVotes > ##MinVotes##\nGROUP BY u.Id,  u.UpVotes, u.DownVotes\nORDER BY count(p.OwnerUserId) ASC, u.UpVotes DESC",
        "CreationDate": "2013-09-16 02:40:07",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 137589,
        "Title": "Ratio of my answers that get accepted",
        "Description": null,
        "QueryBody": "DECLARE  @UserId int = ##UserId##\n\nselect @UserId as [User Link],\n       sum(isAccepted) acceptedAnswers,\n       count(isAccepted) totalAnswers,\n       round(cast(sum(isAccepted) as float) * 100 \/ count(isAccepted),1)\n          acceptancePercentage\n  from(\n        select case when exists(\n                                select 1\n                                  from Posts b\n                                 where a.Id = b.AcceptedAnswerId\n                                   and b.Id = a.ParentId\n                               )\n                        then 1\n                    else 0\n               end isAccepted\n          from Posts a\n         where a.PostTypeId = 2\n           and a.OwnerUserId = @UserId\n       ) as modifiedPosts",
        "CreationDate": "2013-09-17 10:41:27",
        "validated": false,
        "QueryBody_Original": "DECLARE  @UserId int = ##UserId##\n\nselect @UserId as [User Link],\n       sum(isAccepted) acceptedAnswers,\n       count(isAccepted) totalAnswers,\n       round(cast(sum(isAccepted) as float) * 100 \/ count(isAccepted),1)\n          acceptancePercentage\n  from(\n        select case when exists(\n                                select 1\n                                  from Posts b\n                                 where a.Id = b.AcceptedAnswerId\n                                   and b.Id = a.ParentId\n                               )\n                        then 1\n                    else 0\n               end isAccepted\n          from Posts a\n         where a.PostTypeId = 2\n           and a.OwnerUserId = @UserId\n       ) as modifiedPosts"
    },
    {
        "QuerySetId": 137747,
        "Title": "Reinvention base units - with",
        "Description": null,
        "QueryBody": "SELECT  reinvented.tagname reinvented, 'with' presence, ##Invented:string## invented, \nanswerer.id answerer_userid,  \nanswers.id answer_id,\nanswers.score,\nanswerer.reputation answerer_reputation\nfrom tags reinvented, users answerer,\nposts questions, posts answers, posttags ptri\nwhere \nquestions.posttypeid=1\nand questions.id = ptri.postid\nand ptri.tagid=reinvented.id\nand questions.id=answers.parentid\nand answers.posttypeid=2\nand answers.owneruserid=answerer.id\nand answerer.reputation between 2 and 100000\nand reinvented.tagname = ##Reinvented:string## \nand ##Invented:string## in (SELECT tagname from tags invented, posttags pti\nwhere invented.id=pti.tagid and pti.postid=questions.id)",
        "CreationDate": "2013-09-17 20:27:31",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 137910,
        "Title": "Count of Users within a given reputation",
        "Description": null,
        "QueryBody": "SELECT  count(Id) from Users where Id in (SELECT Id from Users where reputation <\n##reputation1## and reputation >=##reputation2##)",
        "CreationDate": "2013-09-18 12:39:37",
        "validated": false,
        "QueryBody_Original": "SELECT  count(Id) from Users where Id in (SELECT Id from Users where reputation <\n##reputation1## and reputation >=##reputation2##)"
    },
    {
        "QuerySetId": 137946,
        "Title": "Beginners who are inactive for a given time",
        "Description": null,
        "QueryBody": "SELECT  count(Id) from Users where \nReputation < ##reputation1## and Reputation >=##reputation2##\nand CreationDate < dateadd(month,-6,getdate())",
        "CreationDate": "2013-09-18 14:38:26",
        "validated": false,
        "QueryBody_Original": "SELECT  count(Id) from Users where \nReputation < ##reputation1## and Reputation >=##reputation2##\nand CreationDate < dateadd(month,-6,getdate())"
    },
    {
        "QuerySetId": 137956,
        "Title": "Inactive beginners whose questions are answered atleast once",
        "Description": null,
        "QueryBody": "SELECT  Count(distinct ParentId) from Posts where\nPosts.PostTypeId=2 and Posts.ParentId in (\nSELECT Posts.Id from Posts where Posts.OwnerUserId in \n(SELECT Users.Id from Users where \nUsers.Reputation < ##reputation1## and reputation >=##reputation2##\nand Users.CreationDate < dateadd(month,-6,getdate())) \nand Posts.PostTypeId=1)",
        "CreationDate": "2013-09-18 17:43:04",
        "validated": false,
        "QueryBody_Original": "SELECT  Count(distinct ParentId) from Posts where\nPosts.PostTypeId=2 and Posts.ParentId in (\nSELECT Posts.Id from Posts where Posts.OwnerUserId in \n(SELECT Users.Id from Users where \nUsers.Reputation < ##reputation1## and reputation >=##reputation2##\nand Users.CreationDate < dateadd(month,-6,getdate())) \nand Posts.PostTypeId=1)"
    },
    {
        "QuerySetId": 138011,
        "Title": "Inactive beginners who asked questions",
        "Description": null,
        "QueryBody": "SELECT  count(Posts.Id) from Posts where OwnerUserId in \n(SELECT Id from Users where \nreputation < ##reputation1## and reputation >=##reputation2##\nand Users.CreationDate < dateadd(month,-6,getdate()))\nand PostTypeId=1",
        "CreationDate": "2013-09-19 08:30:13",
        "validated": false,
        "QueryBody_Original": "SELECT  count(Posts.Id) from Posts where OwnerUserId in \n(SELECT Id from Users where \nreputation < ##reputation1## and reputation >=##reputation2##\nand Users.CreationDate < dateadd(month,-6,getdate()))\nand PostTypeId=1"
    },
    {
        "QuerySetId": 138082,
        "Title": "Who has directed the most still-visible comments at me or my posts?",
        "Description": null,
        "QueryBody": "SELECT  users.displayname, manager, count(*) from comments\n  join users on comments.userid=users.id\n  join posts on comments.postid=posts.id\n  join users my on my.id=##UserID##\n  left join (SELECT 'mgr' manager, id from users\n join (SELECT displayname, max(reputation) as reputation\n from users where displayname in (SELECT name from\n  (values ('Robert Cartaino'), ('Shog9'), ('Grace Note'), ('Anna Lear'),\n  ('Tim Post'), ('Jon Ericson'), ('Gabe'), ('Pops')) as T(name))\n  group by displayname) managers\n  on users.displayname=managers.displayname and users.reputation=managers.reputation) managers\n  on users.id=managers.id\n  \nwhere (text like '@PeterAlfvin%' or posts.owneruserid = my.id)\n  and comments.userid != my.id group by users.displayname, manager\n  order by displayname",
        "CreationDate": "2013-09-18 22:04:47",
        "validated": false,
        "QueryBody_Original": "SELECT  users.displayname, manager, count(*) from comments\n  join users on comments.userid=users.id\n  join posts on comments.postid=posts.id\n  join users my on my.id=##UserID##\n  left join (SELECT 'mgr' manager, id from users\n join (SELECT displayname, max(reputation) as reputation\n from users where displayname in (SELECT name from\n  (values ('Robert Cartaino'), ('Shog9'), ('Grace Note'), ('Anna Lear'),\n  ('Tim Post'), ('Jon Ericson'), ('Gabe'), ('Pops')) as T(name))\n  group by displayname) managers\n  on users.displayname=managers.displayname and users.reputation=managers.reputation) managers\n  on users.id=managers.id\n  \nwhere (text like '@PeterAlfvin%' or posts.owneruserid = my.id)\n  and comments.userid != my.id group by users.displayname, manager\n  order by displayname"
    },
    {
        "QuerySetId": 138561,
        "Title": "Answers Accepted By Users - Count",
        "Description": null,
        "QueryBody": "DECLARE  @UserId int = ##UserId##\n\nSELECT\n  users.Id, users.DisplayName, count(ans.Id)\nFROM Users users\nJOIN Posts qtns ON qtns.PostTypeId = 1 and users.Id = qtns.OwnerUserId\nJOIN Posts ans ON ans.PostTypeId = 2 and qtns.AcceptedAnswerId = ans.Id\nWHERE\n  ans.OwnerUserId = @UserId\nGROUP BY\n  users.Id, users.DisplayName\nORDER BY\n  count(ans.Id) desc",
        "CreationDate": "2013-09-21 21:02:00",
        "validated": false,
        "QueryBody_Original": "DECLARE  @UserId int = ##UserId##\n\nSELECT\n  users.Id, users.DisplayName, count(ans.Id)\nFROM Users users\nJOIN Posts qtns ON qtns.PostTypeId = 1 and users.Id = qtns.OwnerUserId\nJOIN Posts ans ON ans.PostTypeId = 2 and qtns.AcceptedAnswerId = ans.Id\nWHERE\n  ans.OwnerUserId = @UserId\nGROUP BY\n  users.Id, users.DisplayName\nORDER BY\n  count(ans.Id) desc"
    },
    {
        "QuerySetId": 138562,
        "Title": "Answers Given To A Particular User",
        "Description": null,
        "QueryBody": "DECLARE  @QtnsUser int = ##QtnsUser##\nDECLARE @AnsUser int = ##AnsUser##\n\nSELECT \n  DISTINCT\n    qtns.Id\n    , qtns.Title\n    , qtns.CreationDate\n    , CASE WHEN qtns.AcceptedAnswerId = ans.Id THEN 'Yes' ELSE 'No' END as Accepted\nFROM\n  Posts qtns\nJOIN Posts ans on qtns.Id = ans.ParentId\nWHERE\n  qtns.OwnerUserId = @QtnsUser\nAND ans.OwnerUserId = @AnsUser\nORDER BY\n  qtns.CreationDate",
        "CreationDate": "2013-09-21 21:00:43",
        "validated": false,
        "QueryBody_Original": "DECLARE  @QtnsUser int = ##QtnsUser##\nDECLARE @AnsUser int = ##AnsUser##\n\nSELECT \n  DISTINCT\n    qtns.Id\n    , qtns.Title\n    , qtns.CreationDate\n    , CASE WHEN qtns.AcceptedAnswerId = ans.Id THEN 'Yes' ELSE 'No' END as Accepted\nFROM\n  Posts qtns\nJOIN Posts ans on qtns.Id = ans.ParentId\nWHERE\n  qtns.OwnerUserId = @QtnsUser\nAND ans.OwnerUserId = @AnsUser\nORDER BY\n  qtns.CreationDate"
    },
    {
        "QuerySetId": 138564,
        "Title": "Answers Given To Users - Count",
        "Description": null,
        "QueryBody": "DECLARE  @UserId int = ##UserId##\n\nSELECT\n  users.Id\n  , users.DisplayName\n  , COUNT(DISTINCT ans.ParentId) AS AnswerCount\n  , SUM(CASE WHEN qtns.AcceptedAnswerId = ans.Id THEN 1 ELSE 0 END) AS AcceptedCount\nFROM Users users\nJOIN Posts qtns ON qtns.PostTypeId = 1 and users.Id = qtns.OwnerUserId\nJOIN Posts ans ON ans.PostTypeId = 2 and qtns.Id = ans.ParentId\nWHERE\n  ans.OwnerUserId = @UserId\nGROUP BY\n  users.Id, users.DisplayName\nORDER BY\n  COUNT(DISTINCT ans.ParentId) DESC",
        "CreationDate": "2013-09-21 21:02:19",
        "validated": false,
        "QueryBody_Original": "DECLARE  @UserId int = ##UserId##\n\nSELECT\n  users.Id\n  , users.DisplayName\n  , COUNT(DISTINCT ans.ParentId) AS AnswerCount\n  , SUM(CASE WHEN qtns.AcceptedAnswerId = ans.Id THEN 1 ELSE 0 END) AS AcceptedCount\nFROM Users users\nJOIN Posts qtns ON qtns.PostTypeId = 1 and users.Id = qtns.OwnerUserId\nJOIN Posts ans ON ans.PostTypeId = 2 and qtns.Id = ans.ParentId\nWHERE\n  ans.OwnerUserId = @UserId\nGROUP BY\n  users.Id, users.DisplayName\nORDER BY\n  COUNT(DISTINCT ans.ParentId) DESC"
    },
    {
        "QuerySetId": 138673,
        "Title": "Average user age for a reputation slice",
        "Description": null,
        "QueryBody": "SELECT \n    ROW_NUMBER() OVER(ORDER BY Reputation DESC) AS [#], \n    Id AS [User Link], \n    Reputation\nFROM\n    Users\nWHERE\n    Reputation between ##MinRep## and ##MaxRep## and \n       Age between 16 and 16\nORDER BY\n    Reputation DESC;",
        "CreationDate": "2016-09-05 17:11:10",
        "validated": false,
        "QueryBody_Original": "SELECT \n    ROW_NUMBER() OVER(ORDER BY Reputation DESC) AS [#], \n    Id AS [User Link], \n    Reputation\nFROM\n    Users\nWHERE\n    Reputation between ##MinRep## and ##MaxRep## and \n       Age between 16 and 16\nORDER BY\n    Reputation DESC;"
    },
    {
        "QuerySetId": 139035,
        "Title": "Percentage of reputation acquired by percentage of user",
        "Description": "Most of the wealth of this world is owned by a few number of individuals. Similarly most of the reputation in StackExchange are acquired by few top users. Check if it is true.",
        "QueryBody": "DECLARE  @totalSum decimal;\nDECLARE @top10Sum decimal;\n\nselect @totalSum = sum(Reputation) from Users\nselect @totalSum\n\nselect top (10) Reputation, DisplayName into #temp from Users order by Reputation desc\nselect @top10Sum = sum(Reputation) from #temp\n\nselect @top10Sum\/@totalSum",
        "CreationDate": "2013-09-25 10:53:52",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 139123,
        "Title": "View statistics for your questions",
        "Description": "Number of views per day for your questions, and their total views, sorted highest view rate to lowest",
        "QueryBody": "SELECT \n  ViewCount,\n  round(cast(ViewCount as float)\/DATEDIFF(dd,CreationDate,getdate()),1) ViewsPerDay,\n  Id as [Post Link]\nfrom Posts\nwhere PostTypeId = 1\nand OwnerUserId = ##UserId##\norder by ViewCount desc;",
        "CreationDate": "2014-02-25 15:27:55",
        "validated": false,
        "QueryBody_Original": "SELECT \n  ViewCount,\n  round(cast(ViewCount as float)\/DATEDIFF(dd,CreationDate,getdate()),1) ViewsPerDay,\n  Id as [Post Link]\nfrom Posts\nwhere PostTypeId = 1\nand OwnerUserId = ##UserId##\norder by ViewCount desc;"
    },
    {
        "QuerySetId": 139151,
        "Title": "Who are the most prolific answerers for a tag?",
        "Description": null,
        "QueryBody": "DECLARE  @tag nvarchar(25) = ##Tag:string##\n\nSELECT --TOP 20 \n    Users.Id,\n    Users.DisplayName,\n    COUNT(*) AS UpVotes \nFROM Tags\n    INNER JOIN PostTags ON PostTags.TagId = Tags.id\n    INNER JOIN Posts ON Posts.ParentId = PostTags.PostId\n    INNER JOIN Users ON Users.Id = Posts.OwnerUserId\n    INNER JOIN Votes ON Votes.PostId = Posts.Id and VoteTypeId = 2    \nWHERE \n    Tags.TagName = @tag\nGROUP BY Users.Id, Users.DisplayName\nORDER BY UpVotes DESC",
        "CreationDate": "2013-09-25 21:12:41",
        "validated": false,
        "QueryBody_Original": "DECLARE  @tag nvarchar(25) = ##Tag:string##\n\nSELECT --TOP 20 \n    Users.Id,\n    Users.DisplayName,\n    COUNT(*) AS UpVotes \nFROM Tags\n    INNER JOIN PostTags ON PostTags.TagId = Tags.id\n    INNER JOIN Posts ON Posts.ParentId = PostTags.PostId\n    INNER JOIN Users ON Users.Id = Posts.OwnerUserId\n    INNER JOIN Votes ON Votes.PostId = Posts.Id and VoteTypeId = 2    \nWHERE \n    Tags.TagName = @tag\nGROUP BY Users.Id, Users.DisplayName\nORDER BY UpVotes DESC"
    },
    {
        "QuerySetId": 139698,
        "Title": "Top UK users by tag and location",
        "Description": null,
        "QueryBody": "SELECT  TOP 20 * FROM Posts\n\n\nSELECT us.*,tuser.Score\nFROM Users us\nJOIN \n(SELECT TOP 1000 Answers.OwnerUserId AS UserId, SUM(Answers.Score) AS Score\n     FROM Tags \n    JOIN PostTags ON Tags.Id = PostTags.TagId\n    JOIN Posts ON Posts.Id = PostTags.PostId  \n    JOIN Posts Answers ON Answers.ParentId = Posts.Id \n   WHERE Tags.TagName = '##TagName##'\n  GROUP BY Answers.OwnerUserId\nORDER BY SUM(Posts.Score) DESC\n) tuser ON tuser.UserId = us.Id\nWHERE\nlower(location) like '%tamilnadu%' \nor\nlower(location) like '%kanyakumari%'\nor\nlower(location) like '%trivandrum%'\n\nORDER BY tuser.Score DESC",
        "CreationDate": "2014-02-06 18:56:51",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 139704,
        "Title": "Top UK users by quant tag and location",
        "Description": null,
        "QueryBody": "SELECT  TOP 20 * FROM Posts\n\n\nSELECT us.*,tuser.Score, tuser.TagName\nFROM Users us\nJOIN \n(SELECT Answers.OwnerUserId AS UserId, SUM(Answers.Score) AS Score, Tags.TagName\n     FROM Tags \n    JOIN PostTags ON Tags.Id = PostTags.TagId\n    JOIN Posts ON Posts.Id = PostTags.PostId  \n    JOIN Posts Answers ON Answers.ParentId = Posts.Id \n    WHERE Tags.TagName \n    IN ('C#','azure','aws','asp','asp.net','angular')\n  GROUP BY Answers.OwnerUserId, Tags.TagName\n) tuser ON tuser.UserId = us.Id\nWHERE\nlower(location) like '%egypt%'\nor\nlower(location) like '%cairo%'\n\nORDER BY Reputation DESC\n--ORDER BY us.Id, tuser.TagName",
        "CreationDate": "2018-10-31 12:23:16",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 140376,
        "Title": "Answers with a certain keyword",
        "Description": null,
        "QueryBody": "SELECT  Q.ID [Post Link]\nFROM Posts Q\n    INNER JOIN Posts A ON Q.AcceptedAnswerId = A.Id\nWHERE A.Body LIKE '%' + ##keyword:string## + '%';",
        "CreationDate": "2013-10-02 19:34:05",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 140581,
        "Title": "How many views does my answers have?",
        "Description": null,
        "QueryBody": "SELECT \nSUM(q.ViewCount) AS views, q.id AS [Post Link] ,a.score\nFROM Posts q\nINNER JOIN Posts a ON a.ParentId = q.Id\nWHERE a.OwnerUserId = ##userid##\nAND a.CreationDate > ##date?01-01-2013##\nGROUP BY q.id,a.score having SUM(q.ViewCount) > 1000\nORDER BY views desc",
        "CreationDate": "2013-12-31 08:58:44",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 141177,
        "Title": "What answers did I put my greatest effort into?",
        "Description": "Based on the idea that longest answers = most effort",
        "QueryBody": "SELECT  TOP 50\n  Question.Id As [Post Link],\n  Question.CreationDate As QuestionCreationDate,\n  LEN(Answer.Body) AS AnswerLength,\n  Answer.Score AS AnswerScore,\n  Answer.CommentCount AS AnswerCommentCount\nFROM\n  Posts Answer\n  INNER JOIN Posts AS Question ON (Answer.ParentId = Question.Id)\n  WHERE Answer.OwnerUserId = ##UserId##\n  AND Answer.PostTypeId = 2\nORDER BY LEN(Answer.Body) DESC",
        "CreationDate": "2013-12-20 04:18:45",
        "validated": false,
        "QueryBody_Original": "SELECT  TOP 50\n  Question.Id As [Post Link],\n  Question.CreationDate As QuestionCreationDate,\n  LEN(Answer.Body) AS AnswerLength,\n  Answer.Score AS AnswerScore,\n  Answer.CommentCount AS AnswerCommentCount\nFROM\n  Posts Answer\n  INNER JOIN Posts AS Question ON (Answer.ParentId = Question.Id)\n  WHERE Answer.OwnerUserId = ##UserId##\n  AND Answer.PostTypeId = 2\nORDER BY LEN(Answer.Body) DESC"
    },
    {
        "QuerySetId": 141461,
        "Title": "Questions with a later competing answer that I \"lost\" to ",
        "Description": null,
        "QueryBody": "SELECT  \n  p.id [Post Link] , p.Score [My Score], p2.Score [Other Score],  u.Reputation, u.displayName\nfrom \n  posts p\nINNER JOIN posts p2 \nON p.ParentID = p2.ParentID\nINNER JOIN users u \n  on p2.ownerUserId = u.Id\n  \nwhere p.OwnerUserId  =   ##UserId##\n  and \n  p.CreationDate < p2.CreationDate\n  and\n  p.score < p2.score\nOrder by  u.Reputation desc",
        "CreationDate": "2013-10-07 23:16:06",
        "validated": false,
        "QueryBody_Original": "SELECT  \n  p.id [Post Link] , p.Score [My Score], p2.Score [Other Score],  u.Reputation, u.displayName\nfrom \n  posts p\nINNER JOIN posts p2 \nON p.ParentID = p2.ParentID\nINNER JOIN users u \n  on p2.ownerUserId = u.Id\n  \nwhere p.OwnerUserId  =   ##UserId##\n  and \n  p.CreationDate < p2.CreationDate\n  and\n  p.score < p2.score\nOrder by  u.Reputation desc"
    },
    {
        "QuerySetId": 141834,
        "Title": "Query to get all the tags containing a certain text",
        "Description": null,
        "QueryBody": "DECLARE  @text char(30) = ##text##\n\nSELECT\n  TagName\nFROM \n  Tags\nWHERE \n  TagName LIKE '%'+@text+'%'\nORDER BY \n  TagName ASC",
        "CreationDate": "2013-10-09 19:37:49",
        "validated": false,
        "QueryBody_Original": "DECLARE  @text char(30) = ##text##\n\nSELECT\n  TagName\nFROM \n  Tags\nWHERE \n  TagName LIKE '%'+@text+'%'\nORDER BY \n  TagName ASC"
    },
    {
        "QuerySetId": 142088,
        "Title": "Total comment score for a user",
        "Description": null,
        "QueryBody": "SELECT  SUM(c.Score) FROM Comments c WHERE c.UserId = ##UserId##",
        "CreationDate": "2013-10-10 15:55:58",
        "validated": false,
        "QueryBody_Original": "SELECT  SUM(c.Score) FROM Comments c WHERE c.UserId = ##UserId##"
    },
    {
        "QuerySetId": 142089,
        "Title": "Aggregated reputation gain per month",
        "Description": null,
        "QueryBody": "DECLARE  @UserId int = ##UserId##\nDECLARE @FirstVoteDate Date = (SELECT MIN(v.CreationDate) FROM Votes v INNER JOIN Posts p ON v.PostId = p.Id\nWHERE p.OwnerUserId = @UserId)\n\nSELECT \n  FLOOR(DATEDIFF(day, @FirstVoteDate, v.CreationDate)\/7) WeeksFromStart,\n  SUM(CASE \n    WHEN vt.Name = 'UpMod' THEN 10\n    WHEN vt.Name = 'DownMod' THEN -2\n    WHEN vt.Name = 'AcceptedByOriginator' THEN 15\n    ELSE 0\n    END) AS ReputationGain,\n  MAX(v.CreationDate) MaxDate  \nFROM Votes v\nINNER JOIN VoteTypes vt ON vt.Id = v.VoteTypeId\nINNER JOIN Posts p ON v.PostId = p.Id\nWHERE p.OwnerUserId = @UserId\nGROUP BY FLOOR(DATEDIFF(day, @FirstVoteDate, v.CreationDate)\/7)\nORDER BY WeeksFromStart",
        "CreationDate": "2013-10-10 17:02:17",
        "validated": false,
        "QueryBody_Original": "DECLARE  @UserId int = ##UserId##\nDECLARE @FirstVoteDate Date = (SELECT MIN(v.CreationDate) FROM Votes v INNER JOIN Posts p ON v.PostId = p.Id\nWHERE p.OwnerUserId = @UserId)\n\nSELECT \n  FLOOR(DATEDIFF(day, @FirstVoteDate, v.CreationDate)\/7) WeeksFromStart,\n  SUM(CASE \n    WHEN vt.Name = 'UpMod' THEN 10\n    WHEN vt.Name = 'DownMod' THEN -2\n    WHEN vt.Name = 'AcceptedByOriginator' THEN 15\n    ELSE 0\n    END) AS ReputationGain,\n  MAX(v.CreationDate) MaxDate  \nFROM Votes v\nINNER JOIN VoteTypes vt ON vt.Id = v.VoteTypeId\nINNER JOIN Posts p ON v.PostId = p.Id\nWHERE p.OwnerUserId = @UserId\nGROUP BY FLOOR(DATEDIFF(day, @FirstVoteDate, v.CreationDate)\/7)\nORDER BY WeeksFromStart"
    },
    {
        "QuerySetId": 143311,
        "Title": "Find unaccepted own answers to question",
        "Description": null,
        "QueryBody": "SELECT  q.id as [Post Link],\n'http:\/\/stackoverflow.com\/a\/' + CAST(a.id as nvarchar) as [Answer Link]\nFROM posts q \n       INNER JOIN posts a \n               ON a.parentid = q.id \n                  AND a.owneruserid = q.owneruserid\n                  AND a.id <> q.AcceptedAnswerId\nwhere a.OwnerUserId = ##UserId##",
        "CreationDate": "2013-10-27 17:40:07",
        "validated": false,
        "QueryBody_Original": "SELECT  q.id as [Post Link],\n'http:\/\/stackoverflow.com\/a\/' + CAST(a.id as nvarchar) as [Answer Link]\nFROM posts q \n       INNER JOIN posts a \n               ON a.parentid = q.id \n                  AND a.owneruserid = q.owneruserid\n                  AND a.id <> q.AcceptedAnswerId\nwhere a.OwnerUserId = ##UserId##"
    },
    {
        "QuerySetId": 143413,
        "Title": "Get number of questions for each amount of close votes",
        "Description": null,
        "QueryBody": "SELECT  votetypeid, count(*)\nfrom votes\ngroup by votetypeid\n*\/\n\n\/*SELECT u.id, count(*) c\nfrom votes v\nleft join users u on v.userid = u.id\nwhere votetypeid = 6\ngroup by u.id\n*\/\n\n\/*\nSELECT userid, count(*)\nfrom votes\n--where votetypeid = 6\ngroup by userid\n*\/\n\nSELECT votetypeid, count(distinct userid) from votes\ngroup by votetypeid\n\nSELECT * from votetypes",
        "CreationDate": "2013-10-20 06:10:51",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 144433,
        "Title": "Find comments on my posts",
        "Description": null,
        "QueryBody": "SELECT  * FROM Comments\nWHERE PostId IN (\n    SELECT Id FROM Posts\n    WHERE OwnerUserId=##UserId##\n    AND ParentId IN (\n        SELECT Id FROM Posts\n    )\n)\nAND Text LIKE '%##Word##%'\nAND UserId<>##UserId##\nORDER BY CreationDate ASC",
        "CreationDate": "2013-11-25 19:39:15",
        "validated": false,
        "QueryBody_Original": "SELECT  * FROM Comments\nWHERE PostId IN (\n    SELECT Id FROM Posts\n    WHERE OwnerUserId=##UserId##\n    AND ParentId IN (\n        SELECT Id FROM Posts\n    )\n)\nAND Text LIKE '%##Word##%'\nAND UserId<>##UserId##\nORDER BY CreationDate ASC"
    },
    {
        "QuerySetId": 144631,
        "Title": "Number of posts by me since ...",
        "Description": null,
        "QueryBody": "DECLARE  @userId int = ##userId##;\nDECLARE @startDate datetime = ##startDate##;\n\nselect t.Name, count(*)\nfrom Posts p join PostTypes t on p.PostTypeId = t.Id\nwhere OwnerUserId = @userId\nand CreationDate >= @startDate\ngroup by t.Name;",
        "CreationDate": "2013-10-27 03:34:22",
        "validated": false,
        "QueryBody_Original": "DECLARE  @userId int = ##userId##;\nDECLARE @startDate datetime = ##startDate##;\n\nselect t.Name, count(*)\nfrom Posts p join PostTypes t on p.PostTypeId = t.Id\nwhere OwnerUserId = @userId\nand CreationDate >= @startDate\ngroup by t.Name;"
    },
    {
        "QuerySetId": 145005,
        "Title": "View a single comment based on ID or URL",
        "Description": null,
        "QueryBody": "DECLARE  @TextToFind nvarchar(100) = '#comment';\nDECLARE @CommentId int = ##CommentId?0##;\nDECLARE @RawLink nvarchar(512) = '##RawLink?null##';\nDECLARE @HashTagIndex int;\nIf @CommentId > 0 Begin\n    Select PostId as [Post Link], Score, [Text], CreationDate, UserId As [User Link]\n    From Comments\n    Where Id=@CommentId\nEnd Else Begin\n    Select @HashTagIndex = CharIndex(@TextToFind, @RawLink);\n    If @HashTagIndex<1 Begin\n        Select 'Invalid or not supported comment URL, sorry';\n    End Else Begin\n        Select CharIndex('_', SubString(@RawLink, @HashTagIndex + Len(@TextToFind), 100));\n    End\nEnd",
        "CreationDate": "2015-10-16 11:48:29",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 145339,
        "Title": "Posts, Comments by askerID and answererID.",
        "Description": null,
        "QueryBody": "SELECT  'Answers' AS Post_Type, p1.ID AS [Post Link], p1.* \n  FROM Posts p1\n  JOIN Posts p2 ON p1.ID = p2.ParentId\n   AND p2.OwnerUserId = ##AnswererUserId##\n WHERE p1.OwnerUserId = ##AskerUserId##\nUNION ALL --Comments on your posts\nSELECT 'Comments on question' AS Post_Type, p1.ID AS [Post Link], p1.* \n  FROM Posts p1\n  JOIN Comments c1 ON p1.ID = c1.PostID\n   AND c1.UserId = ##AnswererUserId##\n WHERE p1.OwnerUserId = ##AskerUserId##\nUNION ALL --Comments on answers of your question\nSELECT 'Comments on other answers' AS Post_Type, p2.ID AS [Post Link], p2.* \n  FROM Posts p1\n  JOIN Posts p2 ON p1.ID = p2.ParentId\n  JOIN Comments c1 ON p2.ID = c1.PostID\n   AND c1.UserId = ##AnswererUserId##\n WHERE p1.OwnerUserId = ##AskerUserId##\n   AND p1.ID <> p2.ID",
        "CreationDate": "2013-10-31 10:54:23",
        "validated": false,
        "QueryBody_Original": "SELECT  'Answers' AS Post_Type, p1.ID AS [Post Link], p1.* \n  FROM Posts p1\n  JOIN Posts p2 ON p1.ID = p2.ParentId\n   AND p2.OwnerUserId = ##AnswererUserId##\n WHERE p1.OwnerUserId = ##AskerUserId##\nUNION ALL --Comments on your posts\nSELECT 'Comments on question' AS Post_Type, p1.ID AS [Post Link], p1.* \n  FROM Posts p1\n  JOIN Comments c1 ON p1.ID = c1.PostID\n   AND c1.UserId = ##AnswererUserId##\n WHERE p1.OwnerUserId = ##AskerUserId##\nUNION ALL --Comments on answers of your question\nSELECT 'Comments on other answers' AS Post_Type, p2.ID AS [Post Link], p2.* \n  FROM Posts p1\n  JOIN Posts p2 ON p1.ID = p2.ParentId\n  JOIN Comments c1 ON p2.ID = c1.PostID\n   AND c1.UserId = ##AnswererUserId##\n WHERE p1.OwnerUserId = ##AskerUserId##\n   AND p1.ID <> p2.ID"
    },
    {
        "QuerySetId": 145467,
        "Title": "Comments by decreasing score, including comment and post links",
        "Description": "Comments by decreasing score, including comment and post links",
        "QueryBody": "DECLARE  @UserId int = ##UserId##\n\nSELECT \n    Comments.Score,\n    Comments.Id AS [Comment Link],\n    Posts.Id AS [Post Link]\nFROM \n    Comments\n        INNER JOIN Posts ON Posts.Id = Comments.PostId\nWHERE \n    UserId = @UserId\nORDER BY \n    Score DESC",
        "CreationDate": "2013-11-01 13:23:49",
        "validated": false,
        "QueryBody_Original": "DECLARE  @UserId int = ##UserId##\n\nSELECT \n    Comments.Score,\n    Comments.Id AS [Comment Link],\n    Posts.Id AS [Post Link]\nFROM \n    Comments\n        INNER JOIN Posts ON Posts.Id = Comments.PostId\nWHERE \n    UserId = @UserId\nORDER BY \n    Score DESC"
    },
    {
        "QuerySetId": 146189,
        "Title": "Find out who answered first.",
        "Description": "Answered in the same second as someone else? No problem, check out the number of milliseconds it differs.",
        "QueryBody": "DECLARE  @Question int = ##Question##;\n\nSELECT p.OwnerUserId, u.DisplayName, CAST(p.CreationDate AS Date) As \"Date\", CAST(p.CreationDate As TIME) As \"Time\", p.ParentId\nFROM Posts p, Users u\nWHERE p.PostTypeId=2 AND p.ParentId=@Question AND u.Id=OwnerUserId\nORDER BY p.CreationDate ASC;",
        "CreationDate": "2013-11-05 00:46:33",
        "validated": false,
        "QueryBody_Original": "DECLARE  @Question int = ##Question##;\n\nSELECT p.OwnerUserId, u.DisplayName, CAST(p.CreationDate AS Date) As \"Date\", CAST(p.CreationDate As TIME) As \"Time\", p.ParentId\nFROM Posts p, Users u\nWHERE p.PostTypeId=2 AND p.ParentId=@Question AND u.Id=OwnerUserId\nORDER BY p.CreationDate ASC;"
    },
    {
        "QuerySetId": 147282,
        "Title": "Select Top Users from India who have answered a given tag",
        "Description": null,
        "QueryBody": "DECLARE  @TagId nvarchar(25) = '##TagId##'\n\nSELECT TOP 1000\nu.Id, u.DisplayName, u.Reputation, u.Location, count(*) as PostCount\nFROM Users u \nInner Join Posts p ON u.Id = p.OwnerUserId \nInner Join Posts q ON p.ParentId = q.Id\nInner Join PostTags pt ON q.Id = pt.PostId\nWHERE \nu.Reputation > 5000\nAND u.Location like '%India'\nAND p.PostTypeId = 2 -- Answer Type\nAND (pt.TagId = 58838 OR pt.TagId = 154) -- Use 58338 for iOS, 1386 for Android\nGROUP BY u.Id, u.DisplayName, u.Reputation, u.Location\nOrder by PostCount desc",
        "CreationDate": "2013-11-25 23:06:17",
        "validated": false,
        "QueryBody_Original": "DECLARE  @TagId nvarchar(25) = '##TagId##'\n\nSELECT TOP 1000\nu.Id, u.DisplayName, u.Reputation, u.Location, count(*) as PostCount\nFROM Users u \nInner Join Posts p ON u.Id = p.OwnerUserId \nInner Join Posts q ON p.ParentId = q.Id\nInner Join PostTags pt ON q.Id = pt.PostId\nWHERE \nu.Reputation > 5000\nAND u.Location like '%India'\nAND p.PostTypeId = 2 -- Answer Type\nAND (pt.TagId = 58838 OR pt.TagId = 154) -- Use 58338 for iOS, 1386 for Android\nGROUP BY u.Id, u.DisplayName, u.Reputation, u.Location\nOrder by PostCount desc"
    },
    {
        "QuerySetId": 147801,
        "Title": "Find Closed Answers by User",
        "Description": "shows all closed answers for the specified user",
        "QueryBody": "SELECT  p.id as [Post Link]\nFROM Posts p, PostHistory ph\nWHERE p.OwnerUserId = ##USERID##\nAND p.PostTypeId = 2\nAND ph.id = p.ParentId\nAND ph.PostHistoryTypeId = '10'",
        "CreationDate": "2020-10-13 00:23:44",
        "validated": false,
        "QueryBody_Original": "SELECT  p.id as [Post Link]\nFROM Posts p, PostHistory ph\nWHERE p.OwnerUserId = ##USERID##\nAND p.PostTypeId = 2\nAND ph.id = p.ParentId\nAND ph.PostHistoryTypeId = '10'"
    },
    {
        "QuerySetId": 147875,
        "Title": "Per-day questions, votes, answers, views",
        "Description": null,
        "QueryBody": "DECLARE  @DATE datetime = CAST(##DATE:string## AS datetime);\nDECLARE @DATE2 datetime = DATEADD(DAY, 1, @DATE);\n\nSELECT \n  ('http:\/\/math.stackexchange.com\/q\/'+CAST(p.Id AS varchar)+'|#'+CAST(p.Id AS varchar)) as 'Post ID', \n  SUM(p.ViewCount) as 'Views', \n  COUNT(v.Id) as 'Votes'\nFROM\n  Posts p LEFT JOIN\n  (SELECT * FROM PostFeedBack pfb WHERE\n      pfb.CreationDate > @DATE AND pfb.CreationDate < @DATE2\n  ) v ON p.Id = v.PostId\nWHERE \n  p.CreationDate > @DATE AND p.CreationDate < @DATE2\n  AND p.PostTypeId = 1 AND v.VoteTypeId IN (2,3)\nGROUP BY p.Id",
        "CreationDate": "2013-11-14 04:37:53",
        "validated": false,
        "QueryBody_Original": "DECLARE  @DATE datetime = CAST(##DATE:string## AS datetime);\nDECLARE @DATE2 datetime = DATEADD(DAY, 1, @DATE);\n\nSELECT \n  ('http:\/\/math.stackexchange.com\/q\/'+CAST(p.Id AS varchar)+'|#'+CAST(p.Id AS varchar)) as 'Post ID', \n  SUM(p.ViewCount) as 'Views', \n  COUNT(v.Id) as 'Votes'\nFROM\n  Posts p LEFT JOIN\n  (SELECT * FROM PostFeedBack pfb WHERE\n      pfb.CreationDate > @DATE AND pfb.CreationDate < @DATE2\n  ) v ON p.Id = v.PostId\nWHERE \n  p.CreationDate > @DATE AND p.CreationDate < @DATE2\n  AND p.PostTypeId = 1 AND v.VoteTypeId IN (2,3)\nGROUP BY p.Id"
    },
    {
        "QuerySetId": 147885,
        "Title": "My Highest Rated Comments with CreationDate",
        "Description": null,
        "QueryBody": "SELECT  TOP 250\n    PostId AS [Post Link],\n    Score,\n    Text,CreationDate\nFROM Comments\nWHERE UserId = ##UserId##\nORDER BY Score DESC",
        "CreationDate": "2013-11-14 05:06:06",
        "validated": false,
        "QueryBody_Original": "SELECT  TOP 250\n    PostId AS [Post Link],\n    Score,\n    Text,CreationDate\nFROM Comments\nWHERE UserId = ##UserId##\nORDER BY Score DESC"
    },
    {
        "QuerySetId": 148262,
        "Title": "Questions per day in a given month\/year",
        "Description": null,
        "QueryBody": "SELECT \n  DATEPART(dd,CreationDate), COUNT(Id)\nfrom\n  Posts\nwhere\n  PostTypeId = 1 \n  and DATEPART(yyyy,CreationDate) = ##Year:int##\n  and CommunityOwnedDate is null\ngroup by DATEPART(dd,CreationDate)\norder by DATEPART(dd,CreationDate) asc",
        "CreationDate": "2015-05-22 20:59:29",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 148278,
        "Title": "Questions per day in a given year",
        "Description": null,
        "QueryBody": "SELECT \n    DATEPART(yyyy,CreationDate), DATEPART(mm,CreationDate), DATEPART(dd,CreationDate), \n    COUNT(Id)\nfrom\n  Posts\nwhere\n  DATEPART(yyyy,CreationDate) = ##Year:int##\n  and CommunityOwnedDate is null\ngroup by DATEPART(yyyy,CreationDate), DATEPART(mm,CreationDate), DATEPART(dd,CreationDate)\norder by DATEPART(yyyy,CreationDate), DATEPART(mm,CreationDate), DATEPART(dd,CreationDate) asc",
        "CreationDate": "2013-11-18 22:11:59",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 148958,
        "Title": "Find Deleted Answers by User",
        "Description": "shows all deleted answers for the specified user",
        "QueryBody": "SELECT \n    p.id as [Post Link], p.LastActivityDate\nfrom posts as p\n    INNER JOIN Users u ON p.OwnerUserId = u.Id\n    INNER JOIN PostHistory h ON p.Id = h.PostId\nwhere\n    p.PostTypeId = 2 and\n    p.OwnerUserId = ##USERID## and\n    h.PostHistoryTypeId = '12'\norder by p.LastActivityDate desc",
        "CreationDate": "2015-01-07 01:16:21",
        "validated": false,
        "QueryBody_Original": "SELECT \n    p.id as [Post Link], p.LastActivityDate\nfrom posts as p\n    INNER JOIN Users u ON p.OwnerUserId = u.Id\n    INNER JOIN PostHistory h ON p.Id = h.PostId\nwhere\n    p.PostTypeId = 2 and\n    p.OwnerUserId = ##USERID## and\n    h.PostHistoryTypeId = '12'\norder by p.LastActivityDate desc"
    },
    {
        "QuerySetId": 150001,
        "Title": "Distinct >3k rep users approving and rejecting suggested edits per 30-minute window (weekdays).",
        "Description": null,
        "QueryBody": "DECLARE  @segment int = 30; -- Must be a divisor of 60, e.g. 30, \n                           -- 20, 15, 12, 10, 6, 5, 4, 3, 2, 1.\n\nSELECT\n  Time,\n  COUNT(*) Users\nFROM\n(\n  SELECT DISTINCT -- Remove DISTINCT to count moderation activity\n                  -- instead of active users.\n    UserId,\n    DATEADD(mi, DATEPART(hh, v.CreationDate)*60\n      + DATEPART(mi, v.CreationDate)\/@segment*@segment, 0) AS Time\n  FROM SuggestedEditVotes v\n  INNER JOIN Users ON Users.Id = v.UserId\n  WHERE Users.Reputation >= 3000 AND\n        ((DATEPART(dw, v.CreationDate) + @@DATEFIRST) % 7)\n            NOT IN (0, 1)\n) X\nGROUP BY Time\nORDER BY Time\n\n-- The results leave a default date (instead of CAST AS TIME)\n-- because the graphing module can only graph full datetimes.",
        "CreationDate": "2013-11-25 14:52:22",
        "validated": false,
        "QueryBody_Original": "DECLARE  @segment int = 30; -- Must be a divisor of 60, e.g. 30, \n                           -- 20, 15, 12, 10, 6, 5, 4, 3, 2, 1.\n\nSELECT\n  Time,\n  COUNT(*) Users\nFROM\n(\n  SELECT DISTINCT -- Remove DISTINCT to count moderation activity\n                  -- instead of active users.\n    UserId,\n    DATEADD(mi, DATEPART(hh, v.CreationDate)*60\n      + DATEPART(mi, v.CreationDate)\/@segment*@segment, 0) AS Time\n  FROM SuggestedEditVotes v\n  INNER JOIN Users ON Users.Id = v.UserId\n  WHERE Users.Reputation >= 3000 AND\n        ((DATEPART(dw, v.CreationDate) + @@DATEFIRST) % 7)\n            NOT IN (0, 1)\n) X\nGROUP BY Time\nORDER BY Time\n\n-- The results leave a default date (instead of CAST AS TIME)\n-- because the graphing module can only graph full datetimes."
    },
    {
        "QuerySetId": 150036,
        "Title": "Suggested edits approvals and rejections by >3k rep users per 30-minute window (weekdays).",
        "Description": null,
        "QueryBody": "DECLARE  @segment int = 30; -- Must be a divisor of 60, e.g. 30, \n                           -- 20, 15, 12, 10, 6, 5, 4, 3, 2, 1.\n\nSELECT\n  Time,\n  COUNT(*) Activity\nFROM\n(\n  SELECT\n    DATEADD(mi, DATEPART(hh, v.CreationDate)*60\n      + DATEPART(mi, v.CreationDate)\/@segment*@segment, 0) AS Time\n  FROM SuggestedEditVotes v\n  INNER JOIN Users ON Users.Id = v.UserId\n  WHERE Users.Reputation >= 3000 AND\n        ((DATEPART(dw, v.CreationDate) + @@DATEFIRST) % 7)\n            NOT IN (0, 1)\n) X\nGROUP BY Time\nORDER BY Time\n\n-- The results leave a default date (instead of CAST AS TIME)\n-- because the graphing module can only graph full datetimes.",
        "CreationDate": "2013-11-25 14:52:31",
        "validated": false,
        "QueryBody_Original": "DECLARE  @segment int = 30; -- Must be a divisor of 60, e.g. 30, \n                           -- 20, 15, 12, 10, 6, 5, 4, 3, 2, 1.\n\nSELECT\n  Time,\n  COUNT(*) Activity\nFROM\n(\n  SELECT\n    DATEADD(mi, DATEPART(hh, v.CreationDate)*60\n      + DATEPART(mi, v.CreationDate)\/@segment*@segment, 0) AS Time\n  FROM SuggestedEditVotes v\n  INNER JOIN Users ON Users.Id = v.UserId\n  WHERE Users.Reputation >= 3000 AND\n        ((DATEPART(dw, v.CreationDate) + @@DATEFIRST) % 7)\n            NOT IN (0, 1)\n) X\nGROUP BY Time\nORDER BY Time\n\n-- The results leave a default date (instead of CAST AS TIME)\n-- because the graphing module can only graph full datetimes."
    },
    {
        "QuerySetId": 150358,
        "Title": "Display all comments of a given user",
        "Description": null,
        "QueryBody": "DECLARE  @UserId int = ##UserId##\n\nSELECT Comments.Text\nFROM Comments\nWHERE Comments.UserId = @UserId",
        "CreationDate": "2014-03-02 12:26:39",
        "validated": false,
        "QueryBody_Original": "DECLARE  @UserId int = ##UserId##\n\nSELECT Comments.Text\nFROM Comments\nWHERE Comments.UserId = @UserId"
    },
    {
        "QuerySetId": 150454,
        "Title": "Copy editor badge edits left",
        "Description": null,
        "QueryBody": "DECLARE  @userid int = ##UserId##\n\nSELECT 500 - COUNT(*) AS EditsLeft\nFROM (\n    SELECT   PostID\n    FROM     PostHistory ph\n    WHERE    PostHistoryTypeId IN (4,5)\n        AND  PostId NOT IN (\n            SELECT p.Id\n            FROM   Posts p\n            WHERE  p.OwnerUserId = ph.UserId\n        )\n        AND UserID = @userid\n    GROUP BY PostID\n) AS bar",
        "CreationDate": "2013-11-27 17:01:06",
        "validated": false,
        "QueryBody_Original": "DECLARE  @userid int = ##UserId##\n\nSELECT 500 - COUNT(*) AS EditsLeft\nFROM (\n    SELECT   PostID\n    FROM     PostHistory ph\n    WHERE    PostHistoryTypeId IN (4,5)\n        AND  PostId NOT IN (\n            SELECT p.Id\n            FROM   Posts p\n            WHERE  p.OwnerUserId = ph.UserId\n        )\n        AND UserID = @userid\n    GROUP BY PostID\n) AS bar"
    },
    {
        "QuerySetId": 150918,
        "Title": "Vote history for a post",
        "Description": null,
        "QueryBody": "DECLARE  @postId int = ##PostId##\n\nSELECT \n\n    Votes.CreationDate AS VoteDate,\n    VoteTypes.Name AS VoteTypeName\n    \nFROM Posts, Votes, VoteTypes \n\nWHERE \n    \n    Votes.PostId = Posts.Id \n    AND Votes.PostId = @postId\n\nORDER BY Votes.CreationDate DESC",
        "CreationDate": "2013-11-29 14:29:11",
        "validated": false,
        "QueryBody_Original": "DECLARE  @postId int = ##PostId##\n\nSELECT \n\n    Votes.CreationDate AS VoteDate,\n    VoteTypes.Name AS VoteTypeName\n    \nFROM Posts, Votes, VoteTypes \n\nWHERE \n    \n    Votes.PostId = Posts.Id \n    AND Votes.PostId = @postId\n\nORDER BY Votes.CreationDate DESC"
    },
    {
        "QuerySetId": 150951,
        "Title": "Me & my competitors answers",
        "Description": null,
        "QueryBody": "SELECT  *, Accepted*100.0\/Answers AS Ratio\nFROM (\n  SELECT U.Id, U.DisplayName, U.Reputation,\n    COUNT(*) AS Answers,\n    COUNT(*)-COUNT(NULLIF(A.Id, Q.AcceptedAnswerId)) AS Accepted\n  FROM Posts AS MyA\n  JOIN Posts AS Q ON Q.Id = MyA.ParentId\n  JOIN Posts AS A ON A.ParentId=Q.Id\n  JOIN Users AS U ON U.Id = A.OwnerUserId\n  WHERE MyA.OwnerUserId=##UserId##\n  GROUP BY U.Id, U.DisplayName, U.Reputation\n) AS t\nORDER BY Accepted*1.0\/Answers DESC, Accepted DESC, Reputation DESC",
        "CreationDate": "2013-11-29 20:18:59",
        "validated": false,
        "QueryBody_Original": "SELECT  *, Accepted*100.0\/Answers AS Ratio\nFROM (\n  SELECT U.Id, U.DisplayName, U.Reputation,\n    COUNT(*) AS Answers,\n    COUNT(*)-COUNT(NULLIF(A.Id, Q.AcceptedAnswerId)) AS Accepted\n  FROM Posts AS MyA\n  JOIN Posts AS Q ON Q.Id = MyA.ParentId\n  JOIN Posts AS A ON A.ParentId=Q.Id\n  JOIN Users AS U ON U.Id = A.OwnerUserId\n  WHERE MyA.OwnerUserId=##UserId##\n  GROUP BY U.Id, U.DisplayName, U.Reputation\n) AS t\nORDER BY Accepted*1.0\/Answers DESC, Accepted DESC, Reputation DESC"
    },
    {
        "QuerySetId": 151000,
        "Title": "Well roundedness of users (WORK IN PROGRESS)",
        "Description": null,
        "QueryBody": "SELECT  *\n    FROM Users\n        JOIN Posts\n            ON Posts.OwnerUserId = Users.Id\n    WHERE CAST(Users.Id AS NVARCHAR) = ##UserId:string## OR Users.DisplayName = ##UserId##;",
        "CreationDate": "2013-11-29 23:32:58",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 151448,
        "Title": "Number of questions with accepted answers from user",
        "Description": null,
        "QueryBody": "SELECT \nCOUNT(*) AS [Number without Accepted Answers]\n\nFROM posts\n\nWHERE  OwnerUserId = ##UserId##  --your SO id\n   AND PostTypeId=1  -- questions\n   AND AcceptedAnswerId is NULL\n   \nSELECT\nCOUNT(*) AS [Number of Questions]\n\nFROM posts\n\nWHERE  OwnerUserId = ##UserId##  --your SO id\n   AND PostTypeId=1  -- questions",
        "CreationDate": "2013-12-03 02:23:32",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 151453,
        "Title": "Number of questions with accepted answers",
        "Description": null,
        "QueryBody": "DECLARE  @id int\n\nSELECT\nid = @id\n\nFROM users\n\nSelect \nCOUNT(*) AS [Number without Accepted Answers]\n\nFrom posts\n\nWHERE  OwnerUserId = @id\n   AND PostTypeId=1  -- questions",
        "CreationDate": "2013-12-09 03:30:56",
        "validated": false,
        "QueryBody_Original": "DECLARE  @id int\n\nSELECT\nid = @id\n\nFROM users\n\nSelect \nCOUNT(*) AS [Number without Accepted Answers]\n\nFrom posts\n\nWHERE  OwnerUserId = @id\n   AND PostTypeId=1  -- questions"
    },
    {
        "QuerySetId": 151511,
        "Title": "By City in Reputation Range",
        "Description": null,
        "QueryBody": "SELECT \nROW_NUMBER() OVER(ORDER BY Reputation DESC) AS [#], \n    Id AS [User Link], Location, Age,LastAccessDate,\n    Reputation\nFROM\n    Users\nWHERE\n    LOWER(Location) LIKE LOWER('%##Country##%')\n    AND Reputation >  ##reputation:int##\nORDER BY\n    Reputation DESC;",
        "CreationDate": "2013-12-03 05:38:46",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 151863,
        "Title": "Average score of questions by creation date",
        "Description": null,
        "QueryBody": "DECLARE  @startDate date = '##startDate##';\nDECLARE @endDate date = '##endDate##';\n\nselect\n  cast( CreationDate as date),\n  AvgScore = round(AVG( cast( Score as float ) ),2)\n--  TotalQues = count(*)\nfrom\n  Posts\nwhere\n  PostTypeId = 1 and\n  cast( CreationDate as date) between @startDate and @endDate and ClosedDate is null and CommunityOwnedDate is null\ngroup by cast ( CreationDate as date )\norder by cast ( CreationDate as date )",
        "CreationDate": "2013-12-06 00:05:27",
        "validated": false,
        "QueryBody_Original": "DECLARE  @startDate date = '##startDate##';\nDECLARE @endDate date = '##endDate##';\n\nselect\n  cast( CreationDate as date),\n  AvgScore = round(AVG( cast( Score as float ) ),2)\n--  TotalQues = count(*)\nfrom\n  Posts\nwhere\n  PostTypeId = 1 and\n  cast( CreationDate as date) between @startDate and @endDate and ClosedDate is null and CommunityOwnedDate is null\ngroup by cast ( CreationDate as date )\norder by cast ( CreationDate as date )"
    },
    {
        "QuerySetId": 151873,
        "Title": "Recent top answerers in the given tag",
        "Description": null,
        "QueryBody": "DECLARE  @Tag NVARCHAR(25) = '##Tag##'\n\nSELECT TOP 20 \n    Users.DisplayName,\n    SUM(Score) AS Score \nFROM Tags\n    INNER JOIN PostTags ON PostTags.TagId = Tags.id\n    INNER JOIN Posts ON Posts.ParentId = PostTags.PostId\n    INNER JOIN Users ON Posts.OwnerUserId = Users.Id\nWHERE Posts.CommunityOwnedDate IS NULL \n    AND Tags.TagName = @Tag\n    AND Posts.CreationDate > '2013\/10\/01'\n    AND Posts.CreationDate < '2013\/12\/01'\nGROUP BY Users.DisplayName\nORDER BY Score DESC",
        "CreationDate": "2013-12-05 18:57:30",
        "validated": false,
        "QueryBody_Original": "DECLARE  @Tag NVARCHAR(25) = '##Tag##'\n\nSELECT TOP 20 \n    Users.DisplayName,\n    SUM(Score) AS Score \nFROM Tags\n    INNER JOIN PostTags ON PostTags.TagId = Tags.id\n    INNER JOIN Posts ON Posts.ParentId = PostTags.PostId\n    INNER JOIN Users ON Posts.OwnerUserId = Users.Id\nWHERE Posts.CommunityOwnedDate IS NULL \n    AND Tags.TagName = @Tag\n    AND Posts.CreationDate > '2013\/10\/01'\n    AND Posts.CreationDate < '2013\/12\/01'\nGROUP BY Users.DisplayName\nORDER BY Score DESC"
    },
    {
        "QuerySetId": 151999,
        "Title": "Does post length reduce score?",
        "Description": null,
        "QueryBody": "DECLARE  @line_length int = 50\n\nselect len(Body)\/@line_length, avg(cast(Score as float))--, avg(cast(ViewCount as float)) \nfrom Posts\nwhere Score > 1\n      and ViewCount > 0\n      and len(Body) between 1 and 1500\ngroup by len(Body)\/@line_length\norder by len(Body)\/@line_length;",
        "CreationDate": "2013-12-08 10:42:41",
        "validated": false,
        "QueryBody_Original": "DECLARE  @line_length int = 50\n\nselect len(Body)\/@line_length, avg(cast(Score as float))--, avg(cast(ViewCount as float)) \nfrom Posts\nwhere Score > 1\n      and ViewCount > 0\n      and len(Body) between 1 and 1500\ngroup by len(Body)\/@line_length\norder by len(Body)\/@line_length;"
    },
    {
        "QuerySetId": 152044,
        "Title": "Average number of views of questions by creation date",
        "Description": null,
        "QueryBody": "DECLARE  @startDate date = '##startDate##';\nDECLARE @endDate date = '##endDate##';\n\nselect\n  cast( CreationDate as date),\n  AvgViews = round(AVG( cast( ViewCount as float ) ),2)\n--  TotalQues = count(*)\nfrom\n  Posts\nwhere\n  PostTypeId = 1 and\n  cast( CreationDate as date) between @startDate and @endDate and ClosedDate is null and CommunityOwnedDate is null\ngroup by cast ( CreationDate as date )\norder by cast ( CreationDate as date )",
        "CreationDate": "2013-12-06 15:34:51",
        "validated": false,
        "QueryBody_Original": "DECLARE  @startDate date = '##startDate##';\nDECLARE @endDate date = '##endDate##';\n\nselect\n  cast( CreationDate as date),\n  AvgViews = round(AVG( cast( ViewCount as float ) ),2)\n--  TotalQues = count(*)\nfrom\n  Posts\nwhere\n  PostTypeId = 1 and\n  cast( CreationDate as date) between @startDate and @endDate and ClosedDate is null and CommunityOwnedDate is null\ngroup by cast ( CreationDate as date )\norder by cast ( CreationDate as date )"
    },
    {
        "QuerySetId": 152456,
        "Title": "List of Users in a given any case location",
        "Description": "This query lists all users in a given any case location.\r\nSorted by reputation or location.\r\n",
        "QueryBody": "DECLARE  @location varchar = ##location##\nselect  Id as [User Link], location, reputation\n\nfrom users\n\nwhere upper(location) like upper('%##location##%')\n\norder by reputation desc\n--order by location asc",
        "CreationDate": "2013-12-14 10:27:03",
        "validated": false,
        "QueryBody_Original": "DECLARE  @location varchar = ##location##\nselect  Id as [User Link], location, reputation\n\nfrom users\n\nwhere upper(location) like upper('%##location##%')\n\norder by reputation desc\n--order by location asc"
    },
    {
        "QuerySetId": 152776,
        "Title": "Site ranking and reputation difference to others with similar rank",
        "Description": "Shows rank on site and difference in reputation of users up to 10 ranks behind and 40 ranks ahead of the specified user ",
        "QueryBody": "DECLARE  @userRep int = (select reputation from users where id = ##UserId##);\nDECLARE @userRank int = (\n  select rank from (\n    select id, row_number() over (order by reputation desc) as rank\n    from users\n  )x\n  where id = ##UserId##);\n\nselect * from (\nselect\n  id [User Link],\n  row_number() over (order by reputation desc) Rank,\n  Reputation,\n  Reputation - @userRep [Points behind]\n  from Users) x  \nwhere Rank between @userRank - 40 and @userRank + 10 \norder by Rank desc",
        "CreationDate": "2014-03-13 04:08:23",
        "validated": false,
        "QueryBody_Original": "DECLARE  @userRep int = (select reputation from users where id = ##UserId##);\nDECLARE @userRank int = (\n  select rank from (\n    select id, row_number() over (order by reputation desc) as rank\n    from users\n  )x\n  where id = ##UserId##);\n\nselect * from (\nselect\n  id [User Link],\n  row_number() over (order by reputation desc) Rank,\n  Reputation,\n  Reputation - @userRep [Points behind]\n  from Users) x  \nwhere Rank between @userRank - 40 and @userRank + 10 \norder by Rank desc"
    },
    {
        "QuerySetId": 152780,
        "Title": "Total upvotes on questions, per day",
        "Description": null,
        "QueryBody": "DECLARE  @startDate date = '##startDate##';\nDECLARE @endDate date = '##endDate##';\n\nselect\n  v.CreationDate,\n  QuestionUpVotes = count(*)\nfrom\n  Votes v\ninner join posts p on p.Id = v.PostId \n  where p.PostTypeId = 1 and\n  v.VoteTypeId = 2 and\n  v.CreationDate between @startDate and @endDate\ngroup by v.CreationDate\norder by v.CreationDate",
        "CreationDate": "2013-12-10 19:08:49",
        "validated": false,
        "QueryBody_Original": "DECLARE  @startDate date = '##startDate##';\nDECLARE @endDate date = '##endDate##';\n\nselect\n  v.CreationDate,\n  QuestionUpVotes = count(*)\nfrom\n  Votes v\ninner join posts p on p.Id = v.PostId \n  where p.PostTypeId = 1 and\n  v.VoteTypeId = 2 and\n  v.CreationDate between @startDate and @endDate\ngroup by v.CreationDate\norder by v.CreationDate"
    },
    {
        "QuerySetId": 152781,
        "Title": "Total upvotes on answers, per day",
        "Description": null,
        "QueryBody": "DECLARE  @startDate date = '##startDate##';\nDECLARE @endDate date = '##endDate##';\n\nselect\n  v.CreationDate,\n  AnswerUpVotes = count(*)\nfrom\n  Votes v\ninner join posts p on p.Id = v.PostId \n  where p.PostTypeId = 2 and\n  v.VoteTypeId = 2 and\n  v.CreationDate between @startDate and @endDate\ngroup by v.CreationDate\norder by v.CreationDate",
        "CreationDate": "2013-12-10 19:07:46",
        "validated": false,
        "QueryBody_Original": "DECLARE  @startDate date = '##startDate##';\nDECLARE @endDate date = '##endDate##';\n\nselect\n  v.CreationDate,\n  AnswerUpVotes = count(*)\nfrom\n  Votes v\ninner join posts p on p.Id = v.PostId \n  where p.PostTypeId = 2 and\n  v.VoteTypeId = 2 and\n  v.CreationDate between @startDate and @endDate\ngroup by v.CreationDate\norder by v.CreationDate"
    },
    {
        "QuerySetId": 152784,
        "Title": "Total downvotes on answers, per day",
        "Description": null,
        "QueryBody": "DECLARE  @startDate date = '##startDate##';\nDECLARE @endDate date = '##endDate##';\n\nselect\n  v.CreationDate,\n  AnswerDownVotes = count(*)\nfrom\n  Votes v\ninner join posts p on p.Id = v.PostId \n  where p.PostTypeId = 2 and\n  v.VoteTypeId = 3 and\n  v.CreationDate between @startDate and @endDate\ngroup by v.CreationDate\norder by v.CreationDate",
        "CreationDate": "2017-10-04 23:26:41",
        "validated": false,
        "QueryBody_Original": "DECLARE  @startDate date = '##startDate##';\nDECLARE @endDate date = '##endDate##';\n\nselect\n  v.CreationDate,\n  AnswerDownVotes = count(*)\nfrom\n  Votes v\ninner join posts p on p.Id = v.PostId \n  where p.PostTypeId = 2 and\n  v.VoteTypeId = 3 and\n  v.CreationDate between @startDate and @endDate\ngroup by v.CreationDate\norder by v.CreationDate"
    },
    {
        "QuerySetId": 153011,
        "Title": "My winner and loser answers",
        "Description": null,
        "QueryBody": "SELECT \n    CASE \n        WHEN Q.AcceptedAnswerId=A.Id THEN 'Winner'\n        WHEN Q.AcceptedAnswerId IS NULL THEN '...'\n        ELSE 'Loser'\n    END AS Status,\n    A.Id AS [Post Link],\n    A.Score,\n    CASE\n        WHEN A.Id <> W.Id THEN W.Score\n        ELSE NULL\n    END AS [Winner Score],\n    CASE\n      WHEN A.Id <> W.Id THEN (SELECT MAX(Posts.Score) FROM Posts WHERE ParentId=Q.Id) \n      ELSE NULL\n    END AS [Max Score],\n    A.CreationDate AS [Date],\n    Q.LastActivityDate\nFROM Posts AS A\nJOIN Posts AS Q ON Q.Id = A.ParentId\nLEFT JOIN Posts AS W ON W.Id = Q.AcceptedAnswerId\nWHERE A.OwnerUserId=##UserId##\n--AND W.Score < A.Score\n--ORDER BY COALESCE(Q.LastActivityDate, A.LastEditDate, A.CreationDate) DESC;\nORDER BY Score DESC;",
        "CreationDate": "2017-08-17 19:51:08",
        "validated": false,
        "QueryBody_Original": "SELECT \n    CASE \n        WHEN Q.AcceptedAnswerId=A.Id THEN 'Winner'\n        WHEN Q.AcceptedAnswerId IS NULL THEN '...'\n        ELSE 'Loser'\n    END AS Status,\n    A.Id AS [Post Link],\n    A.Score,\n    CASE\n        WHEN A.Id <> W.Id THEN W.Score\n        ELSE NULL\n    END AS [Winner Score],\n    CASE\n      WHEN A.Id <> W.Id THEN (SELECT MAX(Posts.Score) FROM Posts WHERE ParentId=Q.Id) \n      ELSE NULL\n    END AS [Max Score],\n    A.CreationDate AS [Date],\n    Q.LastActivityDate\nFROM Posts AS A\nJOIN Posts AS Q ON Q.Id = A.ParentId\nLEFT JOIN Posts AS W ON W.Id = Q.AcceptedAnswerId\nWHERE A.OwnerUserId=##UserId##\n--AND W.Score < A.Score\n--ORDER BY COALESCE(Q.LastActivityDate, A.LastEditDate, A.CreationDate) DESC;\nORDER BY Score DESC;"
    },
    {
        "QuerySetId": 153012,
        "Title": "Open posts with closed votes by year",
        "Description": null,
        "QueryBody": "DECLARE  @year int = ##year##\n\nselect p.id AS [Post Link],\n  count(v.id) TotalVotes\nfrom posts p\ninner join votes v\n  on p.id = v.postid\nwhere v.votetypeid = 6\n  and p.closeddate is null\n  and year(p.creationdate) = @year\n  and p.viewcount < 100 \ngroup by p.id\norder by totalvotes desc",
        "CreationDate": "2013-12-11 21:17:52",
        "validated": false,
        "QueryBody_Original": "DECLARE  @year int = ##year##\n\nselect p.id AS [Post Link],\n  count(v.id) TotalVotes\nfrom posts p\ninner join votes v\n  on p.id = v.postid\nwhere v.votetypeid = 6\n  and p.closeddate is null\n  and year(p.creationdate) = @year\n  and p.viewcount < 100 \ngroup by p.id\norder by totalvotes desc"
    },
    {
        "QuerySetId": 153166,
        "Title": "User List: Top N - India - with false positive exclusions",
        "Description": "List of Users in India.",
        "QueryBody": "SELECT \n    Top ##Top##\n    ROW_NUMBER() OVER(ORDER BY Reputation DESC) AS [#], \n    Id AS [User Link], \n    Reputation,\n    Location\nFROM\n    Users\n    \nWHERE\n        \n            (LOWER(Location) LIKE '%india%' \n            -- http:\/\/sustainablesources.com\/resources\/country-abbreviations\/\n              OR UPPER(Location) LIKE '%IND'\n              \n              -- cannot search for IN this is a state in the United States of America\n              \n              \n                  )\n                  \n   and LEN(Location) > 1 \n    \n    -- Temporarily sort by location to more easily pick out false positive entries\n    --ORDER BY Location ASC;",
        "CreationDate": "2013-12-20 17:42:00",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 153205,
        "Title": "Test: Remove locations not related to India",
        "Description": "Locations are moved form the results. Any remaining not India related can be added to to list to exclude.",
        "QueryBody": "SELECT    RankNo, \n         [User Link], \n         Reputation, \n         --DisplayName, \n         Location\n\nFROM\n         (\n            SELECT Id [User Link], Reputation, Location,\n                   DENSE_RANK() OVER (ORDER BY Reputation DESC) RankNo\n            FROM   Users\n            WHERE \n           --LOWER(Location) LIKE '%india%' \n           --   OR\n              (Location) LIKE '%Indianola%'\n              \n              and not(\n              (Location) LIKE '%Indonesia%'\n                or Location LIKE '%Independence%'\n                 OR LOWER(Location) LIKE '%indiana%' \n                 \n                 OR Location LIKE '%Indianola%'\n                 )\n              ) derivedtable\n\nWHERE    RankNo <= ##MaximumRankNo##\nORDER    BY RankNo\n--ORDER    BY location",
        "CreationDate": "2013-12-12 17:23:03",
        "validated": false,
        "QueryBody_Original": "SELECT    RankNo, \n         [User Link], \n         Reputation, \n         --DisplayName, \n         Location\n\nFROM\n         (\n            SELECT Id [User Link], Reputation, Location,\n                   DENSE_RANK() OVER (ORDER BY Reputation DESC) RankNo\n            FROM   Users\n            WHERE \n           --LOWER(Location) LIKE '%india%' \n           --   OR\n              (Location) LIKE '%Indianola%'\n              \n              and not(\n              (Location) LIKE '%Indonesia%'\n                or Location LIKE '%Independence%'\n                 OR LOWER(Location) LIKE '%indiana%' \n                 \n                 OR Location LIKE '%Indianola%'\n                 )\n              ) derivedtable\n\nWHERE    RankNo <= ##MaximumRankNo##\nORDER    BY RankNo\n--ORDER    BY location"
    },
    {
        "QuerySetId": 153375,
        "Title": "Count: Month Users Last Accessed Site",
        "Description": "Find the number of active users by entering the current year.",
        "QueryBody": "SELECT \nmonth(LastAccessDate), Count(Id)\nfrom Users\nwhere year(LastAccessDate) = ##Year## and Reputation >= ##MinRep:int?102##\ngroup by month(LastAccessDate)\norder by month(LastAccessDate)",
        "CreationDate": "2014-01-15 17:50:59",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 153385,
        "Title": "User List: Top N - Location\/abbreviation",
        "Description": "Enter more than one character for location.",
        "QueryBody": "SELECT \n    Top ##Top##\n    ROW_NUMBER() OVER(ORDER BY Reputation DESC) AS [#], \n    Id AS [User Link], \n    Reputation,\n    Location,\n    --CreationDate,\n    LastAccessDate,\n    UpVotes,\n    DownVotes\n    \nFROM\n    Users\nWHERE\n                       \n    lower(Location) like lower('%##Location##%') -- anywhere in Location \/ not case sensitive\n    \n    ---- http:\/\/sustainablesources.com\/resources\/country-abbreviations\/\n    or Location like UPPER('%##LocAbbreviation##') -- last characters\n                  \n    and LEN(Location) > 1",
        "CreationDate": "2013-12-21 22:12:21",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 153393,
        "Title": "User List: Highest (upvotes + downvotes) per day ratio",
        "Description": "from http:\/\/data.stackexchange.com\/stackoverflow\/query\/13007\/top-100-users-having-highest-votes-per-day-ratio\r\nExcludes community user.",
        "QueryBody": "SELECT  top ##Top##\n     id [User Link]\n     , datediff(dd, creationdate, GETDATE() )\"Days\"\n     , upvotes\n     , downvotes\n     ,(upvotes+downvotes) \"Votes\"\n     , round(cast(nullif((upvotes+downvotes), 0)as float) \/ datediff(dd, creationdate, GETDATE()),2)  \"Votes\/Day Ratio\"\nfrom users\nwhere  id <> -1\nand  (upvotes+downvotes)> ##MinTotalVotes:int?200##\norder by \"Votes\/Day Ratio\" desc",
        "CreationDate": "2014-01-12 23:05:19",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 153489,
        "Title": "New Users with Reputation > 5 by Day",
        "Description": "New Users with Reputation > 5 by Day",
        "QueryBody": "SELECT \n    CONVERT(DATETIME, CONVERT(VARCHAR(16), UUU.CreationDate, 106)) 'Day'\n    , COUNT(*)\n FROM\n    Users UUU \n WHERE\n    Reputation >= 5\n GROUP BY\n    CONVERT(DATETIME, CONVERT(VARCHAR(16), UUU.CreationDate, 106))\nORDER BY\n  1",
        "CreationDate": "2013-12-13 19:19:57",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 153490,
        "Title": "User Reputation by User Creation Date",
        "Description": "Shows the number of new Users per month by Reputation. \r\n\r\nShows an increase in users with just 1 Reputation over time.",
        "QueryBody": "SELECT \n    subqCreationDays.[Month]\n    , subqRep1.[Count]\nFROM\n    (\n    SELECT\n        DISTINCT\n        DATEADD(m, DATEDIFF(m, 0, CreationDate), 0) 'Month'    \n    FROM\n        Users\n    )subqCreationDays\nINNER JOIN (\n            SELECT\n                DATEADD(m, DATEDIFF(m, 0, CreationDate), 0) 'Month'\n                , COUNT(*) 'Count'\n            FROM\n                Users\n            WHERE\n                Reputation = 1\n            GROUP BY\n                DATEADD(m, DATEDIFF(m, 0, CreationDate), 0)\n            )subqRep1 ON subqCreationDays.[Month] = subqRep1.[Month]\nORDER BY\n  1",
        "CreationDate": "2013-12-13 19:25:17",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 153587,
        "Title": "Recent questions from reputable users ",
        "Description": null,
        "QueryBody": "SELECT  TOP 500 p.CreationDate, p.Id AS [Post Link], p.AnswerCount, p.Tags \nFROM Posts p INNER JOIN Users u ON p.OwnerUserId = u.Id\nWHERE u.Reputation >= ##MinReputation## AND p.PostTypeId = 1 AND p.Score>=0 AND ClosedDate IS NULL\nORDER BY p.CreationDate DESC",
        "CreationDate": "2013-12-14 12:51:15",
        "validated": false,
        "QueryBody_Original": "SELECT  TOP 500 p.CreationDate, p.Id AS [Post Link], p.AnswerCount, p.Tags \nFROM Posts p INNER JOIN Users u ON p.OwnerUserId = u.Id\nWHERE u.Reputation >= ##MinReputation## AND p.PostTypeId = 1 AND p.Score>=0 AND ClosedDate IS NULL\nORDER BY p.CreationDate DESC"
    },
    {
        "QuerySetId": 153664,
        "Title": "Old questions that can be deleted with a downvote",
        "Description": "Questions older than a year that you can mark for deletion by simply downvoting them. The rules are detailed here: http:\/\/meta.stackoverflow.com\/a\/92006.\r\n\r\nThe view count rules are relaxed to 2x the question age because those might fail to keep up a steady stream of views at some point in the future.",
        "QueryBody": "DECLARE  @DataDumpDate AS datetime\nSELECT  @DataDumpDate = MAX(CreationDate)\nFROM    PostHistory\n\nSELECT Score,\n       Id                                                                AS [Post Link],\n       CASE WHEN ClosedDate         IS NOT NULL THEN 'Yes' ELSE NULL END AS Closed,\n       CASE WHEN CommunityOwnedDate IS NOT NULL THEN 'Yes' ELSE NULL END AS Wiki,\n       OwnerUserId                                                       AS [User Link]\nFROM   Posts\nWHERE  PostTypeId = 1\n       AND (Score <= 0)\n       AND (AnswerCount = 0 OR AnswerCount IS NULL)\n       AND DATEDIFF(day, CreationDate, @DataDumpDate) > 30\nORDER  BY Score ASC, CreationDate ASC",
        "CreationDate": "2016-09-17 19:15:24",
        "validated": false,
        "QueryBody_Original": "DECLARE  @DataDumpDate AS datetime\nSELECT  @DataDumpDate = MAX(CreationDate)\nFROM    PostHistory\n\nSELECT Score,\n       Id                                                                AS [Post Link],\n       CASE WHEN ClosedDate         IS NOT NULL THEN 'Yes' ELSE NULL END AS Closed,\n       CASE WHEN CommunityOwnedDate IS NOT NULL THEN 'Yes' ELSE NULL END AS Wiki,\n       OwnerUserId                                                       AS [User Link]\nFROM   Posts\nWHERE  PostTypeId = 1\n       AND (Score <= 0)\n       AND (AnswerCount = 0 OR AnswerCount IS NULL)\n       AND DATEDIFF(day, CreationDate, @DataDumpDate) > 30\nORDER  BY Score ASC, CreationDate ASC"
    },
    {
        "QuerySetId": 153827,
        "Title": "User List: Top N - Kuwait - with false positive exclusion",
        "Description": "List of users in Kuwait.",
        "QueryBody": "SELECT \n    Top ##Top##\n    ROW_NUMBER() OVER(ORDER BY Reputation DESC) AS [#], \n    Id AS [User Link], \n    Reputation,\n    Location,\n    --CreationDate,\n    LastAccessDate,\n    UpVotes,\n    DownVotes\n    \nFROM\n    Users\n    \nWHERE\n     (\n      lower(Location) LIKE '%kuwait%'\n      -- http:\/\/sustainablesources.com\/resources\/country-abbreviations\/               \n      OR Location LIKE '%KW'\n     )\n     \n     -- exclusions\n     and not\n     (          \n      lower(Location) LIKE '%ontario%' -- Kitchener-Waterloo KW Ontario         \n     )                 \n         \n    and LEN(Location) > 1 \n    --and Reputation > 1\n    \n    -- Temporarily sort by location to more easily pick out false positive entries\n    --ORDER BY Location ASC;",
        "CreationDate": "2013-12-22 19:51:15",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 153846,
        "Title": "User Count: X Reputation and higher",
        "Description": null,
        "QueryBody": "WITH  X Reputation or Higher\n-- This query does a simple count of all users in the database WITH the specified minimum reputation.\n\nSELECT Count = COUNT(*)\n\n  FROM Users\n  \n    WHERE Reputation >= '##reputation##'",
        "CreationDate": "2013-12-16 02:07:04",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 153851,
        "Title": "User List: Highest upvotes per day ratio",
        "Description": "from http:\/\/data.stackexchange.com\/stackoverflow\/query\/13007\/top-100-users-having-highest-votes-per-day-ratio\r\nExcludes community user.",
        "QueryBody": "SELECT  top ##Top##\n     id [User Link]\n     , datediff(dd, creationdate, GETDATE() )\"Days\"\n     , upvotes\n     , round(cast(nullif(upvotes, 0)as float) \/ datediff(dd, creationdate, GETDATE()),2)  \"UpVotes\/Day Ratio\"\nfrom users\nwhere  id <> -1\nand  upvotes > ##MinUpVotes:int?200##\norder by \"UpVotes\/Day Ratio\" desc",
        "CreationDate": "2014-01-12 23:10:07",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 153857,
        "Title": "Top N Users in Country",
        "Description": "from  http:\/\/data.stackexchange.com\/stackoverflow\/query\/148176\/top-users-by-country",
        "QueryBody": "SELECT \n    Top ##Top##\n    ROW_NUMBER() OVER(ORDER BY Reputation DESC) AS [#], \n    Id AS [User Link], \n    Reputation,\n    Location\nFROM\n    Users\nWHERE\n     LOWER(Location) LIKE LOWER('%##FullCountryName##%')\n     \n     -- http:\/\/sustainablesources.com\/resources\/country-abbreviations\/\n  OR (Location) LIKE UPPER('%##ShortCountryName##') -- last characters\n  \nORDER BY\n    Reputation DESC;\n    \n    -- Sort by location to more easily pick out false positive entries\n    --Location ASC;",
        "CreationDate": "2013-12-21 05:32:48",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 153873,
        "Title": "User List: DownVotes and percentage",
        "Description": null,
        "QueryBody": "SELECT  TOP ##MaxNumUsers##\n  \n  ROW_NUMBER() OVER(ORDER BY Reputation DESC) AS [# by Rep],\n  Id as [User Link],\n  ROW_NUMBER() OVER(ORDER BY DownVotes DESC) AS [# by DownVotes],\n  \n  UpVotes as [Up Votes],\n  DownVotes [Down Votes],\n  UpVotes - DownVotes as [Net Votes],\n  \n  ROUND((100.0 * DownVotes \/ (UpVotes + DownVotes) ), 2) as [Down Votes PCT]\n  \n  FROM Users\n  WHERE DownVotes > ##DownVotesGreaterThan:int?3999##\n   and UpVotes >= ##MinUpVotes:int?0##\n   \n  --ORDER BY [Down Votes PCT] DESC, [Net Votes] DESC\n  \n  -- Alternate ordering\n  --ORDER BY [Net Votes] ASC, [Down Votes PCT] DESC\n  ORDER BY [Down Votes] DESC, [Down Votes PCT] DESC",
        "CreationDate": "2014-01-09 07:46:32",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 153974,
        "Title": "User Count: Reputation 1 and Greater Than 1",
        "Description": "The automatic query is not correct. Run manually to see the results.",
        "QueryBody": "SELECT  AVG(reputation) AS AvgRepGt1 FROM users\n  WHERE reputation > 1\n  \nSELECT AVG(reputation) AS AvgRepAll FROM users\n  WHERE reputation > 0\n\n\nSELECT COUNT(*) AS NumUsersEq1\n  FROM users WHERE reputation = 1\n\nSELECT COUNT(*) AS NumUsersGt1\n  FROM users WHERE reputation > 1\n\nSELECT Count(*) AS NumUsers\n  From users WHERE reputation > 0\n \n\nSELECT reputation, COUNT(*) AS NumUsers\n  FROM Users\n  WHERE reputation IN (90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110)\n   \n  GROUP BY reputation\n  ORDER BY reputation",
        "CreationDate": "2013-12-18 07:45:57",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 154106,
        "Title": "Top N Users: New Your City",
        "Description": null,
        "QueryBody": "SELECT   RankNo,\n        [User Link], \n        Reputation, \n        Location\n\nFROM\n       (\n        SELECT Id [User Link], Reputation, Location,\n               DENSE_RANK() OVER (ORDER BY Reputation DESC) RankNo\n        \n          FROM   Users\n             \n            WHERE \n              (\n                 lower(Location) LIKE '%new york city%'\n              or lower(Location) LIKE '%nyc%'\n               )   \n                \n             -- exclusions\n             and not(Location LIKE '%AnyCoffeeShop'\n                  OR Location LIKE '%NYC Area'\n                        \n                  )   \n                  \n        ) derivedtable\n\nWHERE   LEN(Location) > 2  and  RankNo <= ##MaximumRankNo## \n\nORDER    BY RankNo\n--ORDER    BY location  -- To easily see incorrectly SELECTed entries",
        "CreationDate": "2013-12-17 05:38:32",
        "validated": false,
        "QueryBody_Original": "SELECT   RankNo,\n        [User Link], \n        Reputation, \n        Location\n\nFROM\n       (\n        SELECT Id [User Link], Reputation, Location,\n               DENSE_RANK() OVER (ORDER BY Reputation DESC) RankNo\n        \n          FROM   Users\n             \n            WHERE \n              (\n                 lower(Location) LIKE '%new york city%'\n              or lower(Location) LIKE '%nyc%'\n               )   \n                \n             -- exclusions\n             and not(Location LIKE '%AnyCoffeeShop'\n                  OR Location LIKE '%NYC Area'\n                        \n                  )   \n                  \n        ) derivedtable\n\nWHERE   LEN(Location) > 2  and  RankNo <= ##MaximumRankNo## \n\nORDER    BY RankNo\n--ORDER    BY location  -- To easily see incorrectly SELECTed entries"
    },
    {
        "QuerySetId": 154127,
        "Title": "User List: Top N - New York City - with false positive exclusions",
        "Description": "List of users in New York City.",
        "QueryBody": "SELECT \n    Top ##Top##\n    ROW_NUMBER() OVER(ORDER BY Reputation DESC) AS [#], \n    Id AS [User Link], \n    Reputation,\n    Location,\n    --CreationDate,\n    LastAccessDate,\n    UpVotes,\n    DownVotes\n    \nFROM\n    Users\nWHERE\n       (\n                 lower(Location) LIKE '%new york city%'\n                 or UPPER(Location) LIKE '%NYC%'\n              \n               )   \n                \n             -- exclusions\n             and not (Location LIKE '%AnyCoffeeShop'\n                      OR lower(Location) LIKE '%nyc area%') \n  \n   and LEN(Location) > 1 \n   -- and Reputation > 1\n   \n   -- Temporarily sort by location to more easily pick out false positive entries\n    ORDER BY Location ASC;",
        "CreationDate": "2013-12-31 00:29:51",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 154133,
        "Title": "Users whose questions you have answered",
        "Description": null,
        "QueryBody": "SELECT  u.Id as [User Link], u.Id as Id, count(q.Id) as AnsweredByYou, u.Reputation, u.LastAccessDate\n  from Users u\n  inner join Posts q \n   on q.OwnerUserId=u.Id\n  inner join Posts a \n   on q.Id=a.ParentId and a.OwnerUserId=##UserId##\ngroup by u.Id, u.Reputation, u.LastAccessDate\norder by AnsweredByYou desc",
        "CreationDate": "2013-12-17 11:16:14",
        "validated": false,
        "QueryBody_Original": "SELECT  u.Id as [User Link], u.Id as Id, count(q.Id) as AnsweredByYou, u.Reputation, u.LastAccessDate\n  from Users u\n  inner join Posts q \n   on q.OwnerUserId=u.Id\n  inner join Posts a \n   on q.Id=a.ParentId and a.OwnerUserId=##UserId##\ngroup by u.Id, u.Reputation, u.LastAccessDate\norder by AnsweredByYou desc"
    },
    {
        "QuerySetId": 154145,
        "Title": "Recent unanswered questions from users whose questions you answered in the past",
        "Description": null,
        "QueryBody": "SELECT  newq.Id as [Post Link], newq.CreationDate, newq.Tags  \n  from Posts newq\n  inner join Posts q on newq.OwnerUserId = q.OwnerUserId\n  inner join Posts a on q.Id=a.ParentId and a.OwnerUserId=##UserId## and \n   ISNULL(newq.AnswerCount,0)=0 and newq.ClosedDate IS NULL \norder by newq.CreationDate desc",
        "CreationDate": "2013-12-17 11:31:39",
        "validated": false,
        "QueryBody_Original": "SELECT  newq.Id as [Post Link], newq.CreationDate, newq.Tags  \n  from Posts newq\n  inner join Posts q on newq.OwnerUserId = q.OwnerUserId\n  inner join Posts a on q.Id=a.ParentId and a.OwnerUserId=##UserId## and \n   ISNULL(newq.AnswerCount,0)=0 and newq.ClosedDate IS NULL \norder by newq.CreationDate desc"
    },
    {
        "QuerySetId": 154357,
        "Title": "User List: DownVotes by percentage",
        "Description": null,
        "QueryBody": "SELECT  Top 300\n    \n    Id as [User Link],\n    UpVotes,\n    DownVotes,\n    ROUND(CAST(DownVotes AS float) \/ (UpVotes + DownVotes) * 100, 2) as DownVotesPCT\n\nFROM Users\n\nWHERE  DownVotes > ##MinDownVotes## -- Suppress lower vote counts\n\nORDER BY DownVotesPCT DESC",
        "CreationDate": "2013-12-25 17:15:51",
        "validated": false,
        "QueryBody_Original": "SELECT  Top 300\n    \n    Id as [User Link],\n    UpVotes,\n    DownVotes,\n    ROUND(CAST(DownVotes AS float) \/ (UpVotes + DownVotes) * 100, 2) as DownVotesPCT\n\nFROM Users\n\nWHERE  DownVotes > ##MinDownVotes## -- Suppress lower vote counts\n\nORDER BY DownVotesPCT DESC"
    },
    {
        "QuerySetId": 154480,
        "Title": "User List: Age and Reputation",
        "Description": null,
        "QueryBody": "SELECT  TOP ##MaxList##\n  ROW_NUMBER() OVER(ORDER BY Reputation DESC) AS [#],\n  Id AS [User Link], Age, Reputation, CreationDate, LastAccessDate\n\nFROM Users\nWHERE Age >= ##MinAge## and Reputation >= ##MinReputation##\nORDER BY Age ASC, Reputation DESC",
        "CreationDate": "2013-12-18 18:40:28",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 154641,
        "Title": "Site Info: Count and Average",
        "Description": "Run Manually. First automatic run is incomplete.",
        "QueryBody": "SELECT  Count(*) AS NumUsers\n  From users\n\n-- Average of users\nSELECT AVG(reputation) AS AvgRepAll\n  FROM users\n\n\n-- Number of users with reputation equal to 1\nSELECT COUNT(*) AS NumUsersEq1\n  FROM users\n  WHERE reputation = 1\n\n\n\n-- Number of users with reputation greater than 1\nSELECT COUNT(*) AS NumUsersGt1\n  FROM users\n  WHERE reputation > 1\n  \n-- Average of users with reputation greater than 1\nSELECT AVG(reputation) AS AvgRepGt1\n  FROM users\n  WHERE reputation > 1\n  \n\n\n-- Number of users with reputation greater than 101\nSELECT COUNT(*) AS NumUsersGt101\n  FROM users \n  WHERE reputation > 101\n\n-- Average of users with reputation greater than 101\nSELECT AVG(reputation) AS AvgRepGt101\n  FROM users\n  WHERE reputation > 101",
        "CreationDate": "2013-12-19 16:50:31",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 154642,
        "Title": "Site Info: Count and Average with Input",
        "Description": null,
        "QueryBody": "SELECT  Count(*) AS NumUsers\n  From users\n\n-- Average of users\nSELECT AVG(reputation) AS AvgRepAll\n  FROM users\n\n\n-- Number of users with reputation greater than input\nSELECT COUNT(*) AS NumUsersGtMinReputation\n  FROM users\n  WHERE reputation >= ##MinReputation##\n  \n-- Average of users with reputation greater than input\nSELECT AVG(reputation) AS AvgRepGtInputMinReputation\n  FROM users\n  WHERE reputation >= ##MinReputation##",
        "CreationDate": "2013-12-21 18:24:41",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 154644,
        "Title": "Test: List of Users in a given location - Case Sensitive",
        "Description": "List of Users in a given location. Case Sensitive",
        "QueryBody": "SELECT \n    Top ##Top##\n    ROW_NUMBER() OVER(ORDER BY Reputation DESC) AS [#], \n    Id AS [User Link], \n    Reputation,\n    Location,\n    --CreationDate,\n    LastAccessDate,\n    UpVotes,\n    DownVotes\n    \nFROM\n    Users\n    \n  where (\n         location like '%##Location##%'\n  \n         --For the abbreviation right side match, lead with a space\n         -- Enter dummy if not required\n         or location like '%##AbbreviationRightSide##'\n         )\n    \n         -- exclusions\n         and not\n         (\n         -- Enter dummy if not required\n         location LIKE '%##Exclusion##%' \n         or location LIKE '%##ExclusionRightSide##' \n         or location LIKE '%Quindio%' \n         \n         )\n\norder by [#] asc, location asc  -- to pick out incorrect results",
        "CreationDate": "2019-07-31 18:12:21",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 154970,
        "Title": "User List: Top N - China - with false positive exclusions",
        "Description": null,
        "QueryBody": "SELECT \n    Top ##Top##\n    ROW_NUMBER() OVER(ORDER BY Reputation DESC) AS [#], \n    Id AS [User Link], \n    Reputation,\n    Location\nFROM\n    Users\nWHERE\n           \n              (\n              lower(Location) LIKE ('%china%')\n               \n               -- http:\/\/sustainablesources.com\/resources\/country-abbreviations\/\n               OR Location LIKE  '%CN'\n                \n               )\n   \n               -- exclusions\n               and not\n               (\n               \n               Location LIKE '%BCN%' -- Barcelona\n               \n               )\n                  \n         \n   and LEN(Location) > 1 \n    \n    -- Temporarily sort by location to more easily pick out false positive entries\n    ORDER BY Location ASC;",
        "CreationDate": "2013-12-21 05:47:43",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 154971,
        "Title": "User List: Top N - Indonesia - with false positive exclusions",
        "Description": null,
        "QueryBody": "SELECT \n    Top ##Top##\n    ROW_NUMBER() OVER(ORDER BY Reputation DESC) AS [#], \n    Id AS [User Link], \n    Reputation,\n    Location\nFROM\n    Users\nWHERE\n           \n              (\n              lower(Location) LIKE ('%indonesia%')\n               \n               -- http:\/\/sustainablesources.com\/resources\/country-abbreviations\/\n               -- cannnot use ID as this is Idaho\n               \n               \n                \n               )\n   \n               -- exclusions\n               and not\n               (\n               \n               lower(Location) LIKE '%bali%'\n               \n               )\n                  \n         \n   and LEN(Location) > 1 \n    \n    -- Temporarily sort by location to more easily pick out false positive entries\n    ORDER BY Location ASC;",
        "CreationDate": "2013-12-21 06:40:48",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 154974,
        "Title": "User List: Top N - Georgia, Country of - with false positive exclusions",
        "Description": null,
        "QueryBody": "SELECT \n    Top ##Top##\n    ROW_NUMBER() OVER(ORDER BY Reputation DESC) AS [#], \n    Id AS [User Link], \n    Reputation,\n    Location\nFROM\n    Users\nWHERE\n           \n              (\n              lower(Location) LIKE ('%georgia%')\n               \n               -- http:\/\/sustainablesources.com\/resources\/country-abbreviations\/\n               -- can introduce errors\n               \n               OR Location LIKE '%GE'\n                \n               )\n   \n               -- exclusions\n               and not\n               (\n               \n               Location LIKE '%USA%'\n               \n               )\n                  \n         \n   and LEN(Location) > 1 \n    \n    -- Temporarily sort by location to more easily pick out false positive entries\n    --ORDER BY Location ASC;",
        "CreationDate": "2013-12-21 08:39:01",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 154994,
        "Title": "When do we add most questions and answers?",
        "Description": null,
        "QueryBody": "SELECT \n    DATEPART(\"hour\", CreationDate) AS [Hour you add a post],\n    COUNT(*) AS [Number of your posts per hour, UTC (GMT)]\n  FROM Posts\n  WHERE OwnerUserId = ##UserId##\n  GROUP BY DATEPART(\"hour\", CreationDate)\nELSE\nSELECT\n    DATEPART(\"weekday\", CreationDate) AS [Weekday you add a post],\n    -- Little hack to show DoW with data.SO graph builder\n    DATENAME(dw, CreationDate),\n    COUNT(*) AS [Number of your posts per weekday]\n  FROM Posts\n  WHERE OwnerUserId = ##UserId##\n  GROUP BY DATEPART(\"weekday\", CreationDate), DATENAME(dw, CreationDate)\n  ORDER BY DATEPART(\"weekday\", CreationDate)",
        "CreationDate": "2013-12-21 11:35:52",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 155064,
        "Title": "Test: List of Users in a given location - Not Case Sensitive",
        "Description": "List of Users in a given location. Not Case Sensitive\r\n",
        "QueryBody": "SELECT \n    Top ##Top##\n    ROW_NUMBER() OVER(ORDER BY Reputation DESC) AS [#], \n    Id AS [User Link], \n    Reputation,\n    Location,\n    --CreationDate,\n    LastAccessDate,\n    UpVotes,\n    DownVotes\n    \nFROM\n    Users\nWHERE\n\n    (\n    lower(location) like lower('%##location##%')\n\n  -- For the abbreviation right side match, lead with a space\n  -- Enter dummy if not required\n  or lower(location) like lower('%##AbbreviationRight##')\n     )\n  \n  -- exclusions\n     and not\n     (\n     -- Enter dummy if not required\n     lower(location) LIKE lower('%##Exclusion##%')\n     \n     --or lower(location) LIKE lower('%##ExclusionRightSide##')\n    \n     --or lower(location) like lower('dummy')\n     )\n order by location asc -- to pick out incorrect results",
        "CreationDate": "2014-01-05 03:19:45",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 155495,
        "Title": "User List: Views per Rep",
        "Description": "What makes these users so interesting?",
        "QueryBody": "SELECT  TOP ##Top:int?100## \n  ROW_NUMBER() OVER(ORDER BY Views DESC) AS Rank\n  , ID AS [User Link]\n  , Views\n  , Reputation\n  , Round (1.0 * Views \/ Reputation , 2) as [ViewsPerRep]\nFROM USERS\n\nWhere reputation >= ##MinimumReputation:int?200##\n\nORDER by ViewsPerRep DESC, Views DESC\n--ORDER by Reputation DESC",
        "CreationDate": "2014-01-15 06:15:26",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 155590,
        "Title": "User List: Rep per day",
        "Description": null,
        "QueryBody": "SELECT  \n    u.id as [User Link],\n    cast(datediff(day, u.creationDate, current_timestamp) as nvarchar) + ' days'\n      as [Member for],\n    u.reputation as [Rep],\n\n    ROUND(CAST(u.reputation AS float) \/ (datediff(day, u.creationDate, current_timestamp)), 1) as [Avg rep per Day]\n\nFROM \n    Users u\n\nwhere\n    u.reputation > ##MinimumRep## -- Try starting at 200000\n    \nORDER BY \n    [Avg rep per Day] DESC",
        "CreationDate": "2013-12-23 01:56:22",
        "validated": false,
        "QueryBody_Original": "SELECT  \n    u.id as [User Link],\n    cast(datediff(day, u.creationDate, current_timestamp) as nvarchar) + ' days'\n      as [Member for],\n    u.reputation as [Rep],\n\n    ROUND(CAST(u.reputation AS float) \/ (datediff(day, u.creationDate, current_timestamp)), 1) as [Avg rep per Day]\n\nFROM \n    Users u\n\nwhere\n    u.reputation > ##MinimumRep## -- Try starting at 200000\n    \nORDER BY \n    [Avg rep per Day] DESC"
    },
    {
        "QuerySetId": 155637,
        "Title": "User Count by Location: parameters",
        "Description": null,
        "QueryBody": "SELECT   COUNT(*) \"Count\"\nFROM\n    Users\n        where\n        \n        (\n        lower(Location) like lower('%##Location##%')\n        \n        --Enter dummy if not applicable\n        --For the abbreviation right side match\n          or location like UPPER('%##Abbreviation##')\n         )\n        \n        \nSELECT  Location, COUNT(*) \"Count\"\nFROM\n    Users\n        where\n        (\n        lower(Location) like lower('%##Location##%')\n        \n        --For the abbreviation right side match\n          or location like UPPER('%##Abbreviation##')\n         )\n         \nGROUP BY\n    Location\n\nORDER BY\n    -- Count DESC\n    Location ASC",
        "CreationDate": "2013-12-29 08:17:40",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 155774,
        "Title": "Open bounties for tag and specified bounty",
        "Description": null,
        "QueryBody": "SELECT  TOP 200 p.Id as [Post Link],\n               p.Tags,\n               vob.BountyAmount AS [Bounty],\n               LEFT(vob.CreationDate, 6) AS [Bounty],\n               LEFT(p.CreationDate, 11) AS [Asked],\n               ISNULL(p.AnswerCount, 0) AS [A],\n               vob.*\nFROM Posts p\nJOIN Votes vob\nON vob.PostId = p.Id AND vob.VoteTypeId = 8\nWHERE p.ClosedDate IS NULL\nAND vob.BountyAmount >= ##minBounty##\nAND DATEADD(d, 7, vob.CreationDate) >= GETDATE()\nAND p.Tags LIKE lower('%<##tag##>%')\nAND NOT EXISTS (SELECT *\n                FROM Votes vcb\n                WHERE vcb.PostId = p.Id AND vcb.VoteTypeId = 9)\nORDER BY ISNULL(p.AnswerCount, 0) ASC,\n           vob.BountyAmount DESC,\n         vob.CreationDate DESC",
        "CreationDate": "2013-12-30 18:15:24",
        "validated": false,
        "QueryBody_Original": "SELECT  TOP 200 p.Id as [Post Link],\n               p.Tags,\n               vob.BountyAmount AS [Bounty],\n               LEFT(vob.CreationDate, 6) AS [Bounty],\n               LEFT(p.CreationDate, 11) AS [Asked],\n               ISNULL(p.AnswerCount, 0) AS [A],\n               vob.*\nFROM Posts p\nJOIN Votes vob\nON vob.PostId = p.Id AND vob.VoteTypeId = 8\nWHERE p.ClosedDate IS NULL\nAND vob.BountyAmount >= ##minBounty##\nAND DATEADD(d, 7, vob.CreationDate) >= GETDATE()\nAND p.Tags LIKE lower('%<##tag##>%')\nAND NOT EXISTS (SELECT *\n                FROM Votes vcb\n                WHERE vcb.PostId = p.Id AND vcb.VoteTypeId = 9)\nORDER BY ISNULL(p.AnswerCount, 0) ASC,\n           vob.BountyAmount DESC,\n         vob.CreationDate DESC"
    },
    {
        "QuerySetId": 155827,
        "Title": "Find all comments ordered by votes",
        "Description": null,
        "QueryBody": "SELECT  \n  \"Score\",\n  \"Text\",\n  \"CreationDate\",\n  \"Id\" AS [Comment Link]\nFROM\n  \"Comments\"\nWHERE\n  \"UserId\" = ##UserId##\n  AND \"CreationDate\" >= '2013-12-16'\nORDER BY\n  \"Score\" DESC",
        "CreationDate": "2013-12-27 12:27:44",
        "validated": false,
        "QueryBody_Original": "SELECT  \n  \"Score\",\n  \"Text\",\n  \"CreationDate\",\n  \"Id\" AS [Comment Link]\nFROM\n  \"Comments\"\nWHERE\n  \"UserId\" = ##UserId##\n  AND \"CreationDate\" >= '2013-12-16'\nORDER BY\n  \"Score\" DESC"
    },
    {
        "QuerySetId": 155849,
        "Title": "Answers close to a Necromancer badge",
        "Description": "All my answers on the site\r\n",
        "QueryBody": "DECLARE  @UserId int = ##UserId##\n\nSELECT \n    a.Id AS [Post Link], \n    a.Score\nFROM\n    Posts q\n  INNER JOIN\n    Posts a ON q.Id = a.ParentId\nWHERE\n    a.OwnerUserId = @UserId\n  AND\n    a.PostTypeId = 2\n  AND\n    a.score <= 4\n  AND\n    DATEDIFF(d, q.creationdate, a.creationdate) >= 60\nORDER BY\n    a.score DESC",
        "CreationDate": "2013-12-24 05:20:56",
        "validated": false,
        "QueryBody_Original": "DECLARE  @UserId int = ##UserId##\n\nSELECT \n    a.Id AS [Post Link], \n    a.Score\nFROM\n    Posts q\n  INNER JOIN\n    Posts a ON q.Id = a.ParentId\nWHERE\n    a.OwnerUserId = @UserId\n  AND\n    a.PostTypeId = 2\n  AND\n    a.score <= 4\n  AND\n    DATEDIFF(d, q.creationdate, a.creationdate) >= 60\nORDER BY\n    a.score DESC"
    },
    {
        "QuerySetId": 156543,
        "Title": "User Count All Locations: Minimum Reputation",
        "Description": null,
        "QueryBody": "SELECT   COUNT(*) \"Count\"\nFROM\n    Users\n    where Len(location) > 1 and Reputation >= ##MinReputation##\n    \n    \nSELECT  Location, COUNT(*) \"Count\"\nFROM\n    Users\n    where Len(location) > 1 and Reputation >= ##MinReputation##\nGROUP BY\n    Location\nORDER BY\n    Count DESC\n    -- Location ASC",
        "CreationDate": "2013-12-29 08:03:53",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 156771,
        "Title": "Votes: Biggest downvoters among top users ",
        "Description": null,
        "QueryBody": "WITH  a reputation of more than 3000\n-- Percentage of down-votes WITH respect to total votes\n\nSELECT \n\n  Id as [User Link],\n  Reputation,\n  UpVotes,\n  DownVotes,\n  ROUND(CAST(100 * DownVotes AS float) \/ (UpVotes + Downvotes) , 1) as [% of Downvotes] \n  \n  FROM Users\n  \n  WHERE reputation > 3000\n  \n  and DownVotes > 0\n           \n  ORDER BY [Downvotes] DESC",
        "CreationDate": "2014-02-12 07:15:07",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 157054,
        "Title": "My answers in questions with more than 1000 views",
        "Description": null,
        "QueryBody": "SELECT \nSUM(q.ViewCount) AS views, q.id AS [Post Link] ,a.score\nFROM Posts q\nINNER JOIN Posts a ON a.ParentId = q.Id\nWHERE a.OwnerUserId = ##userid##\nAND a.CreationDate > ##date?01-01-2013##\nGROUP BY q.id,a.score having SUM(q.ViewCount) > 1000\nORDER BY views desc",
        "CreationDate": "2013-12-31 09:04:50",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 157100,
        "Title": "How many upvotes do I have for each tag by year?",
        "Description": "how long before I get tag badges?\r\n",
        "QueryBody": "DECLARE  @UserId int = ##UserId##\nDECLARE @Year int = ##Year##\n\nSELECT TOP 20 \n    TagName,\n    COUNT(*) AS UpVotes \nFROM Tags\n    INNER JOIN PostTags ON PostTags.TagId = Tags.id\n    INNER JOIN Posts ON Posts.ParentId = PostTags.PostId\n    INNER JOIN Votes ON Votes.PostId = Posts.Id and VoteTypeId = 2\nWHERE \nPosts.OwnerUserId = @UserId AND Year(Posts.CreationDate)=@Year\nGROUP BY TagName \nORDER BY UpVotes DESC",
        "CreationDate": "2013-12-31 21:46:52",
        "validated": false,
        "QueryBody_Original": "DECLARE  @UserId int = ##UserId##\nDECLARE @Year int = ##Year##\n\nSELECT TOP 20 \n    TagName,\n    COUNT(*) AS UpVotes \nFROM Tags\n    INNER JOIN PostTags ON PostTags.TagId = Tags.id\n    INNER JOIN Posts ON Posts.ParentId = PostTags.PostId\n    INNER JOIN Votes ON Votes.PostId = Posts.Id and VoteTypeId = 2\nWHERE \nPosts.OwnerUserId = @UserId AND Year(Posts.CreationDate)=@Year\nGROUP BY TagName \nORDER BY UpVotes DESC"
    },
    {
        "QuerySetId": 157102,
        "Title": "Best Questions this Year by Tag Contains",
        "Description": null,
        "QueryBody": "DECLARE  @Tag nvarchar(25) = '%##TagContains##%'\nDECLARE @Year int = ##Year##\n\nSELECT TOP 5\n    Posts.Id,\n    Posts.Title,\n    Posts.Score,\n    Posts.Tags\nFROM Posts\nWHERE \n    Posts.Tags LIKE @Tag AND\n    Year(Posts.CreationDate) = @Year\nORDER BY Posts.Score DESC",
        "CreationDate": "2014-01-09 03:22:04",
        "validated": false,
        "QueryBody_Original": "DECLARE  @Tag nvarchar(25) = '%##TagContains##%'\nDECLARE @Year int = ##Year##\n\nSELECT TOP 5\n    Posts.Id,\n    Posts.Title,\n    Posts.Score,\n    Posts.Tags\nFROM Posts\nWHERE \n    Posts.Tags LIKE @Tag AND\n    Year(Posts.CreationDate) = @Year\nORDER BY Posts.Score DESC"
    },
    {
        "QuerySetId": 157264,
        "Title": "User List: Top N - Australia - with false positive exclusions",
        "Description": null,
        "QueryBody": "SELECT \n    Top ##Top##\n    ROW_NUMBER() OVER(ORDER BY Reputation DESC) AS [#], \n    Id AS [User Link], \n    Reputation,\n    Location,\n    --CreationDate,\n    LastAccessDate,\n    UpVotes,\n    DownVotes\n    \nFROM\n    Users\nWHERE\n\n    (\n    lower(location) like lower('%Australia%')\n\n  -- For the abbreviation right side match, lead with a space\n  -- Enter dummy if not required\n  or lower(location) like lower('%##AbbreviationRight##')\n     )\n  \n  -- exclusions\n     and not\n     (\n        lower(location) = lower('Australia')\n        \n     or lower(location) like lower('%Adelaid%')\n     or lower(location) = lower('##location##')\n     )\n order by location asc -- to pick out incorrect results",
        "CreationDate": "2014-01-02 02:13:07",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 157418,
        "Title": "How many users are better than you?",
        "Description": null,
        "QueryBody": "DECLARE  @YourReputation int = ##YourReputation##\n\nSELECT COUNT (Id)\n\nFROM\n    Users\nWHERE\n  Reputation > @YourReputation",
        "CreationDate": "2014-01-02 19:07:24",
        "validated": false,
        "QueryBody_Original": "DECLARE  @YourReputation int = ##YourReputation##\n\nSELECT COUNT (Id)\n\nFROM\n    Users\nWHERE\n  Reputation > @YourReputation"
    },
    {
        "QuerySetId": 157479,
        "Title": "Top answerers by total answer count",
        "Description": null,
        "QueryBody": "WITH  average answer score excluding\n-- community wiki \/ closed posts\n\nSELECT \n    TOP 500\n    Users.Id as [User Link],\n    Count(Posts.Id) AS Answers,\n    CAST(AVG(CAST(Score AS float)) as numeric(6,2)) AS [Average Answer Score],\n    Users.Reputation\nFROM\n    Posts\n  INNER JOIN\n    Users ON Users.Id = OwnerUserId\nWHERE \n    PostTypeId = 2 and CommunityOwnedDate is null and ClosedDate is null\nGROUP BY\n    Users.Id, DisplayName, Users.Reputation\nORDER BY\n    [Answers] DESC",
        "CreationDate": "2020-04-21 17:15:35",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 157638,
        "Title": "Find best answer to my question",
        "Description": null,
        "QueryBody": "DECLARE  @question nvarchar(max) = '##Question##'\n\nSELECT TOP 1 Q.title,Q.body,A.body,A.Score,Q.Id AS [Post Link]\nFROM Posts Q JOIN Posts A ON (Q.AcceptedAnswerId = A.Id)\nWHERE \n    Q.PostTypeId = 1 AND A.PostTypeId = 2\n    AND (Q.Title LIKE '%' + REPLACE(@question,' ','% ') + '%' OR Q.Body LIKE '%' + REPLACE(@question,' ','% ') + '%')\n    ORDER BY DIFFERENCE(@question,Q.title), DIFFERENCE(@question,Q.body), Q.Score DESC, A.Score DESC",
        "CreationDate": "2014-01-03 12:00:26",
        "validated": false,
        "QueryBody_Original": "DECLARE  @question nvarchar(max) = '##Question##'\n\nSELECT TOP 1 Q.title,Q.body,A.body,A.Score,Q.Id AS [Post Link]\nFROM Posts Q JOIN Posts A ON (Q.AcceptedAnswerId = A.Id)\nWHERE \n    Q.PostTypeId = 1 AND A.PostTypeId = 2\n    AND (Q.Title LIKE '%' + REPLACE(@question,' ','% ') + '%' OR Q.Body LIKE '%' + REPLACE(@question,' ','% ') + '%')\n    ORDER BY DIFFERENCE(@question,Q.title), DIFFERENCE(@question,Q.body), Q.Score DESC, A.Score DESC"
    },
    {
        "QuerySetId": 157679,
        "Title": "My answers in NOTABLE QUESTIONS",
        "Description": null,
        "QueryBody": "SELECT \nSUM(q.ViewCount) AS views, q.id AS [Post Link] ,a.score\nFROM Posts q\nINNER JOIN Posts a ON a.ParentId = q.Id\nWHERE a.OwnerUserId = ##userid##\nAND a.CreationDate > ##date?01-01-2013##\nGROUP BY q.id,a.score having SUM(q.ViewCount) >= 2500\nORDER BY views desc",
        "CreationDate": "2014-01-03 18:17:44",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 157680,
        "Title": "My answers in FAMOUS QUESTIONS",
        "Description": null,
        "QueryBody": "SELECT \nSUM(q.ViewCount) AS views, q.id AS [Post Link] ,a.score\nFROM Posts q\nINNER JOIN Posts a ON a.ParentId = q.Id\nWHERE a.OwnerUserId = ##userid##\nAND a.CreationDate > ##date?01-01-2013##\nGROUP BY q.id,a.score having SUM(q.ViewCount) >= 10000\nORDER BY views desc",
        "CreationDate": "2014-01-03 18:18:36",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 157780,
        "Title": "Zero-score uncommented, not accepted answers by a specific user",
        "Description": null,
        "QueryBody": "SELECT  \n   sum(case when a.Score=0 and isnull(q.AcceptedAnswerId,0) != a.Id and a.CommentCount=0 then 1 else 0 end) as [Unappreciated Answers], \n   count(a.Id) as [Total Answers], \n   100*cast(sum(case when a.Score=0 and a.CommentCount=0 then 1 else 0 end) as float)\/count(a.Id)  as [Percentage Unappreciated]\nFROM Posts a\nINNER JOIN Posts q \nON (q.Id = a.ParentId)\nWHERE a.PostTypeId=2 and a.OwnerUserId = ##UserId##",
        "CreationDate": "2016-04-11 19:41:04",
        "validated": false,
        "QueryBody_Original": "SELECT  \n   sum(case when a.Score=0 and isnull(q.AcceptedAnswerId,0) != a.Id and a.CommentCount=0 then 1 else 0 end) as [Unappreciated Answers], \n   count(a.Id) as [Total Answers], \n   100*cast(sum(case when a.Score=0 and a.CommentCount=0 then 1 else 0 end) as float)\/count(a.Id)  as [Percentage Unappreciated]\nFROM Posts a\nINNER JOIN Posts q \nON (q.Id = a.ParentId)\nWHERE a.PostTypeId=2 and a.OwnerUserId = ##UserId##"
    },
    {
        "QuerySetId": 157782,
        "Title": "User List: Rep per Answer",
        "Description": null,
        "QueryBody": "SELECT  top ##MaxNumUsersByReputation##\n  \n  ROW_NUMBER() OVER(ORDER BY Reputation DESC) AS [# by Reputation],\n  Users.Id AS [User Link], Reputation,\n  Count(Posts.Id) AS 'AnswerCount',\n  Round ( (1.0 * Reputation \/ Count(Posts.Id)), 1) as [AvgRepPerAnswer]\n\ninto #Temploc\n\nfrom Users join Posts\n  on Posts.OwnerUserID = Users.Id\n  where PostTypeId = 2\n\ngroup by Posts.OwnerUserID, Users.Id, Reputation\n\nSELECT * from #Temploc\n\nWhere AnswerCount >= '##MinAnswerCount:int?10##'\n\n--Alternate ordering other than by Reputation\norder by AvgRepPerAnswer desc, Reputation desc;\n--order by AnswerCount desc, AvgRepPerAnswer desc;\n--order by AnswerCount desc, Reputation desc;\n\ndrop table #Temploc",
        "CreationDate": "2014-01-07 07:12:28",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 157820,
        "Title": "Cast (UpVotes-DownVotes)\/(UpVotes-DownVotes) for a given user",
        "Description": null,
        "QueryBody": "SELECT \n    Id AS [User Link],\n    (CONVERT(float, (UpVotes-DownVotes))\/(CONVERT(float, (Upvotes+DownVotes)))) as uv_index,\n    DownVotes, UpVotes\nFROM\n    Users\nWHERE\n    Id = ##UserId##\nORDER BY\n    uv_index DESC",
        "CreationDate": "2014-01-04 19:54:15",
        "validated": false,
        "QueryBody_Original": "SELECT \n    Id AS [User Link],\n    (CONVERT(float, (UpVotes-DownVotes))\/(CONVERT(float, (Upvotes+DownVotes)))) as uv_index,\n    DownVotes, UpVotes\nFROM\n    Users\nWHERE\n    Id = ##UserId##\nORDER BY\n    uv_index DESC"
    },
    {
        "QuerySetId": 157867,
        "Title": "User List: Top N - Armenia - with false positive exclusions",
        "Description": null,
        "QueryBody": "SELECT \n    Top ##Top##\n    ROW_NUMBER() OVER(ORDER BY Reputation DESC) AS [#], \n    Id AS [User Link], \n    Reputation,\n    Location,\n    --CreationDate,\n    LastAccessDate,\n    UpVotes,\n    DownVotes\n    \nFROM\n    Users\n    \n  where (\n         location like '%Armenia%'\n         or location LIKE '%Yerevan%' \n         )\n    \n         -- exclusions\n         and not\n         (\n         location LIKE '%Colombia%' \n         or location LIKE '%Quind%o%'       \n         )\n\n--order by location asc -- to pick out incorrect results",
        "CreationDate": "2014-01-05 03:45:56",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 157949,
        "Title": "Reputation Frequency Distribution with parameters",
        "Description": "From http:\/\/data.stackexchange.com\/stackoverflow\/query\/90233\/reputation-frequency-distribution",
        "QueryBody": "SELECT  FLOOR(reputation \/ ##step:int?1000##) * ##step## AS [UserReputation],\n      log(cast(Count(id) as float))         AS [LogUserCount]\nFROM   users \nWHERE  reputation >= ##MinimumReputation:int?102##\nGROUP  BY FLOOR(reputation \/ ##step##) \nORDER  BY FLOOR(reputation \/ ##step##) ASC",
        "CreationDate": "2015-07-30 13:09:37",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 158114,
        "Title": "Average score for questions and answers",
        "Description": null,
        "QueryBody": "SELECT \n  CASE PostTypeId WHEN 1 THEN 'Question' ELSE 'Answer' END AS [Post Type],\n  AVG(CAST(Score AS float)) AS [Average Score]\nFROM Posts\nWHERE OwnerUserId = ##UserId## AND PostTypeId <= 2\nGROUP BY PostTypeId",
        "CreationDate": "2014-01-07 11:22:32",
        "validated": false,
        "QueryBody_Original": "SELECT \n  CASE PostTypeId WHEN 1 THEN 'Question' ELSE 'Answer' END AS [Post Type],\n  AVG(CAST(Score AS float)) AS [Average Score]\nFROM Posts\nWHERE OwnerUserId = ##UserId## AND PostTypeId <= 2\nGROUP BY PostTypeId"
    },
    {
        "QuerySetId": 158242,
        "Title": "User List: Upvoters by Percentage",
        "Description": null,
        "QueryBody": "SELECT  TOP ##NumOfUsers:Int?1000##\n  id as [User Link],\n  UpVotes as [Up Votes],\n  DownVotes [Down Votes],\n  UpVotes - DownVotes as [Net Votes],\n  ROUND((100.0 * UpVotes \/ (UpVotes + DownVotes) ), 2) as [UpVote Percent]\nFROM Users\nWHERE\n  UpVotes > ##UpVotesGreaterThan:Int?999##\norder by [UpVote Percent] desc, UpVotes desc",
        "CreationDate": "2014-01-07 06:04:15",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 158545,
        "Title": "Number of answers for questions without an accepted answer",
        "Description": null,
        "QueryBody": "WITH out an accepted answer\n-- Shows questions WITHout an accepted answer,\n-- and the number of views and answers on each\n\nSELECT TOP 10000\n  Posts.Id as [Post Link],\n  Posts.ViewCount as [Views],\n  Posts.AnswerCount as [# Answers]\nFROM\n  Posts\nWHERE\n  PostTypeID = 1  -- questions\n  AND Posts.AcceptedAnswerId is NULL -- has no accepted answer\n  AND Posts.CreationDate >= '2013-1-01'\n  AND Posts.CreationDate <= '2013-12-31' -- All of 2013 for some fairness\nORDER BY\n  Posts.AnswerCount DESC",
        "CreationDate": "2014-01-08 09:07:19",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 158584,
        "Title": "Questions: Top Scored\/Viewed\/Favorited by Tag, Year, Month",
        "Description": null,
        "QueryBody": "DECLARE  @Tag nvarchar(25) = '%##TagContains##%'\nDECLARE @Year int = ##Year##\nDECLARE @Month int = ##Month##\n\nSELECT TOP ##Top##\n    Posts.Id,\n    Posts.Id  AS [Post Link],\n    --Posts.Title,\n    Posts.ViewCount AS Views,\n    Posts.Score,\n    Posts.FavoriteCount AS 'FavCount',\n    Posts.Tags\n    \n    \nFROM Posts\n\nWHERE \n    Posts.Tags LIKE @Tag\n    AND Year(Posts.CreationDate) = @Year\n    AND Month(Posts.CreationDate) = @Month\n    \nORDER BY Posts.Score DESC, Posts.ViewCount DESC\n--Alternate ordering\n--ORDER BY Posts.ViewCount DESC. Posts.Score DESC\n--ORDER BY Posts.FavoriteCount DESC, Posts.Score DESC",
        "CreationDate": "2014-01-08 18:36:06",
        "validated": false,
        "QueryBody_Original": "DECLARE  @Tag nvarchar(25) = '%##TagContains##%'\nDECLARE @Year int = ##Year##\nDECLARE @Month int = ##Month##\n\nSELECT TOP ##Top##\n    Posts.Id,\n    Posts.Id  AS [Post Link],\n    --Posts.Title,\n    Posts.ViewCount AS Views,\n    Posts.Score,\n    Posts.FavoriteCount AS 'FavCount',\n    Posts.Tags\n    \n    \nFROM Posts\n\nWHERE \n    Posts.Tags LIKE @Tag\n    AND Year(Posts.CreationDate) = @Year\n    AND Month(Posts.CreationDate) = @Month\n    \nORDER BY Posts.Score DESC, Posts.ViewCount DESC\n--Alternate ordering\n--ORDER BY Posts.ViewCount DESC. Posts.Score DESC\n--ORDER BY Posts.FavoriteCount DESC, Posts.Score DESC"
    },
    {
        "QuerySetId": 158827,
        "Title": "User Stats for Voting: Upvotes, Downvotes, Reputation & TotalPosts",
        "Description": null,
        "QueryBody": "SELECT  u.Id, \nu.Reputation, \nu.DisplayName, \nu.UpVotes, \nu.DownVotes,\nQ.TotalQs,\nA.TotalAs\nFROM Users as u\n  LEFT JOIN ( \n               SELECT COUNT(OwnerUserId) AS TotalQs, OwnerUserId \n               FROM Posts \n               WHERE PostTypeId = 1\n               GROUP BY OwnerUserId\n               ) as Q ON u.Id = Q.OwnerUserId\n  LEFT JOIN ( \n               SELECT COUNT(OwnerUserId) AS TotalAs, OwnerUserId \n               FROM Posts \n               WHERE PostTypeId = 2\n               GROUP BY OwnerUserId\n               ) as A ON u.Id = A.OwnerUserId\nWHERE u.Id in (##UserId##)",
        "CreationDate": "2015-05-12 20:39:15",
        "validated": false,
        "QueryBody_Original": "SELECT  u.Id, \nu.Reputation, \nu.DisplayName, \nu.UpVotes, \nu.DownVotes,\nQ.TotalQs,\nA.TotalAs\nFROM Users as u\n  LEFT JOIN ( \n               SELECT COUNT(OwnerUserId) AS TotalQs, OwnerUserId \n               FROM Posts \n               WHERE PostTypeId = 1\n               GROUP BY OwnerUserId\n               ) as Q ON u.Id = Q.OwnerUserId\n  LEFT JOIN ( \n               SELECT COUNT(OwnerUserId) AS TotalAs, OwnerUserId \n               FROM Posts \n               WHERE PostTypeId = 2\n               GROUP BY OwnerUserId\n               ) as A ON u.Id = A.OwnerUserId\nWHERE u.Id in (##UserId##)"
    },
    {
        "QuerySetId": 159331,
        "Title": "Average answer length per user",
        "Description": null,
        "QueryBody": "SELECT \n  u.Id AS [User Link],\n  Count(*) AS [Answer count],\n  Min(Len(p.Body)) AS [Min],\n  Avg(Len(p.Body)) AS [Average],\n  Max(Len(p.Body)) AS [Max],\n  Var(Len(p.Body)) AS [Variance],\n  Stdev(Len(p.Body)) AS [StDev]\nFROM Users u, Posts p\nWHERE p.OwnerUserId = u.Id\n  AND p.PostTypeId = 2\n  AND u.Id = ##UserId##\nGROUP BY u.Id\nHAVING Count(*) >= 10\nORDER BY [Average]",
        "CreationDate": "2016-02-10 05:13:59",
        "validated": false,
        "QueryBody_Original": "SELECT \n  u.Id AS [User Link],\n  Count(*) AS [Answer count],\n  Min(Len(p.Body)) AS [Min],\n  Avg(Len(p.Body)) AS [Average],\n  Max(Len(p.Body)) AS [Max],\n  Var(Len(p.Body)) AS [Variance],\n  Stdev(Len(p.Body)) AS [StDev]\nFROM Users u, Posts p\nWHERE p.OwnerUserId = u.Id\n  AND p.PostTypeId = 2\n  AND u.Id = ##UserId##\nGROUP BY u.Id\nHAVING Count(*) >= 10\nORDER BY [Average]"
    },
    {
        "QuerySetId": 159333,
        "Title": "User's answers sorted by length",
        "Description": null,
        "QueryBody": "SELECT \n  p.Id AS [Post Link],\n  Len(p.Body) AS [Length]\nFROM Posts p\nWHERE p.OwnerUserId = ##UserId##\n  AND p.PostTypeId = 2\nORDER BY Length ASC",
        "CreationDate": "2014-01-12 08:12:49",
        "validated": false,
        "QueryBody_Original": "SELECT \n  p.Id AS [Post Link],\n  Len(p.Body) AS [Length]\nFROM Posts p\nWHERE p.OwnerUserId = ##UserId##\n  AND p.PostTypeId = 2\nORDER BY Length ASC"
    },
    {
        "QuerySetId": 159338,
        "Title": "Average answer length per user > 10K rep.",
        "Description": null,
        "QueryBody": "SELECT \n  u.Id AS [User Link],\n  Count(*) AS [Answer count],\n  Min(Len(p.Body)) AS [Min],\n  Avg(Len(p.Body)) AS [Average],\n  Max(Len(p.Body)) AS [Max],\n  Var(Len(p.Body)) AS [Variance],\n  Stdev(Len(p.Body)) AS [StDev]\nFROM Users u, Posts p\nWHERE p.OwnerUserId = ##UserID##\n  AND p.PostTypeId = 2\n  AND u.Reputation > 10000\n  \/*AND (SELECT Count(*)\n       FROM Posts q\n       WHERE q.OwnerUserId = u.Id AND p.PostTypeId = 2\n       GROUP BY q.OwnerUserId) >= 10*\/\nGROUP BY u.Id\nORDER BY [Average]",
        "CreationDate": "2015-07-16 12:38:08",
        "validated": false,
        "QueryBody_Original": "SELECT \n  u.Id AS [User Link],\n  Count(*) AS [Answer count],\n  Min(Len(p.Body)) AS [Min],\n  Avg(Len(p.Body)) AS [Average],\n  Max(Len(p.Body)) AS [Max],\n  Var(Len(p.Body)) AS [Variance],\n  Stdev(Len(p.Body)) AS [StDev]\nFROM Users u, Posts p\nWHERE p.OwnerUserId = ##UserID##\n  AND p.PostTypeId = 2\n  AND u.Reputation > 10000\n  \/*AND (SELECT Count(*)\n       FROM Posts q\n       WHERE q.OwnerUserId = u.Id AND p.PostTypeId = 2\n       GROUP BY q.OwnerUserId) >= 10*\/\nGROUP BY u.Id\nORDER BY [Average]"
    },
    {
        "QuerySetId": 159365,
        "Title": "Positive score questions per month",
        "Description": null,
        "QueryBody": "SELECT \nmonth(CreationDate), PostTypeId, count(Id)\nfrom Posts\nwhere year(CreationDate) = ##Year## and PostTypeId <= 2 and Score <= 0\ngroup by month(CreationDate), PostTypeId\norder by month(CreationDate) asc",
        "CreationDate": "2014-01-12 10:24:25",
        "validated": false,
        "QueryBody_Original": "SELECT \nmonth(CreationDate), PostTypeId, count(Id)\nfrom Posts\nwhere year(CreationDate) = ##Year## and PostTypeId <= 2 and Score <= 0\ngroup by month(CreationDate), PostTypeId\norder by month(CreationDate) asc"
    },
    {
        "QuerySetId": 159367,
        "Title": "Positive score posts per month",
        "Description": null,
        "QueryBody": "SELECT \nmonth(p.CreationDate), \ncount(p.Id),\n(SELECT count(q.Id) \n  from Posts q where \n      year(q.CreationDate) = ##Year## and \n      month(q.CreationDate) = month(p.CreationDate) and\n      q.Score > 0 and q.PostTypeId = 1),\n(SELECT count(r.Id) \n  from Posts r where \n      year(r.CreationDate) = ##Year## and \n      month(r.CreationDate) = month(p.CreationDate) and\n      r.Score > 0 and r.PostTypeId = 2)\nfrom Posts p\nwhere year(p.CreationDate) = ##Year## and p.Score > 0 and p.PostTypeId <= 2\ngroup by month(p.CreationDate)\norder by month(p.CreationDate) asc",
        "CreationDate": "2014-01-13 01:59:13",
        "validated": false,
        "QueryBody_Original": "SELECT \nmonth(p.CreationDate), \ncount(p.Id),\n(SELECT count(q.Id) \n  from Posts q where \n      year(q.CreationDate) = ##Year## and \n      month(q.CreationDate) = month(p.CreationDate) and\n      q.Score > 0 and q.PostTypeId = 1),\n(SELECT count(r.Id) \n  from Posts r where \n      year(r.CreationDate) = ##Year## and \n      month(r.CreationDate) = month(p.CreationDate) and\n      r.Score > 0 and r.PostTypeId = 2)\nfrom Posts p\nwhere year(p.CreationDate) = ##Year## and p.Score > 0 and p.PostTypeId <= 2\ngroup by month(p.CreationDate)\norder by month(p.CreationDate) asc"
    },
    {
        "QuerySetId": 159504,
        "Title": "Top 100 comments by User",
        "Description": null,
        "QueryBody": "DECLARE  @UserId int = ##UserId:int##\n\nSELECT TOP 100 WITH TIES\n  Id, Id as [Comment Link], PostId, Score, Text\nFROM\n  Comments\nWHERE\n  UserId = @UserId\nORDER BY\n  Score DESC",
        "CreationDate": "2014-08-06 00:34:57",
        "validated": false,
        "QueryBody_Original": "DECLARE  @UserId int = ##UserId:int##\n\nSELECT TOP 100 WITH TIES\n  Id, Id as [Comment Link], PostId, Score, Text\nFROM\n  Comments\nWHERE\n  UserId = @UserId\nORDER BY\n  Score DESC"
    },
    {
        "QuerySetId": 159505,
        "Title": "Count: Answers by top users in year by month",
        "Description": "Answers by top users in year broken down by month",
        "QueryBody": "DECLARE  @Year int = ##Year##\n\nSELECT Month(p.CreationDate), count(p.Id) FROM Posts p \n  WHERE \n        p.PostTypeId = 2\n    AND Year(p.CreationDate) = @Year\n\n    AND p.OwnerUserId IN (SELECT Top ##Top:int?1000## Id FROM Users ORDER BY Reputation DESC)\n  \n  group by month(p.CreationDate)",
        "CreationDate": "2014-01-13 18:09:55",
        "validated": false,
        "QueryBody_Original": "DECLARE  @Year int = ##Year##\n\nSELECT Month(p.CreationDate), count(p.Id) FROM Posts p \n  WHERE \n        p.PostTypeId = 2\n    AND Year(p.CreationDate) = @Year\n\n    AND p.OwnerUserId IN (SELECT Top ##Top:int?1000## Id FROM Users ORDER BY Reputation DESC)\n  \n  group by month(p.CreationDate)"
    },
    {
        "QuerySetId": 159506,
        "Title": "Count: Answers by all users in year by month",
        "Description": "Answers by all users in a year broken down by month",
        "QueryBody": "DECLARE  @Year int = ##Year##\n\nSELECT Month(p.CreationDate), count(p.Id) FROM Posts p \n  WHERE \n        p.PostTypeId = 2\n    AND Year(p.CreationDate) = @Year\n    \ngroup by month(CreationDate)",
        "CreationDate": "2014-01-13 18:05:11",
        "validated": false,
        "QueryBody_Original": "DECLARE  @Year int = ##Year##\n\nSELECT Month(p.CreationDate), count(p.Id) FROM Posts p \n  WHERE \n        p.PostTypeId = 2\n    AND Year(p.CreationDate) = @Year\n    \ngroup by month(CreationDate)"
    },
    {
        "QuerySetId": 159642,
        "Title": "Me vs  Other in answers.",
        "Description": null,
        "QueryBody": "DECLARE  @UserId int = ##myUserID##;\n\nwith fights as (\n  select myAnswer.ParentId as Question,\n   myAnswer.Score as MyScore,\n   otherAnswer.Score as OtherScore\n  from Posts as myAnswer\n  inner join Posts as otherAnswer\n   on otherAnswer.OwnerUserId = ##OtherId## and myAnswer.ParentId = otherAnswer.ParentId\n  where myAnswer.ownerUserId = @UserId and myAnswer.postTypeId = 2\n)\n\nselect\n  case\n   when myScore > OtherScore then 'You win'\n   when myScore < OtherScore then 'Other wins'\n   else 'Tie'\n  end as 'Winner',\n  Question as [Post Link],\n  myScore as 'My score',\n  OtherScore as 'Other score'\nfrom fights;",
        "CreationDate": "2014-01-13 21:42:55",
        "validated": false,
        "QueryBody_Original": "DECLARE  @UserId int = ##myUserID##;\n\nwith fights as (\n  select myAnswer.ParentId as Question,\n   myAnswer.Score as MyScore,\n   otherAnswer.Score as OtherScore\n  from Posts as myAnswer\n  inner join Posts as otherAnswer\n   on otherAnswer.OwnerUserId = ##OtherId## and myAnswer.ParentId = otherAnswer.ParentId\n  where myAnswer.ownerUserId = @UserId and myAnswer.postTypeId = 2\n)\n\nselect\n  case\n   when myScore > OtherScore then 'You win'\n   when myScore < OtherScore then 'Other wins'\n   else 'Tie'\n  end as 'Winner',\n  Question as [Post Link],\n  myScore as 'My score',\n  OtherScore as 'Other score'\nfrom fights;"
    },
    {
        "QuerySetId": 160105,
        "Title": "Top answerers on the site",
        "Description": "A list of the top users with the highest average answer score excluding\r\ncommunity wiki \/ closed posts or users with fewer than 10 answers\r\n",
        "QueryBody": "WITH  UserAvgAnswerScore AS (\n    SELECT \n        Users.Id AS UserId,\n        Count(Posts.Id) AS Answers,\n        CAST(AVG(CAST(Score AS float)) as numeric(6,2)) AS [Average Answer Score]\n    FROM\n        Posts\n      INNER JOIN\n        Users ON Users.Id = OwnerUserId\n    WHERE\n        PostTypeId = 2 and CommunityOwnedDate is null and ClosedDate is null\n    GROUP BY\n        Users.Id, DisplayName\n    HAVING\n        Count(Posts.Id) > 100\n)\nSELECT TOP ##n:int?500##\n    RANK() OVER (Order BY [Average Answer Score] DESC) AS Rank,\n    UserId AS [User Link],\n    Answers,\n    [Average Answer Score]\nFROM\n    UserAvgAnswerScore\nORDER BY\n    [Average Answer Score] DESC;",
        "CreationDate": "2020-08-02 09:19:25",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 160665,
        "Title": "Closing users who \"know\" about a tag",
        "Description": null,
        "QueryBody": "DECLARE  @tagName varchar(30) = ##tagName:string##\n\nselect distinct Users.Id as [User Link], Users.DisplayName\n  from\n  (\n    (\n      (\n        select OwnerUserId, ParentId, Score\n          from (Posts join PostTypes on Posts.PostTypeId = PostTypes.Id)\n          where PostTypes.Name = 'Answer'\n      ) as a\n      join\n      (\n        select Posts.Id, Tags, Score\n          from (Posts join PostTypes on Posts.PostTypeId = PostTypes.Id)\n          where PostTypes.Name = 'Question'\n      ) as q\n      on a.ParentId = q.Id\n    )\n    join Users on a.OwnerUserId = Users.Id\n  )\n  where Users.Reputation > 3000\n    and q.Tags like '%' + @tagName + '%'\n    and a.Score > 1\n  order by Users.DisplayName ASC;",
        "CreationDate": "2014-01-17 23:04:07",
        "validated": false,
        "QueryBody_Original": "DECLARE  @tagName varchar(30) = ##tagName:string##\n\nselect distinct Users.Id as [User Link], Users.DisplayName\n  from\n  (\n    (\n      (\n        select OwnerUserId, ParentId, Score\n          from (Posts join PostTypes on Posts.PostTypeId = PostTypes.Id)\n          where PostTypes.Name = 'Answer'\n      ) as a\n      join\n      (\n        select Posts.Id, Tags, Score\n          from (Posts join PostTypes on Posts.PostTypeId = PostTypes.Id)\n          where PostTypes.Name = 'Question'\n      ) as q\n      on a.ParentId = q.Id\n    )\n    join Users on a.OwnerUserId = Users.Id\n  )\n  where Users.Reputation > 3000\n    and q.Tags like '%' + @tagName + '%'\n    and a.Score > 1\n  order by Users.DisplayName ASC;"
    },
    {
        "QuerySetId": 160819,
        "Title": "List of votes in a specific answer",
        "Description": null,
        "QueryBody": "DECLARE  @AnswerId int = ##AnswerID##\n\nSELECT\n    CreationDate\nFROM\n    Votes\nWHERE\n    Votes.PostId = @AnswerId\nORDER BY\n    CreationDate ASC",
        "CreationDate": "2014-01-18 04:00:32",
        "validated": false,
        "QueryBody_Original": "DECLARE  @AnswerId int = ##AnswerID##\n\nSELECT\n    CreationDate\nFROM\n    Votes\nWHERE\n    Votes.PostId = @AnswerId\nORDER BY\n    CreationDate ASC"
    },
    {
        "QuerySetId": 160955,
        "Title": "Avg Hour Between Question and Answer Accepted - Last 7 Days",
        "Description": "Calculate the avg in hours between the question and the accepted answer in the last 7 days",
        "QueryBody": "SELECT  \n    CONVERT(DATE,A.CreationDate) CreationDate,\n    AVG(DATEDIFF(HH, B.CreationDate, A.CreationDate)) [Avg Hours Answer]\nFROM \n    POSTS A\nINNER JOIN\n    POSTS B ON\n        B.AcceptedAnswerId = A.ID\nWHERE\nA.CreationDate BETWEEN  CONVERT(DATE, DATEADD(DD,-7,GETDATE())) AND GETDATE()\nGROUP BY\n   CONVERT(DATE,A.CreationDate)\nORDER BY\n    CONVERT(DATE,A.CreationDate)",
        "CreationDate": "2014-01-19 05:20:32",
        "validated": false,
        "QueryBody_Original": "SELECT  \n    CONVERT(DATE,A.CreationDate) CreationDate,\n    AVG(DATEDIFF(HH, B.CreationDate, A.CreationDate)) [Avg Hours Answer]\nFROM \n    POSTS A\nINNER JOIN\n    POSTS B ON\n        B.AcceptedAnswerId = A.ID\nWHERE\nA.CreationDate BETWEEN  CONVERT(DATE, DATEADD(DD,-7,GETDATE())) AND GETDATE()\nGROUP BY\n   CONVERT(DATE,A.CreationDate)\nORDER BY\n    CONVERT(DATE,A.CreationDate)"
    },
    {
        "QuerySetId": 161237,
        "Title": "Timeline of posts closed as homework",
        "Description": "This query will show the posts closed as Off-Topic within the past 3 months which are tagged homework (though those two can be redefined).",
        "QueryBody": "WITH in the past 3 months\n--which are tagged homework (though those two can be redefined).\n\n\nSELECT \n  Posts.ClosedDate,\n  ROW_NUMBER() OVER(ORDER BY  Posts.ClosedDate) AS 'Post closures'\nFROM \n    Posts\n  JOIN \n    PostHistory \n  ON \n    Posts.Id=PostHistory.PostId\nWHERE \n  Posts.ClosedDate IS NOT NULL\nAND\n  Posts.CreationDate > DATEADD(month, -##months?3##, GETDATE())\nAND\n  PostHistory.PostHistoryTypeId=10\nAND\n  PostHistory.Comment=102\nAND\n  Posts.Tags LIKE '%##tag?homework##%'",
        "CreationDate": "2014-01-20 18:34:37",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 162224,
        "Title": "Links and Score of All Answers for a Question",
        "Description": null,
        "QueryBody": "DECLARE  @QuestionId int = ##QuestionId##\n\nSELECT\n    Id,\n    Score,\n    OwnerUserId as [User Link],\n    CreationDate,\n    LastActivityDate\nFROM \n    Posts\nWHERE \n    Posts.ParentId = @QuestionId\nORDER BY CreationDate ASC",
        "CreationDate": "2014-04-01 07:55:17",
        "validated": false,
        "QueryBody_Original": "DECLARE  @QuestionId int = ##QuestionId##\n\nSELECT\n    Id,\n    Score,\n    OwnerUserId as [User Link],\n    CreationDate,\n    LastActivityDate\nFROM \n    Posts\nWHERE \n    Posts.ParentId = @QuestionId\nORDER BY CreationDate ASC"
    },
    {
        "QuerySetId": 162445,
        "Title": "Number of users with the specified minimum reputation",
        "Description": null,
        "QueryBody": "SELECT  count(U.Id) AS 'Total Users'\nFROM Users as U\nWHERE U.Reputation >= ##MinimumReputation:int##",
        "CreationDate": "2014-01-26 11:01:04",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 162579,
        "Title": "Query for knowing the rank based on tags and reputation",
        "Description": null,
        "QueryBody": "SELECT \n *\nfrom Users, Tags\nwhere\n  TagName like '%##Tag##%' and\n  Reputation >= ##minimumReputation##\norder by Reputation desc",
        "CreationDate": "2014-01-24 11:59:16",
        "validated": false,
        "QueryBody_Original": "SELECT \n *\nfrom Users, Tags\nwhere\n  TagName like '%##Tag##%' and\n  Reputation >= ##minimumReputation##\norder by Reputation desc"
    },
    {
        "QuerySetId": 163684,
        "Title": "Number of questions, answers, and net scores",
        "Description": null,
        "QueryBody": "DECLARE  @userId int = ##UserId##\n\nselect * from\n(\nselect count(*) as Questions, sum(Posts.Score) as Score\n  from (Posts join PostTypes on Posts.PostTypeId = PostTypes.Id)\n  where Posts.OwnerUserId = @userId\n    and PostTypes.Name = 'Question'\n    ) as QT,\n(\nselect count(*) as Answers, sum(Posts.Score) as Score\n  from (Posts join PostTypes on Posts.PostTypeId = PostTypes.Id)\n  where Posts.OwnerUserId = @userId\n    and PostTypes.Name = 'Answer'\n    ) as AT;",
        "CreationDate": "2014-01-31 03:58:55",
        "validated": false,
        "QueryBody_Original": "DECLARE  @userId int = ##UserId##\n\nselect * from\n(\nselect count(*) as Questions, sum(Posts.Score) as Score\n  from (Posts join PostTypes on Posts.PostTypeId = PostTypes.Id)\n  where Posts.OwnerUserId = @userId\n    and PostTypes.Name = 'Question'\n    ) as QT,\n(\nselect count(*) as Answers, sum(Posts.Score) as Score\n  from (Posts join PostTypes on Posts.PostTypeId = PostTypes.Id)\n  where Posts.OwnerUserId = @userId\n    and PostTypes.Name = 'Answer'\n    ) as AT;"
    },
    {
        "QuerySetId": 164045,
        "Title": "Ratio of closed questions per month",
        "Description": null,
        "QueryBody": "SELECT  count(*), min(CreationDate)\nfrom Posts\nwhere CreationDate >= ##startdate:string##",
        "CreationDate": "2014-05-21 00:03:39",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 164046,
        "Title": "Tags where I have an answer with score 5 or more",
        "Description": null,
        "QueryBody": "DECLARE  @userId int = ##UserId##\n\nselect distinct '<' + cast(Tags.TagName as nvarchar) + '>' as [Tags], Ans.Id as [Post Link], Ans.Score\n  from (((select Posts.*\n    from Posts join PostTypes on Posts.PostTypeId = PostTypes.Id\n    where Posts.OwnerUserId = @userId\n      and PostTypes.Name = 'Answer'\n      and Posts.Score > 5) as Ans join Posts on Ans.ParentId = Posts.Id)\n    join PostTags on Posts.Id = PostTags.PostId)\n    join Tags on PostTags.TagId = Tags.Id;",
        "CreationDate": "2017-11-22 20:13:27",
        "validated": false,
        "QueryBody_Original": "DECLARE  @userId int = ##UserId##\n\nselect distinct '<' + cast(Tags.TagName as nvarchar) + '>' as [Tags], Ans.Id as [Post Link], Ans.Score\n  from (((select Posts.*\n    from Posts join PostTypes on Posts.PostTypeId = PostTypes.Id\n    where Posts.OwnerUserId = @userId\n      and PostTypes.Name = 'Answer'\n      and Posts.Score > 5) as Ans join Posts on Ans.ParentId = Posts.Id)\n    join PostTags on Posts.Id = PostTags.PostId)\n    join Tags on PostTags.TagId = Tags.Id;"
    },
    {
        "QuerySetId": 164049,
        "Title": "Percentage of closed questions per month",
        "Description": null,
        "QueryBody": "SELECT  *, 100*(0.0 + (SELECT count(*)\n  from Posts p\n  where CAST(\n      cast(DATEPART(YYYY, CreationDate) as varchar) + '-' + cast(DATEPART(MM, CreationDate) as varchar) + '-01'\n    as datetime) = [Month]\n    AND ClosedDate IS NOT NULL))\/(0.0 + (SELECT count(*)\n  from Posts p\n  where CAST(\n      cast(DATEPART(YYYY, CreationDate) as varchar) + '-' + cast(DATEPART(MM, CreationDate) as varchar) + '-01'\n    as datetime) = [Month])) \nFROM\n(\n  SELECT CAST(\n      cast(DATEPART(YYYY, CreationDate) as varchar) + '-' + cast(DATEPART(MM, CreationDate) as varchar) + '-01'\n    as datetime) [Month]\n  from Posts p\n  where CreationDate >= ##startdate:string##\n) as X\ngroup by [Month]\norder by [Month] asc",
        "CreationDate": "2014-01-31 05:20:43",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 164091,
        "Title": "Find posts with common spelling mistakes",
        "Description": null,
        "QueryBody": "SELECT \n    Id as [Post Link]\nfrom\n    Posts\nwhere\n    Id > ##StartID:int?1##\n    and Id < ##EndID:int?1000000##\n    and\n    (\n        Body like '%cant%'\n        or Body like '%dont%'\n        or Body like '%wont%'\n    )",
        "CreationDate": "2014-01-31 15:20:43",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 164128,
        "Title": "Find User by Deleted Question",
        "Description": null,
        "QueryBody": "SELECT  *\nFROM Posts\nWHERE (PostTypeId = 12) and (Id = ##POSTID##)\norder by creationdate",
        "CreationDate": "2014-01-31 19:48:33",
        "validated": false,
        "QueryBody_Original": "SELECT  *\nFROM Posts\nWHERE (PostTypeId = 12) and (Id = ##POSTID##)\norder by creationdate"
    },
    {
        "QuerySetId": 164197,
        "Title": "Stack Overflow questions with outstanding final close vote",
        "Description": "A list of Stack Overflow questions with outstanding close votes, sorted by number of votes.\r\n",
        "QueryBody": "WITH  outstanding close votes\n-- A list of Stack Overflow questions WITH outstanding close votes, sorted by number of votes.\n-- This variant displays only those questions WITH four or more closevotes\n\nselect * FROM\n(select\n  Posts.Id as [Post Link],\n  avg(Posts.Score) as [Score],\n  count(*) as [Close Votes],\n  max(Votes.CreationDate) as [Last Vote],\n  min(Votes.CreationDate) as [First Vote],\n  Posts.CreationDate\nfrom Posts\ninner join Votes on Posts.Id=Votes.PostId\nwhere \n  Votes.VoteTypeId=6 and Posts.ClosedDate is NULL and Posts.CreationDate > 2014-01-01\ngroup by Posts.Id, Posts.CreationDate\n) AS Myview \nwhere\n  [Close Votes] > 3\norder by [Last Vote] desc, [Score] asc, [Close Votes] desc, CreationDate",
        "CreationDate": "2014-08-10 02:02:15",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 164846,
        "Title": "Progress towards Commentator, Pundit - including comment contents\/date",
        "Description": null,
        "QueryBody": "SELECT  TOP 10\n    Id as [Post Link],\n    Score,\n    Text,\n    CreationDate,\n    CAST(CONVERT(INT, CAST(Score as float) * 20) as VARCHAR(5)) + '%' as PunditProgress\nFROM Comments\nWHERE UserId=##UserID:int##\nORDER BY Score DESC",
        "CreationDate": "2014-02-04 06:32:20",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 165066,
        "Title": "Top users by country with all data",
        "Description": null,
        "QueryBody": "SELECT \n    Top ##Top##\n    ROW_NUMBER() OVER(ORDER BY Reputation DESC) AS [#], \n    DisplayName,\n    WebsiteUrl,\n    Location,\n    Age,\n    Reputation,\n    Id\nFROM\n    Users\nWHERE\n     LOWER(Location) LIKE LOWER('%##FullCountryName##%')\nORDER BY\n    Reputation DESC;",
        "CreationDate": "2014-02-04 17:26:08",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 165843,
        "Title": "Show the amount of new posts for given tag for the last given n months",
        "Description": null,
        "QueryBody": "DECLARE  @Tag1 nvarchar(max) = ##Tag1:string##\nDECLARE @Months nvarchar(max) = ##Months:string##\n\n;WITH n(n) AS\n(\n    SELECT 1\n    UNION ALL\n    SELECT n+1 FROM n WHERE n < @Months\n)\n\nSELECT limits.limit_start, limits.limit_end, COUNT(*) AS Posts FROM Tags\n    INNER JOIN PostTags ON PostTags.TagId = Tags.id\n    INNER JOIN Posts ON Posts.ParentId = PostTags.PostId\n    INNER JOIN \n    (select DATEADD(month, -1 * numbers.number, GETDATE()) as limit_start,\n    DATEADD(month, -1 * (numbers.number -1), GETDATE()) as limit_end from (\n      SELECT n as number FROM n\n      ) numbers) limits ON 1=1\nwhere tagname = @Tag1 \nAND posts.creationdate > limits.limit_start\nAND posts.creationdate <= limits.limit_end\ngroup by limits.limit_start, limits.limit_end, tagname\nOPTION (MAXRECURSION 1000);",
        "CreationDate": "2014-02-08 18:42:37",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 165846,
        "Title": "Lowest votes to reputation ratio",
        "Description": null,
        "QueryBody": "DECLARE  @Rep int = ##Rep?1000##;\nDECLARE @Seen int = ##Seen?12##;\n-- Rep: Minimum reputation:   \"Returns users with at least this much reputation\"\n-- Seen: Seen in the last X months:   \"Returns only users seen within the last X months\"\n\n\nselect Id as [User Link],\n  Id as Id,\n  DisplayName,\n  Reputation,\n  UpVotes + DownVotes as [Votes],\n  Convert(Decimal(10,2),(Convert(float, Reputation) \/ (UpVotes + DownVotes))) as [Reputation per vote]\nfrom Users\nwhere\n  UpVotes + DownVotes > 0 and\n  Reputation > @Rep\n  and LastAccessDate > DateAdd(month, -@Seen, CURRENT_TIMESTAMP)\norder by\n  Convert(Decimal(10,2),(Convert(float, Reputation) \/ (UpVotes + DownVotes))) asc",
        "CreationDate": "2015-12-09 21:51:55",
        "validated": false,
        "QueryBody_Original": "DECLARE  @Rep int = ##Rep?1000##;\nDECLARE @Seen int = ##Seen?12##;\n-- Rep: Minimum reputation:   \"Returns users with at least this much reputation\"\n-- Seen: Seen in the last X months:   \"Returns only users seen within the last X months\"\n\n\nselect Id as [User Link],\n  Id as Id,\n  DisplayName,\n  Reputation,\n  UpVotes + DownVotes as [Votes],\n  Convert(Decimal(10,2),(Convert(float, Reputation) \/ (UpVotes + DownVotes))) as [Reputation per vote]\nfrom Users\nwhere\n  UpVotes + DownVotes > 0 and\n  Reputation > @Rep\n  and LastAccessDate > DateAdd(month, -@Seen, CURRENT_TIMESTAMP)\norder by\n  Convert(Decimal(10,2),(Convert(float, Reputation) \/ (UpVotes + DownVotes))) asc"
    },
    {
        "QuerySetId": 166494,
        "Title": "How close am I to Convention badge?",
        "Description": null,
        "QueryBody": "DECLARE  @UserId int = ##UserId##\n\nSELECT \n    PostId  as [Post Link],\n    Count(*) AS CommentCount,\n    Score\nFROM \n    Comments\nWHERE \n    UserId = @UserId\n    AND Score >= 2\nGROUP BY \n    PostId, Score\nORDER BY \n    Score DESC",
        "CreationDate": "2017-07-18 00:42:43",
        "validated": false,
        "QueryBody_Original": "DECLARE  @UserId int = ##UserId##\n\nSELECT \n    PostId  as [Post Link],\n    Count(*) AS CommentCount,\n    Score\nFROM \n    Comments\nWHERE \n    UserId = @UserId\n    AND Score >= 2\nGROUP BY \n    PostId, Score\nORDER BY \n    Score DESC"
    },
    {
        "QuerySetId": 166536,
        "Title": "All votes by a user",
        "Description": null,
        "QueryBody": "SELECT  * from Votes where UserId = ##UserId##",
        "CreationDate": "2014-02-11 05:30:59",
        "validated": false,
        "QueryBody_Original": "SELECT  * from Votes where UserId = ##UserId##"
    },
    {
        "QuerySetId": 166546,
        "Title": "Questions per day by week",
        "Description": null,
        "QueryBody": "DECLARE  @FirstQuestion datetime = (SELECT CreationDate FROM Posts WHERE Id = 1);\n\nwith questions_by_week as (\nselect cast (dateadd(week, DATEDIFF(week, getdate(), p.CreationDate), getdate()) as DATE) Week, \n       count(*) post_count\nfrom Posts p \nwhere PostTypeId = 1\n      and CreationDate >= @FirstQuestion\ngroup by DATEDIFF(week, getdate(), p.CreationDate)\n)\n\nselect p.Week, cast(post_count as float)\/7 questions_per_day\nfrom questions_by_week p\norder by p.Week",
        "CreationDate": "2014-08-28 11:38:16",
        "validated": false,
        "QueryBody_Original": "DECLARE  @FirstQuestion datetime = (SELECT CreationDate FROM Posts WHERE Id = 1);\n\nwith questions_by_week as (\nselect cast (dateadd(week, DATEDIFF(week, getdate(), p.CreationDate), getdate()) as DATE) Week, \n       count(*) post_count\nfrom Posts p \nwhere PostTypeId = 1\n      and CreationDate >= @FirstQuestion\ngroup by DATEDIFF(week, getdate(), p.CreationDate)\n)\n\nselect p.Week, cast(post_count as float)\/7 questions_per_day\nfrom questions_by_week p\norder by p.Week"
    },
    {
        "QuerySetId": 166556,
        "Title": "Rep for the past 14 months",
        "Description": null,
        "QueryBody": "DECLARE  @UserId int = 181965\n\nSELECT TOP 20 \n    TagName,\n    COUNT(*) AS UpVotes \nFROM Tags\n    INNER JOIN PostTags ON PostTags.TagId = Tags.id\n    INNER JOIN Posts ON Posts.ParentId = PostTags.PostId\n    INNER JOIN Votes ON Votes.PostId = Posts.Id and VoteTypeId = 2\nWHERE \n    Posts.OwnerUserId = @UserId\n    AND Votes.CreationDate >= dateadd(month, -14, current_timestamp)\nGROUP BY TagName \nORDER BY UpVotes DESC",
        "CreationDate": "2014-02-11 09:08:41",
        "validated": false,
        "QueryBody_Original": "DECLARE  @UserId int = 181965\n\nSELECT TOP 20 \n    TagName,\n    COUNT(*) AS UpVotes \nFROM Tags\n    INNER JOIN PostTags ON PostTags.TagId = Tags.id\n    INNER JOIN Posts ON Posts.ParentId = PostTags.PostId\n    INNER JOIN Votes ON Votes.PostId = Posts.Id and VoteTypeId = 2\nWHERE \n    Posts.OwnerUserId = @UserId\n    AND Votes.CreationDate >= dateadd(month, -14, current_timestamp)\nGROUP BY TagName \nORDER BY UpVotes DESC"
    },
    {
        "QuerySetId": 166691,
        "Title": "How many answers have I posted in the past 14 months by tag",
        "Description": null,
        "QueryBody": "DECLARE  @UserId int = 181965\n\nSELECT --TOP 20 \n    TagName,\n    COUNT(DISTINCT Posts.ParentID) AS UniqueAnswers \nFROM Tags\n    INNER JOIN PostTags ON PostTags.TagId = Tags.id\n    INNER JOIN Posts ON Posts.ParentId = PostTags.PostId\n    INNER JOIN Votes ON Votes.PostId = Posts.Id \nWHERE \n    Posts.OwnerUserId = @UserId\n    AND Votes.CreationDate >= dateadd(month, -14, current_timestamp)\nGROUP BY TagName \nORDER BY UniqueAnswers DESC",
        "CreationDate": "2014-02-11 22:50:49",
        "validated": false,
        "QueryBody_Original": "DECLARE  @UserId int = 181965\n\nSELECT --TOP 20 \n    TagName,\n    COUNT(DISTINCT Posts.ParentID) AS UniqueAnswers \nFROM Tags\n    INNER JOIN PostTags ON PostTags.TagId = Tags.id\n    INNER JOIN Posts ON Posts.ParentId = PostTags.PostId\n    INNER JOIN Votes ON Votes.PostId = Posts.Id \nWHERE \n    Posts.OwnerUserId = @UserId\n    AND Votes.CreationDate >= dateadd(month, -14, current_timestamp)\nGROUP BY TagName \nORDER BY UniqueAnswers DESC"
    },
    {
        "QuerySetId": 166979,
        "Title": "Return all votes for the life of a site",
        "Description": null,
        "QueryBody": "SELECT  count(*) as votes, votetypeid, orderbyYear, orderbyMonth from (\n  SELECT\n    votetypeid,\n    datepart(mm, creationdate) as orderbyMonth, \n    datepart(yyyy, creationdate) as orderbyYear \n    from votes where votetypeid in (2,3)\n) stats s \ngroup by orderbyYear, orderbyMonth, votetypeid order by orderbyYear, orderbyMonth\n*\/\n\nSELECT * from votes",
        "CreationDate": "2014-02-13 03:02:41",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 167272,
        "Title": "Posts by a user, sorted by length",
        "Description": "Posts by a user, sorted by length",
        "QueryBody": "SELECT  \n  p.Id as [Post Link],\n  LEN(p.Body) as Length\n  \nFROM \n  Posts p\n  \nWHERE\n  p.OwnerUserId = ##UserId##\n  \nORDER BY Length DESC",
        "CreationDate": "2014-05-31 16:31:03",
        "validated": false,
        "QueryBody_Original": "SELECT  \n  p.Id as [Post Link],\n  LEN(p.Body) as Length\n  \nFROM \n  Posts p\n  \nWHERE\n  p.OwnerUserId = ##UserId##\n  \nORDER BY Length DESC"
    },
    {
        "QuerySetId": 167361,
        "Title": "Find Questions with N Close Votes for Given Tag",
        "Description": null,
        "QueryBody": "SELECT \n  q.Id AS [Post Link],\n  (SELECT count(*) FROM Votes WHERE PostId = q.Id and VoteTypeId = 6) AS CloseVotes\nFROM Posts q\n  INNER JOIN Votes v ON q.Id = v.PostId\nWHERE q.Tags LIKE '%##TagName##%'\n  and v.VoteTypeId = 6\n  and q.ClosedDate IS NULL\n  and q.AcceptedAnswerId IS NULL\n  and (SELECT count(*) FROM Votes WHERE PostId = q.Id and VoteTypeId = 6) = ##CloseVote##\nGROUP BY q.Id",
        "CreationDate": "2014-02-18 02:42:30",
        "validated": false,
        "QueryBody_Original": "SELECT \n  q.Id AS [Post Link],\n  (SELECT count(*) FROM Votes WHERE PostId = q.Id and VoteTypeId = 6) AS CloseVotes\nFROM Posts q\n  INNER JOIN Votes v ON q.Id = v.PostId\nWHERE q.Tags LIKE '%##TagName##%'\n  and v.VoteTypeId = 6\n  and q.ClosedDate IS NULL\n  and q.AcceptedAnswerId IS NULL\n  and (SELECT count(*) FROM Votes WHERE PostId = q.Id and VoteTypeId = 6) = ##CloseVote##\nGROUP BY q.Id"
    },
    {
        "QuerySetId": 167625,
        "Title": "Questions with close votes by specific tag",
        "Description": null,
        "QueryBody": "SELECT  row_number() over (order by p.id),\n  p.id AS [Post Link], p.tags\nfrom posts p\ninner join votes v\n  on p.id = v.postid\ninner join posttags pt\n  on p.id = pt.postid\ninner join tags t\n  on pt.tagid = t.id\nwhere v.votetypeid = 6\n  and p.closeddate is null\n  and t.tagname = ##Tag:string?tagname##\n  -- and p.viewcount < 100",
        "CreationDate": "2014-03-30 05:51:33",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 167713,
        "Title": "Find Answers of Given Length for Given Text in Body",
        "Description": null,
        "QueryBody": "SELECT \n  a.Id AS [Post Link]\nFROM Posts a\nWHERE a.PostTypeId = 2\n  and a.Body LIKE '%##TextToSearch##%'\n  and len(a.Body) < ##Length##\n  and Score <= 0",
        "CreationDate": "2014-02-27 21:12:01",
        "validated": false,
        "QueryBody_Original": "SELECT \n  a.Id AS [Post Link]\nFROM Posts a\nWHERE a.PostTypeId = 2\n  and a.Body LIKE '%##TextToSearch##%'\n  and len(a.Body) < ##Length##\n  and Score <= 0"
    },
    {
        "QuerySetId": 168186,
        "Title": "What is my reputation rank among accounts created in the same year?",
        "Description": null,
        "QueryBody": "DECLARE  @UserId INT = ##UserId##\nDECLARE @Reputation INT\nDECLARE @StartTime DATETIME\n\nSELECT @Reputation = Reputation, @StartTime = CreationDate FROM Users \nWHERE Id = @UserID\n\nSELECT 1 + COUNT(Id) AS Rank FROM Users WHERE Reputation > @Reputation \nAND DATEDIFF(YEAR, @StartTime, CreationDate) = 0\nAND DATEDIFF(MONTH, @StartTime, CreationDate) = 0",
        "CreationDate": "2014-06-29 19:21:20",
        "validated": false,
        "QueryBody_Original": "DECLARE  @UserId INT = ##UserId##\nDECLARE @Reputation INT\nDECLARE @StartTime DATETIME\n\nSELECT @Reputation = Reputation, @StartTime = CreationDate FROM Users \nWHERE Id = @UserID\n\nSELECT 1 + COUNT(Id) AS Rank FROM Users WHERE Reputation > @Reputation \nAND DATEDIFF(YEAR, @StartTime, CreationDate) = 0\nAND DATEDIFF(MONTH, @StartTime, CreationDate) = 0"
    },
    {
        "QuerySetId": 168385,
        "Title": "Top 50 users with most number of comments containing given text",
        "Description": null,
        "QueryBody": "SELECT  TOP 50\n  ROW_NUMBER() OVER(ORDER BY count(Id) DESC) AS [#], \n  UserId as [User Link],\n  count(Id) as c\nfrom Comments\nwhere\n  Text like '%##CommentText##%' and\n  len(Text) <= ##CommentLength## and\n  UserId IS NOT NULL\ngroup by\n  UserId\norder by\n  c desc",
        "CreationDate": "2014-02-17 21:45:34",
        "validated": false,
        "QueryBody_Original": "SELECT  TOP 50\n  ROW_NUMBER() OVER(ORDER BY count(Id) DESC) AS [#], \n  UserId as [User Link],\n  count(Id) as c\nfrom Comments\nwhere\n  Text like '%##CommentText##%' and\n  len(Text) <= ##CommentLength## and\n  UserId IS NOT NULL\ngroup by\n  UserId\norder by\n  c desc"
    },
    {
        "QuerySetId": 169434,
        "Title": "Number of users that fall within a reputation range",
        "Description": null,
        "QueryBody": "SELECT  count(U.Id) AS 'Total Users'\nFROM Users as U\nWHERE U.Reputation > ##MinimumReputation:int##\nAND U.Reputation < ##MaximumReputation:int##",
        "CreationDate": "2014-02-20 05:23:02",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 169736,
        "Title": "A Users's post status distribution",
        "Description": null,
        "QueryBody": "SELECT     P.Id as [Post Link], P.ClosedDate\nFROM\tPosts AS P\nWHERE\tOwnerUserId = ##UserId:int##\nORDER BY P.CreationDate, P.ClosedDate",
        "CreationDate": "2014-02-21 06:38:41",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 170866,
        "Title": "How many posts occured in the first 2 weeks of beta?",
        "Description": null,
        "QueryBody": "DECLARE  @private_beta date = (select (CreationDate) \n                              from Posts \n                              where Id = (select min(Id) from Posts where Id > 0));\n\nselect count(*)\nfrom Posts\n     join PostTypes pt on pt.Id = PostTypeId\nwhere pt.Name in ('Question', 'Answer')\n      and datediff(week, @private_beta, CreationDate) <= 2",
        "CreationDate": "2014-02-26 02:38:39",
        "validated": false,
        "QueryBody_Original": "DECLARE  @private_beta date = (select (CreationDate) \n                              from Posts \n                              where Id = (select min(Id) from Posts where Id > 0));\n\nselect count(*)\nfrom Posts\n     join PostTypes pt on pt.Id = PostTypeId\nwhere pt.Name in ('Question', 'Answer')\n      and datediff(week, @private_beta, CreationDate) <= 2"
    },
    {
        "QuerySetId": 172022,
        "Title": "Which questions need editing for archaeologist?",
        "Description": null,
        "QueryBody": "SELECT  TOP 200\nP.Id AS [Post Link], P.CreationDate, P.Score, P.PostTypeID, p.LastEditDate,p.LastActivityDate\nFROM Posts AS P\nWHERE  p.LastEditDate < DATEADD(month, -6, p.LastActivityDate) \nAND Score <= 0 AND AcceptedAnswerId is null AND p.LastEditDate is null\nORDER BY P.CreationDate desc",
        "CreationDate": "2014-03-01 23:48:34",
        "validated": false,
        "QueryBody_Original": "SELECT  TOP 200\nP.Id AS [Post Link], P.CreationDate, P.Score, P.PostTypeID, p.LastEditDate,p.LastActivityDate\nFROM Posts AS P\nWHERE  p.LastEditDate < DATEADD(month, -6, p.LastActivityDate) \nAND Score <= 0 AND AcceptedAnswerId is null AND p.LastEditDate is null\nORDER BY P.CreationDate desc"
    },
    {
        "QuerySetId": 172062,
        "Title": "Daily Question Activity over time",
        "Description": null,
        "QueryBody": "DECLARE  @epoch as date = DateAdd(week, - ##Weeks:int?52##, CURRENT_TIMESTAMP);\n\nwith QActivity as (\nselect DateAdd(day, 7 - DatePart(weekday, CreationDate), Convert(Date, CreationDate)) as WeekDate,\n       DatePart(weekday, CreationDate) as DayOfWeek,\n       Id\nfrom Posts\nwhere PostTypeId = 1\n)\nselect WeekDate,\n       case when DayOfWeek = 1 then 'Sunday'\n            when DayOfWeek = 2 then 'Monday'\n            when DayOfWeek = 3 then 'Tuesday'\n            when DayOfWeek = 4 then 'Wednesday'\n            when DayOfWeek = 5 then 'Thursday'\n            when DayOfWeek = 6 then 'Friday'\n            when DayOfWeek = 7 then 'Saturday'\n       end as Series,\n       count(*) as Plot\nfrom QActivity\ngroup by WeekDate, DayOfWeek\norder by WeekDate",
        "CreationDate": "2014-03-02 08:53:39",
        "validated": false,
        "QueryBody_Original": "DECLARE  @epoch as date = DateAdd(week, - ##Weeks:int?52##, CURRENT_TIMESTAMP);\n\nwith QActivity as (\nselect DateAdd(day, 7 - DatePart(weekday, CreationDate), Convert(Date, CreationDate)) as WeekDate,\n       DatePart(weekday, CreationDate) as DayOfWeek,\n       Id\nfrom Posts\nwhere PostTypeId = 1\n)\nselect WeekDate,\n       case when DayOfWeek = 1 then 'Sunday'\n            when DayOfWeek = 2 then 'Monday'\n            when DayOfWeek = 3 then 'Tuesday'\n            when DayOfWeek = 4 then 'Wednesday'\n            when DayOfWeek = 5 then 'Thursday'\n            when DayOfWeek = 6 then 'Friday'\n            when DayOfWeek = 7 then 'Saturday'\n       end as Series,\n       count(*) as Plot\nfrom QActivity\ngroup by WeekDate, DayOfWeek\norder by WeekDate"
    },
    {
        "QuerySetId": 172077,
        "Title": "What are my top voted comments?",
        "Description": null,
        "QueryBody": "SELECT \n  c.Score,\n  c.Id AS [Comment Link],\n  c.CreationDate\nFROM\n  Comments c\nWHERE\n  c.UserId = ##UserId##\nORDER BY\n  c.Score DESC, c.CreationDate DESC",
        "CreationDate": "2014-03-16 01:33:18",
        "validated": false,
        "QueryBody_Original": "SELECT \n  c.Score,\n  c.Id AS [Comment Link],\n  c.CreationDate\nFROM\n  Comments c\nWHERE\n  c.UserId = ##UserId##\nORDER BY\n  c.Score DESC, c.CreationDate DESC"
    },
    {
        "QuerySetId": 172185,
        "Title": "Users from around the world",
        "Description": "Simple configurable query to resolve users to a geography",
        "QueryBody": "SELECT  Users.Id as [User Link], Users.Location, Users.DisplayName, Users.CreationDate, Users.LastAccessDate, Users.Reputation, count(*) Posts\nfrom Users\n  inner join Posts on Users.Id = Posts.OwnerUserId\nwhere lower(Location ) like Lower('%' + ##Location:string## + '%')\ngroup by Users.Id, Users.Location, Users.DisplayName, Users.CreationDate, Users.LastAccessDate, Users.Reputation\norder by LastAccessDate desc",
        "CreationDate": "2014-03-02 23:41:59",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 172383,
        "Title": "All answers by a user, with questions",
        "Description": null,
        "QueryBody": "SELECT  a.CreationDate, a.Id, b.Id as [Post Link], b.Title, b.Body as Question, a.Body as Answer FROM Posts a\nINNER JOIN Posts b\nON a.ParentId=b.Id\nWHERE a.OwnerUserId=##UserId##\nORDER BY a.CreationDate ASC",
        "CreationDate": "2014-03-03 20:51:41",
        "validated": false,
        "QueryBody_Original": "SELECT  a.CreationDate, a.Id, b.Id as [Post Link], b.Title, b.Body as Question, a.Body as Answer FROM Posts a\nINNER JOIN Posts b\nON a.ParentId=b.Id\nWHERE a.OwnerUserId=##UserId##\nORDER BY a.CreationDate ASC"
    },
    {
        "QuerySetId": 172890,
        "Title": "Questions Unanswered for 30 Days as of or after the Given Date",
        "Description": "Listing of all question's that were unanswered for 30 days as of or after the given date.",
        "QueryBody": "DECLARE  @UnansweredBefore date = ##UnansweredBeforeDate##\n\n\nselect Questions.Id AS [Post Link], Questions.CreationDate, Count(Distinct(Answers.Id)) as [Current Answers]\nfrom Posts as Questions \nleft join Posts as Answers \n  on Answers.ParentId = Questions.Id \nWhere Questions.PostTypeId = 1 \ngroup by Questions.Id, Questions.CreationDate, Questions.Title \nhaving (Min(Answers.CreationDate) > @UnansweredBefore \n  and Questions.CreationDate < Min(Answers.CreationDate)-30 )\n  or (Count(Answers.ID)=0 and Questions.CreationDate < GETUTCDATE()-30)",
        "CreationDate": "2014-03-06 00:23:28",
        "validated": false,
        "QueryBody_Original": "DECLARE  @UnansweredBefore date = ##UnansweredBeforeDate##\n\n\nselect Questions.Id AS [Post Link], Questions.CreationDate, Count(Distinct(Answers.Id)) as [Current Answers]\nfrom Posts as Questions \nleft join Posts as Answers \n  on Answers.ParentId = Questions.Id \nWhere Questions.PostTypeId = 1 \ngroup by Questions.Id, Questions.CreationDate, Questions.Title \nhaving (Min(Answers.CreationDate) > @UnansweredBefore \n  and Questions.CreationDate < Min(Answers.CreationDate)-30 )\n  or (Count(Answers.ID)=0 and Questions.CreationDate < GETUTCDATE()-30)"
    },
    {
        "QuerySetId": 173103,
        "Title": "Longest Posts for a User",
        "Description": null,
        "QueryBody": "SELECT  TOP 20 \n id as [Post Link]\n , len(body) - (patindex('%<\/code><\/pre>%', body) - patindex('%<pre><code>%', body)) as lenwithoutcode\nfrom posts \nwhere owneruserid = ##UserId##\norder by 2 desc",
        "CreationDate": "2014-03-06 19:17:33",
        "validated": false,
        "QueryBody_Original": "SELECT  TOP 20 \n id as [Post Link]\n , len(body) - (patindex('%<\/code><\/pre>%', body) - patindex('%<pre><code>%', body)) as lenwithoutcode\nfrom posts \nwhere owneruserid = ##UserId##\norder by 2 desc"
    },
    {
        "QuerySetId": 173138,
        "Title": "Media time to last answer by answer count",
        "Description": null,
        "QueryBody": "DECLARE  @FirstQuestion datetime = (SELECT CreationDate FROM Posts WHERE Id = 1) + 1;\n\nSELECT\n  isnull(datediff(second, q.CreationDate, max(a.CreationDate)), 0) TTLA,\n  isnull(q.AnswerCount, 0) answers\nINTO #AnswerTimes\nFROM Posts q\nleft JOIN Posts a ON a.ParentId = q.Id AND a.OwnerUserId <> q.OwnerUserId\nWHERE q.PostTypeId = 1 AND q.CreationDate >= @FirstQuestion \n  AND q.ClosedDate IS NULL\n  and a.CreationDate > q.CreationDate\n--  AND q.CreationDate BETWEEN '2013-01-01' AND @LastQuestion\nGROUP BY q.Id, q.CreationDate, q.AnswerCount\n\nselect t.answers, max(median)\nfrom (\n  SELECT X.answers,\n  PERCENTILE_DISC(0.5) WITHIN GROUP (ORDER BY TTLA) OVER (PARTITION BY X.answers) \/ 60.0 Median\n  FROM #AnswerTimes X\n) t\ngroup by t.answers\norder by t.answers",
        "CreationDate": "2014-03-07 02:17:19",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 173360,
        "Title": "Posts edited by the user, excluding own posts",
        "Description": null,
        "QueryBody": "SELECT  h.postid as [Post Link], h.creationdate as [Edit Date] from posthistory h, posts p\nwhere\nh.userid=##UserID## and h.posthistorytypeid in (4,5,6)\nand p.id=h.postid\nand p.owneruserid <> ##UserID##\norder by [Edit Date] desc",
        "CreationDate": "2014-03-08 00:20:12",
        "validated": false,
        "QueryBody_Original": "SELECT  h.postid as [Post Link], h.creationdate as [Edit Date] from posthistory h, posts p\nwhere\nh.userid=##UserID## and h.posthistorytypeid in (4,5,6)\nand p.id=h.postid\nand p.owneruserid <> ##UserID##\norder by [Edit Date] desc"
    },
    {
        "QuerySetId": 173724,
        "Title": "Get edits per day for specific user",
        "Description": null,
        "QueryBody": "SELECT  Top 100 UserId As [User Link], DATEADD(dd, 0, DATEDIFF(dd, 0, CreationDate)) As [Date], Count(Id) As DailyEdits\nFrom PostHistory\nWhere UserId <> -1\nGroup By UserId, DATEADD(dd, 0, DATEDIFF(dd, 0, CreationDate))\nOrder By DailyEdits Desc",
        "CreationDate": "2016-01-22 11:49:24",
        "validated": false,
        "QueryBody_Original": "SELECT  Top 100 UserId As [User Link], DATEADD(dd, 0, DATEDIFF(dd, 0, CreationDate)) As [Date], Count(Id) As DailyEdits\nFrom PostHistory\nWhere UserId <> -1\nGroup By UserId, DATEADD(dd, 0, DATEDIFF(dd, 0, CreationDate))\nOrder By DailyEdits Desc"
    },
    {
        "QuerySetId": 173746,
        "Title": "New users with some reputation and some unanswered questions ",
        "Description": null,
        "QueryBody": "SELECT  TOP 500 s.userId, u.Id as [User Link], u.CreationDate, s.questionCount, u.Reputation \nFROM (\nSELECT u.Id AS userId, COUNT(p.Id) AS questionCount\nFROM Users AS u INNER JOIN Posts AS p ON u.Id=p.OwnerUserId\nWHERE p.PostTypeId = 1 AND p.AcceptedAnswerId IS NULL \nGROUP BY u.Id\n) AS s\nJOIN Users AS u ON s.userId=u.Id\nWHERE (u.Reputation >= ##MinRep:int##) AND (s.questionCount >= ##minQuestions:int##)  \nORDER BY u.CreationDate DESC",
        "CreationDate": "2014-03-10 10:47:25",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 173963,
        "Title": "Most voted answers in past week",
        "Description": null,
        "QueryBody": "DECLARE  @totalcount as int;\n\n\n\n    select ROW_NUMBER () over( order by count(*) desc) as Rank,\n           p.Id as [Post Link],\n           count(*) as [Answer Upvotes],\n           @totalcount as [Week Vote Total]\n    from Posts p,\n         Votes v\n    where p.Id = v.PostId\n      and v.VoteTypeId in (2) -- upvote\/downvote\n      and p.PostTypeId = 2 -- answer\n    group by p.Id\n    order by count(*) desc",
        "CreationDate": "2017-11-08 01:42:34",
        "validated": false,
        "QueryBody_Original": "DECLARE  @totalcount as int;\n\n\n\n    select ROW_NUMBER () over( order by count(*) desc) as Rank,\n           p.Id as [Post Link],\n           count(*) as [Answer Upvotes],\n           @totalcount as [Week Vote Total]\n    from Posts p,\n         Votes v\n    where p.Id = v.PostId\n      and v.VoteTypeId in (2) -- upvote\/downvote\n      and p.PostTypeId = 2 -- answer\n    group by p.Id\n    order by count(*) desc"
    },
    {
        "QuerySetId": 173991,
        "Title": "My answers, by answer date",
        "Description": "My answers ordered by score\r\n",
        "QueryBody": "SELECT \n    q.Id, q.Title, q.Body, a.Id, a.Body, a.CreationDate, a.LastEditDate, a.LastEditorUserId, a.Score\nfrom\n    Posts q\n  inner join\n    Posts a\n  on q.Id = a.ParentId and a.postTypeId = 2 and q.postTypeId = 1\nwhere\n  a.OwnerUserId = ##UserId##\norder by a.CreationDate asc",
        "CreationDate": "2017-08-29 20:40:04",
        "validated": false,
        "QueryBody_Original": "SELECT \n    q.Id, q.Title, q.Body, a.Id, a.Body, a.CreationDate, a.LastEditDate, a.LastEditorUserId, a.Score\nfrom\n    Posts q\n  inner join\n    Posts a\n  on q.Id = a.ParentId and a.postTypeId = 2 and q.postTypeId = 1\nwhere\n  a.OwnerUserId = ##UserId##\norder by a.CreationDate asc"
    },
    {
        "QuerySetId": 174359,
        "Title": "Get statistics of own questions",
        "Description": null,
        "QueryBody": "SELECT  'site:\/\/questions\/' + CAST(Id AS nvarchar), Title, Score, ViewCount, \n        AnswerCount, CommentCount, FavoriteCount as [Posts] \n  from Posts \n  where PostTypeId = 1 and -- 'Question'\n        OwnerUserId = ##UserId##.",
        "CreationDate": "2014-03-14 03:51:20",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 174474,
        "Title": "Posts from MathOverflow an Mathematics with the same title",
        "Description": null,
        "QueryBody": "WITH  the same title\nSELECT a.Id, a.CreationDate AS \"MO Date\",\n       b.Id AS [Post Link], b.CreationDate AS \"MSE Date\"\nFROM [StackExchange.Mathoverflow]..[Posts] AS a JOIN [StackExchange.Math]..[Posts] AS b ON a.Title = b.Title\nWHERE a.PostTypeId = 1\n  and a.ClosedDate IS NULL\n  and b.ClosedDate IS NULL\nORDER BY a.CreationDate;",
        "CreationDate": "2014-03-14 15:12:29",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 174513,
        "Title": "Posts from MathOverflow an Mathematics with the same title between two given dates",
        "Description": null,
        "QueryBody": "WITH  the same title and posted at the same time\nSELECT b.Title, a.CreationDate AS \"MO Date\",  b.CreationDate AS \"MSE Date\",\n       ('http:\/\/mathoverflow.net\/questions\/' + CAST(a.Id AS varchar)), \n       ('http:\/\/math.stackexchange.com\/questions\/' + CAST(b.Id AS varchar))\nFROM \n  [StackExchange.Mathoverflow]..[Posts] AS a \n    JOIN [StackExchange.Math]..[Posts] AS b ON a.Title = b.Title\nWHERE b.PostTypeId = 1\n  and ABS(DATEDIFF(hh,a.CreationDate,b.CreationDate)) <= 12 \n  and a.ClosedDate IS NULL\n  and b.ClosedDate IS NULL\nORDER BY a.CreationDate;",
        "CreationDate": "2014-03-16 03:00:46",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 174679,
        "Title": "Detect posts misusing backticks for programming languages",
        "Description": null,
        "QueryBody": "SELECT  Id as [Post Link]\nFROM Posts\nWHERE Posts.Id > ##StartID:int?1##\n  AND Posts.Id < ##EndID:int?1000000##\n  AND (Body LIKE '%<code>PHP<\/code>%'\n    OR Body LIKE '%<code>javascript<\/code>%'\n    OR Body LIKE '%<code>C#<\/code>%'\n    OR Body LIKE '%<code>python<\/code>%'\n    OR Body LIKE '%<code>java<\/code>%'\n    OR Body LIKE '%<code>C<\/code>%'\n    OR Body LIKE '%<code>C++<\/code>%'\n    OR Body LIKE '%<code>Android<\/code>%')\nORDER BY Id ASC\n  \n  -- StartID: Start ID\n  -- Developed with the help of Animuson's KBD query \n  -- (http:\/\/data.stackexchange.com\/stackoverflow\/query\/163235)",
        "CreationDate": "2014-03-16 05:53:25",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 175414,
        "Title": "Top tag-user pairs by upvotes",
        "Description": null,
        "QueryBody": "DECLARE  @limit int = ##Limit:int?100##\n\nSELECT TOP (@limit)\n  Posts.OwnerUserId AS [User Link],\n  Tags.TagName,\n  COUNT(*) AS [UpVotes],\n  Tags.Count AS [Posts with Tag]\nFROM\n  Tags\n  INNER JOIN PostTags \n    ON Tags.Id = PostTags.TagId\n  INNER JOIN Posts\n    ON PostTags.PostId = Posts.ParentId\n  INNER JOIN Votes\n    ON Posts.Id = Votes.PostId\nWHERE\n  VoteTypeId = 2 --upvotes only\nGROUP BY\n  Tags.TagName, Posts.OwnerUserId, Tags.Count\nORDER BY \n  [UpVotes] DESC",
        "CreationDate": "2014-12-12 02:41:37",
        "validated": false,
        "QueryBody_Original": "DECLARE  @limit int = ##Limit:int?100##\n\nSELECT TOP (@limit)\n  Posts.OwnerUserId AS [User Link],\n  Tags.TagName,\n  COUNT(*) AS [UpVotes],\n  Tags.Count AS [Posts with Tag]\nFROM\n  Tags\n  INNER JOIN PostTags \n    ON Tags.Id = PostTags.TagId\n  INNER JOIN Posts\n    ON PostTags.PostId = Posts.ParentId\n  INNER JOIN Votes\n    ON Posts.Id = Votes.PostId\nWHERE\n  VoteTypeId = 2 --upvotes only\nGROUP BY\n  Tags.TagName, Posts.OwnerUserId, Tags.Count\nORDER BY \n  [UpVotes] DESC"
    },
    {
        "QuerySetId": 175471,
        "Title": "Under 18 users with 1K+ rep",
        "Description": null,
        "QueryBody": "WITH  1k+ reputation.Note that I have included 18 because\n-- SE rounds of age to full year.\n\nSELECT TOP 1000 DisplayName,Reputation,Id,Location,AboutMe,WebsiteUrl, Age FROM Users WHERE Age IS NOT NULL AND Age<=18 AND Reputation>=1000 ORDER BY Reputation DESC",
        "CreationDate": "2014-03-18 11:25:59",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 175832,
        "Title": "Nap\u00ed\u0161te SELECT, ktor\u00fd vyp\u00ed\u0161e priemern\u00fd po\u010det dn\u00ed od d\u00e1tumu registr\u00e1cie pre v\u0161etk\u00fdch pou\u017e\u00edvate\u013eov, kt",
        "Description": null,
        "QueryBody": "SELECT  avg(DATEDIFF(day, CreationDate, CURRENT_TIMESTAMP )) FROM Users\n--WHERE ()\n--SELECT * FROM Users\n--JOIN (\n\n\nSELECT avg(DATEDIFF(day, U.CreationDate, CURRENT_TIMESTAMP )) FROM Users U\nLEFT Join Posts\nON U.Id=Posts.OwnerUserId\nWHERE PostTypeId is NULL",
        "CreationDate": "2014-03-18 20:25:59",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 176345,
        "Title": "The long tail of votes",
        "Description": "Show the posts that have accumulated the most votes a week or more after they were posted",
        "QueryBody": "DECLARE  @UserId int = ##UserId##\n\nSELECT \n--p.Id as [Post Link],\nCount(*) AS LateRep\nFROM Votes v, Posts p, Users u\nWHERE v.PostId = p.Id\nAND u.Id = p.OwnerUserId\nAND u.Id = @UserId\nAND DateDiff(second, p.CreationDate, v.CreationDate) > 7*24*3600\n--GROUP BY p.Id\nGROUP BY u.Id\nORDER BY LateRep DESC",
        "CreationDate": "2014-03-18 23:10:57",
        "validated": false,
        "QueryBody_Original": "DECLARE  @UserId int = ##UserId##\n\nSELECT \n--p.Id as [Post Link],\nCount(*) AS LateRep\nFROM Votes v, Posts p, Users u\nWHERE v.PostId = p.Id\nAND u.Id = p.OwnerUserId\nAND u.Id = @UserId\nAND DateDiff(second, p.CreationDate, v.CreationDate) > 7*24*3600\n--GROUP BY p.Id\nGROUP BY u.Id\nORDER BY LateRep DESC"
    },
    {
        "QuerySetId": 176398,
        "Title": "My Charity vs My Vanity",
        "Description": null,
        "QueryBody": "SELECT  (SELECT Sum(Score) * 10 FROM Posts WHERE PostTypeId = 2 AND OwnerUserId = ##userid## AND CommunityOwnedDate IS NOT NULL) AS [CHARITY], (SELECT Sum(Score) * 10 FROM Posts WHERE PostTypeId = 2 AND OwnerUserId = ##userid## AND CommunityOwnedDate IS NULL) AS [VANITY], ##userid## AS [User Link]",
        "CreationDate": "2015-07-06 23:24:31",
        "validated": false,
        "QueryBody_Original": "SELECT  (SELECT Sum(Score) * 10 FROM Posts WHERE PostTypeId = 2 AND OwnerUserId = ##userid## AND CommunityOwnedDate IS NOT NULL) AS [CHARITY], (SELECT Sum(Score) * 10 FROM Posts WHERE PostTypeId = 2 AND OwnerUserId = ##userid## AND CommunityOwnedDate IS NULL) AS [VANITY], ##userid## AS [User Link]"
    },
    {
        "QuerySetId": 176802,
        "Title": "Defined Tags with less than Two Questions",
        "Description": null,
        "QueryBody": "SELECT  ('site:\/\/tags\/' + T.TagName + '\/info\/' + '|' + T.TagName) AS TagName, CONVERT(nvarchar(30), P.CreationDate, 126) AS [ISO TIME]\nFROM Tags T, Posts P\nWHERE\nT.WikiPostId = P.Id\nAND\nT.WikiPostId IS NOT NULL\nAND\nT.ExcerptPostId IS NOT NULL\nAND \nP.Body = '' \nAND\nT.Count < 2\nOrder by [ISO TIME]",
        "CreationDate": "2016-04-27 23:37:27",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 177036,
        "Title": "Search user's comments by text",
        "Description": null,
        "QueryBody": "SELECT \n  c.Score,\n  c.Id AS [Comment Link],\n  c.CreationDate\nFROM\n  Comments c\nWHERE c.UserId = ##UserId## AND text like '%##Word##%'\nORDER BY c.CreationDate DESC",
        "CreationDate": "2014-03-21 13:18:15",
        "validated": false,
        "QueryBody_Original": "SELECT \n  c.Score,\n  c.Id AS [Comment Link],\n  c.CreationDate\nFROM\n  Comments c\nWHERE c.UserId = ##UserId## AND text like '%##Word##%'\nORDER BY c.CreationDate DESC"
    },
    {
        "QuerySetId": 177596,
        "Title": "Number of answers and views of answers",
        "Description": null,
        "QueryBody": "SELECT  count(*) Count, sum(q.ViewCount) Views\nfrom Posts a join Posts q on q.Id = a.ParentId\nwhere a.OwnerUserId = ##userId##\nand a.PostTypeId = 2\nand q.PostTypeId = 1\nand a.CreationDate >= '##year##0101'\nand a.CreationDate <= '##year##1231'",
        "CreationDate": "2016-01-02 13:42:15",
        "validated": false,
        "QueryBody_Original": "SELECT  count(*) Count, sum(q.ViewCount) Views\nfrom Posts a join Posts q on q.Id = a.ParentId\nwhere a.OwnerUserId = ##userId##\nand a.PostTypeId = 2\nand q.PostTypeId = 1\nand a.CreationDate >= '##year##0101'\nand a.CreationDate <= '##year##1231'"
    },
    {
        "QuerySetId": 178222,
        "Title": "What unanswered posts should I try to answer?",
        "Description": null,
        "QueryBody": "SELECT  id as i\nfrom posts as p\nwhere datediff(hour,creationdate,getutcdate( ))>167 -- a week old\n  and posttypeid=1 -- Q\n  and closeddate is null\n  and score>0\n  and 0=(SELECT count(1) from posts where posttypeid=2 and parentid=p.id and score>0)\n  and 0<(SELECT count(1) from () inner join (SELECT ) on \n  \n*\/  \n  \nSELECT\n(\nSELECT tags from posts as p\nwhere ##UserId## in (\n     SELECT owneruserid from posts\n     where posttypeid=2 -- A\n     and parentid=p.id\n     and score>1\n     )\nand posttypeid=1 -- Q\nand closeddate is null -- because we don't tend to retag closed Qs\nfor xml path(''),type\n).value('.','varchar(max)')\nas f\n;",
        "CreationDate": "2014-03-25 10:49:34",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 178433,
        "Title": "top users by tag and location",
        "Description": null,
        "QueryBody": "DECLARE  @Location VARCHAR(100) = ##Location##\nDECLARE @Tag VARCHAR(100) = ##Tag##\n\n;WITH USER_BY_TAG\nAS\n(\n  SELECT \n    ROW_NUMBER() OVER(ORDER BY COUNT(*) DESC) Rank,\n    u.Id AS [User Link], \n    COUNT(*) AS UpVotes\n  FROM Tags t\n      INNER JOIN PostTags pt ON pt.TagId = t.id\n      INNER JOIN Posts     p ON p.ParentId = pt.PostId\n      INNER JOIN Votes     v ON v.PostId = p.Id and VoteTypeId = 2\n      INNER JOIN Users     u ON u.Id = p.OwnerUserId\n  WHERE \n      LOWER(Location) LIKE '%'+@Location+'%' \n       AND  LOWER(TagName) like '%'+@Tag+'%'\n  GROUP BY u.id, TagName\n\n)\n\nSELECT * FROM USER_BY_TAG \nORDER BY upvotes DESC ;",
        "CreationDate": "2014-03-25 20:12:18",
        "validated": false,
        "QueryBody_Original": "DECLARE  @Location VARCHAR(100) = ##Location##\nDECLARE @Tag VARCHAR(100) = ##Tag##\n\n;WITH USER_BY_TAG\nAS\n(\n  SELECT \n    ROW_NUMBER() OVER(ORDER BY COUNT(*) DESC) Rank,\n    u.Id AS [User Link], \n    COUNT(*) AS UpVotes\n  FROM Tags t\n      INNER JOIN PostTags pt ON pt.TagId = t.id\n      INNER JOIN Posts     p ON p.ParentId = pt.PostId\n      INNER JOIN Votes     v ON v.PostId = p.Id and VoteTypeId = 2\n      INNER JOIN Users     u ON u.Id = p.OwnerUserId\n  WHERE \n      LOWER(Location) LIKE '%'+@Location+'%' \n       AND  LOWER(TagName) like '%'+@Tag+'%'\n  GROUP BY u.id, TagName\n\n)\n\nSELECT * FROM USER_BY_TAG \nORDER BY upvotes DESC ;"
    },
    {
        "QuerySetId": 178533,
        "Title": "Tag scores (for answers) for high-rep, active users",
        "Description": "Return tag scores for active, high-rep users.\r\n\r\nRepLimit: lower limit for consideration as high-rep.\r\n\r\nActiveWithinXDays: only consider users active within the last (this many) days.\r\n\r\nDaysHistoryToUse: limit consideration to answers from the last (this many) days.",
        "QueryBody": "WITH  ActiveUsers as \n(SELECT Id, DisplayName, Reputation, LastAccessDate \nFROM Users\nWHERE Reputation >= ##RepLimit:int## AND \nDATEDIFF(day, LastAccessDate, GetDate()) <= ##ActiveThreshold:int## \n),\nAnswers as\n(SELECT ActiveUsers.Id AS UserId, ActiveUsers.DisplayName, Posts.Id AS AnswerId, Posts.ParentId AS QuestionId, Posts.Score, Tags\nFROM Posts\nJOIN ActiveUsers ON ActiveUsers.Id = Posts.OwnerUserId\nJOIN PostTypes ON PostTypes.Id = Posts.PostTypeId\nWHERE PostTypes.Name = 'Answer' AND\nDATEDIFF(day, Posts.CreationDate, GetDate()) <= 30\n)\n\nSELECT Answers.UserId, Answers.DisplayName, Answers.AnswerId, Answers.QuestionId, Posts.Title, Posts.Tags\nFROM Answers\nJOIN Posts ON Answers.QuestionId = Posts.Id",
        "CreationDate": "2014-03-26 19:41:19",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 179087,
        "Title": "Month wise number of answers by User",
        "Description": null,
        "QueryBody": "SELECT  DateName( month , DateAdd( month , MONTH(CreationDate) , -1 ) ) AS [Month]\n     , YEAR(CreationDate) AS [Year]\n     , COUNT (ID) AS Answers\n  FROM Posts\n WHERE OwnerUserId = ##UserId##\n   AND PostTypeId = 2\n GROUP BY MONTH(CreationDate) , YEAR(CreationDate)\n ORDER BY YEAR(CreationDate) ASC, MONTH(CreationDate) ASC",
        "CreationDate": "2014-03-28 09:47:48",
        "validated": false,
        "QueryBody_Original": "SELECT  DateName( month , DateAdd( month , MONTH(CreationDate) , -1 ) ) AS [Month]\n     , YEAR(CreationDate) AS [Year]\n     , COUNT (ID) AS Answers\n  FROM Posts\n WHERE OwnerUserId = ##UserId##\n   AND PostTypeId = 2\n GROUP BY MONTH(CreationDate) , YEAR(CreationDate)\n ORDER BY YEAR(CreationDate) ASC, MONTH(CreationDate) ASC"
    },
    {
        "QuerySetId": 179088,
        "Title": "Number of Questions answered by Users In MonthWise",
        "Description": null,
        "QueryBody": "SELECT  Count(A.id) AS Answers\n\nFROM Posts AS A INNER JOIN Users AS U ON A.OwnerUserId=U.Id\nWHERE A.ParentID Is Not Null AND U.Id = ##UserId##",
        "CreationDate": "2018-11-28 04:53:28",
        "validated": false,
        "QueryBody_Original": "SELECT  Count(A.id) AS Answers\n\nFROM Posts AS A INNER JOIN Users AS U ON A.OwnerUserId=U.Id\nWHERE A.ParentID Is Not Null AND U.Id = ##UserId##"
    },
    {
        "QuerySetId": 179089,
        "Title": "Questions where I have answer more than once",
        "Description": null,
        "QueryBody": "SELECT  ParentId AS [Post Link], COUNT(ID) AS [Answers Count]\n  FROM Posts\n WHERE OwnerUserId = ##UserId##\nGROUP BY ParentId\n   HAVING COUNT(ParentId) >0",
        "CreationDate": "2016-09-21 20:15:36",
        "validated": false,
        "QueryBody_Original": "SELECT  ParentId AS [Post Link], COUNT(ID) AS [Answers Count]\n  FROM Posts\n WHERE OwnerUserId = ##UserId##\nGROUP BY ParentId\n   HAVING COUNT(ParentId) >0"
    },
    {
        "QuerySetId": 179141,
        "Title": "Total users and avid users",
        "Description": null,
        "QueryBody": "SELECT \n  Count(*) AS [Total Users]\nFROM\n  Users\n\nSELECT\n  Count(*) AS [Avid users]\nFROM\n  Users\nWHERE\n  Users.Reputation > 200",
        "CreationDate": "2014-03-28 14:46:48",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 179206,
        "Title": "Edit Impact on Questions only",
        "Description": null,
        "QueryBody": "WITH  Editors as (\n    select distinct PostId, UserId, 1 as ECount\n    from PostHistory\n    where PostHistoryTypeId = 5 -- body edit\n), QuestionCount as (\n    select count (*) as TotalQuestions\n    from Posts\n    where PostTypeId = 1\n      and ClosedDate is null\n)\nSelect Top ##TopX:int?10##\n    ROW_NUMBER () OVER (Order by sum(ECount) desc) as [Rank],\n    Users.Id as [User Link],\n    Users.displayName as [Sort Name],\n    TotalQuestions,\n    sum (Editors.ECount) as EditedQuestions,\n    (100 * sum(Editors.ECount)) \/ TotalQuestions as [Percent]\nfrom Users, QuestionCount, Editors\nwhere users.id = Editors.UserId\ngroup by users.Id, Users.DisplayName, TotalQuestions\norder by sum (ECount) desc",
        "CreationDate": "2014-03-28 18:48:58",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 179208,
        "Title": "Edit Impact on Questions only ",
        "Description": "including rollbacks, retags & title-changes\r\nThis query also runs for the userid you provide ;)",
        "QueryBody": "DECLARE  @userid as int = ##UId:int?-1##;\nwith Editors as (\n    select distinct PostId, UserId, 1 as ECount\n    from PostHistory\n    where PostHistoryTypeId >3 AND PostHistoryTypeId < 10\n), QuestionCount as (\n    select count (*) as TotalQuestions\n    from Posts\n    where PostTypeId = 1\n      and ClosedDate is null\n)\nSelect\n   ROW_NUMBER () OVER (Order by sum(ECount) desc) as [Rank],\n   Users.Id as [UserLink],\n   Users.displayName as [SortName],\n   TotalQuestions,\n   sum (Editors.ECount) as EditedQuestions,\n   round(100.0 * sum(Editors.ECount) \/ TotalQuestions, 2) as [Percent]\n   from Users, QuestionCount, Editors\n   where users.id = @userid AND Editors.UserId = @userid\n   group by users.Id, Users.DisplayName, TotalQuestions",
        "CreationDate": "2014-07-24 21:06:16",
        "validated": false,
        "QueryBody_Original": "DECLARE  @userid as int = ##UId:int?-1##;\nwith Editors as (\n    select distinct PostId, UserId, 1 as ECount\n    from PostHistory\n    where PostHistoryTypeId >3 AND PostHistoryTypeId < 10\n), QuestionCount as (\n    select count (*) as TotalQuestions\n    from Posts\n    where PostTypeId = 1\n      and ClosedDate is null\n)\nSelect\n   ROW_NUMBER () OVER (Order by sum(ECount) desc) as [Rank],\n   Users.Id as [UserLink],\n   Users.displayName as [SortName],\n   TotalQuestions,\n   sum (Editors.ECount) as EditedQuestions,\n   round(100.0 * sum(Editors.ECount) \/ TotalQuestions, 2) as [Percent]\n   from Users, QuestionCount, Editors\n   where users.id = @userid AND Editors.UserId = @userid\n   group by users.Id, Users.DisplayName, TotalQuestions"
    },
    {
        "QuerySetId": 179317,
        "Title": "Posts that contain inline code formatting",
        "Description": null,
        "QueryBody": "DECLARE  @UserId int = ##UserId##\n\nSELECT Id As [Post Link]\n  FROM Posts\n  WHERE\n    Body LIKE '%<code>%' AND\n    OwnerUserId = @UserID\n  ORDER BY CreationDate DESC;",
        "CreationDate": "2014-03-29 12:50:14",
        "validated": false,
        "QueryBody_Original": "DECLARE  @UserId int = ##UserId##\n\nSELECT Id As [Post Link]\n  FROM Posts\n  WHERE\n    Body LIKE '%<code>%' AND\n    OwnerUserId = @UserID\n  ORDER BY CreationDate DESC;"
    },
    {
        "QuerySetId": 179726,
        "Title": "Find Answers with Really low scores",
        "Description": null,
        "QueryBody": "SELECT  Id as [Post Link]\nFROM Posts\nWHERE\n  PostTypeId = 2 and\n  len(Body) <= ##length## and\n  Score <= ##Score##\nORDER BY Score ASC",
        "CreationDate": "2014-04-01 02:26:15",
        "validated": false,
        "QueryBody_Original": "SELECT  Id as [Post Link]\nFROM Posts\nWHERE\n  PostTypeId = 2 and\n  len(Body) <= ##length## and\n  Score <= ##Score##\nORDER BY Score ASC"
    },
    {
        "QuerySetId": 180540,
        "Title": "Questions in a tag that haven't had activity",
        "Description": null,
        "QueryBody": "DECLARE  @tagName varchar(25) = ##TagName:string##\nDECLARE @ageInMonths int = ##AgeInMonths:int##\n\nselect Posts.Id as [Post Link], Posts.LastActivityDate\n  from ((Posts join PostTypes on Posts.PostTypeId = PostTypes.Id)\n    join (PostTags join Tags on PostTags.TagId = Tags.Id)\n      on Posts.Id = PostTags.PostId)\n  where Tags.TagName = @tagName\n    and DateAdd(m, @ageInMonths, Posts.LastActivityDate) < GetDate()\n    and PostTypes.Name = 'Question'\n  order by Posts.LastActivityDate asc\n;",
        "CreationDate": "2014-04-04 17:25:14",
        "validated": false,
        "QueryBody_Original": "DECLARE  @tagName varchar(25) = ##TagName:string##\nDECLARE @ageInMonths int = ##AgeInMonths:int##\n\nselect Posts.Id as [Post Link], Posts.LastActivityDate\n  from ((Posts join PostTypes on Posts.PostTypeId = PostTypes.Id)\n    join (PostTags join Tags on PostTags.TagId = Tags.Id)\n      on Posts.Id = PostTags.PostId)\n  where Tags.TagName = @tagName\n    and DateAdd(m, @ageInMonths, Posts.LastActivityDate) < GetDate()\n    and PostTypes.Name = 'Question'\n  order by Posts.LastActivityDate asc\n;"
    },
    {
        "QuerySetId": 181310,
        "Title": "Activity of a given tag over the years",
        "Description": null,
        "QueryBody": "DECLARE  @paramTagName nvarchar(25) = ##TagName##\n\n-- find the Id of the tag with a given name\nDECLARE @TagId int = 0\nselect @TagId = Id from Tags where TagName = 'java'\n\nselect COUNT(Posts.Id) as Count, \n  CAST(DAY(CreationDate) AS VARCHAR(2)) + '-' +\n  CAST(MONTH(CreationDate) AS VARCHAR(2)) + '-' +\n  CAST(YEAR(CreationDate) AS VARCHAR(4)) as Date\nfrom Posts, PostTags\nwhere\n  Posts.Id = PostId\n  and TagId = @TagId\ngroup by YEAR(CreationDate), MONTH(CreationDate), DAY(CreationDate)\n;",
        "CreationDate": "2014-04-07 00:10:47",
        "validated": false,
        "QueryBody_Original": "DECLARE  @paramTagName nvarchar(25) = ##TagName##\n\n-- find the Id of the tag with a given name\nDECLARE @TagId int = 0\nselect @TagId = Id from Tags where TagName = 'java'\n\nselect COUNT(Posts.Id) as Count, \n  CAST(DAY(CreationDate) AS VARCHAR(2)) + '-' +\n  CAST(MONTH(CreationDate) AS VARCHAR(2)) + '-' +\n  CAST(YEAR(CreationDate) AS VARCHAR(4)) as Date\nfrom Posts, PostTags\nwhere\n  Posts.Id = PostId\n  and TagId = @TagId\ngroup by YEAR(CreationDate), MONTH(CreationDate), DAY(CreationDate)\n;"
    },
    {
        "QuerySetId": 181334,
        "Title": "Questions by users with low reputation",
        "Description": null,
        "QueryBody": "SELECT  p.ID, p.CreationDate, p.ClosedDate FROM Posts p \nINNER JOIN Users u on p.OwnerUserId = u.Id\nWHERE p.PostTypeId=1 AND u.Reputation <= ##ReputationAtMost##\nAND p.CreationDate > ##SinceDate##\nOrder by p.CreationDate desc",
        "CreationDate": "2016-02-05 18:16:53",
        "validated": false,
        "QueryBody_Original": "SELECT  p.ID, p.CreationDate, p.ClosedDate FROM Posts p \nINNER JOIN Users u on p.OwnerUserId = u.Id\nWHERE p.PostTypeId=1 AND u.Reputation <= ##ReputationAtMost##\nAND p.CreationDate > ##SinceDate##\nOrder by p.CreationDate desc"
    },
    {
        "QuerySetId": 181732,
        "Title": "Find Reputable Users By Country",
        "Description": null,
        "QueryBody": "SELECT \n    ROW_NUMBER() OVER(ORDER BY Reputation DESC) AS [#], \n    Id AS [User Link], \n    Reputation\nFROM\n    Users\nWHERE\n    LOWER(Location) LIKE LOWER('%##CountryName##%')\n    AND Reputation >= ##MinReputation##\nORDER BY\n    Reputation DESC;",
        "CreationDate": "2014-04-08 19:05:02",
        "validated": false,
        "QueryBody_Original": "SELECT \n    ROW_NUMBER() OVER(ORDER BY Reputation DESC) AS [#], \n    Id AS [User Link], \n    Reputation\nFROM\n    Users\nWHERE\n    LOWER(Location) LIKE LOWER('%##CountryName##%')\n    AND Reputation >= ##MinReputation##\nORDER BY\n    Reputation DESC;"
    },
    {
        "QuerySetId": 181735,
        "Title": "Find Reputable Users By Country And Keyword",
        "Description": null,
        "QueryBody": "SELECT \n    ROW_NUMBER() OVER(ORDER BY Reputation DESC) AS [#], \n    Id AS [User Link], \n    Reputation\nFROM\n    Users\nWHERE\n    LOWER(Location) LIKE LOWER('%##CountryName##%')\n    AND LOWER(AboutMe) LIKE LOWER('%##Keyword##%')\n    AND Reputation >= ##MinReputation##\nORDER BY\n    Reputation DESC;",
        "CreationDate": "2014-04-08 19:32:07",
        "validated": false,
        "QueryBody_Original": "SELECT \n    ROW_NUMBER() OVER(ORDER BY Reputation DESC) AS [#], \n    Id AS [User Link], \n    Reputation\nFROM\n    Users\nWHERE\n    LOWER(Location) LIKE LOWER('%##CountryName##%')\n    AND LOWER(AboutMe) LIKE LOWER('%##Keyword##%')\n    AND Reputation >= ##MinReputation##\nORDER BY\n    Reputation DESC;"
    },
    {
        "QuerySetId": 181780,
        "Title": "Question up\/down voting by time",
        "Description": null,
        "QueryBody": "DECLARE  @FirstQuestion datetime = (SELECT min(CreationDate) FROM Posts WHERE Id >= 1);\n\nDECLARE @epoch datetime = @FirstQuestion\n\nselect CAST(DATEADD(week, DATEDIFF(week, @epoch, p.CreationDate), @epoch) AS Date) week,\n       count(case when VoteTypeId = 2 then 1 end)*1.0\/count(*)\nfrom Posts p\n     join Votes v on PostId = p.Id\nwhere PostTypeId = 1\n      and VoteTypeId in (2, 3)\n      and p.CreationDate > @FirstQuestion\ngroup by DATEDIFF(week, @epoch, p.CreationDate)\norder by DATEDIFF(week, @epoch, p.CreationDate)",
        "CreationDate": "2014-04-10 02:19:28",
        "validated": false,
        "QueryBody_Original": "DECLARE  @FirstQuestion datetime = (SELECT min(CreationDate) FROM Posts WHERE Id >= 1);\n\nDECLARE @epoch datetime = @FirstQuestion\n\nselect CAST(DATEADD(week, DATEDIFF(week, @epoch, p.CreationDate), @epoch) AS Date) week,\n       count(case when VoteTypeId = 2 then 1 end)*1.0\/count(*)\nfrom Posts p\n     join Votes v on PostId = p.Id\nwhere PostTypeId = 1\n      and VoteTypeId in (2, 3)\n      and p.CreationDate > @FirstQuestion\ngroup by DATEDIFF(week, @epoch, p.CreationDate)\norder by DATEDIFF(week, @epoch, p.CreationDate)"
    },
    {
        "QuerySetId": 181790,
        "Title": "Drive-by users with one [identification] question",
        "Description": null,
        "QueryBody": "WITH  that post being a question\n-- and the question has the [identification] tag.\n\nselect \n  Users.Id as [User Link], Posts.Id as [Post Link]\nFROM\n  Users INNER JOIN Posts on Posts.OwnerUserId = Users.Id\n        INNER JOIN PostTags on Posts.Id = PostTags.PostId\n        INNER JOIN Tags on Tags.Id = PostTags.TagId\nWHERE\n  Tags.TagName like 'identification' AND\n  Posts.ParentId IS NULL AND   -- ParentId is NULL if post is a question\n  Users.Id in (\n    -- Users WITH exactly one question\n    SELECT Users.Id\n    FROM \n      Users INNER JOIN Posts ON Posts.OwnerUserId = Users.Id\n    WHERE\n      Posts.ParentId IS NULL\n    GROUP BY\n      Users.id\n    HAVING\n      Count(Posts.Id) = 1\n    )\nORDER BY \n  Users.Id DESC  -- newest users first.",
        "CreationDate": "2014-04-10 07:27:01",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 182080,
        "Title": "Users with one [identification] question and no answers (original)",
        "Description": null,
        "QueryBody": "WITH  that post being a question\n-- and the question has the [identification] tag\n-- and the user was never seen again\nSELECT\n  Users.Id AS [User Link], Posts.Id AS [Post Link]\nFROM\n  Users INNER JOIN Posts ON Posts.OwnerUserId = Users.Id\n        INNER JOIN PostTags ON Posts.Id = PostTags.PostId\n        INNER JOIN Tags ON Tags.Id = PostTags.TagId\nWHERE\n  Tags.TagName LIKE 'identification' AND\n  Posts.ParentId IS NULL AND   -- ParentId is NULL if post is a question\n  Users.Id in (\n    -- Users WITH exactly one question\n    SELECT Users.Id\n    FROM \n      Users INNER JOIN Posts ON Posts.OwnerUserId = Users.Id\n    WHERE\n      Posts.ParentId IS NULL\n    GROUP BY\n      Users.id\n    HAVING\n      Count(Posts.Id) = 1\n    )\nORDER BY \n  Users.Id DESC  -- newest users first.",
        "CreationDate": "2014-04-10 07:54:55",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 182295,
        "Title": "Dump your own posts as Graph",
        "Description": "Dump your own posts, e.g. for backup purposes.",
        "QueryBody": "DECLARE  @UserId int = ##UserId##\n\nselect * from Posts where OwnerUserId = @UserID",
        "CreationDate": "2020-12-09 14:35:09",
        "validated": false,
        "QueryBody_Original": "DECLARE  @UserId int = ##UserId##\n\nselect * from Posts where OwnerUserId = @UserID"
    },
    {
        "QuerySetId": 182471,
        "Title": "First question tag for future Socrates",
        "Description": null,
        "QueryBody": "WITH  user_questions as (\n  select OwnerUserId, count(*) number_asked, avg(Score) avg_score\n  from Posts\n  where PostTypeId = 1\n        and Score >= ##score?1##\n        and OwnerUserId is not null\n  group by OwnerUserId\n),\n\nasking_badges as (\n  select OwnerUserId,\n         case \n           when number_asked >= ##gold?50## \n           then 1\n         end gold,\n         case\n           when number_asked >= ##silver?10##\n           then 1\n         end silver,\n         case\n           when number_asked >= ##bronze?1##  then 1\n         end bronze,\n         case\n           when number_asked is null  then 1\n         end none\n  from user_questions\n       right join Users on OwnerUserId = Id\n)\n\nselect OwnerUserId\nfrom asking_badges\nwhere gold = 1",
        "CreationDate": "2014-04-11 20:25:43",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 182742,
        "Title": "Answering unanswered questions after datetime",
        "Description": null,
        "QueryBody": "SELECT s all answers by a given user after a given date\n-- where that answer has a score > 0\n-- and the question was asked before that same date\n-- and any other answers were either posted after the one in question, or have a score <= 0\n\nSELECT\n  U.DisplayName,\n  A.Id,\n  A.ParentId,\n  A.Score,\n  A.Body\nfrom\n  Posts as A\n    left join Posts as Aother on A.ParentId = Aother.ParentId\n    join Users as U on A.OwnerUserId = U.Id\n    join Posts as Q on A.ParentId = Q.Id\nwhere\n  U.DisplayName = ##DisplayName:string?Icy Defiance## and\n  A.CreationDate > ##CreationDate:string?2013-10-10 22:49:00## and\n  A.PostTypeId = 2 and\n  A.Score > 0 and\n  (Aother.Id is null or\n    Aother.CreationDate > A.CreationDate or\n    Aother.Score <= 0)\ngroup by\n  U.DisplayName,\n  A.Id,\n  A.ParentId,\n  A.Score,\n  A.Body",
        "CreationDate": "2014-04-13 06:54:45",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 183574,
        "Title": "Votes on post by users",
        "Description": null,
        "QueryBody": "DECLARE  @PostId int = ##PostId##\n\nselect postid as [Post Link], t.name, userid as [User Link], creationdate\nfrom votes\nleft join votetypes t on votes.votetypeid = t.id\nwhere postid= @PostId",
        "CreationDate": "2014-11-26 12:34:39",
        "validated": false,
        "QueryBody_Original": "DECLARE  @PostId int = ##PostId##\n\nselect postid as [Post Link], t.name, userid as [User Link], creationdate\nfrom votes\nleft join votetypes t on votes.votetypeid = t.id\nwhere postid= @PostId"
    },
    {
        "QuerySetId": 183858,
        "Title": "High-reputation users who no longer visit the site",
        "Description": null,
        "QueryBody": "SELECT  Id as [User Link], LastAccessDate from Users \nwhere reputation>=##MinReputation##\norder by LastAccessDate asc",
        "CreationDate": "2014-04-16 19:37:10",
        "validated": false,
        "QueryBody_Original": "SELECT  Id as [User Link], LastAccessDate from Users \nwhere reputation>=##MinReputation##\norder by LastAccessDate asc"
    },
    {
        "QuerySetId": 183867,
        "Title": "Show all rejected suggested edits for a user",
        "Description": null,
        "QueryBody": "SELECT \n  p.id [Post Link],\n  se.id [Suggested Edit Link]\nfrom Posts p\ninner join SuggestedEdits se on p.Id = se.PostId\n  and se.RejectionDate is not null\n  and se.OwnerUserId = ##AuthorUserID:int##",
        "CreationDate": "2014-04-16 21:04:03",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 183906,
        "Title": "Net question score by day",
        "Description": null,
        "QueryBody": "SELECT  sum(score) from posts where \n--id in (SELECT id from posts where answercount is not null order by id desc);\n\n\nSELECT dat, sum (viewcount) from \n(SELECT cast(creationDate as Date) as dat, viewcount from posts \nwhere answercount is not null) as tab\ngroup by dat having sum (viewcount) < 150000\norder by dat desc;",
        "CreationDate": "2014-04-17 01:39:15",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 184422,
        "Title": "earliest date a tag was applied ",
        "Description": null,
        "QueryBody": "SELECT  min(creationdate) as tagdate\n     , min(postid) as [Post Link]\nFROM posthistory\nWHERE posthistorytypeid in (3,6)  -- 3 = inital tag, 6 = edit tags\nAND [text] LIKE '%<'+ ##tag:string?rules-as-written## +'>%'",
        "CreationDate": "2017-07-27 16:57:43",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 184623,
        "Title": "Users with one or more [identification] questions",
        "Description": null,
        "QueryBody": "DECLARE  @tag as nvarchar(25) \n  = ##tag:string?identification##;\n\nDECLARE @tagid as int;\n\n-- get the tag id here so it is not needed as a join table\nselect @tagid = Id\n  from Tags\n  where TagName = lower(@tag);\n\nselect distinct OwnerUserId as [User Id], \n    OwnerUserId as [User Link],\n    Count(OwnerUserId) as [QCount]\n  from\n    posts inner join posttags on posts.Id = postTags.PostId\n  where\n    PostTypeId = 1 -- question\n      and CommunityOwnedDate is null -- not CW\n      and ClosedDate is null -- not closed\n      and posttags.tagid = @tagid\n  group by\n    OwnerUserId\n  having \n    count(owneruserid) > 0\n  order by\n    QCount Desc",
        "CreationDate": "2014-05-07 06:16:04",
        "validated": false,
        "QueryBody_Original": "DECLARE  @tag as nvarchar(25) \n  = ##tag:string?identification##;\n\nDECLARE @tagid as int;\n\n-- get the tag id here so it is not needed as a join table\nselect @tagid = Id\n  from Tags\n  where TagName = lower(@tag);\n\nselect distinct OwnerUserId as [User Id], \n    OwnerUserId as [User Link],\n    Count(OwnerUserId) as [QCount]\n  from\n    posts inner join posttags on posts.Id = postTags.PostId\n  where\n    PostTypeId = 1 -- question\n      and CommunityOwnedDate is null -- not CW\n      and ClosedDate is null -- not closed\n      and posttags.tagid = @tagid\n  group by\n    OwnerUserId\n  having \n    count(owneruserid) > 0\n  order by\n    QCount Desc"
    },
    {
        "QuerySetId": 184626,
        "Title": "Histogram of question count vs. user in [identification]",
        "Description": null,
        "QueryBody": "DECLARE  @tag as nvarchar(25) \n  = ##tag:string?identification##;\n\nDECLARE @tagid as int;\n\n-- get the tag id here so it is not needed as a join table\nselect @tagid = Id\n  from Tags\n  where TagName = lower(@tag);\n\nwith tagaskers as (\nselect distinct OwnerUserId as [User Id], \n    OwnerUserId as [User Link],\n    Count(OwnerUserId) as [QCount]\n  from\n    posts inner join posttags on posts.Id = postTags.PostId\n  where\n    PostTypeId = 1 -- question\n      and CommunityOwnedDate is null -- not CW\n      and ClosedDate is null -- not closed\n      and posttags.tagid = @tagid\n  group by\n    OwnerUserId\n  having \n    count(owneruserid) > 0\n)\n\nselect distinct QCount, count([User ID]) as [Askers] from tagaskers\n  group by QCount",
        "CreationDate": "2014-05-07 06:15:54",
        "validated": false,
        "QueryBody_Original": "DECLARE  @tag as nvarchar(25) \n  = ##tag:string?identification##;\n\nDECLARE @tagid as int;\n\n-- get the tag id here so it is not needed as a join table\nselect @tagid = Id\n  from Tags\n  where TagName = lower(@tag);\n\nwith tagaskers as (\nselect distinct OwnerUserId as [User Id], \n    OwnerUserId as [User Link],\n    Count(OwnerUserId) as [QCount]\n  from\n    posts inner join posttags on posts.Id = postTags.PostId\n  where\n    PostTypeId = 1 -- question\n      and CommunityOwnedDate is null -- not CW\n      and ClosedDate is null -- not closed\n      and posttags.tagid = @tagid\n  group by\n    OwnerUserId\n  having \n    count(owneruserid) > 0\n)\n\nselect distinct QCount, count([User ID]) as [Askers] from tagaskers\n  group by QCount"
    },
    {
        "QuerySetId": 184861,
        "Title": "Rejected Suggested Edits for a user's posts",
        "Description": "\"Show all rejected suggested edits that tried to change my posts.\"",
        "QueryBody": "SELECT  p.Id [Post Link],\n  se.Id [Suggested Edit Link]\nfrom Posts p\ninner join SuggestedEdits se on se.PostId = p.Id \n  and se.RejectionDate is not null\nwhere p.OwnerUserId = ##PostOwnerID:int##\norder by p.CreationDate",
        "CreationDate": "2014-04-21 23:56:35",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 184942,
        "Title": "Find recent user comments with a given text",
        "Description": null,
        "QueryBody": "DECLARE  @UserId int = ##UserId:int?4279##\n\nSELECT CreationDate, Id AS [Comment Link]\nFROM Comments\nWHERE UserId = @UserId and Text LIKE '%##Text##%'\nORDER BY CreationDate DESC",
        "CreationDate": "2014-04-22 08:12:25",
        "validated": false,
        "QueryBody_Original": "DECLARE  @UserId int = ##UserId:int?4279##\n\nSELECT CreationDate, Id AS [Comment Link]\nFROM Comments\nWHERE UserId = @UserId and Text LIKE '%##Text##%'\nORDER BY CreationDate DESC"
    },
    {
        "QuerySetId": 185479,
        "Title": "What Rank is Kyle on Twitter-Bootstrap?",
        "Description": null,
        "QueryBody": "DECLARE  @user_id INT = 1987598;\nDECLARE @tag_id  INT = (SELECT ID FROM Tags WHERE TagName = 'xslt');\nDECLARE @answer  INT = (SELECT ID FROM PostTypes WHERE Name = 'Answer');\n\nSELECT TOP 25\n  RANK() OVER (ORDER BY SUM(a.Score) DESC) AS Rank,\n  u.ID AS [User Link],\n  SUM(a.Score) AS Score,\n  CASE WHEN u.ID = @user_id THEN '<--' ELSE '' END\nFROM users u\nJOIN Posts a ON u.ID = a.OwnerUserId AND a.PostTypeID = @answer\nJOIN Posts p ON a.ParentID = p.ID\nJOIN PostTags t ON p.ID = t.PostId AND t.TagID = @tag_id\nGROUP BY u.ID\nORDER BY SUM(a.Score) DESC",
        "CreationDate": "2014-08-22 17:25:09",
        "validated": false,
        "QueryBody_Original": "DECLARE  @user_id INT = 1987598;\nDECLARE @tag_id  INT = (SELECT ID FROM Tags WHERE TagName = 'xslt');\nDECLARE @answer  INT = (SELECT ID FROM PostTypes WHERE Name = 'Answer');\n\nSELECT TOP 25\n  RANK() OVER (ORDER BY SUM(a.Score) DESC) AS Rank,\n  u.ID AS [User Link],\n  SUM(a.Score) AS Score,\n  CASE WHEN u.ID = @user_id THEN '<--' ELSE '' END\nFROM users u\nJOIN Posts a ON u.ID = a.OwnerUserId AND a.PostTypeID = @answer\nJOIN Posts p ON a.ParentID = p.ID\nJOIN PostTags t ON p.ID = t.PostId AND t.TagID = @tag_id\nGROUP BY u.ID\nORDER BY SUM(a.Score) DESC"
    },
    {
        "QuerySetId": 185528,
        "Title": "Posts without answers, from the users with a non default name.",
        "Description": null,
        "QueryBody": "WITH out answers, or comments and\n-- from users WITH non default name.\n-- tagname: Posts WITH a tag \"Tag for posts\"\n-- agemonthsmax: Post's age maximum in months \"Post max age (in months)\n\nSELECT \nTOP   20\n      p.Id as [Post Link]\n\nFROM\n      Posts p\n\nJOIN Users    u  ON p.OwnerUserId = u.Id\nJOIN PostTags pt ON pt.PostId     = p.Id\nJOIN Tags     t  ON pt.TagId      = t.Id\n\nWHERE\n      AnswerCount          =        0\n      AND ClosedDate       IS NULL\n      AND UPPER(t.TagName) =        UPPER(##tagname:string?Java##)\n      AND u.DisplayName    NOT LIKE 'user[1234567890]%'\n      AND DATEADD(month, ##agemonthsmax:int?3##, p.CreationDate) >= GETDATE()\n      \nORDER BY p.CreationDate   ASC,\n         u.LastAccessDate DESC,\n         p.ViewCount      ASC ,         \n         u.Reputation     DESC",
        "CreationDate": "2014-04-28 08:59:20",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 185919,
        "Title": "Tag associated with other tags",
        "Description": null,
        "QueryBody": "SELECT  top ##Limit?250##\n  MAX(t2.TagName) as LeftTag,\n  MAX(t.TagName) as RightTag,\n  COUNT(pt2.TagId) as LeftCount,\n  MAX(t.Count) as RightCount,\n  (CAST(COUNT(pt2.TagId) AS float)\/CAST(MAX(t.Count) AS float)) as Per\nfrom\n  PostTags pt\n  JOIN PostTags pt2 on pt.PostId = pt2.PostId\n  JOIN Tags t on pt.TagId = t.Id\n  JOIN Tags t2 on pt2.TagId = t2.Id\nwhere\n  ('##LeftTag?all##' = 'all' OR t2.TagName = '##LeftTag##')\n  AND ('##RightTag?all##' = 'all' OR t.TagName = '##RightTag##')\n  AND t.Count >= ##TagCountFilter?10##\n  AND t2.Count >= ##TagCountFilter##\n  AND pt.TagId != pt2.TagId\ngroup by\n  pt.TagId,\n  pt2.TagId\nhaving\n##PerFilter?0## <= 0 OR (CAST(COUNT(pt2.TagId) AS float)\/CAST(MAX(t.Count) AS float)) > ##PerFilter##\norder by\n  --RightCount DESC,\n  Per DESC",
        "CreationDate": "2014-05-06 19:49:05",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 186346,
        "Title": "Count the number of answers of ELL in a given year",
        "Description": null,
        "QueryBody": "DECLARE  @GiveYear int = ##GiveYear##\n-- For example : 2013\n\nSelect Count(AnswerCount) AS [Total Answers]\nfrom Posts\nwhere \n  year(CreationDate) = @GiveYear",
        "CreationDate": "2014-04-27 15:55:26",
        "validated": false,
        "QueryBody_Original": "DECLARE  @GiveYear int = ##GiveYear##\n-- For example : 2013\n\nSelect Count(AnswerCount) AS [Total Answers]\nfrom Posts\nwhere \n  year(CreationDate) = @GiveYear"
    },
    {
        "QuerySetId": 186673,
        "Title": "What is the total reputation of site X?",
        "Description": null,
        "QueryBody": "DECLARE  @excludes varchar(1) = '##exclude?n##'\n\nSELECT SUM(Reputation) as totalRep\nFROM Users\nWHERE (  ( @excludes = 'y'\n           AND Reputation > 200\n         )\n       OR\n         (\n           @excludes != 'y'\n         )\n      )",
        "CreationDate": "2015-01-23 13:46:37",
        "validated": false,
        "QueryBody_Original": "DECLARE  @excludes varchar(1) = '##exclude?n##'\n\nSELECT SUM(Reputation) as totalRep\nFROM Users\nWHERE (  ( @excludes = 'y'\n           AND Reputation > 200\n         )\n       OR\n         (\n           @excludes != 'y'\n         )\n      )"
    },
    {
        "QuerySetId": 186988,
        "Title": "Select user posts with a negative score ",
        "Description": null,
        "QueryBody": "SELECT \n  Id as [Post Link],\n  Score,\n  OwnerDisplayName\nfrom Posts\nwhere OwnerUserId = ##UserId:int## and Score < 0\ngroup by Score, Id, OwnerDisplayName\norder by Score ASC",
        "CreationDate": "2014-04-29 09:28:37",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 187061,
        "Title": "Critics - Reputation vs DownVotes for User",
        "Description": null,
        "QueryBody": "SELECT  u.Id, u.DisplayName, u.Reputation, u.DownVotes, \n(u.DownVotes * 2) as SpentReputation, \nu.Reputation + (u.DownVotes * 2) as EffectiveReputation,\nCONVERT(DECIMAL(10,2), CAST((u.Reputation + u.DownVotes * 2) AS DECIMAL) \/ (u.DownVotes * 2)) as DownVoteRatio,\nu.UpVotes\nFROM Users u\nWHERE (u.Reputation > 3000000\nAND u.DownVotes > 0) OR u.Id = ##UserId##\nORDER BY DownVoteRatio ASC",
        "CreationDate": "2014-04-29 13:15:45",
        "validated": false,
        "QueryBody_Original": "SELECT  u.Id, u.DisplayName, u.Reputation, u.DownVotes, \n(u.DownVotes * 2) as SpentReputation, \nu.Reputation + (u.DownVotes * 2) as EffectiveReputation,\nCONVERT(DECIMAL(10,2), CAST((u.Reputation + u.DownVotes * 2) AS DECIMAL) \/ (u.DownVotes * 2)) as DownVoteRatio,\nu.UpVotes\nFROM Users u\nWHERE (u.Reputation > 3000000\nAND u.DownVotes > 0) OR u.Id = ##UserId##\nORDER BY DownVoteRatio ASC"
    },
    {
        "QuerySetId": 187548,
        "Title": "Find comment for the user with given text",
        "Description": null,
        "QueryBody": "SELECT  \n  Id as [Comment Link],\n  PostId as [Post Link],\n  CreationDate\nfrom Comments\nwhere\n  UserId = ##UserId:int##\n  and Text like '%##Text##%'\norder by CreationDate desc",
        "CreationDate": "2014-04-30 07:59:52",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 187918,
        "Title": "Get Count of tags for user",
        "Description": null,
        "QueryBody": "SELECT  pt.TagId, t.TagName, Count(pt.TagId) 'count'\nFROM PostTags pt\n  inner join Tags t on t.ID = pt.TagId\n  inner join Posts p on p.Id = pt.PostId\nWHERE p.OwnerUserId = '67392'\nGroup By pt.TagId, t.TagName\nOrder By Count(pt.TagId) DESC",
        "CreationDate": "2018-01-30 16:03:15",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 188274,
        "Title": "Make sense of the acronym answers",
        "Description": null,
        "QueryBody": "DECLARE  @TargetPost int =  ##TargetPost?42623##;\n--TargetPost: Type this \"tooltip\"\n\n\n(SELECT Id AS [Post Link] FROM Posts WHERE ParentId = @TargetPost);",
        "CreationDate": "2014-05-05 18:49:56",
        "validated": false,
        "QueryBody_Original": "DECLARE  @TargetPost int =  ##TargetPost?42623##;\n--TargetPost: Type this \"tooltip\"\n\n\n(SELECT Id AS [Post Link] FROM Posts WHERE ParentId = @TargetPost);"
    },
    {
        "QuerySetId": 189433,
        "Title": "Ratio of number of accepted answer by users with rep. > threshold to all accepted answers",
        "Description": null,
        "QueryBody": "WITH  AcceptedAnswers as (\nSELECT aa.*\nFROM Posts p\ninner join Posts aa on aa.Id = p.AcceptedAnswerId\n),UsersWITHAcceptedAnswers as (\nselect u.Reputation, count(*) as AcceptedAnswerCount\nfrom AcceptedAnswers aa\ninner join Users u on u.Id = aa.OwnerUserId\ngroup by u.Id, u.Reputation\n),HighRepUsers as (\nselect *\nfrom UsersWITHAcceptedAnswers\nwhere Reputation > ##threshold:int?100000## \n)\n\nselect (\n  (select sum(AcceptedAnswerCount) from HighRepUsers) \/ (\n  1.0 * (select count(*) from AcceptedAnswers)))",
        "CreationDate": "2014-05-02 14:20:42",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 189435,
        "Title": "Ratio of number of high rep users to users that have accepted answers",
        "Description": null,
        "QueryBody": "WITH  UsersWITHAcceptedAnswers as (\n  select u.Reputation\n  from Posts p\n  inner join Posts aa on aa.Id = p.AcceptedAnswerId  \n  inner join Users u on u.Id = aa.OwnerUserId\n  where p.PostTypeId = 1 -- question\n    and aa.PostTypeId = 2 -- answer\n  group by u.Id, u.Reputation\n)\nselect\n  sum(case when Reputation > ##threshold:int?100000## then 1 else 0 end) \/ (\n  1.0 * count(*) )\nfrom UsersWITHAcceptedAnswers",
        "CreationDate": "2014-05-02 15:15:55",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 189797,
        "Title": "Top 20 most prolific Editors, for a specific date range",
        "Description": "\r\n",
        "QueryBody": "SELECT  TOP 20\n    Id [User Link],\n    (\n        SELECT COUNT(*) FROM Posts\n        WHERE\n            Posts.LastEditorUserId = Users.Id\n            AND Posts.LastActivityDate > ##start:string?2000-01-01##\n            AND Posts.LastActivityDate < ##end:string?2020-12-31##\n    ) AS TotalEdits\nFROM Users\nORDER BY TotalEdits DESC",
        "CreationDate": "2014-05-03 03:13:32",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 189883,
        "Title": "Top (body) editors in the past n days",
        "Description": null,
        "QueryBody": "DECLARE  @days_diff int = ##DaysBack:int?7##\nDECLARE @num_users int = ##HowManyUsers:int?10##\n\nSELECT TOP (@num_users)\n  UserId AS [User Link],\n  PostId,\n  Count(*) as [Count]\nFROM\n  PostHistory\nWHERE\nPostHistoryTypeId IN (4,5,6) -- title, body , tags\n  AND CreationDate >= DATEADD(DAY, -@days_diff, GETDATE())\nGROUP BY\n  UserId\n  , PostId\nORDER BY\n  [Count] DESC",
        "CreationDate": "2014-06-15 17:25:41",
        "validated": false,
        "QueryBody_Original": "DECLARE  @days_diff int = ##DaysBack:int?7##\nDECLARE @num_users int = ##HowManyUsers:int?10##\n\nSELECT TOP (@num_users)\n  UserId AS [User Link],\n  PostId,\n  Count(*) as [Count]\nFROM\n  PostHistory\nWHERE\nPostHistoryTypeId IN (4,5,6) -- title, body , tags\n  AND CreationDate >= DATEADD(DAY, -@days_diff, GETDATE())\nGROUP BY\n  UserId\n  , PostId\nORDER BY\n  [Count] DESC"
    },
    {
        "QuerySetId": 190310,
        "Title": "Deleted Questions of User X",
        "Description": null,
        "QueryBody": "SELECT  TOP 10 p.*\nFROM Posts p INNER JOIN Users u ON p.OwnerUserId = u.Id\nWHERE PostTypeId = 1 AND u.Id = ##UserId##",
        "CreationDate": "2014-05-05 07:59:37",
        "validated": false,
        "QueryBody_Original": "SELECT  TOP 10 p.*\nFROM Posts p INNER JOIN Users u ON p.OwnerUserId = u.Id\nWHERE PostTypeId = 1 AND u.Id = ##UserId##"
    },
    {
        "QuerySetId": 190311,
        "Title": "What are my longest answers",
        "Description": null,
        "QueryBody": "SELECT  id as [Post Link], len(body) as length, score\nfrom posts\nwhere owneruserid = ##UserId##\norder by length desc, score",
        "CreationDate": "2014-05-05 08:32:26",
        "validated": false,
        "QueryBody_Original": "SELECT  id as [Post Link], len(body) as length, score\nfrom posts\nwhere owneruserid = ##UserId##\norder by length desc, score"
    },
    {
        "QuerySetId": 190312,
        "Title": "Accept Answer (w\/ more post information)",
        "Description": null,
        "QueryBody": "SELECT  \n  c.id as [Comment Link], \n  c.text, \n  c.creationdate as 'CommentDate', \n  c.userid,\n  c.score as 'CommentScore',\n  u.reputation,\n  u.upvotes,\n  u.downvotes,\n  u.creationdate as 'UserCreationDate',\n  p.posttypeid,\n  p.score as 'PostScore'\nfrom \n  comments c,\n  users u,\n  posts p\n\nwhere c.creationdate > {ts '2014-04-01 00:00:00'}\nand (c.score is null or c.score = 0)\nand (text like '%mark%answer%' \n  or text like '%mark%accept%' \n  or text like '%accept%answer%'\n  or text like '%lease%accept%'\n  or text like '%mark%answer%'\n  )\nand len(text) < 50\nand c.userid = u.id\nand c.postid = p.id\norder by c.creationdate desc",
        "CreationDate": "2014-05-05 09:15:53",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 191740,
        "Title": "Count of \"Thank You\" comments",
        "Description": null,
        "QueryBody": "DECLARE  @thankYouCount float;\nDECLARE @commentCount float;\n\nselect @thankYouCount = count(1)\nfrom Comments c\nwhere len(c.Text) < 25\nand (c.Text like '%thank you%' or c.Text like '%thanks%')\n\nselect @commentCount = count(1)\nfrom Comments\n\nselect\n  @thankYouCount [total thanks comments],\n  @commentCount [total comments],\n  (@thankYouCount \/ @commentCount) * 100 [percent]",
        "CreationDate": "2014-05-06 22:04:06",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 191763,
        "Title": "how long until an accepted answer is posted",
        "Description": null,
        "QueryBody": "SELECT \n  q.Id as [Post Link],\n  datediff(minute, q.CreationDate, a.CreationDate) as [difference in minutes],\n  q.CreationDate as [Question Creation Date],\n  a.CreationDate as [Accepted Answer Creation Date]\nfrom Posts q\njoin Posts a on q.AcceptedAnswerId = a.Id and q.Id = a.ParentId\nwhere a.OwnerUserId = ##UserId##\norder by [difference in minutes] desc",
        "CreationDate": "2014-05-07 01:47:29",
        "validated": false,
        "QueryBody_Original": "SELECT \n  q.Id as [Post Link],\n  datediff(minute, q.CreationDate, a.CreationDate) as [difference in minutes],\n  q.CreationDate as [Question Creation Date],\n  a.CreationDate as [Accepted Answer Creation Date]\nfrom Posts q\njoin Posts a on q.AcceptedAnswerId = a.Id and q.Id = a.ParentId\nwhere a.OwnerUserId = ##UserId##\norder by [difference in minutes] desc"
    },
    {
        "QuerySetId": 192177,
        "Title": "Accepted answer posted 7+ days after question, excluding self-answers",
        "Description": null,
        "QueryBody": "SELECT  count(*) from (\nSELECT top (1000) \nq.id [Post Link],\na.id [Post Link]\nfrom posts q\ninner join posts a\non q.posttypeid = 1 and a.posttypeid = 2 and a.parentid = q.id\nand q.acceptedanswerid = a.id\nand a.owneruserid <> q.owneruserid\nwhere a.creationdate > q.creationdate + 7\n--) raw\n;",
        "CreationDate": "2014-05-08 13:08:51",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 192571,
        "Title": "All Material from Random Users",
        "Description": null,
        "QueryBody": "SELECT  u.Id as UserId\n  into #randomusers\n  FROM Users u tablesample(1 percent)\n\nSELECT a.Id as PostId\ninto #allPostsFromRandomUsers\nfrom Posts a\ninner join #randomusers b on a.OwnerUserId = b.UserId\nwhere PostTypeId in (1,2) \/*Only Questions and Answers OWNED by these users*\/\n\n\n\n\/*SELECTions*\/\n\nSELECT count(a.Id) Counter2 from Posts a\nInner join #allPostsFromRandomUsers b on a.Id = b.PostId",
        "CreationDate": "2014-05-09 20:00:13",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 192615,
        "Title": "Question vote ratio and score over time",
        "Description": null,
        "QueryBody": "DECLARE  @FirstQuestion datetime = (SELECT min(CreationDate) FROM Posts WHERE Id >= 1);\n\nDECLARE @epoch datetime = @FirstQuestion\n\nselect CAST(DATEADD(week, DATEDIFF(week, @epoch, p.CreationDate), @epoch) AS Date) week,\n       count(case when VoteTypeId = 2 then 1 end)*1.0\/count(*) up_down_ratio,\n       avg(score*1.0) avg_score\nfrom Posts p\n     join Votes v on PostId = p.Id\nwhere PostTypeId = 1\n      and VoteTypeId in (2,3)\n      and p.CreationDate > @FirstQuestion\ngroup by DATEDIFF(week, @epoch, p.CreationDate)\norder by DATEDIFF(week, @epoch, p.CreationDate)",
        "CreationDate": "2014-05-09 19:25:25",
        "validated": false,
        "QueryBody_Original": "DECLARE  @FirstQuestion datetime = (SELECT min(CreationDate) FROM Posts WHERE Id >= 1);\n\nDECLARE @epoch datetime = @FirstQuestion\n\nselect CAST(DATEADD(week, DATEDIFF(week, @epoch, p.CreationDate), @epoch) AS Date) week,\n       count(case when VoteTypeId = 2 then 1 end)*1.0\/count(*) up_down_ratio,\n       avg(score*1.0) avg_score\nfrom Posts p\n     join Votes v on PostId = p.Id\nwhere PostTypeId = 1\n      and VoteTypeId in (2,3)\n      and p.CreationDate > @FirstQuestion\ngroup by DATEDIFF(week, @epoch, p.CreationDate)\norder by DATEDIFF(week, @epoch, p.CreationDate)"
    },
    {
        "QuerySetId": 193073,
        "Title": "Top users (rep) in the past n days - incomplete attempt",
        "Description": null,
        "QueryBody": "DECLARE  @days_diff int = ##DaysBack:int?7##\nDECLARE @num_users int = ##HowManyUsers:int?10##\n\nSELECT TOP (@num_users)\n  u.Id AS [User Link],\n  u.Reputation\nFROM\n  Users as u,\n  Votes as v\nWHERE\n  v.CreationDate >= DATEADD(DAY, -@days_diff, GETDATE())\n  AND v.UserId = u.Id\nORDER BY\n  u.Reputation DESC",
        "CreationDate": "2014-05-10 23:45:34",
        "validated": false,
        "QueryBody_Original": "DECLARE  @days_diff int = ##DaysBack:int?7##\nDECLARE @num_users int = ##HowManyUsers:int?10##\n\nSELECT TOP (@num_users)\n  u.Id AS [User Link],\n  u.Reputation\nFROM\n  Users as u,\n  Votes as v\nWHERE\n  v.CreationDate >= DATEADD(DAY, -@days_diff, GETDATE())\n  AND v.UserId = u.Id\nORDER BY\n  u.Reputation DESC"
    },
    {
        "QuerySetId": 193079,
        "Title": "Unanswered questions by user reputation and question score",
        "Description": null,
        "QueryBody": "SELECT  TOP ##Count:int?500##\n  p.id AS [Post Link],\n  p.ViewCount AS [Views],\n  p.CommentCount AS [Comments],\n  u.Reputation AS [User Reputation],\n  p.CreationDate AS [Date]\nFROM posts p, users u \nWHERE p.ClosedDate IS NULL\n  AND p.AnswerCount = 0\n  AND u.Reputation <= ##Reputation:int?10##\n  AND p.Score = ##Score:int?0##\n  AND p.OwnerUserId = u.id\nORDER BY p.CreationDate ASC",
        "CreationDate": "2014-11-23 23:43:54",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 193319,
        "Title": "Get amount of questions per month, since 01\/01\/2013",
        "Description": null,
        "QueryBody": "SELECT  Convert(Varchar(7), CreationDate, 126) As MonthOfYear, Count(Id) As PostCount\nFrom Posts\nWhere CreationDate>='2013-01-01'\nGroup By Convert(Varchar(7), CreationDate, 126)\nOrder By MonthOfYear Desc",
        "CreationDate": "2014-05-11 18:35:14",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 193818,
        "Title": "Count of posts by month for user",
        "Description": "Simple count of posts by month\r\n",
        "QueryBody": "SELECT  datepart(year, p.creationdate)  as year, datepart(month, p.creationdate) as month,\ncount(*) as postcount,\nsum(score) as the_score,\nsum(score) \/ cast(count(*) as float) as score_per_post\nfrom posts p\nwhere p.OwnerUserId = ##UserId##\ngroup by datepart(year, p.creationdate),\ndatepart(month, p.creationdate)\norder by datepart(year, p.creationdate),\ndatepart(month, p.creationdate)",
        "CreationDate": "2014-05-13 18:32:30",
        "validated": false,
        "QueryBody_Original": "SELECT  datepart(year, p.creationdate)  as year, datepart(month, p.creationdate) as month,\ncount(*) as postcount,\nsum(score) as the_score,\nsum(score) \/ cast(count(*) as float) as score_per_post\nfrom posts p\nwhere p.OwnerUserId = ##UserId##\ngroup by datepart(year, p.creationdate),\ndatepart(month, p.creationdate)\norder by datepart(year, p.creationdate),\ndatepart(month, p.creationdate)"
    },
    {
        "QuerySetId": 194346,
        "Title": "Tag Percentile by user in a location",
        "Description": null,
        "QueryBody": "WITH  user-links)\n-- A simply query to find users in your city or country. Added user links.\n\nselect Id [User Link], Reputation, DisplayName, Location\nfrom Users\nwhere Location like '%##Location##%'\norder by Reputation desc",
        "CreationDate": "2014-05-15 07:30:55",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 194369,
        "Title": "My rep if there was no daily rep cap",
        "Description": null,
        "QueryBody": "DECLARE  @UserId int = ##UserId##\n\nSELECT\n  5 * COUNT(*) AS UpScore\nFROM\n  Votes \n  INNER JOIN Posts ON Posts.Id = Votes.PostId\nWHERE\n  Posts.OwnerUserId = @UserId and VoteTypeId = 2",
        "CreationDate": "2014-05-15 11:42:16",
        "validated": false,
        "QueryBody_Original": "DECLARE  @UserId int = ##UserId##\n\nSELECT\n  5 * COUNT(*) AS UpScore\nFROM\n  Votes \n  INNER JOIN Posts ON Posts.Id = Votes.PostId\nWHERE\n  Posts.OwnerUserId = @UserId and VoteTypeId = 2"
    },
    {
        "QuerySetId": 194474,
        "Title": "How many upvotes does one user have from another user?",
        "Description": null,
        "QueryBody": "DECLARE  @UserId1 int = ##UserId1##\nDECLARE @UserId2 int = ##UserId2##\n\nSELECT\n    COUNT(*) AS UpVotes \nFROM  \n    Posts P\n    INNER JOIN Votes V ON V.PostId = P.Id \n                        and V.VoteTypeId = 2 \n                        and V.UserId = @UserId2\nWHERE \n    P.OwnerUserId = @UserId1",
        "CreationDate": "2014-05-15 23:44:28",
        "validated": false,
        "QueryBody_Original": "DECLARE  @UserId1 int = ##UserId1##\nDECLARE @UserId2 int = ##UserId2##\n\nSELECT\n    COUNT(*) AS UpVotes \nFROM  \n    Posts P\n    INNER JOIN Votes V ON V.PostId = P.Id \n                        and V.VoteTypeId = 2 \n                        and V.UserId = @UserId2\nWHERE \n    P.OwnerUserId = @UserId1"
    },
    {
        "QuerySetId": 194481,
        "Title": "Find [A] ([B] or [C])",
        "Description": "Search questions by tags intersection and union.",
        "QueryBody": "DECLARE  @A nvarchar(25) = '##A?python##'\nDECLARE @B nvarchar(25) = '##B?datetime##'\nDECLARE @C nvarchar(25) = '##C?timezone##'\n\nSELECT \n  q.Id AS [Post Link],\n  q.Tags,\n  q.LastActivityDate,\n  q.Score,\n  q.ViewCount,\n  q.AnswerCount,\n  q.OwnerUserId as [User Link]\nFROM Posts q\n  join PostTags pt on pt.PostId = q.Id\n  join PostTags pt2 on pt2.PostId = q.Id\n  join Tags t on t.Id = pt.TagId\n  join Tags t2 on t2.Id = pt2.TagId\n  join TagSynonyms ts on ts.TargetTagName = t.TagName\n  join TagSynonyms ts2 on ts2.TargetTagName = t2.TagName\nWHERE q.PostTypeId = 1     -- question\n  and q.ClosedDate is null -- not closed\n  and (t.TagName = @A or ts.SourceTagName = @A)\n  and (t2.TagName in (@B, @C) or ts2.SourceTagname in (@B, @C))\nORDER BY q.LastActivityDate DESC, q.Score DESC, q.ViewCount DESC",
        "CreationDate": "2014-05-15 20:49:22",
        "validated": false,
        "QueryBody_Original": "DECLARE  @A nvarchar(25) = '##A?python##'\nDECLARE @B nvarchar(25) = '##B?datetime##'\nDECLARE @C nvarchar(25) = '##C?timezone##'\n\nSELECT \n  q.Id AS [Post Link],\n  q.Tags,\n  q.LastActivityDate,\n  q.Score,\n  q.ViewCount,\n  q.AnswerCount,\n  q.OwnerUserId as [User Link]\nFROM Posts q\n  join PostTags pt on pt.PostId = q.Id\n  join PostTags pt2 on pt2.PostId = q.Id\n  join Tags t on t.Id = pt.TagId\n  join Tags t2 on t2.Id = pt2.TagId\n  join TagSynonyms ts on ts.TargetTagName = t.TagName\n  join TagSynonyms ts2 on ts2.TargetTagName = t2.TagName\nWHERE q.PostTypeId = 1     -- question\n  and q.ClosedDate is null -- not closed\n  and (t.TagName = @A or ts.SourceTagName = @A)\n  and (t2.TagName in (@B, @C) or ts2.SourceTagname in (@B, @C))\nORDER BY q.LastActivityDate DESC, q.Score DESC, q.ViewCount DESC"
    },
    {
        "QuerySetId": 194550,
        "Title": "Trending for JS Libraries - Query to Compare Multiple Tags \/ UI Frameworks",
        "Description": "This query is somewhat generic so that I can see trending for multiple tags.  In this example I'm comparing different JavaScript Frameworks\/Libraries, but these Tag names can be easily changed to any tag names you want.\r\n\r\nFor a visual comparison, in the result click \"Graph\" tab.  Very cool feature.\r\n\r\nText Output\r\nRoundToMonth,TagName,TagCount\r\n\"2014-03-01 00:00:00\",\"angularjs\",\"3871\"\r\n\"2014-03-01 00:00:00\",\"backbone.js\",\"550\"\r\n\"2014-03-01 00:00:00\",\"ember.js\",\"554\"\r\n\"2014-03-01 00:00:00\",\"knockout.js\",\"407\"\r\n\"2014-02-01 00:00:00\",\"angularjs\",\"3320\"\r\n\"2014-02-01 00:00:00\",\"backbone.js\",\"552\"\r\n\"2014-02-01 00:00:00\",\"ember.js\",\"507\"\r\n\"2014-02-01 00:00:00\",\"knockout.js\",\"447\"\r\n\"2014-01-01 00:00:00\",\"angularjs\",\"3087\"\r\n\"2014-01-01 00:00:00\",\"backbone.js\",\"525\"\r\n\"2014-01-01 00:00:00\",\"ember.js\",\"447\"\r\n",
        "QueryBody": "DECLARE  @StartDate DATETIME = '2013-1-1'\n        ,@EndDate DATETIME = '2014-5-1'\n\n--\nSELECT RoundToMonth, TagName, TagCount\nFROM \n(\n  SELECT  \n    DATEADD(Month, DATEDIFF(MONTH, 0, CreationDate), 0) RoundToMonth\n    , COUNT(PostTags.TagID) TagCount\n    , TagID\n  FROM PostTags\n  LEFT JOIN Posts ON\n    PostTags.PostId = Posts.Id\n  WHERE \n    PostTags.TagID IN (SELECT Id FROM #MyTags)\n    AND CreationDate > @StartDate\n    AND CreationDate < @EndDate\n  GROUP BY\n    DATEADD(Month, DATEDIFF(MONTH, 0, CreationDate), 0)\n    , PostTags.TagID\n)TagCountPerMonth\nLEFT JOIN Tags ON\n  TagCountPerMonth.TagId = Tags.Id\nORDER BY RoundToMonth DESC, TagName ASC",
        "CreationDate": "2014-05-19 10:58:23",
        "validated": false,
        "QueryBody_Original": "DECLARE  @StartDate DATETIME = '2013-1-1'\n        ,@EndDate DATETIME = '2014-5-1'\n\n--\nSELECT RoundToMonth, TagName, TagCount\nFROM \n(\n  SELECT  \n    DATEADD(Month, DATEDIFF(MONTH, 0, CreationDate), 0) RoundToMonth\n    , COUNT(PostTags.TagID) TagCount\n    , TagID\n  FROM PostTags\n  LEFT JOIN Posts ON\n    PostTags.PostId = Posts.Id\n  WHERE \n    PostTags.TagID IN (SELECT Id FROM #MyTags)\n    AND CreationDate > @StartDate\n    AND CreationDate < @EndDate\n  GROUP BY\n    DATEADD(Month, DATEDIFF(MONTH, 0, CreationDate), 0)\n    , PostTags.TagID\n)TagCountPerMonth\nLEFT JOIN Tags ON\n  TagCountPerMonth.TagId = Tags.Id\nORDER BY RoundToMonth DESC, TagName ASC"
    },
    {
        "QuerySetId": 194591,
        "Title": "Rep \"Created\" vs Rep \"owned\" by top X voters",
        "Description": null,
        "QueryBody": "WITH  Voters AS(\n   SELECT DISTINCT UpVotes, DownVotes, Id, Reputation\n   FROM Users\n   WHERE Reputation != 101 AND Reputation != 1 --Exclude users WITHout repchanges\n   )\n\nSELECT TOP ##topX:int?20##\n    Users.Id as [UserLink],\n    Users.DisplayName as [SortName],\n    Voters.Upvotes * 8 as [EstimatedAddedRep], \n    --as there is no split between question and answer votes\n    -- we take 8 as median in accordance to the tendency that there are more\n    -- answer votes (10 rep) than question votes (5 rep)\n    Voters.Downvotes * 3 as [EstimatedDestroyedRep],\n    Users.Reputation as [OwnedRep]\nFROM Users, Voters\nWHERE users.id = Voters.Id\nGROUP BY Users.Id, Users.DisplayName, Users.Reputation, Voters.UpVotes, Voters.DownVotes\nORDER BY EstimatedAddedRep DESC",
        "CreationDate": "2014-05-16 18:36:04",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 194641,
        "Title": "Accept rate in rep range",
        "Description": null,
        "QueryBody": "SELECT  COUNT(AcceptedAnswerId)*1.0\/COUNT(*) as rate, COUNT(*) as total\nFROM users, posts\nWHERE posts.PostTypeId = 1 and OwnerUserId = users.Id and\nReputation >= ##minReputation## and Reputation <= ##maxReputation##",
        "CreationDate": "2014-05-16 22:14:18",
        "validated": false,
        "QueryBody_Original": "SELECT  COUNT(AcceptedAnswerId)*1.0\/COUNT(*) as rate, COUNT(*) as total\nFROM users, posts\nWHERE posts.PostTypeId = 1 and OwnerUserId = users.Id and\nReputation >= ##minReputation## and Reputation <= ##maxReputation##"
    },
    {
        "QuerySetId": 194724,
        "Title": "Chance of getting an answer by user rep",
        "Description": null,
        "QueryBody": "SELECT  Reputation\/5*5, COUNT(case when AnswerCount > 0 then 1 end)*1.0\/COUNT(*) as rate\nFROM users, posts\nWHERE posts.PostTypeId = 1 and OwnerUserId = users.Id and\nReputation\/5 < ##maxReputation##\/5\nGROUP BY Reputation\/5\nORDER BY Reputation\/5",
        "CreationDate": "2014-05-17 04:11:47",
        "validated": false,
        "QueryBody_Original": "SELECT  Reputation\/5*5, COUNT(case when AnswerCount > 0 then 1 end)*1.0\/COUNT(*) as rate\nFROM users, posts\nWHERE posts.PostTypeId = 1 and OwnerUserId = users.Id and\nReputation\/5 < ##maxReputation##\/5\nGROUP BY Reputation\/5\nORDER BY Reputation\/5"
    },
    {
        "QuerySetId": 195046,
        "Title": "Top users for last n days",
        "Description": null,
        "QueryBody": "DECLARE  @DaysNumber int = ##DaysNumber##\nDECLARE\n  @total int;\n\n\n\nSELECT \n    TOP 500\n    Users.Id as [User Link],\n    Count(@total) AS [Reputation Earned]\n   \nFROM\n    Posts\n  INNER JOIN\n    Users ON Users.Id = OwnerUserId\nWHERE \n    PostTypeId = 2 and CommunityOwnedDate is null and ClosedDate is null\nGROUP BY\n    Users.Id, DisplayName\nHAVING\n    Count(Posts.Id) > 10\nORDER BY\n    [Reputation Earned] DESC",
        "CreationDate": "2014-05-18 16:48:54",
        "validated": false,
        "QueryBody_Original": "DECLARE  @DaysNumber int = ##DaysNumber##\nDECLARE\n  @total int;\n\n\n\nSELECT \n    TOP 500\n    Users.Id as [User Link],\n    Count(@total) AS [Reputation Earned]\n   \nFROM\n    Posts\n  INNER JOIN\n    Users ON Users.Id = OwnerUserId\nWHERE \n    PostTypeId = 2 and CommunityOwnedDate is null and ClosedDate is null\nGROUP BY\n    Users.Id, DisplayName\nHAVING\n    Count(Posts.Id) > 10\nORDER BY\n    [Reputation Earned] DESC"
    },
    {
        "QuerySetId": 195636,
        "Title": "Who Downvoted Me?          ",
        "Description": "Show users who marked my posts as \"favorites\", and which posts they marked...",
        "QueryBody": "DECLARE  @UserId int = ##UserId##\n\nselect \n  votes.userid, --as [User Link], \n  posts.id as [Post Link], \n  votes.votetypeid \n from votes \n join posts \n   on posts.id = votes.postid \n   \n where 1 = 1\n   and posts.owneruserid=@UserID \n   --and votes.postid = 23748285 \n   and votetypeid = 3\n   \n order by votes.votetypeid desc",
        "CreationDate": "2014-06-10 12:35:39",
        "validated": false,
        "QueryBody_Original": "DECLARE  @UserId int = ##UserId##\n\nselect \n  votes.userid, --as [User Link], \n  posts.id as [Post Link], \n  votes.votetypeid \n from votes \n join posts \n   on posts.id = votes.postid \n   \n where 1 = 1\n   and posts.owneruserid=@UserID \n   --and votes.postid = 23748285 \n   and votetypeid = 3\n   \n order by votes.votetypeid desc"
    },
    {
        "QuerySetId": 196454,
        "Title": "Questions per day without ID",
        "Description": null,
        "QueryBody": "DECLARE  @startDate datetime;\nDECLARE @endDate datetime;\nDECLARE @days float;\n\nselect @endDate = DATEADD(day,-7,GETDATE())\nselect @startDate = '2011-11-30 19:00:00'\nselect @days = DATEDIFF(DAY, @startDate, @endDate)\n\nselect count(*)\/@days from Posts\nwhere PostTypeId = 1\nand tags not like '%identify%'\nand CreationDate between @startDate and @endDate",
        "CreationDate": "2014-05-22 23:17:58",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 196498,
        "Title": "Random Answered Questions Before a Specified Date",
        "Description": null,
        "QueryBody": "SELECT  \n  Id AS [Post Link],\n  Body AS [Content],\n  Score AS [Score],\n  AnswerCount AS [Answers],\n  CreationDate AS [Date],\n  RAND(CHECKSUM(NEWID())) * \n  CASE \n    WHEN Score < 1 THEN 1\n    ELSE LOG(Score) \n  END AS [Random]\nFROM Posts\nWHERE PostTypeId = 1 and AcceptedAnswerId IS NOT NULL and CreationDate < ##Date:string?2013-01-01##\nORDER BY Random DESC",
        "CreationDate": "2014-05-23 07:37:49",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 196622,
        "Title": "Submit hour of Questions and Answers",
        "Description": "How many questions and answers at various hours in the day? Switch to graph view to see what times are the most popular for submitting content to the site. (All times are GMT).\r\n\r\nUse \"minDate\" and \"maxDate\" to filter down the posts to a certain time frame.",
        "QueryBody": "WITH  PostTimes as\n(\n  select \n    p.Id,\n    datepart(hh, p.CreationDate) [HourPosted],\n    p.PostTypeId\n  from Posts p\n  where p.CreationDate between ##minDate:string?2005-01-01##\n                      and ##maxDate:string?2020-01-01##\n),\nQuestionTimes as\n(\n  select\n    pt.HourPosted,\n    count(pt.HourPosted) [QuestionCount]\n  from PostTimes pt\n  where pt.PostTypeId = 1 --question\n  group by pt.HourPosted\n),\nAnswerTimes as\n(\n  select\n    pt.HourPosted,\n    count(pt.HourPosted) [AnswerCount]\n  from PostTimes pt\n  where pt.PostTypeId = 2 --answer\n  group by pt.HourPosted\n)\nselect\n  qt.HourPosted,\n  1.0 * at.AnswerCount \/ qt.QuestionCount as AnswersPerQuestion\nfrom \nQuestionTimes qt\ninner join AnswerTimes at on qt.HourPosted = at.HourPosted\norder by qt.HourPosted asc",
        "CreationDate": "2014-08-27 02:46:11",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 196789,
        "Title": "Data Seeding Query (Good Comments) - Short",
        "Description": null,
        "QueryBody": "SELECT  \n  c.id as [Comment Link], \n  c.text, \n  c.id,\n  c.score as 'CommentScore',\n  c.userid,\n  u.reputation,\n  p.posttypeid\nfrom \n  comments c,\n  users u,\n  posts p\n\nwhere c.creationdate > {ts '2014-04-01 00:00:00'}\nand c.creationdate < {ts '2014-05-18 23:59:59'}\nand (c.score is null or c.score = 0)\nand (text not like '%mark%answer%' \n  and text not like '%mark%accept%' \n  and text not like '%accept%answer%'\n  and text not like '%lease%accept%'\n  and text not like '%mark%answer%'\n  and text not like '%thank%you%'\n  and text not like '%.....'\n  and text not like '%thx%you%'\n  and text not like 'thank%'\n  and text not like 'Thank%'\n  and text not like '%+1%'\n  )\nand len(text) < 100\nand c.userid = u.id\nand c.postid = p.id\norder by c.creationdate",
        "CreationDate": "2014-05-24 22:59:10",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 197074,
        "Title": "How many percent of all questions are ID?",
        "Description": null,
        "QueryBody": "DECLARE  @startDate datetime, @endDate datetime;\nDECLARE @num_all int, @num_id float;\n\nselect @endDate = DATEADD(month,-4,GETDATE())\nselect @startDate = '2011-11-30 19:00:00'\n\nselect @num_all = count(*) from Posts\nwhere PostTypeId = 1\nand CreationDate between @startDate and @endDate\n\nselect @num_id = count(*) from Posts\nwhere PostTypeId = 1\nand tags like '%identify%'\nand CreationDate between @startDate and @endDate\n\nselect @num_id\/@num_all",
        "CreationDate": "2014-05-26 23:19:08",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 198064,
        "Title": "Find duplicate of a specific post",
        "Description": null,
        "QueryBody": "SELECT \n  PostLinks.PostId as [Post Link]\nFROM\n  PostLinks\nWHERE\n  PostLinks.LinkTypeId = 3 AND\n  (SELECT\n     Posts.Id\n   FROM\n     Posts\n   WHERE\n     Posts.Id = PostLinks.PostId AND\n     Posts.OwnerUserId = ##UderId##\n     ) IS NOT NULL \nGROUP BY PostLinks.PostId\nORDER BY PostLinks.PostId",
        "CreationDate": "2015-09-20 01:50:29",
        "validated": false,
        "QueryBody_Original": "SELECT \n  PostLinks.PostId as [Post Link]\nFROM\n  PostLinks\nWHERE\n  PostLinks.LinkTypeId = 3 AND\n  (SELECT\n     Posts.Id\n   FROM\n     Posts\n   WHERE\n     Posts.Id = PostLinks.PostId AND\n     Posts.OwnerUserId = ##UderId##\n     ) IS NOT NULL \nGROUP BY PostLinks.PostId\nORDER BY PostLinks.PostId"
    },
    {
        "QuerySetId": 198175,
        "Title": "Number of Posts with Ids in a given interval",
        "Description": null,
        "QueryBody": "SELECT  count(Id) from Posts where Id>=##minId## and Id<##maxId##",
        "CreationDate": "2014-06-01 08:31:57",
        "validated": false,
        "QueryBody_Original": "SELECT  count(Id) from Posts where Id>=##minId## and Id<##maxId##"
    },
    {
        "QuerySetId": 198470,
        "Title": "top users by tag ",
        "Description": null,
        "QueryBody": "DECLARE  @Location VARCHAR(100) = 'india'\n--DECLARE @Tag VARCHAR(100) = 'python'\n\n;WITH USER_BY_TAG\nAS\n(\n  SELECT \n    ROW_NUMBER() OVER(ORDER BY COUNT(*) DESC) Rank,\n    u.Id AS [User Link], \n    COUNT(*) AS UpVotes\n  FROM Tags t\n      INNER JOIN PostTags pt ON pt.TagId = t.id\n      INNER JOIN Posts     p ON p.ParentId = pt.PostId\n      INNER JOIN Votes     v ON v.PostId = p.Id and VoteTypeId = 2\n      INNER JOIN Users     u ON u.Id = p.OwnerUserId\n  WHERE \n      --LOWER(Location) LIKE '%'+@Location+'%'  AND\n        LOWER(TagName) = 'qt'\n        and u.reputation >= 3000\n  GROUP BY u.id\n\n)\n\nSELECT count(*) FROM USER_BY_TAG\n--ORDER BY upvotes DESC ;",
        "CreationDate": "2014-06-11 21:35:42",
        "validated": false,
        "QueryBody_Original": "DECLARE  @Location VARCHAR(100) = 'india'\n--DECLARE @Tag VARCHAR(100) = 'python'\n\n;WITH USER_BY_TAG\nAS\n(\n  SELECT \n    ROW_NUMBER() OVER(ORDER BY COUNT(*) DESC) Rank,\n    u.Id AS [User Link], \n    COUNT(*) AS UpVotes\n  FROM Tags t\n      INNER JOIN PostTags pt ON pt.TagId = t.id\n      INNER JOIN Posts     p ON p.ParentId = pt.PostId\n      INNER JOIN Votes     v ON v.PostId = p.Id and VoteTypeId = 2\n      INNER JOIN Users     u ON u.Id = p.OwnerUserId\n  WHERE \n      --LOWER(Location) LIKE '%'+@Location+'%'  AND\n        LOWER(TagName) = 'qt'\n        and u.reputation >= 3000\n  GROUP BY u.id\n\n)\n\nSELECT count(*) FROM USER_BY_TAG\n--ORDER BY upvotes DESC ;"
    },
    {
        "QuerySetId": 199242,
        "Title": "Unspectacular posts by low-reputation users",
        "Description": null,
        "QueryBody": "SELECT  p.CreationDate, p. AnswerCount, p.Id AS [Post Link]\nFROM Posts p \nINNER JOIN Users u \nON p.OwnerUserId =  u.Id\nWHERE (\n  p.PostTypeId = 1 AND\n  u.Reputation <= ##ReputationLimit## AND\n  len(p.Body) <= ##LengthLimit## AND\n  p.AcceptedAnswerID IS NULL AND\n  p.ClosedDate IS NULL AND\n  p.Score <= 0 AND\n  1 >= ALL (\n    SELECT a.Score FROM Posts a WHERE a.ParentId = p.Id\n  )\n  AND p.Id NOT IN (\n    SELECT c.PostId From Comments c WHERE c.UserId=u.Id\n  )\n)\nORDER BY p.CreationDate DESC",
        "CreationDate": "2014-06-25 03:22:57",
        "validated": false,
        "QueryBody_Original": "SELECT  p.CreationDate, p. AnswerCount, p.Id AS [Post Link]\nFROM Posts p \nINNER JOIN Users u \nON p.OwnerUserId =  u.Id\nWHERE (\n  p.PostTypeId = 1 AND\n  u.Reputation <= ##ReputationLimit## AND\n  len(p.Body) <= ##LengthLimit## AND\n  p.AcceptedAnswerID IS NULL AND\n  p.ClosedDate IS NULL AND\n  p.Score <= 0 AND\n  1 >= ALL (\n    SELECT a.Score FROM Posts a WHERE a.ParentId = p.Id\n  )\n  AND p.Id NOT IN (\n    SELECT c.PostId From Comments c WHERE c.UserId=u.Id\n  )\n)\nORDER BY p.CreationDate DESC"
    },
    {
        "QuerySetId": 199802,
        "Title": "Evolution of review time over time",
        "Description": "Show how long reviews take on average, sorted by review type.\r\nThe review durations are averaged over a calendar week and shown in minutes.\r\n\r\nWARNING: this query is probably buggy! http:\/\/data.stackexchange.com\/cs\/query\/199807\/suggested-edit-weekly-statistics has a more correct-looking query for suggested edits only.\r\n",
        "QueryBody": "SELECT \n  Convert(varchar(10), DateAdd(Day, Coalesce(SE.week, Closure.week) * 7, '1900-01-01'), 126) AS [Week from],\n  Count(SE.duration) AS [#SE],\n  Round(Avg(SE.duration \/ 60.0), 1) AS [\u0394SE],\n  Count(Closure.duration) AS [#Close],\n  Round(Avg(Closure.duration \/ 60.0), 1) AS [\u0394Close]\nFROM (\n  SELECT\n    DateDiff(Day, 0, RT.CreationDate) \/ 7 AS [week],\n    DateDiff(Second, RT.CreationDate, RT.DeletionDate) AS [duration]\n  FROM ReviewTasks RT\n  WHERE RT.ReviewTaskTypeId = 1\n) SE\nFULL OUTER JOIN (\n  SELECT\n    DateDiff(Day, 0, RT.CreationDate) \/ 7 AS [week],\n    DateDiff(Second, RT.CreationDate, RT.DeletionDate) AS [duration]\n  FROM ReviewTasks RT\n  WHERE RT.ReviewTaskTypeId = 2\n) Closure ON Closure.week = SE.week\nGROUP BY Coalesce(SE.week, Closure.week)\nORDER BY [Week from] ASC",
        "CreationDate": "2014-06-08 21:34:39",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 199870,
        "Title": "All votes on the given post",
        "Description": null,
        "QueryBody": "SELECT  * from Votes\nWhere PostId = ##PostId##",
        "CreationDate": "2014-06-09 03:12:12",
        "validated": false,
        "QueryBody_Original": "SELECT  * from Votes\nWhere PostId = ##PostId##"
    },
    {
        "QuerySetId": 200165,
        "Title": "      ",
        "Description": "Show users who marked my posts as \"favorites\", and which posts they marked...",
        "QueryBody": "SELECT  * \n from votes \n \n where 1 = 1\n   and postid = 23748285 \n   and votetypeid = 2   \n order by votes.votetypeid desc\n \n \nSELECT * \n from votes \n \n where 1 = 1\n   and postid = 23748285 \n   and votetypeid = 2   \n order by votes.votetypeid desc",
        "CreationDate": "2014-06-10 12:47:46",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 200233,
        "Title": "Tags with most closed questions",
        "Description": "Lists 100 tags with a high close rate and at least 5 closed questions. These tags are \"probably\" bad tags.\r\n",
        "QueryBody": "SELECT ion of tags with a high close rate.\nSELECT TOP 100\n    TagName as [Tag],\n    COUNT(*) [Total Posts],\n    COUNT(ClosedDate) [Closed Posts],\n    COUNT(*)  \/ COUNT(ClosedDate) as [Ratio]\nFROM Tags\nJOIN PostTags ON Tags.Id = PostTags.TagId\nJOIN Posts ON Posts.Id = PostTags.PostId\nGROUP BY TagId, TagName\nORDER BY [Closed Posts] DESC;",
        "CreationDate": "2014-06-10 18:33:02",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 200242,
        "Title": "Non Active users by Reputation (Last access > X month)",
        "Description": null,
        "QueryBody": "SELECT  COUNT(Id) as numUsers, Reputation\nFROM Users\nWHERE LastAccessDate < DATEADD(month, -##months##, GETDATE())\nGROUP BY Reputation\nORDER BY 2 DESC",
        "CreationDate": "2014-06-10 19:57:49",
        "validated": false,
        "QueryBody_Original": "SELECT  COUNT(Id) as numUsers, Reputation\nFROM Users\nWHERE LastAccessDate < DATEADD(month, -##months##, GETDATE())\nGROUP BY Reputation\nORDER BY 2 DESC"
    },
    {
        "QuerySetId": 200244,
        "Title": "Churn Rate by User Join Date",
        "Description": null,
        "QueryBody": "SELECT  churn.cYear, churn.cMonth, totalUsers, churn.churnUsers, (1.0 * churn.churnUsers \/ totalUsers) as percentage \nFROM \n  (SELECT YEAR(CreationDate) as cYear, Month(CreationDate) cMonth, COUNT(id) as churnUsers\n  FROM Users\n  WHERE CreationDate < DATEADD(month, -##months##, GETDATE())\n        AND DATEDIFF(month, CreationDate, LastAccessDate) < ##months##\n        GROUP BY YEAR(CreationDate), Month(CreationDate) ) as churn\nJOIN \n  (SELECT YEAR(CreationDate) as cYear, Month(CreationDate) cMonth, COUNT(id) as totalUsers\n  FROM Users\n  GROUP BY YEAR(CreationDate), Month(CreationDate)) as total\nON churn.cYear = total.cYear AND churn.cMonth = total.cMonth\nORDER BY 1,2",
        "CreationDate": "2014-06-23 17:27:01",
        "validated": false,
        "QueryBody_Original": "SELECT  churn.cYear, churn.cMonth, totalUsers, churn.churnUsers, (1.0 * churn.churnUsers \/ totalUsers) as percentage \nFROM \n  (SELECT YEAR(CreationDate) as cYear, Month(CreationDate) cMonth, COUNT(id) as churnUsers\n  FROM Users\n  WHERE CreationDate < DATEADD(month, -##months##, GETDATE())\n        AND DATEDIFF(month, CreationDate, LastAccessDate) < ##months##\n        GROUP BY YEAR(CreationDate), Month(CreationDate) ) as churn\nJOIN \n  (SELECT YEAR(CreationDate) as cYear, Month(CreationDate) cMonth, COUNT(id) as totalUsers\n  FROM Users\n  GROUP BY YEAR(CreationDate), Month(CreationDate)) as total\nON churn.cYear = total.cYear AND churn.cMonth = total.cMonth\nORDER BY 1,2"
    },
    {
        "QuerySetId": 200384,
        "Title": "CLEANUP: find long tag wiki excerpts",
        "Description": null,
        "QueryBody": "DECLARE  @truncation_length int = 300\n-- this is just to limit the total number of rows returned\nDECLARE @min_length int = 200\n\nSELECT\n  LEN(p.Body) AS [Length],\n  p.Body,\n  CASE WHEN LEN(p.Body) > @truncation_length THEN 'YES' ELSE '' END AS [Truncated?],\n  t.TagName,\n  t.Count,\n  'site:\/\/edit-tag-wiki\/'+CAST(t.Id AS varchar)+'|(edit)' AS [EditLink]\nFROM \n  Posts AS p\n  INNER JOIN Tags AS t\n    ON p.Id = t.ExcerptPostId\nWHERE \n  p.PostTypeId = 4 -- TagWikiExcerpt\n  AND LEN(p.Body) > @min_length\nORDER BY [Length] DESC",
        "CreationDate": "2014-06-11 01:39:12",
        "validated": false,
        "QueryBody_Original": "DECLARE  @truncation_length int = 300\n-- this is just to limit the total number of rows returned\nDECLARE @min_length int = 200\n\nSELECT\n  LEN(p.Body) AS [Length],\n  p.Body,\n  CASE WHEN LEN(p.Body) > @truncation_length THEN 'YES' ELSE '' END AS [Truncated?],\n  t.TagName,\n  t.Count,\n  'site:\/\/edit-tag-wiki\/'+CAST(t.Id AS varchar)+'|(edit)' AS [EditLink]\nFROM \n  Posts AS p\n  INNER JOIN Tags AS t\n    ON p.Id = t.ExcerptPostId\nWHERE \n  p.PostTypeId = 4 -- TagWikiExcerpt\n  AND LEN(p.Body) > @min_length\nORDER BY [Length] DESC"
    },
    {
        "QuerySetId": 200696,
        "Title": "Is meta? - check for WikiPlaceholder posts",
        "Description": null,
        "QueryBody": "DECLARE  @is_meta_site bit = IIF(NOT EXISTS (SELECT Id FROM Posts WHERE PostTypeId = 7), 1, 0)\nSELECT @is_meta_site",
        "CreationDate": "2014-06-12 03:27:18",
        "validated": false,
        "QueryBody_Original": "DECLARE  @is_meta_site bit = IIF(NOT EXISTS (SELECT Id FROM Posts WHERE PostTypeId = 7), 1, 0)\nSELECT @is_meta_site"
    },
    {
        "QuerySetId": 200697,
        "Title": "Is meta? - check for [status-completed]",
        "Description": null,
        "QueryBody": "DECLARE  @is_meta_site bit = IIF('status-completed' IN (SELECT TagName FROM Tags), 1, 0)\nSELECT @is_meta_site",
        "CreationDate": "2014-06-12 03:28:46",
        "validated": false,
        "QueryBody_Original": "DECLARE  @is_meta_site bit = IIF('status-completed' IN (SELECT TagName FROM Tags), 1, 0)\nSELECT @is_meta_site"
    },
    {
        "QuerySetId": 200728,
        "Title": "Users mastering a specific language, in your city, sorted by score",
        "Description": "Find the best developers in a specific language from your city.\r\nResults are ordered by a score based on the number of times a post\r\nby each user is tagged with the specified language, multiplied by\r\ntheir reputation.\r\nExample: when looking for a PHP developer from Montreal, run the query with\r\n   Language = php\r\n   Location = Montreal\r\n",
        "QueryBody": "WITH  the specified language, multiplied by\n-- their reputation.\n-- Example: when looking for a PHP developer from Montreal, run the query WITH\n--    Language = php\n--    Location = Montreal\n\nSELECT\n  Users.Id [User Link],\n  Users.DisplayName,\n  Users.Reputation,\n  COUNT(Tags) AS TagCount,\n  (COUNT(Tags) * Users.Reputation) AS Score\nFROM Users\n\nINNER JOIN Posts ON Users.Id = Posts.OwnerUserId\nINNER JOIN PostTags ON PostTags.PostId = Posts.Id\nINNER JOIN Tags ON Tags.Id = PostTags.TagId\n\nWHERE\n  Tags.TagName = '##Language##'\nAND\n  Users.Location like '%##Location##%'\nGROUP BY\n  Users.Id, Users.DisplayName, Users.Reputation\nORDER BY Score DESC",
        "CreationDate": "2014-06-12 04:35:42",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 200820,
        "Title": "how many answers for tag",
        "Description": null,
        "QueryBody": "DECLARE  @UserId int = ##UserId##\n\nSELECT --TOP 20 \n    TagName,\n    COUNT(*) AS UpVotes \nFROM Tags\n    INNER JOIN PostTags ON PostTags.TagId = Tags.id\n    INNER JOIN Posts ON Posts.ParentId = PostTags.PostId\n    INNER JOIN Votes ON Votes.PostId = Posts.Id and VoteTypeId = 2\nWHERE \n    Posts.OwnerUserId = @UserId\nGROUP BY TagName \nORDER BY UpVotes DESC",
        "CreationDate": "2014-06-12 14:44:00",
        "validated": false,
        "QueryBody_Original": "DECLARE  @UserId int = ##UserId##\n\nSELECT --TOP 20 \n    TagName,\n    COUNT(*) AS UpVotes \nFROM Tags\n    INNER JOIN PostTags ON PostTags.TagId = Tags.id\n    INNER JOIN Posts ON Posts.ParentId = PostTags.PostId\n    INNER JOIN Votes ON Votes.PostId = Posts.Id and VoteTypeId = 2\nWHERE \n    Posts.OwnerUserId = @UserId\nGROUP BY TagName \nORDER BY UpVotes DESC"
    },
    {
        "QuerySetId": 200840,
        "Title": "How many questions got reopened in the last two months after being improved?",
        "Description": null,
        "QueryBody": "DECLARE  @ReopenedAfterEdit int;\nDECLARE @Edited int;\n\nSELECT @ReopenedAfterEdit = COUNT(DISTINCT(Posts.Title))\nFROM Posts\nJOIN PostHistory editbody ON editbody.PostID = Posts.ID\nJOIN PostHistory reopened ON editbody.PostID = reopened.PostID\nWHERE editbody.PostHistoryTypeId = 5\nAND reopened.PostHistoryTypeId = 11\nAND editbody.CreationDate < reopened.CreationDate\nAND editbody.CreationDate >= DATEADD(MONTH, -2, GETDATE())\n\nSELECT @Edited = COUNT(DISTINCT(Posts.Title))\nFROM Posts\nJOIN PostHistory editbody ON editbody.PostID = Posts.ID\nJOIN PostHistory closed ON editbody.PostID = closed.PostID\nWHERE editbody.PostHistoryTypeId = 5\nAND closed.PostHistoryTypeId = 10\nAND editbody.CreationDate > closed.CreationDate\nAND editbody.CreationDate >= DATEADD(MONTH, -2, GETDATE())",
        "CreationDate": "2014-06-12 17:14:07",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 200845,
        "Title": "All User Comments Starting with Most Recent",
        "Description": null,
        "QueryBody": "DECLARE  @UserId VARCHAR(10) = ##UserId:int##\n\nSELECT\nCreationDate,\nScore,\nText,\n'http:\/\/stackoverflow.com\/questions\/' + CAST(PostId as VARCHAR(10)) + '#comment' + CAST(Id as VARCHAR(10)) + '_' + CAST(PostId as VARCHAR(10)) as Link\nFROM Comments\nWHERE UserId = @UserId\nORDER BY Score DESC",
        "CreationDate": "2016-02-05 08:15:18",
        "validated": false,
        "QueryBody_Original": "DECLARE  @UserId VARCHAR(10) = ##UserId:int##\n\nSELECT\nCreationDate,\nScore,\nText,\n'http:\/\/stackoverflow.com\/questions\/' + CAST(PostId as VARCHAR(10)) + '#comment' + CAST(Id as VARCHAR(10)) + '_' + CAST(PostId as VARCHAR(10)) as Link\nFROM Comments\nWHERE UserId = @UserId\nORDER BY Score DESC"
    },
    {
        "QuerySetId": 200956,
        "Title": "Generic Query for Trending Multiple Tags - Per Week",
        "Description": null,
        "QueryBody": "DECLARE  @StartDate DATETIME = '2016-1-1'\n        ,@EndDate DATETIME = DATEADD(WEEK, DATEDIFF(WEEK, 0, GETDATE()), -1) -- First Day Of current Month\n\n--\nSELECT RoundToWeek, TagName, TagCount\nFROM \n(\n  SELECT  \n    DATEADD(WEEK, DATEDIFF(WEEK, 0, CreationDate), 0) RoundToWeek\n    , COUNT(PostTags.TagID) TagCount\n    , TagID\n  FROM PostTags\n  LEFT JOIN Posts ON\n    PostTags.PostId = Posts.Id\n  WHERE \n    PostTags.TagID IN (SELECT Id FROM #MyTags)\n    AND CreationDate > @StartDate\n    AND CreationDate < @EndDate\n  GROUP BY\n    DATEADD(WEEK, DATEDIFF(WEEK, 0, CreationDate), 0)\n    , PostTags.TagID\n)TagCountPerWekk\nLEFT JOIN Tags ON\n  TagCountPerWekk.TagId = Tags.Id\nORDER BY RoundToWeek DESC, TagName ASC",
        "CreationDate": "2016-08-17 20:50:00",
        "validated": false,
        "QueryBody_Original": "DECLARE  @StartDate DATETIME = '2016-1-1'\n        ,@EndDate DATETIME = DATEADD(WEEK, DATEDIFF(WEEK, 0, GETDATE()), -1) -- First Day Of current Month\n\n--\nSELECT RoundToWeek, TagName, TagCount\nFROM \n(\n  SELECT  \n    DATEADD(WEEK, DATEDIFF(WEEK, 0, CreationDate), 0) RoundToWeek\n    , COUNT(PostTags.TagID) TagCount\n    , TagID\n  FROM PostTags\n  LEFT JOIN Posts ON\n    PostTags.PostId = Posts.Id\n  WHERE \n    PostTags.TagID IN (SELECT Id FROM #MyTags)\n    AND CreationDate > @StartDate\n    AND CreationDate < @EndDate\n  GROUP BY\n    DATEADD(WEEK, DATEDIFF(WEEK, 0, CreationDate), 0)\n    , PostTags.TagID\n)TagCountPerWekk\nLEFT JOIN Tags ON\n  TagCountPerWekk.TagId = Tags.Id\nORDER BY RoundToWeek DESC, TagName ASC"
    },
    {
        "QuerySetId": 201041,
        "Title": "Bad Recommendations to Code Review",
        "Description": null,
        "QueryBody": "SELECT  *\ninto #Migrations\nfrom PostHistory pnt\nwhere PostHistoryTypeId = 35\n  and Comment like 'to http:\/\/codereview.%'\n  and exists (SELECT 1\n              from PostHistory sub\n              where sub.PostId = pnt.PostId\n                and sub.Id > pnt.Id\n                and sub.PostHistoryTypeId = 15) -- unlock\n\nSELECT Id as [Revision Link], PostId as [Post Link], m.*\nfrom #Migrations m",
        "CreationDate": "2014-06-13 07:43:47",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 201379,
        "Title": "My position from Romanian users",
        "Description": null,
        "QueryBody": "SELECT  seqnum as 'Position'\nFROM (SELECT ROW_NUMBER() OVER (ORDER BY Reputation DESC) AS seqnum, \n             Id AS [UserId], \n             Reputation\n      FROM Users\n      WHERE LOWER(Location) LIKE '%romania%'\n     ) u\nWHERE UserId = 3350692\n\n\nSELECT COUNT(*) as 'Users from Romania:'\nFROM\n    Users\nWHERE\n    LOWER(Location) LIKE '%romania%'",
        "CreationDate": "2020-10-27 13:47:11",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 201474,
        "Title": " Top editors in the past n days",
        "Description": null,
        "QueryBody": "DECLARE  @days_diff int = ##DaysBack:int?7##\nDECLARE @top_users int = ##TopUsers:int?10##\n\nselect TOP (@top_users) \n       UserId as [User Link]\n     , Count(*) as [Count]\nFROM(\nSELECT\n  UserId,\n  PostId,\n  Count(*) as [PC]\nFROM\n  PostHistory\nWHERE\nPostHistoryTypeId IN (4,5,6) -- title, body , tags\n  AND CreationDate >= DATEADD(DAY, -@days_diff, GETDATE())\nGROUP BY\n  UserId\n  , PostId\n  , (year(CreationDate) * 60 * 24 * 31 * 12 \n  + datepart(mm, CreationDate) * 60 * 24 * 31\n  + datepart(dd, CreationDate) * 60 * 24\n  + datepart(hh, CreationDate) * 60\n  + datepart(mi, CreationDate)) \/ 5\n  ) as edits\ngroup by UserId  \nORDER BY\n  [Count] DESC",
        "CreationDate": "2014-06-16 01:57:54",
        "validated": false,
        "QueryBody_Original": "DECLARE  @days_diff int = ##DaysBack:int?7##\nDECLARE @top_users int = ##TopUsers:int?10##\n\nselect TOP (@top_users) \n       UserId as [User Link]\n     , Count(*) as [Count]\nFROM(\nSELECT\n  UserId,\n  PostId,\n  Count(*) as [PC]\nFROM\n  PostHistory\nWHERE\nPostHistoryTypeId IN (4,5,6) -- title, body , tags\n  AND CreationDate >= DATEADD(DAY, -@days_diff, GETDATE())\nGROUP BY\n  UserId\n  , PostId\n  , (year(CreationDate) * 60 * 24 * 31 * 12 \n  + datepart(mm, CreationDate) * 60 * 24 * 31\n  + datepart(dd, CreationDate) * 60 * 24\n  + datepart(hh, CreationDate) * 60\n  + datepart(mi, CreationDate)) \/ 5\n  ) as edits\ngroup by UserId  \nORDER BY\n  [Count] DESC"
    },
    {
        "QuerySetId": 201489,
        "Title": " Where close voted I as the first one",
        "Description": null,
        "QueryBody": "DECLARE  @userid as nvarchar(32)\nDECLARE @uid as int = ##UserId##\nselect @userid='\"Id\":'+cast(@uid as nvarchar)+','\n\n\nselect postid as [Post Link]\n, @userid, len(@userid)\n, [text]\n, ([text])\n, charindex(':\"dI\"{', reverse([text]))\n, charindex(reverse(@userid), reverse([text]))\nfrom posthistory\nwhere posthistorytypeid = 10 -- close\nand [text] like '%'+@userid+'%'\nand (charindex(':\"dI\"{', ([text])) - (len(@userid)-5) = \n    charindex((@userid), ([text])))",
        "CreationDate": "2014-06-16 04:58:11",
        "validated": false,
        "QueryBody_Original": "DECLARE  @userid as nvarchar(32)\nDECLARE @uid as int = ##UserId##\nselect @userid='\"Id\":'+cast(@uid as nvarchar)+','\n\n\nselect postid as [Post Link]\n, @userid, len(@userid)\n, [text]\n, ([text])\n, charindex(':\"dI\"{', reverse([text]))\n, charindex(reverse(@userid), reverse([text]))\nfrom posthistory\nwhere posthistorytypeid = 10 -- close\nand [text] like '%'+@userid+'%'\nand (charindex(':\"dI\"{', ([text])) - (len(@userid)-5) = \n    charindex((@userid), ([text])))"
    },
    {
        "QuerySetId": 201508,
        "Title": "Uanswered Unanswered Inactive Questions for a Tag",
        "Description": null,
        "QueryBody": "SELECT  TOP 100 \n    Id AS [Post Link], \n    ViewCount,\n    CreationDate,\n    Score\nFROM \n    Posts \nWHERE \n    LastActivityDate < DATEADD(m, -##MonthsOld##, GETDATE()) AND\n    ParentId IS NULL AND \n    AnswerCount = 0 AND\n    Tags LIKE '<##Tag##>'\n\nORDER BY \n    CreationDate DESC",
        "CreationDate": "2014-06-18 08:20:35",
        "validated": false,
        "QueryBody_Original": "SELECT  TOP 100 \n    Id AS [Post Link], \n    ViewCount,\n    CreationDate,\n    Score\nFROM \n    Posts \nWHERE \n    LastActivityDate < DATEADD(m, -##MonthsOld##, GETDATE()) AND\n    ParentId IS NULL AND \n    AnswerCount = 0 AND\n    Tags LIKE '<##Tag##>'\n\nORDER BY \n    CreationDate DESC"
    },
    {
        "QuerySetId": 201539,
        "Title": "Top User of  a Given Tag in New Zealand",
        "Description": null,
        "QueryBody": "WITH  USER_BY_TAG\nAS\n(\n  SELECT \n    ROW_NUMBER() OVER(ORDER BY COUNT(*) DESC) Rank,\n    u.Id AS [User Link], \n    TagName,\n    COUNT(*) AS UpVotes\n  FROM Tags t\n      INNER JOIN PostTags pt ON pt.TagId = t.id\n      INNER JOIN Posts     p ON p.ParentId = pt.PostId\n      INNER JOIN Votes     v ON v.PostId = p.Id and VoteTypeId = 2\n      INNER JOIN Users     u ON u.Id = p.OwnerUserId\n  WHERE \n      LOWER(Location) LIKE '%new zealand%'\n     AND  TagName = ##tagName:string##\n  GROUP BY u.id, TagName\n)\n\nSELECT * FROM USER_BY_TAG WHERE rank <= 1000 ORDER BY upvotes DESC ;",
        "CreationDate": "2014-06-16 14:50:33",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 201549,
        "Title": "Top Questions Without An Answer With A Tag",
        "Description": null,
        "QueryBody": "DECLARE  @question INT = (SELECT ID FROM PostTypes WHERE Name = 'Question'); --1\n\nSELECT TOP 25\n  q.Score, q.Id AS [Post Link], q.OwnerUserId As [User Link]\nFROM Posts q\nWHERE q.AnswerCount = 0\n  AND q.PostTypeID = @question\n  AND q.ClosedDate IS NULL\nORDER BY q.Score DESC",
        "CreationDate": "2014-10-15 22:20:27",
        "validated": false,
        "QueryBody_Original": "DECLARE  @question INT = (SELECT ID FROM PostTypes WHERE Name = 'Question'); --1\n\nSELECT TOP 25\n  q.Score, q.Id AS [Post Link], q.OwnerUserId As [User Link]\nFROM Posts q\nWHERE q.AnswerCount = 0\n  AND q.PostTypeID = @question\n  AND q.ClosedDate IS NULL\nORDER BY q.Score DESC"
    },
    {
        "QuerySetId": 201658,
        "Title": "Questions with pending close votes - off topic reasons",
        "Description": null,
        "QueryBody": "SELECT \n    pf.PostId as [Post Link],\n    COUNT(*) as CVs,\n    p.ViewCount as Views,\n    p.Score,\n    p.AnswerCount as Answers,\n    p.CreationDate as Date\nFROM\n    PendingFlags pf\nINNER JOIN\n    Posts p\nON\n    p.Id = pf.PostId\nWHERE\n    FlagTypeId = 14\nAND\n    CloseAsOffTopicReasonTypeId = ##CloseAsOffTopicReasonTypeId?16##\nAND\n    LEN(p.Body) < 550\nGROUP BY\n    pf.PostId, p.Score, p.ViewCount, p.AnswerCount, p.CreationDate\nORDER BY\n    CVs DESC, p.ViewCount DESC",
        "CreationDate": "2015-07-15 20:51:44",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 201794,
        "Title": "Top users for tag in location",
        "Description": null,
        "QueryBody": "DECLARE  @limit int = ##Limit##;\nDECLARE @tag_id int = (select id from tags where tagname = '##TagName##');\n\n--select rank() over (order by score desc) \"Rank\", * from (\nselect *\nfrom\n(select top (@limit)\n  users.id\nfrom users\njoin posts answers on (users.id = answers.owneruserid)\njoin posts parent on (answers.parentid = parent.id)\njoin posttags on (parent.id = posttags.postid)\nwhere posttags.tagid = @tag_id\nand answers.posttypeid = 2  -- answers only\nand upper( users.location) like upper('%##Location##%')\ngroup by users.id\norder by sum(answers.score) desc) as userids,\nusers\nwhere userids.id = users.id",
        "CreationDate": "2014-06-17 16:07:06",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 201798,
        "Title": "Top 100 posts with the most comments",
        "Description": null,
        "QueryBody": "SELECT  TOP 100 Posts.Id as [Post Link], CommentCount, ViewCount\nFROM Posts\nWHERE ViewCount < ##howManyViews?100##\nORDER BY CommentCount DESC",
        "CreationDate": "2014-10-03 07:10:06",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 201815,
        "Title": "Where close voted I as the FIRST one",
        "Description": null,
        "QueryBody": "DECLARE  @userid as nvarchar(32)\nDECLARE @uid as int = ##UserId##\nselect @userid='\"Id\":'+cast(@uid as nvarchar)\n\nselect postid as [Post Link], CreationDate\nfrom posthistory\nwhere posthistorytypeid = 10\nand [text] like '%'+@userid+'%'\norder by CreationDate DESC",
        "CreationDate": "2015-08-19 18:06:18",
        "validated": false,
        "QueryBody_Original": "DECLARE  @userid as nvarchar(32)\nDECLARE @uid as int = ##UserId##\nselect @userid='\"Id\":'+cast(@uid as nvarchar)\n\nselect postid as [Post Link], CreationDate\nfrom posthistory\nwhere posthistorytypeid = 10\nand [text] like '%'+@userid+'%'\norder by CreationDate DESC"
    },
    {
        "QuerySetId": 201994,
        "Title": "Your Rank in Your Country or City",
        "Description": null,
        "QueryBody": "SELECT  count (*)\nfrom Users\nwhere Location like '%##Location##%' and Reputation >= \n(SELECT Reputation from Users where Id = ##UserId## )",
        "CreationDate": "2014-06-18 07:25:41",
        "validated": false,
        "QueryBody_Original": "SELECT  count (*)\nfrom Users\nwhere Location like '%##Location##%' and Reputation >= \n(SELECT Reputation from Users where Id = ##UserId## )"
    },
    {
        "QuerySetId": 202033,
        "Title": "Ranking of Users in Your Location",
        "Description": "A simply query to find users in your city or country. Added user links to the original version.\r\n",
        "QueryBody": "WITH  user-links)\n-- A simply query to find users in your city or country. Added user links.\n\nselect Top 500 \nROW_NUMBER() OVER(ORDER BY Reputation DESC) AS [#], \nId [User Link], Reputation, DisplayName, Location\nfrom Users\nwhere Location like '%##Location##%'\norder by Reputation desc",
        "CreationDate": "2014-06-27 09:30:04",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 202046,
        "Title": "Proportion of Users with 10K or 20K rep out of \"Real\" and Active Users",
        "Description": null,
        "QueryBody": "SELECT \n(\n((SELECT CAST(COUNT(*) AS decimal) FROM Users WHERE Reputation > 10000) \/\n(SELECT CAST(COUNT(*) AS decimal) FROM Users WHERE \nLastAccessDate > GETUTCDATE()-##ActiveInLastXDays## and Reputation > ##RepThreshold## and (UpVotes+DownVotes)>0\n)) * 100\n) As PercentageOver10k,\n(\n((SELECT CAST(COUNT(*) AS decimal) FROM Users WHERE Reputation > 20000) \/\n(SELECT CAST(COUNT(*) AS decimal) FROM Users WHERE \nLastAccessDate > GETUTCDATE()-##ActiveInLastXDays## and Reputation > ##RepThreshold## and (UpVotes+DownVotes)>0\n)) * 100\n) As PercentageOver20k",
        "CreationDate": "2014-06-18 09:19:11",
        "validated": false,
        "QueryBody_Original": "SELECT \n(\n((SELECT CAST(COUNT(*) AS decimal) FROM Users WHERE Reputation > 10000) \/\n(SELECT CAST(COUNT(*) AS decimal) FROM Users WHERE \nLastAccessDate > GETUTCDATE()-##ActiveInLastXDays## and Reputation > ##RepThreshold## and (UpVotes+DownVotes)>0\n)) * 100\n) As PercentageOver10k,\n(\n((SELECT CAST(COUNT(*) AS decimal) FROM Users WHERE Reputation > 20000) \/\n(SELECT CAST(COUNT(*) AS decimal) FROM Users WHERE \nLastAccessDate > GETUTCDATE()-##ActiveInLastXDays## and Reputation > ##RepThreshold## and (UpVotes+DownVotes)>0\n)) * 100\n) As PercentageOver20k"
    },
    {
        "QuerySetId": 202327,
        "Title": "Users who asked at least one question",
        "Description": null,
        "QueryBody": "DECLARE  @numUsers float\n\nSELECT @numUsers = COUNT(*) FROM Users\n\n----\nSELECT COUNT(a.OwnerUserId) as atLeast1Question, @numUsers as totalUsers\nFROM (SELECT DISTINCT OwnerUserId\n      FROM Posts \n      WHERE PostTypeId = 1) as a\n----            \nSELECT COUNT(a.OwnerUserId) as atLeast1Answer, @numUsers as totalUsers\nFROM (SELECT DISTINCT OwnerUserId\n      FROM Posts \n      WHERE PostTypeId = 2) as a      \n----      \nSELECT COUNT(a.OwnerUserId) as askedOrAnswered, @numUsers as totalUsers\nFROM (SELECT DISTINCT OwnerUserId\n      FROM Posts) as a\n\n----\nSELECT COUNT(*)\nFROM \n  (SELECT DISTINCT OwnerUserId\n  FROM Posts \n  WHERE PostTypeId = 1) as P1\n  JOIN \n  (SELECT DISTINCT OwnerUserId\n  FROM Posts \n  WHERE PostTypeId = 2) as P2\n  ON P1.OwnerUserId = P2.OwnerUserId",
        "CreationDate": "2014-06-18 19:43:42",
        "validated": false,
        "QueryBody_Original": "DECLARE  @numUsers float\n\nSELECT @numUsers = COUNT(*) FROM Users\n\n----\nSELECT COUNT(a.OwnerUserId) as atLeast1Question, @numUsers as totalUsers\nFROM (SELECT DISTINCT OwnerUserId\n      FROM Posts \n      WHERE PostTypeId = 1) as a\n----            \nSELECT COUNT(a.OwnerUserId) as atLeast1Answer, @numUsers as totalUsers\nFROM (SELECT DISTINCT OwnerUserId\n      FROM Posts \n      WHERE PostTypeId = 2) as a      \n----      \nSELECT COUNT(a.OwnerUserId) as askedOrAnswered, @numUsers as totalUsers\nFROM (SELECT DISTINCT OwnerUserId\n      FROM Posts) as a\n\n----\nSELECT COUNT(*)\nFROM \n  (SELECT DISTINCT OwnerUserId\n  FROM Posts \n  WHERE PostTypeId = 1) as P1\n  JOIN \n  (SELECT DISTINCT OwnerUserId\n  FROM Posts \n  WHERE PostTypeId = 2) as P2\n  ON P1.OwnerUserId = P2.OwnerUserId"
    },
    {
        "QuerySetId": 202513,
        "Title": "My score evolution through time",
        "Description": null,
        "QueryBody": "SELECT  Score, CreationDate FROM Posts WHERE OwnerUserId = ##UserId## ORDER BY CreationDate",
        "CreationDate": "2014-06-19 00:17:36",
        "validated": false,
        "QueryBody_Original": "SELECT  Score, CreationDate FROM Posts WHERE OwnerUserId = ##UserId## ORDER BY CreationDate"
    },
    {
        "QuerySetId": 202535,
        "Title": "A Tag's Most Upvoted Answers in a Given Time Span",
        "Description": null,
        "QueryBody": "SELECT  top ##TopXAnswers## \na.Score,\nq.FavoriteCount as Favs,\na.Id as [Post Link]\n\nfrom Posts a\njoin Posts q on a.ParentId = q.Id\nleft outer join PostTags pt on pt.PostId = q.Id \njoin Tags t on t.Id = pt.TagId\nwhere a.ClosedDate is null\n  and q.ClosedDate is null\n--  and a.CommunityOwnedDate is null \n--  and q.CommunityOwnedDate is null\n  and t.TagName  = '##TagName##' \n  AND a.CreationDate BETWEEN \n  DATEADD(m, -##LessThanMonthsOld##, GETDATE()) \n  AND\n  DATEADD(m, -##MoreThanMonthsOld##, GETDATE()) \norder by a.Score desc",
        "CreationDate": "2014-06-19 03:28:01",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 202551,
        "Title": "What is my reputation percentile among accounts created in the same year?",
        "Description": null,
        "QueryBody": "DECLARE  @UserId INT = ##UserId##\nDECLARE @Reputation INT\nDECLARE @Rank INT\nDECLARE @Total INT\nDECLARE @StartTime DATETIME\n\nSELECT @Reputation = Reputation, @StartTime = CreationDate FROM Users \nWHERE Id = @UserID\n\nSELECT @Rank = COUNT(Id) FROM Users WHERE Reputation < @Reputation\nAND DATEDIFF(YEAR, @StartTime, CreationDate) = 0\n\nSELECT @Total = COUNT(Id) FROM Users \nWHERE DATEDIFF(YEAR, @StartTime, CreationDate) = 0\n\nSELECT (@Rank * 100.0)\/@Total",
        "CreationDate": "2014-06-29 21:58:44",
        "validated": false,
        "QueryBody_Original": "DECLARE  @UserId INT = ##UserId##\nDECLARE @Reputation INT\nDECLARE @Rank INT\nDECLARE @Total INT\nDECLARE @StartTime DATETIME\n\nSELECT @Reputation = Reputation, @StartTime = CreationDate FROM Users \nWHERE Id = @UserID\n\nSELECT @Rank = COUNT(Id) FROM Users WHERE Reputation < @Reputation\nAND DATEDIFF(YEAR, @StartTime, CreationDate) = 0\n\nSELECT @Total = COUNT(Id) FROM Users \nWHERE DATEDIFF(YEAR, @StartTime, CreationDate) = 0\n\nSELECT (@Rank * 100.0)\/@Total"
    },
    {
        "QuerySetId": 202641,
        "Title": "Number of Questions per week for 3 given tags, over a specified period",
        "Description": "The query also avoids including the latest week since the resulting graph is so ugly, which probably depends on which day of week the query is made. I don't understand the query well enough to be extra sure.\r\n\r\nSee http:\/\/meta.stackoverflow.com\/a\/260571",
        "QueryBody": "DECLARE  @tag0 nvarchar(25) = ##tag0:string?ruby-on-rails##\nDECLARE @tag1 nvarchar(25) = ##tag1:string?django##\nDECLARE @tag2 nvarchar(25) = ##tag2:string?python-3.x##\nDECLARE @weeks int         = ##weeks:int?52##\n\nSELECT\n  dateadd(week, datediff(week, 0, q.CreationDate), 0) week,\n  TagName,\n  count(*)\nFROM PostTags pt\nJOIN Posts q ON q.Id=pt.PostId\nJOIN Tags t ON t.Id=pt.TagId\nWHERE\n  TagName IN (@tag0, @tag1, @tag2) AND\n  q.creationdate between Dateadd(ww, -@weeks, getdate()) AND\n                         Dateadd(ww, -1, getdate())\nGROUP BY dateadd(week, datediff(week, 0, q.CreationDate), 0), TagName\nORDER BY dateadd(week, datediff(week, 0, q.CreationDate), 0)",
        "CreationDate": "2014-06-19 18:53:07",
        "validated": false,
        "QueryBody_Original": "DECLARE  @tag0 nvarchar(25) = ##tag0:string?ruby-on-rails##\nDECLARE @tag1 nvarchar(25) = ##tag1:string?django##\nDECLARE @tag2 nvarchar(25) = ##tag2:string?python-3.x##\nDECLARE @weeks int         = ##weeks:int?52##\n\nSELECT\n  dateadd(week, datediff(week, 0, q.CreationDate), 0) week,\n  TagName,\n  count(*)\nFROM PostTags pt\nJOIN Posts q ON q.Id=pt.PostId\nJOIN Tags t ON t.Id=pt.TagId\nWHERE\n  TagName IN (@tag0, @tag1, @tag2) AND\n  q.creationdate between Dateadd(ww, -@weeks, getdate()) AND\n                         Dateadd(ww, -1, getdate())\nGROUP BY dateadd(week, datediff(week, 0, q.CreationDate), 0), TagName\nORDER BY dateadd(week, datediff(week, 0, q.CreationDate), 0)"
    },
    {
        "QuerySetId": 202673,
        "Title": "Most viewed question where I have an answer",
        "Description": null,
        "QueryBody": "SELECT  TOP 100 p1.ID, p1.Title, p1.VIewCount\nfrom Posts p JOIN Posts p1 ON P.ParentID = p1.ID\nwhere p.OwnerUserID = ##UserId## AND p.PostTypeID = 2\nORDER BY p1.ViewCount DESC",
        "CreationDate": "2014-06-19 22:38:17",
        "validated": false,
        "QueryBody_Original": "SELECT  TOP 100 p1.ID, p1.Title, p1.VIewCount\nfrom Posts p JOIN Posts p1 ON P.ParentID = p1.ID\nwhere p.OwnerUserID = ##UserId## AND p.PostTypeID = 2\nORDER BY p1.ViewCount DESC"
    },
    {
        "QuerySetId": 202676,
        "Title": "Most viewed questions where I have posted an answer",
        "Description": null,
        "QueryBody": "SELECT  TOP 100 p1.ID as [Post Link], p1.VIewCount as [View Counter]\nfrom Posts p JOIN Posts p1 ON P.ParentID = p1.ID\nwhere p.OwnerUserID = ##userid## AND p.PostTypeID = 2\nORDER BY p1.ViewCount DESC",
        "CreationDate": "2014-06-20 12:21:42",
        "validated": false,
        "QueryBody_Original": "SELECT  TOP 100 p1.ID as [Post Link], p1.VIewCount as [View Counter]\nfrom Posts p JOIN Posts p1 ON P.ParentID = p1.ID\nwhere p.OwnerUserID = ##userid## AND p.PostTypeID = 2\nORDER BY p1.ViewCount DESC"
    },
    {
        "QuerySetId": 203775,
        "Title": "Questions with pending close votes",
        "Description": null,
        "QueryBody": "SELECT  TOP 7777\n    pf.PostId as [Post Link],\n    COUNT(*) as CVs,\n    p.ViewCount as Views,\n    p.Score,\n    p.AnswerCount as Answers,\n    p.CreationDate as Date\nFROM\n    PendingFlags pf\nINNER JOIN\n    Posts p\nON\n    p.Id = pf.PostId\nWHERE\n    FlagTypeId = 14\nAND\n    CloseReasonTypeId = ##CloseReasonTypeId?101##\nGROUP BY\n    pf.PostId, p.Score, p.ViewCount, p.AnswerCount, p.CreationDate\nORDER BY\n    CVs DESC, p.ViewCount DESC",
        "CreationDate": "2015-02-07 10:34:21",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 203937,
        "Title": "Unspectacular, uncommented posts by low-reputation users",
        "Description": null,
        "QueryBody": "SELECT  p.CreationDate, p. AnswerCount, p.Id AS [Post Link], p.Body\nFROM Posts p \nINNER JOIN Users u \nON p.OwnerUserId =  u.Id\nWHERE (\n  p.PostTypeId = 1 AND\n  u.Reputation <= ##ReputationLimit## AND\n  len(p.Body) <= ##LengthLimit## AND\n  p.AcceptedAnswerID IS NULL AND\n  p.CreationDate <= '##MaxDate##' AND\n  p.CreationDate >= '##MinDate##' AND  \n  p.ClosedDate IS NULL AND\n  p.Score <= 0 AND\n  1 >= ALL (\n    SELECT a.Score FROM Posts a WHERE a.ParentId = p.Id\n  )\n  AND p.Id NOT IN (\n    SELECT c.PostId From Comments c WHERE c.UserId=u.Id\n  )\n)\nORDER BY p.CreationDate DESC",
        "CreationDate": "2014-06-27 08:06:37",
        "validated": false,
        "QueryBody_Original": "SELECT  p.CreationDate, p. AnswerCount, p.Id AS [Post Link], p.Body\nFROM Posts p \nINNER JOIN Users u \nON p.OwnerUserId =  u.Id\nWHERE (\n  p.PostTypeId = 1 AND\n  u.Reputation <= ##ReputationLimit## AND\n  len(p.Body) <= ##LengthLimit## AND\n  p.AcceptedAnswerID IS NULL AND\n  p.CreationDate <= '##MaxDate##' AND\n  p.CreationDate >= '##MinDate##' AND  \n  p.ClosedDate IS NULL AND\n  p.Score <= 0 AND\n  1 >= ALL (\n    SELECT a.Score FROM Posts a WHERE a.ParentId = p.Id\n  )\n  AND p.Id NOT IN (\n    SELECT c.PostId From Comments c WHERE c.UserId=u.Id\n  )\n)\nORDER BY p.CreationDate DESC"
    },
    {
        "QuerySetId": 204106,
        "Title": "Users with reputation > X by Join Date",
        "Description": null,
        "QueryBody": "SELECT  TOT.cYear, TOT.cMonth, totalUsers, repUsers, (1.0 * repUsers \/ totalUsers) as Percentage\nFROM\n  (SELECT YEAR(CreationDate) as cYear, MONTH(CreationDate) as cMonth, COUNT(*) as repUsers\n  FROM Users\n  WHERE Reputation > ##baseRep##\n  GROUP BY YEAR(CreationDate), MONTH(CreationDate)) as REP\nJOIN\n  (SELECT YEAR(CreationDate) as cYear, MONTH(CreationDate) as cMonth, COUNT(*) as totalUsers\n  FROM Users\n  GROUP BY YEAR(CreationDate), MONTH(CreationDate)) as TOT\nON TOT.cYear = REP.cYear AND TOT.cMonth = REP.cMonth\nORDER BY 1,2",
        "CreationDate": "2014-06-25 19:38:41",
        "validated": false,
        "QueryBody_Original": "SELECT  TOT.cYear, TOT.cMonth, totalUsers, repUsers, (1.0 * repUsers \/ totalUsers) as Percentage\nFROM\n  (SELECT YEAR(CreationDate) as cYear, MONTH(CreationDate) as cMonth, COUNT(*) as repUsers\n  FROM Users\n  WHERE Reputation > ##baseRep##\n  GROUP BY YEAR(CreationDate), MONTH(CreationDate)) as REP\nJOIN\n  (SELECT YEAR(CreationDate) as cYear, MONTH(CreationDate) as cMonth, COUNT(*) as totalUsers\n  FROM Users\n  GROUP BY YEAR(CreationDate), MONTH(CreationDate)) as TOT\nON TOT.cYear = REP.cYear AND TOT.cMonth = REP.cMonth\nORDER BY 1,2"
    },
    {
        "QuerySetId": 204107,
        "Title": "Average reputation gain by number of questions and answers",
        "Description": null,
        "QueryBody": "SELECT  YEAR(Users.CreationDate) as cYear, \n       MONTH(Users.CreationDate) as cMonth, \n       SUM(1.0 * Reputation) as totalReputation, \n       COUNT(Posts.Id) as totalPosts, \n       SUM(1.0 * Reputation) \/ COUNT(Posts.Id) as AvgPointPPost \n\nFROM Users JOIN Posts \n     ON Posts.OwnerUserId = Users.Id\n     WHERE Reputation >= ##minRep## \nGROUP BY YEAR(Users.CreationDate), MONTH(Users.CreationDate)\nORDER BY 1,2",
        "CreationDate": "2014-06-25 20:17:36",
        "validated": false,
        "QueryBody_Original": "SELECT  YEAR(Users.CreationDate) as cYear, \n       MONTH(Users.CreationDate) as cMonth, \n       SUM(1.0 * Reputation) as totalReputation, \n       COUNT(Posts.Id) as totalPosts, \n       SUM(1.0 * Reputation) \/ COUNT(Posts.Id) as AvgPointPPost \n\nFROM Users JOIN Posts \n     ON Posts.OwnerUserId = Users.Id\n     WHERE Reputation >= ##minRep## \nGROUP BY YEAR(Users.CreationDate), MONTH(Users.CreationDate)\nORDER BY 1,2"
    },
    {
        "QuerySetId": 204824,
        "Title": "Wall of users attempt number 2",
        "Description": "http:\/\/meta.stackexchange.com\/questions\/213050\/why-cant-i-pull-in-all-the-so-users-from-data-explorer",
        "QueryBody": "DECLARE  @t int = 100000\nDECLARE @r int = 200000\n;\nwith u1 as (\nselect -- top (@t)\nrow_number() over(order by id) as rn, \nid, displayname\nfrom users \nwhere id between @t+ @r*(1-1)+1 and @t+@r*1\n),\nu2 as (\nselect -- top (@t)\nrow_number() over(order by id) as rn,id, displayname\nfrom users \nwhere id between @t+@r*(2-1)+1 and @t+@r*2)\n,\nu3 as (\nselect -- top (@t)\nrow_number() over(order by id) as rn,id, displayname\nfrom users \nwhere id between @t+@r*(3-1)+1 and @t+@r*3)\n,\nu4 as (\nselect -- top (@t)\nrow_number() over(order by id) as rn,id, displayname\nfrom users \nwhere id between @t+@r*(4-1)+1 and @t+@r*4)\nselect u1.*\n,u2.*\n,u3.*\n,u4.*\nfrom u1\nleft outer  join u2 on u2.rn = u1.rn\nleft outer join u3 on u3.rn = u1.rn\nleft outer join u4 on u4.rn = u1.rn\norder by u1.rn",
        "CreationDate": "2014-06-28 21:12:26",
        "validated": false,
        "QueryBody_Original": "DECLARE  @t int = 100000\nDECLARE @r int = 200000\n;\nwith u1 as (\nselect -- top (@t)\nrow_number() over(order by id) as rn, \nid, displayname\nfrom users \nwhere id between @t+ @r*(1-1)+1 and @t+@r*1\n),\nu2 as (\nselect -- top (@t)\nrow_number() over(order by id) as rn,id, displayname\nfrom users \nwhere id between @t+@r*(2-1)+1 and @t+@r*2)\n,\nu3 as (\nselect -- top (@t)\nrow_number() over(order by id) as rn,id, displayname\nfrom users \nwhere id between @t+@r*(3-1)+1 and @t+@r*3)\n,\nu4 as (\nselect -- top (@t)\nrow_number() over(order by id) as rn,id, displayname\nfrom users \nwhere id between @t+@r*(4-1)+1 and @t+@r*4)\nselect u1.*\n,u2.*\n,u3.*\n,u4.*\nfrom u1\nleft outer  join u2 on u2.rn = u1.rn\nleft outer join u3 on u3.rn = u1.rn\nleft outer join u4 on u4.rn = u1.rn\norder by u1.rn"
    },
    {
        "QuerySetId": 205056,
        "Title": "Where did I succesfully close voted",
        "Description": null,
        "QueryBody": "DECLARE  @userid int = ##userid:int##\nDECLARE @sdate nvarchar(10) = ##sd:string##\nDECLARE @edate nvarchar(10) = ##ed:string##\nDECLARE @startdate date = cast(@sdate as date)\nDECLARE @enddate date = cast(@edate as date)\nDECLARE @userwithid nvarchar(20) = '\"Id\":' + cast(@userid as nvarchar) + ','\n\nprint @userwithid\n\nselect  \n      count(*) as total\n     , sum(case \n     when Charindex(@userwithid, [text] )>0 then 1\n     else 0\n     end) as [user]\n                \nfrom posthistory\nwhere posthistorytypeid = 10\nand creationdate between @startdate and @enddate",
        "CreationDate": "2014-07-11 19:29:30",
        "validated": false,
        "QueryBody_Original": "DECLARE  @userid int = ##userid:int##\nDECLARE @sdate nvarchar(10) = ##sd:string##\nDECLARE @edate nvarchar(10) = ##ed:string##\nDECLARE @startdate date = cast(@sdate as date)\nDECLARE @enddate date = cast(@edate as date)\nDECLARE @userwithid nvarchar(20) = '\"Id\":' + cast(@userid as nvarchar) + ','\n\nprint @userwithid\n\nselect  \n      count(*) as total\n     , sum(case \n     when Charindex(@userwithid, [text] )>0 then 1\n     else 0\n     end) as [user]\n                \nfrom posthistory\nwhere posthistorytypeid = 10\nand creationdate between @startdate and @enddate"
    },
    {
        "QuerySetId": 205063,
        "Title": "How many accounts were created in the same year and month?",
        "Description": null,
        "QueryBody": "DECLARE  @UserId INT = ##UserId##\nDECLARE @Reputation INT\nDECLARE @StartTime DATETIME\n\nSELECT @Reputation = Reputation, @StartTime = CreationDate FROM Users \nWHERE Id = @UserID\n\nSELECT COUNT(Id) AS Rank FROM Users\nWHERE DATEDIFF(YEAR, @StartTime, CreationDate) = 0\nAND DATEDIFF(MONTH, @StartTime, CreationDate) = 0",
        "CreationDate": "2014-06-29 19:22:24",
        "validated": false,
        "QueryBody_Original": "DECLARE  @UserId INT = ##UserId##\nDECLARE @Reputation INT\nDECLARE @StartTime DATETIME\n\nSELECT @Reputation = Reputation, @StartTime = CreationDate FROM Users \nWHERE Id = @UserID\n\nSELECT COUNT(Id) AS Rank FROM Users\nWHERE DATEDIFF(YEAR, @StartTime, CreationDate) = 0\nAND DATEDIFF(MONTH, @StartTime, CreationDate) = 0"
    },
    {
        "QuerySetId": 205075,
        "Title": "What is my reputation percentile among accounts created in the same year? (Ignores 1 rep users)",
        "Description": null,
        "QueryBody": "DECLARE  @UserId INT = ##UserId##\nDECLARE @Reputation INT\nDECLARE @Rank INT\nDECLARE @Total INT\nDECLARE @StartTime DATETIME\n\nSELECT @Reputation = Reputation, @StartTime = CreationDate FROM Users \nWHERE Id = @UserID\n\nSELECT @Rank = COUNT(Id) FROM Users WHERE Reputation < @Reputation\nAND Reputation > 1\nAND DATEDIFF(YEAR, @StartTime, CreationDate) = 0\n\nSELECT @Total = COUNT(Id) FROM Users WHERE Reputation > 1\nAND DATEDIFF(YEAR, @StartTime, CreationDate) = 0\n\nSELECT (@Rank * 100.0)\/@Total",
        "CreationDate": "2014-06-29 22:09:10",
        "validated": false,
        "QueryBody_Original": "DECLARE  @UserId INT = ##UserId##\nDECLARE @Reputation INT\nDECLARE @Rank INT\nDECLARE @Total INT\nDECLARE @StartTime DATETIME\n\nSELECT @Reputation = Reputation, @StartTime = CreationDate FROM Users \nWHERE Id = @UserID\n\nSELECT @Rank = COUNT(Id) FROM Users WHERE Reputation < @Reputation\nAND Reputation > 1\nAND DATEDIFF(YEAR, @StartTime, CreationDate) = 0\n\nSELECT @Total = COUNT(Id) FROM Users WHERE Reputation > 1\nAND DATEDIFF(YEAR, @StartTime, CreationDate) = 0\n\nSELECT (@Rank * 100.0)\/@Total"
    },
    {
        "QuerySetId": 205334,
        "Title": "Posts where the first revision had a single tag",
        "Description": "Show the tags that were the sole tag on the first revision of a post.\r\nFor each tag, show the number of posts that started out with just this tag.\r\n",
        "QueryBody": "WITH  just this tag.\n\nSELECT '(total)' As [Tag], Count(*) As [Posts]\nFROM PostHistory \nWHERE PostHistoryTypeId = 3 AND PatIndex('%\u00e0\u00e9%', Text) = 0\nGROUP BY PostHistoryTypeId",
        "CreationDate": "2017-06-04 16:51:46",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 205351,
        "Title": "Active Users in the Last x Days",
        "Description": null,
        "QueryBody": "SELECT  COUNT(*) as ActiveUsers FROM Users \nWHERE LastAccessDate > GETUTCDATE()-##ActiveInLastXDays##",
        "CreationDate": "2014-11-02 04:26:18",
        "validated": false,
        "QueryBody_Original": "SELECT  COUNT(*) as ActiveUsers FROM Users \nWHERE LastAccessDate > GETUTCDATE()-##ActiveInLastXDays##"
    },
    {
        "QuerySetId": 205466,
        "Title": "Questions where comments prevent deletion",
        "Description": "http:\/\/meta.stackexchange.com\/questions\/78048\/\r\n\r\nIf the question is more than 365 days old, and ...\r\n\r\nhas a score of 0 or a score of 1 with a deleted owner\r\nhas no answers\r\nis not locked\r\nhas a viewcount <= the age of the question in days times 1.5\r\nhas 1 or 0 comments\r\n\r\n... it will be automatically deleted.",
        "QueryBody": "WITH  T as (\nselect\n  q.id as [Post Link],\n  q.score,\n  q.commentCount,\n  q.closedDate,\n  q.viewCount\nfrom\n  Posts q\n  join PostHistory ph on (ph.postid = q.id)\nwhere\n  q.creationDate >=\n    CONVERT (datetime, ##StartDate:string?2013.01.01## , 102)\n  and q.creationDate <=\n    CONVERT (datetime, ##EndDate:string?2013.01.31## , 102)\n  and q.PostTypeId = 1\n  and not exists (\n    select 1\n    from\n      PostHistory ph\n    where\n      ph.PostId = q.id\n      and ph.PostHistoryTypeId = 14\n  )\n  and ph.PostHistoryTypeId = 10\n  and q.score <= ##QScore:int?1##\n  and (q.answerCount = 0 or q.answerCount is null)\n  )\n  \n  Select TOP(##RowsReturned:int?100##) * from T\n  order by T.score, T.commentCount",
        "CreationDate": "2014-07-01 21:30:30",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 205487,
        "Title": "Count monthly questions for a tag pattern",
        "Description": null,
        "QueryBody": "DECLARE  @pattern varchar(255)  = ##pattern:string##;\n\nselect dateadd(month, datediff(month, 0, q.CreationDate), 0) m, count(DISTINCT q.Id)\nfrom Posts q\nwhere PostTypeId=1 AND q.Title like @pattern\nand q.CreationDate < dateadd(month, datediff(month, 0, getdate()), 0)\ngroup by dateadd(month, datediff(month, 0, q.CreationDate), 0)",
        "CreationDate": "2015-01-23 20:22:46",
        "validated": false,
        "QueryBody_Original": "DECLARE  @pattern varchar(255)  = ##pattern:string##;\n\nselect dateadd(month, datediff(month, 0, q.CreationDate), 0) m, count(DISTINCT q.Id)\nfrom Posts q\nwhere PostTypeId=1 AND q.Title like @pattern\nand q.CreationDate < dateadd(month, datediff(month, 0, getdate()), 0)\ngroup by dateadd(month, datediff(month, 0, q.CreationDate), 0)"
    },
    {
        "QuerySetId": 205529,
        "Title": "Tag names with non-ASCII characters (diacritics, etc.)",
        "Description": null,
        "QueryBody": "SELECT \n  -- t.TagName AS [TagName], -- fails with ASCII: http:\/\/meta.stackexchange.com\/questions\/226703\/auto-linkification-of-tags-tagname-fails-when-the-tag-name-contains-nonstandard\n  t.TagName AS [Tag],\n  t.Count AS [Count],\n  (\n    SELECT s.SourceTagName + ' '\n    FROM TagSynonyms s\n    WHERE s.ApprovedByUserId IS NOT NULL AND s.TargetTagName = t.TagName\n    FOR XML PATH('')\n  ) AS [Synonyms]\nFROM Tags t\nWHERE t.TagName LIKE '%[^-#+.0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz]%'\nORDER BY t.TagName ASC",
        "CreationDate": "2014-07-02 01:03:47",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 205830,
        "Title": "Days in which rep cap was reached + bounty was offered",
        "Description": null,
        "QueryBody": "SELECT  CONVERT(varchar, Votes.CreationDate, 112) as [Date],\n       sum(case \n           when PostTypeId = 1 and VoteTypeId = 1 then 2\n           when PostTypeId = 1 and VoteTypeId = 2 then 5\n           when PostTypeId = 2 and VoteTypeId = 1 then 15\n           when PostTypeId = 2 and VoteTypeId = 2 then 10\n           else 0\n       end) as [Reputation Earned],\n       sum(case when VoteTypeId = 8 then 1 else 0 end) as [Bounties Offered]\n       \nfrom Votes\nleft outer join Posts on Votes.PostId = Posts.Id\nwhere (OwnerUserId = ##UserId## or UserId = ##UserId##)\n  and (VoteTypeId = 1 or VoteTypeId = 2 or VoteTypeId = 8)\n  and (PostTypeId = 1 or PostTypeId = 2 or VoteTypeId = 8)\ngroup by CONVERT(varchar, Votes.CreationDate, 112)\norder by [Reputation Earned];",
        "CreationDate": "2014-07-02 20:56:12",
        "validated": false,
        "QueryBody_Original": "SELECT  CONVERT(varchar, Votes.CreationDate, 112) as [Date],\n       sum(case \n           when PostTypeId = 1 and VoteTypeId = 1 then 2\n           when PostTypeId = 1 and VoteTypeId = 2 then 5\n           when PostTypeId = 2 and VoteTypeId = 1 then 15\n           when PostTypeId = 2 and VoteTypeId = 2 then 10\n           else 0\n       end) as [Reputation Earned],\n       sum(case when VoteTypeId = 8 then 1 else 0 end) as [Bounties Offered]\n       \nfrom Votes\nleft outer join Posts on Votes.PostId = Posts.Id\nwhere (OwnerUserId = ##UserId## or UserId = ##UserId##)\n  and (VoteTypeId = 1 or VoteTypeId = 2 or VoteTypeId = 8)\n  and (PostTypeId = 1 or PostTypeId = 2 or VoteTypeId = 8)\ngroup by CONVERT(varchar, Votes.CreationDate, 112)\norder by [Reputation Earned];"
    },
    {
        "QuerySetId": 205956,
        "Title": "Score Per Post with Minimum Score Answer since date",
        "Description": null,
        "QueryBody": "SELECT  sum(A.Score) as TotalScore, count(A.Id) as AnswerCount, sum(A.Score)\/(count(A.Id)\/1.0) As ScorePerAnswer, A.OwnerUserId as [User Link] \nfrom posts as A \nwhere A.creationdate > '##date##' \n  and A.PostTypeId=2\n  and (SELECT count(B.Id) from Posts as B WHERE B.Score > ##minscore## and B.ParentId=A.ParentId and B.OwnerUserId!=A.OwnerUserId)>0\ngroup by A.OwnerUserId \nhaving sum(A.Score)>500 \norder by ScorePerAnswer desc",
        "CreationDate": "2014-07-03 06:35:19",
        "validated": false,
        "QueryBody_Original": "SELECT  sum(A.Score) as TotalScore, count(A.Id) as AnswerCount, sum(A.Score)\/(count(A.Id)\/1.0) As ScorePerAnswer, A.OwnerUserId as [User Link] \nfrom posts as A \nwhere A.creationdate > '##date##' \n  and A.PostTypeId=2\n  and (SELECT count(B.Id) from Posts as B WHERE B.Score > ##minscore## and B.ParentId=A.ParentId and B.OwnerUserId!=A.OwnerUserId)>0\ngroup by A.OwnerUserId \nhaving sum(A.Score)>500 \norder by ScorePerAnswer desc"
    },
    {
        "QuerySetId": 206575,
        "Title": "Average score per tag per user",
        "Description": null,
        "QueryBody": "DECLARE  @MinAnswers int = ##MinAnswers:int?10##\n\nSELECT TOP 100\n  AVG(CAST(Score AS FLOAT)) AS 'Average Score',\n  SUM(Score) AS 'Total Score',\n  COUNT(Score) AS 'Answers Count',\n  TagName,\n  OwnerUserId AS [User Link]\nFROM Tags\nINNER JOIN PostTags ON PostTags.TagId = Tags.id\nINNER JOIN Posts ON Posts.ParentId = PostTags.PostId\nWHERE TagName = 'sql'\nGROUP BY TagName, OwnerUserId\nHAVING COUNT(Score) > @MinAnswers\nORDER BY 'Average Score' DESC",
        "CreationDate": "2014-07-06 02:13:33",
        "validated": false,
        "QueryBody_Original": "DECLARE  @MinAnswers int = ##MinAnswers:int?10##\n\nSELECT TOP 100\n  AVG(CAST(Score AS FLOAT)) AS 'Average Score',\n  SUM(Score) AS 'Total Score',\n  COUNT(Score) AS 'Answers Count',\n  TagName,\n  OwnerUserId AS [User Link]\nFROM Tags\nINNER JOIN PostTags ON PostTags.TagId = Tags.id\nINNER JOIN Posts ON Posts.ParentId = PostTags.PostId\nWHERE TagName = 'sql'\nGROUP BY TagName, OwnerUserId\nHAVING COUNT(Score) > @MinAnswers\nORDER BY 'Average Score' DESC"
    },
    {
        "QuerySetId": 206649,
        "Title": "Get the most recent post date from each database",
        "Description": "Loop through all of the databases on the server with sp_msforeachdb, and get the most recent post from each of them. Helpful to see which databases have the most up-to-date data.\r\n\r\nDoesn't matter which site you run this on at data.stackexchange.com - you'll get data for all sites.",
        "QueryBody": "SELECT  * FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME = ''Posts'') \nSELECT TOP 1 ''?'' AS DBname, CreationDate FROM dbo.Posts ORDER BY Id DESC;'",
        "CreationDate": "2014-07-06 16:07:40",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 206661,
        "Title": "Daily downvote counts on a user's posts ",
        "Description": null,
        "QueryBody": "SELECT  v.CreationDate as [Date], count(v.Id) as [Number of downvotes] from Votes v \ninner join Posts p on v.PostId=p.Id\nwhere p.OwnerUserId=##UserId## and v.VoteTypeId=3\ngroup by v.CreationDate\norder by v.CreationDate desc",
        "CreationDate": "2014-07-06 19:44:56",
        "validated": false,
        "QueryBody_Original": "SELECT  v.CreationDate as [Date], count(v.Id) as [Number of downvotes] from Votes v \ninner join Posts p on v.PostId=p.Id\nwhere p.OwnerUserId=##UserId## and v.VoteTypeId=3\ngroup by v.CreationDate\norder by v.CreationDate desc"
    },
    {
        "QuerySetId": 207072,
        "Title": "Percentage of closed questions in top tags",
        "Description": null,
        "QueryBody": "SELECT ion of tags with a high close rate.\nSELECT\n    TagName as [Tag],\n    COUNT(*) [Total Posts]\nFROM Tags\nJOIN PostTags ON Tags.Id = PostTags.TagId\nJOIN Posts ON Posts.Id = PostTags.PostId\nGROUP BY TagId, TagName\nORDER BY [Total Posts] DESC, [Tag]",
        "CreationDate": "2014-07-20 15:06:49",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 207333,
        "Title": "number of all users in a tag",
        "Description": null,
        "QueryBody": "DECLARE  @tag_debate float = 2.27;\n\nwith answers as (\n  select a.OwnerUserId UserId,\n         1.0\/rank() over (partition by q.Id order by a.Score desc) utility,\n         1.0*q.AnswerCount debatableness,\n         1.0\/rank() over (partition by q.Id order by a.Score desc) *\n         q.AnswerCount\/@tag_debate EC\n  from Posts q\n       join Posts a on q.Id = a.ParentId\n       join PostTags on q.Id = PostId\n       join Tags t on TagId = t.Id\n  where TagName = '##tag##' --and q.Id = 9929585\n),\n\nuser_MEC as (\n  select UserId as [User Link],\n         sum(EC)\/count(*) MEC,\n         avg(utility) AU, \n         avg(debatableness) D,\n         @tag_debate D_avg_t,\n         count(*) Q_u_t\n  from answers\n  group by UserId  \n)\n\nselect count(*)\nfrom user_MEC\nwhere MEC>=1\nand Q_u_t >= 1",
        "CreationDate": "2014-07-10 14:04:08",
        "validated": false,
        "QueryBody_Original": "DECLARE  @tag_debate float = 2.27;\n\nwith answers as (\n  select a.OwnerUserId UserId,\n         1.0\/rank() over (partition by q.Id order by a.Score desc) utility,\n         1.0*q.AnswerCount debatableness,\n         1.0\/rank() over (partition by q.Id order by a.Score desc) *\n         q.AnswerCount\/@tag_debate EC\n  from Posts q\n       join Posts a on q.Id = a.ParentId\n       join PostTags on q.Id = PostId\n       join Tags t on TagId = t.Id\n  where TagName = '##tag##' --and q.Id = 9929585\n),\n\nuser_MEC as (\n  select UserId as [User Link],\n         sum(EC)\/count(*) MEC,\n         avg(utility) AU, \n         avg(debatableness) D,\n         @tag_debate D_avg_t,\n         count(*) Q_u_t\n  from answers\n  group by UserId  \n)\n\nselect count(*)\nfrom user_MEC\nwhere MEC>=1\nand Q_u_t >= 1"
    },
    {
        "QuerySetId": 208158,
        "Title": "User Answer Accepted Rate over time",
        "Description": "Shows the accepted answer percentage (excepting self-answers) per month.",
        "QueryBody": "SELECT \n  DATEADD(mm, (Year(q.CreationDate) - 1900) * 12 + Month(q.CreationDate) - 1, 0) AS Month,\n  u.DisplayName,\n  (sum(case when q.AcceptedAnswerId = a.Id then 1 else 0 end)*100.0\/count(*)) AS AcceptedPercent\nFROM Posts a\nINNER JOIN Users u ON u.Id = a.OwnerUserId\nINNER JOIN Posts q ON a.ParentId = q.Id\nWHERE \n  (q.OwnerUserId != u.Id OR q.OwnerUserId IS NULL)   --no self answers\n  and u.Id in (SELECT TOP 10 Id FROM Users ORDER BY Reputation DESC)\nGROUP BY\n  Year(q.CreationDate), Month(q.CreationDate), u.DisplayName\nORDER BY\n  Year(q.CreationDate), Month(q.CreationDate), u.DisplayName",
        "CreationDate": "2014-07-12 15:27:37",
        "validated": false,
        "QueryBody_Original": "SELECT \n  DATEADD(mm, (Year(q.CreationDate) - 1900) * 12 + Month(q.CreationDate) - 1, 0) AS Month,\n  u.DisplayName,\n  (sum(case when q.AcceptedAnswerId = a.Id then 1 else 0 end)*100.0\/count(*)) AS AcceptedPercent\nFROM Posts a\nINNER JOIN Users u ON u.Id = a.OwnerUserId\nINNER JOIN Posts q ON a.ParentId = q.Id\nWHERE \n  (q.OwnerUserId != u.Id OR q.OwnerUserId IS NULL)   --no self answers\n  and u.Id in (SELECT TOP 10 Id FROM Users ORDER BY Reputation DESC)\nGROUP BY\n  Year(q.CreationDate), Month(q.CreationDate), u.DisplayName\nORDER BY\n  Year(q.CreationDate), Month(q.CreationDate), u.DisplayName"
    },
    {
        "QuerySetId": 208172,
        "Title": "How many upvotes do I have for each tag",
        "Description": null,
        "QueryBody": "DECLARE  @UserId int = ##UserId##\n\nSELECT --TOP 20 \n    TagName,\n    COUNT(*) AS UpVotes \nFROM Tags\n    INNER JOIN PostTags ON PostTags.TagId = Tags.id\n    INNER JOIN Posts ON Posts.ParentId = PostTags.PostId\n    INNER JOIN Votes ON Votes.PostId = Posts.Id and VoteTypeId = 2\nWHERE \n    Posts.OwnerUserId = @UserId\nGROUP BY TagName \nORDER BY UpVotes DESC",
        "CreationDate": "2014-07-12 18:26:28",
        "validated": false,
        "QueryBody_Original": "DECLARE  @UserId int = ##UserId##\n\nSELECT --TOP 20 \n    TagName,\n    COUNT(*) AS UpVotes \nFROM Tags\n    INNER JOIN PostTags ON PostTags.TagId = Tags.id\n    INNER JOIN Posts ON Posts.ParentId = PostTags.PostId\n    INNER JOIN Votes ON Votes.PostId = Posts.Id and VoteTypeId = 2\nWHERE \n    Posts.OwnerUserId = @UserId\nGROUP BY TagName \nORDER BY UpVotes DESC"
    },
    {
        "QuerySetId": 208337,
        "Title": "How is my Answer vs Accepted rate",
        "Description": "http:\/\/meta.stackexchange.com\/questions\/184461\/is-there-a-way-to-pull-up-your-own-q-a-statistics",
        "QueryBody": "DECLARE  @uid integer = ##uid## -- 2297\n\nselect count(a.id) as [total answers]\n     , sum(case when q.id is not null then 1 else 0 end ) as [accepted]\n     , (100 * sum(case when q.id is not null then 1 else 0 end )) \/ count(a.id)  as [rate]\nfrom posts a\nleft outer join posts q on q.acceptedanswerid = a.id\nwhere a.posttypeid = 2 -- Answer\nand a.owneruserid = @uid",
        "CreationDate": "2014-07-13 20:33:34",
        "validated": false,
        "QueryBody_Original": "DECLARE  @uid integer = ##uid## -- 2297\n\nselect count(a.id) as [total answers]\n     , sum(case when q.id is not null then 1 else 0 end ) as [accepted]\n     , (100 * sum(case when q.id is not null then 1 else 0 end )) \/ count(a.id)  as [rate]\nfrom posts a\nleft outer join posts q on q.acceptedanswerid = a.id\nwhere a.posttypeid = 2 -- Answer\nand a.owneruserid = @uid"
    },
    {
        "QuerySetId": 209634,
        "Title": "up and downvotes over time per week",
        "Description": "Borrowed the week construct from https:\/\/data.stackexchange.com\/stackoverflow\/query\/208831\/total-downvotes-over-time#graph",
        "QueryBody": "SELECT  dateadd(week, datediff(week, 0, v.CreationDate), 0) wk\n, sum(case votetypeid when 2 then 1 when 3 then 1 else 0 end ) as total_votes\n, sum(case votetypeid when 2 then 1 else 0 end ) as upvotes\n, sum(case votetypeid when 3 then 1 else 0 end ) as downvotes\n, convert( float, sum(case votetypeid when 3 then 1 else 0 end ) ) \/\n  sum(case votetypeid when 3 then 1 when 2 then 1 else 0 end ) as downvote_fraction\nfrom votes v\n-- inner join votetypes vt on vt.id = v.votetypeid \nwhere v.CreationDate > dateadd(year, 0, '2013-01-01')\ngroup by  dateadd(week, datediff(week, 0, v.CreationDate), 0) \norder by dateadd(week, datediff(week, 0, v.CreationDate), 0)",
        "CreationDate": "2014-07-22 01:05:40",
        "validated": false,
        "QueryBody_Original": "SELECT  dateadd(week, datediff(week, 0, v.CreationDate), 0) wk\n, sum(case votetypeid when 2 then 1 when 3 then 1 else 0 end ) as total_votes\n, sum(case votetypeid when 2 then 1 else 0 end ) as upvotes\n, sum(case votetypeid when 3 then 1 else 0 end ) as downvotes\n, convert( float, sum(case votetypeid when 3 then 1 else 0 end ) ) \/\n  sum(case votetypeid when 3 then 1 when 2 then 1 else 0 end ) as downvote_fraction\nfrom votes v\n-- inner join votetypes vt on vt.id = v.votetypeid \nwhere v.CreationDate > dateadd(year, 0, '2013-01-01')\ngroup by  dateadd(week, datediff(week, 0, v.CreationDate), 0) \norder by dateadd(week, datediff(week, 0, v.CreationDate), 0)"
    },
    {
        "QuerySetId": 209877,
        "Title": "My most up voted comments",
        "Description": null,
        "QueryBody": "DECLARE  @UserId int = ##UserId##\n\nSELECT \n    TOP 500\n    Id,\n    Score,\n    Text,\n    CreationDate\nFROM\n    Comments\nWHERE \n    UserId = @UserId\nORDER BY\n    Score DESC",
        "CreationDate": "2014-07-23 14:06:42",
        "validated": false,
        "QueryBody_Original": "DECLARE  @UserId int = ##UserId##\n\nSELECT \n    TOP 500\n    Id,\n    Score,\n    Text,\n    CreationDate\nFROM\n    Comments\nWHERE \n    UserId = @UserId\nORDER BY\n    Score DESC"
    },
    {
        "QuerySetId": 209986,
        "Title": "Who voted for a post",
        "Description": null,
        "QueryBody": "SELECT \n  Votes.UserId as [User Link],\n  case\n    when Votes.VoteTypeId = 2 then 'Upvote'\n    when Votes.VoteTypeId = 3 then 'Downvote'\n  end as [Type],\n  Votes.CreationDate,\n  Votes.VoteTypeId\nfrom Votes\nwhere Votes.PostId = ##PostId##",
        "CreationDate": "2014-07-24 02:53:13",
        "validated": false,
        "QueryBody_Original": "SELECT \n  Votes.UserId as [User Link],\n  case\n    when Votes.VoteTypeId = 2 then 'Upvote'\n    when Votes.VoteTypeId = 3 then 'Downvote'\n  end as [Type],\n  Votes.CreationDate,\n  Votes.VoteTypeId\nfrom Votes\nwhere Votes.PostId = ##PostId##"
    },
    {
        "QuerySetId": 210120,
        "Title": "Answer score quartiles as a function of length",
        "Description": "Plots quartiles of the answer score distribution as a function of answer length.",
        "QueryBody": "WITH  \nAllQuartiles(RoundedLength,PostScore,Quartile)\nAS (\n  SELECT TOP(##postsNo?100000##) \n  (ROUND(LEN(Body), -##logRound?3##) +0.5E##logRound?3##)\n    AS RoundedLength,\n  Score \n    AS PostScore,\n  NTILE(4) OVER(PARTITION BY ROUND(LEN(Body), -##logRound?3##) ORDER BY Score) \n    AS Quartile\n  FROM Posts\n  WHERE \n    PostTypeId = 2 AND\n    LEN(Body) <= ##maxLength?20000##\n  ORDER BY\n    ROUND(LEN(Body), -##logRound?3##),Score\n)\nSELECT \n  RoundedLength,\n  MAX(CASE Quartile WHEN 1 THEN PostScore END) '1',\n  MAX(CASE Quartile WHEN 2 THEN PostScore END) '2',\n  MAX(CASE Quartile WHEN 3 THEN PostScore END) '3',\n  MAX(CASE Quartile WHEN 4 THEN PostScore END) '4'\nFROM \n  AllQuartiles\n--WHERE\n  --Quartile!=4\nGROUP BY\n  RoundedLength\nORDER BY\n  RoundedLength",
        "CreationDate": "2014-08-06 05:52:36",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 210517,
        "Title": "In which part of the world is a user according to its time answer",
        "Description": null,
        "QueryBody": "DECLARE  @UserId int = ##UserId##;\n\nSELECT \n datepart(hour, p.CreationDate),\n count(1)\nFROM Posts p\nwhere p.OwnerUserId = @UserId\ngroup by datepart(hour, p.CreationDate)",
        "CreationDate": "2014-07-26 16:39:52",
        "validated": false,
        "QueryBody_Original": "DECLARE  @UserId int = ##UserId##;\n\nSELECT \n datepart(hour, p.CreationDate),\n count(1)\nFROM Posts p\nwhere p.OwnerUserId = @UserId\ngroup by datepart(hour, p.CreationDate)"
    },
    {
        "QuerySetId": 210538,
        "Title": "Find newest candidates for Necromancer badge",
        "Description": "Finds questions more than 60 days old having in the specified tag, ordered by newest first.\r\n\r\nSuited for acquiring the Necromancer badge.\r\nhttp:\/\/stackoverflow.com\/help\/badges\/17\/necromancer",
        "QueryBody": "DECLARE  @tag VARCHAR(30) = ##tag:string##\n\nSELECT TOP 1000\n    Id AS [Post Link],\n    Score,\n    ViewCount as Views,\n    AnswerCount as Answers,\n    Body,\n    CreationDate\nFROM Posts\nWHERE\n    AcceptedAnswerId IS NULL\n    AND PostTypeId = 1\n    AND CreationDate < GETDATE() - 60\n    AND ClosedDate IS NULL\n    AND Tags LIKE '%<' + LOWER(@tag) + '>%'\nORDER BY CreationDate DESC",
        "CreationDate": "2014-07-26 19:10:06",
        "validated": false,
        "QueryBody_Original": "DECLARE  @tag VARCHAR(30) = ##tag:string##\n\nSELECT TOP 1000\n    Id AS [Post Link],\n    Score,\n    ViewCount as Views,\n    AnswerCount as Answers,\n    Body,\n    CreationDate\nFROM Posts\nWHERE\n    AcceptedAnswerId IS NULL\n    AND PostTypeId = 1\n    AND CreationDate < GETDATE() - 60\n    AND ClosedDate IS NULL\n    AND Tags LIKE '%<' + LOWER(@tag) + '>%'\nORDER BY CreationDate DESC"
    },
    {
        "QuerySetId": 210557,
        "Title": "Users with most answers with given tag from  given country",
        "Description": null,
        "QueryBody": "SELECT  u.DisplayName, u.Reputation, count(*) as Answers from Users u, Posts p, Posts pp where u.Id in (\n    SELECT Id\n    from Users \n  )\n  and u.Location like ('%'+##location:string##+'%')\n  and p.OwnerUserId = u.Id\n  and pp.Id = p.ParentId\n  and pp.Tags like ('%<'+##tag:string##+'>%')\n  group by u.DisplayName, u.Reputation\n  order by u.Reputation desc",
        "CreationDate": "2014-09-02 17:25:22",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 210587,
        "Title": "Find posts to edit for Excavator and Archaeologist badges by tag with new users",
        "Description": "Finds questions that have been inactive for at least 6 months by tag with new users\r\n\r\nSuited for acquiring the Excavator and Archaeologist badge.\r\nhttp:\/\/stackoverflow.com\/help\/badges\/1287\/excavator\r\nhttp:\/\/stackoverflow.com\/help\/badges\/1286\/archaeologist",
        "QueryBody": "DECLARE  @tag VARCHAR(30) = ##tag:string##\n\nSELECT TOP 1000\n    p.Id as [Post Link],\n    Score,\n    LastActivityDate\nFROM Posts p JOIN Users u ON p.OwnerUserId = u.Id\nWHERE\n    PostTypeId=1\n    AND OwnerUserId!=##UserID:int##\n    AND LastActivityDate < DATEADD(mm, -6, GETDATE())\n    AND Tags LIKE '%<' + LOWER(@tag) + '>%'\n    AND Reputation < 5\n    AND LastEditorUserId IS NULL\n    AND ClosedDate IS NULL\nORDER BY NEWID()",
        "CreationDate": "2014-07-27 05:20:05",
        "validated": false,
        "QueryBody_Original": "DECLARE  @tag VARCHAR(30) = ##tag:string##\n\nSELECT TOP 1000\n    p.Id as [Post Link],\n    Score,\n    LastActivityDate\nFROM Posts p JOIN Users u ON p.OwnerUserId = u.Id\nWHERE\n    PostTypeId=1\n    AND OwnerUserId!=##UserID:int##\n    AND LastActivityDate < DATEADD(mm, -6, GETDATE())\n    AND Tags LIKE '%<' + LOWER(@tag) + '>%'\n    AND Reputation < 5\n    AND LastEditorUserId IS NULL\n    AND ClosedDate IS NULL\nORDER BY NEWID()"
    },
    {
        "QuerySetId": 210976,
        "Title": "tag distribution of top contributors",
        "Description": null,
        "QueryBody": "SELECT \n  owneruserid,\n  count(distinct id) as answer_ct\ninto\n  #topcontributors\nfrom \n  Posts \nwhere \n  CreationDate > DATEADD(dd, -91, GETDATE())\n  and posttypeid = 2\ngroup by owneruserid\nhaving count(distinct id) >= 90\norder by answer_ct desc\n\nSELECT\n  parentid\ninto\n  #tc_questions_answered\nfrom\n  posts\nwhere\n  creationdate > dateadd(dd,-91,getdate())\n  and posttypeid = 2\n  and owneruserid in (SELECT owneruserid from #topcontributors group by owneruserid)\ngroup by parentid",
        "CreationDate": "2014-07-29 21:31:22",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 211027,
        "Title": "VoteTypeId 1 for a given post",
        "Description": null,
        "QueryBody": "SELECT  * from votes vv1\nwhere vv1.postid = ##postid## \nand vv1.votetypeid = 1",
        "CreationDate": "2014-07-29 11:13:03",
        "validated": false,
        "QueryBody_Original": "SELECT  * from votes vv1\nwhere vv1.postid = ##postid## \nand vv1.votetypeid = 1"
    },
    {
        "QuerySetId": 211028,
        "Title": "Posts tagged with both submodule and git",
        "Description": null,
        "QueryBody": "WITH  both git and submodule\nSELECT COUNT(*)\nFROM Posts\nWHERE PostTypeId = 1 -- questions\n  AND Tags LIKE '%<git>%<submodule>%'\n   OR Tags LIKE '%<submodule>%<git>%'\n\n-- Tagged WITH submodule\nSELECT COUNT(*)\nFROM Posts\nWHERE PostTypeId = 1 -- questions\n  AND Tags LIKE '%<submodule>%'\n\n-- Tagged WITH submodule and not WITH git\nSELECT COUNT(*)\nFROM Posts\nWHERE PostTypeId = 1 -- questions\n  AND Tags LIKE '%<submodule>%'\n  AND Tags NOT LIKE '%<git>%'",
        "CreationDate": "2014-07-29 11:41:50",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 211034,
        "Title": "Questions tagged with submodule but not git",
        "Description": null,
        "QueryBody": "WITH  submodule and not WITH git\nSELECT\n  Id AS [Post Link],\n  Tags,\n  LastActivityDate\nFROM Posts\nWHERE PostTypeId = 1 -- questions\n  AND Tags LIKE '%<submodule>%'\n  AND Tags NOT LIKE '%<git>%'\nORDER BY Tags",
        "CreationDate": "2014-07-29 20:58:04",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 211046,
        "Title": "Tagged with submodule and git, but not git-submodule",
        "Description": null,
        "QueryBody": "WITH  both git and submodule\nSELECT Id AS [Post Link], Tags\nFROM Posts\nWHERE PostTypeId = 1 -- questions\n  AND (Tags LIKE '%<git>%<submodule>%' OR Tags LIKE '%<submodule>%<git>%')\n  AND Tags NOT LIKE '%<git-submodule>%'\nOrder by Tags",
        "CreationDate": "2014-07-29 11:56:21",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 211098,
        "Title": "When Does Martijn Pieters Sleep?",
        "Description": null,
        "QueryBody": "SELECT \n  DatePart(hh, CreationDate) as [Hour],\n  Count(*) as [Frequency]\n\nFROM Posts\n\nWHERE OwnerUserId = ##UserID##\n\nGROUP BY DatePart(hh, Creationdate)",
        "CreationDate": "2014-07-29 20:05:30",
        "validated": false,
        "QueryBody_Original": "SELECT \n  DatePart(hh, CreationDate) as [Hour],\n  Count(*) as [Frequency]\n\nFROM Posts\n\nWHERE OwnerUserId = ##UserID##\n\nGROUP BY DatePart(hh, Creationdate)"
    },
    {
        "QuerySetId": 211230,
        "Title": "Posts containing links to outdated or inferior documentation",
        "Description": null,
        "QueryBody": "SELECT  Id AS [Post Link]\nFROM Posts\nWHERE PostTypeId IN (1,2) -- questions and answers\n  AND OwnerUserId = ##UserId##\n  AND (Body LIKE '%http:\/\/javadude.com\/articles\/passbyvalue.htm%')\nORDER BY CreationDate",
        "CreationDate": "2015-02-02 00:40:15",
        "validated": false,
        "QueryBody_Original": "SELECT  Id AS [Post Link]\nFROM Posts\nWHERE PostTypeId IN (1,2) -- questions and answers\n  AND OwnerUserId = ##UserId##\n  AND (Body LIKE '%http:\/\/javadude.com\/articles\/passbyvalue.htm%')\nORDER BY CreationDate"
    },
    {
        "QuerySetId": 211377,
        "Title": "Top 20 Comments Of User By Score",
        "Description": null,
        "QueryBody": "DECLARE  @UserId int = ##UserId##\n\nSELECT TOP 20 Score, Text, PostId FROM Comments WHERE UserId = @UserId ORDER BY Score DESC",
        "CreationDate": "2014-08-03 04:03:48",
        "validated": false,
        "QueryBody_Original": "DECLARE  @UserId int = ##UserId##\n\nSELECT TOP 20 Score, Text, PostId FROM Comments WHERE UserId = @UserId ORDER BY Score DESC"
    },
    {
        "QuerySetId": 211390,
        "Title": "No. of Suggested Edits (Total \/ Approved \/ Rejected)",
        "Description": null,
        "QueryBody": "DECLARE  @UserId int = ##UserId##\n\nSELECT \n  Id As [User Link], \n  (SELECT COUNT(*) FROM SuggestedEdits WHERE OwnerUserId = @UserId) As TotalEdits,\n  (SELECT COUNT(*) FROM SuggestedEdits WHERE OwnerUserId = @UserId AND ApprovalDate IS NOT NULL) As AcceptedEdits,\n  (SELECT COUNT(*) FROM SuggestedEdits WHERE OwnerUserId = @UserId AND RejectionDate IS NOT NULL)  As RejectedEdits\nFROM Users\nWHERE Id = @UserId",
        "CreationDate": "2014-07-30 21:31:51",
        "validated": false,
        "QueryBody_Original": "DECLARE  @UserId int = ##UserId##\n\nSELECT \n  Id As [User Link], \n  (SELECT COUNT(*) FROM SuggestedEdits WHERE OwnerUserId = @UserId) As TotalEdits,\n  (SELECT COUNT(*) FROM SuggestedEdits WHERE OwnerUserId = @UserId AND ApprovalDate IS NOT NULL) As AcceptedEdits,\n  (SELECT COUNT(*) FROM SuggestedEdits WHERE OwnerUserId = @UserId AND RejectionDate IS NOT NULL)  As RejectedEdits\nFROM Users\nWHERE Id = @UserId"
    },
    {
        "QuerySetId": 211583,
        "Title": "Posts by Score vs Date",
        "Description": null,
        "QueryBody": "DECLARE  @UserId int = ##UserId##\n\nselect CreationDate, SUM(Score)\nfrom Posts \nwhere OwnerUserId = @UserId\ngroup by CreationDate order by CreationDate",
        "CreationDate": "2014-07-31 20:54:39",
        "validated": false,
        "QueryBody_Original": "DECLARE  @UserId int = ##UserId##\n\nselect CreationDate, SUM(Score)\nfrom Posts \nwhere OwnerUserId = @UserId\ngroup by CreationDate order by CreationDate"
    },
    {
        "QuerySetId": 212873,
        "Title": "Questions that where not answered after editing",
        "Description": "Questions that got at least one answer even after being edited.",
        "QueryBody": "SELECT  q.Id as [Post Link]\n       , q.Tags as [Tags]\n       , q.ViewCount as [Views]\n       , q.Score as [Votes]\n       --, count(q.Tags) as [Tags count]\nfrom posts q\nLEFT OUTER join Tags on q.Tags = Tags.TagName\nwhere q.posttypeid = 1\nand q.LastEditorUserId = ##userid##\nand q.ClosedDate is null\nand q.CommunityOwnedDate is null\nand q.ParentId is null\nand q.AcceptedAnswerId is null\nand q.AnswerCount < 1\n-- and q.Score > -1\n-- and q.ViewCount < 100\nand datediff(day, q.CreationDate, LastEditDate) < 30\n-- GROUP BY q.Id, q.Tags, q.ViewCount, q.Score",
        "CreationDate": "2014-08-01 23:34:47",
        "validated": false,
        "QueryBody_Original": "SELECT  q.Id as [Post Link]\n       , q.Tags as [Tags]\n       , q.ViewCount as [Views]\n       , q.Score as [Votes]\n       --, count(q.Tags) as [Tags count]\nfrom posts q\nLEFT OUTER join Tags on q.Tags = Tags.TagName\nwhere q.posttypeid = 1\nand q.LastEditorUserId = ##userid##\nand q.ClosedDate is null\nand q.CommunityOwnedDate is null\nand q.ParentId is null\nand q.AcceptedAnswerId is null\nand q.AnswerCount < 1\n-- and q.Score > -1\n-- and q.ViewCount < 100\nand datediff(day, q.CreationDate, LastEditDate) < 30\n-- GROUP BY q.Id, q.Tags, q.ViewCount, q.Score"
    },
    {
        "QuerySetId": 213146,
        "Title": "Closed non-duplicate questions answered by a user",
        "Description": null,
        "QueryBody": "SELECT  q.Id as [Post Link], q.Score as [Question Score], a.Score as [Answer Score], q.AcceptedAnswerId as [Accepted Answer] from Posts q\ninner join Posts a on a.ParentId = q.Id\nwhere q.ClosedDate is not null\nand a.OwnerUserId = ##UserId##\nand q.Id not in (SELECT PostId from PostLinks) \norder by q.ClosedDate desc",
        "CreationDate": "2014-08-04 00:37:36",
        "validated": false,
        "QueryBody_Original": "SELECT  q.Id as [Post Link], q.Score as [Question Score], a.Score as [Answer Score], q.AcceptedAnswerId as [Accepted Answer] from Posts q\ninner join Posts a on a.ParentId = q.Id\nwhere q.ClosedDate is not null\nand a.OwnerUserId = ##UserId##\nand q.Id not in (SELECT PostId from PostLinks) \norder by q.ClosedDate desc"
    },
    {
        "QuerySetId": 213466,
        "Title": "Find newest candidates for Necromancer badge with few views",
        "Description": "Finds questions more than 60 days old having in the specified tag, ordered by newest first. \r\n\r\nSuited for acquiring the Necromancer badge. \r\nhttp:\/\/stackoverflow.com\/help\/badges\/17\/necromancer",
        "QueryBody": "DECLARE  @tag VARCHAR(30) = ##tag:string##\n\nSELECT TOP 1000\n    Id AS [Post Link],\n    GETDATE() - 60 AS Calc,\n    Score,\n    ViewCount as Views,\n    AnswerCount as Answers\nFROM Posts\nWHERE\n    AcceptedAnswerId IS NULL\n    AND PostTypeId = 1\n    AND Tags LIKE '%' + LOWER(@tag) + '%'\n    AND viewCount < 300\nORDER BY CreationDate DESC",
        "CreationDate": "2016-08-12 16:43:54",
        "validated": false,
        "QueryBody_Original": "DECLARE  @tag VARCHAR(30) = ##tag:string##\n\nSELECT TOP 1000\n    Id AS [Post Link],\n    GETDATE() - 60 AS Calc,\n    Score,\n    ViewCount as Views,\n    AnswerCount as Answers\nFROM Posts\nWHERE\n    AcceptedAnswerId IS NULL\n    AND PostTypeId = 1\n    AND Tags LIKE '%' + LOWER(@tag) + '%'\n    AND viewCount < 300\nORDER BY CreationDate DESC"
    },
    {
        "QuerySetId": 213570,
        "Title": "Users with the Highest Score in a Tag with at Least X Answers",
        "Description": null,
        "QueryBody": "SELECT \n  ROW_NUMBER() OVER (ORDER BY Score DESC) AS Rank,\n  Id AS [User Link],\n  Score,\n  [Count] AS TotalAnswers,\n  Average\nFROM (\n  SELECT\n    u.Id,\n    SUM(a.Score) AS Score,\n    COUNT(a.Score) AS 'Count',\n    AVG(a.Score) AS Average\n  FROM Posts q\n    INNER JOIN Posts a ON q.Id = a.ParentID\n    INNER JOIN PostTags pt ON q.Id = pt.PostId\n    INNER JOIN Tags t ON pt.TagId = t.Id\n    INNER JOIN Users u ON u.Id = a.OwnerUserId\n  WHERE t.TagName = ##Tag:string?git##\n  GROUP BY u.Id\n  HAVING SUM(a.Score) >= 1000 AND COUNT(a.Score) >= ##MinAnswers:int?10##\n) AS X\nORDER BY ##OrderColumn:string?Score## DESC",
        "CreationDate": "2014-08-02 22:51:57",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 213610,
        "Title": "Pull all answers from given user",
        "Description": null,
        "QueryBody": "SELECT  Id as [Post Link], CreationDate, Body\nfrom Posts \nwhere OwnerUserId=##User:int## \nORDER BY CreationDate DESC",
        "CreationDate": "2014-08-02 12:41:06",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 213743,
        "Title": "Popular questions in a tag",
        "Description": null,
        "QueryBody": "DECLARE  @t DATETIME = GETDATE(); -- today\nDECLARE @f CHAR(5) = '#,###';    -- format string\n\nSELECT TOP ##Limit:int?100##\n  q.Id AS [Post Link],\n  FORMAT(q.CreationDate, 'yyyy-MM-dd', 'en-US') AS [CreationDate],\n  DATEDIFF(month, q.CreationDate, @t) AS [Months],\n  FORMAT(q.Score, @f) AS [Score],\n  -- This is just an approximation, upvotes will give more accurate indicator\n  q.Score \/ DATEDIFF(month, q.CreationDate, @t) AS [Score\/Month],\n  FORMAT(ViewCount, @f) AS [Views],\n  FORMAT(ViewCount \/ DATEDIFF(month, q.CreationDate, @t), @f) AS [Views\/Month]\nFROM Posts q\n  INNER JOIN PostTags pt ON q.Id = pt.PostId\n  INNER JOIN Tags t ON pt.TagId = t.Id\nWHERE q.PostTypeId = 1 -- questions\n  AND t.TagName = ##Tag:string?git##\nORDER BY ViewCount \/ DATEDIFF(month, q.CreationDate, @t) DESC",
        "CreationDate": "2014-08-02 22:25:09",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 215414,
        "Title": "Scores for questions I have downvoted",
        "Description": null,
        "QueryBody": "DECLARE  @UserId int = ##UserId##\n\nSELECT TOP 20\n    Posts.Score,\n    Posts.Id AS [Post Link]\nFROM\n    Posts, PostFeedback\nWHERE\n        --Votes.UserId = @UserId\n    --AND\n        PostFeedback.VoteTypeId = 3\n    AND\n        Posts.Id = PostFeedback.PostId\nORDER BY \n    Posts.Score ASC",
        "CreationDate": "2014-08-06 16:22:15",
        "validated": false,
        "QueryBody_Original": "DECLARE  @UserId int = ##UserId##\n\nSELECT TOP 20\n    Posts.Score,\n    Posts.Id AS [Post Link]\nFROM\n    Posts, PostFeedback\nWHERE\n        --Votes.UserId = @UserId\n    --AND\n        PostFeedback.VoteTypeId = 3\n    AND\n        Posts.Id = PostFeedback.PostId\nORDER BY \n    Posts.Score ASC"
    },
    {
        "QuerySetId": 215421,
        "Title": "Users with a Website or AboutMe IDs 1341839 to 1635305",
        "Description": null,
        "QueryBody": "SELECT  * \nSELECT COUNT(ID)\nFROM Users\nWHERE (LEN(WebsiteUrl)>0 OR LEN(AboutMe)>0) AND ID>=1341839 AND ID<1635305\n--ORDER BY ID",
        "CreationDate": "2017-10-20 01:34:46",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 215422,
        "Title": "Users with a Website or AboutMe IDs 1055928 to 1341838",
        "Description": null,
        "QueryBody": "SELECT  * \nSELECT COUNT(ID)\nFROM Users\nWHERE (LEN(WebsiteUrl)>0 OR LEN(AboutMe)>0) AND ID>=1055928 AND ID<1341838\n--ORDER BY ID",
        "CreationDate": "2017-10-20 01:29:36",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 215426,
        "Title": "Users with a Website or AboutMe IDs 1635306 to 1958128",
        "Description": null,
        "QueryBody": "SELECT  * \nSELECT COUNT(ID)\nFROM Users\nWHERE (LEN(WebsiteUrl)>0 OR LEN(AboutMe)>0) AND ID>=1635306 AND ID<1958128\n--ORDER BY ID",
        "CreationDate": "2017-10-20 01:38:33",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 215429,
        "Title": "Users with a Website or AboutMe IDs 1958129 to 2321455",
        "Description": null,
        "QueryBody": "SELECT  * \nSELECT COUNT(ID)\nFROM Users\nWHERE (LEN(WebsiteUrl)>0 OR LEN(AboutMe)>0) AND ID>=1958129 AND ID<2321455\n--ORDER BY ID",
        "CreationDate": "2017-10-20 01:42:01",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 215436,
        "Title": "Users with a Website or AboutMe IDs 2321456 to 2714952",
        "Description": null,
        "QueryBody": "SELECT  * \nSELECT COUNT(ID)\nFROM Users\nWHERE (LEN(WebsiteUrl)>0 OR LEN(AboutMe)>0) AND ID>=2321456 AND ID<2714952\n--ORDER BY ID",
        "CreationDate": "2017-10-20 01:45:08",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 215438,
        "Title": "Users with a Website or AboutMe IDs 2714953 to 3121510",
        "Description": null,
        "QueryBody": "SELECT  * \nSELECT COUNT(ID)\nFROM Users\nWHERE (LEN(WebsiteUrl)>0 OR LEN(AboutMe)>0) AND ID>=2714953 AND ID<3121510\n--ORDER BY ID",
        "CreationDate": "2017-10-20 01:59:30",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 215439,
        "Title": "Users with a Website or AboutMe IDs 3121511 to 3484700",
        "Description": null,
        "QueryBody": "SELECT  * \nSELECT COUNT(ID)\nFROM Users\nWHERE (LEN(WebsiteUrl)>0 OR LEN(AboutMe)>0) AND ID>=3121511 AND ID<3484700\n--ORDER BY ID",
        "CreationDate": "2017-10-20 03:03:14",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 215441,
        "Title": "Users with a Website or AboutMe IDs 3484701 to 3869473",
        "Description": null,
        "QueryBody": "SELECT  * \nSELECT COUNT(ID)\nFROM Users\nWHERE (LEN(WebsiteUrl)>0 OR LEN(AboutMe)>0) AND ID>=3484701 AND ID<3869473\n--ORDER BY ID",
        "CreationDate": "2017-10-20 03:07:47",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 215855,
        "Title": "Number of users with privileges for X reputation",
        "Description": null,
        "QueryBody": "SELECT  FORMAT(COUNT(*), '#,###') AS [Count]\nFROM Users\nWHERE Reputation >= ##MinRep:int##",
        "CreationDate": "2014-08-07 22:59:15",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 215870,
        "Title": "Evolution of the up-\/downvote ratio grouped by month",
        "Description": "Look at the Graph, to see the evolution of the upvote\/downvote ratio.",
        "QueryBody": "DECLARE  @site_start_date DateTime =\n  (SELECT TOP 1 Convert(Date, CreationDate) FROM POSTS WHERE Posts.Id = 1);\n\nSELECT\nDatePart(YEAR, CreationDate) * 100 + DatePart(MONTH, CreationDate),\n(CAST(SUM(CASE WHEN VoteTypeId = 2 THEN 1 ELSE 0 END) AS float) \/ nullif(CAST(SUM(CASE WHEN VoteTypeId = 3 THEN 1 ELSE 0 END) AS float),0)) AS Ratio\nFROM Votes\nWHERE Votes.CreationDate >= @site_start_date\nGROUP BY DatePart(YEAR, CreationDate) * 100 + DatePart(MONTH, CreationDate)\nORDER BY DatePart(YEAR, CreationDate) * 100 + DatePart(MONTH, CreationDate)",
        "CreationDate": "2015-01-05 04:36:28",
        "validated": false,
        "QueryBody_Original": "DECLARE  @site_start_date DateTime =\n  (SELECT TOP 1 Convert(Date, CreationDate) FROM POSTS WHERE Posts.Id = 1);\n\nSELECT\nDatePart(YEAR, CreationDate) * 100 + DatePart(MONTH, CreationDate),\n(CAST(SUM(CASE WHEN VoteTypeId = 2 THEN 1 ELSE 0 END) AS float) \/ nullif(CAST(SUM(CASE WHEN VoteTypeId = 3 THEN 1 ELSE 0 END) AS float),0)) AS Ratio\nFROM Votes\nWHERE Votes.CreationDate >= @site_start_date\nGROUP BY DatePart(YEAR, CreationDate) * 100 + DatePart(MONTH, CreationDate)\nORDER BY DatePart(YEAR, CreationDate) * 100 + DatePart(MONTH, CreationDate)"
    },
    {
        "QuerySetId": 215896,
        "Title": "Git Answers with Score of 0 for Given Users",
        "Description": null,
        "QueryBody": "SELECT \n  u.DisplayName AS [User],\n  FORMAT(a.CreationDate, 'd', 'en-US') AS [Date],\n  a.Id AS [Post Link] \nFROM Posts q\n  INNER JOIN Posts a ON q.Id = a.ParentID\n  INNER JOIN PostTags pt ON q.Id = pt.PostId\n  INNER JOIN Tags t ON pt.TagId = t.Id\n  INNER JOIN Users u ON u.Id = a.OwnerUserId\nWHERE t.TagName = ##Tag:string?git##\n  AND u.Id IN (\n    6309,   -- VonC\n    1256452 -- torek\n  )\n  AND q.Score = 0\nORDER BY [User], a.CreationDate DESC",
        "CreationDate": "2014-08-08 00:52:18",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 216144,
        "Title": "Find people with the word 'English' in their profile",
        "Description": null,
        "QueryBody": "WITH  typical spam keywords in \"about me\" field\n\nSELECT id AS [User Link], AboutMe\n  FROM Users\n WHERE AboutMe LIKE '%English%'",
        "CreationDate": "2014-08-08 23:49:54",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 217094,
        "Title": "How many of my answers involve the use of `itertools`?",
        "Description": null,
        "QueryBody": "SELECT \n   count(id)\nfrom Posts\nwhere \n  PostTypeId = 2 and \n  (Body like '%itertools%') and \n  OwnerUserId = ##UserId##",
        "CreationDate": "2014-08-12 14:30:48",
        "validated": false,
        "QueryBody_Original": "SELECT \n   count(id)\nfrom Posts\nwhere \n  PostTypeId = 2 and \n  (Body like '%itertools%') and \n  OwnerUserId = ##UserId##"
    },
    {
        "QuerySetId": 217261,
        "Title": "How much reputation do I have for each tag?",
        "Description": null,
        "QueryBody": "DECLARE  @UserId int = ##UserId##\n\nSELECT\n    *,\n    (VoteTable.UpVotes * (CASE VoteTable.PostType WHEN 1 THEN 5 ELSE 10 END) - VoteTable.DownVotes * 2) AS Reputation\nFROM\n(\n    SELECT\n        TagName,\n        Posts.PostTypeId AS PostType,\n        SUM(CASE VoteTypeId WHEN 2 THEN 1 ELSE 0 END) AS UpVotes,\n        SUM(CASE VoteTypeId WHEN 3 THEN 1 ELSE 0 END) AS DownVotes\n    FROM Posts\n        INNER JOIN PostTags ON (PostTags.PostId = Posts.ParentId OR PostTags.PostId = Posts.Id)\n        INNER JOIN Tags ON Tags.Id = PostTags.TagId\n        INNER JOIN Votes ON Votes.PostId = Posts.Id\n    WHERE\n        Posts.OwnerUserId = @UserId\n    GROUP BY TagName, Posts.PostTypeId\n) VoteTable\nORDER BY Reputation DESC",
        "CreationDate": "2014-08-13 01:03:50",
        "validated": false,
        "QueryBody_Original": "DECLARE  @UserId int = ##UserId##\n\nSELECT\n    *,\n    (VoteTable.UpVotes * (CASE VoteTable.PostType WHEN 1 THEN 5 ELSE 10 END) - VoteTable.DownVotes * 2) AS Reputation\nFROM\n(\n    SELECT\n        TagName,\n        Posts.PostTypeId AS PostType,\n        SUM(CASE VoteTypeId WHEN 2 THEN 1 ELSE 0 END) AS UpVotes,\n        SUM(CASE VoteTypeId WHEN 3 THEN 1 ELSE 0 END) AS DownVotes\n    FROM Posts\n        INNER JOIN PostTags ON (PostTags.PostId = Posts.ParentId OR PostTags.PostId = Posts.Id)\n        INNER JOIN Tags ON Tags.Id = PostTags.TagId\n        INNER JOIN Votes ON Votes.PostId = Posts.Id\n    WHERE\n        Posts.OwnerUserId = @UserId\n    GROUP BY TagName, Posts.PostTypeId\n) VoteTable\nORDER BY Reputation DESC"
    },
    {
        "QuerySetId": 217817,
        "Title": "Total Answers for User X",
        "Description": null,
        "QueryBody": "SELECT  COUNT(*)\nFROM Posts\nWHERE PostTypeId = 2 AND OwnerUserId = ##UserId:int##",
        "CreationDate": "2014-08-15 09:24:14",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 217890,
        "Title": "Question view vs question age",
        "Description": null,
        "QueryBody": "SELECT \nDATEDIFF(d,CreationDate,GETDATE()) AS 'Question Age',\nViewCount AS 'Question Views'\nFROM\nPosts\nWHERE\nPostTypeId=1\nAND\nViewCount>##ViewCountLowerCutoff?1000##\nAND\nViewCount<##ViewCountUpperCutoff?1000000##\n\nORDER BY\nCreationDate",
        "CreationDate": "2014-08-15 16:07:11",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 218069,
        "Title": "Stats for My Suggested Edits",
        "Description": "Returns\r\n- Number of approved edits\r\n- Number of rejected edits\r\n- Approved\/total ratio\r\n- Rejected\/total ratio\r\n- Total number of edits",
        "QueryBody": "DECLARE  @UserId int = ##UserId##\n\nSELECT COUNT(ApprovalDate) AS \"Approved Edits\",\nCOUNT(RejectionDate) AS \"Rejected Edits\", \nCONVERT(DECIMAL(2,2),(COUNT(ApprovalDate) * 1.0) \/ COUNT(1)) AS \"Approval Ratio\",\nCONVERT(DECIMAL(2,2),(COUNT(RejectionDate) * 1.0) \/ COUNT(1)) AS \"Rejection Ratio\",\nCOUNT(1) AS \"Total Edits\"\nFROM SuggestedEdits\nWHERE OwnerUserId = @UserId",
        "CreationDate": "2014-08-15 22:16:51",
        "validated": false,
        "QueryBody_Original": "DECLARE  @UserId int = ##UserId##\n\nSELECT COUNT(ApprovalDate) AS \"Approved Edits\",\nCOUNT(RejectionDate) AS \"Rejected Edits\", \nCONVERT(DECIMAL(2,2),(COUNT(ApprovalDate) * 1.0) \/ COUNT(1)) AS \"Approval Ratio\",\nCONVERT(DECIMAL(2,2),(COUNT(RejectionDate) * 1.0) \/ COUNT(1)) AS \"Rejection Ratio\",\nCOUNT(1) AS \"Total Edits\"\nFROM SuggestedEdits\nWHERE OwnerUserId = @UserId"
    },
    {
        "QuerySetId": 218515,
        "Title": "JavaScript frameworks questions against answers",
        "Description": null,
        "QueryBody": "DECLARE  @TagName varchar(128) = '%##TagName##%'\n\n    SELECT COUNT(*) from Posts P\n    WHERE P.Id IN (\n      SELECT DISTINCT(PostId) from PostTags \n      WHERE PostTags.TagId In (\n        SELECT Id From Tags Where TagName LIKE @TagName\n      )\n    )\n\n    SELECT COUNT(*) from Posts P\n    WHERE P.Id IN (\n      SELECT DISTINCT(PostId) from PostTags \n      WHERE PostTags.TagId In (\n        SELECT Id From Tags Where TagName LIKE @TagName\n      )\n    ) AND P.AcceptedAnswerId IS NOT NULL\n\n    SELECT SUM(P.AnswerCount) from Posts P\n    WHERE P.Id IN (\n      SELECT DISTINCT(PostId) from PostTags \n      WHERE PostTags.TagId In (\n        SELECT Id From Tags Where TagName LIKE @TagName\n      )\n    )",
        "CreationDate": "2014-08-17 19:31:08",
        "validated": false,
        "QueryBody_Original": "DECLARE  @TagName varchar(128) = '%##TagName##%'\n\n    SELECT COUNT(*) from Posts P\n    WHERE P.Id IN (\n      SELECT DISTINCT(PostId) from PostTags \n      WHERE PostTags.TagId In (\n        SELECT Id From Tags Where TagName LIKE @TagName\n      )\n    )\n\n    SELECT COUNT(*) from Posts P\n    WHERE P.Id IN (\n      SELECT DISTINCT(PostId) from PostTags \n      WHERE PostTags.TagId In (\n        SELECT Id From Tags Where TagName LIKE @TagName\n      )\n    ) AND P.AcceptedAnswerId IS NOT NULL\n\n    SELECT SUM(P.AnswerCount) from Posts P\n    WHERE P.Id IN (\n      SELECT DISTINCT(PostId) from PostTags \n      WHERE PostTags.TagId In (\n        SELECT Id From Tags Where TagName LIKE @TagName\n      )\n    )"
    },
    {
        "QuerySetId": 218545,
        "Title": "Positive, Zero, and Negative Scored Answers",
        "Description": null,
        "QueryBody": "DECLARE  @positive int = (SELECT COUNT(*) FROM Posts WHERE Score > 0)\nDECLARE @zero     int = (SELECT COUNT(*) FROM Posts WHERE Score = 0)\nDECLARE @negative int = (SELECT COUNT(*) FROM Posts WHERE Score < 0)\nDECLARE @total    int = (SELECT COUNT(*) FROM Posts)\n\nSELECT\n  FORMAT(@positive, '#,###') AS Positive,\n  CAST(@positive AS decimal) \/ @total,\n  FORMAT(@zero, '#,###')     AS Zero,\n  CAST(@zero AS decimal)     \/ @total,\n  FORMAT(@negative, '#,###') AS Negative,\n  CAST(@negative AS decimal) \/ @total,\n  FORMAT(@total, '#,###')    AS Total",
        "CreationDate": "2014-08-18 00:33:27",
        "validated": false,
        "QueryBody_Original": "DECLARE  @positive int = (SELECT COUNT(*) FROM Posts WHERE Score > 0)\nDECLARE @zero     int = (SELECT COUNT(*) FROM Posts WHERE Score = 0)\nDECLARE @negative int = (SELECT COUNT(*) FROM Posts WHERE Score < 0)\nDECLARE @total    int = (SELECT COUNT(*) FROM Posts)\n\nSELECT\n  FORMAT(@positive, '#,###') AS Positive,\n  CAST(@positive AS decimal) \/ @total,\n  FORMAT(@zero, '#,###')     AS Zero,\n  CAST(@zero AS decimal)     \/ @total,\n  FORMAT(@negative, '#,###') AS Negative,\n  CAST(@negative AS decimal) \/ @total,\n  FORMAT(@total, '#,###')    AS Total"
    },
    {
        "QuerySetId": 219017,
        "Title": "Who comments on my posts?",
        "Description": null,
        "QueryBody": "SELECT  c.userId as [User Link],\n  count(c.postId) as [Comment Count],\n  count(distinct c.postId) as [Post Count]\nfrom Comments c\njoin Posts p on c.postId = p.Id\nwhere p.ownerUserId = ##UserId##\nand c.userId <> ##UserId##\ngroup by c.userId\norder by count(distinct c.postId) desc, count(c.postId) desc",
        "CreationDate": "2014-08-19 22:27:19",
        "validated": false,
        "QueryBody_Original": "SELECT  c.userId as [User Link],\n  count(c.postId) as [Comment Count],\n  count(distinct c.postId) as [Post Count]\nfrom Comments c\njoin Posts p on c.postId = p.Id\nwhere p.ownerUserId = ##UserId##\nand c.userId <> ##UserId##\ngroup by c.userId\norder by count(distinct c.postId) desc, count(c.postId) desc"
    },
    {
        "QuerySetId": 219023,
        "Title": "Who comments on the same posts as me?",
        "Description": null,
        "QueryBody": "SELECT  UserId [User Link],\n  count(postId) as [Comment Count],\n  count(distinct postId) [Post Count]\nfrom comments\nwhere postId in (\n  SELECT distinct postId\n  from comments\n  where userId = ##UserId##)\nand UserId <> ##UserId##\ngroup by userId\norder by count(distinct postId) desc, count(postId) desc",
        "CreationDate": "2014-08-19 22:25:23",
        "validated": false,
        "QueryBody_Original": "SELECT  UserId [User Link],\n  count(postId) as [Comment Count],\n  count(distinct postId) [Post Count]\nfrom comments\nwhere postId in (\n  SELECT distinct postId\n  from comments\n  where userId = ##UserId##)\nand UserId <> ##UserId##\ngroup by userId\norder by count(distinct postId) desc, count(postId) desc"
    },
    {
        "QuerySetId": 219112,
        "Title": "Questions and answers this week",
        "Description": null,
        "QueryBody": "DECLARE  @lastWeek DATETIME = DATEADD(day,-7, GETDATE());\n\nSELECT\n(\n    SELECT COUNT(*)\n    FROM Posts\n    WHERE PostTypeId = 1 AND\n          CreationDate >= @lastWeek\n) AS [Number of Questions],\n(\n    SELECT COUNT(*)\n    FROM Posts\n    WHERE PostTypeId = 2 AND\n          CreationDate >= @lastWeek\n) AS [Number of Answers],\n(\n    SELECT COUNT(*)\n    FROM Votes\n    WHERE VoteTypeId = 2 AND -- Upvotes\n          CreationDate >= @lastWeek\n) AS [Number of Upvotes]",
        "CreationDate": "2014-08-20 05:35:30",
        "validated": false,
        "QueryBody_Original": "DECLARE  @lastWeek DATETIME = DATEADD(day,-7, GETDATE());\n\nSELECT\n(\n    SELECT COUNT(*)\n    FROM Posts\n    WHERE PostTypeId = 1 AND\n          CreationDate >= @lastWeek\n) AS [Number of Questions],\n(\n    SELECT COUNT(*)\n    FROM Posts\n    WHERE PostTypeId = 2 AND\n          CreationDate >= @lastWeek\n) AS [Number of Answers],\n(\n    SELECT COUNT(*)\n    FROM Votes\n    WHERE VoteTypeId = 2 AND -- Upvotes\n          CreationDate >= @lastWeek\n) AS [Number of Upvotes]"
    },
    {
        "QuerySetId": 219147,
        "Title": "\"Missing\" Reputation for a User",
        "Description": null,
        "QueryBody": "SELECT \n  p.PostTypeId,\n  v.VoteTypeId,\n  COUNT(*) AS [Count],\n  CASE\n    WHEN p.PostTypeId = 1 AND v.VoteTypeId = 2 THEN COUNT(*) * 5\n    WHEN p.PostTypeId = 1 AND v.VoteTypeId = 3 THEN COUNT(*) * -2\n    WHEN p.PostTypeId = 2 AND v.VoteTypeId = 1 THEN COUNT(*) * 15\n    WHEN p.PostTypeId = 2 AND v.VoteTypeId = 2 THEN COUNT(*) * 10\n    WHEN p.PostTypeId = 2 AND v.VoteTypeId = 3 THEN COUNT(*) * -2\n  END AS Reputation\nFROM Posts p INNER JOIN Votes v ON p.Id = v.PostId\nWHERE p.OwnerUserId = ##UserId:int##\n  AND p.PostTypeId IN (1,2)\n  AND v.VoteTypeId IN (1,2,3)\nGROUP BY \n  p.PostTypeId,\n  v.VoteTypeId\nORDER BY\n  p.PostTypeId,\n  v.VoteTypeId\n  \nSELECT COUNT(*) AS [Count], COUNT(*) * 2 AS Repuation\nFROM SuggestedEdits\nWHERE OwnerUserId = ##UserId:int##\n  AND ApprovalDate IS NOT NULL",
        "CreationDate": "2014-08-20 07:50:42",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 219166,
        "Title": "Badge progress for Curious, Inquisitive, and Socratic",
        "Description": "For users interested in their badge progress.",
        "QueryBody": "SELECT \ncase when days >= 5 then 'Yes' else concat(days, '\/', 5) end as Curious,\ncase when days >= 30 then 'Yes' else concat(days, '\/', 30) end as Inquisitive,\ncase when days >= 100 then 'Yes' else concat(days, '\/', 100) end as Socratic\nfrom (SELECT count(*) as days\nfrom (SELECT\ndatediff(d, creationdate, getdate()) as creationDay,\n  sum(case when score > 0 and closeddate is  null  then 1 else 0 end) as up,\n  sum(case when score < 1 or closeddate is not null then 1 else 0 end) as down\nfrom Posts\nwhere OwnerUserId = ##UserId##\nand PostTypeId = 1\ngroup by datediff(d, creationdate, getdate())\n) x\nwhere up > 0 and down = 0\n) y",
        "CreationDate": "2015-01-29 22:24:25",
        "validated": false,
        "QueryBody_Original": "SELECT \ncase when days >= 5 then 'Yes' else concat(days, '\/', 5) end as Curious,\ncase when days >= 30 then 'Yes' else concat(days, '\/', 30) end as Inquisitive,\ncase when days >= 100 then 'Yes' else concat(days, '\/', 100) end as Socratic\nfrom (SELECT count(*) as days\nfrom (SELECT\ndatediff(d, creationdate, getdate()) as creationDay,\n  sum(case when score > 0 and closeddate is  null  then 1 else 0 end) as up,\n  sum(case when score < 1 or closeddate is not null then 1 else 0 end) as down\nfrom Posts\nwhere OwnerUserId = ##UserId##\nand PostTypeId = 1\ngroup by datediff(d, creationdate, getdate())\n) x\nwhere up > 0 and down = 0\n) y"
    },
    {
        "QuerySetId": 219242,
        "Title": "Account Age Distribution for 10k+ Users",
        "Description": null,
        "QueryBody": "SELECT \n  DATEDIFF(month, CreationDate, GETDATE()) AS Age,\n  COUNT(*) AS [Count]\nFROM Users\nWHERE Reputation >= 10000\n  AND DATEDIFF(month, CreationDate, GETDATE()) <= ##MaxAge:int?120##\nGROUP BY DATEDIFF(month, CreationDate, GETDATE())\nORDER BY Age",
        "CreationDate": "2014-08-20 13:15:26",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 219260,
        "Title": "Vote statistics per answer to question",
        "Description": null,
        "QueryBody": "SELECT  Body, CreationDate, Score from Posts\n--  where ParentId = 12760  -- Converting string to lower case\n--  order by CreationDate\n\n\n\nSELECT P.Id,\n    -- P.CreationDate,\n       P.Score\n    -- V.Id,\n    -- V.CreationDate,\n    -- V.VoteTypeId,\n    -- VT.Name\n    from Posts as P\n--  from Votes as V inner join Posts     as P  on PostId = P.Id\n--                  inner join VoteTypes as VT on VoteTypeId = VT.Id\n  where P.ParentId = ##PostId?12760##\n--  and (VoteTypeId = 2 or VoteTypeId = 3)\n  order by P.CreationDate",
        "CreationDate": "2014-08-20 13:12:25",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 219261,
        "Title": "New Users Who Reached 10k+ Reputation",
        "Description": null,
        "QueryBody": "SELECT \n  Id AS [User Link],\n  DATEDIFF(month, CreationDate, GETDATE()) AS Age,\n  FORMAT(Reputation, '#,###') AS Reputation\nFROM Users\nWHERE Reputation >= 10000\n  AND DATEDIFF(month, CreationDate, GETDATE()) <= ##MaxAge:int?18##\nORDER BY Age, Reputation",
        "CreationDate": "2014-08-20 13:19:00",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 219460,
        "Title": "Badge progress for curious, inquisitive, and Socratic",
        "Description": "For users interested in their badge progress.",
        "QueryBody": "SELECT \ncase when days >= 5 then 'Yes' else concat(days, '\/', 5) end as Curious,\ncase when days >= 30 then 'Yes' else concat(days, '\/', 30) end as Inquisitive,\ncase when days >= 100 then 'Yes' else concat(days, '\/', 100) end as Socratic\nfrom (SELECT count(*) as days\nfrom (SELECT\ndatediff(d, creationdate, getdate()) as creationDay,\n  sum(case when score > 0 and closeddate is  null  then 1 else 0 end) as up,\n  sum(case when score < 1 or closeddate is not null then 1 else 0 end) as down\nfrom Posts\nwhere OwnerUserId = ##UserId##\nand PostTypeId = 1\ngroup by datediff(d, creationdate, getdate())\n) x\nwhere up > 0 and down = 0\n) y",
        "CreationDate": "2015-01-29 22:25:56",
        "validated": false,
        "QueryBody_Original": "SELECT \ncase when days >= 5 then 'Yes' else concat(days, '\/', 5) end as Curious,\ncase when days >= 30 then 'Yes' else concat(days, '\/', 30) end as Inquisitive,\ncase when days >= 100 then 'Yes' else concat(days, '\/', 100) end as Socratic\nfrom (SELECT count(*) as days\nfrom (SELECT\ndatediff(d, creationdate, getdate()) as creationDay,\n  sum(case when score > 0 and closeddate is  null  then 1 else 0 end) as up,\n  sum(case when score < 1 or closeddate is not null then 1 else 0 end) as down\nfrom Posts\nwhere OwnerUserId = ##UserId##\nand PostTypeId = 1\ngroup by datediff(d, creationdate, getdate())\n) x\nwhere up > 0 and down = 0\n) y"
    },
    {
        "QuerySetId": 219467,
        "Title": "Who Votes to Close, Reopen, Delete, Undelete the Most?",
        "Description": null,
        "QueryBody": "SELECT  v.*\nFROM Users u INNER JOIN Votes v ON u.Id = v.UserId\nWHERE u.Id = ##UserId:int##\n  AND v.VoteTypeId IN (6,7,10,11)\nORDER BY v.VoteTypeId",
        "CreationDate": "2014-08-21 01:26:32",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 219685,
        "Title": "Respostas de um usu\u00e1rio deletado",
        "Description": "Para ver as pergunta, troque o PostTypeId para 1. Para ver tudo, remova-o.",
        "QueryBody": "SELECT  CreationDate, Id as [Post Link] FROM Posts p WHERE OwnerDisplayName = ##NomeDoUsuario:string##\nAND PostTypeId = 2 ORDER BY CreationDate ASC",
        "CreationDate": "2014-08-21 21:07:14",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 219733,
        "Title": "Users with tags (in progress)",
        "Description": "Developing a query to find C# developers in PA.",
        "QueryBody": "DECLARE  @UserId int = 556614 \/* 41747 1024586 *\/\n\nselect  t.tagname\nfrom tags t \ninner join posttags pt on pt.tagid = t.id\ninner join posts on pt.postid = posts.id\nleft outer join posts a on a.parentid = posts.id\nwhere posts.owneruserid = @UserId\nor a.owneruserid = @UserId\n\n\/*\nselect * from PostHistory where UserId = @UserId;\nselect * from Posts where OwnerUserId = @UserId;\nselect * from Votes where UserId = @UserId;\n\nwhere Posts.ownerUserId = @userId\n\nselect q.id as [Post Link],\n'http:\/\/stackoverflow.com\/a\/' + CAST(a.id as nvarchar) as [Answer Link]\nFROM posts q \n       INNER JOIN posts a \n               ON a.parentid = q.id \n                  AND a.owneruserid = q.owneruserid\n                 \/ * AND a.id <> q.AcceptedAnswerId * \/\nwhere a.OwnerUserId = @UserId\n*\/",
        "CreationDate": "2014-08-21 22:59:04",
        "validated": false,
        "QueryBody_Original": "DECLARE  @UserId int = 556614 \/* 41747 1024586 *\/\n\nselect  t.tagname\nfrom tags t \ninner join posttags pt on pt.tagid = t.id\ninner join posts on pt.postid = posts.id\nleft outer join posts a on a.parentid = posts.id\nwhere posts.owneruserid = @UserId\nor a.owneruserid = @UserId\n\n\/*\nselect * from PostHistory where UserId = @UserId;\nselect * from Posts where OwnerUserId = @UserId;\nselect * from Votes where UserId = @UserId;\n\nwhere Posts.ownerUserId = @userId\n\nselect q.id as [Post Link],\n'http:\/\/stackoverflow.com\/a\/' + CAST(a.id as nvarchar) as [Answer Link]\nFROM posts q \n       INNER JOIN posts a \n               ON a.parentid = q.id \n                  AND a.owneruserid = q.owneruserid\n                 \/ * AND a.id <> q.AcceptedAnswerId * \/\nwhere a.OwnerUserId = @UserId\n*\/"
    },
    {
        "QuerySetId": 219990,
        "Title": "Get size of database tables",
        "Description": null,
        "QueryBody": "SELECT  t.NAME AS TableName,\n       p.rows AS RowCounts,\n       SUM(a.total_pages) * 8.0  \/ 1024 \/ 1024 AS TotalSpaceGB\nINTO #tmp\nFROM sys.tables t\nINNER JOIN sys.indexes i ON t.OBJECT_ID = i.object_id\nINNER JOIN sys.partitions p ON i.object_id = p.OBJECT_ID AND i.index_id = p.index_id\nINNER JOIN sys.allocation_units a ON p.partition_id = a.container_id\nLEFT OUTER JOIN sys.schemas s ON t.schema_id = s.schema_id\nWHERE t.NAME NOT LIKE 'dt%' \n  AND t.is_ms_shipped = 0\n  AND i.OBJECT_ID > 255 \nGROUP BY t.Name, s.Name, p.Rows\nORDER BY s.Name, t.Name\n\nSELECT 'Total' AS TableName, \n       SUM(RowCounts) AS RowCounts, \n       SUM(TotalSpaceGB) AS TotalSpaceGB\nFROM #tmp\nUNION ALL\nSELECT '-----' AS TableName, \n       NULL AS RowCounts, \n       NULL AS TotalSpaceGB\nUNION ALL \nSELECT * FROM #tmp",
        "CreationDate": "2015-02-24 11:35:29",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 220389,
        "Title": "Worst question with tag x",
        "Description": null,
        "QueryBody": "SELECT  Count(Posts.Id) AS [New Questions]\nFROM Posts\n    INNER JOIN PostTags ON PostTags.PostId = Posts.id\n    INNER JOIN Tags ON PostTags.TagId = Tags.id\nWHERE Tags.TagName = ##Tag:string##\n    AND Posts.CreationDate > DateAdd(year, -1, getdate())",
        "CreationDate": "2017-03-27 18:51:51",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 220780,
        "Title": "\"Users who can't write good posts\" vs \"Users who want to write good posts\"",
        "Description": null,
        "QueryBody": "DECLARE  @BadgeCreationDate datetime = '2011-08-24',\n        @DaysNewUser int = 30\n\n-- Informed new users.\nselect u.Id\ninto #informed\nfrom (\n  select UserId, min(Date) as InformedDate\n  from Badges \n  where Name in ('Informed', 'Analytical')\n  group by UserId\n) b\ninner join Users u on b.UserId = u.Id\nwhere u.CreationDate > @BadgeCreationDate\n  and u.CreationDate + @DaysNewUser < b.InformedDate\n  \n-- New authors.\nselect p.OwnerUserId as Id, sum(p.Score) as score, count(p.OwnerUserId) as posts\ninto #newauthors\nfrom Posts p\ninner join Users u on u.Id = p.OwnerUserId\nwhere u.CreationDate > @BadgeCreationDate\n  and u.CreationDate + @DaysNewUser < p.CreationDate\ngroup by OwnerUserId",
        "CreationDate": "2014-08-26 18:57:00",
        "validated": false,
        "QueryBody_Original": "DECLARE  @BadgeCreationDate datetime = '2011-08-24',\n        @DaysNewUser int = 30\n\n-- Informed new users.\nselect u.Id\ninto #informed\nfrom (\n  select UserId, min(Date) as InformedDate\n  from Badges \n  where Name in ('Informed', 'Analytical')\n  group by UserId\n) b\ninner join Users u on b.UserId = u.Id\nwhere u.CreationDate > @BadgeCreationDate\n  and u.CreationDate + @DaysNewUser < b.InformedDate\n  \n-- New authors.\nselect p.OwnerUserId as Id, sum(p.Score) as score, count(p.OwnerUserId) as posts\ninto #newauthors\nfrom Posts p\ninner join Users u on u.Id = p.OwnerUserId\nwhere u.CreationDate > @BadgeCreationDate\n  and u.CreationDate + @DaysNewUser < p.CreationDate\ngroup by OwnerUserId"
    },
    {
        "QuerySetId": 220842,
        "Title": "Grafico quantidade de posts ",
        "Description": null,
        "QueryBody": "SELECT  \nCONVERT(DATETIME, CONCAT(YEAR(CreationDate), '-', MONTH(CreationDate), '-01'), 20) AS Mes,\nCOUNT(*) AS 'Total Perguntas no m\u00eas',\nSUM (CASE WHEN PostTypeId = 1 THEN 1 ELSE 0 END) AS 'Perguntas', \nSUM (CASE WHEN PostTypeId = 2 THEN 1 ELSE 0 END) AS 'Respostas'\nFROM Posts\nGROUP BY YEAR(CreationDate), MONTH(CreationDate)\nORDER BY YEAR(CreationDate), MONTH(CreationDate)\n\nSELECT \nCONVERT(DATETIME, CONCAT(YEAR(CreationDate), '-', MONTH(CreationDate), '-01'), 20) AS Mes,\nCOUNT(*) AS 'Total votos no m\u00eas',\nSUM (CASE WHEN VoteTypeId = 2 THEN 1 ELSE 0 END) AS 'Up', \nSUM (CASE WHEN VoteTypeId = 3 THEN 1 ELSE 0 END) AS 'Down'\nFROM Votes \nWHERE VoteTypeId IN(2,3) -- Up, Down\nGROUP BY YEAR(CreationDate), MONTH(CreationDate)\nORDER BY YEAR(CreationDate), MONTH(CreationDate)",
        "CreationDate": "2014-08-27 02:32:37",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 220955,
        "Title": "Search comments between given dates",
        "Description": null,
        "QueryBody": "DECLARE  @StartDate date = '##StartDate##';\nDECLARE @EndDate date = '##EndDate##';\n\nSELECT \n  PostId AS [Post Link],\n  Id AS [Comment Link],\n  UserId AS [User Link],\n  Cast (CreationDate as Date)\nFROM\n  Comments\nWHERE\n  (Lower(Text) LIKE Lower('%##SearchString##%')) \n  AND Cast(CreationDate as Date) Between @StartDate and @EndDate\nORDER  BY CreationDate DESC",
        "CreationDate": "2014-08-27 16:31:25",
        "validated": false,
        "QueryBody_Original": "DECLARE  @StartDate date = '##StartDate##';\nDECLARE @EndDate date = '##EndDate##';\n\nSELECT \n  PostId AS [Post Link],\n  Id AS [Comment Link],\n  UserId AS [User Link],\n  Cast (CreationDate as Date)\nFROM\n  Comments\nWHERE\n  (Lower(Text) LIKE Lower('%##SearchString##%')) \n  AND Cast(CreationDate as Date) Between @StartDate and @EndDate\nORDER  BY CreationDate DESC"
    },
    {
        "QuerySetId": 221111,
        "Title": "Avg time in hours between Q posted and accepted A posted",
        "Description": null,
        "QueryBody": "DECLARE  @FromDate datetime = '20110101'\nDECLARE @ToDate datetime = '20150101'\n\nselect avg(datediff(hour, Q.CreationDate, A.CreationDate)) AllTags,\n       avg(case when Q.tags like '%sql-server%' then datediff(hour, Q.CreationDate, A.CreationDate) end) as SQLServer,\n       avg(case when Q.tags like '%oracle%' then datediff(hour, Q.CreationDate, A.CreationDate) end) as Oracle,\n       avg(case when Q.tags like '%mysql%' then datediff(hour, Q.CreationDate, A.CreationDate) end) as MySQL,\n       avg(case when Q.tags like '%postgresql%' then datediff(hour, Q.CreationDate, A.CreationDate) end) as PostgreSQL\nfrom Posts as Q\n  inner join Posts as A\n    on A.Id = Q.AcceptedAnswerId\nwhere Q.CreationDate >= @FromDate and                    \n      Q.CreationDate < @ToDate",
        "CreationDate": "2014-08-28 10:18:55",
        "validated": false,
        "QueryBody_Original": "DECLARE  @FromDate datetime = '20110101'\nDECLARE @ToDate datetime = '20150101'\n\nselect avg(datediff(hour, Q.CreationDate, A.CreationDate)) AllTags,\n       avg(case when Q.tags like '%sql-server%' then datediff(hour, Q.CreationDate, A.CreationDate) end) as SQLServer,\n       avg(case when Q.tags like '%oracle%' then datediff(hour, Q.CreationDate, A.CreationDate) end) as Oracle,\n       avg(case when Q.tags like '%mysql%' then datediff(hour, Q.CreationDate, A.CreationDate) end) as MySQL,\n       avg(case when Q.tags like '%postgresql%' then datediff(hour, Q.CreationDate, A.CreationDate) end) as PostgreSQL\nfrom Posts as Q\n  inner join Posts as A\n    on A.Id = Q.AcceptedAnswerId\nwhere Q.CreationDate >= @FromDate and                    \n      Q.CreationDate < @ToDate"
    },
    {
        "QuerySetId": 221170,
        "Title": "Mean time in minutes between Q posted and accepted A posted",
        "Description": null,
        "QueryBody": "DECLARE  @FromDate datetime = '20110101'\nDECLARE @ToDate datetime = '20150101'\n\nselect distinct \n  T.TagName,\n  percentile_cont(0.5) within group (order by datediff(minute, Q.CreationDate, A.CreationDate)) over(partition by T.TagName) Minutes\nfrom Posts as Q\n  inner join Posts as A\n    on A.Id = Q.AcceptedAnswerId\n  inner join (values('sql-server'),('oracle'),('ssis'),('db2'),('mysql'),('postgresql'),('mongodb')) as T(TagName)\n    on Q.tags like '%'+T.TagName+'%'\nwhere Q.CreationDate >= @FromDate and                    \n      Q.CreationDate < @ToDate",
        "CreationDate": "2014-08-28 17:42:18",
        "validated": false,
        "QueryBody_Original": "DECLARE  @FromDate datetime = '20110101'\nDECLARE @ToDate datetime = '20150101'\n\nselect distinct \n  T.TagName,\n  percentile_cont(0.5) within group (order by datediff(minute, Q.CreationDate, A.CreationDate)) over(partition by T.TagName) Minutes\nfrom Posts as Q\n  inner join Posts as A\n    on A.Id = Q.AcceptedAnswerId\n  inner join (values('sql-server'),('oracle'),('ssis'),('db2'),('mysql'),('postgresql'),('mongodb')) as T(TagName)\n    on Q.tags like '%'+T.TagName+'%'\nwhere Q.CreationDate >= @FromDate and                    \n      Q.CreationDate < @ToDate"
    },
    {
        "QuerySetId": 221345,
        "Title": "Eligible answers for a top tag on the Careers page",
        "Description": "http:\/\/meta.stackexchange.com\/questions\/238731\/how-to-see-how-many-eligible-answers-for-a-top-tag-on-the-careers-page",
        "QueryBody": "WITH  relevanttags as (\nselect t.id\n     , count(*) as cnt\nfrom posts p \ninner join posttags pt on pt.postid = p.id\ninner join tags t on t.id = pt.tagid\nwhere p.answercount > 2 -- at least two answers\ngroup by t.id\n-- having count(*) > 500 -- total answers\n),\nusertags as (\n  select t.id\n  , sum(a.score) as [score]\n  from posts p \n  inner join posttags pt on pt.postid = p.id\n  inner join tags t on t.id = pt.tagid\n  inner join posts a on a.parentid = p.id\n  where a.owneruserid = ##uid:Int##\n  group by t.id\n)\nselect t.tagname, rt.cnt, ut.score\nfrom relevanttags rt\ninner join usertags ut on rt.id = ut.id\ninner join tags t on t.id = rt.id\norder by ut.score desc",
        "CreationDate": "2014-08-28 23:24:31",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 221581,
        "Title": "Questions asked per day in Sun-Sat week periods",
        "Description": null,
        "QueryBody": "DECLARE  @FirstQuestion datetime = (SELECT CreationDate FROM Posts WHERE Id = 1);\n\nSELECT \n  Cast(DateAdd(DAY, 1 - DatePart(WEEKDAY,CreationDate), CreationDate) as Date) as [Week of], \n  Round(Cast (Count(*) as float) \/ 7, 2)\nfrom Posts\nwhere PostTypeId = 1 and \n--  CreationDate >= @FirstQuestion and \n  Cast(CreationDate as Date) < '2013-01-01'\ngroup by Cast(DateAdd(DAY, 1 - DatePart(WEEKDAY,CreationDate), CreationDate) as Date)\norder by Cast(DateAdd(DAY, 1 - DatePart(WEEKDAY,CreationDate), CreationDate) as Date)",
        "CreationDate": "2014-08-30 12:59:27",
        "validated": false,
        "QueryBody_Original": "DECLARE  @FirstQuestion datetime = (SELECT CreationDate FROM Posts WHERE Id = 1);\n\nSELECT \n  Cast(DateAdd(DAY, 1 - DatePart(WEEKDAY,CreationDate), CreationDate) as Date) as [Week of], \n  Round(Cast (Count(*) as float) \/ 7, 2)\nfrom Posts\nwhere PostTypeId = 1 and \n--  CreationDate >= @FirstQuestion and \n  Cast(CreationDate as Date) < '2013-01-01'\ngroup by Cast(DateAdd(DAY, 1 - DatePart(WEEKDAY,CreationDate), CreationDate) as Date)\norder by Cast(DateAdd(DAY, 1 - DatePart(WEEKDAY,CreationDate), CreationDate) as Date)"
    },
    {
        "QuerySetId": 222473,
        "Title": "Answers by question's view count",
        "Description": null,
        "QueryBody": "DECLARE  @UserId int = ##UserId##\n\nSELECT \n    q.Id as QuestionNumber,\n    a.Id as AnswerNumber,\n    \/*a.Id AS [Post Link], *\/\n    q.Title,\n    a.CreationDate,\n    CASE WHEN q.AcceptedAnswerId=a.Id THEN 'Accepted' END AS Accepted, \n    q.ViewCount,\n    a.Score,\n    '<DT><A HREF=\"http:\/\/stackoverflow.com\/questions\/' AS BM1,\n    a.Id as BM2,\n    '\" ADD_DATE=\"' as BM3,\n    a.CreationDate as BM4,\n    DATEDIFF(SECOND,{d '1970-01-01'}, a.CreationDate) as BM4_1,\n    '\" PRIVATE=\"1\" TOREAD=\"0\" TAGS=\"StackOverflow-Answers\">' as BM5,\n    q.Title as BM6,\n    '<\/A>' AS BM7\nFROM\n    Posts q\n  INNER JOIN Posts a ON q.Id = a.ParentId\nWHERE\n    a.OwnerUserId = @UserId\n  AND\n    a.PostTypeId = 2\nORDER BY\n    q.ViewCount DESC",
        "CreationDate": "2014-09-04 00:37:59",
        "validated": false,
        "QueryBody_Original": "DECLARE  @UserId int = ##UserId##\n\nSELECT \n    q.Id as QuestionNumber,\n    a.Id as AnswerNumber,\n    \/*a.Id AS [Post Link], *\/\n    q.Title,\n    a.CreationDate,\n    CASE WHEN q.AcceptedAnswerId=a.Id THEN 'Accepted' END AS Accepted, \n    q.ViewCount,\n    a.Score,\n    '<DT><A HREF=\"http:\/\/stackoverflow.com\/questions\/' AS BM1,\n    a.Id as BM2,\n    '\" ADD_DATE=\"' as BM3,\n    a.CreationDate as BM4,\n    DATEDIFF(SECOND,{d '1970-01-01'}, a.CreationDate) as BM4_1,\n    '\" PRIVATE=\"1\" TOREAD=\"0\" TAGS=\"StackOverflow-Answers\">' as BM5,\n    q.Title as BM6,\n    '<\/A>' AS BM7\nFROM\n    Posts q\n  INNER JOIN Posts a ON q.Id = a.ParentId\nWHERE\n    a.OwnerUserId = @UserId\n  AND\n    a.PostTypeId = 2\nORDER BY\n    q.ViewCount DESC"
    },
    {
        "QuerySetId": 222474,
        "Title": "Up and down votes on my answers",
        "Description": null,
        "QueryBody": "DECLARE  @UserId int = ##UserId##\nSELECT    \n    p.Id AS AnswerNumber,\n    \/*p.Id AS [Post Link],*\/\n    q.Title,\n    SUM(CASE WHEN VoteTypeId = 2 THEN 1 ELSE 0 END) AS UpVotes,\n    SUM(CASE WHEN VoteTypeId = 3 THEN 1 ELSE 0 END) AS DownVotes,\n    (SUM(CASE WHEN VoteTypeId = 2 THEN 1 ELSE 0 END)- SUM(CASE WHEN VoteTypeId = 3 THEN 1 ELSE 0 END)) AS Total\nFROM\n   Posts p \n   LEFT JOIN Votes v ON v.PostId=p.Id\n   INNER JOIN Posts q on q.Id = p.ParentId\nWHERE\n    p.PostTypeId =2\n AND\n    p.OwnerUserId=@UserId\n    and VoteTypeId = 3\n\/*\n AND\n    (SELECT AcceptedAnswerId FROM Posts WHERE p.ParentId= Id)!=p.Id\n*\/\n GROUP BY\n    p.Id, q.Title\n\/* \n HAVING\n    SUM(CASE WHEN VoteTypeId = 3 THEN 1 ELSE 0 END) > 0\n*\/\n ORDER BY Total DESC",
        "CreationDate": "2014-09-10 11:14:32",
        "validated": false,
        "QueryBody_Original": "DECLARE  @UserId int = ##UserId##\nSELECT    \n    p.Id AS AnswerNumber,\n    \/*p.Id AS [Post Link],*\/\n    q.Title,\n    SUM(CASE WHEN VoteTypeId = 2 THEN 1 ELSE 0 END) AS UpVotes,\n    SUM(CASE WHEN VoteTypeId = 3 THEN 1 ELSE 0 END) AS DownVotes,\n    (SUM(CASE WHEN VoteTypeId = 2 THEN 1 ELSE 0 END)- SUM(CASE WHEN VoteTypeId = 3 THEN 1 ELSE 0 END)) AS Total\nFROM\n   Posts p \n   LEFT JOIN Votes v ON v.PostId=p.Id\n   INNER JOIN Posts q on q.Id = p.ParentId\nWHERE\n    p.PostTypeId =2\n AND\n    p.OwnerUserId=@UserId\n    and VoteTypeId = 3\n\/*\n AND\n    (SELECT AcceptedAnswerId FROM Posts WHERE p.ParentId= Id)!=p.Id\n*\/\n GROUP BY\n    p.Id, q.Title\n\/* \n HAVING\n    SUM(CASE WHEN VoteTypeId = 3 THEN 1 ELSE 0 END) > 0\n*\/\n ORDER BY Total DESC"
    },
    {
        "QuerySetId": 222781,
        "Title": "Percent of questions with a question mark",
        "Description": "This one takes a bit to run. But it seems to be about 25% of questions don't have a question mark.",
        "QueryBody": "DECLARE  @totalQuestions int =\n  (select count(1) from Posts p where p.PostTypeId = 1);\n\n;with Positions as\n(\n  select\n    charindex('?', p.Body) [position]\n  from Posts p\n  where p.PostTypeId = 1 --question\n),\nHasMarks as\n(\n  select\n    case when p.position > 0 then 'yes'\n    else 'no'\n    end [HasMark]\n  from Positions p\n),\nGroupedData as\n(\n  select hm.HasMark, count(hm.HasMark) [count]\n  from HasMarks hm\n  group by hm.HasMark\n)\nselect\n  gd.HasMark,\n  gd.[count],\n  gd.[count] * 1.0 \/ @totalQuestions * 100 [percent]\nfrom GroupedData gd",
        "CreationDate": "2014-09-04 23:07:02",
        "validated": false,
        "QueryBody_Original": "DECLARE  @totalQuestions int =\n  (select count(1) from Posts p where p.PostTypeId = 1);\n\n;with Positions as\n(\n  select\n    charindex('?', p.Body) [position]\n  from Posts p\n  where p.PostTypeId = 1 --question\n),\nHasMarks as\n(\n  select\n    case when p.position > 0 then 'yes'\n    else 'no'\n    end [HasMark]\n  from Positions p\n),\nGroupedData as\n(\n  select hm.HasMark, count(hm.HasMark) [count]\n  from HasMarks hm\n  group by hm.HasMark\n)\nselect\n  gd.HasMark,\n  gd.[count],\n  gd.[count] * 1.0 \/ @totalQuestions * 100 [percent]\nfrom GroupedData gd"
    },
    {
        "QuerySetId": 222971,
        "Title": "Search posts by a user",
        "Description": null,
        "QueryBody": "SELECT  p.Id as [Post Link] FROM Posts p\nWHERE p.OwnerUserId=##Id## AND p.Body LIKE '%'+##SearchQuery:string##+'%'",
        "CreationDate": "2014-09-05 22:02:41",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 223126,
        "Title": "Number of users who have posted questions\/answers within given ranges",
        "Description": null,
        "QueryBody": "WITH in given ranges\n\nWITH UserPosts (UserId, NumQuestions, NumAnswers) as (\nSelect OwnerUserId as UserId, \nSum( Case When PostTypeId = 1 then 1 else 0 end ) as NumQuestions,\nSum( Case When PostTypeId = 2 then 1 else 0 end ) as NumAanswers\nfrom Posts\ngroup by OwnerUserId\n)\n\nSelect \nDateDiff (day, u.CreationDate, u.LastAccessDate), Count(*)\nfrom Users u\ninner Join UserPosts x on x.UserId = u.Id\nwhere x.NumAnswers = 0 and x.NumQuestions = 1\ngroup by DateDiff (day, u.CreationDate, u.LastAccessDate)\norder by DateDiff (day, u.CreationDate, u.LastAccessDate)",
        "CreationDate": "2014-09-07 16:18:56",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 223582,
        "Title": "User Count By Privilege Level Across Stack Exchange Network",
        "Description": "This shows the number of users who has reached each privilege level and includes users who have unlocked privileges higher than the current level.",
        "QueryBody": "DECLARE  @sql nvarchar(max)\n\nselect \n @sql = isnull(@sql + ' UNION ALL ','') + \n 'SELECT DISTINCT ''' + quotename(name) + ''' as Site, '+ \n '(SELECT COUNT(AccountId) FROM ' + quotename(name) + '..Users WHERE Reputation <= 10) as ''<10'', ' +\n '(SELECT COUNT(AccountId) FROM ' + quotename(name) + '..Users WHERE Reputation <= 50) as ''<50'' '+\n 'FROM ' + quotename(name) + '..Users ' \n from sys.databases d\n WHERE\n        ((d.name NOT LIKE '%Meta%') Or d.name='StackOverflow.Meta') AND\n        (d.name NOT IN ('master', 'model', 'tempdb', 'msdb', 'Data.StackExchange'))   \n            \n           \nEXEC sp_executesql @sql",
        "CreationDate": "2015-09-30 16:16:43",
        "validated": false,
        "QueryBody_Original": "DECLARE  @sql nvarchar(max)\n\nselect \n @sql = isnull(@sql + ' UNION ALL ','') + \n 'SELECT DISTINCT ''' + quotename(name) + ''' as Site, '+ \n '(SELECT COUNT(AccountId) FROM ' + quotename(name) + '..Users WHERE Reputation <= 10) as ''<10'', ' +\n '(SELECT COUNT(AccountId) FROM ' + quotename(name) + '..Users WHERE Reputation <= 50) as ''<50'' '+\n 'FROM ' + quotename(name) + '..Users ' \n from sys.databases d\n WHERE\n        ((d.name NOT LIKE '%Meta%') Or d.name='StackOverflow.Meta') AND\n        (d.name NOT IN ('master', 'model', 'tempdb', 'msdb', 'Data.StackExchange'))   \n            \n           \nEXEC sp_executesql @sql"
    },
    {
        "QuerySetId": 223861,
        "Title": "Get High-Scoring Comments and associated posts, by User ID",
        "Description": null,
        "QueryBody": "DECLARE  @UserId int = ##UserId##\n    \nSELECT \n    *\nFROM \n    Comments\nJOIN Posts\nON Comments.PostID = Posts.ID\nJOIN PostLinks\nON Posts.ID = PostLinks.PostID\nWHERE \n    UserId = @UserID\n   AND Comments.Score >= 0\nORDER BY \n    Comments.Score DESC",
        "CreationDate": "2017-01-11 18:06:40",
        "validated": false,
        "QueryBody_Original": "DECLARE  @UserId int = ##UserId##\n    \nSELECT \n    *\nFROM \n    Comments\nJOIN Posts\nON Comments.PostID = Posts.ID\nJOIN PostLinks\nON Posts.ID = PostLinks.PostID\nWHERE \n    UserId = @UserID\n   AND Comments.Score >= 0\nORDER BY \n    Comments.Score DESC"
    },
    {
        "QuerySetId": 223867,
        "Title": "Get your best scoring comments",
        "Description": null,
        "QueryBody": "DECLARE  @UserId int = ##UserId##\n    \nSELECT \n    PostId as [Post Link], Body, Text, Comments.Score\nFROM \n    Comments\nJOIN Posts\nON Comments.PostID = Posts.ID\nWHERE \n    UserId = @UserID\n   AND Comments.Score >= 5\nORDER BY \n    Score DESC",
        "CreationDate": "2014-09-10 00:31:05",
        "validated": false,
        "QueryBody_Original": "DECLARE  @UserId int = ##UserId##\n    \nSELECT \n    PostId as [Post Link], Body, Text, Comments.Score\nFROM \n    Comments\nJOIN Posts\nON Comments.PostID = Posts.ID\nWHERE \n    UserId = @UserID\n   AND Comments.Score >= 5\nORDER BY \n    Score DESC"
    },
    {
        "QuerySetId": 224703,
        "Title": " Accepted Answers by User (and other stats)",
        "Description": null,
        "QueryBody": "DECLARE  @UserId int = ##UserId##\n\nSELECT\n Count(*) AS [All],\n Sum(CASE WHEN q.AcceptedAnswerId = a.Id THEN 1 ELSE 0 END) AS [Accepted],\n Sum(CASE WHEN a.Score > 0 THEN 1 ELSE 0 END) AS [Upvoted],\n Sum(CASE WHEN a.Score = 0 THEN 1 ELSE 0 END) AS [Zero Voted],\n Sum(CASE WHEN a.Score < 0 THEN 1 ELSE 0 END) AS [Downvoted]\nFROM\n Posts a\n  LEFT JOIN \n   Posts q\n    ON q.AcceptedAnswerId = a.Id\nWHERE\n a.OwnerUserId = @UserID AND\n a.PostTypeId = 2",
        "CreationDate": "2016-10-07 08:10:15",
        "validated": false,
        "QueryBody_Original": "DECLARE  @UserId int = ##UserId##\n\nSELECT\n Count(*) AS [All],\n Sum(CASE WHEN q.AcceptedAnswerId = a.Id THEN 1 ELSE 0 END) AS [Accepted],\n Sum(CASE WHEN a.Score > 0 THEN 1 ELSE 0 END) AS [Upvoted],\n Sum(CASE WHEN a.Score = 0 THEN 1 ELSE 0 END) AS [Zero Voted],\n Sum(CASE WHEN a.Score < 0 THEN 1 ELSE 0 END) AS [Downvoted]\nFROM\n Posts a\n  LEFT JOIN \n   Posts q\n    ON q.AcceptedAnswerId = a.Id\nWHERE\n a.OwnerUserId = @UserID AND\n a.PostTypeId = 2"
    },
    {
        "QuerySetId": 224931,
        "Title": "Users with the most answers per day",
        "Description": null,
        "QueryBody": "WITH  UData as (\n\nselect \n     u.Id as [UserId]\n     , u.DisplayName [DisplayName]\n     , datediff(dd, u.creationdate, GETDATE() ) as [Days]\n     , count(a.Id) as [AnswerCount]  \n     , (count(a.Id) * 1.0) \/ datediff(dd, u.creationdate, GETDATE()) as [AnswersPerDay]\n     , avg(a.score * 1.0) as [ScorePerAnswer]\nfrom Users u\ninner join Posts a on a.OwnerUserId = u.Id\nwhere a.PostTypeId=2\ngroup by u.Id, u.creationdate, u.DisplayName\n)\nselect TOP 500 Rank() Over (order by AnswersPerDay DESC) as [Rank],\n       UserId as [User Link],\n       DisplayName as [ForSort],\n       Days,\n       AnswerCount,\n       cast(AnswersPerDay as DECIMAL(10,3)) as AnswersPerDay,\n       ScorePerAnswer\nfrom UData\nwhere AnswerCount > ##MinAnswers:int?10##\norder by AnswersPerDay desc",
        "CreationDate": "2014-09-13 01:33:01",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 225372,
        "Title": "Retrieve Suggested Tags Based on 4 tags",
        "Description": "Meta query for: http:\/\/meta.stackoverflow.com\/questions\/271397\/tag-combinations-that-suggest-re-tagging-automatically",
        "QueryBody": "DECLARE  @Tag1 nvarchar(25) = '##Tag1##'\nDECLARE @Tag2 nvarchar(25) = '##Tag2##'\nDECLARE @Tag3 nvarchar(25) = '##Tag3##'\nDECLARE @Tag4 nvarchar(25) = '##Tag4##'\n\nSELECT * FROM Tags\nWHERE TagName LIKE(@Tag1 + '-' + @Tag2)\n   OR TagName LIKE(@Tag1 + '-' + @Tag3)\n   OR TagName LIKE(@Tag1 + '-' + @Tag4)\n   OR TagName LIKE(@Tag2 + '-' + @Tag1)\n   OR TagName LIKE(@Tag2 + '-' + @Tag3)\n   OR TagName LIKE(@Tag2 + '-' + @Tag4)\n   OR TagName LIKE(@Tag3 + '-' + @Tag1)\n   OR TagName LIKE(@Tag3 + '-' + @Tag2)\n   OR TagName LIKE(@Tag3 + '-' + @Tag4)\n   OR TagName LIKE(@Tag4 + '-' + @Tag1)\n   OR TagName LIKE(@Tag4 + '-' + @Tag2)\n   OR TagName LIKE(@Tag4 + '-' + @Tag3)",
        "CreationDate": "2014-09-15 19:33:45",
        "validated": false,
        "QueryBody_Original": "DECLARE  @Tag1 nvarchar(25) = '##Tag1##'\nDECLARE @Tag2 nvarchar(25) = '##Tag2##'\nDECLARE @Tag3 nvarchar(25) = '##Tag3##'\nDECLARE @Tag4 nvarchar(25) = '##Tag4##'\n\nSELECT * FROM Tags\nWHERE TagName LIKE(@Tag1 + '-' + @Tag2)\n   OR TagName LIKE(@Tag1 + '-' + @Tag3)\n   OR TagName LIKE(@Tag1 + '-' + @Tag4)\n   OR TagName LIKE(@Tag2 + '-' + @Tag1)\n   OR TagName LIKE(@Tag2 + '-' + @Tag3)\n   OR TagName LIKE(@Tag2 + '-' + @Tag4)\n   OR TagName LIKE(@Tag3 + '-' + @Tag1)\n   OR TagName LIKE(@Tag3 + '-' + @Tag2)\n   OR TagName LIKE(@Tag3 + '-' + @Tag4)\n   OR TagName LIKE(@Tag4 + '-' + @Tag1)\n   OR TagName LIKE(@Tag4 + '-' + @Tag2)\n   OR TagName LIKE(@Tag4 + '-' + @Tag3)"
    },
    {
        "QuerySetId": 225388,
        "Title": "Comments per week (questions with > 2 answers)",
        "Description": null,
        "QueryBody": "DECLARE  @epoch datetime = '2014-08-26';\n\nwith test_posts as (\n  select q.Id Id, q.CreationDate CreationDate\n  from Posts q\n       join Posts a on a.ParentId = q.Id\n  where q.AnswerCount > 2\n  union\n  select Id, CreationDate\n  from Posts\n  where AnswerCount > 2\n)\n\n\nSELECT DATEADD(week, datediff(week, @epoch, p.CreationDate), @epoch) as Week,\n    count(distinct c.Id) as Comments,\n    count(distinct p.Id) as Posts,\n    sum(c.Score) Voting,\n    100.0*count(distinct c.Id)\/count(distinct p.Id) C_per_P_100\nfrom Comments c\n     right outer join test_posts p on p.Id = PostId\nwhere p.CreationDate > @epoch - 4*datediff(day, @epoch, getdate())\nGroup by DATEADD(week, datediff(week, @epoch, p.CreationDate), @epoch) \nOrder by DATEADD(week, datediff(week, @epoch, p.CreationDate), @epoch)",
        "CreationDate": "2014-09-16 03:36:19",
        "validated": false,
        "QueryBody_Original": "DECLARE  @epoch datetime = '2014-08-26';\n\nwith test_posts as (\n  select q.Id Id, q.CreationDate CreationDate\n  from Posts q\n       join Posts a on a.ParentId = q.Id\n  where q.AnswerCount > 2\n  union\n  select Id, CreationDate\n  from Posts\n  where AnswerCount > 2\n)\n\n\nSELECT DATEADD(week, datediff(week, @epoch, p.CreationDate), @epoch) as Week,\n    count(distinct c.Id) as Comments,\n    count(distinct p.Id) as Posts,\n    sum(c.Score) Voting,\n    100.0*count(distinct c.Id)\/count(distinct p.Id) C_per_P_100\nfrom Comments c\n     right outer join test_posts p on p.Id = PostId\nwhere p.CreationDate > @epoch - 4*datediff(day, @epoch, getdate())\nGroup by DATEADD(week, datediff(week, @epoch, p.CreationDate), @epoch) \nOrder by DATEADD(week, datediff(week, @epoch, p.CreationDate), @epoch)"
    },
    {
        "QuerySetId": 225401,
        "Title": "Find questions by a user answered by a user",
        "Description": null,
        "QueryBody": "SELECT \n  q.Id AS 'Question Id',\n  q.Id AS [Post Link],\n  q.OwnerUserId AS [User Link],\n  a.Id AS 'Answer Id',\n  a.Id AS [Post Link],\n  a.OwnerUserId AS [User Link]\nFROM\n  Posts q,\n  Posts a\nWHERE\n  q.OwnerUserId = ##QuestionOwnerId:int## AND\n  a.OwnerUserId = ##AnswerOwnerId:int## AND\n  a.ParentId = q.Id",
        "CreationDate": "2014-09-16 03:31:38",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 225653,
        "Title": "What are the maximum views my answers have?",
        "Description": null,
        "QueryBody": "DECLARE  @UserId int = ##UserId##\n\nSELECT q.score as [question score], q.id as [Post Link], a.score as [answer], q.ViewCount [question views]\nFROM Posts a\n     join Posts q on a.ParentId = q.Id\nWHERE a.OwnerUserId = 132438\n\nORDER BY [answer] DESC, [question views] DESC",
        "CreationDate": "2014-09-17 04:38:38",
        "validated": false,
        "QueryBody_Original": "DECLARE  @UserId int = ##UserId##\n\nSELECT q.score as [question score], q.id as [Post Link], a.score as [answer], q.ViewCount [question views]\nFROM Posts a\n     join Posts q on a.ParentId = q.Id\nWHERE a.OwnerUserId = 132438\n\nORDER BY [answer] DESC, [question views] DESC"
    },
    {
        "QuerySetId": 225669,
        "Title": "My answers: Votes and question viewcount",
        "Description": null,
        "QueryBody": "DECLARE  @UserId int = ##UserId##\n\nSELECT a.id as [Post Link], a.score as AnswerScore, q.ViewCount\nFROM Posts a\nJOIN Posts q on a.ParentId = q.Id\nWHERE a.OwnerUserId = @UserId\n\nORDER BY a.score DESC, q.ViewCount DESC",
        "CreationDate": "2015-01-05 05:29:02",
        "validated": false,
        "QueryBody_Original": "DECLARE  @UserId int = ##UserId##\n\nSELECT a.id as [Post Link], a.score as AnswerScore, q.ViewCount\nFROM Posts a\nJOIN Posts q on a.ParentId = q.Id\nWHERE a.OwnerUserId = @UserId\n\nORDER BY a.score DESC, q.ViewCount DESC"
    },
    {
        "QuerySetId": 225899,
        "Title": "My answers: Number of votes and question viewcount",
        "Description": null,
        "QueryBody": "DECLARE  @UserId int = ##UserId##\n\nSELECT sum(q.ViewCount)\nFROM Posts a\n     join Posts q on a.ParentId = q.Id\nWHERE a.OwnerUserId = @UserId",
        "CreationDate": "2014-09-19 08:42:06",
        "validated": false,
        "QueryBody_Original": "DECLARE  @UserId int = ##UserId##\n\nSELECT sum(q.ViewCount)\nFROM Posts a\n     join Posts q on a.ParentId = q.Id\nWHERE a.OwnerUserId = @UserId"
    },
    {
        "QuerySetId": 226825,
        "Title": "Top 100 posts of the last 2 weeks by UP VOTES",
        "Description": null,
        "QueryBody": "SELECT  TOP 100000 p.id [Post Link], p.Tags, p.CreationDate, p.Score, p.ViewCount,p.FavoriteCount, v.UpVote, v.DownVote, p.AnswerCount FROM\n(SELECT Votes.PostID, UpVote = sum(case when VoteTypeId = 2 then 1 else 0 end), DownVote = sum(case when VoteTypeId = 3 then 1 else 0 end) FROM Votes WHERE VoteTypeId in (2,3) GROUP BY PostId) v\nJOIN Posts p on v.PostID = p.id\nWHERE p.PostTypeId = 1 AND p.CreationDate >= DATEADD(day, -14, GETDATE())\nORDER BY v.UpVote DESC",
        "CreationDate": "2014-09-24 00:56:50",
        "validated": false,
        "QueryBody_Original": "SELECT  TOP 100000 p.id [Post Link], p.Tags, p.CreationDate, p.Score, p.ViewCount,p.FavoriteCount, v.UpVote, v.DownVote, p.AnswerCount FROM\n(SELECT Votes.PostID, UpVote = sum(case when VoteTypeId = 2 then 1 else 0 end), DownVote = sum(case when VoteTypeId = 3 then 1 else 0 end) FROM Votes WHERE VoteTypeId in (2,3) GROUP BY PostId) v\nJOIN Posts p on v.PostID = p.id\nWHERE p.PostTypeId = 1 AND p.CreationDate >= DATEADD(day, -14, GETDATE())\nORDER BY v.UpVote DESC"
    },
    {
        "QuerySetId": 227301,
        "Title": "Answers per Month before and after Legendary Badge",
        "Description": null,
        "QueryBody": "DECLARE  @StartDate datetime\n       ,@EndDate datetime\nSELECT @StartDate=DATEADD(month,-32,DATEADD(month,DATEDIFF(month,0,GETDATE()),0) )\n      ,@EndDate=GETDATE()\n\n;with AllDates AS\n(\n    SELECT @StartDate AS startDate\n    UNION ALL\n    SELECT DateAdd(month,1,startDate)\n        FROM AllDates\n    WHERE startDate<@EndDate\n)\nSELECT   AllDates.startDate,DATEADD(month,+1,AllDates.startDate)[endDate]FROM AllDates;",
        "CreationDate": "2014-09-29 14:55:36",
        "validated": false,
        "QueryBody_Original": "DECLARE  @StartDate datetime\n       ,@EndDate datetime\nSELECT @StartDate=DATEADD(month,-32,DATEADD(month,DATEDIFF(month,0,GETDATE()),0) )\n      ,@EndDate=GETDATE()\n\n;with AllDates AS\n(\n    SELECT @StartDate AS startDate\n    UNION ALL\n    SELECT DateAdd(month,1,startDate)\n        FROM AllDates\n    WHERE startDate<@EndDate\n)\nSELECT   AllDates.startDate,DATEADD(month,+1,AllDates.startDate)[endDate]FROM AllDates;"
    },
    {
        "QuerySetId": 228230,
        "Title": "Do 10% of Users Hold 90% of the Reputation on Stack Overflow",
        "Description": "It's commonly said that 10% of the worldwide population have 90% of the wealth.\r\nThis query aims to check the distribution of wealth (reputation-wise) of users on Stack Overflow to see if there is a correlation.",
        "QueryBody": "DECLARE  @TotalRep bigint\nDECLARE @Top10RepTotal decimal(18,4)\nDECLARE @Bottom90RepTotal decimal(18,4)\n\nselect @TotalRep = sum(reputation) from users\n\nselect @Top10RepTotal = sum(tmp.rep) from\n          (select top(10) percent reputation as rep\n           from users\n           order by reputation desc) as tmp\n\nselect @Bottom90RepTotal = sum(tmp.rep) from\n          (select top(90) percent reputation as rep\n           from users\n           order by reputation) as tmp\n\nselect @TotalRep TotalRep, \n       @Top10RepTotal Top10RepTotal,\n       @Bottom90RepTotal Bottom90RepTotal,\n       cast((@Top10RepTotal\/@TotalRep)*100 as decimal(18,4)) Top10PercentageOfRep,\n       cast((@Bottom90RepTotal\/@TotalRep)*100 as decimal(18,4)) Bottom90PercentageOfRep",
        "CreationDate": "2014-09-26 19:14:23",
        "validated": false,
        "QueryBody_Original": "DECLARE  @TotalRep bigint\nDECLARE @Top10RepTotal decimal(18,4)\nDECLARE @Bottom90RepTotal decimal(18,4)\n\nselect @TotalRep = sum(reputation) from users\n\nselect @Top10RepTotal = sum(tmp.rep) from\n          (select top(10) percent reputation as rep\n           from users\n           order by reputation desc) as tmp\n\nselect @Bottom90RepTotal = sum(tmp.rep) from\n          (select top(90) percent reputation as rep\n           from users\n           order by reputation) as tmp\n\nselect @TotalRep TotalRep, \n       @Top10RepTotal Top10RepTotal,\n       @Bottom90RepTotal Bottom90RepTotal,\n       cast((@Top10RepTotal\/@TotalRep)*100 as decimal(18,4)) Top10PercentageOfRep,\n       cast((@Bottom90RepTotal\/@TotalRep)*100 as decimal(18,4)) Bottom90PercentageOfRep"
    },
    {
        "QuerySetId": 228482,
        "Title": "Post History by Post Id",
        "Description": null,
        "QueryBody": "SELECT  * from PostHistory\nwhere PostId = ##PostId##",
        "CreationDate": "2014-09-28 01:57:00",
        "validated": false,
        "QueryBody_Original": "SELECT  * from PostHistory\nwhere PostId = ##PostId##"
    },
    {
        "QuerySetId": 228574,
        "Title": "Your RANK on STACKOVERFLOW.COM Worldwide,in india,in mumbai",
        "Description": null,
        "QueryBody": "DECLARE  @UserId int = ##UserId##\n\n\n\n\nselect d.REPUTATION,d.RANK as RANK_INDIA from (\n\nselect *,ROW_NUMBER() OVER (ORDER BY REPUTATION DESC) RANK from Users where LOWER(Location) LIKE '%india%'\n\n)d where d.id=@UserId",
        "CreationDate": "2016-11-05 13:11:18",
        "validated": false,
        "QueryBody_Original": "DECLARE  @UserId int = ##UserId##\n\n\n\n\nselect d.REPUTATION,d.RANK as RANK_INDIA from (\n\nselect *,ROW_NUMBER() OVER (ORDER BY REPUTATION DESC) RANK from Users where LOWER(Location) LIKE '%india%'\n\n)d where d.id=@UserId"
    },
    {
        "QuerySetId": 228586,
        "Title": "Am I an Asker or a Teller?",
        "Description": null,
        "QueryBody": "DECLARE  @AnswerScore float;\nDECLARE @QuestionScore float;\nDECLARE @AnswerCount float;\nDECLARE @QuestionCount float;\n\nSELECT @AnswerScore=Sum(Score),@AnswerCount=Count(*)\nFROM posts a\nWHERE a.PostTypeId=2\nAND OwnerUserId=##UserId##\n\nSELECT @QuestionScore=Sum(Score),@QuestionCount=Count(*)\nFROM posts q\nWHERE q.PostTypeId=1\nAND OwnerUserId=##UserId##\n\nSELECT \nFORMAT(@AnswerScore\/@QuestionScore,'N2') as [Teller By Score],\nFORMAT(@AnswerCount\/@QuestionCount,'N2') as [Teller By Count],\nFORMAT(@QuestionScore\/@AnswerScore,'N2') as [Asker By Score],  \nFORMAT(@QuestionCount\/@AnswerCount,'N2') as [Asker By Count]",
        "CreationDate": "2014-09-28 16:43:09",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 228592,
        "Title": "Most Balanced Users - Comparable Ask & Tell",
        "Description": null,
        "QueryBody": "SELECT  TOP ##maxUsers##\n  Id as [User Link],\n  QuestionScore,\n  AnswerScore,\n  FORMAT(ABS(LOG(AnswerScore) - LOG(QuestionScore)),'N3') as [Log Difference]\nFROM \n(\n  SELECT   \n     Id,\n     (\n       SELECT \n         CAST(Sum(Score) as float)\n       FROM \n         posts a\n       WHERE \n         a.PostTypeId=2 AND \n         OwnerUserId=users.Id\n      ) as AnswerScore,\n     (\n       SELECT \n         CAST(Sum(Score) as float)\n       FROM \n         posts q\n       WHERE \n         q.PostTypeId=1 AND\n         OwnerUserId=users.Id\n      ) as QuestionScore\n  FROM \n    Users users\n  WHERE \n    Reputation > ##minRep## \n) temp\nWHERE \n  AnswerScore>0 AND \n  QuestionScore>0\nOrder By \n  ABS(LOG(AnswerScore) - LOG(QuestionScore))",
        "CreationDate": "2014-09-28 18:34:40",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 228873,
        "Title": "Comments from user A to user B",
        "Description": "Show comments by user A (Author) addressed to user B (Target).\r\n\r\nThis query includes only comments by user A, but it implements the target check only approximately. Comments under B's posts are included. Comments that @mention the target or another user by the same name are included. Comments that @mention the target by a prefix of its name are not included. Comments that are addressed to the target because the target was the sole other commenter on the post are not included. Only the target's current display name is checked, not the display name at the time of posting.",
        "QueryBody": "DECLARE  @AuthorId AS Int = ##Author##\nDECLARE @TargetId AS Int = ##Target##\nDECLARE @TargetName AS NVarChar(40) =\n  Replace(Lower((SELECT TOP 1 DisplayName FROM Users WHERE Id = @TargetId)),\n          '_', '[_]')\nDECLARE @TargetNameWithoutSpaces AS NVarChar(40) =\n  Replace(@TargetName, ' ', '')\nDECLARE @TargetNameFirstWord AS NVarChar(40) =\n  Left(@TargetName, CharIndex(' ', @TargetName))\nPRINT @TargetNameFirstWord\nPRINT @TargetNameWithoutSpaces\n\nSELECT\n  c.Id AS [Comment Link],\n  c.Score AS [Score],\n  c.CreationDate AS [Date]\nFROM Comments c\nINNER JOIN Posts p ON p.Id = c.PostId\nWHERE c.UserId = @AuthorId\n  AND (Lower(c.Text) LIKE '%@' + @TargetNameFirstWord + '%' OR\n       Lower(c.Text) LIKE '%@' + @TargetNameWithoutSpaces + '%' OR\n       p.OwnerUserId = @TargetId)\nORDER BY c.Id ASC",
        "CreationDate": "2014-09-29 19:25:47",
        "validated": false,
        "QueryBody_Original": "DECLARE  @AuthorId AS Int = ##Author##\nDECLARE @TargetId AS Int = ##Target##\nDECLARE @TargetName AS NVarChar(40) =\n  Replace(Lower((SELECT TOP 1 DisplayName FROM Users WHERE Id = @TargetId)),\n          '_', '[_]')\nDECLARE @TargetNameWithoutSpaces AS NVarChar(40) =\n  Replace(@TargetName, ' ', '')\nDECLARE @TargetNameFirstWord AS NVarChar(40) =\n  Left(@TargetName, CharIndex(' ', @TargetName))\nPRINT @TargetNameFirstWord\nPRINT @TargetNameWithoutSpaces\n\nSELECT\n  c.Id AS [Comment Link],\n  c.Score AS [Score],\n  c.CreationDate AS [Date]\nFROM Comments c\nINNER JOIN Posts p ON p.Id = c.PostId\nWHERE c.UserId = @AuthorId\n  AND (Lower(c.Text) LIKE '%@' + @TargetNameFirstWord + '%' OR\n       Lower(c.Text) LIKE '%@' + @TargetNameWithoutSpaces + '%' OR\n       p.OwnerUserId = @TargetId)\nORDER BY c.Id ASC"
    },
    {
        "QuerySetId": 229334,
        "Title": "Progress toward the Illuminator badge",
        "Description": "How Close are you to getting your badge? enter your UserID below.",
        "QueryBody": "SELECT  count(*) Count\n  from Posts q \n  join Posts a on a.ParentId = q.Id\n where q.PostTypeId = 1 and \n       q.ClosedDate is null and\n       a.PostTypeId = 2 and \n       a.Score >= 1 and \n       a.OwnerUserId = ##UserId## and\n       -- exclude self answered\n       IsNull(q.OwnerUserId, -1) <> a.OwnerUserId and \n       exists(SELECT 1 \n                from PostHistory ph \n               where ph.PostHistoryTypeId in (4,5) \n                 and ph.PostId = a.ParentId \n                 and ph.UserId = a.OwnerUserId \n                 and abs(datediff(hh, ph.CreationDate, a.CreationDate)) < 12)",
        "CreationDate": "2015-01-23 01:53:47",
        "validated": false,
        "QueryBody_Original": "SELECT  count(*) Count\n  from Posts q \n  join Posts a on a.ParentId = q.Id\n where q.PostTypeId = 1 and \n       q.ClosedDate is null and\n       a.PostTypeId = 2 and \n       a.Score >= 1 and \n       a.OwnerUserId = ##UserId## and\n       -- exclude self answered\n       IsNull(q.OwnerUserId, -1) <> a.OwnerUserId and \n       exists(SELECT 1 \n                from PostHistory ph \n               where ph.PostHistoryTypeId in (4,5) \n                 and ph.PostId = a.ParentId \n                 and ph.UserId = a.OwnerUserId \n                 and abs(datediff(hh, ph.CreationDate, a.CreationDate)) < 12)"
    },
    {
        "QuerySetId": 229495,
        "Title": "Progress towards Curious, Inquisitive and Socratic badges",
        "Description": "How far are you towards the Curious, Inquisitive and Socratic badges? You need to count the days on which you had only positive questions, and no downvoted or closed questions. We cannot see deleted questions here so the count is going to be inaccurate, nor does it track your positive question record ratio.",
        "QueryBody": "DECLARE  @epoch datetime = getdate();\n\nwith ask_days as (\n  select dateadd(day, datediff(day, @epoch, CreationDate), @epoch) day,\n         min(Score) worst,\n         max(Score) best,\n         -- only posts closed within 60 days count against qualification\n         count(case when ClosedDate is not null and datediff(day, CreationDate, ClosedDate) <= 60 then 1 else null end) closed\n  from Posts\n  where PostTypeId = 1\n        and OwnerUserId in (##UserId##)\n  group by dateadd(day, datediff(day, @epoch, CreationDate), @epoch)\n),\n\ngood_days as (\n  select count(*) N\n  from ask_days\n  where best >= 1\n        and worst >= 0\n        and closed = 0\n)\n\nselect *\nfrom ask_days;",
        "CreationDate": "2019-11-03 02:20:27",
        "validated": false,
        "QueryBody_Original": "DECLARE  @epoch datetime = getdate();\n\nwith ask_days as (\n  select dateadd(day, datediff(day, @epoch, CreationDate), @epoch) day,\n         min(Score) worst,\n         max(Score) best,\n         -- only posts closed within 60 days count against qualification\n         count(case when ClosedDate is not null and datediff(day, CreationDate, ClosedDate) <= 60 then 1 else null end) closed\n  from Posts\n  where PostTypeId = 1\n        and OwnerUserId in (##UserId##)\n  group by dateadd(day, datediff(day, @epoch, CreationDate), @epoch)\n),\n\ngood_days as (\n  select count(*) N\n  from ask_days\n  where best >= 1\n        and worst >= 0\n        and closed = 0\n)\n\nselect *\nfrom ask_days;"
    },
    {
        "QuerySetId": 229690,
        "Title": "List all answers that count for the Illuminator badge",
        "Description": "This is a list of all answers for a user that count for the Explainer, Refiner and Illuminator badges, sorted by newest answer first.",
        "QueryBody": "SELECT  YEAR(a.CreationDate) AS [Year],\n       MONTH(a.CreationDate) AS [Month],\n       COUNT(a.Id) AS [Count]\nFROM Posts q\nINNER JOIN Posts a ON q.Id = a.ParentId\nWHERE q.PostTypeId = 1\n  AND q.ClosedDate IS NULL\n  AND a.PostTypeId = 2\n  AND a.Score >= 1\n  AND a.OwnerUserId = ##UserId##\n  AND (q.OwnerUserId IS NULL\n       OR q.OwnerUserId <> a.OwnerUserId)\n  AND EXISTS\n    (SELECT 1\n     FROM PostHistory ph\n     WHERE ph.PostHistoryTypeId IN (4,5)\n       AND ph.PostId = a.ParentId\n       AND ph.UserId = a.OwnerUserId\n       AND ABS(DATEDIFF(hh, ph.CreationDate, a.CreationDate)) < 12)\nGROUP BY YEAR(a.CreationDate), MONTH(a.CreationDate)\nORDER BY YEAR(a.CreationDate) DESC, MONTH(a.CreationDate) DESC",
        "CreationDate": "2015-02-10 11:58:25",
        "validated": false,
        "QueryBody_Original": "SELECT  YEAR(a.CreationDate) AS [Year],\n       MONTH(a.CreationDate) AS [Month],\n       COUNT(a.Id) AS [Count]\nFROM Posts q\nINNER JOIN Posts a ON q.Id = a.ParentId\nWHERE q.PostTypeId = 1\n  AND q.ClosedDate IS NULL\n  AND a.PostTypeId = 2\n  AND a.Score >= 1\n  AND a.OwnerUserId = ##UserId##\n  AND (q.OwnerUserId IS NULL\n       OR q.OwnerUserId <> a.OwnerUserId)\n  AND EXISTS\n    (SELECT 1\n     FROM PostHistory ph\n     WHERE ph.PostHistoryTypeId IN (4,5)\n       AND ph.PostId = a.ParentId\n       AND ph.UserId = a.OwnerUserId\n       AND ABS(DATEDIFF(hh, ph.CreationDate, a.CreationDate)) < 12)\nGROUP BY YEAR(a.CreationDate), MONTH(a.CreationDate)\nORDER BY YEAR(a.CreationDate) DESC, MONTH(a.CreationDate) DESC"
    },
    {
        "QuerySetId": 230257,
        "Title": "Top 100 posts with the most comments with low views",
        "Description": null,
        "QueryBody": "SELECT  TOP 100 Posts.Id as [Post Link], CommentCount, ViewCount\nFROM Posts\nWHERE ViewCount < ##howManyViews?100## and AcceptedAnswerId IS NOT NULL\nORDER BY CommentCount DESC",
        "CreationDate": "2014-10-03 11:56:02",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 230311,
        "Title": "Show text of specific comment",
        "Description": null,
        "QueryBody": "SELECT  Text\nfrom Comments\nwhere Id = ##Id##",
        "CreationDate": "2014-10-03 13:28:12",
        "validated": false,
        "QueryBody_Original": "SELECT  Text\nfrom Comments\nwhere Id = ##Id##"
    },
    {
        "QuerySetId": 230605,
        "Title": "What Percentile of Users am I in (reputation-wise)?",
        "Description": null,
        "QueryBody": "DECLARE  @UserCount decimal(18,4)\nDECLARE @UserRep bigint\nDECLARE @TopUsers decimal(18,4)\n\nselect @UserRep = reputation from users where Id = 10755978\n\nselect @UserCount = count(1) from users where reputation > 1\n\nselect @TopUsers = count(1) from users where reputation >= @UserRep\n\nselect cast((@TopUsers\/@UserCount)*100 as decimal(18,4)) UserPercentile",
        "CreationDate": "2019-03-18 23:04:02",
        "validated": false,
        "QueryBody_Original": "DECLARE  @UserCount decimal(18,4)\nDECLARE @UserRep bigint\nDECLARE @TopUsers decimal(18,4)\n\nselect @UserRep = reputation from users where Id = 10755978\n\nselect @UserCount = count(1) from users where reputation > 1\n\nselect @TopUsers = count(1) from users where reputation >= @UserRep\n\nselect cast((@TopUsers\/@UserCount)*100 as decimal(18,4)) UserPercentile"
    },
    {
        "QuerySetId": 230839,
        "Title": "Posts linked to a given post",
        "Description": null,
        "QueryBody": "SELECT  PostId as [Post Link], RelatedPostId as [Post Link], LinkTypeId from PostLinks where PostId = ##Id## or RelatedPostId = ##Id##\n\nSELECT count(*) from PostLinks where PostId = ##Id## or RelatedPostId = ##Id##",
        "CreationDate": "2014-10-13 07:36:49",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 230849,
        "Title": "Limiting Posts by Date and Rep (Tutorial)",
        "Description": null,
        "QueryBody": "WITH  <500 rep?\n-- We can use a JOIN clause to look at data from two tables.\n-- But we have to tell the query how to link the tables.\n\nSELECT p.Title, p.Id, u.DisplayName, u.Reputation\n\n-- We are using prefixes to explain which table to take info from\nFROM Posts p \n-- We are naming Posts 'p' so if two fields have the same name we can differentiate\nJOIN Users u ON p.OwnerUserId = u.Id\n-- We want to give the info for the user who owns the post on the same line\n\nWHERE p.CreationDate BETWEEN '2014-07-01' AND '2014-07-31'\n  AND p.PostTypeId = 1\n  AND u.Reputation < 500\n-- If we changed this to 'u.CreationDate' what do you think happens?\n-- Try it and find out!\n\n\n-- Query written by jmac",
        "CreationDate": "2014-10-06 02:22:43",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 230851,
        "Title": "Limiting Posts by Date and Rep, Parameterized (Tutorial)",
        "Description": null,
        "QueryBody": "SELECT  p.Title, p.Id, u.DisplayName, u.Reputation\nFROM Posts p \nJOIN Users u ON p.OwnerUserId = u.Id\n-- We want to give the info for the user who owns the post on the same line\n\nWHERE p.CreationDate BETWEEN ##StartDate:string## AND ##EndDate:string##\n  AND p.PostTypeId = 1\n  AND u.Reputation < ##MaxReputation:int##\n\n-- StartDate: Starting date, YYYY-MM-DD\n-- EndDate: Ending date, YYYY-MM-DD, must be later than StartDate\n-- MaxReputation: Show results for users with reputation below this value\n\n-- Based on a query written by jmac",
        "CreationDate": "2014-10-06 04:01:56",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 231267,
        "Title": "User Activity Histogram (for post creation, post edit, commenting)",
        "Description": null,
        "QueryBody": "SELECT  pc.monthw, pc.c [Post Creation], ph.c [Post Edit], Monthw.c [Comment Creation]\nfrom \n  (SELECT DATENAME(month, CreationDate) Monthw, count(id) c\n  from Posts\n  where OwnerUserId = ##UserId##\n  group by DATENAME(month, CreationDate)) pc,\n  (SELECT DATENAME(month, CreationDate) Monthw, count(id) c\n  from PostHistory\n  where UserId = ##UserId## and PostHistoryTypeId >= 4 and PostHistoryTypeId <= 6\n  group by DATENAME(month, CreationDate)) ph,\n  (SELECT DATENAME(month, CreationDate) Monthw, count(id) c\n  from Comments\n  where UserId = ##UserId##\n  group by DATENAME(month, CreationDate)) Monthw\nwhere pc.monthw = ph.monthw and Monthw.monthw = pc.monthw\norder by pc.monthw",
        "CreationDate": "2014-10-07 16:53:39",
        "validated": false,
        "QueryBody_Original": "SELECT  pc.monthw, pc.c [Post Creation], ph.c [Post Edit], Monthw.c [Comment Creation]\nfrom \n  (SELECT DATENAME(month, CreationDate) Monthw, count(id) c\n  from Posts\n  where OwnerUserId = ##UserId##\n  group by DATENAME(month, CreationDate)) pc,\n  (SELECT DATENAME(month, CreationDate) Monthw, count(id) c\n  from PostHistory\n  where UserId = ##UserId## and PostHistoryTypeId >= 4 and PostHistoryTypeId <= 6\n  group by DATENAME(month, CreationDate)) ph,\n  (SELECT DATENAME(month, CreationDate) Monthw, count(id) c\n  from Comments\n  where UserId = ##UserId##\n  group by DATENAME(month, CreationDate)) Monthw\nwhere pc.monthw = ph.monthw and Monthw.monthw = pc.monthw\norder by pc.monthw"
    },
    {
        "QuerySetId": 231425,
        "Title": "Number of posts by reputation range",
        "Description": null,
        "QueryBody": "SELECT  round(u.Reputation\/##BucketSize?1##*##BucketSize##, -1) [Rep level],\n       count(distinct u.Id) Users,\n       count(distinct p.Id) Posts\n      ,count(distinct p.Id) \/ count(distinct u.Id) [Avg. Posts]\n--     Atrapalha a visualiza\u00e7\u00e3o do gr\u00e1fico por conta da escala\nfrom Users u\n  left join Posts p on p.OwnerUserId = u.Id\n    and p.PostTypeId = 1\n    and p.ClosedDate is null\nwhere round(u.Reputation\/##BucketSize?1##*##BucketSize##, -1) > 300\ngroup by round(u.Reputation\/##BucketSize##*##BucketSize##, -1)\norder by [Rep level]",
        "CreationDate": "2014-10-08 01:54:56",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 231657,
        "Title": "How much attention to Bounties generate on posts",
        "Description": null,
        "QueryBody": "DECLARE  @StartDate datetime = '2015-01-01';\nDECLARE @EndDate datetime = '2015-12-31';\n\nselect avg(p.viewcount), v.bountyamount\n  from posts as p\n  inner join votes v on p.id = v.postid\n  where posttypeid = 1 and v.votetypeid = 8\n    and p.creationdate >= @StartDate\n    and p.creationdate <= @EndDate\n  group by v.bountyamount",
        "CreationDate": "2016-11-19 14:56:58",
        "validated": false,
        "QueryBody_Original": "DECLARE  @StartDate datetime = '2015-01-01';\nDECLARE @EndDate datetime = '2015-12-31';\n\nselect avg(p.viewcount), v.bountyamount\n  from posts as p\n  inner join votes v on p.id = v.postid\n  where posttypeid = 1 and v.votetypeid = 8\n    and p.creationdate >= @StartDate\n    and p.creationdate <= @EndDate\n  group by v.bountyamount"
    },
    {
        "QuerySetId": 232360,
        "Title": "My Comments with any upvote",
        "Description": null,
        "QueryBody": "SELECT \n  ISNULL(P.Title, Q.Title) QTitle\n  , CASE WHEN P.ParentId IS NULL THEN P.Id ELSE Q.Id END QId\n  , P.Id PostId\n  , C.Text\n  , C.Score\n  , C.CreationDate\n  , 'http:\/\/stackoverflow.com\/questions\/' + CONVERT(nvarchar(100), P.Id) 'Link'\nFROM\n  Comments C\n  INNER JOIN Posts P ON P.Id = C.PostId\n  INNER JOIN Users U ON U.Id = C.UserId\n  LEFT JOIN Posts Q ON Q.Id = P.ParentId\n WHERE\n   C.Score > 0\n   AND U.DisplayName = '##UName##'\n ORDER BY\n   C.Score Desc\n   , C.CreationDate DESC",
        "CreationDate": "2014-10-11 13:39:24",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 232407,
        "Title": "Comments like accepting, with keywords",
        "Description": null,
        "QueryBody": "SELECT \n    Id AS [Comment Link],\n    Score,\n    CreationDate,\n    LEN(Text)\nFROM\n    Comments\nWHERE Text LIKE '%accepting%'\nAND LEN(Text) >= ##MinLength:int?40##\nAND LEN(Text) <  ##MaxLength:int?55##\n  -- to decrease the size of outputs,\n  -- increase gradually over use\nAND (\n  Text LIKE 'Thank%' OR\n  Text LIKE 'Please%' OR\n  Text LIKE '%-1%'\n)\nORDER BY\n  Score DESC,\n  LEN(Text)",
        "CreationDate": "2014-10-22 20:46:55",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 232445,
        "Title": "Highest rep for new users",
        "Description": null,
        "QueryBody": "SELECT \nId, DisplayName, Reputation, CreationDate, CONVERT(int, GETDATE()-CreationDate) as Days\nfrom Users\nwhere DateAdd(day, -100, GETDATE())<=CreationDate\norder by Reputation desc",
        "CreationDate": "2014-10-13 13:40:15",
        "validated": false,
        "QueryBody_Original": "SELECT \nId, DisplayName, Reputation, CreationDate, CONVERT(int, GETDATE()-CreationDate) as Days\nfrom Users\nwhere DateAdd(day, -100, GETDATE())<=CreationDate\norder by Reputation desc"
    },
    {
        "QuerySetId": 232709,
        "Title": "Questions sorted by 'frequency' (the API doesn't seem to provide this sorting option)",
        "Description": null,
        "QueryBody": "SELECT  TOP 25 Id as [Post Link], Tags from Posts where PostTypeId = 1 order by score desc\n\n-- sorting by 'frequency' (how many linked to\/from), which isn't available via the API\nSELECT TOP 25 Id as [Post Link], AcceptedAnswerId, (SELECT LEFT(Body, 100) from Posts where Id = p.AcceptedAnswerId) AS AcceptedAnswerTrimmed, (SELECT count(*) from PostLinks where PostId = p.Id or RelatedPostId = p.Id) as LinkCount, Score, CreationDate, LastActivityDate, AnswerCount, CommentCount, Tags from Posts p where PostTypeId = 1 order by (SELECT count(*) from PostLinks where PostId = p.Id or RelatedPostId = p.Id) desc\n\n-- PostTypes - 1: Question, 2: Answer, 3: Wiki, ...\n-- VoteTypes - 1: AcceptedByOriginator, 2: UpMod, 3: DownMod, 5: Favorite, 6: Close, ...",
        "CreationDate": "2014-10-14 00:54:11",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 232763,
        "Title": "Top N most upvoted answers",
        "Description": null,
        "QueryBody": "SELECT  Top ##HowMany##\n  v.PostId as [Post Link], Count(*) as Upvotes\nfrom Votes v\ninner Join Posts p on v.PostId = p.Id\nwhere v.VoteTypeId = 2 and p.PostTypeId = 2\nGroup by v.PostId\nOrder by Count(*) Desc",
        "CreationDate": "2018-11-27 20:13:34",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 232959,
        "Title": "Find posts where X is the only tag",
        "Description": "Finds posts where (user input) is the only tag. No results means that the tag is never used stand-alone, and might be a meta-tag.",
        "QueryBody": "DECLARE  @targetTagId int;\n\nselect @targetTagId = t.Id\nfrom Tags t\nwhere t.TagName = '##TargetTagName##';\n\n;with QuestionsWithTargetTag as\n(\n  select p.Id\n  from Posts p\n  inner join PostTags pt on p.Id = pt.PostId and pt.TagId = @targetTagId\n  where p.PostTypeId = 1 --question\n)\nselect qwtt.Id [Post Link]\nfrom QuestionsWithTargetTag qwtt\ninner join Posts p on p.Id = qwtt.Id\nwhere p.Id not in (\n  select qwtt2.Id\n  from QuestionsWithTargetTag qwtt2\n  inner join PostTags pt on qwtt2.Id = pt.PostId and pt.TagId != @targetTagId)",
        "CreationDate": "2014-10-13 21:02:16",
        "validated": false,
        "QueryBody_Original": "DECLARE  @targetTagId int;\n\nselect @targetTagId = t.Id\nfrom Tags t\nwhere t.TagName = '##TargetTagName##';\n\n;with QuestionsWithTargetTag as\n(\n  select p.Id\n  from Posts p\n  inner join PostTags pt on p.Id = pt.PostId and pt.TagId = @targetTagId\n  where p.PostTypeId = 1 --question\n)\nselect qwtt.Id [Post Link]\nfrom QuestionsWithTargetTag qwtt\ninner join Posts p on p.Id = qwtt.Id\nwhere p.Id not in (\n  select qwtt2.Id\n  from QuestionsWithTargetTag qwtt2\n  inner join PostTags pt on qwtt2.Id = pt.PostId and pt.TagId != @targetTagId)"
    },
    {
        "QuerySetId": 234879,
        "Title": "Information on tags (included deleted ones)",
        "Description": null,
        "QueryBody": "SELECT  e.body, w.body, \ne.id, e.CreationDate, e.LastEditorUserId AS [User Link], e.LastEditDate,\nw.id, w.CreationDate, w.LastEditorUserId AS [User Link], w.LastEditDate\n  from tags t\n  left outer join posts e\n    on t.excerptpostid = e.id  \n  left outer join posts w\n    on t.wikipostid = w.id\n where t.tagname = ##tagname:string##",
        "CreationDate": "2017-08-04 15:48:50",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 235148,
        "Title": "Total score of my non-CW posts",
        "Description": null,
        "QueryBody": "SELECT   sum(Score) as [Total Score], count(Score) as [Number of Posts] from Posts\nwhere CommunityOwnedDate is null \nand OwnerUserId = ##UserId##",
        "CreationDate": "2014-10-16 03:53:50",
        "validated": false,
        "QueryBody_Original": "SELECT   sum(Score) as [Total Score], count(Score) as [Number of Posts] from Posts\nwhere CommunityOwnedDate is null \nand OwnerUserId = ##UserId##"
    },
    {
        "QuerySetId": 235740,
        "Title": "Up\/down votes for my questions",
        "Description": "Up\/down vote count for my answers\r\n",
        "QueryBody": "SELECT \n    SUM(CASE WHEN votes.votetypeid = 2 THEN 1 ELSE 0 END) AS UpVotes,\n    SUM(CASE WHEN votes.votetypeid = 3 THEN 1 ELSE 0 END) AS DownVotes,\n    SUM(CASE WHEN votes.votetypeid IN (2, 3) THEN 1 ELSE 0 END) AS TotalVotes\nFROM votes\nINNER JOIN posts ON votes.postid = posts.id\nWHERE\n    posts.posttypeid = 1 AND\n    posts.owneruserid = ##UserId##",
        "CreationDate": "2016-05-13 03:21:54",
        "validated": false,
        "QueryBody_Original": "SELECT \n    SUM(CASE WHEN votes.votetypeid = 2 THEN 1 ELSE 0 END) AS UpVotes,\n    SUM(CASE WHEN votes.votetypeid = 3 THEN 1 ELSE 0 END) AS DownVotes,\n    SUM(CASE WHEN votes.votetypeid IN (2, 3) THEN 1 ELSE 0 END) AS TotalVotes\nFROM votes\nINNER JOIN posts ON votes.postid = posts.id\nWHERE\n    posts.posttypeid = 1 AND\n    posts.owneruserid = ##UserId##"
    },
    {
        "QuerySetId": 235874,
        "Title": "My Comments on Foreign Posts by Score",
        "Description": null,
        "QueryBody": "DECLARE  @MyUserID INT = ##UserID:int##\n\nSELECT\n    c.PostId AS [Post Link],\n    c.Score AS [Score],\n    c.Id AS [Comment Link],\n    c.CreationDate AS [Creation Date]\nFROM\n    Comments c\n    LEFT JOIN Posts p ON c.PostId = p.Id\n    LEFT JOIN Posts q ON p.ParentId = q.Id\nWHERE\n    c.UserId = @MyUserID\n    AND p.OwnerUserId <> @MyUserID\n    AND (q.OwnerUserId IS NULL OR q.OwnerUserId <> @MyUserID)\nORDER BY\n    c.Score, c.CreationDate\nDESC",
        "CreationDate": "2014-10-17 23:42:32",
        "validated": false,
        "QueryBody_Original": "DECLARE  @MyUserID INT = ##UserID:int##\n\nSELECT\n    c.PostId AS [Post Link],\n    c.Score AS [Score],\n    c.Id AS [Comment Link],\n    c.CreationDate AS [Creation Date]\nFROM\n    Comments c\n    LEFT JOIN Posts p ON c.PostId = p.Id\n    LEFT JOIN Posts q ON p.ParentId = q.Id\nWHERE\n    c.UserId = @MyUserID\n    AND p.OwnerUserId <> @MyUserID\n    AND (q.OwnerUserId IS NULL OR q.OwnerUserId <> @MyUserID)\nORDER BY\n    c.Score, c.CreationDate\nDESC"
    },
    {
        "QuerySetId": 235939,
        "Title": "Users that logged in last month and % of answers to closed questions, excluding duplicates",
        "Description": null,
        "QueryBody": "DECLARE  @monthago datetime = dateadd(month, -1, getdate());\n\nselect u.id, \n       max(u.LastAccessDate),\n       count(case when q.closeddate is not null then 1 else null end) 'answers on closed', \n       count(*) 'total',\n       count(case when q.closeddate is not null then 1 else null end) * 100.0 \/ count(*) as '%'\nfrom users u\n     join posts a on  a.owneruserid = u.id\n     join posts q on  a.parentid = q.id\nwhere not exists(select * from posthistory where q.id = postid and comment in ('102', '2')) and\n      u.LastAccessDate >= @monthago\ngroup by u.id \n      having count(*) > 10 and \n             count(case when q.closeddate is not null then 1 else null end) * 100.0 \/ count(*) >= 20\n      order by '%' desc",
        "CreationDate": "2014-10-18 15:53:15",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 236884,
        "Title": "Questions where everything is downvoted",
        "Description": null,
        "QueryBody": "SELECT  p.Id AS [Post Link] \nFROM Posts p \nWHERE (\n  p.PostTypeId = 1 AND\n  p.AnswerCount>0 AND\n  p.Score <= ##MaxScore## AND\n  ##MaxScore## >= ALL (\n    SELECT a.Score FROM Posts a WHERE (\n      a.ParentId = p.Id\n    ) \n  )\n)",
        "CreationDate": "2014-10-20 04:37:06",
        "validated": false,
        "QueryBody_Original": "SELECT  p.Id AS [Post Link] \nFROM Posts p \nWHERE (\n  p.PostTypeId = 1 AND\n  p.AnswerCount>0 AND\n  p.Score <= ##MaxScore## AND\n  ##MaxScore## >= ALL (\n    SELECT a.Score FROM Posts a WHERE (\n      a.ParentId = p.Id\n    ) \n  )\n)"
    },
    {
        "QuerySetId": 237554,
        "Title": "Questions where everything is upvoted",
        "Description": null,
        "QueryBody": "SELECT  p.Id AS [Post Link] \nFROM Posts p \nWHERE (\n  p.PostTypeId = 1 AND\n  p.AnswerCount>0 AND\n  p.Score >= ##MinScore## AND\n  ##MinScore## <= ALL (\n    SELECT a.Score FROM Posts a WHERE (\n      a.ParentId = p.Id\n    ) \n  )\n)",
        "CreationDate": "2014-10-21 00:23:24",
        "validated": false,
        "QueryBody_Original": "SELECT  p.Id AS [Post Link] \nFROM Posts p \nWHERE (\n  p.PostTypeId = 1 AND\n  p.AnswerCount>0 AND\n  p.Score >= ##MinScore## AND\n  ##MinScore## <= ALL (\n    SELECT a.Score FROM Posts a WHERE (\n      a.ParentId = p.Id\n    ) \n  )\n)"
    },
    {
        "QuerySetId": 237791,
        "Title": "Explainer Refiner Illuminator Badge Progress",
        "Description": "These badges are awarded based on the number of questions both edited and answered within 12 hours where the answer score is positive. Edited questions with multiple positive score answers only get counted once.",
        "QueryBody": "SELECT \n  case when edits >= 1 then 'Yes' else concat(edits, '\/', 1) end as Explainer,\n  case when edits >= 50 then 'Yes' else concat(edits, '\/', 50) end as Refiner,\n  case when edits >= 500 then 'Yes' else concat(edits, '\/', 500) end as Illuminator\nfrom (SELECT count(distinct q.Id) as edits\n  from Posts a\n  join Posts q on q.Id = a.ParentId\n    and q.PostTypeId = 1\n    and q.ClosedDate is null\n    and (q.OwnerUserId != ##UserId## or q.OwnerUserId is null)\n  join PostHistory ph on ph.PostId = a.ParentId\n    and ph.PostHistoryTypeId in (4,5)\n    and ph.UserId = ##UserId##\n    and abs(datediff(hh, ph.CreationDate, a.CreationDate)) <= 12\n  where a.OwnerUserId = ##UserId##\n  and a.PostTypeId = 2\n  and a.Score >= 1\n) x",
        "CreationDate": "2014-10-21 17:54:09",
        "validated": false,
        "QueryBody_Original": "SELECT \n  case when edits >= 1 then 'Yes' else concat(edits, '\/', 1) end as Explainer,\n  case when edits >= 50 then 'Yes' else concat(edits, '\/', 50) end as Refiner,\n  case when edits >= 500 then 'Yes' else concat(edits, '\/', 500) end as Illuminator\nfrom (SELECT count(distinct q.Id) as edits\n  from Posts a\n  join Posts q on q.Id = a.ParentId\n    and q.PostTypeId = 1\n    and q.ClosedDate is null\n    and (q.OwnerUserId != ##UserId## or q.OwnerUserId is null)\n  join PostHistory ph on ph.PostId = a.ParentId\n    and ph.PostHistoryTypeId in (4,5)\n    and ph.UserId = ##UserId##\n    and abs(datediff(hh, ph.CreationDate, a.CreationDate)) <= 12\n  where a.OwnerUserId = ##UserId##\n  and a.PostTypeId = 2\n  and a.Score >= 1\n) x"
    },
    {
        "QuerySetId": 238075,
        "Title": "Comments asking \"where\" in the \"electrical\" tag",
        "Description": "Looking for comments that match a given search term (default is 'where') on questions marked with a given tag (default is 'electrical').\r\n",
        "QueryBody": "DECLARE  @tagname as varchar(25) = ##tagname:string?electrical##;\n\n-- Search term that we're looking for in a comment.\nDECLARE @searchterm as varchar = ##searchterm:string?where##;\n\nDECLARE @tagid as int;\n\n-- Get the tag id from the tag name\nselect @tagid = Id from Tags\n  where TagName = lower(@tagname);\n\n-- Get the list of posts with that tag\nwith taggedQ as (\n  select PostId from PostTags\n  where TagId = @tagid\n)\n-- Find those posts that have comments matching the search term.\n  select \n    Comments.PostId,\n    Comments.PostId as [Post Link],\n    Comments.Text\n  from Comments inner join taggedQ on Comments.PostId = taggedQ.PostId\n  where lower(Comments.Text) like concat('%', lower(@searchterm), '%')\n  order by comments.CreationDate",
        "CreationDate": "2014-10-23 05:05:32",
        "validated": false,
        "QueryBody_Original": "DECLARE  @tagname as varchar(25) = ##tagname:string?electrical##;\n\n-- Search term that we're looking for in a comment.\nDECLARE @searchterm as varchar = ##searchterm:string?where##;\n\nDECLARE @tagid as int;\n\n-- Get the tag id from the tag name\nselect @tagid = Id from Tags\n  where TagName = lower(@tagname);\n\n-- Get the list of posts with that tag\nwith taggedQ as (\n  select PostId from PostTags\n  where TagId = @tagid\n)\n-- Find those posts that have comments matching the search term.\n  select \n    Comments.PostId,\n    Comments.PostId as [Post Link],\n    Comments.Text\n  from Comments inner join taggedQ on Comments.PostId = taggedQ.PostId\n  where lower(Comments.Text) like concat('%', lower(@searchterm), '%')\n  order by comments.CreationDate"
    },
    {
        "QuerySetId": 238140,
        "Title": "Search open bounties by tags.",
        "Description": null,
        "QueryBody": "DECLARE  @text VARCHAR(256) = ##WhitespaceSeparatedTags:String##;\n\nSELECT \n    vob.BountyAmount AS [Bounty],\n    LEFT(DATEADD(d, 7, vob.CreationDate), 6) AS [Until],\n    p.Id as [Post Link],\n    p.Tags\n\nFROM Posts p\nLEFT JOIN Votes vob ON vob.PostId = p.Id AND vob.VoteTypeId = 8\nLEFT JOIN PostTags pt ON p.Id = pt.PostId\nLEFT JOIN Tags t ON pt.TagId = t.Id\n\nWHERE\n-- bounty isn't closed\np.ClosedDate IS NULL\nAND NOT EXISTS (SELECT *\n                FROM Votes vcb\n                WHERE vcb.PostId = p.Id AND vcb.VoteTypeId = 9)\n-- bounty didn't expire\nAND DATEADD(d, 7, vob.CreationDate) >= GETDATE()\n-- question contains one of the given tags\nAND CONCAT(@text, ' ') LIKE CONCAT('%', t.TagName COLLATE DATABASE_DEFAULT, ' %')\n\nORDER BY vob.CreationDate ASC",
        "CreationDate": "2014-10-23 16:13:07",
        "validated": false,
        "QueryBody_Original": "DECLARE  @text VARCHAR(256) = ##WhitespaceSeparatedTags:String##;\n\nSELECT \n    vob.BountyAmount AS [Bounty],\n    LEFT(DATEADD(d, 7, vob.CreationDate), 6) AS [Until],\n    p.Id as [Post Link],\n    p.Tags\n\nFROM Posts p\nLEFT JOIN Votes vob ON vob.PostId = p.Id AND vob.VoteTypeId = 8\nLEFT JOIN PostTags pt ON p.Id = pt.PostId\nLEFT JOIN Tags t ON pt.TagId = t.Id\n\nWHERE\n-- bounty isn't closed\np.ClosedDate IS NULL\nAND NOT EXISTS (SELECT *\n                FROM Votes vcb\n                WHERE vcb.PostId = p.Id AND vcb.VoteTypeId = 9)\n-- bounty didn't expire\nAND DATEADD(d, 7, vob.CreationDate) >= GETDATE()\n-- question contains one of the given tags\nAND CONCAT(@text, ' ') LIKE CONCAT('%', t.TagName COLLATE DATABASE_DEFAULT, ' %')\n\nORDER BY vob.CreationDate ASC"
    },
    {
        "QuerySetId": 238183,
        "Title": "Comments like \"What have you tried\" where an accepted answer is present",
        "Description": null,
        "QueryBody": "SELECT \n    c.Id AS [Comment Link],\n    c.Score,\n    c.CreationDate,\n    LEN(Text)\nFROM\n    Comments c\n      INNER JOIN Posts p\n      ON c.PostId = p.Id\nWHERE Text LIKE 'What have you tried%'\nAND p.AcceptedAnswerId IS NOT NULL\nAND LEN(Text) < 33\nAND p.CommentCount < ##CommentThread:int?4##\nORDER BY\n  LEN(Text), c.Score DESC, c.CreationDate",
        "CreationDate": "2014-11-02 20:26:07",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 238961,
        "Title": "Question percentile by view and votes on its accepted answer",
        "Description": null,
        "QueryBody": "WITH  ViewsScores as (\nselect Q.Id, Q.ViewCount, A.Score\nfrom Posts as Q, Posts as A\nwhere Q.AcceptedAnswerId = A.Id \n  and Q.Id = A.ParentId\n  and Q.PostTypeId = 1\n  and A.PostTypeId = 2\n)\n,AllViewsScores as (\nselect AllCount = COUNT(*)\nfrom ViewsScores\n)\n,TopViewsScores as (\nselect Count = COUNT(*)\nfrom ViewsScores\nwhere ViewCount > ##ViewCount?13409##\n  and Score > ##AcceptedAnswerScore?20##\n) \nSELECT 100*CAST(Count AS decimal(20, 5)) \/ (SELECT AllCount FROM AllViewsScores) AS Percentile\nFROM TopViewsScores",
        "CreationDate": "2014-10-27 10:36:33",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 238978,
        "Title": "Comments like \"What have you tried?\" on accepted answer post",
        "Description": null,
        "QueryBody": "SELECT  TOP 100\n    c.Text,\n    c.Id AS [Comment Link],\n    p.Score,\n    c.CreationDate,\n    p.ViewCount,\n    LEN(c.Text) as 'Len',\n    p.Id AS [Post Link]\nFROM\n    Comments c\n      INNER JOIN Posts p\n      ON c.PostId = p.Id\nWHERE \n    c.Text LIKE '%hat %ha% tr%'\n    AND c.UserId = ##UserId##\nORDER BY p.CreationDate DESC",
        "CreationDate": "2014-11-02 09:01:02",
        "validated": false,
        "QueryBody_Original": "SELECT  TOP 100\n    c.Text,\n    c.Id AS [Comment Link],\n    p.Score,\n    c.CreationDate,\n    p.ViewCount,\n    LEN(c.Text) as 'Len',\n    p.Id AS [Post Link]\nFROM\n    Comments c\n      INNER JOIN Posts p\n      ON c.PostId = p.Id\nWHERE \n    c.Text LIKE '%hat %ha% tr%'\n    AND c.UserId = ##UserId##\nORDER BY p.CreationDate DESC"
    },
    {
        "QuerySetId": 239011,
        "Title": "Approve Rate on Suggested User's Edits",
        "Description": null,
        "QueryBody": "DECLARE  @MyUserID INT = ##UserID:int##\n\nSELECT\nCAST(COUNT(CASE WHEN ApprovalDate IS NOT NULL THEN 1 END) AS DECIMAL) \/ COUNT(CASE WHEN ApprovalDate IS NOT NULL OR RejectionDate IS NOT NULL THEN 1 END) AS 'Approval Rate',\nCAST(COUNT(CASE WHEN v.VoteTypeId = 2 THEN 1 END) AS DECIMAL) \/ COUNT(DISTINCT v.Id) AS 'Approval Vote Rate'\nFROM SuggestedEdits e\nLEFT JOIN SuggestedEditVotes v ON e.Id = v.SuggestedEditId\nWHERE e.OwnerUserId = @MyUserID",
        "CreationDate": "2014-10-27 19:19:02",
        "validated": false,
        "QueryBody_Original": "DECLARE  @MyUserID INT = ##UserID:int##\n\nSELECT\nCAST(COUNT(CASE WHEN ApprovalDate IS NOT NULL THEN 1 END) AS DECIMAL) \/ COUNT(CASE WHEN ApprovalDate IS NOT NULL OR RejectionDate IS NOT NULL THEN 1 END) AS 'Approval Rate',\nCAST(COUNT(CASE WHEN v.VoteTypeId = 2 THEN 1 END) AS DECIMAL) \/ COUNT(DISTINCT v.Id) AS 'Approval Vote Rate'\nFROM SuggestedEdits e\nLEFT JOIN SuggestedEditVotes v ON e.Id = v.SuggestedEditId\nWHERE e.OwnerUserId = @MyUserID"
    },
    {
        "QuerySetId": 239688,
        "Title": "Question\/post ratio by post sequence",
        "Description": null,
        "QueryBody": "DECLARE  @epoch datetime = '2010-10-19';\n\nwith sample_posts as(\nselect rank () over (partition by OwnerUserId order by CreationDate) sequence, \n       PostTypeId\nfrom Posts\nwhere PostTypeId in (1,2)\n--      and CreationDate > @epoch\n)\n\nselect --count(*) N, \n       sequence,\n       sum(case when PostTypeId = 1 then 1.0 end)\/count(*) q_ratio\n       \nfrom sample_posts\nwhere sequence <= 100\ngroup by sequence\norder by sequence",
        "CreationDate": "2014-10-31 03:54:27",
        "validated": false,
        "QueryBody_Original": "DECLARE  @epoch datetime = '2010-10-19';\n\nwith sample_posts as(\nselect rank () over (partition by OwnerUserId order by CreationDate) sequence, \n       PostTypeId\nfrom Posts\nwhere PostTypeId in (1,2)\n--      and CreationDate > @epoch\n)\n\nselect --count(*) N, \n       sequence,\n       sum(case when PostTypeId = 1 then 1.0 end)\/count(*) q_ratio\n       \nfrom sample_posts\nwhere sequence <= 100\ngroup by sequence\norder by sequence"
    },
    {
        "QuerySetId": 241109,
        "Title": "Unanswered questions favorited by high-rep users",
        "Description": null,
        "QueryBody": "SELECT  p.Id as [Post Link], p.Score, p.CommentCount, p.CreationDate from Posts p, Users u, Votes v \nwhere v.VoteTypeId=5 \n  and v.PostId=p.Id \n  and v.UserId=u.Id \n  and u.Reputation >= ##MinRep##\n  and p.AnswerCount = 0 \n  and p.ClosedDate is Null\ngroup by p.Id, p.Score, p.CommentCount, p.CreationDate\norder by p.CreationDate desc",
        "CreationDate": "2014-10-31 05:48:13",
        "validated": false,
        "QueryBody_Original": "SELECT  p.Id as [Post Link], p.Score, p.CommentCount, p.CreationDate from Posts p, Users u, Votes v \nwhere v.VoteTypeId=5 \n  and v.PostId=p.Id \n  and v.UserId=u.Id \n  and u.Reputation >= ##MinRep##\n  and p.AnswerCount = 0 \n  and p.ClosedDate is Null\ngroup by p.Id, p.Score, p.CommentCount, p.CreationDate\norder by p.CreationDate desc"
    },
    {
        "QuerySetId": 241723,
        "Title": "Find recent users by location",
        "Description": null,
        "QueryBody": "SELECT  Id as [User Link], * from users\nwhere \n(lower(left(Location, len(##SearchLocation:string##))) = lower(##SearchLocation:string##)\nor lower(right(Location, len(##SearchLocation:string##))) = lower(##SearchLocation:string##))\n    --and DateDiff(day, LastAccessDate, getdate()) <= 30",
        "CreationDate": "2015-04-23 22:18:55",
        "validated": false,
        "QueryBody_Original": "SELECT  Id as [User Link], * from users\nwhere \n(lower(left(Location, len(##SearchLocation:string##))) = lower(##SearchLocation:string##)\nor lower(right(Location, len(##SearchLocation:string##))) = lower(##SearchLocation:string##))\n    --and DateDiff(day, LastAccessDate, getdate()) <= 30"
    },
    {
        "QuerySetId": 242360,
        "Title": "Active users from given location",
        "Description": null,
        "QueryBody": "SELECT  \ncount(Id)\nFROM  Users u\nWHERE UPPER(u.Location) LIKE UPPER(##loc:string?USA##)",
        "CreationDate": "2015-08-09 01:34:15",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 242397,
        "Title": "Longest answers by user with lengths, votes, and punch-costs",
        "Description": null,
        "QueryBody": "SELECT \n  p.id as [Post Link],\n  Len(p.Body) AS Length,\n  Score AS Votes,\n  Convert(int, Len(p.Body) \/ (1+Score)     ) AS Cost,\n  Convert(int, Len(p.Body) * (1+Score)\/1000) AS Punch,\n   Convert(int, ( Len(p.Body)\/(1+Score)) \/ 1 + (Len(p.Body) * (1+Score)\/1000)) AS PunchCost\n  \nFROM Users u, Posts p \nWHERE p.OwnerUserId = ##UserId##\n  AND u.Id = p.OwnerUserId\n  AND p.PostTypeId = 2\n  AND Score >= 0\n\nORDER BY  PunchCost DESC, Length DESC,  Cost DESC, Punch DESC, Votes DESC",
        "CreationDate": "2014-11-04 21:45:11",
        "validated": false,
        "QueryBody_Original": "SELECT \n  p.id as [Post Link],\n  Len(p.Body) AS Length,\n  Score AS Votes,\n  Convert(int, Len(p.Body) \/ (1+Score)     ) AS Cost,\n  Convert(int, Len(p.Body) * (1+Score)\/1000) AS Punch,\n   Convert(int, ( Len(p.Body)\/(1+Score)) \/ 1 + (Len(p.Body) * (1+Score)\/1000)) AS PunchCost\n  \nFROM Users u, Posts p \nWHERE p.OwnerUserId = ##UserId##\n  AND u.Id = p.OwnerUserId\n  AND p.PostTypeId = 2\n  AND Score >= 0\n\nORDER BY  PunchCost DESC, Length DESC,  Cost DESC, Punch DESC, Votes DESC"
    },
    {
        "QuerySetId": 242450,
        "Title": "Longest answers by user with votes and chars-per-vote",
        "Description": null,
        "QueryBody": "SELECT \n  p.id as [Post Link],\n  Len(p.Body) AS Length\n\nFROM Users u, Posts p \nWHERE p.OwnerUserId = ##UserId##\n  AND u.Id = p.OwnerUserId\n  AND p.PostTypeId = 2\n  AND Score >= 0",
        "CreationDate": "2017-04-09 21:10:10",
        "validated": false,
        "QueryBody_Original": "SELECT \n  p.id as [Post Link],\n  Len(p.Body) AS Length\n\nFROM Users u, Posts p \nWHERE p.OwnerUserId = ##UserId##\n  AND u.Id = p.OwnerUserId\n  AND p.PostTypeId = 2\n  AND Score >= 0"
    },
    {
        "QuerySetId": 242721,
        "Title": "Select all comments by UserId",
        "Description": null,
        "QueryBody": "DECLARE  @UserId int = ##UserId##\n\nSELECT \n    *\nFROM \n    Comments\nWHERE \n    UserId = @UserId\nORDER BY \n    Score DESC",
        "CreationDate": "2014-11-05 20:24:00",
        "validated": false,
        "QueryBody_Original": "DECLARE  @UserId int = ##UserId##\n\nSELECT \n    *\nFROM \n    Comments\nWHERE \n    UserId = @UserId\nORDER BY \n    Score DESC"
    },
    {
        "QuerySetId": 242828,
        "Title": "Tag statistics for JS Frameworks",
        "Description": "Views, Score and Answers per Game (with limited blacklist for other tags)\r\n",
        "QueryBody": "DECLARE  @total float\nSELECT @total = Sum(Cast(ViewCount as bigint)) FROM Posts WHERE PostTypeId = 1\n\nSELECT \n    Tags.Tagname AS Tag, \n    Count(*) AS Questions, \n    Sum(Cast(Posts.ViewCount as bigint)) AS Views,\n    str(100 * Sum(Cast(Posts.ViewCount as bigint)) \/ @total,6,2) AS percentOfSite,\n    Sum(Posts.Score) AS Score,\n    Sum(Posts.AnswerCount) AS Answers,\n    Sum(Cast(Posts.ViewCount as bigint)) \/ Count(*) AS AvgViews,\n    str(Sum(Posts.Score) \/ Cast(Count(*) AS Float),6,2) AS AvgScore,\n    str(Sum(Posts.AnswerCount) \/ Cast(Count(*) AS Float),6,2) AS AvgAnswers\n  FROM Posts \n  JOIN PostTags ON Posts.Id = PostTags.PostId\n  JOIN Tags ON PostTags.TagId = Tags.Id\n  WHERE Posts.PostTypeId = 1 \n  GROUP BY Tags.Tagname\n  ORDER BY Views DESC",
        "CreationDate": "2014-11-06 00:44:24",
        "validated": false,
        "QueryBody_Original": "DECLARE  @total float\nSELECT @total = Sum(Cast(ViewCount as bigint)) FROM Posts WHERE PostTypeId = 1\n\nSELECT \n    Tags.Tagname AS Tag, \n    Count(*) AS Questions, \n    Sum(Cast(Posts.ViewCount as bigint)) AS Views,\n    str(100 * Sum(Cast(Posts.ViewCount as bigint)) \/ @total,6,2) AS percentOfSite,\n    Sum(Posts.Score) AS Score,\n    Sum(Posts.AnswerCount) AS Answers,\n    Sum(Cast(Posts.ViewCount as bigint)) \/ Count(*) AS AvgViews,\n    str(Sum(Posts.Score) \/ Cast(Count(*) AS Float),6,2) AS AvgScore,\n    str(Sum(Posts.AnswerCount) \/ Cast(Count(*) AS Float),6,2) AS AvgAnswers\n  FROM Posts \n  JOIN PostTags ON Posts.Id = PostTags.PostId\n  JOIN Tags ON PostTags.TagId = Tags.Id\n  WHERE Posts.PostTypeId = 1 \n  GROUP BY Tags.Tagname\n  ORDER BY Views DESC"
    },
    {
        "QuerySetId": 243418,
        "Title": "Questions with many downvoted answers.",
        "Description": null,
        "QueryBody": "WITH  the largest number of downvoted answers.\n\nselect TOP 30 count(*) as 'DVed Answers', ParentId as [Post Link] from Posts where \nPostTypeID = 2 and -- is an answer\nScore < 0 -- Negative vote total\ngroup by ParentId\norder by count(*) desc",
        "CreationDate": "2014-11-07 07:23:12",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 243504,
        "Title": "Comments contain word by date",
        "Description": null,
        "QueryBody": "SELECT \n    Id AS [Comment Link],\n    Score,\n    CreationDate as Date\nFROM\n    Comments\nWHERE\n    text like '%##Word##%' COLLATE SQL_Latin1_General_CP1_CI_AS\nAND\n    CreationDate > ##StartDate:string##\nORDER BY\n    CreationDate DESC\n\n-- StartDate: Starting date, YYYY-MM-DD",
        "CreationDate": "2014-11-13 11:27:58",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 244116,
        "Title": "Your Rank on STACKOVERFLOW.COM Worldwide,in India,in Coimbatore",
        "Description": null,
        "QueryBody": "DECLARE  @UserId int = ##UserId##\n\nselect d.RANK as RANK_WORLDWIDE from (\n\nselect *,ROW_NUMBER() OVER (ORDER BY REPUTATION DESC) RANK from Users\n\n)d where d.id=@UserId\n\nselect d.RANK as RANK_COIMBATORE from (\n\nselect *,ROW_NUMBER() OVER (ORDER BY REPUTATION DESC) RANK from Users where LOWER(Location) LIKE '%coimbatore%'\n\n)d where d.id=@UserId\n\nselect d.RANK as RANK_CHENNAI from (\n\nselect *,ROW_NUMBER() OVER (ORDER BY REPUTATION DESC) RANK from Users where LOWER(Location) LIKE '%chennai%'\n\n)d where d.id=@UserId\n\nselect d.RANK as RANK_INDIA from (\n\nselect *,ROW_NUMBER() OVER (ORDER BY REPUTATION DESC) RANK from Users where LOWER(Location) LIKE '%india%'\n\n)d where d.id=@UserId",
        "CreationDate": "2014-11-08 12:48:57",
        "validated": false,
        "QueryBody_Original": "DECLARE  @UserId int = ##UserId##\n\nselect d.RANK as RANK_WORLDWIDE from (\n\nselect *,ROW_NUMBER() OVER (ORDER BY REPUTATION DESC) RANK from Users\n\n)d where d.id=@UserId\n\nselect d.RANK as RANK_COIMBATORE from (\n\nselect *,ROW_NUMBER() OVER (ORDER BY REPUTATION DESC) RANK from Users where LOWER(Location) LIKE '%coimbatore%'\n\n)d where d.id=@UserId\n\nselect d.RANK as RANK_CHENNAI from (\n\nselect *,ROW_NUMBER() OVER (ORDER BY REPUTATION DESC) RANK from Users where LOWER(Location) LIKE '%chennai%'\n\n)d where d.id=@UserId\n\nselect d.RANK as RANK_INDIA from (\n\nselect *,ROW_NUMBER() OVER (ORDER BY REPUTATION DESC) RANK from Users where LOWER(Location) LIKE '%india%'\n\n)d where d.id=@UserId"
    },
    {
        "QuerySetId": 247480,
        "Title": "Votes cast vs post year",
        "Description": null,
        "QueryBody": "WITH  posts_agg as (\nselect YEAR(CreationDate) y, count(*) c\nfrom Posts\nwhere PostTypeId in (1, 2)\nand OwnerUserId = 635608\ngroup by YEAR(CreationDate)\n)\nselect Post_year as 'Post year'\n, Posts_that_year as 'Posts that year'\n, [2008], [2009], [2010], [2011], [2012], [2013], [2014]\nfrom\n(\nselect YEAR(v.CreationDate) as Vote_year\n, YEAR(p.CreationDate) as Post_year\n, (select c from posts_agg where y = YEAR(p.CreationDate)) as Posts_that_year\n, 1.0\/(select c from posts_agg where y = YEAR(p.CreationDate)) as VoteAvg\n  from Votes v\n  join Posts p on p.Id = v.PostId\n  where v.VoteTypeId in (2, 3)\n    and p.PostTypeId in (1, 2)\n    and p.OwnerUserId = 635608\n) as source_table\npivot\n(\n  sum(VoteAvg)\n  for Vote_year in ([2008], [2009], [2010], [2011], [2012], [2013], [2014])\n) as pivot_table;",
        "CreationDate": "2014-11-16 14:35:11",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 248046,
        "Title": "Vote history for a question",
        "Description": null,
        "QueryBody": "DECLARE  @QuestionId int = ##PostId##\n\nSELECT * \nFROM Votes \nWHERE \n  (EXISTS (SELECT * FROM Posts WHERE ParentId = @QuestionId AND Id = PostId) \n  OR PostId = @QuestionId )\n  AND (VoteTypeId = 8 OR VoteTypeId = 9)\n  \nORDER BY CreationDate ASC",
        "CreationDate": "2014-12-22 04:07:55",
        "validated": false,
        "QueryBody_Original": "DECLARE  @QuestionId int = ##PostId##\n\nSELECT * \nFROM Votes \nWHERE \n  (EXISTS (SELECT * FROM Posts WHERE ParentId = @QuestionId AND Id = PostId) \n  OR PostId = @QuestionId )\n  AND (VoteTypeId = 8 OR VoteTypeId = 9)\n  \nORDER BY CreationDate ASC"
    },
    {
        "QuerySetId": 248059,
        "Title": "My Comments - sorted by creation date",
        "Description": null,
        "QueryBody": "SELECT  postID [Post Link], Score, CreationDate, Text\nFROM \n    Comments\nWHERE UserId = ##UserId##\nORDER BY CreationDate Desc",
        "CreationDate": "2014-11-17 18:23:48",
        "validated": false,
        "QueryBody_Original": "SELECT  postID [Post Link], Score, CreationDate, Text\nFROM \n    Comments\nWHERE UserId = ##UserId##\nORDER BY CreationDate Desc"
    },
    {
        "QuerySetId": 248334,
        "Title": "Query to get number of posts per hour for a technology",
        "Description": null,
        "QueryBody": "SELECT  \n  DATEPART(hh, CreationDate) as Hours, \n  count(*) as Total \nfrom posts \nwhere \n  posts.Tags like '%'+ ##Tags:string## + '%' \nGROUP BY DATEPART(hh, CreationDate)",
        "CreationDate": "2014-11-19 11:27:37",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 248985,
        "Title": "Distribution of the number of comments per post",
        "Description": null,
        "QueryBody": "DECLARE  @TotalQuestions AS Int = (SELECT Count(*) FROM Posts WHERE PostTypeId = 1)\nDECLARE @TotalAnswers AS Int = (SELECT Count(*) FROM Posts WHERE PostTypeId = 2)\n\nSELECT\n  SUM(CommentCount) AS [Number of comments],\n  PostTypeId\n  -- Count(*) * 100.0 \/ (@TotalQuestions + @TotalAnswers) AS [% Posts],\n  -- Count(Nullif(PostTypeId, 2)) * 100.0 \/ @TotalQuestions AS [% Questions],\n  -- Count(Nullif(PostTypeId, 1)) * 100.0 \/ @TotalAnswers AS [% Answers],\n  -- Count(Nullif(PostTypeId, 2)) AS [# Questions],\n  -- Count(Nullif(PostTypeId, 1)) AS [# Answers],\n  -- CommentCount * ( Count(Nullif(PostTypeId, 2)) + Count(Nullif(PostTypeId, 1)) ) as [Total Questions and Answers]\nFROM Posts\nWHERE (PostTypeId = 1 OR PostTypeId = 2)\nGROUP BY PostTypeId",
        "CreationDate": "2017-08-26 08:41:27",
        "validated": false,
        "QueryBody_Original": "DECLARE  @TotalQuestions AS Int = (SELECT Count(*) FROM Posts WHERE PostTypeId = 1)\nDECLARE @TotalAnswers AS Int = (SELECT Count(*) FROM Posts WHERE PostTypeId = 2)\n\nSELECT\n  SUM(CommentCount) AS [Number of comments],\n  PostTypeId\n  -- Count(*) * 100.0 \/ (@TotalQuestions + @TotalAnswers) AS [% Posts],\n  -- Count(Nullif(PostTypeId, 2)) * 100.0 \/ @TotalQuestions AS [% Questions],\n  -- Count(Nullif(PostTypeId, 1)) * 100.0 \/ @TotalAnswers AS [% Answers],\n  -- Count(Nullif(PostTypeId, 2)) AS [# Questions],\n  -- Count(Nullif(PostTypeId, 1)) AS [# Answers],\n  -- CommentCount * ( Count(Nullif(PostTypeId, 2)) + Count(Nullif(PostTypeId, 1)) ) as [Total Questions and Answers]\nFROM Posts\nWHERE (PostTypeId = 1 OR PostTypeId = 2)\nGROUP BY PostTypeId"
    },
    {
        "QuerySetId": 249080,
        "Title": "My comments beginning with +1 or -1",
        "Description": null,
        "QueryBody": "SELECT  TOP 5000\n  Id AS [Comment Link],\n  Score AS [Score],\n  CreationDate AS [Date]\nFROM Comments\nWHERE Text LIKE '[-+]1%'\nAND UserId = ##id##\nORDER BY Id DESC",
        "CreationDate": "2014-11-20 10:20:18",
        "validated": false,
        "QueryBody_Original": "SELECT  TOP 5000\n  Id AS [Comment Link],\n  Score AS [Score],\n  CreationDate AS [Date]\nFROM Comments\nWHERE Text LIKE '[-+]1%'\nAND UserId = ##id##\nORDER BY Id DESC"
    },
    {
        "QuerySetId": 250198,
        "Title": "Submit weekday of Questions and Answers",
        "Description": null,
        "QueryBody": "WITH  PostTimes as\n(\n  select \n    p.Id,\n    datepart(dw, p.CreationDate) [WeekdayPosted],\n    p.PostTypeId\n  from Posts p\n  where p.CreationDate between ##minDate:string?2005-01-01##\n                      and ##maxDate:string?2020-01-01##\n),\nQuestionTimes as\n(\n  select\n    pt.WeekdayPosted,\n    count(pt.WeekdayPosted) [QuestionCount]\n  from PostTimes pt\n  where pt.PostTypeId = 1 --question\n  group by pt.WeekdayPosted\n),\nAnswerTimes as\n(\n  select\n    pt.WeekdayPosted,\n    count(pt.WeekdayPosted) [AnswerCount]\n  from PostTimes pt\n  where pt.PostTypeId = 2 --answer\n  group by pt.WeekdayPosted\n)\nselect\n  qt.WeekdayPosted,\n  qt.QuestionCount,\n  at.AnswerCount\nfrom \nQuestionTimes qt\ninner join AnswerTimes at on qt.WeekdayPosted = at.WeekdayPosted\norder by qt.WeekdayPosted asc",
        "CreationDate": "2014-11-24 14:11:29",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 250470,
        "Title": "Good answers to bad questions",
        "Description": "Displays top score difference between well-received answers and poorly-received questions.",
        "QueryBody": "WITH  BestAnswers AS (\n  SELECT\n    *\n  FROM (\n    SELECT\n      *,\n      MAX(Score) OVER (PARTITION BY ParentId) AS MaxScore\n    FROM\n      Posts\n    WHERE\n      ParentId IS NOT NULL\n    ) maxa\n  WHERE\n    maxa.Score = maxa.MaxScore\n)\n\nSELECT TOP(50)\n  p.Id AS [Post Link],\n  p.Score AS QuestionScore,\n  a.Score AS AnswerScore,\n  a.Score - p.Score AS ScoreDiff,\n  a.Score * ##AnswerWeight?1## - p.Score * ##QuestionWeight?1## AS WeightedScoreDiff\nFROM\n  Posts p JOIN BestAnswers a ON p.Id = a.ParentId\nWHERE\n  p.Score < ##MaxQuestionScore?-10## AND a.Score > ##MinAnswerScore?10##\nORDER BY\n  WeightedScoreDiff DESC",
        "CreationDate": "2014-11-25 05:40:29",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 251165,
        "Title": "All the views (log scaled)",
        "Description": "http:\/\/meta.stackexchange.com\/questions\/244534\/were-working-on-a-new-stat-to-help-convey-the-reach-of-your-posts-here",
        "QueryBody": "WITH  question_score as (\nselect cast(ViewCount as BigInt) ask_views, \n       OwnerUserId UserId, \n       Id PostId\nfrom Posts\nwhere PostTypeId = 1\n      and AnswerCount > 0\n      and Score > 0\ngroup by OwnerUserId, Id, ViewCount\n),\n\nanswer_score as (\nselect cast(q.ViewCount as BigInt) answer_views, \n       a.OwnerUserId UserId, \n       a.Id PostId\nfrom Posts q\n     join Posts a on (q.Id = a.ParentId)\nwhere a.Score > 0\ngroup by a.OwnerUserId, a.Id, q.ViewCount\n)\n\nselect p.Id as [Post Link],\n       sum(ask_views), \n       sum(answer_views)\nfrom question_score q\n     full outer join Posts p on (q.PostId = p.Id)\n     full outer join answer_score a on (p.Id = a.PostId)\nwhere OwnerUserId = ##UserId?1##\ngroup by  p.Id, ask_views, answer_views",
        "CreationDate": "2014-12-11 21:35:41",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 251322,
        "Title": "Meta posts with more than one required tag",
        "Description": null,
        "QueryBody": "DECLARE  @TagId1 AS Int = (SELECT Id FROM Tags WHERE TagName = 'discussion')\nDECLARE @TagId2 AS Int = (SELECT Id FROM Tags WHERE TagName = 'support')\nDECLARE @TagId3 AS Int = (SELECT Id FROM Tags WHERE TagName = 'bug')\nDECLARE @TagId4 AS Int = (SELECT Id FROM Tags WHERE TagName = 'feature-request')\n\nSELECT\n  c.PostId AS [Post Link],\n  Replace(Replace(Replace(p.Tags, '\u00e0\u00e9', ' '), '><', ' '), '[<>\u00e9\u00e0]', '') AS [Tags]\nFROM (\n  SELECT PostId, Count(*) AS [Count]\n  FROM PostTags\n  WHERE TagId = @TagId1 OR TagId = @TagId2 OR TagId = @TagId3 OR TagId = @TagId4\n  GROUP BY PostId\n) c\nLEFT JOIN Posts p ON p.Id = c.PostId\nWHERE c.Count >= 2\nORDER BY c.PostId ASC",
        "CreationDate": "2014-11-27 17:19:14",
        "validated": false,
        "QueryBody_Original": "DECLARE  @TagId1 AS Int = (SELECT Id FROM Tags WHERE TagName = 'discussion')\nDECLARE @TagId2 AS Int = (SELECT Id FROM Tags WHERE TagName = 'support')\nDECLARE @TagId3 AS Int = (SELECT Id FROM Tags WHERE TagName = 'bug')\nDECLARE @TagId4 AS Int = (SELECT Id FROM Tags WHERE TagName = 'feature-request')\n\nSELECT\n  c.PostId AS [Post Link],\n  Replace(Replace(Replace(p.Tags, '\u00e0\u00e9', ' '), '><', ' '), '[<>\u00e9\u00e0]', '') AS [Tags]\nFROM (\n  SELECT PostId, Count(*) AS [Count]\n  FROM PostTags\n  WHERE TagId = @TagId1 OR TagId = @TagId2 OR TagId = @TagId3 OR TagId = @TagId4\n  GROUP BY PostId\n) c\nLEFT JOIN Posts p ON p.Id = c.PostId\nWHERE c.Count >= 2\nORDER BY c.PostId ASC"
    },
    {
        "QuerySetId": 251748,
        "Title": "New Questions : Users with Close Rights",
        "Description": null,
        "QueryBody": "DECLARE  @LastDate datetime\n\nSELECT @LastDate = Max(CreationDate) FROM Posts\n\nSELECT\n(\nSELECT\n   Cast(Count(CreationDate) as float) As Questions\nFROM\n   Posts\nWHERE PostTypeId=1 and DateDiff(Day, CreationDate, @LastDate) < ##Days##\n)\n\/\n(\nSELECT\n   cast(Count(Users.Id) as float) as Closers\n--   Users.Id,\n--   Reputation,\n--   IsNull(c,0) As c\nFROM\n(\nSELECT\n  UserId,\n  count(*) AS c\nFROM\n(\nSELECT UserId, CreationDate\nFROM PostHistory\nUNION ALL\nSELECT UserId, CreationDate\nFROM Comments\nUNION ALL\nSELECT UserId, CreationDate\nFROM Votes\n) Activity\nWHERE UserId > 0 and DateDiff(Day, CreationDate, @LastDate) < ##Days##\nGROUP BY UserId\n) counts\nright join\nUsers on UserId=Users.Id\nWHERE Reputation>3000 and c>5\n)\n\/\n(SELECT cast(##Days## as float))",
        "CreationDate": "2014-11-29 11:54:57",
        "validated": false,
        "QueryBody_Original": "DECLARE  @LastDate datetime\n\nSELECT @LastDate = Max(CreationDate) FROM Posts\n\nSELECT\n(\nSELECT\n   Cast(Count(CreationDate) as float) As Questions\nFROM\n   Posts\nWHERE PostTypeId=1 and DateDiff(Day, CreationDate, @LastDate) < ##Days##\n)\n\/\n(\nSELECT\n   cast(Count(Users.Id) as float) as Closers\n--   Users.Id,\n--   Reputation,\n--   IsNull(c,0) As c\nFROM\n(\nSELECT\n  UserId,\n  count(*) AS c\nFROM\n(\nSELECT UserId, CreationDate\nFROM PostHistory\nUNION ALL\nSELECT UserId, CreationDate\nFROM Comments\nUNION ALL\nSELECT UserId, CreationDate\nFROM Votes\n) Activity\nWHERE UserId > 0 and DateDiff(Day, CreationDate, @LastDate) < ##Days##\nGROUP BY UserId\n) counts\nright join\nUsers on UserId=Users.Id\nWHERE Reputation>3000 and c>5\n)\n\/\n(SELECT cast(##Days## as float))"
    },
    {
        "QuerySetId": 252844,
        "Title": "Where two users have both answered a question",
        "Description": null,
        "QueryBody": "DECLARE  @user1 int = ##User1:int##\nDECLARE @user2 int = ##User2:int##\n\nSELECT\n  q.Id AS [Post Link]\nFROM\n  Posts AS q\nWHERE\n  q.PostTypeId = 1 -- Question\n  AND (\n    @user1 IN (SELECT a.OwnerUserId FROM Posts AS a WHERE a.ParentId = q.Id)                                                  -- posted answer\n      )\n  AND (\n    @user2 IN (SELECT a.OwnerUserId FROM Posts AS a WHERE a.ParentId = q.Id)\n    )",
        "CreationDate": "2014-12-02 01:19:11",
        "validated": false,
        "QueryBody_Original": "DECLARE  @user1 int = ##User1:int##\nDECLARE @user2 int = ##User2:int##\n\nSELECT\n  q.Id AS [Post Link]\nFROM\n  Posts AS q\nWHERE\n  q.PostTypeId = 1 -- Question\n  AND (\n    @user1 IN (SELECT a.OwnerUserId FROM Posts AS a WHERE a.ParentId = q.Id)                                                  -- posted answer\n      )\n  AND (\n    @user2 IN (SELECT a.OwnerUserId FROM Posts AS a WHERE a.ParentId = q.Id)\n    )"
    },
    {
        "QuerySetId": 253054,
        "Title": "find posts to edit for Excavator and Archaeologist badges",
        "Description": "finds questions that have been inactive for at least 6 months",
        "QueryBody": "SELECT  TOP 1000\n    Id as [Post Link],\n    Score,\n    LastActivityDate\nFROM Posts\nWHERE PostTypeId=2\nAND LastActivityDate < DATEADD(mm, -6, GETDATE())\nAND Score >= 0\nAND ClosedDate is null\nAND LastEditDate is null\nORDER BY LastActivityDate",
        "CreationDate": "2016-03-23 13:28:06",
        "validated": false,
        "QueryBody_Original": "SELECT  TOP 1000\n    Id as [Post Link],\n    Score,\n    LastActivityDate\nFROM Posts\nWHERE PostTypeId=2\nAND LastActivityDate < DATEADD(mm, -6, GETDATE())\nAND Score >= 0\nAND ClosedDate is null\nAND LastEditDate is null\nORDER BY LastActivityDate"
    },
    {
        "QuerySetId": 253087,
        "Title": "Posts with SQL Fiddle links but no SQL tags",
        "Description": null,
        "QueryBody": "SELECT  Id, Tags, Title, Body\nINTO #tmp\nFROM POSTS\nWHERE PostTypeId = 1 \n  AND CreationDate > '2014-01-01' \n  AND Body LIKE('%sqlfiddle.com%')\n\nSELECT Id as [Post Link], Tags\nFROM #tmp\nWHERE tags not like('%sql%') and \n      tags not like('%oracle%')",
        "CreationDate": "2014-12-02 19:48:04",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 253237,
        "Title": "Finding short posts select * from posts where len(body) <= ##bodylen##",
        "Description": null,
        "QueryBody": "SELECT  * from posts where (len(body) <= ##bodylen## and PostTypeId = 2)",
        "CreationDate": "2014-12-02 23:59:16",
        "validated": false,
        "QueryBody_Original": "SELECT  * from posts where (len(body) <= ##bodylen## and PostTypeId = 2)"
    },
    {
        "QuerySetId": 253375,
        "Title": "Illuminator\/Refiner\/Explainer badge progress (all users)",
        "Description": "How far along are the users on your site for the Illuminator badge series? ",
        "QueryBody": "DECLARE  @max_results int = ##MaxNumberOfResults:int?100##\nDECLARE @min_qualifying_answers int = ##MinimumQualifyingAnswers:int?2##\n\n\nSELECT TOP (@max_results)\n  a.OwnerUserId AS [User Link],\n  COUNT(*) AS [Count]\nFROM\n  Posts AS a\n  LEFT OUTER JOIN Posts AS q\n    ON a.ParentId = q.Id\nWHERE \n      q.PostTypeId = 1\n  AND q.ClosedDate IS NULL\n  AND a.PostTypeId = 2\n  AND a.Score >= 1\n  AND ISNULL(q.OwnerUserId, -1) <> a.OwnerUserId\n  AND EXISTS(\n    SELECT 1\n      FROM PostHistory AS ph\n     WHERE     ph.PostHistoryTypeId IN (4, 5)\n           AND ph.PostId = a.ParentId\n           AND ph.UserId = a.OwnerUserId\n           AND ABS(DATEDIFF(hh, ph.CreationDate, a.CreationDate)) < 12\n  )\nGROUP BY\n  a.OwnerUserId\nHAVING\n  COUNT(*) >= @min_qualifying_answers\nORDER BY \n  [Count] DESC",
        "CreationDate": "2014-12-03 07:02:22",
        "validated": false,
        "QueryBody_Original": "DECLARE  @max_results int = ##MaxNumberOfResults:int?100##\nDECLARE @min_qualifying_answers int = ##MinimumQualifyingAnswers:int?2##\n\n\nSELECT TOP (@max_results)\n  a.OwnerUserId AS [User Link],\n  COUNT(*) AS [Count]\nFROM\n  Posts AS a\n  LEFT OUTER JOIN Posts AS q\n    ON a.ParentId = q.Id\nWHERE \n      q.PostTypeId = 1\n  AND q.ClosedDate IS NULL\n  AND a.PostTypeId = 2\n  AND a.Score >= 1\n  AND ISNULL(q.OwnerUserId, -1) <> a.OwnerUserId\n  AND EXISTS(\n    SELECT 1\n      FROM PostHistory AS ph\n     WHERE     ph.PostHistoryTypeId IN (4, 5)\n           AND ph.PostId = a.ParentId\n           AND ph.UserId = a.OwnerUserId\n           AND ABS(DATEDIFF(hh, ph.CreationDate, a.CreationDate)) < 12\n  )\nGROUP BY\n  a.OwnerUserId\nHAVING\n  COUNT(*) >= @min_qualifying_answers\nORDER BY \n  [Count] DESC"
    },
    {
        "QuerySetId": 255411,
        "Title": "Posts per day versus total badges earned",
        "Description": null,
        "QueryBody": "DECLARE  @UserId int = ##UserId##;\n\nselect CAST(p.CreationDate as Date) as PostDate, count(p.Id) as Posts,\n(\nselect count(b.id) \/ 100\n  from badges b\n  where b.UserId = u.Id\n  and b.date <= CAST(p.CreationDate as Date)\n  ) as BadgesEarned\nfrom posts p, users u\n  where u.Id = @UserId\n  and p.OwnerUserId = u.Id\n  group by CAST(p.CreationDate as Date), u.Id\norder by CAST(p.CreationDate as Date)",
        "CreationDate": "2014-12-08 05:42:55",
        "validated": false,
        "QueryBody_Original": "DECLARE  @UserId int = ##UserId##;\n\nselect CAST(p.CreationDate as Date) as PostDate, count(p.Id) as Posts,\n(\nselect count(b.id) \/ 100\n  from badges b\n  where b.UserId = u.Id\n  and b.date <= CAST(p.CreationDate as Date)\n  ) as BadgesEarned\nfrom posts p, users u\n  where u.Id = @UserId\n  and p.OwnerUserId = u.Id\n  group by CAST(p.CreationDate as Date), u.Id\norder by CAST(p.CreationDate as Date)"
    },
    {
        "QuerySetId": 255887,
        "Title": "Unanswered questions per vote count",
        "Description": null,
        "QueryBody": "SELECT  Score, log(count(*)) as Questions \n  FROM Posts \n  WHERE PostTypeId=1 AND\n        AnswerCount=0 AND\n        ClosedDate IS NULL\n  GROUP BY Score\n  ORDER BY Score Desc\n  \n  SELECT Score, log(count(*)) as Questions \n  FROM Posts \n  WHERE PostTypeId=1 AND\n        AnswerCount>0 AND\n        ClosedDate IS NULL\n  GROUP BY Score\n  ORDER BY Score Desc",
        "CreationDate": "2014-12-09 08:02:43",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 255903,
        "Title": "Shortest posts (both questions and answers)",
        "Description": null,
        "QueryBody": "SELECT  TOP ##NumberOfEntries:int?10##\n   DataLength(Body) as length,\n   id as [Post Link],\n   Score as Votes,\n   Body as Contents,\n   Tags\n    FROM Posts\n    WHERE\n     Body IS NOT NULL \n     AND ((##OnlyQuestions:int?0##=0 AND PostTypeId = 2) OR PostTypeId = 1)\n    ORDER BY length asc",
        "CreationDate": "2014-12-09 09:29:50",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 256074,
        "Title": "How many edits until Copy Editor (proper)?",
        "Description": "Shows a user's total edits so far, how many edits until the \"Strunk and White\" (now 80 at SO)\r\nbadge, and how many edits until the \"Copy Editor\" badge (now 500 at SO).\r\n",
        "QueryBody": "DECLARE  @USER int = ##UserId##;\n\nSELECT COUNT(DISTINCT ph.PostId) AS 'Number of Edits', -- every post counts once only\n       80  - COUNT(DISTINCT ph.PostId) AS 'Edits until \"Strunk and White\"',\n       500 - COUNT(DISTINCT ph.PostId) AS 'Edits until \"Copy Editor\"',\n       100 - COUNT(DISTINCT ph.PostId) AS 'Edits until \"Archaeologist\"'\nFROM   PostHistory ph\nJOIN   Posts p ON p.Id = ph.PostId AND p.OwnerUserId <> @User\nWHERE  ph.UserId = @User\nAND    ph.PostHistoryTypeId BETWEEN 4 AND 5 -- only edits to title & body count\nand p.posttypeid = '1'\n--and p.creationdate <= DATEADD(MONTH, -6, ph.CreationDate)",
        "CreationDate": "2015-02-27 00:18:28",
        "validated": false,
        "QueryBody_Original": "DECLARE  @USER int = ##UserId##;\n\nSELECT COUNT(DISTINCT ph.PostId) AS 'Number of Edits', -- every post counts once only\n       80  - COUNT(DISTINCT ph.PostId) AS 'Edits until \"Strunk and White\"',\n       500 - COUNT(DISTINCT ph.PostId) AS 'Edits until \"Copy Editor\"',\n       100 - COUNT(DISTINCT ph.PostId) AS 'Edits until \"Archaeologist\"'\nFROM   PostHistory ph\nJOIN   Posts p ON p.Id = ph.PostId AND p.OwnerUserId <> @User\nWHERE  ph.UserId = @User\nAND    ph.PostHistoryTypeId BETWEEN 4 AND 5 -- only edits to title & body count\nand p.posttypeid = '1'\n--and p.creationdate <= DATEADD(MONTH, -6, ph.CreationDate)"
    },
    {
        "QuerySetId": 256631,
        "Title": "Anonymous feedback for a set of users",
        "Description": null,
        "QueryBody": "WITH  anon_votes as (\n  select count(case VoteTypeId when 2 then 1 end) upvotes,\n         count(case VoteTypeId when 3 then 1 end) downvotes,\n         isnull(ParentId, PostId) PostId\n  from PostFeedback pf\n       join Posts p on PostId = p.Id\n  group by isnull(ParentId, PostId)\n)\n\nselect OwnerUserId as [User Link], sum(upvotes) up, sum(downvotes) down\nfrom anon_votes\n     join Posts p on p.Id = PostId\nwhere OwnerUserId = (##UserId?1##)\ngroup by OwnerUserId",
        "CreationDate": "2014-12-10 23:21:23",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 256737,
        "Title": "Find [untagged] posts on all sites",
        "Description": null,
        "QueryBody": "SELECT \n  name\nINTO #sites\nFROM\n  sys.databases\nWHERE\n  name NOT IN ('master', 'tempdb', 'model', 'msdb', 'Data.StackExchange')\n  \nSELECT * FROM #sites",
        "CreationDate": "2014-12-11 02:46:52",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 256747,
        "Title": "How to convert sys.databases.name to a URL",
        "Description": null,
        "QueryBody": "DECLARE  @x nvarchar(max) = 'StackExchange.Biology'\nDECLARE @y nvarchar(max) = 'StackExchange.Biology.Meta'\n\n-- Thanks to: \n-- <http:\/\/stackoverflow.com\/a\/9863151\/1535629>\n-- <http:\/\/stackoverflow.com\/a\/1846561\/1535629>\n-- <http:\/\/stackoverflow.com\/a\/194887\/1535629>\nDECLARE @str nvarchar(max) = 'StackExchange.Biology.Meta'\nDECLARE @delimiter nvarchar(max) = '.'\nDECLARE @xml xml = CAST(('<X>' + REPLACE(@str, @delimiter, '<\/X><X>') + '<\/X>') AS xml)\nSELECT\n  C.value('.', 'nvarchar(max)') AS [Piece],\n  C.value('for $i in . return count(..\/*[. << $i]) + 1', 'int') AS [Index]\nINTO\n  #hostname_pieces\nFROM\n  @xml.nodes('X') AS X(C)\n\n\nDECLARE @out nvarchar(max)\nSELECT @out = @out + '.' + [Piece]\nFROM #hostname_pieces\nORDER BY [Index] DESC\n\nSELECT @out",
        "CreationDate": "2014-12-11 04:43:58",
        "validated": false,
        "QueryBody_Original": "DECLARE  @x nvarchar(max) = 'StackExchange.Biology'\nDECLARE @y nvarchar(max) = 'StackExchange.Biology.Meta'\n\n-- Thanks to: \n-- <http:\/\/stackoverflow.com\/a\/9863151\/1535629>\n-- <http:\/\/stackoverflow.com\/a\/1846561\/1535629>\n-- <http:\/\/stackoverflow.com\/a\/194887\/1535629>\nDECLARE @str nvarchar(max) = 'StackExchange.Biology.Meta'\nDECLARE @delimiter nvarchar(max) = '.'\nDECLARE @xml xml = CAST(('<X>' + REPLACE(@str, @delimiter, '<\/X><X>') + '<\/X>') AS xml)\nSELECT\n  C.value('.', 'nvarchar(max)') AS [Piece],\n  C.value('for $i in . return count(..\/*[. << $i]) + 1', 'int') AS [Index]\nINTO\n  #hostname_pieces\nFROM\n  @xml.nodes('X') AS X(C)\n\n\nDECLARE @out nvarchar(max)\nSELECT @out = @out + '.' + [Piece]\nFROM #hostname_pieces\nORDER BY [Index] DESC\n\nSELECT @out"
    },
    {
        "QuerySetId": 256894,
        "Title": "Find most viewed posts where a user has supplied an answer with at least one upvote.",
        "Description": null,
        "QueryBody": "WITH  at least one upvote.\n\nSELECT \nTOP   ##quantity:int?500##            \n            \n      p.ViewCount [Views],                      \n      p.Id AS [Post Link]      \n\nFROM \n     Posts AS p\n     \n     JOIN Posts     AS pa ON pa.ParentId = p.Id\n     JOIN PostTypes AS pt ON pt.Id       = pa.PostTypeId\n\nWHERE \n          pt.Name          LIKE   'Answer'\n      AND pa.ParentId      IS     NOT NULL\n      AND pa.OwnerUserId   =      ##UserId##\n      \nORDER BY Views DESC",
        "CreationDate": "2015-07-16 00:10:32",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 256978,
        "Title": "My meta comments by keyword",
        "Description": null,
        "QueryBody": "SELECT  postid as [Post Link], creationdate, text from comments\nwhere userid = ##userid## and text like '%##pat##%'\norder by creationdate desc",
        "CreationDate": "2014-12-11 20:47:48",
        "validated": false,
        "QueryBody_Original": "SELECT  postid as [Post Link], creationdate, text from comments\nwhere userid = ##userid## and text like '%##pat##%'\norder by creationdate desc"
    },
    {
        "QuerySetId": 257069,
        "Title": "How unsung is a certain question?",
        "Description": null,
        "QueryBody": "SELECT  Id\nas [Post Link]\nfrom Posts \nwhere Id = ##questionId##\norder by CreationDate desc",
        "CreationDate": "2014-12-12 02:52:42",
        "validated": false,
        "QueryBody_Original": "SELECT  Id\nas [Post Link]\nfrom Posts \nwhere Id = ##questionId##\norder by CreationDate desc"
    },
    {
        "QuerySetId": 257374,
        "Title": "Votes per post broken down",
        "Description": null,
        "QueryBody": "SELECT \n    COUNT(p.id)\n    FROM posts p\n      left join votes v\n      on p.id = v.postid\n    WHERE p.id in (SELECT v.postid where v.votetypeid = '3')\n      and p.creationdate > '2014-06-01'\n   \nSELECT \n    COUNT(v.id) \n    FROM votes v \n    left join posts p\n      on p.id = v.postid\n    where v.VoteTypeId = '3' \n    and p.creationdate > '2014-06-01'\n    \nSELECT \n    COUNT(DISTINCT v.postid) \n    FROM votes v\n    left join posts p\n      on p.id = v.postid\n    where v.votetypeid = '3'\n    and p.creationdate > '2014-06-01'",
        "CreationDate": "2014-12-12 15:55:15",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 257543,
        "Title": "Other answer(s) with higher score than Accepted answer",
        "Description": null,
        "QueryBody": "WITH  2 or more answers,\n-- where accepted answer is NOT the highest score\n-- gives all \"other\" answers scoring higher than accepted answer\n-- Thanks PV :)\n\nSELECT DISTINCT TOP 100 Q.Id as [Post Link],\n  Q.ViewCount,\n  Q.Score as qScore,\n  A.Score as aScore,\n  OA.Score as oaScore,\n  OA.Score - A.Score as scoreDiff\n\nFROM Posts Q, Posts A, Posts OA \n\nWHERE Q.AnswerCount > 1 \n  AND A.ParentId = Q.Id\n  AND OA.ParentId = Q.Id\n  AND A.Id = Q.AcceptedAnswerId\n  AND OA.Id <> Q.AcceptedAnswerId\n  AND A.Score < OA.Score\n  and A.Score < 5",
        "CreationDate": "2014-12-13 17:42:46",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 257867,
        "Title": "All posts of a user where the last edit is not made by themselves",
        "Description": null,
        "QueryBody": "SELECT  Id AS [Post Link], LastEditorUserId AS [User Link]\nFROM Posts WHERE OwnerUserId = ##UserId##\nAND LastEditorUserId != ##UserId##",
        "CreationDate": "2014-12-14 20:02:13",
        "validated": false,
        "QueryBody_Original": "SELECT  Id AS [Post Link], LastEditorUserId AS [User Link]\nFROM Posts WHERE OwnerUserId = ##UserId##\nAND LastEditorUserId != ##UserId##"
    },
    {
        "QuerySetId": 257875,
        "Title": "Post Scores Histograms (Log Scale)",
        "Description": null,
        "QueryBody": "WITH  PostScores as (\n    select p.Score,\n           p.PostTypeId,\n           count(*) * 1.0 as PostCount\n    from Posts p\n    where p.PostTypeId in (1,2)\n      and ClosedDate is null\n    group by Score, p.PostTypeId\n)\nselect Score,\n       case when PostTypeId = '1'\n            then 'Questions'\n            else 'Answers'\n       end as Series,\n       LOG10(PostCount) as [CountLog10]\nfrom PostScores\nwhere PostCount >= ##MinPostCount:int?2##\n  and Score >= ##MinScore:int?-10##\n  and Score <= ##MaxScore:int?150##\norder by Score, Series",
        "CreationDate": "2014-12-14 22:30:39",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 257882,
        "Title": "Post Scores Histograms (Regular Scale)",
        "Description": null,
        "QueryBody": "WITH  PostScores as (\n    select p.ViewCount,\n           p.PostTypeId,\n           count(*) * 1.0 as PostCount\n    from Posts p\n    where p.PostTypeId in (1,2)\n      and ClosedDate is null\n    group by ViewCount, p.PostTypeId\n)\nselect ViewCount,\n       case when PostTypeId = '1'\n            then 'Questions'\n            else 'Answers'\n       end as Series,\n       PostCount as [Count]\nfrom PostScores\nwhere PostCount >= ##MinPostCount:int?2##\n  and ViewCount >= ##MinScore:int?-10##\n  and ViewCount <= ##MaxScore:int?150##\norder by Series, ViewCount",
        "CreationDate": "2015-11-10 15:20:16",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 258032,
        "Title": "Winter Bash 2014 - Resolution hat",
        "Description": null,
        "QueryBody": "DECLARE  @userid int = ##UserId:int##\n\nSELECT\n  c.Score,\n  c.Id AS [Comment Link]\nFROM\n  Comments AS c\nWHERE\n  c.CreationDate BETWEEN 'January 1, 2013' AND 'December 31, 2014'\n  AND c.UserId = @userid\nORDER BY\n  c.Score ASC",
        "CreationDate": "2014-12-15 06:35:17",
        "validated": false,
        "QueryBody_Original": "DECLARE  @userid int = ##UserId:int##\n\nSELECT\n  c.Score,\n  c.Id AS [Comment Link]\nFROM\n  Comments AS c\nWHERE\n  c.CreationDate BETWEEN 'January 1, 2013' AND 'December 31, 2014'\n  AND c.UserId = @userid\nORDER BY\n  c.Score ASC"
    },
    {
        "QuerySetId": 259853,
        "Title": "Last-year comments like \"What have you tried\" where an accepted answer is present",
        "Description": null,
        "QueryBody": "SELECT \n    c.Id AS [Comment Link],\n    c.Score,\n    c.CreationDate,\n    LEN(Text)\nFROM\n    Comments c\n      INNER JOIN Posts p\n      ON c.PostId = p.Id\nWHERE Text LIKE 'What have you tried%'\nAND p.AcceptedAnswerId IS NOT NULL\nAND LEN(Text) < 33\nAND p.CommentCount < ##CommentThread:int?4##\nAND c.CreationDate >= '2014-01-01T00:00:00.000'\nAND c.CreationDate <= '2014-12-31T23:59:59.999'\nORDER BY\n  LEN(Text), c.Score DESC, c.CreationDate",
        "CreationDate": "2014-12-21 21:26:11",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 259884,
        "Title": "Show all questions with a particular tag",
        "Description": null,
        "QueryBody": "DECLARE  @MyTag nvarchar(25) = ##Tag:string##;\n\nSELECT --TOP 200\n    Posts.Id AS [Post Link]\n    , Posts.Id\n    , Posts.Score\n    , Tags.TagName AS [TagName]\nFROM Posts\n   INNER JOIN PostTags ON PostTags.PostId=Posts.Id\n   INNER JOIN Tags ON Tags.Id=PostTags.TagId\nWHERE \n   Posts.PostTypeId = 1 AND \n   Tags.TagName = @MyTag\nORDER BY Posts.Score DESC;",
        "CreationDate": "2014-12-21 23:02:44",
        "validated": false,
        "QueryBody_Original": "DECLARE  @MyTag nvarchar(25) = ##Tag:string##;\n\nSELECT --TOP 200\n    Posts.Id AS [Post Link]\n    , Posts.Id\n    , Posts.Score\n    , Tags.TagName AS [TagName]\nFROM Posts\n   INNER JOIN PostTags ON PostTags.PostId=Posts.Id\n   INNER JOIN Tags ON Tags.Id=PostTags.TagId\nWHERE \n   Posts.PostTypeId = 1 AND \n   Tags.TagName = @MyTag\nORDER BY Posts.Score DESC;"
    },
    {
        "QuerySetId": 259952,
        "Title": "Number of users with minimal reputation",
        "Description": null,
        "QueryBody": "SELECT  count(Id) from Users where Reputation>=##MinRep##",
        "CreationDate": "2014-12-22 03:34:15",
        "validated": false,
        "QueryBody_Original": "SELECT  count(Id) from Users where Reputation>=##MinRep##"
    },
    {
        "QuerySetId": 259991,
        "Title": "find comments with score > 0",
        "Description": null,
        "QueryBody": "SELECT  Score, Id AS [Comment Link], CreationDate\nFROM Comments\nWHERE DatePart(yyyy, CreationDate)=2014\n  AND UserId = ##YourUserId##\n  AND Score>0\nORDER BY Score Desc",
        "CreationDate": "2014-12-22 13:31:40",
        "validated": false,
        "QueryBody_Original": "SELECT  Score, Id AS [Comment Link], CreationDate\nFROM Comments\nWHERE DatePart(yyyy, CreationDate)=2014\n  AND UserId = ##YourUserId##\n  AND Score>0\nORDER BY Score Desc"
    },
    {
        "QuerySetId": 260027,
        "Title": "Delting duplicate rows with condition",
        "Description": null,
        "QueryBody": "SELECT  326.8 AS ITEMCHARGE , 29075 AS CPT4 \nINTO #Table\nUNION ALL\nSELECT 326.8 , 29075 \nUNION ALL\t\t\t\t\t\t\t\t\t\t\nSELECT 326.8 , 29075  \nUNION ALL\t\t\t\t\t\t\t\t\t\t\nSELECT 326.8 , 29076\nUNION ALL\t\t\t\t\t\t\t\t\t\t\nSELECT 352.69 , 29075  \nUNION ALL\t\t\t\t\t\t\t\t\t\t\nSELECT 352.69 , 29076  \nUNION ALL\t\t\t\t\t\t\t\t\t\t\nSELECT 352.69 , 29079  \nUNION ALL\t\t\t\t\t\t\t\t\t\t\nSELECT 352.69 , 29077 \n\n\nSELECT *\nFROM\n(\nSELECT ROW_NUMBER() OVER (PARTITION BY ITEMCHARGE order BY ITEMCHARGE, CPT4 DESC) AS RowNo\n\t, *\nFROM #table\n) AS T\nWHERE T.RowNo = 1",
        "CreationDate": "2020-08-07 10:15:08",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 260154,
        "Title": "users who took a long break from posting on an SE site?",
        "Description": "http:\/\/meta.stackexchange.com\/questions\/245972\/how-to-find-the-users-who-took-a-long-break-from-posting-on-an-se-site#245972",
        "QueryBody": "SELECT  \nUsers.Id, Users.EmailHash, Users.WebsiteUrl \nfrom Users \nWHERE Users.CreationDate >= ##year:int##\nAnd Users.Location like '%##location##%';",
        "CreationDate": "2018-02-08 16:00:21",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 260171,
        "Title": "Users who posted an answer to the same question as a downvoted post",
        "Description": null,
        "QueryBody": "SELECT \n  Count(*) AS [Count],\n  b.OwnerUserId AS [User Link]\nFROM Posts a, Posts b\nWHERE a.OwnerUserId = ##me##\n  AND a.PostTypeId = 2\n  AND a.ParentId = b.ParentId\n  AND b.Id <> a.Id\n  AND EXISTS (SELECT Id FROM Votes v\n              WHERE v.PostId = a.Id\n                AND v.VoteTypeId = 3)\nGROUP BY b.OwnerUserId\nORDER BY Count DESC",
        "CreationDate": "2014-12-23 06:35:12",
        "validated": false,
        "QueryBody_Original": "SELECT \n  Count(*) AS [Count],\n  b.OwnerUserId AS [User Link]\nFROM Posts a, Posts b\nWHERE a.OwnerUserId = ##me##\n  AND a.PostTypeId = 2\n  AND a.ParentId = b.ParentId\n  AND b.Id <> a.Id\n  AND EXISTS (SELECT Id FROM Votes v\n              WHERE v.PostId = a.Id\n                AND v.VoteTypeId = 3)\nGROUP BY b.OwnerUserId\nORDER BY Count DESC"
    },
    {
        "QuerySetId": 260172,
        "Title": "Count of received votes per month",
        "Description": null,
        "QueryBody": "SELECT \n  CAST(CAST(DATEPART(yyyy, v.CreationDate) AS NVARCHAR(4)) + '-' + CAST(DATEPART(mm, v.CreationDate) AS NVARCHAR(2)) + '-01' AS DATETIME) AS [Date],\n  Count (CASE v.VoteTypeId WHEN 1 THEN 1 END) AS [Accept],\n  Count (CASE v.VoteTypeId WHEN 2 THEN 1 END) AS [Up],\n  Count (CASE v.VoteTypeId WHEN 3 THEN 1 END) AS [Down]\nFROM Votes v\nINNER JOIN Posts p ON p.Id = v.PostId\nWHERE p.OwnerUserId = ##user##\nGROUP BY CAST(CAST(DATEPART(yyyy, v.CreationDate) AS NVARCHAR(4)) + '-' + CAST(DATEPART(mm, v.CreationDate) AS NVARCHAR(2)) + '-01' AS DATETIME)\nORDER BY Date ASC",
        "CreationDate": "2014-12-23 06:48:54",
        "validated": false,
        "QueryBody_Original": "SELECT \n  CAST(CAST(DATEPART(yyyy, v.CreationDate) AS NVARCHAR(4)) + '-' + CAST(DATEPART(mm, v.CreationDate) AS NVARCHAR(2)) + '-01' AS DATETIME) AS [Date],\n  Count (CASE v.VoteTypeId WHEN 1 THEN 1 END) AS [Accept],\n  Count (CASE v.VoteTypeId WHEN 2 THEN 1 END) AS [Up],\n  Count (CASE v.VoteTypeId WHEN 3 THEN 1 END) AS [Down]\nFROM Votes v\nINNER JOIN Posts p ON p.Id = v.PostId\nWHERE p.OwnerUserId = ##user##\nGROUP BY CAST(CAST(DATEPART(yyyy, v.CreationDate) AS NVARCHAR(4)) + '-' + CAST(DATEPART(mm, v.CreationDate) AS NVARCHAR(2)) + '-01' AS DATETIME)\nORDER BY Date ASC"
    },
    {
        "QuerySetId": 260301,
        "Title": "Top N android tagged question answerers in Turkey",
        "Description": null,
        "QueryBody": "SELECT  \n  Top ##Top##\n  ROW_NUMBER() OVER(ORDER BY Reputation desc) AS [#],\n  u.Id AS [User Link], \n  u.Reputation, \n  u.Location, \n  u.LastAccessDate,\n  count(*) as AndroidAnswers from Users u, Posts p, Posts pp where u.Id in (\n    SELECT Id\n    FROM Users \n    WHERE \n      LOWER(Location) LIKE '%turkey%'\n    OR UPPER(Location) LIKE '%TR'\n    OR UPPER(Location) LIKE 'ISTANBUL'\n    OR LOWER(Location) LIKE 'istanbul'\n    OR UPPER(Location) LIKE 'IZMIR'\n    OR LOWER(Location) LIKE 'izmir'\n    OR UPPER(Location) LIKE 'ANKARA'\n    OR LOWER(Location) LIKE 'ankara'\n  )\n  \n  and p.OwnerUserId = u.Id\n  and pp.Id = p.ParentId\n  and pp.Tags like ('%android%')\n  \n  GROUP BY u.Id, u.Reputation, u.Location, u.LastAccessDate",
        "CreationDate": "2018-02-23 17:33:39",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 260302,
        "Title": "Top N .net tagged question answerers in Turkey",
        "Description": null,
        "QueryBody": "SELECT  \n  Top ##Top##\n  ROW_NUMBER() OVER(ORDER BY Reputation desc) AS [#],\n  u.Id AS [User Link], \n  u.Reputation, \n  u.Location, \n  u.LastAccessDate,\n  count(*) as DotNetAnswers from Users u, Posts p, Posts pp where u.Id in (\n    SELECT Id\n    FROM Users \n    WHERE \n      Lower(Location) like ('%turkey%') or\n      Lower(Location) like ('%istanbul%') or\n      Lower(Location) like ('%ankara%') or\n      Lower(Location) like ('%izmir%')\n  )\n  \n  and p.OwnerUserId = u.Id\n  and pp.Id = p.ParentId\n  and pp.Tags like ('%.net%')\n  \n  GROUP BY u.Id, u.Reputation, u.Location, u.LastAccessDate",
        "CreationDate": "2014-12-23 20:23:15",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 260584,
        "Title": "roomba more than year old questions",
        "Description": "http:\/\/meta.stackexchange.com\/questions\/78048\/enable-automatic-deletion-of-old-unanswered-zero-score-questions-after-a-year\/92006#92006",
        "QueryBody": "SELECT \n  q.Id AS [Post Link]\nFROM\n  Posts AS q\nINNER JOIN\n  Users AS u\nON\n  u.Id = q.OwnerUserId\nINNER JOIN\n  PostHistory AS ph\nON\n  ph.Id = q.Id\nWHERE\n     q.PostTypeId = 1\n and DATEDIFF(DAY, q.CreationDate, GETDATE()) > 365\n and q.Score = 0\n and q.AnswerCount = 0\n and ph.PostHistoryTypeId != 14\n and q.ViewCount < DATEDIFF(DAY, q.CreationDate, GETDATE()) * 1.4\n -- end of requirements --\n -- start of personally preferred options --\n and\n  q.CommentCount < 7\n and\n  q.ClosedDate IS NULL\n and\n  LEN(q.Body) < ##questionLength?500##\n and\n  DATEDIFF(DAY, u.LastAccessDate, GETDATE()) > 15\n and\n  u.Reputation < ##questionerRep?500##\nORDER BY\n  q.CreationDate ASC",
        "CreationDate": "2015-01-02 01:28:34",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 260795,
        "Title": "cliffer some closed questions that need cliffering",
        "Description": "http:\/\/meta.stackexchange.com\/questions\/78048\/enable-automatic-deletion-of-old-unanswered-zero-score-questions-after-a-year\/92006#92006",
        "QueryBody": "SELECT \n  q.Id AS [Post Link],\n  q.Score AS qScore,\n  a.Score AS aScore,\n  q.ViewCount AS Views,\n  q.CreationDate AS qDate\nFROM\n  Posts AS q\nINNER JOIN\n  Posts AS a\nON\n  a.ParentId = q.Id\nWHERE\n     q.PostTypeId = 1\n and a.PostTypeId = 2\n and q.AnswerCount = ##numOfAnswers?1##\n and q.Score < 1\n and a.Score = 1\n and LEN(a.Body) < ##lengthOfAnswer?654##\n and q.AcceptedAnswerId IS NULL\n and DATEDIFF(DAY, q.ClosedDate, GETDATE()) > 10\n and DATEDIFF(DAY, q.LastEditDate, GETDATE()) > 10\n and q.Id NOT IN (SELECT PostId FROM PostLinks) -- avoids duplicates\n GROUP BY q.Id, q.Score, a.Score, q.ViewCount, q.CreationDate\n ORDER BY\n   a.Score ASC",
        "CreationDate": "2014-12-25 07:50:59",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 261063,
        "Title": "User +1 comments for 2014",
        "Description": null,
        "QueryBody": "SELECT  Score, Id AS [Comment Link], CreationDate\nFROM Comments\nWHERE\n--  DatePart(yyyy, CreationDate)=2014\n--  AND\n  UserId = ##YourUserId##\n  AND Text LIKE '%paste%paste%'\n  AND Score>0\nORDER BY Score Desc",
        "CreationDate": "2014-12-26 15:07:19",
        "validated": false,
        "QueryBody_Original": "SELECT  Score, Id AS [Comment Link], CreationDate\nFROM Comments\nWHERE\n--  DatePart(yyyy, CreationDate)=2014\n--  AND\n  UserId = ##YourUserId##\n  AND Text LIKE '%paste%paste%'\n  AND Score>0\nORDER BY Score Desc"
    },
    {
        "QuerySetId": 261224,
        "Title": "Gold badges by people who have less than a given amount of reputation",
        "Description": "Lists all the gold badges that have been earned by people with less than a given amount of reputation (default: 1k), and displays the number of times each has been awarded to the aforementioned users.",
        "QueryBody": "SELECT \n    b.Name AS [Badge Name],\n    COUNT(*) AS [Count]\n\nFROM\n    Badges b\n        INNER JOIN Users u\n        ON b.UserId = u.Id\n\nWHERE\n    u.Reputation < ##rep:int?1000##\n    AND b.Name IN ('Socratic', 'Stellar Question', 'Great Question', 'Famous Question', 'Illuminator', 'Great Answer', 'Populist', 'Reversal', 'Unsung Hero', 'Fanatic', 'Legendary', 'Marshal', 'Constable', 'Sheriff', 'Steward', 'Copy Editor', 'Electorate', 'Publicist')\n\nGROUP BY\n    b.Name\n\nORDER BY\n    COUNT(*) DESC",
        "CreationDate": "2014-12-28 03:28:11",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 261396,
        "Title": "Comments by a user with a word",
        "Description": null,
        "QueryBody": "SELECT  CreationDate, Id as [Comment Link] from Comments\nwhere lower(Text) like lower('%##word##%') and UserId=##userid##\norder by CreationDate asc",
        "CreationDate": "2014-12-29 11:28:31",
        "validated": false,
        "QueryBody_Original": "SELECT  CreationDate, Id as [Comment Link] from Comments\nwhere lower(Text) like lower('%##word##%') and UserId=##userid##\norder by CreationDate asc"
    },
    {
        "QuerySetId": 261438,
        "Title": "list of questions with close votes that need just 1 downvote to be deleted",
        "Description": "http:\/\/meta.stackexchange.com\/questions\/78048\/enable-automatic-deletion-of-old-unanswered-zero-score-questions-after-a-year\/92006#92006 No need to vote to close these as 1 downvote should delete them anytime within the next 7 days.",
        "QueryBody": "SELECT \n  q.Id AS [Post Link],\n  COUNT(pf.FlagTypeId)\nFROM\n  Posts AS q\nINNER JOIN\n  Users AS u\nON\n  u.Id = q.OwnerUserId\nINNER JOIN\n  PostHistory AS ph\nON\n  ph.Id = q.Id\nINNER JOIN\n  PendingFlags AS pf\nON\n  pf.PostId = q.Id\nWHERE\n     q.PostTypeId = 1\n and DATEDIFF(DAY, q.CreationDate, GETDATE()) > 365\n and q.Score = 0\n and q.AnswerCount = 0\n and ph.PostHistoryTypeId != 14\n and q.ViewCount < DATEDIFF(DAY, q.CreationDate, GETDATE()) * 1.4\n and\n  q.ClosedDate IS NULL\n and\n  pf.FlagTypeId = 14\n and\n  LEN(q.Body) < ##questionLength?500##\n and\n  DATEDIFF(DAY, u.LastAccessDate, GETDATE()) > 7\n and\n  u.Reputation < ##questionerRep?500##\nGROUP BY\n  q.Id\nORDER BY\n  COUNT(pf.FlagTypeId) DESC",
        "CreationDate": "2015-01-02 01:58:22",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 261475,
        "Title": "Meta participation statistics for election-voters",
        "Description": null,
        "QueryBody": "DECLARE  @election_start_date datetime = ##ElectionStartDate:string##\nDECLARE @next_election_start_date datetime = ##NextElectionStartDate:string##\n\nSELECT \n  u.AccountId AS [AccountId]\nINTO\n  #voters\nFROM\n  Users AS u\n  INNER JOIN Badges AS b\n    ON u.Id = b.UserId\nWHERE\n  b.Name = 'Constituent'\n  AND DATEDIFF(MINUTE, @election_start_date, b.Date) > 0\n  AND DATEDIFF(MINUTE, DATEADD(DAY, -1, @next_election_start_date), b.Date) < 0\n\n-- Generate name of meta database\nDECLARE @metadbname nvarchar(max) = DB_NAME() + '.Meta'\n\nDECLARE @query nvarchar(max) = '\n  USE [' + @metadbname + ']\n  \n  SELECT\n    u.AccountId,\n    u.Reputation,\n    u.UpVotes + u.DownVotes AS [Votes]\n  FROM\n    Users AS u\n  WHERE\n    u.AccountId IN (SELECT AccountId FROM #voters)\n  '\n\nEXEC sp_executesql @query",
        "CreationDate": "2014-12-30 02:47:14",
        "validated": false,
        "QueryBody_Original": "DECLARE  @election_start_date datetime = ##ElectionStartDate:string##\nDECLARE @next_election_start_date datetime = ##NextElectionStartDate:string##\n\nSELECT \n  u.AccountId AS [AccountId]\nINTO\n  #voters\nFROM\n  Users AS u\n  INNER JOIN Badges AS b\n    ON u.Id = b.UserId\nWHERE\n  b.Name = 'Constituent'\n  AND DATEDIFF(MINUTE, @election_start_date, b.Date) > 0\n  AND DATEDIFF(MINUTE, DATEADD(DAY, -1, @next_election_start_date), b.Date) < 0\n\n-- Generate name of meta database\nDECLARE @metadbname nvarchar(max) = DB_NAME() + '.Meta'\n\nDECLARE @query nvarchar(max) = '\n  USE [' + @metadbname + ']\n  \n  SELECT\n    u.AccountId,\n    u.Reputation,\n    u.UpVotes + u.DownVotes AS [Votes]\n  FROM\n    Users AS u\n  WHERE\n    u.AccountId IN (SELECT AccountId FROM #voters)\n  '\n\nEXEC sp_executesql @query"
    },
    {
        "QuerySetId": 261651,
        "Title": "The identification requests are taking over! (cumulative)",
        "Description": "The y-axis is the fraction of total questions asked on the site (as of the date on the x-axis) that have the tag `TagName`.",
        "QueryBody": "DECLARE  @begin_date datetime = (SELECT MIN(CreationDate) FROM PostHistory);\nDECLARE @end_date datetime = (SELECT MAX(CreationDate) FROM PostHistory);\n\nDECLARE @tag nvarchar(max) = ##TagName:string##;\n\nWITH dates AS\n(\n  SELECT @begin_date AS [DateValue]\n  UNION ALL\n  SELECT DateValue + 1 FROM dates WHERE DateValue + 1 < @end_date\n)\n\nSELECT\n  d.DateValue AS [Date],\n  (SELECT COUNT(p.Id) \n   FROM Posts AS p \n   WHERE p.PostTypeId = 1 \n         AND p.Tags LIKE '%' + @tag + '%'\n         AND p.CreationDate < d.DateValue) AS [IdReqs],\n  (SELECT COUNT(p.Id) \n   FROM Posts AS p \n   WHERE p.PostTypeId = 1\n         AND p.CreationDate < d.DateValue) AS [Total]\nFROM\n  dates AS d\nOPTION (MAXRECURSION 0)",
        "CreationDate": "2014-12-31 05:28:23",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 261652,
        "Title": "The identification requests are taking over! (averaged instantaneous)",
        "Description": "The y-axis is the fraction of questions within a 2-week bucket starting on the date on the x-axis that had the tag `TagName`. ",
        "QueryBody": "DECLARE  @end_date datetime = (SELECT MAX(CreationDate) FROM PostHistory);\nDECLARE @width int = 7;\n\nWITH dates AS\n(\n  SELECT CAST('2012-12-18' AS DATETIME) DateValue -- exclude week 1, which is always anomalous\n  UNION ALL\n  SELECT DateValue + @width FROM dates WHERE DateValue + @width < @end_date\n)\n\nSELECT\n  d.DateValue AS [Date],\n  (SELECT COUNT(p.Id) \n   FROM Posts AS p \n   WHERE p.PostTypeId = 1 \n         AND p.Tags LIKE '%identification-request%'\n         AND d.DateValue < p.CreationDate\n         AND p.CreationDate < d.DateValue + @width) AS [IdReqs],\n  (SELECT COUNT(p.Id) \n   FROM Posts AS p \n   WHERE p.PostTypeId = 1\n         AND d.DateValue < p.CreationDate\n         AND p.CreationDate < d.DateValue + @width) AS [Total]\nFROM\n  dates AS d\nOPTION (MAXRECURSION 0)",
        "CreationDate": "2014-12-30 23:38:49",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 262118,
        "Title": " Questions with best score created within 3 month range",
        "Description": null,
        "QueryBody": "DECLARE  @From DATETIME = convert(DATETIME, '##StartDate?2015-01-01##')\nDECLARE @To DATETIME = dateadd(mm, 3, @From)\n\nSELECT TOP 50 Q.Id AS [Post Link], Users.Id AS [User Link],\n  Q.CreationDate, Q.Score AS [Question Score], \n  max(A.Score) AS [Max Answer Score], \n  Q.ViewCount AS Views, Q.FavoriteCount AS Favorited\nFROM\n  Posts Q\n  INNER JOIN Users ON Q.OwnerUserId = Users.Id\n  LEFT JOIN Posts A ON A.ParentId = Q.Id\nWHERE\n  Q.ClosedDate IS NULL AND\n  Q.PostTypeId = 1 AND\n  Q.CreationDate BETWEEN @From AND @To\nGROUP BY Q.Id, Users.Id, Q.CreationDate, Q.Score, Q.ViewCount,Q.FavoriteCount\nORDER BY Q.Score DESC",
        "CreationDate": "2015-03-27 23:04:24",
        "validated": false,
        "QueryBody_Original": "DECLARE  @From DATETIME = convert(DATETIME, '##StartDate?2015-01-01##')\nDECLARE @To DATETIME = dateadd(mm, 3, @From)\n\nSELECT TOP 50 Q.Id AS [Post Link], Users.Id AS [User Link],\n  Q.CreationDate, Q.Score AS [Question Score], \n  max(A.Score) AS [Max Answer Score], \n  Q.ViewCount AS Views, Q.FavoriteCount AS Favorited\nFROM\n  Posts Q\n  INNER JOIN Users ON Q.OwnerUserId = Users.Id\n  LEFT JOIN Posts A ON A.ParentId = Q.Id\nWHERE\n  Q.ClosedDate IS NULL AND\n  Q.PostTypeId = 1 AND\n  Q.CreationDate BETWEEN @From AND @To\nGROUP BY Q.Id, Users.Id, Q.CreationDate, Q.Score, Q.ViewCount,Q.FavoriteCount\nORDER BY Q.Score DESC"
    },
    {
        "QuerySetId": 262133,
        "Title": "Average Views Per Question In A Specified Tag",
        "Description": null,
        "QueryBody": "DECLARE  @Top100TotalViews int,\n        @TotalViews int;\n\nselect TOP 100 @Top100TotalViews = sum(viewcount)\nfrom posts\nGROUP BY viewcount\n\nselect @TotalViews = sum(viewcount)\nfrom posts\n\nSELECT @Top100TotalViews AS Top100TotalViews, @TotalViews AS TotalViews",
        "CreationDate": "2015-01-13 01:13:04",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 262520,
        "Title": "Number of questions and unanswered questions on StackOverflow",
        "Description": null,
        "QueryBody": "DECLARE  @TagName varchar(128) = '%##TagName##%'\n\n\nSELECT CAST((\n\tCAST((\n\t\tSELECT SUM(P.AnswerCount) FROM Posts P\n\t\tWHERE P.Id IN (\n\t\t\tSELECT DISTINCT(PT.PostId) FROM PostTags PT\n\t\t\tWHERE PT.TagId IN (\n\t\t\t\tSELECT T.Id FROM Tags T WHERE T.TagName LIKE @TagName\n\t\t\t)\n\t\t)\n\t) AS FLOAT)\n\t\/\n\tCAST((\n\t\tSELECT COUNT(P.Id) FROM Posts P\n\t\tWHERE P.Id IN (\n\t\t\tSELECT DISTINCT(PT.PostId) FROM PostTags PT\n\t\t\tWHERE PT.TagId IN (\n\t\t\t\tSELECT T.Id FROM Tags T WHERE T.TagName LIKE @TagName\n\t\t\t)\n\t\t)\n\t) AS FLOAT)\n) AS DECIMAL(4,2))",
        "CreationDate": "2018-08-05 08:54:58",
        "validated": false,
        "QueryBody_Original": "DECLARE  @TagName varchar(128) = '%##TagName##%'\n\n\nSELECT CAST((\n\tCAST((\n\t\tSELECT SUM(P.AnswerCount) FROM Posts P\n\t\tWHERE P.Id IN (\n\t\t\tSELECT DISTINCT(PT.PostId) FROM PostTags PT\n\t\t\tWHERE PT.TagId IN (\n\t\t\t\tSELECT T.Id FROM Tags T WHERE T.TagName LIKE @TagName\n\t\t\t)\n\t\t)\n\t) AS FLOAT)\n\t\/\n\tCAST((\n\t\tSELECT COUNT(P.Id) FROM Posts P\n\t\tWHERE P.Id IN (\n\t\t\tSELECT DISTINCT(PT.PostId) FROM PostTags PT\n\t\t\tWHERE PT.TagId IN (\n\t\t\t\tSELECT T.Id FROM Tags T WHERE T.TagName LIKE @TagName\n\t\t\t)\n\t\t)\n\t) AS FLOAT)\n) AS DECIMAL(4,2))"
    },
    {
        "QuerySetId": 262836,
        "Title": "Undeleted posts by a user",
        "Description": null,
        "QueryBody": "SELECT  p.Id as [Post Link] from Posts p\ninner join PostHistory e \n    on e.PostId=p.Id\n    where e.PostHistoryTypeId = 13 and p.OwnerUserId = ##userid##\ngroup by p.Id, p.CreationDate\norder by p.CreationDate desc",
        "CreationDate": "2015-01-06 01:57:31",
        "validated": false,
        "QueryBody_Original": "SELECT  p.Id as [Post Link] from Posts p\ninner join PostHistory e \n    on e.PostId=p.Id\n    where e.PostHistoryTypeId = 13 and p.OwnerUserId = ##userid##\ngroup by p.Id, p.CreationDate\norder by p.CreationDate desc"
    },
    {
        "QuerySetId": 263106,
        "Title": "Guessing at recent favorited tags given a user ID based on activity.",
        "Description": null,
        "QueryBody": "DECLARE  @UserId int = ##UserId##\n\nSELECT TOP 5 \n    TagName,\n    COUNT(*) AS UpVotes \nFROM Tags\n    INNER JOIN PostTags ON PostTags.TagId = Tags.id\n    INNER JOIN Posts ON Posts.ParentId = PostTags.PostId\n    INNER JOIN Votes ON Votes.PostId = Posts.Id and VoteTypeId = 2\nWHERE \n    Posts.OwnerUserId = @UserId\nGROUP BY TagName \nORDER BY UpVotes DESC",
        "CreationDate": "2015-01-07 00:47:33",
        "validated": false,
        "QueryBody_Original": "DECLARE  @UserId int = ##UserId##\n\nSELECT TOP 5 \n    TagName,\n    COUNT(*) AS UpVotes \nFROM Tags\n    INNER JOIN PostTags ON PostTags.TagId = Tags.id\n    INNER JOIN Posts ON Posts.ParentId = PostTags.PostId\n    INNER JOIN Votes ON Votes.PostId = Posts.Id and VoteTypeId = 2\nWHERE \n    Posts.OwnerUserId = @UserId\nGROUP BY TagName \nORDER BY UpVotes DESC"
    },
    {
        "QuerySetId": 263144,
        "Title": "What are my last five active tags?",
        "Description": null,
        "QueryBody": "DECLARE  @UserId int = ##UserId##\n\nSELECT TOP 5 \n    TagName,\n    LastActivityDate\nFROM Tags\n    INNER JOIN PostTags ON PostTags.TagId = Tags.id\n    INNER JOIN Posts ON Posts.ParentId = PostTags.PostId\nWHERE \n    Posts.OwnerUserId = @UserId\nGROUP BY TagName, LastActivityDate\nORDER BY LastActivityDate DESC",
        "CreationDate": "2015-01-07 01:27:41",
        "validated": false,
        "QueryBody_Original": "DECLARE  @UserId int = ##UserId##\n\nSELECT TOP 5 \n    TagName,\n    LastActivityDate\nFROM Tags\n    INNER JOIN PostTags ON PostTags.TagId = Tags.id\n    INNER JOIN Posts ON Posts.ParentId = PostTags.PostId\nWHERE \n    Posts.OwnerUserId = @UserId\nGROUP BY TagName, LastActivityDate\nORDER BY LastActivityDate DESC"
    },
    {
        "QuerySetId": 263152,
        "Title": "Ranked stack-overflow users from your country",
        "Description": null,
        "QueryBody": "SELECT  t.TagName, a.OwnerUserId [UserId]\n, count(q.Id) [QCount]\n, count(a.Id) [ACount]\n, isnull(count(q.Id), 0) + isnull(count(a.Id), 0) [QACount]\ninto #tags_by_user\nfrom Tags t\njoin PostTags pt on t.Id = pt.TagId\njoin Posts q on pt.PostId = q.Id --> questions\n  and q.PostTypeId = 1\njoin Posts a on a.ParentId = q.Id --> answers\n  and a.PostTypeId = 2\ngroup by t.TagName, a.OwnerUserId\n\n\nSELECT u.Id\n, u.Reputation\n, u.DisplayName\n, u.WebsiteURL\n, u.AboutMe\n, u.ProfileImageURL\n, t.TagName\n, t.QCount [TagQuestionCount]\n, t.ACount [TagAnswerCount]\n, t.QACount [TagTotalCount]\n, u.LastAccessDate\nfrom Users u\njoin #tags_by_user t on u.Id = t.UserId\nwhere (upper(u.Location) like '%LATVIA%' or upper(u.Location) like '%LATVIJA%' or upper(u.Location) = 'LV')\norder by u.Reputation desc",
        "CreationDate": "2016-10-30 21:39:46",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 263190,
        "Title": "Suggested edits where rep disappears",
        "Description": null,
        "QueryBody": "DECLARE  @uid as int = ##uid:int?101##;\n\nselect SuggestedEdits.Id, SuggestedEdits.PostId as [Post Link], SuggestedEditVotes.UserId as [User Link]\n  from SuggestedEdits inner join SuggestedEditVotes\n    on SuggestedEdits.Id = SuggestedEditVotes.SuggestedEditId\n  where OwnerUserId = @uid\n    and SuggestedEditVotes.UserId = -1",
        "CreationDate": "2015-06-13 19:17:54",
        "validated": false,
        "QueryBody_Original": "DECLARE  @uid as int = ##uid:int?101##;\n\nselect SuggestedEdits.Id, SuggestedEdits.PostId as [Post Link], SuggestedEditVotes.UserId as [User Link]\n  from SuggestedEdits inner join SuggestedEditVotes\n    on SuggestedEdits.Id = SuggestedEditVotes.SuggestedEditId\n  where OwnerUserId = @uid\n    and SuggestedEditVotes.UserId = -1"
    },
    {
        "QuerySetId": 263444,
        "Title": "Number of users with reputation grouped and ordered by last access date",
        "Description": null,
        "QueryBody": "SELECT \n  DATEADD(day, DATEDIFF(day, 0, LastAccessDate), 0) AS \"Last access date\",\n  COUNT(*) AS \"Users\"\nFROM Users\nWHERE Reputation >= ##Reputation:int?5##\nGROUP BY DATEADD(day, DATEDIFF(day, 0, LastAccessDate), 0)\nORDER BY DATEADD(day, DATEDIFF(day, 0, LastAccessDate), 0);",
        "CreationDate": "2015-01-07 20:26:33",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 263466,
        "Title": "TJ Crowder Head to Head",
        "Description": null,
        "QueryBody": "DECLARE  @UserId int = ##UserId##;\n\nwith fights as (\n  select myAnswer.ParentId as Question,\n   myAnswer.Score as MyScore,\n   jonsAnswer.Score as JonsScore\n  from Posts as myAnswer\n  inner join Posts as jonsAnswer\n   on jonsAnswer.OwnerUserId = 157247 and myAnswer.ParentId = jonsAnswer.ParentId\n  where myAnswer.ownerUserId = @UserId and myAnswer.postTypeId = 2\n)\n\nselect\n  case\n   when myScore > JonsScore then 'You win'\n   when myScore < JonsScore then 'TJ wins'\n   else 'Tie'\n  end as 'Winner',\n  Question as [Post Link],\n  myScore as 'My score',\n  jonsScore as \"TJ's score\"\nfrom fights;",
        "CreationDate": "2015-01-07 20:55:52",
        "validated": false,
        "QueryBody_Original": "DECLARE  @UserId int = ##UserId##;\n\nwith fights as (\n  select myAnswer.ParentId as Question,\n   myAnswer.Score as MyScore,\n   jonsAnswer.Score as JonsScore\n  from Posts as myAnswer\n  inner join Posts as jonsAnswer\n   on jonsAnswer.OwnerUserId = 157247 and myAnswer.ParentId = jonsAnswer.ParentId\n  where myAnswer.ownerUserId = @UserId and myAnswer.postTypeId = 2\n)\n\nselect\n  case\n   when myScore > JonsScore then 'You win'\n   when myScore < JonsScore then 'TJ wins'\n   else 'Tie'\n  end as 'Winner',\n  Question as [Post Link],\n  myScore as 'My score',\n  jonsScore as \"TJ's score\"\nfrom fights;"
    },
    {
        "QuerySetId": 263508,
        "Title": "total voting for a site",
        "Description": null,
        "QueryBody": "SELECT \n   sum (upvotes) as TotUp\n  , sum (downvotes) as TotDown\n  , sum (upvotes + downvotes) as TotVotes\n  , sum(Upvotes) * 1.0 \/ sum(UpVotes + DownVotes) As TotUpVotePercent\n  , min(Upvotes * 1.0 \/ (UpVotes + DownVotes)) As MinUpVotePercent\n  , sum(UpVotes + DownVotes) * 1.0 \/ sum(DateDiff(Day, CreationDate, LastAccessDate)) As AvgVotesPerDay\nfrom users u\nwhere upvotes + downvotes > ##Threshold## and DateDiff(Day, CreationDate, LastAccessDate) > 0",
        "CreationDate": "2015-01-08 02:23:57",
        "validated": false,
        "QueryBody_Original": "SELECT \n   sum (upvotes) as TotUp\n  , sum (downvotes) as TotDown\n  , sum (upvotes + downvotes) as TotVotes\n  , sum(Upvotes) * 1.0 \/ sum(UpVotes + DownVotes) As TotUpVotePercent\n  , min(Upvotes * 1.0 \/ (UpVotes + DownVotes)) As MinUpVotePercent\n  , sum(UpVotes + DownVotes) * 1.0 \/ sum(DateDiff(Day, CreationDate, LastAccessDate)) As AvgVotesPerDay\nfrom users u\nwhere upvotes + downvotes > ##Threshold## and DateDiff(Day, CreationDate, LastAccessDate) > 0"
    },
    {
        "QuerySetId": 264502,
        "Title": "How many upvotes do I have",
        "Description": null,
        "QueryBody": "DECLARE  @UserId int = ##UserId##\nDECLARE @TagName nvarchar (25) = ##TagName##\n\nSELECT Votes, COUNT(*) AS AnswersCount\nFROM (\n  SELECT (UpVotes - DownVotes) As Votes\n  FROM (\n      SELECT \n          SUM(CASE WHEN VoteTypeId = 2 THEN 1 ELSE 0 END) AS UpVotes,\n          SUM(CASE WHEN VoteTypeId = 3 THEN 1 ELSE 0 END) AS DownVotes\n          From Tags\n          INNER JOIN PostTags ON PostTags.TagId = Tags.id\n          INNER JOIN Posts ON Posts.ParentId = PostTags.PostId\n          INNER JOIN Votes ON Votes.PostId = Posts.Id and VoteTypeId = 2\n      WHERE \n          Posts.OwnerUserId = @UserId AND \n          Tags.TagName = @TagName\n      GROUP BY Posts.id \n  ) UpAndDownVotes\n) VotesCount\nGROUP BY Votes\t\nORDER BY Votes DESC",
        "CreationDate": "2015-01-13 17:34:01",
        "validated": false,
        "QueryBody_Original": "DECLARE  @UserId int = ##UserId##\nDECLARE @TagName nvarchar (25) = ##TagName##\n\nSELECT Votes, COUNT(*) AS AnswersCount\nFROM (\n  SELECT (UpVotes - DownVotes) As Votes\n  FROM (\n      SELECT \n          SUM(CASE WHEN VoteTypeId = 2 THEN 1 ELSE 0 END) AS UpVotes,\n          SUM(CASE WHEN VoteTypeId = 3 THEN 1 ELSE 0 END) AS DownVotes\n          From Tags\n          INNER JOIN PostTags ON PostTags.TagId = Tags.id\n          INNER JOIN Posts ON Posts.ParentId = PostTags.PostId\n          INNER JOIN Votes ON Votes.PostId = Posts.Id and VoteTypeId = 2\n      WHERE \n          Posts.OwnerUserId = @UserId AND \n          Tags.TagName = @TagName\n      GROUP BY Posts.id \n  ) UpAndDownVotes\n) VotesCount\nGROUP BY Votes\t\nORDER BY Votes DESC"
    },
    {
        "QuerySetId": 264514,
        "Title": " How many upvotes do I have",
        "Description": null,
        "QueryBody": "DECLARE  @UserId int = ##UserId##\nDECLARE @TagName nvarchar (25) = ##TagName##\n\nSELECT Votes, COUNT(*) AS AnswersCount\nFROM (\n  SELECT (UpVotes - DownVotes) As Votes\n  FROM (\n      SELECT \n          SUM(CASE WHEN VoteTypeId = 2 THEN 1 ELSE 0 END) AS UpVotes,\n          SUM(CASE WHEN VoteTypeId = 3 THEN 1 ELSE 0 END) AS DownVotes\n          From Tags\n          INNER JOIN PostTags ON PostTags.TagId = Tags.id\n          INNER JOIN Posts ON Posts.ParentId = PostTags.PostId\n          INNER JOIN Votes ON Votes.PostId = Posts.Id and VoteTypeId = 2\n      WHERE \n          Posts.OwnerUserId = @UserId AND \n          Tags.TagName = @TagName\n      GROUP BY Posts.id \n  ) UpAndDownVotes\n) VotesCount\nGROUP BY Votes\t\nORDER BY Votes DESC",
        "CreationDate": "2015-01-13 17:38:45",
        "validated": false,
        "QueryBody_Original": "DECLARE  @UserId int = ##UserId##\nDECLARE @TagName nvarchar (25) = ##TagName##\n\nSELECT Votes, COUNT(*) AS AnswersCount\nFROM (\n  SELECT (UpVotes - DownVotes) As Votes\n  FROM (\n      SELECT \n          SUM(CASE WHEN VoteTypeId = 2 THEN 1 ELSE 0 END) AS UpVotes,\n          SUM(CASE WHEN VoteTypeId = 3 THEN 1 ELSE 0 END) AS DownVotes\n          From Tags\n          INNER JOIN PostTags ON PostTags.TagId = Tags.id\n          INNER JOIN Posts ON Posts.ParentId = PostTags.PostId\n          INNER JOIN Votes ON Votes.PostId = Posts.Id and VoteTypeId = 2\n      WHERE \n          Posts.OwnerUserId = @UserId AND \n          Tags.TagName = @TagName\n      GROUP BY Posts.id \n  ) UpAndDownVotes\n) VotesCount\nGROUP BY Votes\t\nORDER BY Votes DESC"
    },
    {
        "QuerySetId": 264515,
        "Title": "Group my answers by votes for a given tag",
        "Description": null,
        "QueryBody": "DECLARE  @UserId int = ##UserId##\nDECLARE @TagName nvarchar (25) = '##TagName##'\n\nSELECT UpVotes, DownVotes, COUNT(*) AS AnswersCount\nFROM (\n  SELECT UpVotes, DownVotes\n  FROM (\n      SELECT \n          SUM(CASE WHEN VoteTypeId = 2 THEN 1 ELSE 0 END) AS UpVotes,\n          SUM(CASE WHEN VoteTypeId = 3 THEN -1 ELSE 0 END) AS DownVotes\n          From Tags\n          INNER JOIN PostTags ON PostTags.TagId = Tags.id\n          INNER JOIN Posts ON Posts.ParentId = PostTags.PostId\n          LEFT JOIN Votes ON Votes.PostId = Posts.Id AND (VoteTypeId = 2 OR VoteTypeId = 3)\n      WHERE \n          Posts.OwnerUserId = @UserId AND \n          Tags.TagName = @TagName\n      GROUP BY Posts.id\n  ) UpAndDownVotes\n) VotesCount\nGROUP BY UpVotes, DownVotes\t\nORDER BY UpVotes DESC",
        "CreationDate": "2015-01-13 22:52:08",
        "validated": false,
        "QueryBody_Original": "DECLARE  @UserId int = ##UserId##\nDECLARE @TagName nvarchar (25) = '##TagName##'\n\nSELECT UpVotes, DownVotes, COUNT(*) AS AnswersCount\nFROM (\n  SELECT UpVotes, DownVotes\n  FROM (\n      SELECT \n          SUM(CASE WHEN VoteTypeId = 2 THEN 1 ELSE 0 END) AS UpVotes,\n          SUM(CASE WHEN VoteTypeId = 3 THEN -1 ELSE 0 END) AS DownVotes\n          From Tags\n          INNER JOIN PostTags ON PostTags.TagId = Tags.id\n          INNER JOIN Posts ON Posts.ParentId = PostTags.PostId\n          LEFT JOIN Votes ON Votes.PostId = Posts.Id AND (VoteTypeId = 2 OR VoteTypeId = 3)\n      WHERE \n          Posts.OwnerUserId = @UserId AND \n          Tags.TagName = @TagName\n      GROUP BY Posts.id\n  ) UpAndDownVotes\n) VotesCount\nGROUP BY UpVotes, DownVotes\t\nORDER BY UpVotes DESC"
    },
    {
        "QuerySetId": 264516,
        "Title": " Group all my answers by votes",
        "Description": null,
        "QueryBody": "DECLARE  @UserId int = ##UserId##\n\nSELECT Votes, COUNT(*) AS AnswersCount\nFROM (\n  SELECT Votes\n  FROM (\n      SELECT \n          SUM(CASE WHEN VoteTypeId IS NULL THEN 0 ELSE ((CASE WHEN VoteTypeId = 2 THEN 1 ELSE ((CASE WHEN VoteTypeId = 3 THEN -1 ELSE NULL END)) END)) END) AS Votes\n      FROM Posts    \n      LEFT JOIN Votes ON Votes.PostId = Posts.Id\n      WHERE \n          Posts.OwnerUserId = @UserId\n      GROUP BY Posts.id\n  ) UpAndDownVotes  \n) VotesCount\nGROUP BY Votes\t\nORDER BY Votes DESC",
        "CreationDate": "2015-01-13 22:10:54",
        "validated": false,
        "QueryBody_Original": "DECLARE  @UserId int = ##UserId##\n\nSELECT Votes, COUNT(*) AS AnswersCount\nFROM (\n  SELECT Votes\n  FROM (\n      SELECT \n          SUM(CASE WHEN VoteTypeId IS NULL THEN 0 ELSE ((CASE WHEN VoteTypeId = 2 THEN 1 ELSE ((CASE WHEN VoteTypeId = 3 THEN -1 ELSE NULL END)) END)) END) AS Votes\n      FROM Posts    \n      LEFT JOIN Votes ON Votes.PostId = Posts.Id\n      WHERE \n          Posts.OwnerUserId = @UserId\n      GROUP BY Posts.id\n  ) UpAndDownVotes  \n) VotesCount\nGROUP BY Votes\t\nORDER BY Votes DESC"
    },
    {
        "QuerySetId": 264626,
        "Title": "Get my answers score graph",
        "Description": null,
        "QueryBody": "DECLARE  @UserId int = ##UserId##\n\nSELECT Score, Posts.Title\nFROM Posts \nWHERE Posts.OwnerUserId = @UserId AND Posts.PostTypeId = 2\nORDER BY Score ASC",
        "CreationDate": "2017-01-19 19:34:29",
        "validated": false,
        "QueryBody_Original": "DECLARE  @UserId int = ##UserId##\n\nSELECT Score, Posts.Title\nFROM Posts \nWHERE Posts.OwnerUserId = @UserId AND Posts.PostTypeId = 2\nORDER BY Score ASC"
    },
    {
        "QuerySetId": 264654,
        "Title": "How many upvotes and downvotes a user has",
        "Description": null,
        "QueryBody": "DECLARE  @UserId int = ##UserId##\n\nSELECT UpVotes, DownVotes, COUNT(*) AS AnswersCount\nFROM (\n  SELECT \n      SUM(CASE WHEN VoteTypeId = 2 THEN 1 ELSE 0 END) AS UpVotes,\n      SUM(CASE WHEN VoteTypeId = 3 THEN -1 ELSE 0 END) AS DownVotes\n      From Posts\n      INNER JOIN Votes ON Votes.PostId = Posts.Id and (VoteTypeId = 2 OR VoteTypeId = 3)\n  WHERE \n      Posts.OwnerUserId = @UserId\n  GROUP BY Posts.id \n) VotesCount\nGROUP BY UpVotes, DownVotes\t\nORDER BY UpVotes DESC",
        "CreationDate": "2015-01-13 23:39:43",
        "validated": false,
        "QueryBody_Original": "DECLARE  @UserId int = ##UserId##\n\nSELECT UpVotes, DownVotes, COUNT(*) AS AnswersCount\nFROM (\n  SELECT \n      SUM(CASE WHEN VoteTypeId = 2 THEN 1 ELSE 0 END) AS UpVotes,\n      SUM(CASE WHEN VoteTypeId = 3 THEN -1 ELSE 0 END) AS DownVotes\n      From Posts\n      INNER JOIN Votes ON Votes.PostId = Posts.Id and (VoteTypeId = 2 OR VoteTypeId = 3)\n  WHERE \n      Posts.OwnerUserId = @UserId\n  GROUP BY Posts.id \n) VotesCount\nGROUP BY UpVotes, DownVotes\t\nORDER BY UpVotes DESC"
    },
    {
        "QuerySetId": 264706,
        "Title": " Find posts to edit for Excavator and Archaeologist badges by tag",
        "Description": null,
        "QueryBody": "SELECT  TOP 1000\n    Id as [Post Link],\n    Score,\n    LastActivityDate,\n    Tags\nFROM Posts\nWHERE PostTypeId=1\nAND LastActivityDate < DATEADD(mm, -6, GETDATE())\nAND AcceptedAnswerId IS NULL\nAND Score >= 0\nAND Tags LIKE '%<c#>%'\nORDER BY Score",
        "CreationDate": "2015-06-04 22:16:50",
        "validated": false,
        "QueryBody_Original": "SELECT  TOP 1000\n    Id as [Post Link],\n    Score,\n    LastActivityDate,\n    Tags\nFROM Posts\nWHERE PostTypeId=1\nAND LastActivityDate < DATEADD(mm, -6, GETDATE())\nAND AcceptedAnswerId IS NULL\nAND Score >= 0\nAND Tags LIKE '%<c#>%'\nORDER BY Score"
    },
    {
        "QuerySetId": 265538,
        "Title": "Can you really own things?",
        "Description": null,
        "QueryBody": "SELECT \n  Id as [Post Link],\n  OwnerUserId,\n  OwnerDisplayName,\n  CommunityOwnedDate\nfrom\n  Posts\nwhere\n  Id = ##PostId##",
        "CreationDate": "2015-01-16 05:03:13",
        "validated": false,
        "QueryBody_Original": "SELECT \n  Id as [Post Link],\n  OwnerUserId,\n  OwnerDisplayName,\n  CommunityOwnedDate\nfrom\n  Posts\nwhere\n  Id = ##PostId##"
    },
    {
        "QuerySetId": 266666,
        "Title": "Total weight of contributions from a user",
        "Description": null,
        "QueryBody": "SELECT \n    posttypeid\n  , sum(len(body)) as weight\nfrom posts\nwhere owneruserid = ##UserId##\ngroup by posttypeid\n\nunion \n\n-- upvoted posts (Type ID += 100)\nSELECT\n    posttypeid + 100 as posttypeid\n  , sum(len(body)) as weight\nfrom posts\nwhere owneruserid = ##UserId##\nand score > 0\ngroup by posttypeid\n\nunion\n\n-- all comments (Type ID = 0)\nSELECT\n    0 as posttypeid\n  , sum(len(text)) as weight\nfrom comments\nwhere userid = ##UserId##\n\nunion\n\n-- upvoted comments (Type ID = 100)\nSELECT\n    100 as posttypeid\n  , sum(len(text)) as weight\nfrom comments\nwhere userid = ##UserId##\nand score > 0\n\norder by posttypeid",
        "CreationDate": "2015-01-21 00:40:29",
        "validated": false,
        "QueryBody_Original": "SELECT \n    posttypeid\n  , sum(len(body)) as weight\nfrom posts\nwhere owneruserid = ##UserId##\ngroup by posttypeid\n\nunion \n\n-- upvoted posts (Type ID += 100)\nSELECT\n    posttypeid + 100 as posttypeid\n  , sum(len(body)) as weight\nfrom posts\nwhere owneruserid = ##UserId##\nand score > 0\ngroup by posttypeid\n\nunion\n\n-- all comments (Type ID = 0)\nSELECT\n    0 as posttypeid\n  , sum(len(text)) as weight\nfrom comments\nwhere userid = ##UserId##\n\nunion\n\n-- upvoted comments (Type ID = 100)\nSELECT\n    100 as posttypeid\n  , sum(len(text)) as weight\nfrom comments\nwhere userid = ##UserId##\nand score > 0\n\norder by posttypeid"
    },
    {
        "QuerySetId": 266852,
        "Title": "tags distribution on the major legal tags non-legal related",
        "Description": null,
        "QueryBody": "SELECT  top ##count## t.tagname \n     , count(*) as [Number of Question]\nfrom posttags pt \ninner join posttags bpt on pt.postid = bpt.postid\ninner join tags bt on bt.id = bpt.tagid\ninner join tags t on t.id = pt.tagid and t.id <> bt.id\nwhere bt.tagname = '##tag##'\nand t.tagname not in \n( 'licensing'\n, 'gpl'\n, 'open-source'\n, 'lgpl'\n, 'legal'\n, 'mit-license'\n, 'apache-license'\n, 'commercial'\n, 'gplv3'\n, 'license-key'\n, 'bsd-license' \n)\ngroup by t.tagname\norder  by count(*) desc",
        "CreationDate": "2015-06-13 02:50:04",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 267054,
        "Title": "Average Question Score by User",
        "Description": "Enter the UserId from the chosen site and find the average question score of that user.",
        "QueryBody": "DECLARE  @UserId int = ##UserId##\n\nSELECT AVG(CAST(Score as float)) AS VOTE\nFROM Posts \nWHERE Posts.OwnerUserId = @UserId AND Posts.PostTypeId = 1",
        "CreationDate": "2015-03-06 08:16:38",
        "validated": false,
        "QueryBody_Original": "DECLARE  @UserId int = ##UserId##\n\nSELECT AVG(CAST(Score as float)) AS VOTE\nFROM Posts \nWHERE Posts.OwnerUserId = @UserId AND Posts.PostTypeId = 1"
    },
    {
        "QuerySetId": 267055,
        "Title": "Average Answer Score By User",
        "Description": null,
        "QueryBody": "DECLARE  @UserId int = ##UserId##\n\nSELECT AVG(CAST(Score as float)) AS VOTE\nFROM Posts \nWHERE Posts.OwnerUserId = @UserId AND Posts.PostTypeId = 2",
        "CreationDate": "2015-01-23 01:41:55",
        "validated": false,
        "QueryBody_Original": "DECLARE  @UserId int = ##UserId##\n\nSELECT AVG(CAST(Score as float)) AS VOTE\nFROM Posts \nWHERE Posts.OwnerUserId = @UserId AND Posts.PostTypeId = 2"
    },
    {
        "QuerySetId": 267086,
        "Title": "simple score statistics on questions (by user)",
        "Description": null,
        "QueryBody": "DECLARE  @UserId int = ##UserId##\n\nSELECT\n Count(*) AS [All],\n Sum(CASE WHEN a.Score > 0 THEN 1 ELSE 0 END) AS [Upvoted],\n Sum(CASE WHEN a.Score = 0 THEN 1 ELSE 0 END) AS [Zero Voted],\n Sum(CASE WHEN a.Score < 0 THEN 1 ELSE 0 END) AS [Downvoted]\nFROM\n Posts a\n  LEFT JOIN \n   Posts q\n    ON q.AcceptedAnswerId = a.Id\nWHERE\n a.OwnerUserId = @UserID AND\n a.PostTypeId = 1",
        "CreationDate": "2015-01-23 02:06:37",
        "validated": false,
        "QueryBody_Original": "DECLARE  @UserId int = ##UserId##\n\nSELECT\n Count(*) AS [All],\n Sum(CASE WHEN a.Score > 0 THEN 1 ELSE 0 END) AS [Upvoted],\n Sum(CASE WHEN a.Score = 0 THEN 1 ELSE 0 END) AS [Zero Voted],\n Sum(CASE WHEN a.Score < 0 THEN 1 ELSE 0 END) AS [Downvoted]\nFROM\n Posts a\n  LEFT JOIN \n   Posts q\n    ON q.AcceptedAnswerId = a.Id\nWHERE\n a.OwnerUserId = @UserID AND\n a.PostTypeId = 1"
    },
    {
        "QuerySetId": 268494,
        "Title": "Even Better Statler and Waldorf's Box ",
        "Description": null,
        "QueryBody": "DECLARE  @AVG_DV INT\n\nSELECT @AVG_DV = AVG(DownVotes) FROM Users\nWHERE DownVotes > 0\n\nSELECT TOP 100 Id [User Link], Location, Reputation, UpVotes, DownVotes, \n100 * DownVotes\/ ISNULL(NULLIF(CAST(DownVotes+UpVotes AS DECIMAL), 0), 1) [Ratio],\nDATEDIFF(d, CreationDate, GETDATE()) [SO Age(days)]\nFROM Users\nWHERE DownVotes > @AVG_DV\nORDER BY [Ratio] DESC",
        "CreationDate": "2015-01-28 17:13:44",
        "validated": false,
        "QueryBody_Original": "DECLARE  @AVG_DV INT\n\nSELECT @AVG_DV = AVG(DownVotes) FROM Users\nWHERE DownVotes > 0\n\nSELECT TOP 100 Id [User Link], Location, Reputation, UpVotes, DownVotes, \n100 * DownVotes\/ ISNULL(NULLIF(CAST(DownVotes+UpVotes AS DECIMAL), 0), 1) [Ratio],\nDATEDIFF(d, CreationDate, GETDATE()) [SO Age(days)]\nFROM Users\nWHERE DownVotes > @AVG_DV\nORDER BY [Ratio] DESC"
    },
    {
        "QuerySetId": 269114,
        "Title": "Posts migrated here from site and with tag",
        "Description": null,
        "QueryBody": "WITH  tag\n\n\nSelect \ncomment, tagname\nFrom PostHistory, Tags\nWhere PostHistoryTypeId = 36 \n\n-- Surround your variable in single quotes: 'text'\nand comment like 'from http:\/\/' + ##site## +'%'\nand tagname like ##tag## \n\n\nGroup By comment, TagName\nOrder by 2 desc",
        "CreationDate": "2015-01-30 19:22:38",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 269315,
        "Title": " All questions with a *single* tag",
        "Description": null,
        "QueryBody": "SELECT  Id as [Post Link] FROM Posts\nWHERE PostTypeId = 1\nAND Tags = CONCAT('<', ##Tag:string##, '>')\nORDER BY CreationDate DESC",
        "CreationDate": "2015-01-31 04:34:52",
        "validated": false,
        "QueryBody_Original": "SELECT  Id as [Post Link] FROM Posts\nWHERE PostTypeId = 1\nAND Tags = CONCAT('<', ##Tag:string##, '>')\nORDER BY CreationDate DESC"
    },
    {
        "QuerySetId": 269343,
        "Title": "New accounts per day (moving average)",
        "Description": null,
        "QueryBody": "WITH  accountsByDate AS (\n    SELECT      CAST(u.CreationDate AS DATE) as [Date],\n                COUNT(*) as numUsers\n    FROM        Users u\n    GROUP BY    CAST(u.CreationDate AS DATE)\n)\nSELECT\n    a.[Date],\n    AVG(a.numUsers) OVER (\n        ORDER BY a.[Date]\n        ROWS BETWEEN ##MovingAvg:int?20## PRECEDING AND CURRENT ROW\n    )\nFROM accountsByDate a\nWHERE a.[Date] >= '2016-01-01'",
        "CreationDate": "2018-02-06 03:45:01",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 269357,
        "Title": "Does it matter who edits a downvoted question?",
        "Description": null,
        "QueryBody": "DECLARE  @downvotedQuestions INT;\nSELECT\n@downvotedQuestions = COUNT(DISTINCT p.Id)\n--p.Id AS [Post Link]\nFROM Posts p\nJOIN Votes v\nON p.Id = v.PostId\nJOIN VoteTypes vt\nON vt.Id = v.VoteTypeId AND vt.Name = 'DownMod'\nJOIN PostTypes pt\nON pt.Id = p.PostTypeId AND pt.Name = 'Question';\n\nSELECT\n  @downvotedQuestions;",
        "CreationDate": "2015-01-31 08:25:49",
        "validated": false,
        "QueryBody_Original": "DECLARE  @downvotedQuestions INT;\nSELECT\n@downvotedQuestions = COUNT(DISTINCT p.Id)\n--p.Id AS [Post Link]\nFROM Posts p\nJOIN Votes v\nON p.Id = v.PostId\nJOIN VoteTypes vt\nON vt.Id = v.VoteTypeId AND vt.Name = 'DownMod'\nJOIN PostTypes pt\nON pt.Id = p.PostTypeId AND pt.Name = 'Question';\n\nSELECT\n  @downvotedQuestions;"
    },
    {
        "QuerySetId": 269542,
        "Title": "Number of users with higher, same or lower reputation",
        "Description": null,
        "QueryBody": "DECLARE  @UserId int = ##UserId##\n\nDECLARE @Rep int\nSELECT @Rep = Reputation FROM Users WHERE Id = @UserId\n\nDECLARE @Cnt int\nSELECT @Cnt = COUNT(*) FROM Users\n\nSELECT 'Higher' AS Score, Count(*), Count(*) * 100.0 \/ @Cnt\nFROM Users WHERE Reputation > @Rep\nUNION\nSELECT 'Same' AS Score, Count(*), Count(*) * 100.0 \/ @Cnt\nFROM Users WHERE Reputation = @Rep\nUNION\nSELECT 'Lower' AS Score, Count(*), Count(*) * 100.0 \/ @Cnt\nFROM Users WHERE Reputation < @Rep",
        "CreationDate": "2015-02-02 03:41:50",
        "validated": false,
        "QueryBody_Original": "DECLARE  @UserId int = ##UserId##\n\nDECLARE @Rep int\nSELECT @Rep = Reputation FROM Users WHERE Id = @UserId\n\nDECLARE @Cnt int\nSELECT @Cnt = COUNT(*) FROM Users\n\nSELECT 'Higher' AS Score, Count(*), Count(*) * 100.0 \/ @Cnt\nFROM Users WHERE Reputation > @Rep\nUNION\nSELECT 'Same' AS Score, Count(*), Count(*) * 100.0 \/ @Cnt\nFROM Users WHERE Reputation = @Rep\nUNION\nSELECT 'Lower' AS Score, Count(*), Count(*) * 100.0 \/ @Cnt\nFROM Users WHERE Reputation < @Rep"
    },
    {
        "QuerySetId": 269683,
        "Title": "Post edits on your owned posts not by you",
        "Description": null,
        "QueryBody": "DECLARE  @UserID int = ##userId##\n\nSELECT \n  Id, \n  Id as [Post Link],\n  Score\nFROM \n  Posts\nWHERE\n  Posts.OwnerUserId <> @UserID\n    and\n  Posts.LastEditorUserId = @UserID",
        "CreationDate": "2015-02-28 00:35:17",
        "validated": false,
        "QueryBody_Original": "DECLARE  @UserID int = ##userId##\n\nSELECT \n  Id, \n  Id as [Post Link],\n  Score\nFROM \n  Posts\nWHERE\n  Posts.OwnerUserId <> @UserID\n    and\n  Posts.LastEditorUserId = @UserID"
    },
    {
        "QuerySetId": 270493,
        "Title": "Post with the longest title",
        "Description": null,
        "QueryBody": "WITH  the longest title\n\nSelect top  50 id, title as [Post Link], len(body) as title_length\nfrom Posts\norder by title_length desc",
        "CreationDate": "2016-12-25 02:24:34",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 270645,
        "Title": "How long are my posts?",
        "Description": null,
        "QueryBody": "SELECT  LEN(p.body), Id AS [Post Link]\nFROM posts p\nWHERE p.PostTypeId = 2\n  AND p.OwnerUserId = ##UserId##\nORDER BY LEN(p.body) DESC",
        "CreationDate": "2015-02-05 03:44:39",
        "validated": false,
        "QueryBody_Original": "SELECT  LEN(p.body), Id AS [Post Link]\nFROM posts p\nWHERE p.PostTypeId = 2\n  AND p.OwnerUserId = ##UserId##\nORDER BY LEN(p.body) DESC"
    },
    {
        "QuerySetId": 271049,
        "Title": "finding nick carver's comments to see if he ever talked about bosun as a provider",
        "Description": null,
        "QueryBody": "SELECT  body, title\nfrom posts \nwhere OwnerUserId=13249 \nand (body like '%provider%' or title like '%provider%')\norder by LastEditDate desc\n\n\nSELECT Text\nfrom Comments \nwhere UserID=13249 \nand Text like '%provider%'\norder by CreationDate desc",
        "CreationDate": "2015-02-06 09:28:16",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 271219,
        "Title": "Upvotes on posts containing 'Maple' for a user",
        "Description": null,
        "QueryBody": "DECLARE  @UserId int = ##UserId##\n\nselect\n COUNT(*) AS UpVotes\nfrom Posts\n inner join Votes on Votes.PostId = Posts.Id and VoteTypeId = 2\nwhere Posts.PostTypeId=2 and Posts.OwnerUserId = @UserId and \n      Posts.body like '%aple%'\nOrder By UpVotes Desc",
        "CreationDate": "2015-02-07 07:27:26",
        "validated": false,
        "QueryBody_Original": "DECLARE  @UserId int = ##UserId##\n\nselect\n COUNT(*) AS UpVotes\nfrom Posts\n inner join Votes on Votes.PostId = Posts.Id and VoteTypeId = 2\nwhere Posts.PostTypeId=2 and Posts.OwnerUserId = @UserId and \n      Posts.body like '%aple%'\nOrder By UpVotes Desc"
    },
    {
        "QuerySetId": 271380,
        "Title": "Number of users with this many answers",
        "Description": null,
        "QueryBody": "SELECT  COUNT(s.userId)\nFROM (\nSELECT u.Id AS userId, COUNT(p.Id) AS answerCount\nFROM Users AS u JOIN Posts AS p ON u.Id=p.OwnerUserId\nWHERE p.PostTypeId = 2\nGROUP BY u.Id\n) AS s\nWHERE s.answerCount>=##minAnswers##",
        "CreationDate": "2015-02-08 04:36:58",
        "validated": false,
        "QueryBody_Original": "SELECT  COUNT(s.userId)\nFROM (\nSELECT u.Id AS userId, COUNT(p.Id) AS answerCount\nFROM Users AS u JOIN Posts AS p ON u.Id=p.OwnerUserId\nWHERE p.PostTypeId = 2\nGROUP BY u.Id\n) AS s\nWHERE s.answerCount>=##minAnswers##"
    },
    {
        "QuerySetId": 271801,
        "Title": "Top answerers for a particular tag with score\/answer ratio",
        "Description": null,
        "QueryBody": "DECLARE  @TagName nvarchar(50) = 'python'\n\nSELECT TOP 1000\n    A.[OwnerUserID],\n    [Users].[DisplayName],\n    SUM(A.Score) AS [Total Score],\n    COUNT(*) AS [Number of answers],\n    CAST(SUM(A.Score) AS DECIMAL(38,2))\/COUNT(*) AS [Score per answer]\nFROM\n    [Posts] AS A\nINNER JOIN\n    [Posts] AS B\nON\n    A.[ParentId] = B.[Id]\nINNER JOIN\n    [Users]\nON\n    A.[OwnerUserID] = [Users].[Id]\nWHERE\n    CHARINDEX('<'+ @TagName +'>', B.Tags) > 0\nGROUP BY\n    A.[OwnerUserID],\n    [Users].[DisplayName]\nORDER BY\n    [Total Score] DESC,\n    [Number of answers] DESC",
        "CreationDate": "2015-02-09 18:22:59",
        "validated": false,
        "QueryBody_Original": "DECLARE  @TagName nvarchar(50) = 'python'\n\nSELECT TOP 1000\n    A.[OwnerUserID],\n    [Users].[DisplayName],\n    SUM(A.Score) AS [Total Score],\n    COUNT(*) AS [Number of answers],\n    CAST(SUM(A.Score) AS DECIMAL(38,2))\/COUNT(*) AS [Score per answer]\nFROM\n    [Posts] AS A\nINNER JOIN\n    [Posts] AS B\nON\n    A.[ParentId] = B.[Id]\nINNER JOIN\n    [Users]\nON\n    A.[OwnerUserID] = [Users].[Id]\nWHERE\n    CHARINDEX('<'+ @TagName +'>', B.Tags) > 0\nGROUP BY\n    A.[OwnerUserID],\n    [Users].[DisplayName]\nORDER BY\n    [Total Score] DESC,\n    [Number of answers] DESC"
    },
    {
        "QuerySetId": 272677,
        "Title": "Number of questions asked on site before date",
        "Description": null,
        "QueryBody": "SELECT  COUNT(*) FROM Posts WHERE PostTypeId=1 AND CreationDate < ##Date##",
        "CreationDate": "2018-10-23 22:06:33",
        "validated": false,
        "QueryBody_Original": "SELECT  COUNT(*) FROM Posts WHERE PostTypeId=1 AND CreationDate < ##Date##"
    },
    {
        "QuerySetId": 272944,
        "Title": "Magic comment shorthand thing (doesn't work well)",
        "Description": null,
        "QueryBody": "DECLARE  cmt CURSOR FOR\n  SELECT Text \n  FROM Comments \n  WHERE Text LIKE '%\\[%\\]%' ESCAPE '\\'",
        "CreationDate": "2015-02-13 01:32:49",
        "validated": false,
        "QueryBody_Original": "DECLARE  cmt CURSOR FOR\n  SELECT Text \n  FROM Comments \n  WHERE Text LIKE '%\\[%\\]%' ESCAPE '\\'"
    },
    {
        "QuerySetId": 273529,
        "Title": "Cumulative Up and Down votes of all users above certain rep",
        "Description": null,
        "QueryBody": "DECLARE  @MinRep int = ##MinRep##\n\nSELECT\n    SUM(UpVotes) AS SumUp,\n    SUM(DownVotes) AS SumDown,\n    100.0*SUM(DownVotes)\/(SUM(UpVotes)+SUM(DownVotes)) AS DownPercent,\n    COUNT(*) AS CountUsers\nFROM Users\nWHERE Reputation >= @MinRep",
        "CreationDate": "2015-02-14 05:55:50",
        "validated": false,
        "QueryBody_Original": "DECLARE  @MinRep int = ##MinRep##\n\nSELECT\n    SUM(UpVotes) AS SumUp,\n    SUM(DownVotes) AS SumDown,\n    100.0*SUM(DownVotes)\/(SUM(UpVotes)+SUM(DownVotes)) AS DownPercent,\n    COUNT(*) AS CountUsers\nFROM Users\nWHERE Reputation >= @MinRep"
    },
    {
        "QuerySetId": 273951,
        "Title": "My position from Malta users",
        "Description": null,
        "QueryBody": "SELECT  seqnum as 'Position'\nFROM (SELECT ROW_NUMBER() OVER (ORDER BY Reputation DESC) AS seqnum, \n             Id AS [UserId], \n             Reputation\n      FROM Users\n      WHERE LOWER(Location) LIKE '%malta%'\n     ) u\nWHERE UserId = 484127\n\n\nSELECT COUNT(*) as 'Users from Malta:'\nFROM\n    Users\nWHERE\n    LOWER(Location) LIKE '%malta%'",
        "CreationDate": "2015-02-16 21:12:41",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 274173,
        "Title": "How many people have more reputation than me",
        "Description": null,
        "QueryBody": "DECLARE  @UserId int = ##UserId##\n\nSELECT count(id) as users_count\nFROM Users\nWHERE Reputation > (SELECT Reputation FROM Users WHERE id=@UserId)",
        "CreationDate": "2015-02-17 14:13:59",
        "validated": false,
        "QueryBody_Original": "DECLARE  @UserId int = ##UserId##\n\nSELECT count(id) as users_count\nFROM Users\nWHERE Reputation > (SELECT Reputation FROM Users WHERE id=@UserId)"
    },
    {
        "QuerySetId": 274749,
        "Title": "Who Asked the Most Bad Questions",
        "Description": "Returns: user name, rep, total questions asked, number of questions with negative score, number of closed questions, and number of bad questions (combined negative score and closed questions)",
        "QueryBody": "SELECT  TOP 100\n  Users.Id as [User Link], \n  Users.Reputation,\n  \n  count(*) \"Total Qs\",\n  SUM(CASE WHEN PostTypeId = 1 AND Score < 0 OR ClosedDate IS NOT NULL THEN 1 ELSE 0 END) \"Bad Qs\",\n  SUM(CASE WHEN Posts.CreationDate > dateadd(month, -3, getdate()) AND PostTypeId = 1 AND Score < 0  THEN 1 ELSE 0 END) \"Bad Qs last 3 months\",\n  SUM(CASE WHEN PostTypeId = 1 AND Score < 0 THEN 1 ELSE 0 END) \"Negative Score Qs\",\n  SUM(CASE WHEN ClosedDate IS NOT NULL THEN 1 ELSE 0 END) \"Closed Qs\"\n  \nfrom Posts inner join Users on Posts.OwnerUserId = Users.Id\n where PostTypeId = 1 \n\ngroup by Users.Id, Users.Reputation, OwnerUserId \norder by SUM(CASE WHEN PostTypeId = 1 AND Score < 0 OR ClosedDate IS NOT NULL THEN 1 ELSE 0 END) desc, Users.Id, Users.Reputation;",
        "CreationDate": "2015-02-18 23:09:13",
        "validated": false,
        "QueryBody_Original": "SELECT  TOP 100\n  Users.Id as [User Link], \n  Users.Reputation,\n  \n  count(*) \"Total Qs\",\n  SUM(CASE WHEN PostTypeId = 1 AND Score < 0 OR ClosedDate IS NOT NULL THEN 1 ELSE 0 END) \"Bad Qs\",\n  SUM(CASE WHEN Posts.CreationDate > dateadd(month, -3, getdate()) AND PostTypeId = 1 AND Score < 0  THEN 1 ELSE 0 END) \"Bad Qs last 3 months\",\n  SUM(CASE WHEN PostTypeId = 1 AND Score < 0 THEN 1 ELSE 0 END) \"Negative Score Qs\",\n  SUM(CASE WHEN ClosedDate IS NOT NULL THEN 1 ELSE 0 END) \"Closed Qs\"\n  \nfrom Posts inner join Users on Posts.OwnerUserId = Users.Id\n where PostTypeId = 1 \n\ngroup by Users.Id, Users.Reputation, OwnerUserId \norder by SUM(CASE WHEN PostTypeId = 1 AND Score < 0 OR ClosedDate IS NOT NULL THEN 1 ELSE 0 END) desc, Users.Id, Users.Reputation;"
    },
    {
        "QuerySetId": 274906,
        "Title": "Average answer score on closed questions",
        "Description": null,
        "QueryBody": "SELECT  count(*) N,\n       'late_close' 'question state',\n       round(avg(a.Score*1.0), 3) 'average Score'\nfrom Posts q\n     join Posts a ON a.ParentId = q.Id \n                     and a.OwnerUserId <> q.OwnerUserId and a.Score > 100\nwhere q.PostTypeId = 1 and datediff(month, q.CreationDate, q.ClosedDate) >= 1",
        "CreationDate": "2015-02-19 19:49:20",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 278497,
        "Title": "ROOMBA > year old questions that have active close votes ",
        "Description": "http:\/\/meta.stackexchange.com\/questions\/78048\/enable-automatic-deletion-of-old-unanswered-zero-score-questions-after-a-year\/92006#92006 No need to vote to close these as 1 downvote should delete them anytime within the next 7 days.",
        "QueryBody": "SELECT \n  q.Id AS [Post Link],\n  COUNT(pf.FlagTypeId) AS CVs,\n  q.ViewCount\nFROM\n  Posts AS q\nINNER JOIN\n  Users AS u\nON\n  u.Id = q.OwnerUserId\nINNER JOIN\n  PostHistory AS ph\nON\n  ph.Id = q.Id\nINNER JOIN\n  PendingFlags AS pf\nON\n  pf.PostId = q.Id\nWHERE\n     q.PostTypeId = 1\n and DATEDIFF(DAY, q.CreationDate, GETDATE()) > 365\n and q.Score = 0\n and q.AnswerCount = 0\n and ph.PostHistoryTypeId != 14\n and q.ViewCount < DATEDIFF(DAY, q.CreationDate, GETDATE()) * 1.4\n and q.CommentCount > 1\n and\n  q.ClosedDate IS NULL\n and\n  pf.FlagTypeId = 14\n and\n  LEN(q.Body) < ##questionLength?500##\n and\n  DATEDIFF(DAY, u.LastAccessDate, GETDATE()) > 1\n and\n  u.Reputation < ##questionerRep?500##\nGROUP BY\n  q.Id, q.ViewCount\nORDER BY\n  COUNT(pf.FlagTypeId) DESC",
        "CreationDate": "2015-04-15 09:48:55",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 278809,
        "Title": "Posts with default title in Post History",
        "Description": null,
        "QueryBody": "WITH  the placeholder text\n-- Enter Query Description\n\nSELECT \n    [PostId] AS 'Post Link'\nFROM\n    PostHistory\nWHERE\n    PostHistoryTypeId in (1, 4)   -- initial title, edit title\n    AND CHARINDEX('your physics',Text) > 0\n    AND CHARINDEX('specific',Text) > 0",
        "CreationDate": "2015-02-26 00:43:17",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 278923,
        "Title": "Listar coment\u00e1rios em ordem decrescente de votos",
        "Description": null,
        "QueryBody": "SELECT  PostId as [Post Link], Text, Score from Comments \nwhere UserId = ##UserId## and score >= 0 \norder by score desc",
        "CreationDate": "2015-02-26 05:34:33",
        "validated": false,
        "QueryBody_Original": "SELECT  PostId as [Post Link], Text, Score from Comments \nwhere UserId = ##UserId## and score >= 0 \norder by score desc"
    },
    {
        "QuerySetId": 278949,
        "Title": "Votos positivos e negativos por usuario",
        "Description": null,
        "QueryBody": "SELECT  * from Votes \nwhere UserId = ##UserId##",
        "CreationDate": "2015-02-26 06:34:03",
        "validated": false,
        "QueryBody_Original": "SELECT  * from Votes \nwhere UserId = ##UserId##"
    },
    {
        "QuerySetId": 279487,
        "Title": "'Copy editor' and 'Strunk & White' badges progress",
        "Description": "You need 500 edited posts to get 'Copy editor' badge and 80 edits to get 'Strunk & White' badge\r\n",
        "QueryBody": "DECLARE  @user INT = ##UserId:int##\n\nselect\n    postid\nFROM PostHistory\nLEFT JOIN Posts as Post on PostHistory.PostId=Post.Id\nWHERE UserId=@user and Post.OwnerUserId!=@user\ngroup by postid\n--AND PostHistoryTypeId in (4,5)",
        "CreationDate": "2015-03-26 13:51:57",
        "validated": false,
        "QueryBody_Original": "DECLARE  @user INT = ##UserId:int##\n\nselect\n    postid\nFROM PostHistory\nLEFT JOIN Posts as Post on PostHistory.PostId=Post.Id\nWHERE UserId=@user and Post.OwnerUserId!=@user\ngroup by postid\n--AND PostHistoryTypeId in (4,5)"
    },
    {
        "QuerySetId": 279528,
        "Title": "'Copy editor' and 'Strunk & White' badges progress (Revamped)",
        "Description": "Previous queries haven't taken into consideration all the requirements laid out in http:\/\/meta.stackexchange.com\/questions\/67397\/list-of-all-badges-with-full-descriptions#188732.",
        "QueryBody": "DECLARE  @user INT = ##UserId:int##\nDECLARE @edits INT\n\nSELECT @edits = COUNT(*)\nFROM (\n  SELECT \n  PH.PostId, P.*\n  , ROW_NUMBER() OVER (PARTITION BY PH.PostId ORDER BY PH.CreationDate ASC) [row]\n  FROM PostHistory PH\n  INNER JOIN Posts as P on PH.PostId=P.Id\n  WHERE PH.UserId=@user and P.OwnerUserId <> @user\n  AND PH.PostHistoryTypeId in (4, 5)\n  AND P.PostTypeId IN (1, 2)\n  AND P.ClosedDate IS NULL\n) P\nWHERE P.[row] = 1\n\nSELECT\n@edits,\nCAST(ROUND(@edits * 1.25, 2) as VARCHAR(10)) + '%' as StrunkAndWhite,\nCAST(ROUND(@edits \/ 5.0, 2) as VARCHAR(10)) + '%' as CopyEditor",
        "CreationDate": "2015-02-27 01:31:45",
        "validated": false,
        "QueryBody_Original": "DECLARE  @user INT = ##UserId:int##\nDECLARE @edits INT\n\nSELECT @edits = COUNT(*)\nFROM (\n  SELECT \n  PH.PostId, P.*\n  , ROW_NUMBER() OVER (PARTITION BY PH.PostId ORDER BY PH.CreationDate ASC) [row]\n  FROM PostHistory PH\n  INNER JOIN Posts as P on PH.PostId=P.Id\n  WHERE PH.UserId=@user and P.OwnerUserId <> @user\n  AND PH.PostHistoryTypeId in (4, 5)\n  AND P.PostTypeId IN (1, 2)\n  AND P.ClosedDate IS NULL\n) P\nWHERE P.[row] = 1\n\nSELECT\n@edits,\nCAST(ROUND(@edits * 1.25, 2) as VARCHAR(10)) + '%' as StrunkAndWhite,\nCAST(ROUND(@edits \/ 5.0, 2) as VARCHAR(10)) + '%' as CopyEditor"
    },
    {
        "QuerySetId": 281295,
        "Title": "Get all user data from display name",
        "Description": null,
        "QueryBody": "DECLARE  @DisplayName nvarchar(40) = '##DisplayName##'\nSELECT * FROM Users WHERE DisplayName = @DisplayName",
        "CreationDate": "2015-03-01 13:51:01",
        "validated": false,
        "QueryBody_Original": "DECLARE  @DisplayName nvarchar(40) = '##DisplayName##'\nSELECT * FROM Users WHERE DisplayName = @DisplayName"
    },
    {
        "QuerySetId": 281371,
        "Title": "Recent Questions Filtered By Asker Reputation",
        "Description": null,
        "QueryBody": "DECLARE  @start date = dateadd(week, -1, getdate())\n\n\nselect TOP 200\nposts.id\nfrom\n(select * from Posts where PostTypeId=1\nand AcceptedAnswerId is NUll\nand score > 2\nand CreationDate >= @start\n) posts\njoin\nusers on users.id=posts.OwnerUserId\nwhere users.reputation>##Parameter:INT?1000## and users.reputation < 1000\norder by posts.CreationDate Desc",
        "CreationDate": "2015-03-01 18:56:18",
        "validated": false,
        "QueryBody_Original": "DECLARE  @start date = dateadd(week, -1, getdate())\n\n\nselect TOP 200\nposts.id\nfrom\n(select * from Posts where PostTypeId=1\nand AcceptedAnswerId is NUll\nand score > 2\nand CreationDate >= @start\n) posts\njoin\nusers on users.id=posts.OwnerUserId\nwhere users.reputation>##Parameter:INT?1000## and users.reputation < 1000\norder by posts.CreationDate Desc"
    },
    {
        "QuerySetId": 281864,
        "Title": "Answers per day for a particular user",
        "Description": null,
        "QueryBody": "SELECT \n   DATEPART(dd,CreationDate) AS [Day], COUNT(Id) AS [Count]\nFROM\n  Posts\nWHERE\n  PostTypeId = 2 \n  AND OwnerUserId = ##UserID:int##\n  AND DATEPART(yyyy,CreationDate) = ##Year:int##\n  AND DATEPART(mm,CreationDate) = ##Month:int##\n  AND CommunityOwnedDate IS NULL\nGROUP BY DATEPART(dd,CreationDate)\nORDER BY DATEPART(dd,CreationDate) ASC",
        "CreationDate": "2015-03-02 20:42:38",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 282228,
        "Title": "find some  comments to inspect",
        "Description": null,
        "QueryBody": "SELECT  text, postid as [Post Link]\nfrom comments c\ninner join posts p on p.id = c.postid \nwhere text like 'Possible duplicate%'\n--and score =0 \nand p.closeddate is not null\norder by p.creationdate asc\n\nSELECT a.id as [Post Link] \nfrom posts q \ninner join posts a on a.parentid = q.id \ninner join posts m on m.parentid = q.id\nwhere q.posttypeid =1\nand a.posttypeid =2\nand m.posttypeid =2\nand a.owneruserid<>158100\nand m.owneruserid=158100\nand m.score > 0",
        "CreationDate": "2015-03-09 00:07:07",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 283680,
        "Title": "Replace NULL with zero in static pivot",
        "Description": null,
        "QueryBody": "SELECT  * INTO #PROGRAM\nFROM\n(\nSELECT 'MSC' PName ,1 PCODE\nUNION ALL\nSELECT 'DC',2\nUNION ALL\nSELECT 'PO',4\n)TAB\n\n\nSELECT * INTO #Student\nFROM\n(\nSELECT 'kk' NAME,'A' Status1   ,1  SCODE\nUNION ALL\nSELECT 'ra','A',2\nUNION ALL\nSELECT 'paras','L',2\nUNION ALL\nSELECT 'prit','L',2\nUNION ALL\nSELECT 'poot','A',4\n)TAB\n\n SELECT PName,ISNULL([A],0) [A],ISNULL([L],0)[L] FROM \n (\n    -- Source data for pivoting\n    SELECT P.PName,Status1,\n\tCOUNT(Status1)OVER(PARTITION BY PNAME,Status1)CNT\n\tFROM #PROGRAM P\n\tJOIN #Student S ON P.PCODE=S.SCODE\n ) x\n PIVOT \n (\n     --Defines the values in each dynamic columns\n     count(CNT)\n     -- Get the column names\n     FOR Status1 IN ([A],[L])\n) p            \nORDER BY PName",
        "CreationDate": "2015-03-07 15:06:37",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 283723,
        "Title": "Find Review Links of Closed Questions That I Voted to Close",
        "Description": null,
        "QueryBody": "DECLARE  @userid AS nvarchar(32)\nDECLARE @uid AS int = ##UserId##\nSELECT @userid='\"Id\":'+cast(@uid as nvarchar)+','\n\nSELECT \n  'site:\/\/review\/' + \n  CASE ReviewTaskTypes.Id\n    WHEN 1 THEN 'suggested-edits'\n    WHEN 2 THEN 'close'\n    WHEN 3 THEN 'low-quality-posts'\n    WHEN 4 THEN 'first-posts'\n    WHEN 5 THEN 'late-answers'\n    WHEN 6 THEN 'reopen'\n  END + '\/' +\n  CAST(ReviewTasks.Id AS nvarchar) +\n  '| ' + \n  Posts.Title\nFROM\n  ReviewTaskTypes,\n  ReviewTasks\n    INNER JOIN PostHistory\n      ON ReviewTasks.PostId = PostHistory.PostId\n    INNER JOIN Posts\n      ON ReviewTasks.PostId = Posts.Id\nWHERE\n  PostHistory.PostHistoryTypeId = 10\n  AND [text] like '%'+@userid+'%'\n  AND ReviewTaskTypes.Id = ReviewTasks.ReviewTaskTypeId\n  AND ReviewTaskTypes.Id = 2\nORDER BY ReviewTasks.CreationDate",
        "CreationDate": "2015-03-07 17:47:51",
        "validated": false,
        "QueryBody_Original": "DECLARE  @userid AS nvarchar(32)\nDECLARE @uid AS int = ##UserId##\nSELECT @userid='\"Id\":'+cast(@uid as nvarchar)+','\n\nSELECT \n  'site:\/\/review\/' + \n  CASE ReviewTaskTypes.Id\n    WHEN 1 THEN 'suggested-edits'\n    WHEN 2 THEN 'close'\n    WHEN 3 THEN 'low-quality-posts'\n    WHEN 4 THEN 'first-posts'\n    WHEN 5 THEN 'late-answers'\n    WHEN 6 THEN 'reopen'\n  END + '\/' +\n  CAST(ReviewTasks.Id AS nvarchar) +\n  '| ' + \n  Posts.Title\nFROM\n  ReviewTaskTypes,\n  ReviewTasks\n    INNER JOIN PostHistory\n      ON ReviewTasks.PostId = PostHistory.PostId\n    INNER JOIN Posts\n      ON ReviewTasks.PostId = Posts.Id\nWHERE\n  PostHistory.PostHistoryTypeId = 10\n  AND [text] like '%'+@userid+'%'\n  AND ReviewTaskTypes.Id = ReviewTasks.ReviewTaskTypeId\n  AND ReviewTaskTypes.Id = 2\nORDER BY ReviewTasks.CreationDate"
    },
    {
        "QuerySetId": 283943,
        "Title": "Unanswered questions asked before graduation",
        "Description": null,
        "QueryBody": "DECLARE  @Time DATETIME = convert(DATETIME, '##GraduationTime?2015\/01\/28 21:40:34##')\n\nSELECT Posts.Id AS [Post Link] FROM Posts WHERE \n  Posts.AnswerCount = 0 AND \n  Posts.ClosedDate IS NULL AND\n  Posts.CreationDate < @Time\nORDER BY Posts.Score DESC;",
        "CreationDate": "2015-03-08 21:54:09",
        "validated": false,
        "QueryBody_Original": "DECLARE  @Time DATETIME = convert(DATETIME, '##GraduationTime?2015\/01\/28 21:40:34##')\n\nSELECT Posts.Id AS [Post Link] FROM Posts WHERE \n  Posts.AnswerCount = 0 AND \n  Posts.ClosedDate IS NULL AND\n  Posts.CreationDate < @Time\nORDER BY Posts.Score DESC;"
    },
    {
        "QuerySetId": 284063,
        "Title": "Average Answer Score by User",
        "Description": "Enter the UserId from the chosen site and find the average answer score of that user.",
        "QueryBody": "DECLARE  @UserId int = ##UserId##\n\nSELECT AVG(CAST(Score as float)) AS VOTE\nFROM Posts \nWHERE Posts.OwnerUserId = @UserId AND Posts.PostTypeId = 2",
        "CreationDate": "2015-03-09 05:00:54",
        "validated": false,
        "QueryBody_Original": "DECLARE  @UserId int = ##UserId##\n\nSELECT AVG(CAST(Score as float)) AS VOTE\nFROM Posts \nWHERE Posts.OwnerUserId = @UserId AND Posts.PostTypeId = 2"
    },
    {
        "QuerySetId": 284147,
        "Title": " Unanswered questions asked before graduation",
        "Description": null,
        "QueryBody": "DECLARE  @GradTime DATETIME = convert(DATETIME, '##GradTime?2015\/01\/28 21:40:34##')\nDECLARE @StartTime DATETIME = convert(DATETIME, '##StartTime?2015\/03\/09 00:00:00##')\n\nSELECT Q.Id AS [Post Link], Q.ViewCount AS Views, \n  Q.Score, Q.AnswerCount AS Answers\nFROM\n  Posts Q\nWHERE\n  Q.PostTypeId = 1 AND\n  Q.ClosedDate IS NULL AND\n  Q.CreationDate < @GradTime AND\n  NOT EXISTS (SELECT * FROM Posts A WHERE\n    A.ParentId = Q.Id AND A.CreationDate < @StartTime)\nORDER BY Q.ViewCount DESC",
        "CreationDate": "2015-03-15 16:29:49",
        "validated": false,
        "QueryBody_Original": "DECLARE  @GradTime DATETIME = convert(DATETIME, '##GradTime?2015\/01\/28 21:40:34##')\nDECLARE @StartTime DATETIME = convert(DATETIME, '##StartTime?2015\/03\/09 00:00:00##')\n\nSELECT Q.Id AS [Post Link], Q.ViewCount AS Views, \n  Q.Score, Q.AnswerCount AS Answers\nFROM\n  Posts Q\nWHERE\n  Q.PostTypeId = 1 AND\n  Q.ClosedDate IS NULL AND\n  Q.CreationDate < @GradTime AND\n  NOT EXISTS (SELECT * FROM Posts A WHERE\n    A.ParentId = Q.Id AND A.CreationDate < @StartTime)\nORDER BY Q.ViewCount DESC"
    },
    {
        "QuerySetId": 284525,
        "Title": "StackOverflow Count more than X Reputation",
        "Description": null,
        "QueryBody": "SELECT  COUNT(*) \nFROM Users\nWHERE Reputation > ##MinRep##",
        "CreationDate": "2015-03-10 17:24:54",
        "validated": false,
        "QueryBody_Original": "SELECT  COUNT(*) \nFROM Users\nWHERE Reputation > ##MinRep##"
    },
    {
        "QuerySetId": 284806,
        "Title": "Score of first question\/answer after N days by user",
        "Description": null,
        "QueryBody": "SELECT  fp.owneruserid as [User Link], p1.id as [Post Link], \nsum(case when v.votetypeid = 2 then 1 when v.votetypeid = 3 then -1 else 0 end) as ScoreThen\nfrom\n(\n  SELECT p.owneruserid, min(p.creationdate) as dateFirstPost\n  from posts p\n  where p.posttypeid = ##Choose1forQ2forA##\n  group by  p.owneruserid\n) fp\ninner join posts p1\non p1.creationdate = fp.dateFirstPost\nand p1.owneruserid = fp.owneruserid\ninner join votes v\non v.postid = p1.id\nand datediff(d, p1.creationdate, v.creationdate) <= ##N##\nand (v.votetypeid = 2 or v.votetypeid = 3)\ngroup by fp.owneruserid, p1.id\norder by sum(case when v.votetypeid = 2 then 1 when v.votetypeid = 3 then -1 else 0 end) desc",
        "CreationDate": "2015-03-10 23:36:50",
        "validated": false,
        "QueryBody_Original": "SELECT  fp.owneruserid as [User Link], p1.id as [Post Link], \nsum(case when v.votetypeid = 2 then 1 when v.votetypeid = 3 then -1 else 0 end) as ScoreThen\nfrom\n(\n  SELECT p.owneruserid, min(p.creationdate) as dateFirstPost\n  from posts p\n  where p.posttypeid = ##Choose1forQ2forA##\n  group by  p.owneruserid\n) fp\ninner join posts p1\non p1.creationdate = fp.dateFirstPost\nand p1.owneruserid = fp.owneruserid\ninner join votes v\non v.postid = p1.id\nand datediff(d, p1.creationdate, v.creationdate) <= ##N##\nand (v.votetypeid = 2 or v.votetypeid = 3)\ngroup by fp.owneruserid, p1.id\norder by sum(case when v.votetypeid = 2 then 1 when v.votetypeid = 3 then -1 else 0 end) desc"
    },
    {
        "QuerySetId": 284847,
        "Title": "Avance to Explainer \/ Refiner \/  Illuminator Badge",
        "Description": "Avance to Explainer \/ Refiner \/  Illuminator Badge",
        "QueryBody": "SELECT  a.OwnerUserId as [User Link], count(PostId) as [Answer Edits]\n  from Posts q\n       join PostHistory e on PostId = q.Id\n       join Posts a on a.ParentId = q.Id\n                       and IsNull(q.OwnerUserId, -1) <> a.OwnerUserId\n                       and UserId = a.OwnerUserId\n                       and abs(datediff(hour, a.CreationDate, e.CreationDate))\n                           < 12     \n  where PostHistoryTypeId in (4, 5) -- Edit title, body, or tags\n        and q.PostTypeId = 1\n        and a.PostTypeId = 2\n        and a.Score >= 1\n        and a.OwnerUserId = ##userid##\n  group by a.OwnerUserId",
        "CreationDate": "2015-03-11 00:31:50",
        "validated": false,
        "QueryBody_Original": "SELECT  a.OwnerUserId as [User Link], count(PostId) as [Answer Edits]\n  from Posts q\n       join PostHistory e on PostId = q.Id\n       join Posts a on a.ParentId = q.Id\n                       and IsNull(q.OwnerUserId, -1) <> a.OwnerUserId\n                       and UserId = a.OwnerUserId\n                       and abs(datediff(hour, a.CreationDate, e.CreationDate))\n                           < 12     \n  where PostHistoryTypeId in (4, 5) -- Edit title, body, or tags\n        and q.PostTypeId = 1\n        and a.PostTypeId = 2\n        and a.Score >= 1\n        and a.OwnerUserId = ##userid##\n  group by a.OwnerUserId"
    },
    {
        "QuerySetId": 285605,
        "Title": "Posts most edited by user",
        "Description": null,
        "QueryBody": "SELECT \n  Posts.Id as [Post Link],\n  Posts.OwnerUserId as [User Link],\n  COUNT(DISTINCT PostHistory.RevisionGUID) as Edits,\n  MIN(PostHistory.CreationDate) as Earliest,\n  MAX(PostHistory.CreationDate) as Latest  \nFROM\n  Posts\n  JOIN PostHistory ON PostHistory.PostId = Posts.Id\nWHERE\n  PostHistory.UserId = ##UserId##\n  AND PostHistory.PostHistoryTypeId IN (4, 5, 6)\nGROUP BY Posts.Id, Posts.OwnerUserId\nORDER BY Edits DESC",
        "CreationDate": "2015-03-11 23:51:41",
        "validated": false,
        "QueryBody_Original": "SELECT \n  Posts.Id as [Post Link],\n  Posts.OwnerUserId as [User Link],\n  COUNT(DISTINCT PostHistory.RevisionGUID) as Edits,\n  MIN(PostHistory.CreationDate) as Earliest,\n  MAX(PostHistory.CreationDate) as Latest  \nFROM\n  Posts\n  JOIN PostHistory ON PostHistory.PostId = Posts.Id\nWHERE\n  PostHistory.UserId = ##UserId##\n  AND PostHistory.PostHistoryTypeId IN (4, 5, 6)\nGROUP BY Posts.Id, Posts.OwnerUserId\nORDER BY Edits DESC"
    },
    {
        "QuerySetId": 285624,
        "Title": "Answers to unanswered pre-graduation questions",
        "Description": null,
        "QueryBody": "DECLARE  @GradTime DATETIME = convert(DATETIME, '##GradTime?2015\/01\/28 21:40:34##')\nDECLARE @StartTime DATETIME = convert(DATETIME, '##StartTime?2015\/03\/09 00:00:00##')\nDECLARE @EndTime DATETIME = convert(DATETIME, '##EndTime?2015\/03\/23 01:00:00##')\n\nSELECT A.Id AS [Post Link], A.Score, \n  (CASE WHEN Q.AcceptedAnswerId = A.Id THEN 1 ELSE 0 END) AS Accepted, \n  A.OwnerUserId AS [User Link]\nFROM\n  Posts A INNER JOIN Posts Q ON A.ParentId = Q.Id\nWHERE\n  A.CreationDate BETWEEN @StartTime AND @EndTime AND\n  Q.PostTypeId = 1 AND\n  Q.ClosedDate IS NULL AND\n  Q.CreationDate < @GradTime AND\n  NOT EXISTS (SELECT * FROM Posts B WHERE\n    B.ParentId = Q.Id AND B.CreationDate < @StartTime)\nORDER BY A.Score DESC, Accepted DESC",
        "CreationDate": "2015-03-15 16:21:59",
        "validated": false,
        "QueryBody_Original": "DECLARE  @GradTime DATETIME = convert(DATETIME, '##GradTime?2015\/01\/28 21:40:34##')\nDECLARE @StartTime DATETIME = convert(DATETIME, '##StartTime?2015\/03\/09 00:00:00##')\nDECLARE @EndTime DATETIME = convert(DATETIME, '##EndTime?2015\/03\/23 01:00:00##')\n\nSELECT A.Id AS [Post Link], A.Score, \n  (CASE WHEN Q.AcceptedAnswerId = A.Id THEN 1 ELSE 0 END) AS Accepted, \n  A.OwnerUserId AS [User Link]\nFROM\n  Posts A INNER JOIN Posts Q ON A.ParentId = Q.Id\nWHERE\n  A.CreationDate BETWEEN @StartTime AND @EndTime AND\n  Q.PostTypeId = 1 AND\n  Q.ClosedDate IS NULL AND\n  Q.CreationDate < @GradTime AND\n  NOT EXISTS (SELECT * FROM Posts B WHERE\n    B.ParentId = Q.Id AND B.CreationDate < @StartTime)\nORDER BY A.Score DESC, Accepted DESC"
    },
    {
        "QuerySetId": 285879,
        "Title": "Search my comments by text",
        "Description": null,
        "QueryBody": "SELECT  \n  PostId as [Post Link],\n  Text, \n  Score \nFROM Comments \nWHERE\n  UserId = ##UserId## AND\n  Text LIKE '%##Search##%'\nORDER BY CreationDate desc",
        "CreationDate": "2015-03-12 20:13:47",
        "validated": false,
        "QueryBody_Original": "SELECT  \n  PostId as [Post Link],\n  Text, \n  Score \nFROM Comments \nWHERE\n  UserId = ##UserId## AND\n  Text LIKE '%##Search##%'\nORDER BY CreationDate desc"
    },
    {
        "QuerySetId": 286747,
        "Title": "Distribution of question score for tag",
        "Description": null,
        "QueryBody": "WITH  qs AS (\n    SELECT q.Score AS Score, COUNT(*) as Count\n    FROM Posts AS q\n      INNER JOIN PostTags ON PostTags.PostId = q.Id\n      INNER JOIN Tags On PostTags.TagId = Tags.Id\n    WHERE Tags.TagName = ##tag:string##\n    GROUP BY q.Score\n)\nSELECT qs.Score as Accepted_Answer_Score, qs.Count, SUM(cumul.Count) * 100 \/ (SELECT SUM(Count) FROM qs) AS Cumulative_Percentage\nFROM qs\n  INNER JOIN qs as cumul ON cumul.Score <= qs.Score\nGROUP BY qs.Score, qs.Count\nORDER BY qs.SCORE;",
        "CreationDate": "2015-03-14 15:18:19",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 286757,
        "Title": "Distribution of accepted answer score for tag",
        "Description": null,
        "QueryBody": "WITH  qs AS (\n    SELECT a.Score AS Score, COUNT(*) as Count\n    FROM Posts AS q\n      INNER JOIN Posts AS a ON q.AcceptedAnswerId = a.Id\n      INNER JOIN PostTags ON PostTags.PostId = q.Id\n      INNER JOIN Tags On PostTags.TagId = Tags.Id\n    WHERE Tags.TagName = ##tag:string##\n    GROUP BY a.Score\n)\nSELECT qs.Score as Accepted_Answer_Score, qs.Count, SUM(cumul.Count) * 100 \/ (SELECT SUM(Count) FROM qs) AS Cumulative_Percentage\nFROM qs\n  INNER JOIN qs as cumul ON cumul.Score <= qs.Score\nGROUP BY qs.Score, qs.Count\nORDER BY qs.SCORE;",
        "CreationDate": "2015-03-14 15:39:12",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 286802,
        "Title": "Most Prolific Editors (All Edits)",
        "Description": null,
        "QueryBody": "SELECT \n  count(*) as TotalEdits\nfrom Posts\njoin PostTypes on Posts.PostTypeId = PostTypes.Id\njoin PostHistory on Posts.id = PostHistory.PostId\njoin PostHistoryTypes on PostHistory.PostHistoryTypeId = PostHistoryTypes.Id\nwhere\n  PostTypes.Name in ('Question', 'Answer')\n  and PostHistoryTypes.Name in ('Edit Title', 'Edit Body', 'Edit Tags')\n\nSELECT TOP ##Limit##\n  rank() OVER (ORDER BY count(*) DESC) AS Rank,\n  UserId AS [User Link],\n  count(*) AS EditCount  \nFROM PostHistory\nJOIN Posts ON Posts.Id = PostHistory.PostId\nWHERE Posts.OwnerUserId != PostHistory.UserId AND\nUserId <> -1\nGROUP BY UserId",
        "CreationDate": "2015-03-23 18:29:22",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 286988,
        "Title": "Q1.0.1 - score vs count",
        "Description": null,
        "QueryBody": "SELECT  \ncount(1) AS [COUNT]\nfrom  \n  posts p  \n  inner join users u\n    on u.id = p.owneruserid \nwhere  \n  P.posttypeid = 1 \n  and p.score = 0\n  --and p.score < 150\ngroup by\n  p.score\norder by\n  p.score\n  \n  \n  SELECT count(1) from  \n  posts p  \n  inner join users u\n    on u.id = p.owneruserid \nwhere  \n  P.posttypeid = 1",
        "CreationDate": "2015-04-18 05:24:55",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 287026,
        "Title": "Limiting Posts by Date and Rep, Parameterized, with Links (Tutorial)",
        "Description": null,
        "QueryBody": "SELECT  p.Id AS [Post Link], u.Id AS [User Link], u.Reputation\nFROM Posts p \nJOIN Users u ON p.OwnerUserId = u.Id\n-- We want to give the info for the user who owns the post on the same line\n\nWHERE p.CreationDate BETWEEN ##StartDate:string## AND ##EndDate:string##\n  AND p.PostTypeId = 1\n  AND u.Reputation < ##MaxReputation:int##\n\n-- StartDate: Starting date, YYYY-MM-DD\n-- EndDate: Ending date, YYYY-MM-DD, must be later than StartDate\n-- MaxReputation: Show results for users with reputation below this value\n\n-- Based on a query written by jmac",
        "CreationDate": "2015-03-16 00:00:11",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 288430,
        "Title": "Questions below a threshold but still open",
        "Description": null,
        "QueryBody": "SELECT  \n  p.Score, COUNT(p.Score) AS \"Open Questions\" \nFROM \n  Posts AS p\nWHERE \n  Score <= ##MaxScore?-4## \n  AND Score >= ##MinScore?-10## \n  AND ClosedDate Is NULL \n  AND AnswerCount > 0\nGROUP BY Score\nORDER BY Score DESC",
        "CreationDate": "2015-03-17 18:30:34",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 289002,
        "Title": "Total number of votes of ",
        "Description": "posttype = 1 for questions, = 2 for answers\r\nvotetype = 2 for upvotes, = 3 for downvotes",
        "QueryBody": "SELECT  count(v.Id) from Votes v\ninner join posts p on p.Id = v.PostId \n  where p.PostTypeId = ##posttype## and\n  v.VoteTypeId = ##votetype##",
        "CreationDate": "2015-03-17 22:04:59",
        "validated": false,
        "QueryBody_Original": "SELECT  count(v.Id) from Votes v\ninner join posts p on p.Id = v.PostId \n  where p.PostTypeId = ##posttype## and\n  v.VoteTypeId = ##votetype##"
    },
    {
        "QuerySetId": 290591,
        "Title": "Top Stack Overflow users by ID",
        "Description": null,
        "QueryBody": "DECLARE \n    @arg_user_ids varchar(max) = '##UserIds##'; \/* Assuming safe User IDs *\/\n\nSELECT * FROM users WHERE ID in (##UserIds##);",
        "CreationDate": "2015-03-19 14:14:34",
        "validated": false,
        "QueryBody_Original": "DECLARE \n    @arg_user_ids varchar(max) = '##UserIds##'; \/* Assuming safe User IDs *\/\n\nSELECT * FROM users WHERE ID in (##UserIds##);"
    },
    {
        "QuerySetId": 290912,
        "Title": "How many questions for a tag?",
        "Description": null,
        "QueryBody": "SELECT \n  COUNT(*)\nFROM PostTags\nINNER JOIN Tags ON\n  PostTags.TagId = Tags.id\nWHERE\n  Tags.TagName = ##TagName:string##;",
        "CreationDate": "2015-03-26 07:42:29",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 291185,
        "Title": "Total downvotes on questions, per day ",
        "Description": null,
        "QueryBody": "SELECT \n  QuestionDownVotes = count(*) \nfrom\n  Votes v\ninner join posts p on p.Id = v.PostId \n  where p.PostTypeId = 1 and\n  v.VoteTypeId = 2\n  \n\nSELECT\n  QuestionUpVotes = count(*) \nfrom\n  Votes v\ninner join posts p on p.Id = v.PostId \n  where p.PostTypeId = 1 and\n  v.VoteTypeId = 2",
        "CreationDate": "2015-03-21 03:38:29",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 291200,
        "Title": "POST ID TO POST DATA",
        "Description": null,
        "QueryBody": "SELECT  (BODY) FROM Posts WHERE Id=##POSTID##",
        "CreationDate": "2015-03-21 10:00:30",
        "validated": false,
        "QueryBody_Original": "SELECT  (BODY) FROM Posts WHERE Id=##POSTID##"
    },
    {
        "QuerySetId": 291633,
        "Title": "Top Votes Comments by network ID",
        "Description": null,
        "QueryBody": "SELECT \n  c.Score,\n  c.Id AS [Comment Link],\n  c.CreationDate\nFROM\n  Comments c INNER JOIN Users u ON c.UserId = u.Id\nWHERE\n  u.AccountId = ##AccountId##\nORDER BY\n  c.Score DESC, c.CreationDate DESC",
        "CreationDate": "2015-03-22 22:47:21",
        "validated": false,
        "QueryBody_Original": "SELECT \n  c.Score,\n  c.Id AS [Comment Link],\n  c.CreationDate\nFROM\n  Comments c INNER JOIN Users u ON c.UserId = u.Id\nWHERE\n  u.AccountId = ##AccountId##\nORDER BY\n  c.Score DESC, c.CreationDate DESC"
    },
    {
        "QuerySetId": 291743,
        "Title": "accepted posts and post count across database",
        "Description": "http:\/\/meta.stackexchange.com\/questions\/251859\/is-there-a-option-to-view-what-percentage-of-questions-has-an-accepted-answer\/251864#251864\r\n\r\nuncomment the top query if you need more columns \/ want different criteria\r\n",
        "QueryBody": "SELECT  'SELECT (SELECT count(*) from [' +[name]+ '].dbo.posts where posttypeid=1 and acceptedanswerid is not null) as accept, (SELECT count(*) from [' +[name]+ '].dbo.posts where posttypeid=1)  ''' + replace([name],'StackExchange.','') +'''  from [' +[name]+ '].dbo.users union all '\nfrom sys.databases \nwhere database_id > 5 -- skip master, temp, model, msdb, Data.SE\nand name not like '%.Meta%'\nand name not in (\n  'StackExchange.Meta'\n  , 'Stackoverflow'\n  , 'ServerFault'\n  , 'Superuser')\n\n\nSELECT (SELECT count(*) \n        from [StackApps].dbo.posts \n        where posttypeid=1 \n        and acceptedanswerid is not null) as accept, \n       (SELECT count(*) \n        from [StackApps].dbo.posts where posttypeid=1) \n        ,'StackApps'",
        "CreationDate": "2015-03-23 02:48:17",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 293052,
        "Title": "How many questions exist for a tag?",
        "Description": null,
        "QueryBody": "DECLARE  @TagId int;\n\nSELECT @TagId = t.Id\nFROM Tags t\nWHERE t.TagName = ##TagName:string##;  \n\nSELECT count(p.Id)\nFROM Posts p\nINNER JOIN PostTags pt ON\n  pt.TagId = @TagId\nWHERE\n  pt.PostId = p.Id AND\n  p.PostTypeId = 1;",
        "CreationDate": "2015-04-03 08:59:05",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 293219,
        "Title": "Posts that were edited by other users",
        "Description": null,
        "QueryBody": "SELECT  ID As [Post Link], LastEditorUserId As [User Link], LastEditDate\nfrom posts\nwhere OwnerUserId = ##UserId##\nand LastEditorUserId <> ##UserId##\nOrder By LastEditDate Desc",
        "CreationDate": "2015-03-26 19:15:33",
        "validated": false,
        "QueryBody_Original": "SELECT  ID As [Post Link], LastEditorUserId As [User Link], LastEditDate\nfrom posts\nwhere OwnerUserId = ##UserId##\nand LastEditorUserId <> ##UserId##\nOrder By LastEditDate Desc"
    },
    {
        "QuerySetId": 293332,
        "Title": "Get the average size of a question for a tag grouped by quarter",
        "Description": null,
        "QueryBody": "DECLARE  @TagId int;\n\nSELECT @TagId = t.Id\nFROM Tags t\nWHERE t.TagName = ##TagName:string##;  \n\nSELECT DATEADD(quarter, DATEDIFF(quarter, 0, p.CreationDate), 0), AVG(LEN(p.Body))\nFROM Posts p\nINNER JOIN PostTags pt ON\n  pt.TagId = @TagId\nWHERE\n  pt.PostId = p.Id AND\n  p.PostTypeId = 1\nGROUP BY dateadd(quarter, datediff(quarter, 0, CreationDate),0);",
        "CreationDate": "2015-04-03 09:01:37",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 293394,
        "Title": "How long until I get the pundit badge?",
        "Description": "List comments in order of score\r\n",
        "QueryBody": "DECLARE  @UserId int = ##UserId##\n\nSELECT \n    Posts.Title, Comments.Text, Comments.Score, Posts.Id, Posts.ParentId\nFROM Comments\n     INNER JOIN Posts ON Comments.PostId = Posts.Id\nWHERE \n    UserId = @UserId\nORDER BY Comments.Score DESC, Posts.ParentId,Posts.Id",
        "CreationDate": "2015-05-14 17:59:55",
        "validated": false,
        "QueryBody_Original": "DECLARE  @UserId int = ##UserId##\n\nSELECT \n    Posts.Title, Comments.Text, Comments.Score, Posts.Id, Posts.ParentId\nFROM Comments\n     INNER JOIN Posts ON Comments.PostId = Posts.Id\nWHERE \n    UserId = @UserId\nORDER BY Comments.Score DESC, Posts.ParentId,Posts.Id"
    },
    {
        "QuerySetId": 293446,
        "Title": "Search comments for given string on others' posts",
        "Description": null,
        "QueryBody": "SELECT  c.Id AS [Comment Link], u.DisplayName FROM Comments c\nFULL OUTER JOIN Posts p ON c.PostId = p.Id\nJOIN Users u ON u.Id = p.OwnerUserId\n\nWHERE u.Id != ##Userid##\n--- SearchString: value of LIKE, of the form '%whatever%'\nAND Text LIKE ##SearchString##",
        "CreationDate": "2015-03-28 01:23:51",
        "validated": false,
        "QueryBody_Original": "SELECT  c.Id AS [Comment Link], u.DisplayName FROM Comments c\nFULL OUTER JOIN Posts p ON c.PostId = p.Id\nJOIN Users u ON u.Id = p.OwnerUserId\n\nWHERE u.Id != ##Userid##\n--- SearchString: value of LIKE, of the form '%whatever%'\nAND Text LIKE ##SearchString##"
    },
    {
        "QuerySetId": 293745,
        "Title": "My rep gain per answer score",
        "Description": null,
        "QueryBody": "SELECT \n  score AS bucket,\n  SUM(score * 10 + CASE WHEN AcceptedAnswerId IS NULL THEN 15 ELSE 0 END) AS REP\nFROM\n  posts\nWHERE\n  OwnerUserId = ##UserId##\n  AND PostTypeId = 2\n  AND score >= 0\nGROUP BY\n  score",
        "CreationDate": "2015-03-28 18:14:13",
        "validated": false,
        "QueryBody_Original": "SELECT \n  score AS bucket,\n  SUM(score * 10 + CASE WHEN AcceptedAnswerId IS NULL THEN 15 ELSE 0 END) AS REP\nFROM\n  posts\nWHERE\n  OwnerUserId = ##UserId##\n  AND PostTypeId = 2\n  AND score >= 0\nGROUP BY\n  score"
    },
    {
        "QuerySetId": 294161,
        "Title": "Q0.3.1 - Questions per year",
        "Description": null,
        "QueryBody": "DECLARE  @good_question_score as integer = 19\n\n--Q0.3\nselect \n  year(creationdate) as [Year]\n  ,count(1) as total\n  ,SUM(case when score > @good_question_score then 1 else 0 end) as total_good_question\n  ,SUM(case when score > @good_question_score and AcceptedAnswerId  is null then 1 else 0 end) as total_good_question_no_accepted_answer\n  ,SUM(case when score > @good_question_score and answercount = 0 then 1 else 0 end) as total_good_question_no_answer\n  \nfrom\n  posts\nwhere\n  posttypeid = 1\ngroup by\n  year(creationdate)",
        "CreationDate": "2015-03-29 23:08:50",
        "validated": false,
        "QueryBody_Original": "DECLARE  @good_question_score as integer = 19\n\n--Q0.3\nselect \n  year(creationdate) as [Year]\n  ,count(1) as total\n  ,SUM(case when score > @good_question_score then 1 else 0 end) as total_good_question\n  ,SUM(case when score > @good_question_score and AcceptedAnswerId  is null then 1 else 0 end) as total_good_question_no_accepted_answer\n  ,SUM(case when score > @good_question_score and answercount = 0 then 1 else 0 end) as total_good_question_no_answer\n  \nfrom\n  posts\nwhere\n  posttypeid = 1\ngroup by\n  year(creationdate)"
    },
    {
        "QuerySetId": 295113,
        "Title": "Find Stack Overflow Users From Serbia",
        "Description": null,
        "QueryBody": "WITH  user-links)\n-- A simply query to find users in your city or country. Added user links.\n\nselect Id [User Link], Reputation, DisplayName, Location\nfrom Users\nwhere Location like '%##Location##%'\norder by Reputation desc",
        "CreationDate": "2015-03-31 19:36:59",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 295490,
        "Title": "Answers posted in the first 30 seconds, by answer score",
        "Description": null,
        "QueryBody": "WITH  Question AS (\n  SELECT\n    Question.Id,\n    Question.CreationDate,\n    MIN(Answer.CreationDate) AS FirstAnswerDate\n  FROM Posts AS Question\n  JOIN Posts AS Answer ON Answer.ParentId = Question.Id\n  WHERE Question.ClosedDate IS NULL\n  GROUP BY Question.Id, Question.CreationDate\n)\nSELECT TOP ##DefaultPostNumber?500##\n  Answer.Score,\n  DATEDIFF(ss, Question.CreationDate, Answer.CreationDate) AS DateDifference,\n  Question.Id AS [Post Link]\nFROM Posts AS Answer\nJOIN Question ON Answer.ParentId = Question.Id\nWHERE Answer.CreationDate = Question.FirstAnswerDate\n  AND DATEDIFF(ss, Question.CreationDate, Answer.CreationDate) >= 1\n  AND DATEDIFF(ss, Question.CreationDate, Answer.CreationDate) <= ##DefaultMaxDifference?30##\nORDER BY Answer.Score DESC",
        "CreationDate": "2015-04-01 23:26:34",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 295533,
        "Title": "ROOMBA > year old questions that include text like",
        "Description": "http:\/\/meta.stackexchange.com\/questions\/78048\/enable-automatic-deletion-of-old-unanswered-zero-score-questions-after-a-year\/92006#92006",
        "QueryBody": "SELECT \n  q.Id AS [Post Link],\n  q.ViewCount,\n  q.CreationDate\nFROM\n  Posts AS q\nINNER JOIN\n  Users AS u\nON\n  u.Id = q.OwnerUserId\nINNER JOIN\n  PostHistory AS ph\nON\n  ph.Id = q.Id\nWHERE\n     q.PostTypeId = 1\n and DATEDIFF(DAY, q.CreationDate, GETDATE()) > 381\n and q.Score = 0\n and q.AnswerCount = 0\n and ph.PostHistoryTypeId != 14\n and q.ViewCount < DATEDIFF(DAY, q.CreationDate, GETDATE()) * 1.4\n -- end of requirements --\n -- start of personally preferred options --\n and\n  q.CommentCount < 7\n and\n  q.ClosedDate IS NULL\n and\n  LEN(q.Body) < ##questionLength?500##\n and\n  DATEDIFF(DAY, u.LastAccessDate, GETDATE()) > 7\n and\n  u.Reputation < ##questionerRep?500##\n and\n  q.Body LIKE '%##textlike##%'\nORDER BY\n  q.CreationDate ASC",
        "CreationDate": "2015-04-15 09:40:33",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 295723,
        "Title": "Stack Overflow Tool Request Analyzer",
        "Description": "http:\/\/chat.stackoverflow.com\/transcript\/message\/22443613#22443613",
        "QueryBody": "DECLARE  @notitle nvarchar(50) = ##notitle:string?tool##\nDECLARE @body nvarchar(50) = ##body:string?suggestion##\n\n;with QuestionPool as\n(\n  select\n    q.Id [Post Link],\n    count(pf.Id) [Pending Flags]\n  from Posts q\n  left outer join PendingFlags pf on\n    pf.FlagTypeId in (13, 14) and --recommend close or vote close\n    pf.PostId = q.Id\n  where\n    \n    q.PostTypeId = 1 and --question\n    q.Score <= ##score:int?0## and\n    q.Title like '%' + @notitle + '%' and\n    q.Body like '%' + @body + '%' --and\n    --q.AcceptedAnswerId is null\n  group by q.Id\n)\nselect * from QuestionPool\norder by [Pending Flags] desc",
        "CreationDate": "2015-04-02 16:21:52",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 295991,
        "Title": "How many users have asked a question for a tag?",
        "Description": null,
        "QueryBody": "DECLARE  @TagId int;\n\nSELECT @TagId = t.Id\nFROM Tags t\nWHERE t.TagName = ##TagName:string##;  \n\nSELECT COUNT(DISTINCT p.OwnerUserId)\nFROM Posts p\nINNER JOIN PostTags pt ON\n  pt.TagId = @TagId\nWHERE\n  pt.PostId = p. Id AND\n  p.PostTypeId = 1;",
        "CreationDate": "2015-04-03 09:08:20",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 295999,
        "Title": "How many users have answered a question for a tag?",
        "Description": null,
        "QueryBody": "DECLARE  @TagId int;\n\nSELECT @TagId = t.Id\nFROM Tags t\nWHERE t.TagName = ##TagName:string##;  \n\nSELECT COUNT(DISTINCT p1.OwnerUserId)\nFROM Posts p1\nINNER JOIN PostTags pt ON\n  pt.TagId = @TagId\nINNER JOIN Posts p2 ON\n  p1.ParentId = p2.Id\nWHERE\n  p1.PostTypeId = 2 AND\n  pt.PostId = p2.Id;",
        "CreationDate": "2015-04-03 09:22:30",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 296000,
        "Title": "How many answered questions are there for a tag?",
        "Description": null,
        "QueryBody": "DECLARE  @TagId int;\n\nSELECT @TagId = t.Id\nFROM Tags t\nWHERE t.TagName = ##TagName:string##;  \n\nSELECT count(p.Id)\nFROM Posts p\nINNER JOIN PostTags pt ON\n  pt.TagId = @TagId\nWHERE\n  pt.PostId = p.Id AND\n  p.PostTypeId = 1 AND \n  p.AcceptedAnswerId is NOT NULL;",
        "CreationDate": "2015-04-05 02:43:39",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 296001,
        "Title": "How many unanswered questions are there for a tag?",
        "Description": null,
        "QueryBody": "DECLARE  @TagId int;\n\nSELECT @TagId = t.Id\nFROM Tags t\nWHERE t.TagName = ##TagName:string##;  \n\nSELECT count(p.Id)\nFROM Posts p\nINNER JOIN PostTags pt ON\n  pt.TagId = @TagId\nWHERE\n  pt.PostId = p.Id AND\n  p.PostTypeId = 1 AND \n  p.AcceptedAnswerId is not NULL;",
        "CreationDate": "2015-04-10 17:21:02",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 296002,
        "Title": "How many questions for a tag have been closed?",
        "Description": null,
        "QueryBody": "DECLARE  @TagId int;\n\nSELECT @TagId = t.Id\nFROM Tags t\nWHERE t.TagName = ##TagName:string##;  \n\nSELECT COUNT(p.Id)\nFROM Posts p\nINNER JOIN PostTags pt ON\n  pt.TagId = @TagId\nWHERE\n  pt.PostId = p.Id AND\n  p.PostTypeId = 1 AND \n  p.ClosedDate is not NULL;",
        "CreationDate": "2015-04-03 09:37:33",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 296423,
        "Title": "How many questions for a tag are scored <= 0?",
        "Description": null,
        "QueryBody": "DECLARE  @TagId int;\n\nSELECT @TagId = t.Id\nFROM Tags t\nWHERE t.TagName = ##TagName:string##;  \n\nSELECT COUNT(p.Id)\nFROM Posts p\nINNER JOIN PostTags pt ON\n  pt.TagId = @TagId\nWHERE\n  pt.PostId = p.Id AND\n  p.PostTypeId = 1 AND\n  p.Score IS NOT NULL AND\n  p.Score <= 0;",
        "CreationDate": "2015-04-05 01:38:17",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 296428,
        "Title": "Get the avg size of a question for a tag",
        "Description": null,
        "QueryBody": "DECLARE  @TagId int;\n\nSELECT @TagId = t.Id\nFROM Tags t\nWHERE t.TagName = ##TagName:string##;  \n\nSELECT AVG(LEN(p.Body))\nFROM Posts p\nINNER JOIN PostTags pt ON\n  pt.TagId = @TagId\nWHERE\n  pt.PostId = p.Id AND\n  p.PostTypeId = 1;",
        "CreationDate": "2015-04-05 02:39:07",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 296434,
        "Title": "Get quarterly breakdown of answered\/unanswered questions for a tag",
        "Description": null,
        "QueryBody": "DECLARE  @TagId int;\n\nSELECT @TagId = t.Id\nFROM Tags t\nWHERE t.TagName = ##TagName:string##;  \n\nSELECT dateadd(quarter, datediff(quarter, 0, CreationDate),0) as quart, \n       COUNT(p.Id) as total_posts,\n       SUM(CASE WHEN p.PostTypeId = 1 THEN 1 ELSE 0 END) as questions,\n       SUM(CASE WHEN p.PostTypeId = 2 THEN 1 ELSE 0 END) as answers,\n       SUM(CASE WHEN p.PostTypeId = 1 AND p.AcceptedAnswerId IS NOT NULL THEN 1 ELSE 0 END) as answered,\n       SUM(CASE WHEN p.PostTypeId = 1 AND p.AcceptedAnswerId IS NULL THEN 1 ELSE 0 END) as unanswered\nFROM Posts p\nINNER JOIN PostTags pt ON\n  pt.TagId = @TagId\nWHERE\n  pt.PostId = p.Id\nGROUP BY dateadd(quarter, datediff(quarter, 0, CreationDate),0);",
        "CreationDate": "2015-04-25 07:21:09",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 296447,
        "Title": "Quarterly number of answers for a tag",
        "Description": null,
        "QueryBody": "DECLARE  @TagId int;\n\nSELECT @TagId = t.Id\nFROM Tags t\nWHERE t.TagName = ##TagName:string##;  \n\nSELECT dateadd(quarter, datediff(quarter, 0, p1.CreationDate),0), COUNT(p1.Id)\nFROM Posts p1\nINNER JOIN PostTags pt ON\n  pt.TagId = @TagId\nINNER JOIN Posts p2 ON\n  p1.ParentId = p2.Id\nWHERE\n  p1.PostTypeId = 2 AND\n  pt.PostId = p2.Id\nGROUP BY dateadd(quarter, datediff(quarter, 0, p1.CreationDate),0)\nORDER BY dateadd(quarter, datediff(quarter, 0, p1.CreationDate),0);",
        "CreationDate": "2015-04-05 03:27:03",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 296600,
        "Title": "High Downvoters Hall of Shame (by percentage)",
        "Description": "The top 500 downvoters by percentage, only high voters considers",
        "QueryBody": "WITH  1,000 or more total votes considered\n\nSELECT TOP 500\n    Id as [User Link],\n    CreationDate,\n    Reputation,\n    UpVotes,\n    DownVotes,\n    FORMAT(1.0*(DownVotes)\/(DownVotes+UpVotes), 'p') as DownVotesPCT\nFROM Users\nWHERE  (UpVotes + DownVotes) > 1000     -- Suppress lower vote counts; \n AND Id <> -1 -- these are habitual downvoters.\nORDER BY DownVotesPCT DESC, DownVotes DESC, Upvotes DESC",
        "CreationDate": "2015-04-05 20:52:02",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 297102,
        "Title": "User-level reputation, with details from posts",
        "Description": "* For top reputation holders, where are they, and what are components of reputation (answers, upvotes, downvotes, comments)?",
        "QueryBody": "SELECT  u.*,users.* \nFROM  (\n  SELECT --TOP 100\n    sum(Score) score_sum,stdev(Score) score_std,OwnerUserId,sum(AnswerCount) answers,sum(CommentCount) comments,sum(FavoriteCount) faves\n  FROM \n    Posts p\n  WHERE \n    Score>##MinimumScoreThreshold##\n  GROUP BY OwnerUserId\n  --ORDER BY score_sum DESC\n  ) u\n  INNER JOIN  (SELECT\n              Id,DisplayName,Reputation, Location,Views,UpVotes,DownVotes,Age\n              FROM Users u\n              WHERE Reputation>##MinimumReputationThreshold##) users\n  ON u.OwnerUserId=users.Id",
        "CreationDate": "2015-04-14 16:00:14",
        "validated": false,
        "QueryBody_Original": "SELECT  u.*,users.* \nFROM  (\n  SELECT --TOP 100\n    sum(Score) score_sum,stdev(Score) score_std,OwnerUserId,sum(AnswerCount) answers,sum(CommentCount) comments,sum(FavoriteCount) faves\n  FROM \n    Posts p\n  WHERE \n    Score>##MinimumScoreThreshold##\n  GROUP BY OwnerUserId\n  --ORDER BY score_sum DESC\n  ) u\n  INNER JOIN  (SELECT\n              Id,DisplayName,Reputation, Location,Views,UpVotes,DownVotes,Age\n              FROM Users u\n              WHERE Reputation>##MinimumReputationThreshold##) users\n  ON u.OwnerUserId=users.Id"
    },
    {
        "QuerySetId": 297720,
        "Title": "Low-score answers beginning with a keyword",
        "Description": null,
        "QueryBody": "SELECT  Id as [Post Link], Body from Posts\nwhere PostTypeId=2 and Score<=##maxScore## and Body like '<p>##keyword##%'",
        "CreationDate": "2015-04-08 00:18:40",
        "validated": false,
        "QueryBody_Original": "SELECT  Id as [Post Link], Body from Posts\nwhere PostTypeId=2 and Score<=##maxScore## and Body like '<p>##keyword##%'"
    },
    {
        "QuerySetId": 298628,
        "Title": "Most voted (not closed and not answered) questions",
        "Description": null,
        "QueryBody": "SELECT  TOP 100 Id AS [Post Link], Score\nFROM Posts\nWHERE PostTypeId = 1 AND ClosedDate IS NULL AND AnswerCount = 0 \nAND CreationDate > DATEADD(DAY, -90, GETDATE()) \nAND  Len(Body) < 150\nORDER BY CreationDate ASC;\n    \n-- Number: Number of posts to show:",
        "CreationDate": "2020-02-04 00:05:51",
        "validated": false,
        "QueryBody_Original": "SELECT  TOP 100 Id AS [Post Link], Score\nFROM Posts\nWHERE PostTypeId = 1 AND ClosedDate IS NULL AND AnswerCount = 0 \nAND CreationDate > DATEADD(DAY, -90, GETDATE()) \nAND  Len(Body) < 150\nORDER BY CreationDate ASC;\n    \n-- Number: Number of posts to show:"
    },
    {
        "QuerySetId": 298722,
        "Title": "Latest (not closed) questions from users with reputation <= N",
        "Description": null,
        "QueryBody": "SELECT  TOP ##Number## Posts.Id AS [Post Link], Users.Reputation\nFROM Posts, Users\nWHERE Posts.OwnerUserId = Users.Id AND Posts.PostTypeId = 1 AND Posts.ClosedDate IS NULL AND Users.Reputation < ##UserReputationThreshold##\nORDER BY Posts.CreationDate DESC;\n\n-- Number: Number of posts to show:\n-- UserReputationThreshold: User's reputation threshold:",
        "CreationDate": "2015-04-09 18:54:24",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 300129,
        "Title": "Top New York Scala answerers",
        "Description": null,
        "QueryBody": "SELECT  u.DisplayName, u.Reputation, u.websiteurl, count(*) as F#Answers from Users u, Posts p, Posts pp where u.Id in (\n    SELECT Id\n    from Users \n    where Location like ('%NY')\n  )\n  and p.OwnerUserId = u.Id\n  and pp.Id = p.ParentId\n  and pp.Tags like ('%<F#>%')\n  group by u.DisplayName, u.Reputation, u.websiteurl\n  order by F#Answers desc",
        "CreationDate": "2015-04-13 21:11:30",
        "validated": false,
        "QueryBody_Original": "SELECT  u.DisplayName, u.Reputation, u.websiteurl, count(*) as F#Answers from Users u, Posts p, Posts pp where u.Id in (\n    SELECT Id\n    from Users \n    where Location like ('%NY')\n  )\n  and p.OwnerUserId = u.Id\n  and pp.Id = p.ParentId\n  and pp.Tags like ('%<F#>%')\n  group by u.DisplayName, u.Reputation, u.websiteurl\n  order by F#Answers desc"
    },
    {
        "QuerySetId": 300253,
        "Title": "Top New York F# answerers",
        "Description": null,
        "QueryBody": "SELECT  u.DisplayName, u.Reputation, u.websiteurl, count(*) as F#Answers from Users u, Posts p, Posts pp where u.Id in (\n    SELECT Id\n    from Users \n    where Location like ('%San Fran')\n  )\n  and p.OwnerUserId = u.Id\n  and pp.Id = p.ParentId\n  and pp.Tags like ('%<F#>%')\n  group by u.DisplayName, u.Reputation, u.websiteurl\n  order by F#Answers desc",
        "CreationDate": "2015-12-17 21:22:02",
        "validated": false,
        "QueryBody_Original": "SELECT  u.DisplayName, u.Reputation, u.websiteurl, count(*) as F#Answers from Users u, Posts p, Posts pp where u.Id in (\n    SELECT Id\n    from Users \n    where Location like ('%San Fran')\n  )\n  and p.OwnerUserId = u.Id\n  and pp.Id = p.ParentId\n  and pp.Tags like ('%<F#>%')\n  group by u.DisplayName, u.Reputation, u.websiteurl\n  order by F#Answers desc"
    },
    {
        "QuerySetId": 300842,
        "Title": "Questions with answers, but no accepted answer",
        "Description": null,
        "QueryBody": "SELECT \n  Id AS [Post Link],\n  AnswerCount\nFROM\n  Posts\nWHERE\n  PostTypeId = 1 -- post is a question\n  AND AcceptedAnswerId IS NULL -- no accepted answer\n  AND OwnerUserId = ##UserId:int##",
        "CreationDate": "2015-04-14 19:41:58",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 301009,
        "Title": "Top Users by Post Efficiency",
        "Description": null,
        "QueryBody": "DECLARE  @MinAnswers int = ##MinAnswers##\n\n;WITH PostsPerUser AS\n(\n  SELECT\n    u.Id,\n    count(*) AS NumPosts\n  FROM Posts a\n  INNER JOIN Users u ON u.Id = a.OwnerUserId\n  WHERE a.PostTypeId IN (1, 2)\n  GROUP BY u.Id\n  HAVING count(*) >= @MinAnswers\n),\nTopUsers AS\n(\n  SELECT TOP 100\n    u.Id AS [User Link],\n    u.Reputation,\n    ppu.NumPosts,\n    (CAST(u.Reputation AS decimal)\/NumPosts) AS RepPerPost\n  FROM Users u\n  JOIN PostsPerUser ppu ON u.Id = ppu.Id\n)\n\nSELECT\n  row_number() OVER (ORDER BY RepPerPost DESC, Reputation DESC) AS Rank,\n  *\nFROM TopUsers\nORDER BY Rank;",
        "CreationDate": "2015-04-15 01:38:18",
        "validated": false,
        "QueryBody_Original": "DECLARE  @MinAnswers int = ##MinAnswers##\n\n;WITH PostsPerUser AS\n(\n  SELECT\n    u.Id,\n    count(*) AS NumPosts\n  FROM Posts a\n  INNER JOIN Users u ON u.Id = a.OwnerUserId\n  WHERE a.PostTypeId IN (1, 2)\n  GROUP BY u.Id\n  HAVING count(*) >= @MinAnswers\n),\nTopUsers AS\n(\n  SELECT TOP 100\n    u.Id AS [User Link],\n    u.Reputation,\n    ppu.NumPosts,\n    (CAST(u.Reputation AS decimal)\/NumPosts) AS RepPerPost\n  FROM Users u\n  JOIN PostsPerUser ppu ON u.Id = ppu.Id\n)\n\nSELECT\n  row_number() OVER (ORDER BY RepPerPost DESC, Reputation DESC) AS Rank,\n  *\nFROM TopUsers\nORDER BY Rank;"
    },
    {
        "QuerySetId": 303986,
        "Title": "Find time difference between 1st and second post on the site",
        "Description": null,
        "QueryBody": "DECLARE  @UserId int = ##UserId##\n\nSELECT Top 100 ph.UserId, ph.PostId, pht.Id, pht.name, ph.CreationDate, ph.text\nFROM   \n  PostHistory ph \nINNER JOIN PostHistoryTypes pht\nON pht.Id = ph.PostHistoryTypeId\nWHERE ph.UserId > 0 AND ph.UserId IS NOT NULL \nORDER BY ph.UserId\n;",
        "CreationDate": "2015-04-20 22:57:53",
        "validated": false,
        "QueryBody_Original": "DECLARE  @UserId int = ##UserId##\n\nSELECT Top 100 ph.UserId, ph.PostId, pht.Id, pht.name, ph.CreationDate, ph.text\nFROM   \n  PostHistory ph \nINNER JOIN PostHistoryTypes pht\nON pht.Id = ph.PostHistoryTypeId\nWHERE ph.UserId > 0 AND ph.UserId IS NOT NULL \nORDER BY ph.UserId\n;"
    },
    {
        "QuerySetId": 304043,
        "Title": "Questions closed by user, sorted by reason",
        "Description": null,
        "QueryBody": "DECLARE  @userId int = ##UserId##\nDECLARE @searchUserId1 nvarchar(25) = '%\"Id\":' + CAST(@userId AS nvarchar(MAX)) + '}'\nDECLARE @searchUserId2 nvarchar(25) = '%\"Id\":' + CAST(@userId AS nvarchar(MAX)) + ',%'\n\n\nselect \n  (case when grouping(t.Id) = 1 then '(Total)' else t.Name end) as 'Close Reason',\n  count (t.Id) as 'Count'\nfrom PostHistory as h \nleft outer join CloseReasonTypes as t on cast(h.Comment as int) = t.Id\nwhere h.PostHistoryTypeId = 10\n  and ((h.Text LIKE @searchUserId2))\ngroup by rollup(t.Id, t.Name)\norder by t.Id",
        "CreationDate": "2015-11-23 08:07:36",
        "validated": false,
        "QueryBody_Original": "DECLARE  @userId int = ##UserId##\nDECLARE @searchUserId1 nvarchar(25) = '%\"Id\":' + CAST(@userId AS nvarchar(MAX)) + '}'\nDECLARE @searchUserId2 nvarchar(25) = '%\"Id\":' + CAST(@userId AS nvarchar(MAX)) + ',%'\n\n\nselect \n  (case when grouping(t.Id) = 1 then '(Total)' else t.Name end) as 'Close Reason',\n  count (t.Id) as 'Count'\nfrom PostHistory as h \nleft outer join CloseReasonTypes as t on cast(h.Comment as int) = t.Id\nwhere h.PostHistoryTypeId = 10\n  and ((h.Text LIKE @searchUserId2))\ngroup by rollup(t.Id, t.Name)\norder by t.Id"
    },
    {
        "QuerySetId": 304332,
        "Title": "What are all the post types?",
        "Description": null,
        "QueryBody": "SELECT  MIN(OwnerUserId), MIN(Id) as QuestionId\n--FROM POSTS\n--WHERE PostTypeId = 1\n--GROUP BY OwnerUserId\n--;\n\n--What are all the post types?\n\nSELECT Distinct p.PostTypeId, pt.Name\nFROM Posts p, PostTypes pt\nWHERE p.PostTypeId = pt.Id\n;",
        "CreationDate": "2015-04-24 02:02:46",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 305611,
        "Title": "Old highly-voted questions with no accepted answer",
        "Description": null,
        "QueryBody": "SELECT  TOP 20\n  CONVERT(VARCHAR(10),Q.CreationDate,102) as date_asked,\n  Q.Score as question_score,\n  Q.Id as [Post Link],\n  CONVERT(VARCHAR(10),U.LastAccessDate,102) as asker_last_seen,\n  U.Reputation as asker_rep\nFROM Posts Q\nINNER JOIN Users U\n  ON Q.OwnerUserId = U.Id\nWHERE\n  Q.PostTypeId = 1\n  AND Q.ClosedDate is null\n  AND Q.AcceptedAnswerId is null\n  AND Q.Score > 10\n  AND (DateAdd(MM, 1, Q.CreationDate) < GETDATE())\nORDER BY question_score DESC",
        "CreationDate": "2015-04-27 20:17:01",
        "validated": false,
        "QueryBody_Original": "SELECT  TOP 20\n  CONVERT(VARCHAR(10),Q.CreationDate,102) as date_asked,\n  Q.Score as question_score,\n  Q.Id as [Post Link],\n  CONVERT(VARCHAR(10),U.LastAccessDate,102) as asker_last_seen,\n  U.Reputation as asker_rep\nFROM Posts Q\nINNER JOIN Users U\n  ON Q.OwnerUserId = U.Id\nWHERE\n  Q.PostTypeId = 1\n  AND Q.ClosedDate is null\n  AND Q.AcceptedAnswerId is null\n  AND Q.Score > 10\n  AND (DateAdd(MM, 1, Q.CreationDate) < GETDATE())\nORDER BY question_score DESC"
    },
    {
        "QuerySetId": 305790,
        "Title": "Where do users dominate comments?",
        "Description": null,
        "QueryBody": "DECLARE  @commentcount real = 6;\nDECLARE @percentage real = cast(1 as real)\/cast(3 as real);\nselect c.userid as [User Link], count(distinct p.id) as postsCount\nfrom posts as p inner join comments as c on p.id=c.postid\nwhere p.CommentCount >= @commentcount\nand cast(\n         (select count(id) from comments\n          where postid=p.id and userid=c.userid\n         ) as real) >= @percentage * cast(p.CommentCount as real)\ngroup by c.userid order by postsCount desc",
        "CreationDate": "2015-04-24 10:24:55",
        "validated": false,
        "QueryBody_Original": "DECLARE  @commentcount real = 6;\nDECLARE @percentage real = cast(1 as real)\/cast(3 as real);\nselect c.userid as [User Link], count(distinct p.id) as postsCount\nfrom posts as p inner join comments as c on p.id=c.postid\nwhere p.CommentCount >= @commentcount\nand cast(\n         (select count(id) from comments\n          where postid=p.id and userid=c.userid\n         ) as real) >= @percentage * cast(p.CommentCount as real)\ngroup by c.userid order by postsCount desc"
    },
    {
        "QuerySetId": 306334,
        "Title": "Percentage of high-rep users by join date",
        "Description": "For a given month, what percentage of users are \"High Reputation\" users?",
        "QueryBody": "DECLARE  @highRep INT = ##HighScore:int?1000##;\n\nSELECT      DATEADD( MONTH, DATEDIFF( MONTH, 0, u.CreationDate ), 0 ) AS Date\n            , SUM( CASE WHEN u.Reputation > @highRep THEN 1 ELSE 0 END )\n            AS [High Rep %]\nFROM        Users u\nGROUP BY    DATEADD( MONTH, DATEDIFF( MONTH, 0, u.CreationDate ), 0 )\nORDER BY    DATEADD( MONTH, DATEDIFF( MONTH, 0, u.CreationDate ), 0 )",
        "CreationDate": "2015-04-26 15:57:25",
        "validated": false,
        "QueryBody_Original": "DECLARE  @highRep INT = ##HighScore:int?1000##;\n\nSELECT      DATEADD( MONTH, DATEDIFF( MONTH, 0, u.CreationDate ), 0 ) AS Date\n            , SUM( CASE WHEN u.Reputation > @highRep THEN 1 ELSE 0 END )\n            AS [High Rep %]\nFROM        Users u\nGROUP BY    DATEADD( MONTH, DATEDIFF( MONTH, 0, u.CreationDate ), 0 )\nORDER BY    DATEADD( MONTH, DATEDIFF( MONTH, 0, u.CreationDate ), 0 )"
    },
    {
        "QuerySetId": 307125,
        "Title": "Get questions with long titles",
        "Description": null,
        "QueryBody": "DECLARE  @Tag nvarchar = ##Tag:string?null##\n\nSELECT TOP 25 Score, Id AS [Post Link] FROM Posts\n  WHERE (LEN(Title) >= 100) AND\n    (@Tag IS null OR CHARINDEX(@Tag, Tags) > 0)\n  ORDER BY Score DESC;",
        "CreationDate": "2019-05-30 15:39:59",
        "validated": false,
        "QueryBody_Original": "DECLARE  @Tag nvarchar = ##Tag:string?null##\n\nSELECT TOP 25 Score, Id AS [Post Link] FROM Posts\n  WHERE (LEN(Title) >= 100) AND\n    (@Tag IS null OR CHARINDEX(@Tag, Tags) > 0)\n  ORDER BY Score DESC;"
    },
    {
        "QuerySetId": 311674,
        "Title": "Appreciated answers of a user",
        "Description": "This query returns the number of appreciated answers a user gave. An answer is seen as appreciated, if it has been accepted by the OP or if it has a positive score.",
        "QueryBody": "SELECT  COUNT(*) AS [Answers],\n       SUM(CASE WHEN answers.Id = questions.AcceptedAnswerId \n                THEN 1 \n                ELSE 0 END) AS [Accepted Answers],\n       SUM(CASE WHEN answers.Score = 0 THEN 0 ELSE 1 END) [Scored Answers],\n       SUM(CASE WHEN answers.Id = questions.AcceptedAnswerId \n                  OR answers.Score > 0\n                THEN 1 \n                ELSE 0 END) AS [Appreciated Answers]\n  FROM Posts questions \n  LEFT JOIN Posts answers\n    ON answers.ParentId = questions.Id\n WHERE answers.OwnerUserId = ##UserID##\n   AND questions.OwnerUserId != ##UserID##\n   AND answers.PostTypeID = 2\n   AND answers.CommunityOwnedDate is null;",
        "CreationDate": "2015-05-09 00:12:05",
        "validated": false,
        "QueryBody_Original": "SELECT  COUNT(*) AS [Answers],\n       SUM(CASE WHEN answers.Id = questions.AcceptedAnswerId \n                THEN 1 \n                ELSE 0 END) AS [Accepted Answers],\n       SUM(CASE WHEN answers.Score = 0 THEN 0 ELSE 1 END) [Scored Answers],\n       SUM(CASE WHEN answers.Id = questions.AcceptedAnswerId \n                  OR answers.Score > 0\n                THEN 1 \n                ELSE 0 END) AS [Appreciated Answers]\n  FROM Posts questions \n  LEFT JOIN Posts answers\n    ON answers.ParentId = questions.Id\n WHERE answers.OwnerUserId = ##UserID##\n   AND questions.OwnerUserId != ##UserID##\n   AND answers.PostTypeID = 2\n   AND answers.CommunityOwnedDate is null;"
    },
    {
        "QuerySetId": 312171,
        "Title": "Short low-scoring answers by low-rep users",
        "Description": null,
        "QueryBody": "SELECT  p.Id as [Post Link], p.body from Posts p\ninner join Users u on u.Id = p.OwnerUserId\nwhere p.score<=##maxscore## and p.PostTypeId=2 and u.Reputation<=##maxrep##\norder by len(body) asc",
        "CreationDate": "2015-05-09 08:23:37",
        "validated": false,
        "QueryBody_Original": "SELECT  p.Id as [Post Link], p.body from Posts p\ninner join Users u on u.Id = p.OwnerUserId\nwhere p.score<=##maxscore## and p.PostTypeId=2 and u.Reputation<=##maxrep##\norder by len(body) asc"
    },
    {
        "QuerySetId": 312306,
        "Title": "Answers to old unanswered questions",
        "Description": null,
        "QueryBody": "DECLARE  @AskTime DATETIME = convert(DATETIME, '##AskTime?2020\/01\/01 00:00:00##')\nDECLARE @StartTime DATETIME = convert(DATETIME, '##StartTime?2020\/04\/01 00:00:00##')\nDECLARE @EndTime DATETIME = convert(DATETIME, '##EndTime?2020\/05\/01 00:00:00##')\n\nSELECT A.Id AS [Post Link], A.Score, \n  (CASE WHEN Q.AcceptedAnswerId = A.Id THEN 1 ELSE 0 END) AS Accepted, \n  A.OwnerUserId AS [User Link]\nFROM\n  Posts A INNER JOIN Posts Q ON A.ParentId = Q.Id\nWHERE\n  A.CreationDate BETWEEN @StartTime AND @EndTime AND\n  Q.PostTypeId = 1 AND\n  Q.ClosedDate IS NULL AND\n  Q.CreationDate < @AskTime AND\n  NOT EXISTS (SELECT * FROM Posts B WHERE\n    B.ParentId = Q.Id AND B.CreationDate < @StartTime)\nORDER BY A.Score DESC, Accepted DESC",
        "CreationDate": "2020-04-19 19:07:53",
        "validated": false,
        "QueryBody_Original": "DECLARE  @AskTime DATETIME = convert(DATETIME, '##AskTime?2020\/01\/01 00:00:00##')\nDECLARE @StartTime DATETIME = convert(DATETIME, '##StartTime?2020\/04\/01 00:00:00##')\nDECLARE @EndTime DATETIME = convert(DATETIME, '##EndTime?2020\/05\/01 00:00:00##')\n\nSELECT A.Id AS [Post Link], A.Score, \n  (CASE WHEN Q.AcceptedAnswerId = A.Id THEN 1 ELSE 0 END) AS Accepted, \n  A.OwnerUserId AS [User Link]\nFROM\n  Posts A INNER JOIN Posts Q ON A.ParentId = Q.Id\nWHERE\n  A.CreationDate BETWEEN @StartTime AND @EndTime AND\n  Q.PostTypeId = 1 AND\n  Q.ClosedDate IS NULL AND\n  Q.CreationDate < @AskTime AND\n  NOT EXISTS (SELECT * FROM Posts B WHERE\n    B.ParentId = Q.Id AND B.CreationDate < @StartTime)\nORDER BY A.Score DESC, Accepted DESC"
    },
    {
        "QuerySetId": 313152,
        "Title": "Questions closed for a particular reason",
        "Description": null,
        "QueryBody": "SELECT  p.ClosedDate, p.Id AS [Post Link] \nFROM Posts p \nINNER JOIN PostHistory h ON p.Id = h.PostId\nWHERE h.PostHistoryTypeId = 10\n  AND h.Comment=##reason##\n  AND p.ClosedDate IS NOT NULL \nORDER BY p.ClosedDate DESC",
        "CreationDate": "2015-05-11 20:56:44",
        "validated": false,
        "QueryBody_Original": "SELECT  p.ClosedDate, p.Id AS [Post Link] \nFROM Posts p \nINNER JOIN PostHistory h ON p.Id = h.PostId\nWHERE h.PostHistoryTypeId = 10\n  AND h.Comment=##reason##\n  AND p.ClosedDate IS NOT NULL \nORDER BY p.ClosedDate DESC"
    },
    {
        "QuerySetId": 313457,
        "Title": "StackOverflow Rank and Percentile With Minimum Rep",
        "Description": null,
        "QueryBody": "WITH  Rankings AS (\nSELECT Id, Reputation, Ranking = ROW_NUMBER() OVER(ORDER BY Reputation DESC)\nFROM Users\n)\n,Counts AS (\nSELECT Count = COUNT(*)\nFROM Users\nWHERE Reputation > ##minRep:int?200##\n)\nSELECT Id,Reputation, Ranking, CAST(Ranking AS decimal(20, 5)) \/ (SELECT Count FROM Counts) AS Percentile\nFROM Rankings\nWHERE Id = ##userid:int##",
        "CreationDate": "2015-05-12 19:55:12",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 313470,
        "Title": "X reoccurs with Tag, post count",
        "Description": null,
        "QueryBody": "WITH ...\n-- X reoccurs WITH Y N times\nselect reoccurs.tagname reoccurs, 'WITH' presence, ##occurs:string## occurs, \ncount(distinct posts.id) nposts\nfrom tags reoccurs,\nposts, posttags ptri\nwhere \nposts.id = ptri.postid\nand ptri.tagid=reoccurs.id\nand ##occurs:string##  in (select tagname from tags occurs, posttags pti\nwhere occurs.id=pti.tagid and pti.postid=posts.id)\ngroup by reoccurs.tagname\norder by count(distinct posts.id) desc",
        "CreationDate": "2015-05-12 22:48:07",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 313477,
        "Title": "All posts --answers tagged with X -- and Y",
        "Description": null,
        "QueryBody": "WITH  X and Y\nselect posts.id, ##invented:string##  invented\nfrom posts, tags invented, posttags pti, tags reinvented, posttags ptri\nwhere \n posts.id=pti.postid and posts.id=ptri.postid\nand pti.tagid=invented.id\nand ptri.tagid=reinvented.id\nand invented.tagname = ##invented:string## \nand reinvented.tagname = ##reinvented:string##\n--'delphi'  in (select tagname from tags invented, posttags pti where invented.id=pti.tagid)",
        "CreationDate": "2015-05-12 22:38:26",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 315533,
        "Title": "Top 25 related tags of combination of two tags",
        "Description": null,
        "QueryBody": "WITH  those tags.\n\nselect TOP(25) t1.TagName as Tag1, t2.TagName as Tag2, t3.TagName as \"Related Tag\", count(t3.TagName) as \"Count\"\n\nfrom PostTags as pt1\n  INNER JOIN Tags as t1 ON pt1.TagId = t1.Id\n  INNER JOIN PostTags as pt2 ON pt1.PostId = pt2.PostId AND pt1.TagId <> pt2.TagId\n  INNER JOIN Tags as t2 ON pt2.TagId = t2.Id\n  INNER JOIN PostTags as pt3 ON pt1.PostId = pt3.PostId AND pt1.TagId <> pt3.TagId AND pt2.TagId <> pt3.TagId\n  INNER JOIN Tags as t3 ON pt3.TagId = t3.Id\n\nwhere t1.TagName = ##MyTag1:string##  -- MyTag1: First Tag\n  and t2.TagName = ##MyTag2:string##  -- MyTag2: Second Tag\ngroup by t1.TagName, t2.TagName, t3.TagName\norder by count(t3.TagName) desc",
        "CreationDate": "2015-05-19 00:40:41",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 316480,
        "Title": "How many of my questions have the words \"basic\", or \"simple\" in them?",
        "Description": null,
        "QueryBody": "DECLARE  @UserID int = ##UserID##;\n\nSELECT COUNT(*) FROM Posts WHERE\n  PostTypeId  =  1       AND\n  OwnerUserId =  @UserID AND\n  Title       IN ('%basic%', '%Basic%', '%simple%', '%Simple%');",
        "CreationDate": "2015-05-20 17:44:39",
        "validated": false,
        "QueryBody_Original": "DECLARE  @UserID int = ##UserID##;\n\nSELECT COUNT(*) FROM Posts WHERE\n  PostTypeId  =  1       AND\n  OwnerUserId =  @UserID AND\n  Title       IN ('%basic%', '%Basic%', '%simple%', '%Simple%');"
    },
    {
        "QuerySetId": 317906,
        "Title": "Top Users from Algeria \/ \u0623\u0639\u0644\u0649 \u0627\u0644\u0645\u0633\u062a\u062e\u062f\u0645\u064a\u0646  \u0645\u0646 \u0627\u0644\u062c\u0632\u0627\u0626\u0631",
        "Description": null,
        "QueryBody": "SELECT  TOP ##Count:int?100##\n        ROW_NUMBER() OVER(ORDER BY Reputation DESC) AS [#],\n        Id AS [User Link],\n        Reputation,\n        -- Id AS ID,\n        Location,\n        WebsiteUrl as Wesbite,\n        LastAccessDate AS Seen,\n        -- Views,\n        -- UpVotes,\n        -- DownVotes,\n        CreationDate   \n        \nFROM Users \nWHERE \n        Reputation >= ##MinimalReputation:int?1## \n\n        AND (\n               UPPER(Location) LIKE UPPER('%Algeria%')\n               OR UPPER(Location) LIKE UPPER('%Algerie%')\n               OR UPPER(Location) LIKE UPPER('%\u062c\u0632\u0627\u0626\u0631%')\n               )\n       AND Id like '%isi%'\n             \nORDER BY Reputation DESC",
        "CreationDate": "2020-10-28 12:32:02",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 319161,
        "Title": "Number of users with reputation at least N",
        "Description": null,
        "QueryBody": "DECLARE  @months_ago DATETIME = DateAdd(month, -##months:int##, GETUTCDATE())\n\nselect count(Id) as [Number of Users]\nfrom Users\nwhere Reputation >=##minrep## and CreationDate > @months_ago",
        "CreationDate": "2015-07-21 21:16:22",
        "validated": false,
        "QueryBody_Original": "DECLARE  @months_ago DATETIME = DateAdd(month, -##months:int##, GETUTCDATE())\n\nselect count(Id) as [Number of Users]\nfrom Users\nwhere Reputation >=##minrep## and CreationDate > @months_ago"
    },
    {
        "QuerySetId": 319953,
        "Title": "questions without code examples; parameters: tags\/keywords\/minimum score",
        "Description": null,
        "QueryBody": "DECLARE  @MinScore int     = ##MinimumScore##\n-- min Score\n\n SELECT    Id AS [Post Link], Title, Score, Tags, ViewCount, AnswerCount, CommentCount, FavoriteCount, OwnerUserId \nFROM       Posts q \nWHERE      PostTypeId = 1\nAND        ((q.Tags LIKE '%<sap>%') \nOR         (q.Title LIKE '% sap%' or q.Title LIKE '%SAP%' \n            or q.Title LIKE '%Sap%')\n            OR         (q.Body LIKE '% sap%' or q.Body LIKE '%SAP%' \n            or q.Body LIKE '%Sap%') \n            )\n\n--Other Options \n AND        (q.Body LIKE '%<pre><code>%')\n-- AND        (q.Body NOT LIKE '%<pre><code>%<\/code><\/pre>%')\nAND         q.Score >= @MinScore\n\nORDER BY   Score DESC",
        "CreationDate": "2015-06-09 16:54:44",
        "validated": false,
        "QueryBody_Original": "DECLARE  @MinScore int     = ##MinimumScore##\n-- min Score\n\n SELECT    Id AS [Post Link], Title, Score, Tags, ViewCount, AnswerCount, CommentCount, FavoriteCount, OwnerUserId \nFROM       Posts q \nWHERE      PostTypeId = 1\nAND        ((q.Tags LIKE '%<sap>%') \nOR         (q.Title LIKE '% sap%' or q.Title LIKE '%SAP%' \n            or q.Title LIKE '%Sap%')\n            OR         (q.Body LIKE '% sap%' or q.Body LIKE '%SAP%' \n            or q.Body LIKE '%Sap%') \n            )\n\n--Other Options \n AND        (q.Body LIKE '%<pre><code>%')\n-- AND        (q.Body NOT LIKE '%<pre><code>%<\/code><\/pre>%')\nAND         q.Score >= @MinScore\n\nORDER BY   Score DESC"
    },
    {
        "QuerySetId": 320082,
        "Title": "View counts on my answers",
        "Description": null,
        "QueryBody": "SELECT  Questions.ViewCount, Questions.Id AS [Post Link]\nFROM Posts AS Answers\nJOIN Posts AS Questions\n  ON Answers.ParentId = Questions.Id\nWHERE Answers.PostTypeId = 2\nAND Answers.OwnerUserId = ##UserID##\nAND Questions.ViewCount IS NOT NULL\nORDER BY Questions.ViewCount DESC",
        "CreationDate": "2015-05-28 18:37:22",
        "validated": false,
        "QueryBody_Original": "SELECT  Questions.ViewCount, Questions.Id AS [Post Link]\nFROM Posts AS Answers\nJOIN Posts AS Questions\n  ON Answers.ParentId = Questions.Id\nWHERE Answers.PostTypeId = 2\nAND Answers.OwnerUserId = ##UserID##\nAND Questions.ViewCount IS NOT NULL\nORDER BY Questions.ViewCount DESC"
    },
    {
        "QuerySetId": 320595,
        "Title": "Find Users In Your City",
        "Description": null,
        "QueryBody": "WITH  user-links)\n-- A simply query to find users in your city or country. Added user links.\n\nselect Id [User Link], Reputation, DisplayName, Location\nfrom Users\nwhere (Location Like '%Ottawa%')\norder by Reputation desc",
        "CreationDate": "2015-05-29 19:05:54",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 321548,
        "Title": "Java Questions with Answers containing code examples",
        "Description": null,
        "QueryBody": "SELECT  Id from Posts where Tags like '%<java>%' and Score>0 and AcceptedAnswerId in\n--(SELECT Id from Posts where Body like '%<code>%' and PostTypeId=2 and Score>0)\n\n--p1.Id, p1.Title, p2.Body\nSELECT  p1.Id, p1.Title, p2.Body from Posts as p1, Posts as p2 \nwhere p1.AcceptedAnswerId=p2.Id and\np1.Tags like 'architecuture' and p1.Score>0\n\n and p2.PostTypeId=2 \n and p2.Body like '%useful%'\n--order by p1.Id asc",
        "CreationDate": "2020-02-01 14:51:53",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 321562,
        "Title": "Voting before and after the new profile was changed",
        "Description": null,
        "QueryBody": "DECLARE  @epoch datetime = '2015-04-15';\n\n\nselect CAST(DATEADD(week, DATEDIFF(week, @epoch, v.CreationDate), @epoch) AS Date) week,\n       count(v.Id) Votes\nfrom Votes v\nwhere CreationDate > CAST(DATEADD(day, DATEDIFF(day, getdate(), @epoch), @epoch) AS Date)\ngroup by DATEDIFF(week, @epoch, v.CreationDate)\norder by DATEDIFF(week, @epoch, v.CreationDate)",
        "CreationDate": "2015-06-02 02:16:26",
        "validated": false,
        "QueryBody_Original": "DECLARE  @epoch datetime = '2015-04-15';\n\n\nselect CAST(DATEADD(week, DATEDIFF(week, @epoch, v.CreationDate), @epoch) AS Date) week,\n       count(v.Id) Votes\nfrom Votes v\nwhere CreationDate > CAST(DATEADD(day, DATEDIFF(day, getdate(), @epoch), @epoch) AS Date)\ngroup by DATEDIFF(week, @epoch, v.CreationDate)\norder by DATEDIFF(week, @epoch, v.CreationDate)"
    },
    {
        "QuerySetId": 321612,
        "Title": "Questions Per Day Over Specific Time Period",
        "Description": null,
        "QueryBody": "SELECT  \n  COUNT(Id) as NumPosts,\n  DATEDIFF(dd,MIN(CreationDate),MAX(CreationDate)) as NumDays,\n  ROUND(CAST(COUNT(Id) AS FLOAT) \/ CAST(DATEDIFF(dd,(GETDATE() - ##DaysAgo:int?365##),GETDATE()) as FLOAT),2) as QPD\nFROM Posts\n\nWHERE\n  PostTypeId = 1 AND\n  CreationDate >= GETDATE() - ##DaysAgo##",
        "CreationDate": "2015-06-02 07:08:55",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 321944,
        "Title": "My position from Myanmar users",
        "Description": null,
        "QueryBody": "SELECT  seqnum as 'Position'\nFROM (SELECT ROW_NUMBER() OVER (ORDER BY Reputation DESC) AS seqnum, \n             Id AS [UserId], \n             Reputation\n      FROM Users\n      WHERE LOWER(Location) LIKE '%myanmar%'\n     ) u\nWHERE UserId = 3736230\n\n\nSELECT COUNT(*) as 'Users from Myanmar:'\nFROM\n    Users\nWHERE\n    LOWER(Location) LIKE '%myanmar%'",
        "CreationDate": "2015-06-03 14:43:26",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 322140,
        "Title": "questions with tag in year and month",
        "Description": null,
        "QueryBody": "SELECT  Posts.Id, Title, Tags, Posts.CreationDate\n, PostLinks.RelatedPostId as ClosedAsDuplicateOf\n, [Originals(s)] = substring(PostHistory.Text,charindex('[',PostHistory.Text)+1,charindex(']',PostHistory.Text)-(charindex('[',PostHistory.Text)+1)) \nfrom Posts \ninner join PostTags on Posts.Id = PostTags.PostId\ninner join Tags on PostTags.TagId = Tags.Id\nleft join PostLinks on PostLinks.PostId = Posts.Id and LinkTypeId = 3 -- duplicate\nleft join PostHistory on PostHistory.PostId = Posts.Id and PostHistoryTypeId = 10 -- closed\n     and PostHistory.Text like '%OriginalQuestionIds%'\nwhere Year(Posts.CreationDate) = ##MyYear:int##\n  and Month(Posts.CreationDate) = ##MyMonth:int##\n  and TagName = ##MyTag:string##\norder by Posts.CreationDate desc",
        "CreationDate": "2015-06-03 23:56:00",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 322155,
        "Title": "All tags of questions with tag in year and month",
        "Description": null,
        "QueryBody": "SELECT  PostTags.PostId, Tags.TagName, PostTags.TagId\nfrom PostTags\ninner join Posts on PostTags.PostId = Posts.Id\ninner join Tags on PostTags.TagId = Tags.Id\nwhere PostTags.PostId in  \n(\nSELECT Posts.Id\nfrom Posts \ninner join PostTags on Posts.Id = PostTags.PostId\ninner join Tags on PostTags.TagId = Tags.Id\nwhere Year(Posts.CreationDate) = ##MyYear:int##\n  and Month(Posts.CreationDate) = ##MyMonth:int##\n  and TagName = ##MyTag:string##\n)\norder by Posts.CreationDate desc",
        "CreationDate": "2015-06-03 23:56:02",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 322435,
        "Title": "What question should I be upvoted on and am not?",
        "Description": null,
        "QueryBody": "SELECT  Id AS [Post Link] from posts where PostTypeId = 1 and AcceptedAnswerId is null and AnswerCount = 1 and Id in (SELECT ParentId from posts where PostTypeId = 2 and OwnerUserId = ##UserId## and score = 0)\norder by creationdate desc",
        "CreationDate": "2015-06-04 15:59:03",
        "validated": false,
        "QueryBody_Original": "SELECT  Id AS [Post Link] from posts where PostTypeId = 1 and AcceptedAnswerId is null and AnswerCount = 1 and Id in (SELECT ParentId from posts where PostTypeId = 2 and OwnerUserId = ##UserId## and score = 0)\norder by creationdate desc"
    },
    {
        "QuerySetId": 322478,
        "Title": "Close voted questions at risk of aging away",
        "Description": null,
        "QueryBody": "SELECT  top ##Count:int?50## v.creationdate AS \"Vote Date\", v.postid as [Post Link], count(v.postid) AS \"Close Votes\"\nfrom pendingflags v\nwhere v.flagtypeid = 14\nand DATEDIFF(day, v.creationdate, CURRENT_TIMESTAMP) > ##AtLeastDaysAgo:int?7##\nand DATEDIFF(day, v.creationdate, CURRENT_TIMESTAMP) < ##NoMoreThanDaysAgo:int?14##\ngroup by v.postid, v.creationdate\nhaving count(v.postid) >= ##MinimumThreshold:int?4##\norder by count(v.postid) desc, v.creationdate asc",
        "CreationDate": "2015-06-04 19:36:46",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 322486,
        "Title": "-- Who Favorited Me? -- Show users who marked my posts as \"favorites\", and which posts they marked..",
        "Description": null,
        "QueryBody": "DECLARE  @UserId int = ##UserId##\n\nselect votes.userid as [User Link], posts.id as [Post Link] from votes join posts on posts.id = votes.postid where votetypeid=5 and posts.owneruserid=@UserID",
        "CreationDate": "2015-06-04 19:49:52",
        "validated": false,
        "QueryBody_Original": "DECLARE  @UserId int = ##UserId##\n\nselect votes.userid as [User Link], posts.id as [Post Link] from votes join posts on posts.id = votes.postid where votetypeid=5 and posts.owneruserid=@UserID"
    },
    {
        "QuerySetId": 323331,
        "Title": "High-Scoring Questions with Accepted Answers, Parameterized and Linked (Tutorial)",
        "Description": null,
        "QueryBody": "SELECT  p.Id AS [Post Link], p.Score, u.Id AS [User Link], \na.Score AS \"Accepted Score\", au.Id AS [User Link]\n  \nFROM Posts p\nJOIN Posts a ON p.AcceptedAnswerId = a.Id\nJOIN Users u ON p.OwnerUserId = u.Id\nJOIN Users au ON a.OwnerUserId = au.Id\n\nWHERE p.PostTypeId = 1\nAND p.Score >= ##MinScore:int##\nand p.AcceptedAnswerId IS NOT NULL\n\n-- MinScore: Minimum question score to include.\n\nORDER BY p.Score DESC",
        "CreationDate": "2020-09-17 07:16:05",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 324372,
        "Title": "Find specific words in comments & posts",
        "Description": null,
        "QueryBody": "SELECT \n    c.Id AS [Comment Link], \n    SUBSTRING(c.Text, CHARINDEX(##Word:String##, c.Text), 58)\nFROM\n    Comments c\nINNER JOIN\n    Posts q\nON\n    q.Id = c.PostId\nWHERE\n    q.PostTypeId = 1\n  and\n    c.Text LIKE '%'+##Word:String##+'%' COLLATE SQL_Latin1_General_CP1_CI_AS\nORDER BY\n  c.CreationDate DESC",
        "CreationDate": "2015-09-02 21:12:54",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 324375,
        "Title": "Longest answers by approximate word count.",
        "Description": null,
        "QueryBody": "SELECT  TOP 1000\n  Id AS [Post Link],\n  OwnerUserId AS [User Link], \n  -- # of words is about the number of spaces, not counting double spaces.\n  LEN(Body) - LEN(REPLACE(Body, ' ', '')) - 2 * (LEN(Body) - LEN(REPLACE(Body, '  ', ''))) AS ApproxWords,\n  LastActivityDate AS [Last Activity Date]\nFROM\n  Posts\nWHERE\n  PostTypeId = 2\n AND\n  OwnerUserId = ##UserID##\nORDER BY\n  ApproxWords DESC",
        "CreationDate": "2015-08-27 03:00:58",
        "validated": false,
        "QueryBody_Original": "SELECT  TOP 1000\n  Id AS [Post Link],\n  OwnerUserId AS [User Link], \n  -- # of words is about the number of spaces, not counting double spaces.\n  LEN(Body) - LEN(REPLACE(Body, ' ', '')) - 2 * (LEN(Body) - LEN(REPLACE(Body, '  ', ''))) AS ApproxWords,\n  LastActivityDate AS [Last Activity Date]\nFROM\n  Posts\nWHERE\n  PostTypeId = 2\n AND\n  OwnerUserId = ##UserID##\nORDER BY\n  ApproxWords DESC"
    },
    {
        "QuerySetId": 324412,
        "Title": "All my questions and answers",
        "Description": null,
        "QueryBody": "DECLARE  @UserId int = ##UserId##\n\nSELECT Posts.Body\nFROM Posts\nWHERE Posts.OwnerUserId = @UserId",
        "CreationDate": "2018-05-10 07:16:45",
        "validated": false,
        "QueryBody_Original": "DECLARE  @UserId int = ##UserId##\n\nSELECT Posts.Body\nFROM Posts\nWHERE Posts.OwnerUserId = @UserId"
    },
    {
        "QuerySetId": 324509,
        "Title": "Top users per country & tag Improved!",
        "Description": null,
        "QueryBody": "SELECT  us.id [User Link],\n       us.DisplayName [Name],\n       us.Reputation,\n       tuser.Score [Tag Score],\n       tuser.Answers [Tag Answers]\n        \nFROM Users us\n\nJOIN \n(SELECT\n  Answers.OwnerUserId AS UserId,\n  SUM(Answers.Score) AS Score,\n  COUNT(*) AS Answers\n     FROM Tags \n    JOIN PostTags ON Tags.Id = PostTags.TagId\n    JOIN Posts ON Posts.Id = PostTags.PostId  \n    JOIN Posts Answers ON Answers.ParentId = Posts.Id \n   WHERE Tags.TagName = '##TagName##'\n  GROUP BY Answers.OwnerUserId\n) tuser ON tuser.UserId = us.Id\n\nWHERE\n  UPPER(us.Location) like UPPER('##Country?israel##') AND\n  Reputation > ##MinimumReputation:int?1000## AND\n  Answers >= ##MinimumAnswers:int?10##\nORDER BY Reputation DESC",
        "CreationDate": "2018-07-04 23:53:57",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 324516,
        "Title": "Users by location LIKE 2 tags !",
        "Description": null,
        "QueryBody": "SELECT  us.id [User Link],\n       us.DisplayName [Name],\n       us.Reputation,\n       us.Location,\n       tuser.Score [Tag Score],\n       tuser.Answers [Tag Answers]\n        \nFROM Users us\n\nJOIN \n(SELECT\n  Answers.OwnerUserId AS UserId,\n  SUM(Answers.Score) AS Score,\n  COUNT(*) AS Answers\n     FROM Tags \n    JOIN PostTags ON Tags.Id = PostTags.TagId\n    JOIN Posts ON Posts.Id = PostTags.PostId  \n    JOIN Posts Answers ON Answers.ParentId = Posts.Id \n   WHERE Tags.TagName LIKE '%##TagName1##%' OR Tags.TagName LIKE '%##TagName2##%'\n  GROUP BY Answers.OwnerUserId\n) tuser ON tuser.UserId = us.Id\n\nWHERE\n  UPPER(us.Location) like UPPER('%##Location?israel##%') AND\n  Reputation > ##MinimumReputation:int?1000## AND\n  Answers >= ##MinimumTagAnswers:int?10##\nORDER BY Reputation DESC",
        "CreationDate": "2020-04-14 12:41:12",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 324775,
        "Title": "Find other users from a user's question",
        "Description": null,
        "QueryBody": "SELECT  Id, Id as [Post Link], ParentId, Title,  OwnerUserId\n  from posts\n  where OwnerUserId = ##UserId## and PostTypeId = 1",
        "CreationDate": "2015-06-11 14:38:20",
        "validated": false,
        "QueryBody_Original": "SELECT  Id, Id as [Post Link], ParentId, Title,  OwnerUserId\n  from posts\n  where OwnerUserId = ##UserId## and PostTypeId = 1"
    },
    {
        "QuerySetId": 326340,
        "Title": "Number (count) of active users by reputation",
        "Description": null,
        "QueryBody": "SELECT  reputation, count(id)\nfrom users\nwhere lastAccessDate >  DATEADD(month, ##maxMonthsInactive:int?3## * -1, CURRENT_TIMESTAMP)\nand reputation >= ##minReputation:int?2##\ngroup by reputation\norder by reputation",
        "CreationDate": "2015-06-15 19:50:50",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 326814,
        "Title": "Unanswered questions by multiple tags",
        "Description": null,
        "QueryBody": "DECLARE  @Tag1 NVARCHAR(25) = ##Tag1:string?java##;\nDECLARE @Tag2 NVARCHAR(25) = ##Tag2:string?java##;\nDECLARE @Tag3 NVARCHAR(25) = ##Tag3:string?java##;\n\nDECLARE @sql NVARCHAR(MAX) = N'\n  SELECT DISTINCT\n      [Post Link] = Posts.Id\n    , [Creation Date] = Posts.CreationDate\n    , [Tags] = Tags.TagName\n\n  FROM Posts\n    INNER JOIN PostTags \n      ON Posts.Id = PostTags.PostId\n      AND Posts.AnswerCount = 0\n      AND Posts.ClosedDate IS NULL\n    INNER JOIN Tags \n      ON Tags.Id = PostTags.TagId\n\n  WHERE \n    Tags.TagName IN (\n        ''' + @Tag1 + '''\n      , ''' + @Tag2 + '''\n      , ''' + @Tag3 + '''\n  )\n  ORDER BY Posts.CreationDate DESC;'\n\nEXECUTE (@sql);",
        "CreationDate": "2015-06-17 06:43:49",
        "validated": false,
        "QueryBody_Original": "DECLARE  @Tag1 NVARCHAR(25) = ##Tag1:string?java##;\nDECLARE @Tag2 NVARCHAR(25) = ##Tag2:string?java##;\nDECLARE @Tag3 NVARCHAR(25) = ##Tag3:string?java##;\n\nDECLARE @sql NVARCHAR(MAX) = N'\n  SELECT DISTINCT\n      [Post Link] = Posts.Id\n    , [Creation Date] = Posts.CreationDate\n    , [Tags] = Tags.TagName\n\n  FROM Posts\n    INNER JOIN PostTags \n      ON Posts.Id = PostTags.PostId\n      AND Posts.AnswerCount = 0\n      AND Posts.ClosedDate IS NULL\n    INNER JOIN Tags \n      ON Tags.Id = PostTags.TagId\n\n  WHERE \n    Tags.TagName IN (\n        ''' + @Tag1 + '''\n      , ''' + @Tag2 + '''\n      , ''' + @Tag3 + '''\n  )\n  ORDER BY Posts.CreationDate DESC;'\n\nEXECUTE (@sql);"
    },
    {
        "QuerySetId": 326846,
        "Title": "Find Stack Overflow Users In Your City (those with user-links)",
        "Description": "A simply query to find users in your city or country. Added user links to the original version.\r\n",
        "QueryBody": "WITH  user-links)\n-- A simply query to find users in your city or country. Added user links.\n\nselect Id [User Link], Reputation, DisplayName, Location, WebsiteUrl\nfrom Users\nwhere replace(LOWER(Location), ' ','') like replace(LOWER('%##Location##%'), ' ','')\norder by Reputation desc",
        "CreationDate": "2015-06-17 05:48:06",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 327776,
        "Title": "Questions and Answers per Day by Month",
        "Description": null,
        "QueryBody": "DECLARE  @maxdate date = (select max(creationdate) from posts);\n\nselect\n    year(CreationDate)+(month(CreationDate)\/12.0)\n      -- Convert month to decimal so that X-axis is smooth\n  , count(*) * 1.0 \/ -- denominator is number of days in the month\n    (case when       -- or number of days elapsed in the last month\n      year(creationdate) = year(@maxdate) and month(creationdate) = month(@maxdate)\n      then day(@maxdate)\n      else DAY(DATEADD(DD,-1,DATEADD(MM,DATEDIFF(MM,-1,CreationDate),0))) end)\nfrom Posts where ParentId is null\ngroup by year(CreationDate), month(CreationDate), DAY(DATEADD(DD,-1,DATEADD(MM,DATEDIFF(MM,-1,CreationDate),0)))\norder by year(CreationDate), month(CreationDate)",
        "CreationDate": "2015-06-19 22:10:35",
        "validated": false,
        "QueryBody_Original": "DECLARE  @maxdate date = (select max(creationdate) from posts);\n\nselect\n    year(CreationDate)+(month(CreationDate)\/12.0)\n      -- Convert month to decimal so that X-axis is smooth\n  , count(*) * 1.0 \/ -- denominator is number of days in the month\n    (case when       -- or number of days elapsed in the last month\n      year(creationdate) = year(@maxdate) and month(creationdate) = month(@maxdate)\n      then day(@maxdate)\n      else DAY(DATEADD(DD,-1,DATEADD(MM,DATEDIFF(MM,-1,CreationDate),0))) end)\nfrom Posts where ParentId is null\ngroup by year(CreationDate), month(CreationDate), DAY(DATEADD(DD,-1,DATEADD(MM,DATEDIFF(MM,-1,CreationDate),0)))\norder by year(CreationDate), month(CreationDate)"
    },
    {
        "QuerySetId": 328063,
        "Title": "Top 25 related tags of single tag",
        "Description": null,
        "QueryBody": "WITH  that base tag.\n\nselect TOP(25) t1.TagName as Tag, t2.TagName as \"Related Tag\", count(t2.TagName) as \"Count\"\n\nfrom PostTags as pt1\n  INNER JOIN Tags as t1 ON pt1.TagId = t1.Id\n  INNER JOIN PostTags as pt2 ON pt1.PostId = pt2.PostId AND pt1.TagId <> pt2.TagId\n  INNER JOIN Tags as t2 ON pt2.TagId = t2.Id\n  INNER JOIN posts A on pt2.postid = A.id\nwhere t1.TagName = ##MyTag:string##\n-- and A.creationdate > getdate() - 365 Date filter\ngroup by t1.TagName, t2.TagName\norder by count(t2.TagName) desc",
        "CreationDate": "2016-02-23 10:01:49",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 328989,
        "Title": "How much rep would I have if there were no rep cap?",
        "Description": null,
        "QueryBody": "DECLARE  @UserId int = 10051\n\n\nSELECT SUM(Case When VoteTypeID = 1 Then 15 WHEN VoteTypeID=2 THEN 10 WHEN VoteTypeID=3 THEN -2 ELSE 0 END)\nFROM Votes v\nINNER JOIN Posts p ON p.ID = v.PostID\nWHERE p.OwnerUserID = @UserID AND p.CommunityOwnedDate IS NULL",
        "CreationDate": "2015-06-24 17:13:57",
        "validated": false,
        "QueryBody_Original": "DECLARE  @UserId int = 10051\n\n\nSELECT SUM(Case When VoteTypeID = 1 Then 15 WHEN VoteTypeID=2 THEN 10 WHEN VoteTypeID=3 THEN -2 ELSE 0 END)\nFROM Votes v\nINNER JOIN Posts p ON p.ID = v.PostID\nWHERE p.OwnerUserID = @UserID AND p.CommunityOwnedDate IS NULL"
    },
    {
        "QuerySetId": 329399,
        "Title": "How many questions are there",
        "Description": null,
        "QueryBody": "DECLARE  @TagName varchar(128) = '%##TagName##%'\n\n    SELECT COUNT(*) as Questions from Posts P\n    WHERE P.Id IN (\n      SELECT DISTINCT(PostId) from PostTags \n      WHERE PostTags.TagId In (\n        SELECT Id From Tags Where TagName LIKE @TagName\n      )\n    )",
        "CreationDate": "2015-06-26 02:14:17",
        "validated": false,
        "QueryBody_Original": "DECLARE  @TagName varchar(128) = '%##TagName##%'\n\n    SELECT COUNT(*) as Questions from Posts P\n    WHERE P.Id IN (\n      SELECT DISTINCT(PostId) from PostTags \n      WHERE PostTags.TagId In (\n        SELECT Id From Tags Where TagName LIKE @TagName\n      )\n    )"
    },
    {
        "QuerySetId": 330075,
        "Title": "A check if you are not the last editor on your posts",
        "Description": null,
        "QueryBody": "DECLARE  @user INT = ##UserID:int##\n\nSELECT\n   LastEditorUserId AS [Last Editor],\n   LastEditDate AS [Last Edit],\n   Id AS [Post Link]\nFROM Posts \n   WHERE OwnerUserId = @user\n   AND LastEditorUserID <> @user\nORDER BY [Last Edit] ASC",
        "CreationDate": "2015-06-29 06:52:22",
        "validated": false,
        "QueryBody_Original": "DECLARE  @user INT = ##UserID:int##\n\nSELECT\n   LastEditorUserId AS [Last Editor],\n   LastEditDate AS [Last Edit],\n   Id AS [Post Link]\nFROM Posts \n   WHERE OwnerUserId = @user\n   AND LastEditorUserID <> @user\nORDER BY [Last Edit] ASC"
    },
    {
        "QuerySetId": 330327,
        "Title": "Posts where you voted Leave Open to ultimately Closed questions",
        "Description": null,
        "QueryBody": "DECLARE  @user INT = ##UserID:int##\n\nSELECT P.Id AS [Post Link],\n       PH.CreationDate, \n       PH.Text \nFROM PostHistory PH\n   JOIN Posts P ON P.Id = PH.PostId\n   WHERE PH.PostHistoryTypeId = 10 AND \n         PH.PostHistoryTypeId <> 11 AND\n         PH.Text LIKE '%\"Id\":' + CAST(@user AS nvarchar) + ',%' AND\n         P.ClosedDate IS NULL\nORDER BY PH.CreationDate DESC",
        "CreationDate": "2015-08-19 20:08:20",
        "validated": false,
        "QueryBody_Original": "DECLARE  @user INT = ##UserID:int##\n\nSELECT P.Id AS [Post Link],\n       PH.CreationDate, \n       PH.Text \nFROM PostHistory PH\n   JOIN Posts P ON P.Id = PH.PostId\n   WHERE PH.PostHistoryTypeId = 10 AND \n         PH.PostHistoryTypeId <> 11 AND\n         PH.Text LIKE '%\"Id\":' + CAST(@user AS nvarchar) + ',%' AND\n         P.ClosedDate IS NULL\nORDER BY PH.CreationDate DESC"
    },
    {
        "QuerySetId": 330783,
        "Title": "Number of answers, accepted answers and accepted percent",
        "Description": null,
        "QueryBody": "DECLARE  @UserId int = ##UserId##\n\nSELECT convert(date,CreationDate),Count(*) FROM Posts WHERE OwnerUserId = @UserId\ngroup by convert(date,CreationDate)",
        "CreationDate": "2015-07-01 01:00:08",
        "validated": false,
        "QueryBody_Original": "DECLARE  @UserId int = ##UserId##\n\nSELECT convert(date,CreationDate),Count(*) FROM Posts WHERE OwnerUserId = @UserId\ngroup by convert(date,CreationDate)"
    },
    {
        "QuerySetId": 330794,
        "Title": "Unanswered questions by post length",
        "Description": null,
        "QueryBody": "DECLARE  @Tags NVARCHAR(250) = '%' + REPLACE(##TagsYouWant##, ' ', '%%') + '%';\nDECLARE @BadTags NVARCHAR(250) = '%<' + REPLACE(##TagsYouWantToAvoid##, ' ', '>%%<') + '>%';\n\nPRINT @BadTags\n\nSELECT TOP 500\n    LEN(Body) [Post Length]\n  , Score\n  , CreationDate\n  , Id [Post Link]\n  , Tags\nFROM Posts\nWHERE\n      Tags NOT LIKE @BadTags\n  AND Tags LIKE @Tags\n  AND AnswerCount = 0\n  AND ClosedDate IS NULL\n  AND PostTypeId = 1\n  AND CreationDate < DATEADD(month, -2, GETDATE())\nORDER BY [Post Length] ASC",
        "CreationDate": "2015-07-07 04:41:58",
        "validated": false,
        "QueryBody_Original": "DECLARE  @Tags NVARCHAR(250) = '%' + REPLACE(##TagsYouWant##, ' ', '%%') + '%';\nDECLARE @BadTags NVARCHAR(250) = '%<' + REPLACE(##TagsYouWantToAvoid##, ' ', '>%%<') + '>%';\n\nPRINT @BadTags\n\nSELECT TOP 500\n    LEN(Body) [Post Length]\n  , Score\n  , CreationDate\n  , Id [Post Link]\n  , Tags\nFROM Posts\nWHERE\n      Tags NOT LIKE @BadTags\n  AND Tags LIKE @Tags\n  AND AnswerCount = 0\n  AND ClosedDate IS NULL\n  AND PostTypeId = 1\n  AND CreationDate < DATEADD(month, -2, GETDATE())\nORDER BY [Post Length] ASC"
    },
    {
        "QuerySetId": 332454,
        "Title": "User age by join year histogram",
        "Description": null,
        "QueryBody": "DECLARE  @epoch datetime = GetDate();\n\nwith UserJoins as (\nSelect Age - DateDiff(yy, CreationDate, @epoch) as Age,\n       DatePart(yy, CreationDate) as Year,\n       Count(*) as Total\nfrom Users\nwhere Age is not null\ngroup by Age - DateDiff(yy, CreationDate, @epoch), DatePart(yy, CreationDate)\n)\n\nselect Age, [2008], [2009], [2010], [2011], [2012], [2013], [2014], [2015], [2016]\nfrom UserJoins\npivot (sum (Total)\n       for Year in\n       ([2008], [2009], [2010], [2011], [2012], [2013], [2014], [2015], [2016])\n      ) as MyPivot\nOrder by Age",
        "CreationDate": "2015-07-06 06:51:54",
        "validated": false,
        "QueryBody_Original": "DECLARE  @epoch datetime = GetDate();\n\nwith UserJoins as (\nSelect Age - DateDiff(yy, CreationDate, @epoch) as Age,\n       DatePart(yy, CreationDate) as Year,\n       Count(*) as Total\nfrom Users\nwhere Age is not null\ngroup by Age - DateDiff(yy, CreationDate, @epoch), DatePart(yy, CreationDate)\n)\n\nselect Age, [2008], [2009], [2010], [2011], [2012], [2013], [2014], [2015], [2016]\nfrom UserJoins\npivot (sum (Total)\n       for Year in\n       ([2008], [2009], [2010], [2011], [2012], [2013], [2014], [2015], [2016])\n      ) as MyPivot\nOrder by Age"
    },
    {
        "QuerySetId": 333043,
        "Title": "Where do I rank based on the date I joined SO?",
        "Description": "Provide your userid and this will show you the reputation of you against people that have joined since the date you joined. It will show you users with at least your current amount of reputation, so the number of rows will indicate your position since your start date on the site.",
        "QueryBody": "DECLARE  @WhenDidIJoin datetime, @MyRep int\n\nselect @WhenDidIJoin = CreationDate, @MyRep = Reputation\nfrom Users\nwhere Id = ##userid##\n\nselect Reputation, DisplayName \nfrom Users \nwhere CreationDate >= @WhenDidIJoin AND Reputation >= @MyRep\norder by Reputation",
        "CreationDate": "2015-07-07 13:00:00",
        "validated": false,
        "QueryBody_Original": "DECLARE  @WhenDidIJoin datetime, @MyRep int\n\nselect @WhenDidIJoin = CreationDate, @MyRep = Reputation\nfrom Users\nwhere Id = ##userid##\n\nselect Reputation, DisplayName \nfrom Users \nwhere CreationDate >= @WhenDidIJoin AND Reputation >= @MyRep\norder by Reputation"
    },
    {
        "QuerySetId": 333531,
        "Title": "Questions with accepted answers per month",
        "Description": null,
        "QueryBody": "WITH  accepted answers per MM\/YY \n-- A break down of answer per MM\/YY\n\nWITH total_questions(yr, mth, cnt) AS (\n   SELECT Year(CreationDate), Month(CreationDate), COUNT(*)\n   FROM Posts\n   WHERE PostTypeId = 1\n   GROUP BY Year(CreationDate), Month(CreationDate)\n),\nquestions_WITH_accepted(yr, mth, cnt) AS (\n   SELECT Year(CreationDate), Month(CreationDate), COUNT(*)\n   FROM Posts\n   WHERE PostTypeId = 1\n      AND AcceptedAnswerId IS NOT NULL\n   GROUP BY Year(CreationDate), Month(CreationDate)\n)\nSELECT tq.yr AS Year, tq.mth AS Month, tq.cnt AS Questions, qwa.cnt AS QuestionsAccepted\nFROM total_questions tq\n    JOIN questions_WITH_accepted qwa ON qwa.yr = tq.yr AND qwa.mth = tq.mth\nORDER BY tq.yr DESC, tq.mth DESC",
        "CreationDate": "2015-07-08 17:08:57",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 333644,
        "Title": "Most Down-Voted Questions that have no Up-votes",
        "Description": null,
        "QueryBody": "SELECT \n  DATEPART(YEAR, p.CreationDate) as Year,\n  DATEPART(MONTH, p.CreationDate) as Month,\n  COUNT(1) AS TotalVotes,\n  COUNT( Case when v.VoteTypeId = 2 then 1 end) AS UpVotes,\n  COUNT( Case when v.VoteTypeId = 3 then 1 end) AS DownVotes,\n  CAST(CAST(SUM(CASE WHEN v.VoteTypeId = 3 THEN 100 ELSE 0 END) AS float) \/ CAST(SUM(CASE WHEN v.VoteTypeId = 2 THEN 1 ELSE 0 END) AS float) AS decimal(4,2)) AS VoteRatio\nFROM Votes v\n  INNER JOIN Posts p ON v.PostId = p.Id and (v.VoteTypeId = 2 or v.VoteTypeId=3) and v.CreationDate >= DATEADD(day, -30, convert(date, GETDATE()))\nGROUP BY DATEPART(YEAR, p.CreationDate), DATEPART(MONTH, p.CreationDate)\nORDER BY Year, Month ASC",
        "CreationDate": "2015-07-08 15:37:00",
        "validated": false,
        "QueryBody_Original": "SELECT \n  DATEPART(YEAR, p.CreationDate) as Year,\n  DATEPART(MONTH, p.CreationDate) as Month,\n  COUNT(1) AS TotalVotes,\n  COUNT( Case when v.VoteTypeId = 2 then 1 end) AS UpVotes,\n  COUNT( Case when v.VoteTypeId = 3 then 1 end) AS DownVotes,\n  CAST(CAST(SUM(CASE WHEN v.VoteTypeId = 3 THEN 100 ELSE 0 END) AS float) \/ CAST(SUM(CASE WHEN v.VoteTypeId = 2 THEN 1 ELSE 0 END) AS float) AS decimal(4,2)) AS VoteRatio\nFROM Votes v\n  INNER JOIN Posts p ON v.PostId = p.Id and (v.VoteTypeId = 2 or v.VoteTypeId=3) and v.CreationDate >= DATEADD(day, -30, convert(date, GETDATE()))\nGROUP BY DATEPART(YEAR, p.CreationDate), DATEPART(MONTH, p.CreationDate)\nORDER BY Year, Month ASC"
    },
    {
        "QuerySetId": 333814,
        "Title": "User answer score by location & tag, ordered by score.",
        "Description": null,
        "QueryBody": "SELECT  U.Id AS [User Link], U.Location, T.TagName, SUM(A.Score) AS TagScore\nFROM Users U\n  INNER JOIN Posts A ON A.OwnerUserId = U.Id AND A.PostTypeId = 2\n  INNER JOIN Posts Q ON Q.Id = A.ParentId AND Q.PostTypeId = 1\n  INNER JOIN PostTags PT ON PT.PostId = Q.Id\n  INNER JOIN Tags T ON T.Id = PT.TagId\nWHERE U.Location LIKE ('%' + ##Location:string?Arkansas## + '%') \n  COLLATE Modern_Spanish_CI_AS\nGROUP BY U.Id, U.Location, T.TagName\nHAVING T.TagName = ##TagName:string?java##\nORDER BY SUM(A.Score) DESC",
        "CreationDate": "2015-07-09 01:39:53",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 335479,
        "Title": "Popular Questions By View Count",
        "Description": null,
        "QueryBody": "DECLARE  @allowed_min_views INT = 500;\nDECLARE @allowed_min_score INT = 3;\n\nDECLARE @user_id INT = ##UserId:int?-1##;\nDECLARE @min_views INT = ##MinViews:int?500##;\nDECLARE @min_score INT = ##MinScore:int?3##;\nDECLARE @question INT = 1;\n\nIF (@min_views < @allowed_min_views)\nBEGIN\n  PRINT '@MinimumViews must be larger than 499.'\nEND\n\nIF (@min_score < @allowed_min_score)\nBEGIN\n  PRINT '@MinimumScore must be larger than 2.'\nEND\n\nIF (@min_views >= @allowed_min_views AND @min_score >= @allowed_min_score)\nBEGIN\n  SELECT\n  Title,\n      ViewCount\n    , Score\n    FROM Posts WHERE\n      PostTypeId = @question\n      AND OwnerUserId = @user_id\n      AND ViewCount >= @min_views\n      AND Score >= @min_score\n    ORDER BY ViewCount ASC;\nEND",
        "CreationDate": "2015-08-20 23:15:37",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 336119,
        "Title": "Graph of popular questions by views",
        "Description": null,
        "QueryBody": "DECLARE  @min_allowed_views INT = 250;\nDECLARE @min_allowed_score INT = 3;\nDECLARE @question_type_id INT = 1;\n\nDECLARE @user_id INT = ##UserId:int?-1##;\nDECLARE @min_views INT = ##MinViews:int?250##;\nDECLARE @min_score INT = ##MinScore:int?3##;\n\nIF (@min_views >= @min_allowed_views AND @min_score >= @min_allowed_score)\nBEGIN\n  SELECT\n      ViewCount\n    , Score\n  FROM Posts WHERE\n    PostTypeId = @question_type_id\n    AND OwnerUserId = @user_id\n    AND ViewCount >= @min_views\n    AND Score >= @min_score\n  ORDER BY ViewCount ASC;\nEND\n\nELSE BEGIN\n  PRINT 'MinViews must be larger than 249.';\n  PRINT 'MinScore must be larger than 2.';\nEND",
        "CreationDate": "2015-07-14 01:04:24",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 336196,
        "Title": "select * from Posts where Body like \"%imageshack%\" for a user",
        "Description": null,
        "QueryBody": "SELECT \n  p.Id AS [Post Link],\n  p.CreationDate,\n  p.Score\nFROM Posts p\nWHERE p.OwnerUserId = ##User## AND p.Body like '%aioobe.se%'",
        "CreationDate": "2015-07-14 14:23:21",
        "validated": false,
        "QueryBody_Original": "SELECT \n  p.Id AS [Post Link],\n  p.CreationDate,\n  p.Score\nFROM Posts p\nWHERE p.OwnerUserId = ##User## AND p.Body like '%aioobe.se%'"
    },
    {
        "QuerySetId": 336328,
        "Title": "Search for certain keywords in post body, title, or tags.",
        "Description": null,
        "QueryBody": "DECLARE  @search_keywords NVARCHAR(MAX) = ##SearchKeywords:string##;\n\nPRINT CONCAT('%', REPLACE(@search_keywords, ' ', '%%'), '%')\n\nSELECT\n    Id AS [Post Link]\n  , OwnerUserId AS [User Link]\n  , Score\nFROM Posts WHERE\n  Title LIKE '%' + REPLACE(@search_keywords, ' ', '%%') + '%'\n  AND Body LIKE '%' + REPLACE(@search_keywords, ' ', '%%') + '%'\n  AND Tags LIKE '%' + REPLACE(@search_keywords, ' ', '%%') + '%'\nORDER BY Score DESC;",
        "CreationDate": "2017-11-27 05:05:52",
        "validated": false,
        "QueryBody_Original": "DECLARE  @search_keywords NVARCHAR(MAX) = ##SearchKeywords:string##;\n\nPRINT CONCAT('%', REPLACE(@search_keywords, ' ', '%%'), '%')\n\nSELECT\n    Id AS [Post Link]\n  , OwnerUserId AS [User Link]\n  , Score\nFROM Posts WHERE\n  Title LIKE '%' + REPLACE(@search_keywords, ' ', '%%') + '%'\n  AND Body LIKE '%' + REPLACE(@search_keywords, ' ', '%%') + '%'\n  AND Tags LIKE '%' + REPLACE(@search_keywords, ' ', '%%') + '%'\nORDER BY Score DESC;"
    },
    {
        "QuerySetId": 336669,
        "Title": "Tag statistics for React vs Ractive",
        "Description": "view data for specific tags\r\n\r\n",
        "QueryBody": "DECLARE  @total float\nSELECT @total = Sum(Cast(ViewCount as bigint)) FROM Posts WHERE PostTypeId = 1\n\nSELECT \n    Tags.Tagname AS Tag, \n    Count(*) AS Questions, \n    Sum(Cast(Posts.ViewCount as bigint)) AS Views,\n    str(100 * Sum(Cast(Posts.ViewCount as bigint)) \/ @total,6,2) AS percentOfSite,\n    Sum(Posts.Score) AS Score,\n    Sum(Posts.AnswerCount) AS Answers,\n    Sum(Cast(Posts.ViewCount as bigint)) \/ Count(*) AS AvgViews,\n    str(Sum(Posts.Score) \/ Cast(Count(*) AS Float),6,2) AS AvgScore,\n    str(Sum(Posts.AnswerCount) \/ Cast(Count(*) AS Float),6,2) AS AvgAnswers\n  FROM Posts \n  JOIN PostTags ON Posts.Id = PostTags.PostId\n  JOIN Tags ON PostTags.TagId = Tags.Id\n  WHERE Posts.PostTypeId = 1 \n  GROUP BY Tags.Tagname\n  HAVING Tags.Tagname = 'juju' \n   \n  ORDER BY Views DESC",
        "CreationDate": "2015-12-01 22:12:25",
        "validated": false,
        "QueryBody_Original": "DECLARE  @total float\nSELECT @total = Sum(Cast(ViewCount as bigint)) FROM Posts WHERE PostTypeId = 1\n\nSELECT \n    Tags.Tagname AS Tag, \n    Count(*) AS Questions, \n    Sum(Cast(Posts.ViewCount as bigint)) AS Views,\n    str(100 * Sum(Cast(Posts.ViewCount as bigint)) \/ @total,6,2) AS percentOfSite,\n    Sum(Posts.Score) AS Score,\n    Sum(Posts.AnswerCount) AS Answers,\n    Sum(Cast(Posts.ViewCount as bigint)) \/ Count(*) AS AvgViews,\n    str(Sum(Posts.Score) \/ Cast(Count(*) AS Float),6,2) AS AvgScore,\n    str(Sum(Posts.AnswerCount) \/ Cast(Count(*) AS Float),6,2) AS AvgAnswers\n  FROM Posts \n  JOIN PostTags ON Posts.Id = PostTags.PostId\n  JOIN Tags ON PostTags.TagId = Tags.Id\n  WHERE Posts.PostTypeId = 1 \n  GROUP BY Tags.Tagname\n  HAVING Tags.Tagname = 'juju' \n   \n  ORDER BY Views DESC"
    },
    {
        "QuerySetId": 337177,
        "Title": "Questions posted in a given year without a bounty",
        "Description": null,
        "QueryBody": "DECLARE  @Year int = ##Year##\n\nSELECT count(*)\nFROM Posts p\nWHERE Id NOT IN (SELECT PostId FROM Votes v\n                 WHERE v.VoteTypeId = 8)  -- BountyStart\n--AND YEAR(p.CreationDate) = @Year\nAND p.CreationDate > '2015-05-01'\nAND p.PostTypeId = 1 --Question\nAND (p.Score >= 2 AND p.Score <= 9)\nAND (p.ViewCount >= 77 AND p.ViewCount <= 628)\nAND p.ClosedDate IS NULL\nAND p.FavoriteCount >= 1\nAND p.AcceptedAnswerId IS NOT NULL",
        "CreationDate": "2015-07-24 22:38:29",
        "validated": false,
        "QueryBody_Original": "DECLARE  @Year int = ##Year##\n\nSELECT count(*)\nFROM Posts p\nWHERE Id NOT IN (SELECT PostId FROM Votes v\n                 WHERE v.VoteTypeId = 8)  -- BountyStart\n--AND YEAR(p.CreationDate) = @Year\nAND p.CreationDate > '2015-05-01'\nAND p.PostTypeId = 1 --Question\nAND (p.Score >= 2 AND p.Score <= 9)\nAND (p.ViewCount >= 77 AND p.ViewCount <= 628)\nAND p.ClosedDate IS NULL\nAND p.FavoriteCount >= 1\nAND p.AcceptedAnswerId IS NOT NULL"
    },
    {
        "QuerySetId": 337356,
        "Title": "Questions you've answered, by view count",
        "Description": null,
        "QueryBody": "SELECT  q.Id as [Post Link], q.ViewCount, q.CreationDate as [Asked], a.CreationDate as [Answered] from Posts q\ninner join Posts a on a.ParentId=q.Id\nwhere a.OwnerUserId = ##user##\norder by q.ViewCount desc",
        "CreationDate": "2015-07-17 09:58:23",
        "validated": false,
        "QueryBody_Original": "SELECT  q.Id as [Post Link], q.ViewCount, q.CreationDate as [Asked], a.CreationDate as [Answered] from Posts q\ninner join Posts a on a.ParentId=q.Id\nwhere a.OwnerUserId = ##user##\norder by q.ViewCount desc"
    },
    {
        "QuerySetId": 338055,
        "Title": "How many points have I lost due to daily cap?",
        "Description": null,
        "QueryBody": "DECLARE  @UserId int = ##UserId##;\n\nWITH BasePoints AS (\n  SELECT\n    V.CreationDate AS Date,\n    sum(\n      CASE\n        WHEN P.PostTypeId = 1 AND V.VoteTypeId = 2 THEN 5  -- Question UP\n        WHEN P.PostTypeId = 1 AND V.VoteTypeId = 3 THEN -2 -- Question DOWN\n        WHEN P.PostTypeId = 2 AND V.VoteTypeId = 2 THEN 10 -- Answer   UP\n        WHEN P.PostTypeId = 1 AND V.VoteTypeId = 3 THEN -2 -- Answer   DOWN\n      END\n    ) AS Gain\n  FROM Votes V\n    INNER JOIN Posts P ON V.PostId = P.Id\n  WHERE\n    P.OwnerUserId = @UserId\n    AND P.PostTypeId IN (1, 2) AND V.VoteTypeId IN (2, 3)\n  GROUP BY V.CreationDate\n)\n\nSELECT Date, (Gain - 200) as LostPoints\nFROM BasePoints\nWHERE Gain > 200\nORDER BY Date DESC",
        "CreationDate": "2015-08-03 12:46:46",
        "validated": false,
        "QueryBody_Original": "DECLARE  @UserId int = ##UserId##;\n\nWITH BasePoints AS (\n  SELECT\n    V.CreationDate AS Date,\n    sum(\n      CASE\n        WHEN P.PostTypeId = 1 AND V.VoteTypeId = 2 THEN 5  -- Question UP\n        WHEN P.PostTypeId = 1 AND V.VoteTypeId = 3 THEN -2 -- Question DOWN\n        WHEN P.PostTypeId = 2 AND V.VoteTypeId = 2 THEN 10 -- Answer   UP\n        WHEN P.PostTypeId = 1 AND V.VoteTypeId = 3 THEN -2 -- Answer   DOWN\n      END\n    ) AS Gain\n  FROM Votes V\n    INNER JOIN Posts P ON V.PostId = P.Id\n  WHERE\n    P.OwnerUserId = @UserId\n    AND P.PostTypeId IN (1, 2) AND V.VoteTypeId IN (2, 3)\n  GROUP BY V.CreationDate\n)\n\nSELECT Date, (Gain - 200) as LostPoints\nFROM BasePoints\nWHERE Gain > 200\nORDER BY Date DESC"
    },
    {
        "QuerySetId": 338158,
        "Title": "See in which comment I've linked to a question",
        "Description": null,
        "QueryBody": "DECLARE  @UserId int = ##UserId##\n\nSELECT \n    Comments.PostId as [Post Link],\n    Comments.Text \nFROM Comments\nWHERE \n    Comments.UserId = @UserId\n    and Comments.Text like '%stackoverflow.com\/q\/17594183\/%'",
        "CreationDate": "2018-11-01 19:11:43",
        "validated": false,
        "QueryBody_Original": "DECLARE  @UserId int = ##UserId##\n\nSELECT \n    Comments.PostId as [Post Link],\n    Comments.Text \nFROM Comments\nWHERE \n    Comments.UserId = @UserId\n    and Comments.Text like '%stackoverflow.com\/q\/17594183\/%'"
    },
    {
        "QuerySetId": 338477,
        "Title": "Questions with most close\/reopen cycles",
        "Description": null,
        "QueryBody": "SELECT  TOP ##topn:int?50##\n   p.Id AS [Post Link], MAX(p.ClosedDate) AS CurrentCloseDate, COUNT(*) AS ClosePlusReopenCount\nFROM Posts p INNER JOIN PostHistory h ON p.Id=h.PostId\nWHERE h.PostHistoryTypeId=10 or h.PostHistoryTypeId=11\nGROUP BY p.Id\nORDER BY ClosePlusReopenCount DESC",
        "CreationDate": "2015-07-30 14:12:10",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 338479,
        "Title": "Questions with only downvoted answer(s)",
        "Description": "sorted by max answer score",
        "QueryBody": "SELECT  TOP ##topn:int?50## MAX(q.Id) AS [Post Link],MAX(q.Score) AS [Q Score],\n   MAX(a.Score) AS [Max A Score],MIN(a.Score) AS [Min A Score],COUNT(*) AS [Answer Count],MAX(q.ClosedDate)\nFROM Posts q INNER JOIN Posts a ON a.ParentId=q.Id\nWHERE q.PostTypeId=1 AND a.PostTypeId=2 AND (##excludeClosed:int?1##=0 OR q.ClosedDate IS NULL)\nGROUP BY q.Id\nHAVING MAX(a.Score)<0\nORDER BY MAX(a.Score)",
        "CreationDate": "2015-07-21 10:42:00",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 338811,
        "Title": "answer ratio for the last M months",
        "Description": null,
        "QueryBody": "DECLARE  @months_ago DATETIME = DateAdd(month, -##months:int##, GETUTCDATE())\n\n-- 1 - question\n-- 2 - answer\nselect cast((select count(*) from Posts where PostTypeId = 2 and CreationDate > @months_ago) as float) \/ (select count(*) from Posts where PostTypeId = 1  and CreationDate > @months_ago) as [answer ratio]",
        "CreationDate": "2015-07-21 21:52:13",
        "validated": false,
        "QueryBody_Original": "DECLARE  @months_ago DATETIME = DateAdd(month, -##months:int##, GETUTCDATE())\n\n-- 1 - question\n-- 2 - answer\nselect cast((select count(*) from Posts where PostTypeId = 2 and CreationDate > @months_ago) as float) \/ (select count(*) from Posts where PostTypeId = 1  and CreationDate > @months_ago) as [answer ratio]"
    },
    {
        "QuerySetId": 338814,
        "Title": "answered question percentage for the last M months",
        "Description": null,
        "QueryBody": "DECLARE  @months_ago DATETIME = DateAdd(month, -##months:int##, GETUTCDATE())\n\n-- 1 - question\n-- 2 - answer\nselect 100*cast((select count(distinct Q.Id) from Posts Q, Posts A where A.ParentId = Q.Id and Q.CreationDate > @months_ago and (A.Score > 0 or Q.AcceptedAnswerId = A.Id)) as float) \/ (select count(*) from Posts where PostTypeId = 1 and CreationDate > @months_ago) as [answer ratio]",
        "CreationDate": "2015-07-21 21:46:20",
        "validated": false,
        "QueryBody_Original": "DECLARE  @months_ago DATETIME = DateAdd(month, -##months:int##, GETUTCDATE())\n\n-- 1 - question\n-- 2 - answer\nselect 100*cast((select count(distinct Q.Id) from Posts Q, Posts A where A.ParentId = Q.Id and Q.CreationDate > @months_ago and (A.Score > 0 or Q.AcceptedAnswerId = A.Id)) as float) \/ (select count(*) from Posts where PostTypeId = 1 and CreationDate > @months_ago) as [answer ratio]"
    },
    {
        "QuerySetId": 338916,
        "Title": "Top questions by Bayesian rating",
        "Description": null,
        "QueryBody": "SELECT  TOP ##topn:int?50##\n   Id AS [Post Link],upvotes,downvotes,Score,\n   (upvotes+(AVG(upvotes)OVER()))\/(upvotes+downvotes+(AVG(upvotes+downvotes)OVER())) AS br\nFROM\n(SELECT\n  p.Id,COUNT(CASE v.VoteTypeId WHEN 2 THEN 1 ELSE NULL END) as upvotes,\n  COUNT(CASE v.VoteTypeId WHEN 3 THEN 1 ELSE NULL END) as downvotes,\n  MAX(p.Score) as Score\n  FROM Posts p INNER JOIN Votes v ON p.Id=v.PostId\n  WHERE p.PostTypeId=1\n  GROUP BY p.Id\n) innerQuery\nORDER BY br DESC",
        "CreationDate": "2015-07-22 07:33:13",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 338940,
        "Title": "All votes from one user",
        "Description": null,
        "QueryBody": "SELECT  votes.Id, votes.PostId, votes.VoteTypeId, votes.UserId, votes.CreationDate, \n  Posts.Title\nfrom Votes, Posts\nwhere votes.PostId = Posts.Id and  UserId = ##UserId##\norder by CreationDate desc",
        "CreationDate": "2015-07-22 10:48:16",
        "validated": false,
        "QueryBody_Original": "SELECT  votes.Id, votes.PostId, votes.VoteTypeId, votes.UserId, votes.CreationDate, \n  Posts.Title\nfrom Votes, Posts\nwhere votes.PostId = Posts.Id and  UserId = ##UserId##\norder by CreationDate desc"
    },
    {
        "QuerySetId": 339115,
        "Title": "My answers to bad questions",
        "Description": null,
        "QueryBody": "SELECT \n  case\n    when q.acceptedanswerid = a.id then 1\n    else 0 \n  end as [Accepted], a.score as [Score], a.id as [Post Link], q.closeddate as [Date Closed], a.creationdate as [Date Posted]\nfrom\n  Posts a\n  inner join posts q on a.parentid = q.id\nwhere\n  q.closeddate is not null\n  and not exists (SELECT 1 from PostHistory where PostId=q.Id and CreationDate=q.ClosedDate and PostHistoryTypeId=10 and Comment not in (101,1))\n  and a.owneruserid = ##UserId##",
        "CreationDate": "2015-07-23 00:14:53",
        "validated": false,
        "QueryBody_Original": "SELECT \n  case\n    when q.acceptedanswerid = a.id then 1\n    else 0 \n  end as [Accepted], a.score as [Score], a.id as [Post Link], q.closeddate as [Date Closed], a.creationdate as [Date Posted]\nfrom\n  Posts a\n  inner join posts q on a.parentid = q.id\nwhere\n  q.closeddate is not null\n  and not exists (SELECT 1 from PostHistory where PostId=q.Id and CreationDate=q.ClosedDate and PostHistoryTypeId=10 and Comment not in (101,1))\n  and a.owneruserid = ##UserId##"
    },
    {
        "QuerySetId": 339193,
        "Title": "Comments moved to chat in the last 90 days",
        "Description": null,
        "QueryBody": "SELECT  count(*) threads\nfrom Comments\nwhere Text like 'Comments are not for extended discussion%'\n      and CreationDate > getdate() - ##days?90##",
        "CreationDate": "2015-07-23 05:12:50",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 339306,
        "Title": "Distribution of scores by tag",
        "Description": null,
        "QueryBody": "SELECT  Score, log(count(Score)) from Posts\nwhere Tags like '%<'+##Tag:string##+'>%'\n  and ClosedDate is null\ngroup by Score\norder by Score",
        "CreationDate": "2015-07-23 11:24:55",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 339613,
        "Title": "Find a text among all revisions in a wiki post",
        "Description": "http:\/\/meta.stackexchange.com\/questions\/261276\/provide-blame-for-tag-wiki-content",
        "QueryBody": "SELECT  creationdate\n     , rev\n     , userid as [User Link]\n     , comment\n     , text\nfrom (\n    -- first get all rows for a single post\n    -- that reflect an edit\n    -- to guarantee the revision nr is correct\n    -- as it is dependant on the row_number\n    SELECT creationdate\n         , row_number() over (order by creationdate asc) as rev\n         , userid \n         , comment\n         , text\n    from posthistory\n    where postid = ##postid:int?3607053## -- 3607053\n    -- this works for wiki, for normal posts we need more magic\n    -- because we have title and tag records as well\n    and posthistorytypeid in (2, 5) -- initial body, edit body\n) as main\nwhere text like '%' + ##searchfor:String?represents less than 2##  + '%'",
        "CreationDate": "2015-07-24 12:54:57",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 339733,
        "Title": "Links for User Answers in Specified Period",
        "Description": null,
        "QueryBody": "DECLARE  @UserID int = 401006\nSELECT \nP2.CreationDate as QuestionTime,\nP.CreationDate as AnswerTime,\nP.Id as [Post Link],\nCAST(\n      cast(DATEPART(YYYY, P.CreationDate) as varchar) + '-' + cast(DATEPART(MM, P.CreationDate) as varchar) + '-01'\n    as datetime) [Month]\nFROM Posts P \n  INNER JOIN Users U ON P.OwnerUserId = U.Id\n  INNER JOIN Posts P2 ON P2.Id = P.ParentId\nWHERE (U.Id = 1661449 or U.Id = 982840 or U.Id = 401006 or U.Id = 5123184)\nORDER BY QuestionTime DESC",
        "CreationDate": "2015-07-24 17:45:34",
        "validated": false,
        "QueryBody_Original": "DECLARE  @UserID int = 401006\nSELECT \nP2.CreationDate as QuestionTime,\nP.CreationDate as AnswerTime,\nP.Id as [Post Link],\nCAST(\n      cast(DATEPART(YYYY, P.CreationDate) as varchar) + '-' + cast(DATEPART(MM, P.CreationDate) as varchar) + '-01'\n    as datetime) [Month]\nFROM Posts P \n  INNER JOIN Users U ON P.OwnerUserId = U.Id\n  INNER JOIN Posts P2 ON P2.Id = P.ParentId\nWHERE (U.Id = 1661449 or U.Id = 982840 or U.Id = 401006 or U.Id = 5123184)\nORDER BY QuestionTime DESC"
    },
    {
        "QuerySetId": 339987,
        "Title": "Simple UNPIVOT - column conflict ",
        "Description": null,
        "QueryBody": "SELECT  * \nFROM \n\n--(SELECT 'Receive ' AS [Rec], 'Transfer' AS [Trx]) [data]\n(SELECT CONVERT(varchar(8), 'Receive') AS [Rec], 'Transfer' AS [Trx]) [data]\n\nUNPIVOT\n(\n  [Type] FOR [TypeAbbr] IN ([Rec], [Trx])\n) AS [unpvt];",
        "CreationDate": "2015-07-25 01:58:31",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 340383,
        "Title": "Get Count of Accepted Answers per User or top 20 Users with most Accepted Answers",
        "Description": null,
        "QueryBody": "DECLARE  @UserId INT  \/* = 2131512 *\/ -- Put UserId  \n\n;WITH GetCountOfAcceptedAnswersPerUser AS \n(\n      SELECT TOP 20\n          COUNT(P.AcceptedAnswerId) AS [Count Of Accepted Answers]\n          , P.OwnerUserId\n          , U.DisplayName\n      FROM\n          Posts P \n          INNER JOIN Users U ON P.OwnerUserId = U.Id\n      WHERE\n          OwnerUserId = @UserId\n          OR @UserId IS NULL\n      GROUP BY\n          P.OwnerUserId\n          , U.DisplayName\n      ORDER BY\n          [Count Of Accepted Answers] DESC\n)\n\n  SELECT * FROM GetCountOfAcceptedAnswersPerUser",
        "CreationDate": "2015-07-27 16:12:15",
        "validated": false,
        "QueryBody_Original": "DECLARE  @UserId INT  \/* = 2131512 *\/ -- Put UserId  \n\n;WITH GetCountOfAcceptedAnswersPerUser AS \n(\n      SELECT TOP 20\n          COUNT(P.AcceptedAnswerId) AS [Count Of Accepted Answers]\n          , P.OwnerUserId\n          , U.DisplayName\n      FROM\n          Posts P \n          INNER JOIN Users U ON P.OwnerUserId = U.Id\n      WHERE\n          OwnerUserId = @UserId\n          OR @UserId IS NULL\n      GROUP BY\n          P.OwnerUserId\n          , U.DisplayName\n      ORDER BY\n          [Count Of Accepted Answers] DESC\n)\n\n  SELECT * FROM GetCountOfAcceptedAnswersPerUser"
    },
    {
        "QuerySetId": 340441,
        "Title": "Activity During a Bounty Period",
        "Description": null,
        "QueryBody": "DECLARE  @Year int = ##Year##\n\nSELECT p.Id, p.PostTypeId, p.AcceptedAnswerId, p.CreationDate, p.Score,\n       p.ViewCount, p.LastEditDate, p.LastActivityDate, p.Tags, \n       p.AnswerCount, p.CommentCount, p.FavoriteCount, p.ClosedDate, \n       bs.CreationDate AS BountyCreationDate, bs.BountyAmount,\n       --DATEADD(day, 7, bs.CreationDate) AS BountyClose\n       bc.CreationDate AS BountyCloseDate\nFROM Posts p\nINNER JOIN Votes bs\n    ON p.Id = bs.PostId\n    AND bs.VoteTypeId = 8  -- BountyStart\nLEFT OUTER JOIN ( \n    SELECT COALESCE(p.ParentId, p.Id) AS id, bc.CreationDate\n      FROM Posts p\n      JOIN Votes bc\n        ON p.Id = bc.PostId\n       AND bc.VoteTypeId = 9 -- BountyClose\n) bc ON bc.id = p.id\nWHERE YEAR(bs.CreationDate) = @Year\nORDER BY p.Id",
        "CreationDate": "2016-07-12 17:07:47",
        "validated": false,
        "QueryBody_Original": "DECLARE  @Year int = ##Year##\n\nSELECT p.Id, p.PostTypeId, p.AcceptedAnswerId, p.CreationDate, p.Score,\n       p.ViewCount, p.LastEditDate, p.LastActivityDate, p.Tags, \n       p.AnswerCount, p.CommentCount, p.FavoriteCount, p.ClosedDate, \n       bs.CreationDate AS BountyCreationDate, bs.BountyAmount,\n       --DATEADD(day, 7, bs.CreationDate) AS BountyClose\n       bc.CreationDate AS BountyCloseDate\nFROM Posts p\nINNER JOIN Votes bs\n    ON p.Id = bs.PostId\n    AND bs.VoteTypeId = 8  -- BountyStart\nLEFT OUTER JOIN ( \n    SELECT COALESCE(p.ParentId, p.Id) AS id, bc.CreationDate\n      FROM Posts p\n      JOIN Votes bc\n        ON p.Id = bc.PostId\n       AND bc.VoteTypeId = 9 -- BountyClose\n) bc ON bc.id = p.id\nWHERE YEAR(bs.CreationDate) = @Year\nORDER BY p.Id"
    },
    {
        "QuerySetId": 341953,
        "Title": "Which questions have no popular tags?",
        "Description": "The proliferation of tags can mean that many questions have no popular tags.  Such questions are more difficult to find, and do not contribute to enabling the \"Generalist\" badge for smaller sites.\r\n\r\nHere, choose a threshold (i.e., 40, for top 40 tags), and this query will return all questions that have no tags that popular.  It will also provide the name of the question's most popular tag.\r\n\r\nRelated: Query 342344 (Which open or duplicate questions have no popular tags?)",
        "QueryBody": "DECLARE  @Threshold int = ##Threshold##; \n-- Threshold: Questions per tag threshold:  \"Returns all questions that have no tag with this many questions associated with it\"\n\nWITH My_Table AS\n(\nselect t.Id AS Tag_ID, t.TagName AS Tag_Name,\nt.Count AS Count, p.Id AS Post_ID, p.Title AS Post_Title,\np.PostTypeId AS Type, p.OwnerUserID AS Owner, \nmax(t.Count) over (partition by p.Id) AS Max_Count\nfrom Tags t\nINNER JOIN PostTags pt on t.Id = pt.TagId \nINNER JOIN Posts p on pt.PostId = p.Id \n)\nSELECT Tag_ID,Tag_Name,\n'site:\/\/questions\/' + CAST(Post_ID AS nvarchar) + '|' + Post_Title AS Post,\nMax_Count\nFROM My_Table\nwhere Type = 1 \n--AND Owner = 21576\nAND Max_Count = Count -- Shows each question's most popular tag\nAND Max_Count < @Threshold \nORDER BY Max_Count",
        "CreationDate": "2015-07-31 20:26:16",
        "validated": false,
        "QueryBody_Original": "DECLARE  @Threshold int = ##Threshold##; \n-- Threshold: Questions per tag threshold:  \"Returns all questions that have no tag with this many questions associated with it\"\n\nWITH My_Table AS\n(\nselect t.Id AS Tag_ID, t.TagName AS Tag_Name,\nt.Count AS Count, p.Id AS Post_ID, p.Title AS Post_Title,\np.PostTypeId AS Type, p.OwnerUserID AS Owner, \nmax(t.Count) over (partition by p.Id) AS Max_Count\nfrom Tags t\nINNER JOIN PostTags pt on t.Id = pt.TagId \nINNER JOIN Posts p on pt.PostId = p.Id \n)\nSELECT Tag_ID,Tag_Name,\n'site:\/\/questions\/' + CAST(Post_ID AS nvarchar) + '|' + Post_Title AS Post,\nMax_Count\nFROM My_Table\nwhere Type = 1 \n--AND Owner = 21576\nAND Max_Count = Count -- Shows each question's most popular tag\nAND Max_Count < @Threshold \nORDER BY Max_Count"
    },
    {
        "QuerySetId": 342014,
        "Title": "high-scoring questions whose first answer arrived late",
        "Description": null,
        "QueryBody": "SELECT  TOP ##topn:int?100##\na.Id AS [Post Link], q.Score AS [Q Score], a.Score AS [A Score],q.CreationDate AS [Q Date],\na.CreationDate AS [A Date]\nFROM Posts q CROSS APPLY\n(\n   SELECT TOP 1 Id,Score,CreationDate FROM Posts A\n   WHERE q.Id=A.ParentId AND A.PostTypeId=2\n   ORDER BY CreationDate\n) a\nWHERE DATEDIFF(MONTH,q.CreationDate,a.CreationDate)>=##months:int?24##\nAND q.PostTypeId=1 AND q.Score>=##qscore:int?30##\nORDER BY a.Score DESC",
        "CreationDate": "2015-07-31 19:06:47",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 342094,
        "Title": "Most viewed questions in tag with 0 answers",
        "Description": null,
        "QueryBody": "DECLARE  @Tag VARCHAR(25) = '##Tag##'\n\nSELECT TOP 10000\nQuestions.Id \nAS [Post Link],\nQuestions.Tags,\nQuestions.AnswerCount, \nQuestions.ViewCount,\nQuestions.ClosedDate\n\nFROM Posts AS Questions\n    INNER JOIN PostTags \n    ON PostTags.PostId = Questions.Id\n    INNER JOIN Tags\n    ON Tags.Id = PostTags.TagId\n    \nWHERE Tags.TagName = @Tag AND Questions.AnswerCount = 0\n\nORDER BY ViewCount DESC",
        "CreationDate": "2015-08-01 01:59:49",
        "validated": false,
        "QueryBody_Original": "DECLARE  @Tag VARCHAR(25) = '##Tag##'\n\nSELECT TOP 10000\nQuestions.Id \nAS [Post Link],\nQuestions.Tags,\nQuestions.AnswerCount, \nQuestions.ViewCount,\nQuestions.ClosedDate\n\nFROM Posts AS Questions\n    INNER JOIN PostTags \n    ON PostTags.PostId = Questions.Id\n    INNER JOIN Tags\n    ON Tags.Id = PostTags.TagId\n    \nWHERE Tags.TagName = @Tag AND Questions.AnswerCount = 0\n\nORDER BY ViewCount DESC"
    },
    {
        "QuerySetId": 342367,
        "Title": "Find tags in need of love",
        "Description": null,
        "QueryBody": "WITH  a high number of unanswered questions\n\nSELECT\n  TagName,\n  COUNT(Posts.Id) AS UnansweredCount,\n  Tags.Count,\n  CAST(COUNT(Posts.Id) AS FLOAT) \/ CAST(Tags.Count AS FLOAT) AS UnansweredRatio\nFROM Tags\n  INNER JOIN PostTags ON PostTags.TagId = Tags.id\n  INNER JOIN Posts ON Posts.Id = PostTags.PostId\n  INNER JOIN Posts AS Answers ON Answers.ParentId = Posts.Id\nWHERE\n      Posts.AcceptedAnswerId IS NULL\n  --AND Answers.Score > 0\nGROUP BY TagName, Tags.Count\nORDER BY COUNT(Posts.Id) DESC",
        "CreationDate": "2015-08-02 19:55:17",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 342875,
        "Title": "Users with the highest Profile views \/ Reputation ratio",
        "Description": null,
        "QueryBody": "DECLARE  @rank INT = 1\nSELECT TOP 256\n  ROW_NUMBER() OVER (ORDER BY Users.Id DESC),\n  Users.Id AS [User Link],\n  Users.Reputation,\n  Users.Views,\n  CAST(Users.Views AS float) \/ Users.Reputation AS Ratio\nFROM\n  Users\nWhere\n  Users.Reputation > 1 AND\n  Users.Views > 10000\nORDER BY\n  Ratio DESC",
        "CreationDate": "2015-10-07 10:17:23",
        "validated": false,
        "QueryBody_Original": "DECLARE  @rank INT = 1\nSELECT TOP 256\n  ROW_NUMBER() OVER (ORDER BY Users.Id DESC),\n  Users.Id AS [User Link],\n  Users.Reputation,\n  Users.Views,\n  CAST(Users.Views AS float) \/ Users.Reputation AS Ratio\nFROM\n  Users\nWhere\n  Users.Reputation > 1 AND\n  Users.Views > 10000\nORDER BY\n  Ratio DESC"
    },
    {
        "QuerySetId": 343408,
        "Title": "Unanswered Datastore Questions Last 30 Days",
        "Description": null,
        "QueryBody": "SELECT  p.CreationDate, t.TagName, p.Id AS [Post Link]\n  from Posts p \n  join PostTags pt on pt.PostId = p.Id\n  join Tags t on t.Id = pt.TagId\n  where TagName in \n  (\n    ##Tag1:string?google-cloud-datastore##,\n    ##Tag2:string?gae-datastore##\n  ) \n  and p.CreationDate >= DATEADD(day, -30, convert(date, GETDATE()))\n  and p.AnswerCount = 0\norder by CreationDate asc, TagName asc",
        "CreationDate": "2015-08-04 21:52:12",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 344219,
        "Title": "Users with most nice\/good\/great\/guru\/enlightened answers",
        "Description": "Users with counts of nice\/good\/great answer badges and sorted by total\r\n",
        "QueryBody": "WITH  most nice\/good\/great answers\n-- Users WITH counts of nice\/good\/great answer badges and sorted by total\n\nWITH AnswerBadges AS (\n  SELECT\n    UserId,\n    SUM((CASE WHEN Name='Enlightened' THEN 1 ELSE 0 END)) AS Enlighteneds,\n    SUM((CASE WHEN Name='Guru' THEN 1 ELSE 0 END)) AS Gurus,\n    SUM((CASE WHEN Name='Nice Answer' THEN 1 ELSE 0 END)) AS NiceAnswers,\n    SUM((CASE WHEN Name='Good Answer' THEN 1 ELSE 0 END)) AS GoodAnswers,\n    SUM((CASE WHEN Name='Great Answer' THEN 1 ELSE 0 END)) AS GreatAnswers,\n    COUNT(*) AS Total\n  FROM\n    Badges\n  GROUP BY\n    UserId\n)\n\nSELECT TOP ##MAXUSERS?100##\n  UserId AS [User Link],\n  Enlighteneds,\n  Gurus,\n  NiceAnswers,\n  GoodAnswers,\n  GreatAnswers,\n  Total\nFROM AnswerBadges\nORDER BY Total DESC",
        "CreationDate": "2016-01-03 09:30:36",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 344344,
        "Title": "How many helpful answers have I posted?",
        "Description": "How many of my answers were either accepted or have score > 0?",
        "QueryBody": "DECLARE  @UserId int = ##UserId##\n\nSELECT \na.id,\nsum(case when a.PostTypeId = 2 then 1 end) AS Accepted,\nsum(case when a.PostTypeId = 3 then 1 end) AS 'score>0',\nsum(case when a.PostTypeId = 4 then 1 end) AS 'acceptedorscore>0'\nFROM Posts q INNER JOIN\nPosts a ON q.AcceptedAnswerId = a.Id\nWHERE a.OwnerUserId = @UserId\ngroup by a.id, a.PostTypeId",
        "CreationDate": "2015-08-05 23:23:34",
        "validated": false,
        "QueryBody_Original": "DECLARE  @UserId int = ##UserId##\n\nSELECT \na.id,\nsum(case when a.PostTypeId = 2 then 1 end) AS Accepted,\nsum(case when a.PostTypeId = 3 then 1 end) AS 'score>0',\nsum(case when a.PostTypeId = 4 then 1 end) AS 'acceptedorscore>0'\nFROM Posts q INNER JOIN\nPosts a ON q.AcceptedAnswerId = a.Id\nWHERE a.OwnerUserId = @UserId\ngroup by a.id, a.PostTypeId"
    },
    {
        "QuerySetId": 344781,
        "Title": "Many answers by the same user on the same question",
        "Description": "A hard-to-fix bug is that deleted users are counted as the same user",
        "QueryBody": "SELECT  TOP ##topn:int?50## MIN(a.Id) as [Post Link],a.OwnerUserId AS [User Link],MAX(a.OwnerDisplayName),COUNT(*) AS COUNT\nFROM Posts q INNER JOIN Posts a ON q.Id=a.ParentId\nWHERE q.PostTypeId=1 AND a.PostTypeId=2 AND (q.ClosedDate IS NULL OR ##excludeclosed:int?1##=0)\nAND (q.CommunityOwnedDate IS NULL OR ##excludewiki:int?1##=0)\nGROUP BY a.OwnerUserid,q.Id\nORDER BY COUNT(*) DESC",
        "CreationDate": "2015-08-07 10:02:53",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 345072,
        "Title": "What is my reputation percentile?",
        "Description": "Calculates the percentage of users on StackOverflow that have less reputation than you.",
        "QueryBody": "DECLARE  @UserId int = ##UserId:int##\nDECLARE @Include1RepUsers bit = ##Include1RepUsers?0##\n\nDECLARE @Reputation int = (SELECT Reputation FROM Users\n                           WHERE Id = @UserId)\n\nDECLARE @NumBelow float = (SELECT COUNT(*) AS NumBelow\n                           FROM Users\n                           WHERE Reputation < @Reputation\n                           AND (@Include1RepUsers = 1 OR Reputation > 1))\n\nDECLARE @NumUsers int = (SELECT COUNT(*) FROM Users\n                         WHERE (@Include1RepUsers = 1 OR Reputation > 1))\n\nSELECT @Reputation                 AS Reputation,\n       @NumUsers - @NumBelow       AS NumAbove,\n       @NumBelow                   AS NumBelow,\n       @NumUsers                   AS TotalUsers,\n       (@NumBelow\/@NumUsers * 100) AS Percentile",
        "CreationDate": "2017-12-19 23:28:40",
        "validated": false,
        "QueryBody_Original": "DECLARE  @UserId int = ##UserId:int##\nDECLARE @Include1RepUsers bit = ##Include1RepUsers?0##\n\nDECLARE @Reputation int = (SELECT Reputation FROM Users\n                           WHERE Id = @UserId)\n\nDECLARE @NumBelow float = (SELECT COUNT(*) AS NumBelow\n                           FROM Users\n                           WHERE Reputation < @Reputation\n                           AND (@Include1RepUsers = 1 OR Reputation > 1))\n\nDECLARE @NumUsers int = (SELECT COUNT(*) FROM Users\n                         WHERE (@Include1RepUsers = 1 OR Reputation > 1))\n\nSELECT @Reputation                 AS Reputation,\n       @NumUsers - @NumBelow       AS NumAbove,\n       @NumBelow                   AS NumBelow,\n       @NumUsers                   AS TotalUsers,\n       (@NumBelow\/@NumUsers * 100) AS Percentile"
    },
    {
        "QuerySetId": 345799,
        "Title": "Answers which have beaten Richard",
        "Description": null,
        "QueryBody": "SELECT \n    ParentId as [Post Link],\n    Id as \"Post Link\",\n    PostTypeId as \"Post Type\",\n    OwnerUserId as \"User Link\",\n    Score as \"Score\"\nfrom Posts as P\nwhere\n    ParentId in (\n        SELECT\n            ParentId as \"Post Link\"\n        from Posts as TargetP\n        where\n            OwnerUserId = ##TargetUserId##\n            and P.Score > TargetP.Score\n    )\ngroup by ParentId, Id, PostTypeId, OwnerUserId, Score",
        "CreationDate": "2015-08-10 02:26:56",
        "validated": false,
        "QueryBody_Original": "SELECT \n    ParentId as [Post Link],\n    Id as \"Post Link\",\n    PostTypeId as \"Post Type\",\n    OwnerUserId as \"User Link\",\n    Score as \"Score\"\nfrom Posts as P\nwhere\n    ParentId in (\n        SELECT\n            ParentId as \"Post Link\"\n        from Posts as TargetP\n        where\n            OwnerUserId = ##TargetUserId##\n            and P.Score > TargetP.Score\n    )\ngroup by ParentId, Id, PostTypeId, OwnerUserId, Score"
    },
    {
        "QuerySetId": 346142,
        "Title": "Sort your highly voted comments",
        "Description": null,
        "QueryBody": "DECLARE  @user INT = ##UserID:int##\nDECLARE @num  INT = ##TopN:int##\n\nSELECT TOP (@num) C.Id AS [Comment Link],\n                  C.Score AS [Comment Score] ,\n                  P.Score AS [Post Score]\nFROM Comments AS C\nINNER JOIN Posts AS P ON P.Id = C.PostId\nWHERE C.UserId = @user \n  AND C.Score >= 1\nORDER BY [Comment Score] DESC",
        "CreationDate": "2015-08-10 22:05:01",
        "validated": false,
        "QueryBody_Original": "DECLARE  @user INT = ##UserID:int##\nDECLARE @num  INT = ##TopN:int##\n\nSELECT TOP (@num) C.Id AS [Comment Link],\n                  C.Score AS [Comment Score] ,\n                  P.Score AS [Post Score]\nFROM Comments AS C\nINNER JOIN Posts AS P ON P.Id = C.PostId\nWHERE C.UserId = @user \n  AND C.Score >= 1\nORDER BY [Comment Score] DESC"
    },
    {
        "QuerySetId": 346881,
        "Title": "Overall statistics of questions with specific tag",
        "Description": null,
        "QueryBody": "DECLARE  @Pattern VARCHAR(25) = ##TagPattern:string?%identification%##;\nDECLARE @MaxVote INT = ##MaximumScore:int?1##;\n\nWITH Questions AS\n(\n  SELECT *, \n    (SELECT sum(A.Score) FROM Posts A WHERE A.ParentId = Q.Id) AS [AnswerScore], \n    (CASE WHEN Q.AcceptedAnswerId IS NOT NULL OR EXISTS \n      (SELECT * FROM Posts A WHERE A.ParentId = Q.Id AND A.Score > 0) \n     THEN 1 ELSE 0 END) AS [Answered]\n  FROM\n    Posts AS Q\n  WHERE\n    Q.PostTypeId = 1 AND\n    Q.Score <= @MaxVote\n)\n\nSELECT\n  'All' AS [Questions], \n  COUNT(Id)\nFROM Questions",
        "CreationDate": "2015-11-12 22:16:11",
        "validated": false,
        "QueryBody_Original": "DECLARE  @Pattern VARCHAR(25) = ##TagPattern:string?%identification%##;\nDECLARE @MaxVote INT = ##MaximumScore:int?1##;\n\nWITH Questions AS\n(\n  SELECT *, \n    (SELECT sum(A.Score) FROM Posts A WHERE A.ParentId = Q.Id) AS [AnswerScore], \n    (CASE WHEN Q.AcceptedAnswerId IS NOT NULL OR EXISTS \n      (SELECT * FROM Posts A WHERE A.ParentId = Q.Id AND A.Score > 0) \n     THEN 1 ELSE 0 END) AS [Answered]\n  FROM\n    Posts AS Q\n  WHERE\n    Q.PostTypeId = 1 AND\n    Q.Score <= @MaxVote\n)\n\nSELECT\n  'All' AS [Questions], \n  COUNT(Id)\nFROM Questions"
    },
    {
        "QuerySetId": 348073,
        "Title": "Question-score to answer-score ratio vs tags",
        "Description": null,
        "QueryBody": "DECLARE  @user INT = ##UserID:int##\n          \nSELECT TOP 20 \n    TagName,\n    SUM(A.Score) AS AnswerScore,\n    SUM(Q.Score) AS QuestionScore,\n    CAST(CAST(SUM(A.Score) AS FLOAT) \/ \n         CAST(SUM(Q.Score) AS FLOAT) AS DECIMAL(10,2)) AS AQRatio\nFROM Tags\n    INNER JOIN PostTags ON PostTags.TagId = Tags.Id\n    INNER JOIN Posts A ON A.ParentId = PostTags.PostId\n    INNER JOIN Posts Q ON Q.Id = A.ParentId\nWHERE A.CommunityOwnedDate IS NULL \n    AND A.OwnerUserId = @user\n    AND Q.Score > 0\n\nGROUP BY TagName \nORDER BY AQRatio DESC",
        "CreationDate": "2015-08-12 01:15:13",
        "validated": false,
        "QueryBody_Original": "DECLARE  @user INT = ##UserID:int##\n          \nSELECT TOP 20 \n    TagName,\n    SUM(A.Score) AS AnswerScore,\n    SUM(Q.Score) AS QuestionScore,\n    CAST(CAST(SUM(A.Score) AS FLOAT) \/ \n         CAST(SUM(Q.Score) AS FLOAT) AS DECIMAL(10,2)) AS AQRatio\nFROM Tags\n    INNER JOIN PostTags ON PostTags.TagId = Tags.Id\n    INNER JOIN Posts A ON A.ParentId = PostTags.PostId\n    INNER JOIN Posts Q ON Q.Id = A.ParentId\nWHERE A.CommunityOwnedDate IS NULL \n    AND A.OwnerUserId = @user\n    AND Q.Score > 0\n\nGROUP BY TagName \nORDER BY AQRatio DESC"
    },
    {
        "QuerySetId": 348827,
        "Title": "Users' first questions by specific tag",
        "Description": null,
        "QueryBody": "DECLARE  @Pattern VARCHAR(25) = ##TagPattern:string?%identify-this-%##;\n\nWITH FirstQuestions AS\n(\n  SELECT *\n  FROM Posts Q\n  WHERE Q.PostTypeId = 1 AND \n    NOT EXISTS (SELECT * FROM Posts P WHERE P.OwnerUserId = Q.OwnerUserId AND \n      P.PostTypeId = 1 And P.CreationDate < Q.CreationDate)\n),\nUserQuestions AS\n(\n  SELECT U.*, \n    (CASE WHEN Q.Tags LIKE @Pattern THEN 1 ELSE 0 END) AS [IsID] \n  FROM Users U INNER JOIN FirstQuestions Q ON Q.OwnerUserId = U.Id\n)\n\nSELECT count(*) AS [All], sum(IsID) AS [ID] FROM UserQuestions",
        "CreationDate": "2015-08-12 19:16:56",
        "validated": false,
        "QueryBody_Original": "DECLARE  @Pattern VARCHAR(25) = ##TagPattern:string?%identify-this-%##;\n\nWITH FirstQuestions AS\n(\n  SELECT *\n  FROM Posts Q\n  WHERE Q.PostTypeId = 1 AND \n    NOT EXISTS (SELECT * FROM Posts P WHERE P.OwnerUserId = Q.OwnerUserId AND \n      P.PostTypeId = 1 And P.CreationDate < Q.CreationDate)\n),\nUserQuestions AS\n(\n  SELECT U.*, \n    (CASE WHEN Q.Tags LIKE @Pattern THEN 1 ELSE 0 END) AS [IsID] \n  FROM Users U INNER JOIN FirstQuestions Q ON Q.OwnerUserId = U.Id\n)\n\nSELECT count(*) AS [All], sum(IsID) AS [ID] FROM UserQuestions"
    },
    {
        "QuerySetId": 348831,
        "Title": "Users with at least X reputation",
        "Description": null,
        "QueryBody": "SELECT  count(*)\nfrom Users\nwhere Reputation >= ##X?30000##",
        "CreationDate": "2015-08-12 19:38:12",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 349587,
        "Title": "Access time of specific tag users",
        "Description": null,
        "QueryBody": "DECLARE  @Pattern VARCHAR(25) = ##TagPattern:string?%identify-this-%##;\n\nWITH Questions AS\n(\n  SELECT *,\n    (CASE WHEN EXISTS (SELECT * FROM Posts P\n      WHERE P.OwnerUserId = Q.OwnerUserId AND \n        P.PostTypeId = 1 AND P.CreationDate < Q.CreationDate) \n     THEN 0 ELSE 1 END) AS [First]\n  FROM Posts Q\n  WHERE Q.PostTypeId = 1 AND Q.Tags LIKE @Pattern\n),\nIDUsers AS\n(\n  SELECT U.*, Q.CreationDate AS [QuestionDate]\n  FROM \n    Users U \n    INNER JOIN Questions Q ON Q.OwnerUserId = U.Id AND Q.First = 1\n)\n\nSELECT U.Id, U.QuestionDate FROM IDUsers U ORDER BY U.Id",
        "CreationDate": "2015-08-13 17:33:45",
        "validated": false,
        "QueryBody_Original": "DECLARE  @Pattern VARCHAR(25) = ##TagPattern:string?%identify-this-%##;\n\nWITH Questions AS\n(\n  SELECT *,\n    (CASE WHEN EXISTS (SELECT * FROM Posts P\n      WHERE P.OwnerUserId = Q.OwnerUserId AND \n        P.PostTypeId = 1 AND P.CreationDate < Q.CreationDate) \n     THEN 0 ELSE 1 END) AS [First]\n  FROM Posts Q\n  WHERE Q.PostTypeId = 1 AND Q.Tags LIKE @Pattern\n),\nIDUsers AS\n(\n  SELECT U.*, Q.CreationDate AS [QuestionDate]\n  FROM \n    Users U \n    INNER JOIN Questions Q ON Q.OwnerUserId = U.Id AND Q.First = 1\n)\n\nSELECT U.Id, U.QuestionDate FROM IDUsers U ORDER BY U.Id"
    },
    {
        "QuerySetId": 349944,
        "Title": "Get questions you've answered with your answers",
        "Description": null,
        "QueryBody": "SELECT  \n  q.Score as [QScore],\n  q.Id as [Post Link],\n  q.Title,\n  q.Tags,\n  q.Body as [Question Body],\n  q.OwnerUserId as [Questioner],\n  a.Score as [AScore],\n  a.Body as [Answer Body],\n  a.CreationDate as [AnswerDate]\nFROM\n  Posts as q\n    Join Posts as a\n      on a.ParentId = q.Id\nWHERE\n  a.OwnerUserId=##UserId##\n  --q.Id in (SELECT ParentId FROM Posts \n    --WHERE OwnerUserId=##UserId## and PostTypeId=2)",
        "CreationDate": "2015-08-14 13:16:12",
        "validated": false,
        "QueryBody_Original": "SELECT  \n  q.Score as [QScore],\n  q.Id as [Post Link],\n  q.Title,\n  q.Tags,\n  q.Body as [Question Body],\n  q.OwnerUserId as [Questioner],\n  a.Score as [AScore],\n  a.Body as [Answer Body],\n  a.CreationDate as [AnswerDate]\nFROM\n  Posts as q\n    Join Posts as a\n      on a.ParentId = q.Id\nWHERE\n  a.OwnerUserId=##UserId##\n  --q.Id in (SELECT ParentId FROM Posts \n    --WHERE OwnerUserId=##UserId## and PostTypeId=2)"
    },
    {
        "QuerySetId": 350098,
        "Title": "Questions with bounties from 3 or more users",
        "Description": null,
        "QueryBody": "SELECT  PostId as [Post Link], count(distinct UserId)\nfrom Votes\n     join VoteTypes vt on VoteTypeId = vt.Id\nwhere Name = 'BountyStart'\ngroup by PostId\nhaving count(distinct UserId) >= ##threshold?3##\norder by count(distinct UserId) desc",
        "CreationDate": "2015-08-14 20:57:57",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 350959,
        "Title": "Users rep versus downvote ratio",
        "Description": null,
        "QueryBody": "WITH  rep > 10\n--  and downvote count > 5 (the Id > 0 removes Community \"user\")\n\nSELECT \n--  Id AS [User Link],\n  LOG10(Reputation) AS Rep, \n  CAST(CAST(UpVotes AS FLOAT)\/CAST(DownVotes AS FLOAT) AS NUMERIC(10,2)) AS Ratio\nFROM Users\nWHERE DownVotes >= 1 AND\n      UpVotes + DownVotes > 1 AND\n      Reputation > 10 AND\n      Id > 0\nORDER BY [Ratio] DESC",
        "CreationDate": "2015-08-18 17:46:59",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 351127,
        "Title": "Number of questions with specific tag",
        "Description": null,
        "QueryBody": "DECLARE  @BeginDate DATETIME = (SELECT min(CreationDate) FROM PostHistory);\nDECLARE @EndDate DATETIME = (SELECT max(CreationDate) FROM PostHistory);\nDECLARE @Pattern VARCHAR(25) = ##TagPattern:string?%identify-this-%##;\n\nWITH Dates AS\n(\n  SELECT @BeginDate AS [DateValue]\n  UNION ALL\n  SELECT DateValue + 1 FROM Dates WHERE DateValue + 1 < @EndDate\n)\n\nSELECT D.DateValue AS [Date],\n  (SELECT count(*) FROM Posts P WHERE P.PostTypeId = 1 AND \n    P.CreationDate < D.DateValue) AS [Total],\n  (SELECT count(*) FROM Posts P WHERE P.Tags LIKE @Pattern AND \n    P.CreationDate < D.DateValue) AS [ID],\n  (SELECT count(*) FROM Posts P WHERE P.Tags NOT LIKE @Pattern AND \n    P.CreationDate < D.DateValue) AS [Non-ID]\nFROM\n  Dates AS D\nORDER BY D.DateValue ASC\nOPTION (MAXRECURSION 0)",
        "CreationDate": "2015-08-18 15:42:01",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 351215,
        "Title": "Downvoted posts with no comments",
        "Description": null,
        "QueryBody": "WITH  at least one downvote but no comments\n\nSELECT TOP 100\np.Id AS [Post Link],p.CommentCount\nFROM Posts p\nLEFT JOIN Votes v ON v.PostId = p.Id AND v.voteTypeId = 3\nWHERE \nisnull(p.CommentCount,0) = 0",
        "CreationDate": "2015-08-18 05:46:12",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 351445,
        "Title": "My Close Votes for Tag X",
        "Description": null,
        "QueryBody": "SELECT \n p.Id as [Post Link], c.CreationDate, Tags\nFROM Comments as c\nJOIN Posts p on c.PostId = p.Id\nWHERE c.Text like '%voting to close%'\nAND (Tags like '%<email>%' OR Tags like '%<spam>%')\nAND c.UserId = ##UserId##;",
        "CreationDate": "2015-08-19 20:55:34",
        "validated": false,
        "QueryBody_Original": "SELECT \n p.Id as [Post Link], c.CreationDate, Tags\nFROM Comments as c\nJOIN Posts p on c.PostId = p.Id\nWHERE c.Text like '%voting to close%'\nAND (Tags like '%<email>%' OR Tags like '%<spam>%')\nAND c.UserId = ##UserId##;"
    },
    {
        "QuerySetId": 351469,
        "Title": "Top Answerers by Accepted Percentage",
        "Description": null,
        "QueryBody": "DECLARE  @N INT = ##TopN##\n\nSELECT TOP (@N) \n    A.OwnerUserId AS [User Link],\n    (CAST(COUNT(A.Id) AS FLOAT) \/ \n     (SELECT COUNT(*) FROM Posts WHERE OwnerUserId = A.OwnerUserId AND \n                                       PostTypeId = 2) * 100) AS AcceptedPercent\nFROM Posts A\n    INNER JOIN Posts Q ON Q.AcceptedAnswerId = A.Id\nWHERE A.PostTypeId = 2 AND\n      (SELECT COUNT(*) FROM Posts WHERE PostTypeId = 2 AND \n                                 OwnerUserId = A.OwnerUserId) > 100\nGROUP BY A.OwnerUserId\nORDER BY [AcceptedPercent] DESC",
        "CreationDate": "2015-08-18 18:30:03",
        "validated": false,
        "QueryBody_Original": "DECLARE  @N INT = ##TopN##\n\nSELECT TOP (@N) \n    A.OwnerUserId AS [User Link],\n    (CAST(COUNT(A.Id) AS FLOAT) \/ \n     (SELECT COUNT(*) FROM Posts WHERE OwnerUserId = A.OwnerUserId AND \n                                       PostTypeId = 2) * 100) AS AcceptedPercent\nFROM Posts A\n    INNER JOIN Posts Q ON Q.AcceptedAnswerId = A.Id\nWHERE A.PostTypeId = 2 AND\n      (SELECT COUNT(*) FROM Posts WHERE PostTypeId = 2 AND \n                                 OwnerUserId = A.OwnerUserId) > 100\nGROUP BY A.OwnerUserId\nORDER BY [AcceptedPercent] DESC"
    },
    {
        "QuerySetId": 351591,
        "Title": "Average Q & A Scores",
        "Description": null,
        "QueryBody": "DECLARE  @UserId INT = ##UserID##\n\nSELECT \n    AVG(CAST(A.Score AS FLOAT)) AS [Average Answer Score],\n    AVG(CAST(Q.Score AS FLOAT)) AS [Average Question Score]\nFROM Posts A JOIN Posts Q ON Q.OwnerUserId = A.OwnerUserId\nWHERE A.OwnerUserId = @UserId AND \n      A.PostTypeId = 2 AND\n      Q.PostTypeId = 1",
        "CreationDate": "2015-08-18 22:51:13",
        "validated": false,
        "QueryBody_Original": "DECLARE  @UserId INT = ##UserID##\n\nSELECT \n    AVG(CAST(A.Score AS FLOAT)) AS [Average Answer Score],\n    AVG(CAST(Q.Score AS FLOAT)) AS [Average Question Score]\nFROM Posts A JOIN Posts Q ON Q.OwnerUserId = A.OwnerUserId\nWHERE A.OwnerUserId = @UserId AND \n      A.PostTypeId = 2 AND\n      Q.PostTypeId = 1"
    },
    {
        "QuerySetId": 351713,
        "Title": "First posts with specific tag",
        "Description": null,
        "QueryBody": "DECLARE  @StartTime DATETIME = convert(DATETIME, '##StartTime?2012\/01\/01 00:00:00##')\nDECLARE @Pattern VARCHAR(25) = ##TagPattern:string?%identify-this-%##;\n\nWITH FirstPosts AS\n(\n  SELECT P.*, \n    (CASE WHEN P.PostTypeId = 1 THEN 1 ELSE 0 END) AS [IsQuestion], \n    (CASE WHEN P.Tags LIKE @Pattern THEN 1 ELSE 0 END) AS [IsId]\n  FROM Users U INNER JOIN Posts P ON \n    P.OwnerUserId = U.Id AND (P.PostTypeId = 1 OR P.PostTypeId = 2) AND\n    NOT EXISTS (SELECT * FROM Posts Q WHERE Q.OwnerUserId = P.OwnerUserId AND \n      (Q.PostTypeId = 1 OR Q.PostTypeId = 2) AND Q.CreationDate < P.CreationDate)\n  WHERE U.CreationDate > @StartTime\n)\n\nSELECT count(*) AS [All], \n  sum(IsQuestion) AS [Questions], \n  sum(1-IsQuestion) AS [Answers], \n  sum(IsID) AS [ID], \n  sum(1-IsID) AS [Non-ID]\nFROM FirstPosts",
        "CreationDate": "2015-08-19 04:35:16",
        "validated": false,
        "QueryBody_Original": "DECLARE  @StartTime DATETIME = convert(DATETIME, '##StartTime?2012\/01\/01 00:00:00##')\nDECLARE @Pattern VARCHAR(25) = ##TagPattern:string?%identify-this-%##;\n\nWITH FirstPosts AS\n(\n  SELECT P.*, \n    (CASE WHEN P.PostTypeId = 1 THEN 1 ELSE 0 END) AS [IsQuestion], \n    (CASE WHEN P.Tags LIKE @Pattern THEN 1 ELSE 0 END) AS [IsId]\n  FROM Users U INNER JOIN Posts P ON \n    P.OwnerUserId = U.Id AND (P.PostTypeId = 1 OR P.PostTypeId = 2) AND\n    NOT EXISTS (SELECT * FROM Posts Q WHERE Q.OwnerUserId = P.OwnerUserId AND \n      (Q.PostTypeId = 1 OR Q.PostTypeId = 2) AND Q.CreationDate < P.CreationDate)\n  WHERE U.CreationDate > @StartTime\n)\n\nSELECT count(*) AS [All], \n  sum(IsQuestion) AS [Questions], \n  sum(1-IsQuestion) AS [Answers], \n  sum(IsID) AS [ID], \n  sum(1-IsID) AS [Non-ID]\nFROM FirstPosts"
    },
    {
        "QuerySetId": 352355,
        "Title": "How many questions did SO have X months after its creation?",
        "Description": "Note that the public beta started on September 15th, 2008",
        "QueryBody": "SELECT  COUNT(*) \nFROM Posts\nWHERE PostTypeId=1\nAND CreationDate < DATEADD(month, ##Months##, '2008-08-01')",
        "CreationDate": "2020-02-01 04:37:59",
        "validated": false,
        "QueryBody_Original": "SELECT  COUNT(*) \nFROM Posts\nWHERE PostTypeId=1\nAND CreationDate < DATEADD(month, ##Months##, '2008-08-01')"
    },
    {
        "QuerySetId": 352435,
        "Title": "All Post History of a post",
        "Description": null,
        "QueryBody": "SELECT  * from PostHistory where PostId = ##postid##\norder by CreationDate desc",
        "CreationDate": "2018-09-03 16:38:20",
        "validated": false,
        "QueryBody_Original": "SELECT  * from PostHistory where PostId = ##postid##\norder by CreationDate desc"
    },
    {
        "QuerySetId": 352479,
        "Title": "Best Time for an Answer",
        "Description": null,
        "QueryBody": "DECLARE  @MaxTimeDiff int = ##MaxTimeDiff:int?1440##\nDECLARE @YearsBack int = 1;\n\nWITH tmp AS(\n  SELECT TimeDiff = DATEDIFF(minute, q.CreationDate, a.CreationDate),\n         Period = ROUND((CAST(DATEPART(\"weekday\", q.CreationDate) AS numeric) +\n                         CAST(DATEPART(\"hour\", q.CreationDate) AS numeric) \/ 24), 2)\n  FROM Posts q\n     LEFT OUTER JOIN Posts a ON q.AcceptedAnswerId = a.Id\n     WHERE q.AcceptedAnswerId > 0 AND \n           q.CreationDate > DATEADD(\"year\", -@YearsBack, CURRENT_TIMESTAMP)\n  )\n  SELECT Period,\n         ROUND(AVG(CAST(TimeDiff AS FLOAT)), 2) AS [Average time-to-answer, minutes, UTC (GMT)]\nFROM tmp\n   WHERE ABS(TimeDiff) < @MaxTimeDiff\n   GROUP BY Period\n   ORDER BY Period",
        "CreationDate": "2015-08-20 07:26:03",
        "validated": false,
        "QueryBody_Original": "DECLARE  @MaxTimeDiff int = ##MaxTimeDiff:int?1440##\nDECLARE @YearsBack int = 1;\n\nWITH tmp AS(\n  SELECT TimeDiff = DATEDIFF(minute, q.CreationDate, a.CreationDate),\n         Period = ROUND((CAST(DATEPART(\"weekday\", q.CreationDate) AS numeric) +\n                         CAST(DATEPART(\"hour\", q.CreationDate) AS numeric) \/ 24), 2)\n  FROM Posts q\n     LEFT OUTER JOIN Posts a ON q.AcceptedAnswerId = a.Id\n     WHERE q.AcceptedAnswerId > 0 AND \n           q.CreationDate > DATEADD(\"year\", -@YearsBack, CURRENT_TIMESTAMP)\n  )\n  SELECT Period,\n         ROUND(AVG(CAST(TimeDiff AS FLOAT)), 2) AS [Average time-to-answer, minutes, UTC (GMT)]\nFROM tmp\n   WHERE ABS(TimeDiff) < @MaxTimeDiff\n   GROUP BY Period\n   ORDER BY Period"
    },
    {
        "QuerySetId": 352794,
        "Title": "Percentage of Rep from Accepts",
        "Description": null,
        "QueryBody": "DECLARE  @user INT = ##UserId:int##\n\nSELECT U.Id AS [User Link],\n       (SELECT COUNT(*) FROM Posts WHERE OwnerUserId = @user AND PostTypeId = 2) AS [Total Answers],\n       COUNT(*) AS [Accepted Answers],\n       U.Reputation AS [User Rep],\n       (15 * COUNT(*)) AS [Accepted Rep],\n       CAST( 100.0*(15.0*COUNT(*) \/ CAST(U.Reputation AS FLOAT)) AS NUMERIC(10,3)) AS [Accepted Rep %]\nFROM Posts Q\n   INNER JOIN Posts A ON A.ParentId = Q.Id\n   INNER JOIN Users U ON U.Id = @user\n   WHERE A.PostTypeId = 2 AND\n         A.OwnerUserId = @user AND\n         Q.AcceptedAnswerId = A.Id\n   GROUP BY U.Id, U.Reputation",
        "CreationDate": "2015-08-20 18:08:10",
        "validated": false,
        "QueryBody_Original": "DECLARE  @user INT = ##UserId:int##\n\nSELECT U.Id AS [User Link],\n       (SELECT COUNT(*) FROM Posts WHERE OwnerUserId = @user AND PostTypeId = 2) AS [Total Answers],\n       COUNT(*) AS [Accepted Answers],\n       U.Reputation AS [User Rep],\n       (15 * COUNT(*)) AS [Accepted Rep],\n       CAST( 100.0*(15.0*COUNT(*) \/ CAST(U.Reputation AS FLOAT)) AS NUMERIC(10,3)) AS [Accepted Rep %]\nFROM Posts Q\n   INNER JOIN Posts A ON A.ParentId = Q.Id\n   INNER JOIN Users U ON U.Id = @user\n   WHERE A.PostTypeId = 2 AND\n         A.OwnerUserId = @user AND\n         Q.AcceptedAnswerId = A.Id\n   GROUP BY U.Id, U.Reputation"
    },
    {
        "QuerySetId": 352967,
        "Title": "Highest Accepted Percentage of Rep",
        "Description": null,
        "QueryBody": "DECLARE  @N INT = ##TopN:int?50##\n\nSELECT TOP (@N) U.Id AS [User Link],\n                (SELECT COUNT(*) FROM Posts WHERE OwnerUserId = U.Id AND PostTypeId = 2) AS [Total Answers],\n                COUNT(*) AS [Accepted Answers],\n                U.Reputation AS [User Rep],\n                (15 * COUNT(*)) AS [Accepted Rep],\n                CAST( 100.0*(15.0*COUNT(*) \/ CAST(U.Reputation AS FLOAT)) AS NUMERIC(10,3)) AS [Accepted Rep %]\nFROM Posts Q\n   INNER JOIN Posts A ON A.ParentId = Q.Id\n   INNER JOIN Users U ON U.Id = A.OwnerUserId\n   WHERE A.PostTypeId = 2 AND            -- answers only\n         Q.AcceptedAnswerId = A.Id AND   -- only accepted answers\n         U.Reputation > 1                -- ignores suspended users\n   GROUP BY U.Id, U.Reputation\n   ORDER BY [Accepted Rep %] DESC",
        "CreationDate": "2015-08-20 22:51:03",
        "validated": false,
        "QueryBody_Original": "DECLARE  @N INT = ##TopN:int?50##\n\nSELECT TOP (@N) U.Id AS [User Link],\n                (SELECT COUNT(*) FROM Posts WHERE OwnerUserId = U.Id AND PostTypeId = 2) AS [Total Answers],\n                COUNT(*) AS [Accepted Answers],\n                U.Reputation AS [User Rep],\n                (15 * COUNT(*)) AS [Accepted Rep],\n                CAST( 100.0*(15.0*COUNT(*) \/ CAST(U.Reputation AS FLOAT)) AS NUMERIC(10,3)) AS [Accepted Rep %]\nFROM Posts Q\n   INNER JOIN Posts A ON A.ParentId = Q.Id\n   INNER JOIN Users U ON U.Id = A.OwnerUserId\n   WHERE A.PostTypeId = 2 AND            -- answers only\n         Q.AcceptedAnswerId = A.Id AND   -- only accepted answers\n         U.Reputation > 1                -- ignores suspended users\n   GROUP BY U.Id, U.Reputation\n   ORDER BY [Accepted Rep %] DESC"
    },
    {
        "QuerySetId": 353405,
        "Title": "How many upvotes do I have for each tag (by User Name)?",
        "Description": "how long before I get tag badges?\r\n",
        "QueryBody": "DECLARE  @UserName nvarchar (50) = '##UserName##'\n\nSELECT --TOP 20 \n    TagName, \n    COUNT(*) AS UpVotes \nFROM Tags\n    INNER JOIN PostTags ON PostTags.TagId = Tags.id\n    INNER JOIN Posts ON Posts.ParentId = PostTags.PostId \n    INNER JOIN Users ON Posts.OwnerUserId = Users.Id\n    INNER JOIN Votes ON Votes.PostId = Posts.Id and VoteTypeId = 2\nWHERE \n    Users.DisplayName = @UserName\nGROUP BY TagName \nORDER BY UpVotes DESC",
        "CreationDate": "2015-08-21 18:02:37",
        "validated": false,
        "QueryBody_Original": "DECLARE  @UserName nvarchar (50) = '##UserName##'\n\nSELECT --TOP 20 \n    TagName, \n    COUNT(*) AS UpVotes \nFROM Tags\n    INNER JOIN PostTags ON PostTags.TagId = Tags.id\n    INNER JOIN Posts ON Posts.ParentId = PostTags.PostId \n    INNER JOIN Users ON Posts.OwnerUserId = Users.Id\n    INNER JOIN Votes ON Votes.PostId = Posts.Id and VoteTypeId = 2\nWHERE \n    Users.DisplayName = @UserName\nGROUP BY TagName \nORDER BY UpVotes DESC"
    },
    {
        "QuerySetId": 353753,
        "Title": "Is there a SEDE query to find number of up votes received?",
        "Description": "http:\/\/meta.stackexchange.com\/questions\/264094\/is-there-a-sede-query-to-find-number-of-up-votes-received\/264095#264095",
        "QueryBody": "SELECT  count(*) as [number of upvotes]\nfrom votes v \ninner join posts p on p.id = v.postid\nwhere v.votetypeid =2 -- upmod\nand p.owneruserid = ##userid:int## -- 252153",
        "CreationDate": "2015-08-23 01:18:04",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 354349,
        "Title": "Find my posts that have the most comments",
        "Description": null,
        "QueryBody": "SELECT  p.id [Post Link], count(c.Id) AS CommentCount\nfrom Posts p\njoin Comments c ON c.PostId = p.Id\nwhere p.OwnerUserId = ##UserId##\n group by p.id\n order by COUNT(c.Id) DESC",
        "CreationDate": "2015-08-25 08:04:50",
        "validated": false,
        "QueryBody_Original": "SELECT  p.id [Post Link], count(c.Id) AS CommentCount\nfrom Posts p\njoin Comments c ON c.PostId = p.Id\nwhere p.OwnerUserId = ##UserId##\n group by p.id\n order by COUNT(c.Id) DESC"
    },
    {
        "QuerySetId": 354889,
        "Title": "Find long answers to my questions",
        "Description": null,
        "QueryBody": "DECLARE  @UserId int = ##UserId##\nDECLARE @MinAnswerLen int = ##MinAnswerLength##\n\nSELECT\n  Answer.Id AS [Post Link]\nFROM Posts Answer\n  INNER JOIN Posts Question ON Answer.ParentId = Question.Id\nWHERE\n  Question.OwnerUserId = @UserId AND\n  LEN(Answer.Body) >= @MinAnswerLen",
        "CreationDate": "2015-08-26 08:18:24",
        "validated": false,
        "QueryBody_Original": "DECLARE  @UserId int = ##UserId##\nDECLARE @MinAnswerLen int = ##MinAnswerLength##\n\nSELECT\n  Answer.Id AS [Post Link]\nFROM Posts Answer\n  INNER JOIN Posts Question ON Answer.ParentId = Question.Id\nWHERE\n  Question.OwnerUserId = @UserId AND\n  LEN(Answer.Body) >= @MinAnswerLen"
    },
    {
        "QuerySetId": 355163,
        "Title": "ru.SO tags with \u0442\u0435\u0433 in wiki",
        "Description": null,
        "QueryBody": "WITH  \u0442\u0435\u0433 in wiki\n\nselect TagName, Count, LastEditorUserId, LastEditDate, Body from \n  Tags inner join Posts\n  on WikiPostId = Posts.Id\nwhere Body like N'%\u0422\u0435\u0433%'\n  or Body like N'% \u0442\u0435\u0433%'\n  or Body like N'%\u044d\u0433%'\norder by Count desc\n;",
        "CreationDate": "2015-08-26 17:24:05",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 356585,
        "Title": "Votes per question by week",
        "Description": null,
        "QueryBody": "DECLARE  @FirstQuestion datetime = (SELECT CreationDate FROM dbo.Posts WHERE Id = 1) + 1;\nDECLARE @LastQuestion datetime = (SELECT MAX(CreationDate) FROM dbo.Posts WHERE PostTypeId = 1);\n\n\nselect CAST(DATEADD(week, DATEDIFF(week, @LastQuestion, v.CreationDate), @LastQuestion) AS Date) Week,\n       1.0*count(distinct v.Id)\/count(distinct p.Id)\nfrom Votes v\n     join Posts p on PostId = p.Id\n     join Users u on OwnerUserId = u.Id\nwhere PostTypeId = 1\n      and VoteTypeId in (2,3)\n      and Reputation > ##rep?1##\ngroup by DATEDIFF(week, @LastQuestion, v.CreationDate)\norder by DATEDIFF(week, @LastQuestion, v.CreationDate)",
        "CreationDate": "2015-08-29 03:29:35",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 358136,
        "Title": "Questions with answers and votes",
        "Description": null,
        "QueryBody": "WITH  answers and votes\nSELECT\n     p.id,  p.title, count(answers.id) answerCount ,  p.Score,  count(answers.id)-p.Score as subtraction\nFROM posts p\n     INNER JOIN posts answers \n    ON p.id = answers.parentId\nWHERE\n    p.postTypeId = '1'\nGROUP BY\np.Score, p.id, p.title\nORDER BY\nsubtraction DESC",
        "CreationDate": "2015-09-01 19:41:05",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 358700,
        "Title": "That stupid windows clock question",
        "Description": null,
        "QueryBody": "SELECT  vt.name, count(pf.votetypeid)\nfrom postfeedback pf\ninner join votetypes vt on pf.votetypeid = vt.id\nwhere pf.postid = 19051750\nand pf.isanonymous = 'true'\nand vt.name = ##UpDownMod:string?UpMod##\ngroup by pf.votetypeid, vt.name",
        "CreationDate": "2015-09-02 20:47:22",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 359027,
        "Title": "Last 50 posts in August 2015 tagged with [*-vba]",
        "Description": null,
        "QueryBody": "SELECT  *\nFROM Tags\nWHERE TagName LIKE N'%-vba'\n\nSELECT TOP 50 Posts.ID AS [Post Link], Posts.CreationDate\nFROM Posts\nINNER JOIN PostTags ON Posts.ID = PostTags.PostID\nINNER JOIN (\n  SELECT ID\n  FROM Tags\n  WHERE TagName = N'powerpoint-vba'\n) AS t1 ON PostTags.TagID = t1.ID\nWHERE Posts.CreationDate < '2015-09-01 00:00:00'\nORDER BY Posts.CreationDate DESC\n\n\n\n\n--SELECT Posts.*\n--FROM Posts\n--INNER JOIN PostTags ON Posts.ID = PostTags.PostID\n--INNER JOIN (\n--  SELECT ID\n--  FROM Tags\n--  WHERE TagName LIKE N'%-vba'\n--) AS t1 ON PostTags.TagID = t1.ID",
        "CreationDate": "2015-09-03 11:06:03",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 359491,
        "Title": "Search for specific text in comments",
        "Description": null,
        "QueryBody": "DECLARE  @SearchString varchar(100) = ##TextToSearchFor:string##;\n--TextToSearchFor: Search String \"Must be case-sensitive\"\n\nIF len(@SearchString) < 3\n  SELECT 'Query string too short...' AS Result;\nELSE\n  SELECT \n    C.Id AS [Comment Link], \n    C.Text,\n    C.CreationDate,\n    P.Id AS [Post Link]\n  FROM Comments C\n    INNER JOIN Posts P\n      ON C.PostId = P.Id\n  WHERE C.Text LIKE '%' + @SearchString + '%';",
        "CreationDate": "2016-12-09 08:21:40",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 360337,
        "Title": "The titles of all questions",
        "Description": null,
        "QueryBody": "SELECT  Posts.Id, Posts.Id as [Post Link], Posts.Title,\n  Users.DisplayName,\n  Posts.Score, Posts.ViewCount,\n  Posts.CreationDate, Posts.LastEditDate,\n  Posts.DeletionDate, Posts.ClosedDate\nfrom Posts, Users\nwhere Posts.PostTypeId = 1\n  and Posts.OwnerUserId = Users.Id\n  and (\n    lower(Posts.Title) like '%' + ##Keyword1:String## + '%' or\n    lower(Posts.Title) like '%' + ##Keyword2:String## + '%' or\n    lower(Posts.Title) like '%' + ##Keyword3:String## + '%' or\n    lower(Posts.Title) like '%' + ##Keyword4:String## + '%' or\n    lower(Posts.Title) like '%' + ##Keyword5:String## + '%' or\n    lower(Posts.Title) like '%' + ##Keyword6:String## + '%'\n  )\norder by Id;",
        "CreationDate": "2015-09-13 17:50:06",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 361218,
        "Title": "Number of posts by type",
        "Description": null,
        "QueryBody": "SELECT  count(1) as N from Posts where PostTypeId=##type##",
        "CreationDate": "2015-09-08 03:37:38",
        "validated": false,
        "QueryBody_Original": "SELECT  count(1) as N from Posts where PostTypeId=##type##"
    },
    {
        "QuerySetId": 361501,
        "Title": "Get Reputation by User Id",
        "Description": null,
        "QueryBody": "SELECT  reputation from users where id = ##userid##",
        "CreationDate": "2015-09-09 01:07:34",
        "validated": false,
        "QueryBody_Original": "SELECT  reputation from users where id = ##userid##"
    },
    {
        "QuerySetId": 361872,
        "Title": "Most duplicated questions linked to a post",
        "Description": null,
        "QueryBody": "SELECT  top ##topn:int?50##\n   PostId as [Post Link],\n   COUNT(RelatedPostId) as count\n\n  from PostLinks\n  where LinkTypeId=3\n  group by PostId\n  order by COUNT(RelatedPostId) desc",
        "CreationDate": "2015-09-27 14:23:41",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 362542,
        "Title": "Count questions with answers never accepted by a user.",
        "Description": null,
        "QueryBody": "SELECT  COUNT(*) FROM Posts \n  INNER JOIN Users ON Posts.OwnerUserId = Users.Id\n  Where Users.Id = ##UserId##\n  AND Posts.PostTypeId = 1\n  AND Posts.AnswerCount > 0\n  AND Posts.ClosedDate IS NULL\n  AND Posts.AcceptedAnswerId IS NULL;",
        "CreationDate": "2015-09-10 23:21:12",
        "validated": false,
        "QueryBody_Original": "SELECT  COUNT(*) FROM Posts \n  INNER JOIN Users ON Posts.OwnerUserId = Users.Id\n  Where Users.Id = ##UserId##\n  AND Posts.PostTypeId = 1\n  AND Posts.AnswerCount > 0\n  AND Posts.ClosedDate IS NULL\n  AND Posts.AcceptedAnswerId IS NULL;"
    },
    {
        "QuerySetId": 363003,
        "Title": "Non-closed questions by month and answers to them",
        "Description": null,
        "QueryBody": "SELECT  \n  datepart(year,p.CreationDate) + (datepart(month,p.CreationDate)-1)\/12.0 \n    as [date],\n  count(*) N\nFROM Posts p\nWHERE \n  p.OwnerUserId = ##userId## AND\n  p.PostTypeId = 2 AND \n  datepart(year, p.CreationDate) >= ##startYear?2010## AND\n  datepart(year, p.CreationDate) <= ##endYear?2015##\nGROUP BY \n  datepart(year,p.CreationDate) + (datepart(month,p.CreationDate)-1)\/12.0\nORDER BY \n  datepart(year,p.CreationDate) + (datepart(month,p.CreationDate)-1)\/12.0",
        "CreationDate": "2015-09-15 16:40:06",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 363121,
        "Title": "Questions with no answers and no comments",
        "Description": null,
        "QueryBody": "WITH  No Comments\n\nselect TOP 10\n  p.Id as [Post Link], p.ViewCount\n  FROM Posts p\n  WHERE \n  p.PostTypeId = 2 AND \n  p.score <= -1 AND\n  p.closeddate is null AND\n  ISNULL(p.CommentCount,0) = 0 \n  order by p.CreationDate desc, p.ViewCount desc",
        "CreationDate": "2020-12-01 03:09:11",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 363128,
        "Title": "Questions with no answers and no comments older than 2 days, tagged \"python\", sorted by cdate",
        "Description": null,
        "QueryBody": "WITH  no answers and no comments\n\nselect TOP 100\n  p.Id as [Post Link]\n  FROM Posts p\n  WHERE \n  p.tags LIKE '%swift%' AND\n  p.PostTypeId = 1 AND \n  p.score >= 0 AND\n  p.closeddate is null AND\n  ISNULL(p.AnswerCount,0) = 0 AND\n  ISNULL(p.CommentCount,0) = 0 AND\n  DATEDIFF(day, p.CreationDate, GETDATE()) > 2\n  order by p.CreationDate desc",
        "CreationDate": "2016-04-01 22:08:18",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 363133,
        "Title": "Up\/user and down\/user ratio between a certain range of users",
        "Description": null,
        "QueryBody": "SELECT \n   COUNT(0) AS NumUsers,\n   SUM(UpVotes) \/ COUNT(0) AS AvrUpVotes,\n   SUM(DownVotes) \/ COUNT(0) AS AvrDownVotes,\n   (SUM(UpVotes) \/ COUNT(0))\/(SUM(DownVotes) \/ COUNT(0)) AS Ratio\nFROM\n   Users\nWHERE\n   Reputation >= ##LowBoundy:int?1000##\n   and Reputation <= ##HighBoundry:int?10000##",
        "CreationDate": "2015-09-13 13:20:15",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 363154,
        "Title": "Votes per day for users above a certain reputation",
        "Description": null,
        "QueryBody": "SELECT \n  Reputation,\n  --DisplayName,\n  CAST(UpVotes as Int)\/DATEDIFF(Day, CreationDate, GetDate()) as \"Upvotes per Day\",\n  CAST(DownVotes as Int)\/DATEDIFF(Day, CreationDate, GetDate()) as \"Downvotes per Day\",\n  (CAST(UpVotes as Int)-CAST(DownVotes as Int))\/DATEDIFF(Day, CreationDate, GetDate()) as \"Score per Day\"\nFrom Users U\nWhere U.Reputation > ##MinReputation:int?125## AND U.Reputation < ##MaxRep:int?99999999999##\nORDER BY Reputation DESC",
        "CreationDate": "2015-09-13 13:07:36",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 363257,
        "Title": "[draft] Questions with no up-voted or down-voted answers",
        "Description": null,
        "QueryBody": "SELECT  DISTINCT *\nFROM\n  Posts AS q\nINNER JOIN\n  Posts AS a\nON\n  a.ParentId = q.Id\nWHERE\n     q.PostTypeId = 1\n and a.PostTypeId = 2\n and a.DeletionDate IS NULL\n and q.ClosedDate IS NULL\n and q.AnswerCount >= ##numOfAnswers?1##",
        "CreationDate": "2015-09-13 17:00:40",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 364259,
        "Title": "Answers for the hibernate-orm project",
        "Description": null,
        "QueryBody": "SELECT  \n  Q.Id, Q.Title, Q.Body,\n  STUFF((\n    SELECT ', ' + [Body] \n    FROM Posts\n    WHERE (PARENTID = Q.ID) \n    ORDER BY SCORE DESC\n    FOR XML PATH(''),TYPE).value('(.\/text())[1]','nvarchar(max)')\n  ,1,2,'') AS Answers\nFROM Posts Q\nwhere Q.Tags like '%hibernate%'\nand Q.Body like '%orm%'\nGROUP BY Q.Id, Q.Title, Q.Body",
        "CreationDate": "2015-09-15 15:22:42",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 364940,
        "Title": "All votes on a specific post",
        "Description": null,
        "QueryBody": "SELECT  * from Votes where PostId =##postid##",
        "CreationDate": "2015-09-16 21:12:46",
        "validated": false,
        "QueryBody_Original": "SELECT  * from Votes where PostId =##postid##"
    },
    {
        "QuerySetId": 365326,
        "Title": "All my posts in desc",
        "Description": null,
        "QueryBody": "DECLARE  @UserId int = ##UserId##\n\nSELECT Count(Id), PostTypeId FROM Posts \nWHERE OwnerUserId=@UserId\nand CreationDate >= '##year##0101'\nand CreationDate <= '##year##1231'\nGROUP BY PostTypeId",
        "CreationDate": "2016-01-02 13:38:40",
        "validated": false,
        "QueryBody_Original": "DECLARE  @UserId int = ##UserId##\n\nSELECT Count(Id), PostTypeId FROM Posts \nWHERE OwnerUserId=@UserId\nand CreationDate >= '##year##0101'\nand CreationDate <= '##year##1231'\nGROUP BY PostTypeId"
    },
    {
        "QuerySetId": 365975,
        "Title": "My best comments on another user's posts",
        "Description": null,
        "QueryBody": "DECLARE  @UserId int = ##UserId##\nDECLARE @OtherUserId int = ##OtherUserId##\n\nSELECT Posts.Id, Comments.Score, Comments.Text\nfrom Posts inner join Comments on Comments.PostId = Posts.Id\nwhere Comments.UserId = @UserId and Posts.OwnerUserId = @OtherUserId\norder by Comments.Score desc",
        "CreationDate": "2015-09-18 16:42:45",
        "validated": false,
        "QueryBody_Original": "DECLARE  @UserId int = ##UserId##\nDECLARE @OtherUserId int = ##OtherUserId##\n\nSELECT Posts.Id, Comments.Score, Comments.Text\nfrom Posts inner join Comments on Comments.PostId = Posts.Id\nwhere Comments.UserId = @UserId and Posts.OwnerUserId = @OtherUserId\norder by Comments.Score desc"
    },
    {
        "QuerySetId": 366183,
        "Title": "Questions I've Answered with other answers",
        "Description": null,
        "QueryBody": "SELECT  \n  Id as [Post Link],\n  CreationDate,\n  AnswerCount,\n  Tags\nFROM Posts P\nWHERE P.Id in (\n  SELECT ParentId as Post\n  FROM Posts P\n  WHERE OwnerUserId = ##UserId##\n  AND PostTypeId = 2\n  )\n  AND AnswerCount > 1\nORDER BY CreationDate DESC",
        "CreationDate": "2015-09-19 11:23:50",
        "validated": false,
        "QueryBody_Original": "SELECT  \n  Id as [Post Link],\n  CreationDate,\n  AnswerCount,\n  Tags\nFROM Posts P\nWHERE P.Id in (\n  SELECT ParentId as Post\n  FROM Posts P\n  WHERE OwnerUserId = ##UserId##\n  AND PostTypeId = 2\n  )\n  AND AnswerCount > 1\nORDER BY CreationDate DESC"
    },
    {
        "QuerySetId": 367014,
        "Title": "Find Questions that link to Mine",
        "Description": null,
        "QueryBody": "SELECT \n   [PL].[PostId] AS [Post Link]\n  ,[PL].[RelatedPostId] AS [Post Link]\n  ,[PL].*\nFROM [PostLinks] AS [PL]\nINNER JOIN [Posts] AS [P1] ON ([PL].[PostId] = [P1].[Id])\nINNER JOIN [Posts] AS [P2] ON ([PL].[RelatedPostId] = [P2].[Id])\nWHERE ##UserId## IN ([P1].[OwnerUserId],[P2].[OwnerUserId])",
        "CreationDate": "2015-09-21 19:29:18",
        "validated": false,
        "QueryBody_Original": "SELECT \n   [PL].[PostId] AS [Post Link]\n  ,[PL].[RelatedPostId] AS [Post Link]\n  ,[PL].*\nFROM [PostLinks] AS [PL]\nINNER JOIN [Posts] AS [P1] ON ([PL].[PostId] = [P1].[Id])\nINNER JOIN [Posts] AS [P2] ON ([PL].[RelatedPostId] = [P2].[Id])\nWHERE ##UserId## IN ([P1].[OwnerUserId],[P2].[OwnerUserId])"
    },
    {
        "QuerySetId": 367409,
        "Title": "Questions by hour of day",
        "Description": null,
        "QueryBody": "SELECT  \nDATEPART(hour, CreationDate)*60+DATEPART(minute, CreationDate) AS minute,\nSUM(CASE PostTypeId WHEN 1 THEN 1 ELSE 0 END) AS questions,\nSUM(CASE PostTypeId WHEN 2 THEN 1 ELSE 0 END) AS answers\nFROM Posts\nWhere PostTypeId = 1 OR PostTypeId=2 AND CreationDate>=##mindate:string?20140101##\nGROUP BY DATEPART(hour, CreationDate)*60+DATEPART(minute, CreationDate) \nORDER BY DATEPART(hour, CreationDate)*60+DATEPART(minute, CreationDate)",
        "CreationDate": "2016-01-20 10:10:12",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 367581,
        "Title": "Aggregated Post Stats for Top Tags per Day and Tag",
        "Description": null,
        "QueryBody": "SELECT  TOP 10 t.TagName\nINTO #TopTags\nFROM Tags t ORDER BY t.Count DESC\n\nSELECT\n    CAST(p.CreationDate AS date) AS post_date,\n    COUNT(*) AS posts_per_day,\n    SUM(p.ViewCount) AS views_per_day,\n    SUM(p.AnswerCount) AS answers_per_day,\n    SUM(p.CommentCount) AS comments_per_day,\n    SUM(p.FavoriteCount) AS favorites_per_day,\n    SUM(p.Score) AS score_per_day,\n    Tags.TagName AS tag_name\n    FROM Tags\n    JOIN PostTags AS pt ON Tags.Id = pt.TagId\n    JOIN Posts AS p ON pt.PostId = p.Id\n    WHERE Tags.TagName IN (SELECT * FROM #TopTags)\n    GROUP BY CAST(p.CreationDate AS date), Tags.TagName\n    ORDER BY post_date DESC",
        "CreationDate": "2015-09-23 02:30:23",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 367639,
        "Title": "Aggregated post stats for top tags per day and tag",
        "Description": null,
        "QueryBody": "SELECT  TOP 10 t.TagName\nINTO #TopTags\nFROM Tags t ORDER BY t.Count DESC\n\nSELECT\n    CAST(p.CreationDate AS date) AS post_date,\n    COUNT(*) AS posts_per_day,\n    SUM(p.ViewCount) AS views_per_day,\n    SUM(p.AnswerCount) AS answers_per_day,\n    SUM(p.CommentCount) AS comments_per_day,\n    SUM(p.FavoriteCount) AS favorites_per_day,\n    SUM(p.Score) AS score_per_day,\n    t.TagName AS tag_name\n    FROM Tags t\n    JOIN PostTags AS pt ON t.Id = pt.TagId\n    JOIN Posts AS p ON pt.PostId = p.Id\n    WHERE t.TagName IN (SELECT * FROM #TopTags)\n    GROUP BY CAST(p.CreationDate AS date), t.TagName\n    ORDER BY post_date DESC",
        "CreationDate": "2015-09-23 02:35:46",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 367747,
        "Title": "Recent questions by users with at least min reputation",
        "Description": null,
        "QueryBody": "SELECT  top ##NumQuestions##\n  p.Id as [Post Link], p.Score, p.OwnerUserId as [User Link], u.Reputation, p.CreationDate\nfrom Posts p\ninner join users u on p.OwnerUserId = u.Id\nWhere u.Reputation >= ##minReputation## and p.PostTypeId = 1\norder by p.CreationDate Desc",
        "CreationDate": "2015-09-23 11:15:51",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 367770,
        "Title": "How long are my answers",
        "Description": "This query takes",
        "QueryBody": "DECLARE  @UserId int = ##UserId##\n\nselect \n    u.Id as [User Link],\n    sum(len(p.Body)) as TotalLength,\n    count(*) as TotalPosts,\n    avg(len(p.Body)) as AvgPostLength,\n    (cast(sum(len(p.Body)) as float) \/ cast(min(u.Reputation) as float)) as PostLengthPerReputation\nfrom\n    Posts p\n    inner join Users u ON u.Id = p.OwnerUserId\nwhere\n    p.PostTypeId = 2\n    and u.Id = @UserId\ngroup by\n    u.Id",
        "CreationDate": "2015-09-23 12:29:14",
        "validated": false,
        "QueryBody_Original": "DECLARE  @UserId int = ##UserId##\n\nselect \n    u.Id as [User Link],\n    sum(len(p.Body)) as TotalLength,\n    count(*) as TotalPosts,\n    avg(len(p.Body)) as AvgPostLength,\n    (cast(sum(len(p.Body)) as float) \/ cast(min(u.Reputation) as float)) as PostLengthPerReputation\nfrom\n    Posts p\n    inner join Users u ON u.Id = p.OwnerUserId\nwhere\n    p.PostTypeId = 2\n    and u.Id = @UserId\ngroup by\n    u.Id"
    },
    {
        "QuerySetId": 368476,
        "Title": "Ratio of unanswered (open) questions as percentage of all (open) questions",
        "Description": null,
        "QueryBody": "DECLARE  @Total int\nDECLARE @Unanswered int\n\nselect @Total = count(*) from Posts where ClosedDate is null\nselect @Unanswered = count(*) from Posts where ClosedDate is null and ParentId is null\n\nselect (@Unanswered \/ @Total * 100) ratio",
        "CreationDate": "2015-09-26 12:47:52",
        "validated": false,
        "QueryBody_Original": "DECLARE  @Total int\nDECLARE @Unanswered int\n\nselect @Total = count(*) from Posts where ClosedDate is null\nselect @Unanswered = count(*) from Posts where ClosedDate is null and ParentId is null\n\nselect (@Unanswered \/ @Total * 100) ratio"
    },
    {
        "QuerySetId": 369284,
        "Title": "Time distribution of upvotes on all the questions of a given user",
        "Description": "It prints the time distribution of all the questions of a given user",
        "QueryBody": "SELECT \n  --Posts.Id as 'Question Id',\n  Posts.Id as [Post Link],\n  Votes.CreationDate as 'Date',\n  count(Posts.Score) as 'Total upvotes'\nFROM \n  Votes\ninner join Posts on Posts.id=Votes.postid\n  and Votes.VoteTypeId=2               -- Upvote\n  and Posts.OwnerUserId = ##UserId##\n  and Posts.PostTypeId = 1             -- Questions\nGROUP BY Posts.Title, Posts.Id, Votes.CreationDate\nORDER BY Posts.Id",
        "CreationDate": "2016-09-23 01:14:56",
        "validated": false,
        "QueryBody_Original": "SELECT \n  --Posts.Id as 'Question Id',\n  Posts.Id as [Post Link],\n  Votes.CreationDate as 'Date',\n  count(Posts.Score) as 'Total upvotes'\nFROM \n  Votes\ninner join Posts on Posts.id=Votes.postid\n  and Votes.VoteTypeId=2               -- Upvote\n  and Posts.OwnerUserId = ##UserId##\n  and Posts.PostTypeId = 1             -- Questions\nGROUP BY Posts.Title, Posts.Id, Votes.CreationDate\nORDER BY Posts.Id"
    },
    {
        "QuerySetId": 369811,
        "Title": "Find potential \"not an answer\" answers",
        "Description": "Looks for answers like \"I have the same problem. Has anyone found a solution?\" etc",
        "QueryBody": "SELECT \nid [Post Link], body\nfrom posts\nwhere posttypeid = 2\nand creationdate between '##StartDate?2015-01-01## 00:00:00'\nand CONVERT(DATETIME, DATEADD(day, ##Days?30##, '##StartDate##')) \nand (\n  body like '%I have the same problem%?%'\n  or\n  body like '%has anyone%solution?%'\n)",
        "CreationDate": "2015-09-30 18:29:31",
        "validated": false,
        "QueryBody_Original": "SELECT \nid [Post Link], body\nfrom posts\nwhere posttypeid = 2\nand creationdate between '##StartDate?2015-01-01## 00:00:00'\nand CONVERT(DATETIME, DATEADD(day, ##Days?30##, '##StartDate##')) \nand (\n  body like '%I have the same problem%?%'\n  or\n  body like '%has anyone%solution?%'\n)"
    },
    {
        "QuerySetId": 369825,
        "Title": "Number of Users with 1 rep",
        "Description": null,
        "QueryBody": "SELECT  count(*) from users\n\n--see all new users\nSELECT count(*) from users where reputation=1\n\n--SELECT users with one rep and have used the site after the first 24hrs\nSELECT count(*) from users where reputation=1 and ((SELECT DATEDIFF(HOUR,CreationDate,LastAccessDate))>24);\n\n--SELECT users with one rep and have ONLY used the site during the first 24hrs (presumbly to see their first question's reception\nSELECT count(*) from users where reputation=1 and ((SELECT DATEDIFF(HOUR,CreationDate,LastAccessDate))<24) and ((SELECT DATEDIFF(SECOND,CreationDate,LastAccessDate))>0);\n\n--SELECT 'dead' users\nSELECT count(*) from users where reputation=1 and (CreationDate=LastAccessDate);",
        "CreationDate": "2015-09-30 19:23:02",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 369950,
        "Title": "Users with largest percentage of downvoted favorited questions",
        "Description": null,
        "QueryBody": "SELECT  TOP ##topn:int?50## u.Id as [User Link],MIN(u.Reputation) as rep,\nAVG(p.Score) as avgScore,SUM(CASE WHEN p.Score<0 THEN 1 ELSE 0 END) as downvoted,\nCAST(SUM(CASE WHEN p.Score<0 THEN 1 ELSE 0 END) AS DECIMAL(12,6))\/COUNT(p.Id) as percentage,COUNT(p.Id) as c\nFROM Users u\nINNER JOIN Votes v ON u.Id=v.UserId\nINNER JOIN Posts p ON v.PostId=p.Id\nWHERE v.VoteTypeId=5\nGROUP BY u.Id\nHAVING COUNT(p.Id) >= ##minCount:int?10##\nORDER BY ##orderby?percentage DESC##",
        "CreationDate": "2015-10-01 07:54:28",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 370014,
        "Title": "full PostHistory for a post",
        "Description": null,
        "QueryBody": "SELECT  ph.*,pht.name FROM PostHistory ph \nLEFT JOIN PostHistoryTypes pht ON ph.PostHistoryTypeId = pht.Id WHERE PostId=##post:int## ORDER BY ph.Id",
        "CreationDate": "2016-03-22 20:33:37",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 370223,
        "Title": "Find my posts with YouTube links in",
        "Description": null,
        "QueryBody": "SELECT  id as [Post Link]\nfrom posts\nwhere owneruserid = ##UserId##\nand (body like ##SearchLink##)",
        "CreationDate": "2015-12-09 04:50:54",
        "validated": false,
        "QueryBody_Original": "SELECT  id as [Post Link]\nfrom posts\nwhere owneruserid = ##UserId##\nand (body like ##SearchLink##)"
    },
    {
        "QuerySetId": 370578,
        "Title": "New Oracle questions per day",
        "Description": null,
        "QueryBody": "SELECT  CONVERT(date, p.CreationDate,126) as \"Date\", count(1) as \"questions\"\n  FROM posts p\n    WHERE p.tags LIKE '%xamarin%'\n      GROUP BY CONVERT(date, p.CreationDate,126)\n        ORDER BY 1 DESC;",
        "CreationDate": "2016-04-01 01:18:55",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 370921,
        "Title": "Dupes pointing to a question",
        "Description": null,
        "QueryBody": "SELECT  PostId as [Post Link], RelatedPostId as [Post Link], LinkTypeId FROM PostLinks WHERE RelatedPostId = ##dupeId:int## AND LinkTypeId = 3 ORDER BY LinkTypeId",
        "CreationDate": "2015-10-04 18:20:53",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 371001,
        "Title": "Count of questions containing \"<\/br>\"",
        "Description": null,
        "QueryBody": "SELECT \n  DateAdd(Month, DateDiff(Month, 0, CreationDate), 0) as [Month],\n  Count(*) as [Questions]\nfrom Posts\nwhere Body like '%&lt;\/br&gt;%'\nand CreationDate between ##StartDate:string?2013-01-01## and  ##EndDate:string?2015-10-01##\nand PostTypeId = 1\ngroup by DateAdd(Month, DateDiff(Month, 0, CreationDate), 0)\norder by [Month]",
        "CreationDate": "2015-10-08 19:59:01",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 371181,
        "Title": "Posts by the Community User",
        "Description": null,
        "QueryBody": "SELECT  TOP ##topn:int?50## Id as [Post Link],PostTypeId,Score,ViewCount,CreationDate,OwnerDisplayName\nFROM Posts WHERE OwnerUserId=-1 AND PostTypeId IN ##types?(1,2)##\nORDER BY ##orderby?Score DESC##",
        "CreationDate": "2015-10-05 14:05:31",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 371189,
        "Title": "Questions that used to have a tag",
        "Description": null,
        "QueryBody": "SELECT  TOP ##topn:int?200##\nPostId AS [Post Link],Comment,UserId as [User Link],CreationDate FROM PostHistory\nWHERE PostHistoryTypeId IN (3,6) AND Text LIKE ##pattern:string?%<fun>%##",
        "CreationDate": "2015-10-05 14:44:42",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 371760,
        "Title": "Which of my answers is closest to a Reversal badge?",
        "Description": null,
        "QueryBody": "SELECT  question.score, answer.score, question.id as [Post Link]\nfrom posts question inner join\nposts answer ON answer.parentid = question.id\nwhere answer.owneruserid = ##user##\norder by case when question.score < -5 then 0 else question.score + 5 end +\ncase when answer.score > 20 then 0 else 20 - answer.score end",
        "CreationDate": "2015-10-06 07:37:08",
        "validated": false,
        "QueryBody_Original": "SELECT  question.score, answer.score, question.id as [Post Link]\nfrom posts question inner join\nposts answer ON answer.parentid = question.id\nwhere answer.owneruserid = ##user##\norder by case when question.score < -5 then 0 else question.score + 5 end +\ncase when answer.score > 20 then 0 else 20 - answer.score end"
    },
    {
        "QuerySetId": 372408,
        "Title": "Have My Edits Been Rolled-Back?",
        "Description": null,
        "QueryBody": "SELECT  ph.Id, ph.PostId, ph.CreationDate, ph.Comment\nINTO #Edits\nFROM PostHistory ph\nWHERE UserId = ##UserId:int##\n  AND ph.PostHistoryTypeId IN (5,8) -- Edit, or Rollback\n  AND DATEDIFF(day, ph.CreationDate, GETDATE()) <= ##MaxDayAge:int?14##\n  \nSELECT ph.PostId AS [Post Link], ph.CreationDate\nFROM PostHistory ph INNER JOIN #Edits e ON e.PostId = ph.PostId\nWHERE ph.PostHistoryTypeId IN (5,8) -- Edit, or Rollback\n  AND e.CreationDate < ph.CreationDate -- new revision\nORDER BY ph.CreationDate DESC",
        "CreationDate": "2015-10-07 14:48:47",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 374593,
        "Title": "Users with (x) or more posts averaging the highest scores",
        "Description": null,
        "QueryBody": "WITH  at least this many posts:\n-- MinAverageScore: Include only users whose posts average at least this score:\nSELECT\n  DisplayName,\n  Users.Id,\n  Reputation,\n  count(*) AS PostCount,\n  FORMAT(AVG(CAST(Score AS FLOAT)), '#,###,##0.000') AS AverageScore\nFROM\n  Users\n    INNER JOIN Posts ON (Users.Id = Posts.OwnerUserId)\nGROUP BY\n  DisplayName,\n  Users.Id,\n  Reputation\nHAVING\n  count(*) >= ##MinPosts:INT?10##\n  AND AVG(CAST(Score AS FLOAT)) >= ##MinAverageScore:FLOAT?0##\nORDER BY\n  AVG(CAST(Score AS FLOAT)) DESC,\n  PostCount DESC;",
        "CreationDate": "2015-10-12 11:29:21",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 374631,
        "Title": "Users with (x) or more posts averaging the highest scores, among posts less than (y) days old",
        "Description": null,
        "QueryBody": "WITH  at least this many posts made since that time:\n-- MinAverageScore: Include only users whose posts average at least this score:\nSELECT\n  DisplayName,\n  Users.Id,\n  Reputation,\n  count(*) AS PostCount,\n  FORMAT(AVG(CAST(Score AS FLOAT)), '#,###,##0.000') AS AverageScore\nFROM\n  Users\n    INNER JOIN Posts ON (Users.Id = Posts.OwnerUserId)\nWHERE\n  Posts.CreationDate >= (DATEADD(day, -##MaxAge:INT?365##, GETDATE()))\nGROUP BY\n  DisplayName,\n  Users.Id,\n  Reputation\nHAVING\n  count(*) >= ##MinPosts:INT?10##\n  AND AVG(CAST(Score AS FLOAT)) >= ##MinAverageScore:FLOAT?0##\nORDER BY\n  AVG(CAST(Score AS FLOAT)) DESC,\n  PostCount DESC;",
        "CreationDate": "2015-10-12 09:00:01",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 374861,
        "Title": "Users with the most high-scoring posts",
        "Description": null,
        "QueryBody": "SELECT \n  DisplayName,\n  Users.Id,\n  Reputation,\n  SUM(CASE WHEN Score >= ##MinScore:INT?10## THEN 1 ELSE 0 END) AS ct\nFROM\n  Users\n    INNER JOIN Posts ON (Users.Id = Posts.OwnerUserId)\nGROUP BY\n  DisplayName,\n  Users.Id,\n  Reputation\nORDER BY\n  ct DESC,\n  Reputation DESC;",
        "CreationDate": "2015-10-12 21:17:08",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 374922,
        "Title": "Posts where others improved what you did",
        "Description": null,
        "QueryBody": "SELECT  own.postid [Post Link]\n, max(own.cdate) [Own Edit]\n, max(h.creationdate) [Last Edit]\nfrom (\n  SELECT max(id) id, postid, max(creationdate) cdate\n  from posthistory\n  where userid = ##UserId:int## and posthistorytypeid < 10\n  group by postid) own\njoin posthistory h on own.postid = h.postid\nwhere own.id < h.id and h.posthistorytypeid < 10\ngroup by own.postid\norder by [Last Edit] desc",
        "CreationDate": "2015-10-13 00:47:03",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 374949,
        "Title": "Number of useful answers for a user",
        "Description": null,
        "QueryBody": "SELECT  count(a.Id)\nfrom Posts a\nleft join Posts q on a.ParentId = q.Id\nwhere a.PostTypeId = 2 and ( a.Score > 0 or q.AcceptedAnswerId = a.Id ) and a.OwnerUserId = ##UserId:int##",
        "CreationDate": "2015-10-13 11:23:01",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 375691,
        "Title": "Old JS posts for editing",
        "Description": null,
        "QueryBody": "WITH  no activity in last 6 months\n\nSELECT TOP(50) P.Id AS [Post Link], P.CreationDate, P.Score, P.PostTypeID, p.LastEditDate,p.LastActivityDate\nFROM Posts AS P\nWHERE P.Tags LIKE '%javascript%'\nAND P.LastActivityDate < DATEADD(month, -6, GETDATE()) \nAND P.Score <= 5 \nAND P.ClosedDate IS NULL\nORDER BY P.Score ASC, P.CreationDate ASC",
        "CreationDate": "2015-10-15 02:58:33",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 375988,
        "Title": "All of my questions and answers",
        "Description": null,
        "QueryBody": "SELECT \n  q.Id AS [Post Link],\n  q.OwnerUserId AS [User Link],\n  q.CreationDate,\n  a.Id AS [Post Link],\n  a.OwnerUserId AS [User Link],\n  a.CreationDate\nFROM Posts q LEFT OUTER JOIN Posts a ON a.ParentId = q.Id\nWHERE (q.OwnerUserId = ##UserId:int## OR a.OwnerUserId = ##UserId:int##)\n  AND q.PostTypeId = 1\n  AND (a.PostTypeId = 2 OR a.PostTypeId IS NULL)\nORDER BY q.CreationDate DESC, a.CreationDate DESC",
        "CreationDate": "2015-10-15 16:45:04",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 377074,
        "Title": "Find top User for a Country for a specific Month\/Year",
        "Description": "http:\/\/meta.stackexchange.com\/questions\/267968\/find-top-user-for-a-country-for-a-specific-month-year",
        "QueryBody": "SELECT  owneruserid as [User Link]\n     , row_number() over(order by rep desc) as ranking\n     , rep\nfrom (\nSELECT p.owneruserid\n     ,sum(case v.votetypeid when 2 then \n           case p.posttypeid when 1 then 5 else 10 end\n           else 0 end) \n       + sum(case v.votetypeid when 3 then -2 else 0 end)\n       + sum(case v.votetypeid when 1 then 15 else 0 end) as rep\nfrom posts p \ninner join votes v on v.postid = p.id\ninner join users u on u.id = p.owneruserid\nwhere v.creationdate between ##start:string?2015-05-01## \n                         and ##end:string?2015-05-07##\nand   v.votetypeid in (1,2,3)\nand p.owneruserid is not null\nand u.location like ##country:string?Netherlands## collate SQL_Latin1_General_CP1_CI_AI\ngroup by p.owneruserid \n) as rawdata\norder by ranking",
        "CreationDate": "2015-10-18 15:51:53",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 377087,
        "Title": "How many posts per tag are there for 2015",
        "Description": null,
        "QueryBody": "SELECT  TagName, Count FROM Tags\nORDER BY Count desc\n\nSELECT Tags FROM Posts WHERE CreationDate >= '01\/01\/2015' AND Tags is NOT NULL\nSELECT * FROM Tags",
        "CreationDate": "2015-10-19 00:30:55",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 377549,
        "Title": "Total Answers Distribution Among 5k+ Users",
        "Description": "Doesn't include answers for deleted users.",
        "QueryBody": "SELECT \n  u.Id AS [User Link],\n  u.Reputation,\n  FORMAT(COUNT(*), '#,#') AS [Count]\nFROM Users u INNER JOIN Posts a ON a.OwnerUserId = u.Id\nWHERE a.PostTypeId = 2\nGROUP BY u.Id, u.Reputation\nHAVING u.Reputation > 5000\nORDER BY u.Reputation DESC\n*\/\n\n\n\nSELECT Id, Reputation\nINTO #Users\nFROM Users\nWHERE Reputation >= 5000",
        "CreationDate": "2015-10-22 10:45:01",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 377854,
        "Title": "answers from low rep users on accepted answers",
        "Description": null,
        "QueryBody": "SELECT  TOP 100 Answers.Id as [Post Link], \n       question.CreationDate,\n       DATEDIFF(dd,question.CreationDate,Answers.CreationDate) AS DaysDiff,\n       users.reputation,\n       users.DisplayName\n\nfrom posts as question\n    inner join posts as Answers\n        on Answers.parentid = question.id\n        inner join Users as users on users.Id = Answers.owneruserid\nwhere question.posttypeid = 1\nand Answers.posttypeid = 2\nand users.reputation < ##MaxUserRep?100##\n--and question.AcceptedAnswerId !=0\n--and question.AcceptedAnswerId != Answers.id\nand question.AcceptedAnswerID is null\nand question.owneruserid != Answers.owneruserid\nand DATEDIFF(dd,question.CreationDate,Answers.CreationDate) > ##MinDaysDiff?20##\norder by \n        question.CreationDate desc",
        "CreationDate": "2015-10-20 17:53:54",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 378022,
        "Title": "Users by Location and Reputation",
        "Description": null,
        "QueryBody": "DECLARE  @Location VARCHAR(35) = ##Location:string?Tacoma##\nDECLARE @MinRep int = ##MinRep:int?1000##\n-- MinRep: Minimum Rep\nSELECT Id As [User Link], DisplayName, Reputation, Age, UpVotes, DownVotes, Location, WebSiteUrl As [Site Link]\nFROM USERS\nWHERE Reputation >= @MinRep and\n      Location like '%' + @Location + '%'\nORDER BY Reputation DESC",
        "CreationDate": "2015-10-21 03:53:16",
        "validated": false,
        "QueryBody_Original": "DECLARE  @Location VARCHAR(35) = ##Location:string?Tacoma##\nDECLARE @MinRep int = ##MinRep:int?1000##\n-- MinRep: Minimum Rep\nSELECT Id As [User Link], DisplayName, Reputation, Age, UpVotes, DownVotes, Location, WebSiteUrl As [Site Link]\nFROM USERS\nWHERE Reputation >= @MinRep and\n      Location like '%' + @Location + '%'\nORDER BY Reputation DESC"
    },
    {
        "QuerySetId": 379142,
        "Title": "What tags are used with ##TagName## and how many times?",
        "Description": "Get all posts that use ##TagName##, and get all other tags that are used on those posts and how many times they are used across all posts that use ##TagName##",
        "QueryBody": "SELECT  containsTags.TagName, COUNT(containsTags.TagName) AS usageCount FROM Posts\n\nJOIN Tags AS alternate\n    ON alternate.TagName LIKE ##TagName:string##\nJOIN PostTags AS alternateRel\n    ON alternateRel.TagId = alternate.Id\n    AND alternateRel.PostId = Posts.Id\nJOIN PostTags AS tagRel\n    ON tagRel.PostId = Posts.Id\nJOIN Tags AS containsTags\n    ON containsTags.Id=tagRel.TagId\nGROUP BY containsTags.Id, containsTags.TagName\nORDER BY usageCount DESC",
        "CreationDate": "2015-10-22 19:47:56",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 379163,
        "Title": "post count with ##Tag## and containing ##Word## in the title",
        "Description": null,
        "QueryBody": "SELECT  TitleCount.titleCount, TagCount.tagCount\n  FROM \n  (SELECT COUNT(Posts.Id) AS titleCount FROM Posts\n   JOIN PostTags ON\n       PostTags.PostId = Posts.Id\n   JOIN Tags ON\n       PostTags.TagId = Tags.Id\n  WHERE Tags.TagName LIKE ##Tag:string##\n  AND Posts.Title LIKE '%'+##Word:string##+'%') AS TitleCount,\n  (SELECT COUNT(Posts.Id) AS tagCount FROM Posts\n   JOIN PostTags ON\n       PostTags.PostId = Posts.Id\n   JOIN Tags ON\n       PostTags.TagId = Tags.Id\n  WHERE Tags.TagName LIKE ##Tag:string##) AS TagCount",
        "CreationDate": "2015-10-22 20:17:19",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 379307,
        "Title": "Grab All Answers with Tags Matching Suspect Answer Tags",
        "Description": null,
        "QueryBody": "SELECT  a.Id\nFROM Posts q\n\tINNER JOIN Posts a ON a.ParentId = q.Id\n\tINNER JOIN PostTags pt ON pt.PostId = q.Id\nWHERE pt.TagId IN (\n\tSELECT DISTINCT TagId\n\tFROM Posts q\n\t\tINNER JOIN Posts a ON a.ParentId = q.Id\n\t\tINNER JOIN PostTags pt ON pt.PostId = q.Id\t\t \n\tWHERE a.OwnerUserId = ##UserId:int##\n)",
        "CreationDate": "2015-10-23 04:10:23",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 380060,
        "Title": "Downvoted posts belonging to user",
        "Description": null,
        "QueryBody": "SELECT  p.Id as [Post Link],\n  sum(case when v.VoteTypeId=3 then 1 else 0 end) as Down,\n  p.Score\nfrom Posts p inner join Votes v on p.Id=v.PostId\nwhere p.OwnerUserId = ##UserId##\ngroup by p.Id, p.Score\nhaving sum(case when v.VoteTypeId=3 then 1 else 0 end) > 0;",
        "CreationDate": "2015-10-24 05:05:52",
        "validated": false,
        "QueryBody_Original": "SELECT  p.Id as [Post Link],\n  sum(case when v.VoteTypeId=3 then 1 else 0 end) as Down,\n  p.Score\nfrom Posts p inner join Votes v on p.Id=v.PostId\nwhere p.OwnerUserId = ##UserId##\ngroup by p.Id, p.Score\nhaving sum(case when v.VoteTypeId=3 then 1 else 0 end) > 0;"
    },
    {
        "QuerySetId": 380629,
        "Title": "Your comments' votes with Links",
        "Description": null,
        "QueryBody": "SELECT  \nScore,\nCreationDate,  \nId AS [Comment Link], \ntext \nFROM\ncomments\nWHERE UserId=##User:int##\nORDER BY Score DESC",
        "CreationDate": "2015-10-26 17:33:32",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 381588,
        "Title": "find candidates for Revival badge with a certain tag",
        "Description": "find questions older than 60 days which have no answers of score >= 2",
        "QueryBody": "DECLARE  @tag VARCHAR(30) = ##tag:string##\n\nSELECT TOP 1000\n    Id AS [Post Link],\n    Score,\n    ViewCount as Views,\n    AnswerCount as Answers,\n    Body,\n    CreationDate\nFROM Posts\nWHERE\n    PostTypeId = 1\n    AND CreationDate < GETDATE() - 30\n    AND ClosedDate IS NULL\n    AND Tags LIKE '%<' + LOWER(@tag) + '>%'\n    AND NOT EXISTS\n    (\n        SELECT *\n        FROM Posts p\n        WHERE p.ParentId = Posts.Id\n        AND p.Score >= 2\n        AND p.PostTypeId = 2\n    )\nORDER BY CreationDate DESC",
        "CreationDate": "2016-02-04 03:09:44",
        "validated": false,
        "QueryBody_Original": "DECLARE  @tag VARCHAR(30) = ##tag:string##\n\nSELECT TOP 1000\n    Id AS [Post Link],\n    Score,\n    ViewCount as Views,\n    AnswerCount as Answers,\n    Body,\n    CreationDate\nFROM Posts\nWHERE\n    PostTypeId = 1\n    AND CreationDate < GETDATE() - 30\n    AND ClosedDate IS NULL\n    AND Tags LIKE '%<' + LOWER(@tag) + '>%'\n    AND NOT EXISTS\n    (\n        SELECT *\n        FROM Posts p\n        WHERE p.ParentId = Posts.Id\n        AND p.Score >= 2\n        AND p.PostTypeId = 2\n    )\nORDER BY CreationDate DESC"
    },
    {
        "QuerySetId": 381605,
        "Title": "Posts changed after I've changed them",
        "Description": null,
        "QueryBody": "DECLARE  @userid int = ##UserId:int##\n\nSelect 'site:\/\/posts\/' + CAST(P.Id AS nvarchar) + '\/revisions|' + \n  'Revision History for Post ' +  CAST(P.Id AS nvarchar) AS [Revision Link], P.Id As [Post Link], P.LastEditorUserId As [User Link], P.LastEditDate\nFrom posts as P\ninner join PostHistory as H on H.PostId = P.Id\nWhere P.OwnerUserId <> @userid\n    And P.LastEditorUserId <> @userid\n    And H.UserId = @userid\n    And H.CreationDate < P.LastEditDate\nGroup By P.Id, P.LastEditorUserId, P.LastEditDate    \nOrder By P.LastEditDate Desc",
        "CreationDate": "2015-10-28 18:20:03",
        "validated": false,
        "QueryBody_Original": "DECLARE  @userid int = ##UserId:int##\n\nSelect 'site:\/\/posts\/' + CAST(P.Id AS nvarchar) + '\/revisions|' + \n  'Revision History for Post ' +  CAST(P.Id AS nvarchar) AS [Revision Link], P.Id As [Post Link], P.LastEditorUserId As [User Link], P.LastEditDate\nFrom posts as P\ninner join PostHistory as H on H.PostId = P.Id\nWhere P.OwnerUserId <> @userid\n    And P.LastEditorUserId <> @userid\n    And H.UserId = @userid\n    And H.CreationDate < P.LastEditDate\nGroup By P.Id, P.LastEditorUserId, P.LastEditDate    \nOrder By P.LastEditDate Desc"
    },
    {
        "QuerySetId": 381655,
        "Title": "Open Questions that I've closed",
        "Description": null,
        "QueryBody": "DECLARE  @userid int = ##UserId:int##\n\nSelect 'site:\/\/posts\/' + CAST(P.Id AS nvarchar) + '\/revisions|' + \n  'Revision History for Post ' +  CAST(P.Id AS nvarchar) AS [Revision Link], P.Id As [Post Link], H.CreationDate as [Closed Date]\nFrom posts as P\ninner join PostHistory as H on H.PostId = P.Id\nWhere P.PostTypeId = 1 -- Question\n    And H.PostHistoryTypeId = 10 -- Post Closed\n    And H.UserId = @userid    \n    And P.ClosedDate is null -- opened\nGroup By P.Id, H.CreationDate\nOrder By H.CreationDate Desc",
        "CreationDate": "2015-10-28 18:47:05",
        "validated": false,
        "QueryBody_Original": "DECLARE  @userid int = ##UserId:int##\n\nSelect 'site:\/\/posts\/' + CAST(P.Id AS nvarchar) + '\/revisions|' + \n  'Revision History for Post ' +  CAST(P.Id AS nvarchar) AS [Revision Link], P.Id As [Post Link], H.CreationDate as [Closed Date]\nFrom posts as P\ninner join PostHistory as H on H.PostId = P.Id\nWhere P.PostTypeId = 1 -- Question\n    And H.PostHistoryTypeId = 10 -- Post Closed\n    And H.UserId = @userid    \n    And P.ClosedDate is null -- opened\nGroup By P.Id, H.CreationDate\nOrder By H.CreationDate Desc"
    },
    {
        "QuerySetId": 381897,
        "Title": "Questions and Answers per 7 day period going backward from now",
        "Description": null,
        "QueryBody": "DECLARE  @LastFullDayOfData DATE;\n\nSELECT @LastFullDayOfData = DATEADD(DAY, -1, MAX(CONVERT(DATE, [CreationDate])))\n\nFROM [Posts]\nprint @LastFullDayOfData\nselect [Day of week], \n       SUM(case when PostTypeId = 1 then 1 else 0 end) Questions,\n       SUM(case when PostTypeId = 1 then 0 else 1 end) Answers\nfrom\n(\n  SELECT\n  DATEPART(HOUR, [CreationDate]) [Day of week],\n  --CONVERT(DATE, DATEADD(day, (DATEDIFF(day, CreationDate, @LastFullDayOfData) % 7), CreationDate)) [Week],\n    PostTypeId\n     \n  from Posts p\n  where [CreationDate] <= @LastFullDayOfData\n) as X\ngroup by [Day of week]\norder by [Day of week] desc",
        "CreationDate": "2015-10-29 01:00:11",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 382878,
        "Title": "Comments containing [word] that are [days] old",
        "Description": null,
        "QueryBody": "SELECT  Comments.CreationDate,\n       Comments.Id As [Comment Link], \n       Comments.UserId As [User Link], \n       Users.Reputation\nFROM Comments\n    INNER JOIN Users On Comments.UserId = Users.Id\nWHERE LOWER(Comments.Text) LIKE LOWER('%##SearchWord##%') AND\nComments.CreationDate between DateAdd(DD,-##DaysOld##,GETDATE()) and GETDATE()\nORDER BY Comments.CreationDate DESC;",
        "CreationDate": "2015-11-05 07:11:33",
        "validated": false,
        "QueryBody_Original": "SELECT  Comments.CreationDate,\n       Comments.Id As [Comment Link], \n       Comments.UserId As [User Link], \n       Users.Reputation\nFROM Comments\n    INNER JOIN Users On Comments.UserId = Users.Id\nWHERE LOWER(Comments.Text) LIKE LOWER('%##SearchWord##%') AND\nComments.CreationDate between DateAdd(DD,-##DaysOld##,GETDATE()) and GETDATE()\nORDER BY Comments.CreationDate DESC;"
    },
    {
        "QuerySetId": 383600,
        "Title": "Users Ordered by a Tag Score Based on Location",
        "Description": "Returns a list of users ordered by their score in a tag and in a location. Suitable to find out what is your rank in tag in your location. - Thanks to @rene (http:\/\/meta.stackexchange.com\/users\/158100\/rene)",
        "QueryBody": "SELECT  u.id as [User Link]\n     , sum(score) as totalscore\nfrom posts p\ninner join posttags pt on pt.postid = p.id \n                       or pt.postid = p.parentid\ninner join tags t on t.id = pt.tagid\ninner join users u on u.id = p.owneruserid\nwhere tagname = ##tag1:string## collate SQL_Latin1_General_CP1_CI_AI \nand location like '%'+ ##location:string## + '%'  collate SQL_Latin1_General_CP1_CI_AI \ngroup by u.id\norder by sum(score) desc",
        "CreationDate": "2015-11-02 13:38:09",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 383617,
        "Title": "List Users Ordered by a Tag Score Based on Location",
        "Description": "Returns a list of users ordered by their score in a tag and in a location. Suitable to find out what is your ranking in tag in your location. - Thanks to @rene (http:\/\/meta.stackexchange.com\/users\/158100\/rene)",
        "QueryBody": "SELECT  u.id as [User Link]\n     , sum(score) as totalscore\nfrom posts p\ninner join posttags pt on pt.postid = p.id \n                       or pt.postid = p.parentid\ninner join tags t on t.id = pt.tagid\ninner join users u on u.id = p.owneruserid\nwhere tagname = ##tag1:string## collate SQL_Latin1_General_CP1_CI_AI \nand location like '%'+ ##location:string## + '%'  collate SQL_Latin1_General_CP1_CI_AI \ngroup by u.id\norder by sum(score) desc",
        "CreationDate": "2015-11-02 14:13:09",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 383797,
        "Title": "Downvoted Posts with No Answers or Comments",
        "Description": null,
        "QueryBody": "SELECT  Id as [Post Link],\n       OwnerUserId as [User Link],\n       Score,\n       ViewCount\nFROM Posts\nWHERE Score <= ##MinScore:int?-2## AND\n      CommentCount = 0 AND\n      AnswerCount = 0 AND\n      ClosedDate IS NULL\nORDER By Score ASC",
        "CreationDate": "2015-11-03 00:18:53",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 384456,
        "Title": "closed questions with my answers",
        "Description": null,
        "QueryBody": "SELECT  q.Id as [Post Link], q.ClosedDate, a.CreationDate as [Answer Date]\nfrom Posts a\nleft join Posts q on a.ParentId = q.Id\nwhere a.OwnerUserId = ##UserId:int##\n  and q.ClosedDate is not null  -- closed\n  and a.PostTypeId = 2 -- answer  \n  and q.PostTypeId = 1 -- question\nGroup By q.Id, q.ClosedDate, a.CreationDate\nOrder By q.ClosedDate Desc",
        "CreationDate": "2015-11-04 04:12:01",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 384545,
        "Title": "Users with the highest reputation per answers and questions count ratio",
        "Description": "To find your own ratio, go here: \r\n\r\nhttps:\/\/data.stackexchange.com\/stackoverflow\/query\/384546\/users-reputation-per-answers-and-questions-count-ratio",
        "QueryBody": "SELECT  TOP(500) u.Id AS [User Link], u.DisplayName, u.Reputation, COUNT(p.Id) AS [Posts count], (CAST(u.Reputation AS float) \/ CAST(COUNT(p.Id) AS float)) AS [Ratio]\nFROM Users u\nLEFT JOIN Posts p ON u.Id = p.OwnerUserId\nWHERE p.PostTypeId = 1 OR p.PostTypeId = 2\nGROUP BY u.Id, u.DisplayName, u.Reputation\nHAVING COUNT(p.Id) > ##MinimalPostsCount:int?500##\nORDER BY Ratio DESC",
        "CreationDate": "2015-11-04 15:40:34",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 384546,
        "Title": "User's reputation per answers and questions count ratio",
        "Description": "To find users with the maximum ratio, go here:\r\n\r\nhttps:\/\/data.stackexchange.com\/unix\/query\/384545\/users-with-the-highest-reputation-per-answers-and-questions-count-ratio\r\n",
        "QueryBody": "SELECT  TOP(1) u.Id AS [User Link], u.DisplayName, u.Reputation, COUNT(p.Id) AS [Posts count], (CAST(u.Reputation AS float) \/ CAST(COUNT(p.Id) AS float)) AS [Ratio]\nFROM Users u\nLEFT JOIN Posts p ON u.Id = p.OwnerUserId\nWHERE (p.PostTypeId = 1 OR p.PostTypeId = 2) AND u.Id = ##UserId:int##\nGROUP BY u.Id, u.DisplayName, u.Reputation\nORDER BY Ratio DESC",
        "CreationDate": "2015-11-04 15:40:41",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 385100,
        "Title": "Suggested edit statistics for user",
        "Description": null,
        "QueryBody": "WITH  SuggestionResults as (\nselect \nid,\n(case when approvalDate is null then 0 else 1 end) as approved,\n(case when rejectionDate is null then 0 else 1 end) as rejected\n\nfrom SuggestedEdits\nwhere OwnerUserId = ##userid:int##\n)\n\nselect sum(approved) \/ cast(count(id) as float) as approvalPercentage\nfrom SuggestionResults",
        "CreationDate": "2015-11-05 00:52:47",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 385746,
        "Title": "How effective are users posts",
        "Description": "This algorithm calculates the ratio of reputation per posts and answers of a user. It also compares it to the average among the users with the same reputation.",
        "QueryBody": "DECLARE  @userReputation int;\n\nSELECT @userReputation = Reputation FROM Users WHERE Id = ##UserId:int##\n\nSELECT TOP(500) u.Id AS [User Link], u.DisplayName, u.Reputation, COUNT(p.Id) AS [Posts count], (CAST(u.Reputation AS float) \/ CAST(COUNT(p.Id) AS float)) AS [Ratio]\nFROM Users u\nLEFT JOIN Posts p ON u.Id = p.OwnerUserId\nWHERE p.PostTypeId = 1 OR p.PostTypeId = 2\nGROUP BY u.Id, u.DisplayName, u.Reputation\nHAVING u.Reputation > @userReputation - 250 AND u.Reputation < @userReputation + 250\nORDER BY Reputation DESC\n\nPRINT @userReputation",
        "CreationDate": "2015-11-05 15:07:23",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 385954,
        "Title": "Extract a number after a number pattern in SQL",
        "Description": null,
        "QueryBody": "DECLARE  @String VARCHAR(10) = '130-0029';\n\nSELECT CONVERT(INT, STUFF(@String, 1, CHARINDEX('-', @String), ''));",
        "CreationDate": "2015-11-05 23:11:15",
        "validated": false,
        "QueryBody_Original": "DECLARE  @String VARCHAR(10) = '130-0029';\n\nSELECT CONVERT(INT, STUFF(@String, 1, CHARINDEX('-', @String), ''));"
    },
    {
        "QuerySetId": 386203,
        "Title": "Potentially conflicting edits in last N Days",
        "Description": null,
        "QueryBody": "SELECT  (\n  SELECT count(*)\n  From PostHistory PH2\n  JOIN (\n    SELECT Id,PostId,CreationDate\n    from PostHistory PH1\n    Where PH1.PostHistoryTypeId IN (4, 5, 6)\n      AND PH1.CreationDate > DATEADD(\"day\",-##LastNDays?90##,GetDate())\n  ) PH on PH2.Id <> PH.Id AND PH2.PostId = PH.PostId\n  Where ABS(DATEDIFF(\"second\",PH2.CreationDate,PH.CreationDate)) < ##WithinSeconds?30##\n    AND PH2.CreationDate > DATEADD(\"day\",-##LastNDays##,GetDate())\n    AND PH2.PostHistoryTypeId IN (4, 5, 6)\n) Editsin60secs, count(*) Total\nFROM PostHistory P\nWhere P.CreationDate > DATEADD(\"day\",-##LastNDays##,GetDate())\nAND P.PostHistoryTypeId IN (4, 5, 6)",
        "CreationDate": "2015-11-06 15:53:06",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 386960,
        "Title": "Which questions were only answered by me?",
        "Description": null,
        "QueryBody": "DECLARE  @UserId int = ##UserId##\n\nselect 'https:\/\/codegolf.stackexchange.com\/questions\/' + convert(varchar(20), q.Id)\nfrom Posts q\njoin Posts a\n  on a.ParentId = q.Id\n  and a.PostTypeId = 2\nwhere q.PostTypeId = 1\ngroup by q.Id\nhaving min(a.OwnerUserId) = @UserId\n  and max(a.OwnerUserId) = @UserId;",
        "CreationDate": "2015-11-07 23:01:09",
        "validated": false,
        "QueryBody_Original": "DECLARE  @UserId int = ##UserId##\n\nselect 'https:\/\/codegolf.stackexchange.com\/questions\/' + convert(varchar(20), q.Id)\nfrom Posts q\njoin Posts a\n  on a.ParentId = q.Id\n  and a.PostTypeId = 2\nwhere q.PostTypeId = 1\ngroup by q.Id\nhaving min(a.OwnerUserId) = @UserId\n  and max(a.OwnerUserId) = @UserId;"
    },
    {
        "QuerySetId": 387668,
        "Title": "Questions and Answers per hour of the day",
        "Description": null,
        "QueryBody": "DECLARE  @LastFullDayOfData DATE;\n\nSELECT @LastFullDayOfData = DATEADD(DAY, -1, MAX(CONVERT(DATE, [CreationDate])))\nFROM [Posts]\n\nprint @LastFullDayOfData\n\nselect\n  [Hour of Day],\n  AVG([Hours open])\nfrom\n(\n  SELECT\n    DATEPART(HOUR, [ClosedDate]) [Hour of Day],\n    PostTypeId,\n    DATEDIFF(hour, [CreationDate], [ClosedDate]) [Hours open]\n  from Posts p\n  where\n    [CreationDate] <= @LastFullDayOfData AND\n    ClosedDate IS NOT NULL AND\n    PostTypeId = 1 AND\n    [CreationDate] >= '2014-01-01'\n) as X\ngroup by [Hour of Day]\norder by [Hour of Day] desc",
        "CreationDate": "2015-11-09 23:15:13",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 387985,
        "Title": "Percentage of Users that have only one question",
        "Description": null,
        "QueryBody": "SELECT  100.00*NRU.#NRU\/#U\nFROM \n(\nSELECT count(Users.Id) as '#U'\nFROM Users\n) as U,\n(\n  SELECT count(INRU.Id) as '#NRU'\n  FROM (\n    SELECT Users.Id as 'Id'\n    FROM Users, Posts\n    WHERE Users.Id = Posts.OwnerUserId and Posts.PostTypeId = 1\n    GROUP BY Users.Id\n    HAVING count(Posts.Id) = ##Qs:int##\n      ) as INRU\n) as NRU",
        "CreationDate": "2015-11-11 08:09:55",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 389007,
        "Title": "Post Views Histogram (Regular Scale)",
        "Description": null,
        "QueryBody": "WITH  PostScores as (\n    select p.ViewCount,\n           p.PostTypeId,\n           count(*) * 1.0 as PostCount\n    from Posts p\n    where p.PostTypeId in (1)\n      and ClosedDate is null\n      and Datediff(day, p.CreationDate, getdate()) > ##minAge:int?7##\n    group by ViewCount, p.PostTypeId\n)\nselect ViewCount,\n       case when PostTypeId = '1'\n            then 'Questions'\n            else 'Answers'\n       end as Series,\n       PostCount as [Count]\nfrom PostScores\nwhere PostCount >= ##MinPostViews:int?0##\n  and ViewCount >= ##MinViews:int?0##\n  and ViewCount <= ##MaxViews:int?1000##\norder by Series, ViewCount",
        "CreationDate": "2015-11-11 18:24:08",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 390471,
        "Title": "Top 100 Users In A Given Tag And In The Given Country",
        "Description": "What better way to learn interesting things about tags you are interested in than to check out the top 100 users in that tag?\r\n\r\nInspired by this query:\r\n\r\nhttp:\/\/data.stackexchange.com\/stackoverflow\/s\/1688\/c-top100-users\r\n",
        "QueryBody": "DECLARE  @TagName nvarchar(25) = ##Tag:string##\nDECLARE @country nvarchar(25) = ##Country:string##\n\nSELECT TOP 100\n    ROW_NUMBER() over(ORDER BY COUNT(*) DESC),\n    u.Id as [User Link],\n    COUNT(*) AS Points,\n    Location AS Country\nFROM Tags t with (nolock)\n    INNER JOIN PostTags pt with (nolock)ON pt.TagId = t.id\n    INNER JOIN Posts p with (nolock) ON p.ParentId = pt.PostId\n    INNER JOIN Votes v with (nolock) ON v.PostId = p.Id and v.VoteTypeId = 2\n    inner join Users u with (nolock) on u.Id = p.OwnerUserId\nWHERE \n    p.CommunityOwnedDate IS NULL\n    and t.TagName = @TagName\nGROUP BY u.Id, Location\nORDER BY Points DESC",
        "CreationDate": "2015-11-13 03:11:22",
        "validated": false,
        "QueryBody_Original": "DECLARE  @TagName nvarchar(25) = ##Tag:string##\nDECLARE @country nvarchar(25) = ##Country:string##\n\nSELECT TOP 100\n    ROW_NUMBER() over(ORDER BY COUNT(*) DESC),\n    u.Id as [User Link],\n    COUNT(*) AS Points,\n    Location AS Country\nFROM Tags t with (nolock)\n    INNER JOIN PostTags pt with (nolock)ON pt.TagId = t.id\n    INNER JOIN Posts p with (nolock) ON p.ParentId = pt.PostId\n    INNER JOIN Votes v with (nolock) ON v.PostId = p.Id and v.VoteTypeId = 2\n    inner join Users u with (nolock) on u.Id = p.OwnerUserId\nWHERE \n    p.CommunityOwnedDate IS NULL\n    and t.TagName = @TagName\nGROUP BY u.Id, Location\nORDER BY Points DESC"
    },
    {
        "QuerySetId": 392586,
        "Title": "Single tag for top questions",
        "Description": null,
        "QueryBody": "SELECT  TOP(##Number##) Posts.Id, MIN(Tags.TagName), Posts.Score FROM Posts\nINNER JOIN PostTags\nON Posts.Id=PostTags.PostId\nINNER JOIN Tags\nON PostTags.TagId=Tags.Id\nGROUP BY Posts.Id, Posts.ViewCount, Posts.Score\nORDER BY Posts.ViewCount DESC",
        "CreationDate": "2015-11-16 03:21:08",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 393718,
        "Title": "Users with more than X reputation",
        "Description": null,
        "QueryBody": "SELECT  Count(*) As AmountOfUsers\nFrom Users\nWhere Reputation>##Reputation##",
        "CreationDate": "2015-11-17 19:54:07",
        "validated": false,
        "QueryBody_Original": "SELECT  Count(*) As AmountOfUsers\nFrom Users\nWhere Reputation>##Reputation##"
    },
    {
        "QuerySetId": 393837,
        "Title": "Answer score distribution for a user",
        "Description": "Returns the (log 10 of the) distribution of the scores for a given user's answers.",
        "QueryBody": "SELECT \nScore,COUNT(*)\nFROM\n  Posts\nWHERE OwnerUserId=##UserId##\n  AND PostTypeId=2 --answers\nGROUP BY Score\nORDER BY Score ASC",
        "CreationDate": "2016-07-14 15:20:50",
        "validated": false,
        "QueryBody_Original": "SELECT \nScore,COUNT(*)\nFROM\n  Posts\nWHERE OwnerUserId=##UserId##\n  AND PostTypeId=2 --answers\nGROUP BY Score\nORDER BY Score ASC"
    },
    {
        "QuerySetId": 394250,
        "Title": "Most common usernames on Stack Overflow",
        "Description": "Same as:\r\n\r\nhttp:\/\/data.stackexchange.com\/stackoverflow\/query\/382188\/displayname-uniqueness\r\n\r\nbut with normalization of displayname.\r\n\r\n\r\nCollations: see \"What does 'COLLATE SQL_Latin1_General_CP1_CI_AS' do?\"(https:\/\/stackoverflow.com\/questions\/5039211\/what-does-collate-sql-latin1-general-cp1-ci-as-do)\r\n",
        "QueryBody": "SELECT  TOP ##topn:int?10##\nu.displayname COLLATE SQL_Latin1_General_CP1_CI_AS as [User Link],\ncount(*) as [times name used]\nfrom Users u\ngroup by u.displayname COLLATE SQL_Latin1_General_CP1_CI_AS\norder by count(*) desc",
        "CreationDate": "2020-08-27 12:20:00",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 394559,
        "Title": "Compare Size and Growth Trends for StackOverflow Tags (Angularjs, Reactjs, GWT, Extjs)",
        "Description": null,
        "QueryBody": "DECLARE  @6MonthsAgo datetime = DATEADD(month, -6, GETDATE())\n\nDECLARE @1YearAgo datetime = DATEADD(month, -12, GETDATE())\n\nDECLARE @2YearsAgo datetime = DATEADD(month, -24, GETDATE())\n\nSELECT tagname, LEFT(CONVERT(varchar, posts.creationdate,112),6) AS creationdate, COUNT(*) AS Posts FROM Tags\n    INNER JOIN PostTags ON PostTags.TagId = Tags.id\n    INNER JOIN Posts ON Posts.ParentId = PostTags.PostId\n    WHERE lower(tagname) IN ('angular','react','gwt','extjs')\n    AND posts.creationdate > @2YearsAgo\ngroup by tagname, LEFT(CONVERT(varchar, posts.creationdate,112),6)\norder by creationdate",
        "CreationDate": "2015-11-18 20:45:09",
        "validated": false,
        "QueryBody_Original": "DECLARE  @6MonthsAgo datetime = DATEADD(month, -6, GETDATE())\n\nDECLARE @1YearAgo datetime = DATEADD(month, -12, GETDATE())\n\nDECLARE @2YearsAgo datetime = DATEADD(month, -24, GETDATE())\n\nSELECT tagname, LEFT(CONVERT(varchar, posts.creationdate,112),6) AS creationdate, COUNT(*) AS Posts FROM Tags\n    INNER JOIN PostTags ON PostTags.TagId = Tags.id\n    INNER JOIN Posts ON Posts.ParentId = PostTags.PostId\n    WHERE lower(tagname) IN ('angular','react','gwt','extjs')\n    AND posts.creationdate > @2YearsAgo\ngroup by tagname, LEFT(CONVERT(varchar, posts.creationdate,112),6)\norder by creationdate"
    },
    {
        "QuerySetId": 395185,
        "Title": "Find my comments with link to them",
        "Description": null,
        "QueryBody": "WITH  links\nSELECT *,\n  'http:\/\/stackoverflow.com\/questions\/' + CAST(PostAnswers.ParentId AS VARCHAR(20))\n  +  '\/title\/' + CAST(Comments.PostId AS VARCHAR(20))\n  + '?noredirect=1#comment' + CAST(Comments.Id AS VARCHAR(20))\n  + '_' + CAST(Comments.PostId AS VARCHAR(20))\nFROM Comments\n  LEFT OUTER JOIN Posts AS PostAnswers ON Comments.PostId = PostAnswers.Id\nWHERE Comments.UserId = ##UserId## \nORDER BY Comments.Score DESC",
        "CreationDate": "2015-12-17 22:36:31",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 395429,
        "Title": "Posts using Stack Snippets without JS \/ CSS \/ HTML tags",
        "Description": null,
        "QueryBody": "SELECT  TOP ##MaxRows:int?100##\n  Post.Id AS [Post Link],\n  PostTypes.Name AS [Type],\n  Post.OwnerUserId AS [User Link],\n  Post.CreationDate,\n  COALESCE(Post.ViewCount, Parent.ViewCount) AS [Views],\n  COALESCE(Post.Tags, Parent.Tags) AS [Tags]\nFROM Posts AS Post\n  JOIN PostTypes ON Post.PostTypeId = PostTypes.Id\n  LEFT JOIN Posts AS Parent ON Post.ParentId = Parent.Id\n  LEFT JOIN (\n    PostTags JOIN Tags ON Tags.Id = PostTags.TagId AND (\n      TagName LIKE '%ajax%'\n      OR TagName LIKE '%coffeescript%'\n      OR TagName LIKE '%css%'\n      or TagName LIKE '%ecmascript-6%'\n      OR TagName LIKE '%html%'\n      OR TagName LIKE '%javascript%'\n      OR TagName LIKE '%jquery%'\n    )\n  ) ON PostTags.PostId IN (Post.Id, Post.ParentId)\nWHERE PostTags.PostId IS NULL",
        "CreationDate": "2017-08-20 23:28:36",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 395990,
        "Title": "downvoted closed questions by users with high rep",
        "Description": null,
        "QueryBody": "SELECT  TOP ##topn:int?100## p.Id AS [Post Link], p.Score AS Score, p.CreationDate AS CreationDate, p.ClosedDate AS ClosedDate,\nu.Reputation AS rep,u.LastAccessDate AS LastAccessDate\nFROM Posts p INNER JOIN Users u ON p.OwnerUserId=u.Id\nWHERE p.Score<=##maxscore:int?-10## AND u.Reputation>=##minrep:int?10000##\nAND p.ClosedDate IS NOT NULL\nORDER BY p.CreationDate DESC",
        "CreationDate": "2015-11-21 12:41:57",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 396403,
        "Title": "Users by percent of answers that have negative score",
        "Description": "Returns the fraction of each user's answers that have negative score, as well as a link to the answer-score distribution for each user. It includes a threshold by user reputation, total number of answers by the user, as well as the possibility (by re-setting ScoreThreshold) to get the percentage of answers below a user-set threshold.",
        "QueryBody": "SELECT \n  Users.Id AS [User Link],\n  Users.Reputation AS Reputation,\n  COUNT(*) AS 'No. answers',\n  SUM(CASE WHEN Posts.Score<##ScoreThreshold?0## THEN 1 ELSE 0 END)\n  AS 'No. neg.',\n  CAST(100*\n    CAST( SUM(CASE WHEN Posts.Score<##ScoreThreshold?0## THEN 1 ELSE 0 END) AS FLOAT)\n    \/CAST( COUNT(*) AS FLOAT)\n  AS NUMERIC(36,2)) AS '% negative score',\n  'http:\/\/data.stackexchange.com\/physics\/query\/393837?UserId='+CAST(Users.Id AS varchar)+'#graph|Link' AS 'Answer score distribution'\nFROM  Posts\nINNER JOIN Users ON Posts.OwnerUserId=Users.Id\nWHERE PostTypeId=2 --answers\n  AND Users.Reputation >=##ReputationThreshold?1000##\nGROUP BY Users.Id, Users.Reputation\n  HAVING COUNT(*)>##NoAnswersThreshold?10##\nORDER BY '% negative score' DESC\n\n -- ScoreThreshold: Minimum user score",
        "CreationDate": "2016-07-14 14:15:24",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 397154,
        "Title": "How rare are my badges?",
        "Description": null,
        "QueryBody": "DECLARE  @UserId int = ##UserId##\n\n--select * from badges where userid = @UserId\n\nselect a.id,\n       a.owneruserid,\n       -- nice answer, score at least 10\n       CASE WHEN a.score >= 10  THEN 1 ELSE 0 END AS NiceAnswer,\n       -- good answer, score at least 25\n       CASE WHEN a.score >= 25  THEN 1 ELSE 0 END AS GoodAnswer,\n       -- great answer, score at least 100\n       CASE WHEN a.score >= 100 THEN 1 ELSE 0 END AS GreatAnswer,\n       -- guru, accepted and score at least 40\n       CASE WHEN a.score >= 40  AND a.id = q.acceptedanswerid THEN 1 ELSE 0 END AS Guru\n       \n       -- total, FTW\n       -- NiceAnswer + GoodAnswer + GreatAnswer + Guru AS Total\n       \n  from posts a\n  join posts q on a.parentid = q.id\n where a.posttypeid = 2\n   and a.owneruserid = @UserId",
        "CreationDate": "2015-11-24 01:02:30",
        "validated": false,
        "QueryBody_Original": "DECLARE  @UserId int = ##UserId##\n\n--select * from badges where userid = @UserId\n\nselect a.id,\n       a.owneruserid,\n       -- nice answer, score at least 10\n       CASE WHEN a.score >= 10  THEN 1 ELSE 0 END AS NiceAnswer,\n       -- good answer, score at least 25\n       CASE WHEN a.score >= 25  THEN 1 ELSE 0 END AS GoodAnswer,\n       -- great answer, score at least 100\n       CASE WHEN a.score >= 100 THEN 1 ELSE 0 END AS GreatAnswer,\n       -- guru, accepted and score at least 40\n       CASE WHEN a.score >= 40  AND a.id = q.acceptedanswerid THEN 1 ELSE 0 END AS Guru\n       \n       -- total, FTW\n       -- NiceAnswer + GoodAnswer + GreatAnswer + Guru AS Total\n       \n  from posts a\n  join posts q on a.parentid = q.id\n where a.posttypeid = 2\n   and a.owneruserid = @UserId"
    },
    {
        "QuerySetId": 397220,
        "Title": "for Andy, where was this user the dupe voter",
        "Description": "http:\/\/chat.meta.stackexchange.com\/transcript\/message\/4234072#4234072",
        "QueryBody": "DECLARE  @userid as nvarchar(32)\nDECLARE @uid as int = ##UserId##\nselect @userid='\"Id\":'+cast(@uid as nvarchar)+','\n\nselect postid as [Post Link]\n, @userid, len(@userid)\n, [text]\nfrom posthistory\nwhere posthistorytypeid = 10 -- close\nand [text] like '%'+@userid+'%'\nand (comment = '101' or comment = '1')",
        "CreationDate": "2015-11-23 23:42:46",
        "validated": false,
        "QueryBody_Original": "DECLARE  @userid as nvarchar(32)\nDECLARE @uid as int = ##UserId##\nselect @userid='\"Id\":'+cast(@uid as nvarchar)+','\n\nselect postid as [Post Link]\n, @userid, len(@userid)\n, [text]\nfrom posthistory\nwhere posthistorytypeid = 10 -- close\nand [text] like '%'+@userid+'%'\nand (comment = '101' or comment = '1')"
    },
    {
        "QuerySetId": 397698,
        "Title": "Revival badge candidates for a certain tag",
        "Description": null,
        "QueryBody": "DECLARE  @tag VARCHAR(30) = ##tag:string##\n\nSELECT TOP 1000\n    a.Id AS [Post Link],\n    a.Score,\n    a.CreationDate\nFROM Posts a\nWHERE\n    a.PostTypeId = 2\n    AND EXISTS\n    (\n        SELECT *\n        FROM Posts q\n        WHERE q.Id = a.ParentId\n        AND q.PostTypeId = 1\n        AND a.CreationDate > q.CreationDate + 30\n        AND Tags LIKE '%<' + LOWER(@tag) + '>%'\n    )\n    \nORDER BY a.Score DESC, a.CreationDate ASC",
        "CreationDate": "2015-11-24 23:10:58",
        "validated": false,
        "QueryBody_Original": "DECLARE  @tag VARCHAR(30) = ##tag:string##\n\nSELECT TOP 1000\n    a.Id AS [Post Link],\n    a.Score,\n    a.CreationDate\nFROM Posts a\nWHERE\n    a.PostTypeId = 2\n    AND EXISTS\n    (\n        SELECT *\n        FROM Posts q\n        WHERE q.Id = a.ParentId\n        AND q.PostTypeId = 1\n        AND a.CreationDate > q.CreationDate + 30\n        AND Tags LIKE '%<' + LOWER(@tag) + '>%'\n    )\n    \nORDER BY a.Score DESC, a.CreationDate ASC"
    },
    {
        "QuerySetId": 398030,
        "Title": "Quarter of ones life on SE by age",
        "Description": null,
        "QueryBody": "DECLARE  @stackOverflowStarted DATETIME;\nDECLARE @stackOverflowAge INT;\nDECLARE @stackOverflowQuarterAgePrecision INT;\n\nSELECT @stackOverflowStarted = '09-15-2008';\nSELECT @stackOverflowAge = DATEDIFF(DAY, @stackOverflowStarted, GETDATE());\nSELECT @stackOverflowQuarterAgePrecision = @stackOverflowAge \/ 100;\n\nSELECT\n  DATEADD(DAY, -([n].[Number]), GETDATE()) [date],\n  [j].[Person],\n  [j].[Awesome]\nFROM\n(SELECT TOP 100 ROW_NUMBER() OVER (ORDER BY [Id] ASC) [Number], 1 [Pred] FROM [Users]) [n]\nJOIN\n(\n  SELECT 1 [Pred], 'JimmyHoffa' [Person], 1000 [Awesome]\n  UNION\n  SELECT 1 [Pred], 'GlenH7' [Person], -242 [Awesome]\n  UNION\n  SELECT 1 [Pred], 'whatsisname' [Person], -250 [Awesome]\n  UNION\n  SELECT 1 [Pred], 'Ampt' [Person], -255 [Awesome]\n) [j] ON [j].[Pred] = [n].[Pred]",
        "CreationDate": "2015-11-24 23:46:40",
        "validated": false,
        "QueryBody_Original": "DECLARE  @stackOverflowStarted DATETIME;\nDECLARE @stackOverflowAge INT;\nDECLARE @stackOverflowQuarterAgePrecision INT;\n\nSELECT @stackOverflowStarted = '09-15-2008';\nSELECT @stackOverflowAge = DATEDIFF(DAY, @stackOverflowStarted, GETDATE());\nSELECT @stackOverflowQuarterAgePrecision = @stackOverflowAge \/ 100;\n\nSELECT\n  DATEADD(DAY, -([n].[Number]), GETDATE()) [date],\n  [j].[Person],\n  [j].[Awesome]\nFROM\n(SELECT TOP 100 ROW_NUMBER() OVER (ORDER BY [Id] ASC) [Number], 1 [Pred] FROM [Users]) [n]\nJOIN\n(\n  SELECT 1 [Pred], 'JimmyHoffa' [Person], 1000 [Awesome]\n  UNION\n  SELECT 1 [Pred], 'GlenH7' [Person], -242 [Awesome]\n  UNION\n  SELECT 1 [Pred], 'whatsisname' [Person], -250 [Awesome]\n  UNION\n  SELECT 1 [Pred], 'Ampt' [Person], -255 [Awesome]\n) [j] ON [j].[Pred] = [n].[Pred]"
    },
    {
        "QuerySetId": 398040,
        "Title": "Combien de mots contribu\u00e9s ?",
        "Description": "From: data.stackexchange.com\/english\/query\/398004\/how-many-words-have-i-written-all-together",
        "QueryBody": "SELECT  sum(len(Body) - len(replace(Body, ' ', '')) + 1) as NumbofWords\nfrom Posts p\nwhere p.OwnerUserId = ##UserId##",
        "CreationDate": "2015-11-24 23:41:18",
        "validated": false,
        "QueryBody_Original": "SELECT  sum(len(Body) - len(replace(Body, ' ', '')) + 1) as NumbofWords\nfrom Posts p\nwhere p.OwnerUserId = ##UserId##"
    },
    {
        "QuerySetId": 398046,
        "Title": "Chance of being awesome by date",
        "Description": null,
        "QueryBody": "SELECT \n  DATEADD(DAY, -([Number]), GETDATE()) [date],\n  [Person],\n  [Items]\nFROM\n(\n  SELECT\n    (POWER([Number], 2) + POWER([Numberr], 2)) + (14*[Number]) + (14*[Numberr]) + 61 [Items],\n    1 [Pred],\n    'MichaelT' [Person],\n    [u].[Number]\n  FROM\n  (\n    SELECT TOP 360 1 [Pred], ROW_NUMBER() OVER (ORDER BY [Id] ASC) [Number] FROM [Users]\n  ) [u] INNER JOIN\n  (SELECT TOP 360 1 [Pred], ROW_NUMBER() OVER (ORDER BY [Id] ASC) [Numberr] FROM [Users]) [k] ON [k].[Pred] = [u].[Pred]\n) [n] ORDER by [Items]",
        "CreationDate": "2015-11-25 01:06:25",
        "validated": false,
        "QueryBody_Original": "SELECT \n  DATEADD(DAY, -([Number]), GETDATE()) [date],\n  [Person],\n  [Items]\nFROM\n(\n  SELECT\n    (POWER([Number], 2) + POWER([Numberr], 2)) + (14*[Number]) + (14*[Numberr]) + 61 [Items],\n    1 [Pred],\n    'MichaelT' [Person],\n    [u].[Number]\n  FROM\n  (\n    SELECT TOP 360 1 [Pred], ROW_NUMBER() OVER (ORDER BY [Id] ASC) [Number] FROM [Users]\n  ) [u] INNER JOIN\n  (SELECT TOP 360 1 [Pred], ROW_NUMBER() OVER (ORDER BY [Id] ASC) [Numberr] FROM [Users]) [k] ON [k].[Pred] = [u].[Pred]\n) [n] ORDER by [Items]"
    },
    {
        "QuerySetId": 398543,
        "Title": "List of Users in belgium",
        "Description": null,
        "QueryBody": "DECLARE  @location varchar = ##location##\nselect  Id as [User Link], location, reputation from users where location like '%##location##%'\norder by reputation desc",
        "CreationDate": "2015-11-25 15:12:13",
        "validated": false,
        "QueryBody_Original": "DECLARE  @location varchar = ##location##\nselect  Id as [User Link], location, reputation from users where location like '%##location##%'\norder by reputation desc"
    },
    {
        "QuerySetId": 398740,
        "Title": "-- List of Users in a given location",
        "Description": null,
        "QueryBody": "DECLARE  @location varchar = ##location##\nselect  Id as [User Link], location, DisplayName, Age, WebsiteUrl,AboutMe, reputation from users where location like '%##location##%'",
        "CreationDate": "2015-11-25 20:54:09",
        "validated": false,
        "QueryBody_Original": "DECLARE  @location varchar = ##location##\nselect  Id as [User Link], location, DisplayName, Age, WebsiteUrl,AboutMe, reputation from users where location like '%##location##%'"
    },
    {
        "QuerySetId": 398796,
        "Title": "My unaccepted answers with non-zero probability of acceptance",
        "Description": null,
        "QueryBody": "DECLARE  @UserId INT = ##UserId##\nDECLARE @Threshold INT = ##ActivityThreshold:int?2##\n\nSELECT\n  Q.Id AS [Post Link]\nFROM Posts Q\nINNER JOIN Posts A ON (Q.Id = A.ParentId)\nINNER JOIN Users U ON (Q.OwnerUserId = U.Id)\nWHERE\n  Q.PostTypeId = 1\n  AND A.PostTypeId = 2\n  AND A.OwnerUserId = @UserId\n  AND Q.AcceptedAnswerId IS NULL\n  AND Q.ClosedDate IS NULL\n  AND NOT EXISTS (\n    SELECT A2.Id\n    FROM Posts A2\n    WHERE\n      A2.PostTypeId = 2\n      AND A2.ParentId = Q.Id\n      AND A2.Id <> A.Id\n      AND A2.Score > A.Score\n    )\n    AND U.LastAccessDate >= DATEADD(DAY, ##ActivityThreshold##, Q.CreationDate)\nORDER BY A.CreationDate ASC",
        "CreationDate": "2015-11-25 22:02:38",
        "validated": false,
        "QueryBody_Original": "DECLARE  @UserId INT = ##UserId##\nDECLARE @Threshold INT = ##ActivityThreshold:int?2##\n\nSELECT\n  Q.Id AS [Post Link]\nFROM Posts Q\nINNER JOIN Posts A ON (Q.Id = A.ParentId)\nINNER JOIN Users U ON (Q.OwnerUserId = U.Id)\nWHERE\n  Q.PostTypeId = 1\n  AND A.PostTypeId = 2\n  AND A.OwnerUserId = @UserId\n  AND Q.AcceptedAnswerId IS NULL\n  AND Q.ClosedDate IS NULL\n  AND NOT EXISTS (\n    SELECT A2.Id\n    FROM Posts A2\n    WHERE\n      A2.PostTypeId = 2\n      AND A2.ParentId = Q.Id\n      AND A2.Id <> A.Id\n      AND A2.Score > A.Score\n    )\n    AND U.LastAccessDate >= DATEADD(DAY, ##ActivityThreshold##, Q.CreationDate)\nORDER BY A.CreationDate ASC"
    },
    {
        "QuerySetId": 398989,
        "Title": "How many questions can I use the gold badge close hammer on?",
        "Description": "How many questions can a user close or reopen single-handedly thanks to having a gold badge in one of its tags?\r\n\r\nThe exact rules are tricky, because the gold badge hammer can't be used if you edited the tags that would confer it. This query gives a lower bound (assuming any tag edit disaqualifies) and an upper bound (assuming no tag edit disqualifies).\r\n\r\nAdapted from http:\/\/data.stackexchange.com\/stackoverflow\/query\/398987 by Undo.",
        "QueryBody": "SELECT  'between', count(*)\n  from PostTags pt\n  inner join Posts p on p.Id = pt.PostId\n  inner join Tags t on pt.TagId = t.Id\n  inner join Badges b on b.Name = t.TagName\n  where b.TagBased = 1 and b.Class = 1 and b.UserId = ##User##\n  and not exists (\n    SELECT 1\n    from PostHistory ph\n    where (ph.PostHistoryTypeId = 3 or ph.PostHistoryTypeId = 6)\n      and ph.UserId = ##User##\n      and ph.PostId = p.Id\n  )\n)\nunion\n(\n  SELECT 'and', count(*)\n  from PostTags pt\n  inner join Posts p on p.Id = pt.PostId\n  inner join Tags t on pt.TagId = t.Id\n  inner join Badges b on b.Name = t.TagName\n  where b.TagBased = 1 and b.Class = 1 and b.UserId = ##User##\n)\nunion\n(\n  SELECT 'out of', count(*)\n  from Posts p\n)",
        "CreationDate": "2015-11-26 07:50:52",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 400218,
        "Title": "Pundit Progress With Future Outlook",
        "Description": null,
        "QueryBody": "DECLARE  @UserId as int = ##UserId:int?0##;\n\nSelect Id as [Comment Link], Score, CreationDate\nFrom Comments\nWhere (UserId = @UserId And Score >= 3)\nOrder By Score Desc",
        "CreationDate": "2015-12-13 10:39:07",
        "validated": false,
        "QueryBody_Original": "DECLARE  @UserId as int = ##UserId:int?0##;\n\nSelect Id as [Comment Link], Score, CreationDate\nFrom Comments\nWhere (UserId = @UserId And Score >= 3)\nOrder By Score Desc"
    },
    {
        "QuerySetId": 400562,
        "Title": "% of total accepted answers by user",
        "Description": null,
        "QueryBody": "WITH  totalaccepted as (\n  select count(*) total, sum(a.score) as totalscore\n  from posts q inner join posts a on a.id = q.acceptedanswerid\n  where q.deletiondate is null\n),\n\nacceptcounts as (\n  select a.owneruserid, count(*) as accepted, sum(a.score) as acceptedscore\n  from posts q inner join posts a on a.id = q.acceptedanswerid\n  where q.deletiondate is null\n  group by a.owneruserid\n)\n\nselect \n  owneruserid as [User Link],\n  accepted,\n  format(1.0 * accepted \/ total, 'p') '% of total',\n  acceptedscore,\n  format(1.0 * acceptedscore \/ totalscore, 'p') '% of total score'\nfrom acceptcounts, totalaccepted\norder by accepted desc, acceptedscore desc",
        "CreationDate": "2015-11-29 07:05:38",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 400953,
        "Title": "return at op question id's",
        "Description": null,
        "QueryBody": "DECLARE  @UserId int = ##UserId##\n\nselect Id,CreationDate,title \nfrom Posts\nwhere OwnerUserId=@UserId and PostTypeId=1",
        "CreationDate": "2015-12-06 02:56:55",
        "validated": false,
        "QueryBody_Original": "DECLARE  @UserId int = ##UserId##\n\nselect Id,CreationDate,title \nfrom Posts\nwhere OwnerUserId=@UserId and PostTypeId=1"
    },
    {
        "QuerySetId": 401732,
        "Title": "Tag statistics for Juju ",
        "Description": "view data for specific tags\r\n\r\n",
        "QueryBody": "DECLARE  @total float\nSELECT @total = Sum(Cast(ViewCount as bigint)) FROM Posts WHERE PostTypeId = 1\n\nSELECT \n    Tags.Tagname AS Tag, \n    Count(*) AS Questions, \n    Sum(Cast(Posts.ViewCount as bigint)) AS Views,\n    str(100 * Sum(Cast(Posts.ViewCount as bigint)) \/ @total,6,2) AS percentOfSite,\n    Sum(Posts.Score) AS Score,\n    Sum(Posts.AnswerCount) AS Answers,\n    Sum(Cast(Posts.ViewCount as bigint)) \/ Count(*) AS AvgViews,\n    str(Sum(Posts.Score) \/ Cast(Count(*) AS Float),6,2) AS AvgScore,\n    str(Sum(Posts.AnswerCount) \/ Cast(Count(*) AS Float),6,2) AS AvgAnswers\n  FROM Posts \n  JOIN PostTags ON Posts.Id = PostTags.PostId\n  JOIN Tags ON PostTags.TagId = Tags.Id\n  WHERE Posts.PostTypeId = 1 \n  GROUP BY Tags.Tagname\n  HAVING Tags.Tagname = 'angularjs' \n   \n  ORDER BY Views DESC",
        "CreationDate": "2015-12-08 19:30:39",
        "validated": false,
        "QueryBody_Original": "DECLARE  @total float\nSELECT @total = Sum(Cast(ViewCount as bigint)) FROM Posts WHERE PostTypeId = 1\n\nSELECT \n    Tags.Tagname AS Tag, \n    Count(*) AS Questions, \n    Sum(Cast(Posts.ViewCount as bigint)) AS Views,\n    str(100 * Sum(Cast(Posts.ViewCount as bigint)) \/ @total,6,2) AS percentOfSite,\n    Sum(Posts.Score) AS Score,\n    Sum(Posts.AnswerCount) AS Answers,\n    Sum(Cast(Posts.ViewCount as bigint)) \/ Count(*) AS AvgViews,\n    str(Sum(Posts.Score) \/ Cast(Count(*) AS Float),6,2) AS AvgScore,\n    str(Sum(Posts.AnswerCount) \/ Cast(Count(*) AS Float),6,2) AS AvgAnswers\n  FROM Posts \n  JOIN PostTags ON Posts.Id = PostTags.PostId\n  JOIN Tags ON PostTags.TagId = Tags.Id\n  WHERE Posts.PostTypeId = 1 \n  GROUP BY Tags.Tagname\n  HAVING Tags.Tagname = 'angularjs' \n   \n  ORDER BY Views DESC"
    },
    {
        "QuerySetId": 403083,
        "Title": "top-k results containing post count, view count, view\/post ratio per day",
        "Description": null,
        "QueryBody": "DECLARE  @ALLOWED_MIN_VIEWS INT = 5;\nDECLARE @ALLOWED_MIN_SCORE INT = 3;\n\nDECLARE @MIN_VIEWS INT = ##MinViews:int?500##;\nDECLARE @MIN_SCORE INT = ##MinScore:int?3##;\n\nIF (@MIN_VIEWS < @ALLOWED_MIN_VIEWS)\nBEGIN\n  PRINT '@MIN_VIEWS must be larger than 4.'\nEND\n\nIF (@MIN_SCORE < @ALLOWED_MIN_SCORE)\nBEGIN\n  PRINT '@MIN_SCORE must be larger than 2.'\nEND\n\nIF (@MIN_VIEWS >= @ALLOWED_MIN_VIEWS AND @MIN_SCORE >= @ALLOWED_MIN_SCORE)\nBEGIN\n  SELECT TOP 250\n      Q.ViewCount\n    , Q.Score\n    , [Post Link] = Q.Id\n    , Q.CreationDate\n    , [Tags] = Q.Tags\n    , [ScoreToViewsRatio] = (CAST(Q.Score AS NUMERIC) \/ CAST(Q.ViewCount AS NUMERIC))\n    FROM Posts AS Q\n      INNER JOIN Posts AS A ON Q.Id = A.ParentId\n    WHERE\n      Q.ViewCount >= @MIN_VIEWS\n\n    ORDER BY Q.ViewCount DESC;\nEND",
        "CreationDate": "2015-12-04 03:10:55",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 403652,
        "Title": "Top 100 Users by answer accepted rate",
        "Description": "The top users based on what percent of answers they have given have been accepted.\r\nExcludes users with fewer than 20 answers.\r\n",
        "QueryBody": "WITH  fewer than 20 answers.\n\nWITH\nUserAnswers AS\n(\n SELECT U.Id,\n        U.Reputation,\n        COUNT( DISTINCT A.Id ) AS AnswerCount,\n        COUNT( Q.Id ) AS AcceptedCount\n FROM Users U\n JOIN Posts A ON A.OwnerUserId = U.Id AND A.PostTypeId = 2\n LEFT OUTER JOIN Posts Q ON Q.AcceptedAnswerId = A.Id\n GROUP BY U.Id,\n          U.Reputation\n)\n\nSELECT TOP 100\n U.Id AS [User Link],\n U.Reputation,\n U.AnswerCount,\n U.AcceptedCount,\n ROUND((CAST(U.AcceptedCount AS FLOAT) \/ U.AnswerCount)*100,3) AS Percentage \n\nFROM\n UserAnswers U\n\nWHERE U.AnswerCount >=100\n\nORDER BY\n Percentage DESC",
        "CreationDate": "2020-07-07 23:45:31",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 403740,
        "Title": "full Votes for a post",
        "Description": null,
        "QueryBody": "SELECT  * FROM Votes WHERE PostId=##postid:int?1##",
        "CreationDate": "2015-12-05 13:34:30",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 403771,
        "Title": "low-rep users with many badges",
        "Description": null,
        "QueryBody": "SELECT  TOP ##topn:int?200## u.Id AS [User Link],MIN(Reputation) AS rep,MIN(Views) AS userviews,\n    COUNT(*) AS badgecount\nFROM Users u INNER JOIN Badges b ON u.Id=b.UserId\nWHERE Reputation<=##maxrep:int?500## AND Reputation>1--exclude suspended users\nGROUP BY u.Id\nORDER BY badgecount DESC",
        "CreationDate": "2015-12-05 15:35:17",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 404452,
        "Title": "Best Questions of a Given Year",
        "Description": null,
        "QueryBody": "SELECT  Id AS [Post Link], Score, AnswerCount, ViewCount, FavoriteCount\n  from Posts\n  where PostTypeId = 1\n    and year(CreationDate) = ##year##\n    and Score > 0\n    and ClosedDate is null\n    and DeletionDate is null\n  order by Score desc, ViewCount desc, FavoriteCount desc, AnswerCount desc",
        "CreationDate": "2015-12-06 20:44:22",
        "validated": false,
        "QueryBody_Original": "SELECT  Id AS [Post Link], Score, AnswerCount, ViewCount, FavoriteCount\n  from Posts\n  where PostTypeId = 1\n    and year(CreationDate) = ##year##\n    and Score > 0\n    and ClosedDate is null\n    and DeletionDate is null\n  order by Score desc, ViewCount desc, FavoriteCount desc, AnswerCount desc"
    },
    {
        "QuerySetId": 404606,
        "Title": "close votes for particular tags",
        "Description": null,
        "QueryBody": "DECLARE  @someId int = ##PostId##\n\nSELECT TOP 100\n    p.Id,\n    p.Id as [Post Link],\n    p.CreationDate,\n    p.Score,\n    count(PostHistory.id) HistCount\n    \nFROM Tags\nJOIN PostTags ON Tags.Id = PostTags.TagId\nJOIN Posts p ON p.Id = PostTags.PostId\nJoin PostHistory on PostHistory.PostId = p.Id\nwhere Tags.tagname in ('python')\nand PostHistory.PostHistoryTypeId=10\nand p.ClosedDate is null and p.PostTypeId=1 and p.Score<-3 -- a not closed ill-received Question\nGROUP BY p.Id,p.CreationDate,p.Score\n-- HAVING COUNT(Posts.ClosedDate) >= 5 -- give the tag a chance to be useful\n-- ORDER BY p.CreationDate desc\n-- ORDER BY HistCount desc\nORDER BY p.Score asc\n\n\n\/*\nselect * from PostHistory where PostId=@someId\n*\/",
        "CreationDate": "2015-12-07 08:44:40",
        "validated": false,
        "QueryBody_Original": "DECLARE  @someId int = ##PostId##\n\nSELECT TOP 100\n    p.Id,\n    p.Id as [Post Link],\n    p.CreationDate,\n    p.Score,\n    count(PostHistory.id) HistCount\n    \nFROM Tags\nJOIN PostTags ON Tags.Id = PostTags.TagId\nJOIN Posts p ON p.Id = PostTags.PostId\nJoin PostHistory on PostHistory.PostId = p.Id\nwhere Tags.tagname in ('python')\nand PostHistory.PostHistoryTypeId=10\nand p.ClosedDate is null and p.PostTypeId=1 and p.Score<-3 -- a not closed ill-received Question\nGROUP BY p.Id,p.CreationDate,p.Score\n-- HAVING COUNT(Posts.ClosedDate) >= 5 -- give the tag a chance to be useful\n-- ORDER BY p.CreationDate desc\n-- ORDER BY HistCount desc\nORDER BY p.Score asc\n\n\n\/*\nselect * from PostHistory where PostId=@someId\n*\/"
    },
    {
        "QuerySetId": 404649,
        "Title": "All your accepted answers by others",
        "Description": null,
        "QueryBody": "DECLARE  @UserId int = ##UserId##\n\nSELECT \n    q.Id as  [Post Link],\n    a.Score as Score\nFROM\n    Posts q\n    INNER JOIN\n    Posts a ON q.AcceptedAnswerId = a.Id\nWHERE\n    a.OwnerUserId = @UserId\n  AND\n    a.PostTypeId = 2\n  AND\n    q.OwnerUserID != @UserId\n  Order By a.Score DESC;",
        "CreationDate": "2015-12-07 15:36:36",
        "validated": false,
        "QueryBody_Original": "DECLARE  @UserId int = ##UserId##\n\nSELECT \n    q.Id as  [Post Link],\n    a.Score as Score\nFROM\n    Posts q\n    INNER JOIN\n    Posts a ON q.AcceptedAnswerId = a.Id\nWHERE\n    a.OwnerUserId = @UserId\n  AND\n    a.PostTypeId = 2\n  AND\n    q.OwnerUserID != @UserId\n  Order By a.Score DESC;"
    },
    {
        "QuerySetId": 404766,
        "Title": "Worst Questions for a Given Year",
        "Description": null,
        "QueryBody": "SELECT  Id AS [Post Link], Score, AnswerCount, ViewCount, FavoriteCount\n  from Posts\n  where PostTypeId = 1\n    and year(CreationDate) = ##year##\n    and Score <= 0\n  order by Score asc, AnswerCount asc",
        "CreationDate": "2015-12-07 20:34:03",
        "validated": false,
        "QueryBody_Original": "SELECT  Id AS [Post Link], Score, AnswerCount, ViewCount, FavoriteCount\n  from Posts\n  where PostTypeId = 1\n    and year(CreationDate) = ##year##\n    and Score <= 0\n  order by Score asc, AnswerCount asc"
    },
    {
        "QuerySetId": 405892,
        "Title": "Forgotten zombie killers with tag selector",
        "Description": "Zero-vote answers on questions with no accepted answer, and all answers with at most zero score\r\n(a.k.a. Zombie kill attempts left high and dry) and with displaying and possibility to select tag.",
        "QueryBody": "DECLARE  @reputationLimit AS INT = ##ReputationLimit:int?5000##;\nDECLARE @lowScoreLimit AS INT = ##LowScoreLimit:int?5##;\nDECLARE @tag as NVARCHAR(60) = ##Tag:string? ##;\n\nSELECT TOP ##Limit:int?100##\n  u.Id AS [User Link],\n  a.Id AS [Post Link],\n  a.CreationDate,\n  a.Score,\n  q.MaxAnswerScore,\n  q.AvgAnswerScore,\n  q.Tags\nFROM Posts a\n  JOIN Users u ON a.OwnerUserId = u.Id\n  JOIN (\n  SELECT q.Id, q.Tags, AVG(a.Score) AvgAnswerScore, MAX(a.Score) MaxAnswerScore\n    FROM Posts q\n    JOIN Posts a ON a.ParentId = q.Id\n    WHERE q.AcceptedAnswerId IS NULL\n    GROUP BY q.Id, q.Tags\n  ) q\n  ON a.ParentId = q.Id\nWHERE (u.Reputation > @reputationLimit)\n  AND a.Score <= @lowScoreLimit\n  -- AND q.MaxAnswerScore = 0\n  AND (@tag = '' or q.tags like '%'+@tag+'%')\nORDER BY a.CreationDate DESC",
        "CreationDate": "2015-12-12 05:59:24",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 405958,
        "Title": "Get posts list of a deleted user",
        "Description": null,
        "QueryBody": "SELECT  Id As [Post Link]\nFrom Posts\nWhere OwnerDisplayName='user' + Convert(nvarchar(20), ##UserId##)",
        "CreationDate": "2020-02-07 23:31:20",
        "validated": false,
        "QueryBody_Original": "SELECT  Id As [Post Link]\nFrom Posts\nWhere OwnerDisplayName='user' + Convert(nvarchar(20), ##UserId##)"
    },
    {
        "QuerySetId": 407107,
        "Title": "search favorites and the answers that have been edited",
        "Description": null,
        "QueryBody": "SELECT  distinct v.postid as [Post Link]\n     , v.userid as [User Link]\n     , v.creationdate as [favorited]\n     , (SELECT max(creationdate)\n            from posthistory \n            where postid= a.id\n            and posthistorytypeid = 5 -- edit body\n        ) as [edited]\n     , 'site:\/\/q\/' + cast(a.id as nvarchar) +'|Answer Link'\nfrom votes v \ninner join posts a on a.parentid = v.postid\nwhere v.votetypeid = 5 -- favorite\nand v.userid = ##userid:int?4842163##\nand a.creationdate > v.creationdate \nand exists (SELECT 1\n            from posthistory \n            where postid= a.id\n            and posthistorytypeid = 5 -- edit body\n            )",
        "CreationDate": "2015-12-11 03:19:57",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 407485,
        "Title": "Get all suggested edits on a specific post",
        "Description": null,
        "QueryBody": "SELECT  rt.PostId as [Post Link], \n     'site:\/\/review\/suggested-edits\/' + cast(rt.id as nvarchar) + \n     '|review' as review, \n     Case When se.ApprovalDate Is Null Then 'Rejected' Else 'Approved' End As [Status], \n     'site:\/\/users\/' + cast(u.Id as nvarchar) + \n     '|' + u.DisplayName As [Suggested By], \n     IsNull(se.ApprovalDate, se.RejectionDate) As [Date]\nfrom ReviewTasks rt join SuggestedEdits se On rt.SuggestedEditId=se.Id\n    join Users u On se.OwnerUserId=u.Id\nwhere rt.ReviewTaskTypeId  = 1\n    and rt.postid = ##postid:int##\nOrder By [Date] Asc",
        "CreationDate": "2015-12-12 01:39:34",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 407624,
        "Title": "High rep users with low score answers",
        "Description": "A query to look for possible hidden gems listing low score answers from high rep users.",
        "QueryBody": "DECLARE  @reputationLimit AS INT = ##ReputationLimit:int?5000##;\nDECLARE @lowScoreLimit AS INT = ##LowScoreLimit:int?5##;\n\nSELECT TOP ##Limit:int?100##\n  u.Id AS [User Link],\n  a.Id AS [Post Link],\n  a.CreationDate,\n  q.Tags\nFROM Posts a\n  JOIN Users u ON a.OwnerUserId = u.Id\n  JOIN (\n    SELECT q.Id, q.Tags, MAX(a.Score) MaxAnswerScore\n    FROM Posts q\n    JOIN Posts a ON a.ParentId = q.Id\n    WHERE q.AcceptedAnswerId IS NULL\n    GROUP BY q.Id, q.Tags\n  ) q\n  ON a.ParentId = q.Id\nWHERE (u.Reputation > @reputationLimit)\n  AND a.Score <= @lowScoreLimit\n  -- AND q.MaxAnswerScore = 0\nORDER BY a.Score, a.CreationDate",
        "CreationDate": "2019-06-12 12:57:29",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 407665,
        "Title": "Questions closed as duplicate of question by the same user",
        "Description": null,
        "QueryBody": "SELECT  TOP ##topn:int?300##\nn.Id AS [Post Link],n.Score AS nscore,n.CreationDate AS ndate,o.Score AS oscore,\no.CreationDate AS odate,n.OwnerUserId AS [User Link],u.Reputation AS rep\nFROM Posts n INNER JOIN PostLinks l ON n.Id=l.PostId\nINNER JOIN Posts o ON o.Id=l.RelatedPostId INNER JOIN Users u ON n.OwnerUserId=u.Id\nWHERE l.LinkTypeId=3 AND n.OwnerUserId=o.OwnerUserId AND n.OwnerUserId>0\nAND DATEDIFF(month,o.CreationDate,n.CreationDate)>=##minmonth:int?24##\nAND DATEDIFF(month,o.CreationDate,n.CreationDate)<=##maxmonth:int?9999##",
        "CreationDate": "2015-12-12 12:48:45",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 407673,
        "Title": "Good questions closed as duplicate of bad question",
        "Description": "Here the quality of a question is defined as MAX(questionvotes,MAX(answervotes))\r\nAlso, good questions must have score>=5, and bad questions must have score<0.\r\n",
        "QueryBody": "SELECT  TOP ##topn:int?300## n.Id AS [Post Link],MAX(n.Score) AS nscore,MAX(o.Score) AS oscore\nFROM Posts n INNER JOIN PostLinks l ON n.Id=l.PostId INNER JOIN Posts o ON o.Id=l.RelatedPostId\nINNER JOIN Posts na ON na.ParentId=n.Id OR na.Id=n.Id\nINNER JOIN Posts oa ON oa.ParentId=o.Id OR oa.Id=o.Id\nWHERE l.LinkTypeId=3 --AND n.Score>=5 AND o.Score<0\nGROUP BY n.Id\nHAVING MAX(na.Score)-MAX(oa.Score)>=##threshold:int?15##",
        "CreationDate": "2015-12-12 13:10:27",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 407681,
        "Title": "Select users by \"About Me\" ordered by reputation",
        "Description": null,
        "QueryBody": "SELECT  TOP ##topn:int?300##\n      u.Id AS [User Link],\n      u.Location AS [Location],\n      u.LastAccessDate AS [Last Access],\n      u.WebsiteUrl AS [URL],\n      u.Reputation AS [Rep],\n      u.AboutMe AS AboutMe\nFROM \n    Users u\n    --INNER JOIN Tags t  ON t.Id =  u.Id\n    --INNER JOIN Posts p ON p.Id =  u.Id    \nWHERE \n  LOWER(AboutMe) like ##aboutme:string##\nORDER BY \n  Reputation DESC",
        "CreationDate": "2016-02-01 11:18:38",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 408345,
        "Title": "Users with the Tumbleweed badge, ordered by reputation",
        "Description": "For meta question http:\/\/meta.stackoverflow.com\/q\/67882\/7586\r\n",
        "QueryBody": "WITH  the Tumbleweed badge, ordered by reputation\n-- For meta question http:\/\/meta.stackoverflow.com\/q\/67882\/7586\n\nselect TOP 250 u.Id AS [User Link], u.Reputation, count(b.Name) as tumbleweed_count\nfrom badges b join users u on b.userid = u.id\nwhere b.Name = 'Tumbleweed'\ngroup by b.Name, u.id, u.Reputation\norder by Reputation DESC",
        "CreationDate": "2017-09-29 05:01:15",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 408662,
        "Title": "Find questions ripe for the Necromancer badge",
        "Description": "Searches for open, non-CW posts older than 60 days with no accepted answer and no answer scoring 3 or more. (Now updated so merged questions do not appear.)\r\n",
        "QueryBody": "DECLARE  @tag VARCHAR(30) = ##tag:string##\n\nSELECT TOP 100\n    tags,\n    p.Id AS [Post Link],\n    p.Score,\n    p.CreationDate as [Asked Date],\n    p.ViewCount\nFROM\n    Posts p\nWHERE\n    p.AcceptedAnswerId IS NULL\n    AND\n    p.PostTypeId = 1\n    AND\n    p.CreationDate < GETDATE() - 60\n    AND\n    p.CommunityOwnedDate IS NULL\n    AND\n    p.ClosedDate IS NULL\n    AND \n    p.Tags LIKE '%' + LOWER(@tag) + '%'\n    AND \n    p.viewCount < 30\nAND NOT EXISTS\n    (\n        SELECT *\n        FROM Posts p2\n        WHERE p2.ParentId = p.Id\n        AND p2.Score >= 2\n        AND p2.PostTypeId = 2\n    )\nAND NOT EXISTS\n    (\n        SELECT *\n        FROM PostHistory ph\n        WHERE ph.PostId = p.Id\n        AND ph.PostHistoryTypeId = 14\n     )  \nORDER BY\n    p.Score DESC",
        "CreationDate": "2016-08-12 16:36:44",
        "validated": false,
        "QueryBody_Original": "DECLARE  @tag VARCHAR(30) = ##tag:string##\n\nSELECT TOP 100\n    tags,\n    p.Id AS [Post Link],\n    p.Score,\n    p.CreationDate as [Asked Date],\n    p.ViewCount\nFROM\n    Posts p\nWHERE\n    p.AcceptedAnswerId IS NULL\n    AND\n    p.PostTypeId = 1\n    AND\n    p.CreationDate < GETDATE() - 60\n    AND\n    p.CommunityOwnedDate IS NULL\n    AND\n    p.ClosedDate IS NULL\n    AND \n    p.Tags LIKE '%' + LOWER(@tag) + '%'\n    AND \n    p.viewCount < 30\nAND NOT EXISTS\n    (\n        SELECT *\n        FROM Posts p2\n        WHERE p2.ParentId = p.Id\n        AND p2.Score >= 2\n        AND p2.PostTypeId = 2\n    )\nAND NOT EXISTS\n    (\n        SELECT *\n        FROM PostHistory ph\n        WHERE ph.PostId = p.Id\n        AND ph.PostHistoryTypeId = 14\n     )  \nORDER BY\n    p.Score DESC"
    },
    {
        "QuerySetId": 408948,
        "Title": "Parse SDK Questions tagged as swift vs objc.",
        "Description": null,
        "QueryBody": "DECLARE  @Swift AS Int\nDECLARE @ObjC AS Int\nDECLARE @Both AS Int\n\nSELECT @Swift = COUNT(*)\nFROM Posts\nWHERE\n  PostTypeId = 1 AND\n  CreationDate > '1\/1\/2015' AND\n  Tags LIKE '%<parse.com>%' AND\n  Tags LIKE '%<swift>%' AND\n  Tags NOT LIKE '%<objective-c>%'\n  \nSELECT @ObjC = COUNT(*)\nFROM Posts\nWHERE\n  PostTypeId = 1 AND\n  CreationDate > '1\/1\/2015' AND\n  Tags LIKE '%<parse.com>%' AND\n  Tags NOT LIKE '%<swift>%' AND\n  Tags LIKE '%<objective-c>%'\n  \nSELECT @Both = COUNT(*)\nFROM Posts\nWHERE\n  PostTypeId = 1 AND\n  CreationDate > '1\/1\/2015' AND\n  Tags LIKE '%<parse.com>%' AND\n  Tags LIKE '%<swift>%' AND\n  Tags LIKE '%<objective-c>%'\n  \nSELECT @Swift AS Swift, @ObjC AS ObjC, @Both AS Both",
        "CreationDate": "2015-12-15 06:09:02",
        "validated": false,
        "QueryBody_Original": "DECLARE  @Swift AS Int\nDECLARE @ObjC AS Int\nDECLARE @Both AS Int\n\nSELECT @Swift = COUNT(*)\nFROM Posts\nWHERE\n  PostTypeId = 1 AND\n  CreationDate > '1\/1\/2015' AND\n  Tags LIKE '%<parse.com>%' AND\n  Tags LIKE '%<swift>%' AND\n  Tags NOT LIKE '%<objective-c>%'\n  \nSELECT @ObjC = COUNT(*)\nFROM Posts\nWHERE\n  PostTypeId = 1 AND\n  CreationDate > '1\/1\/2015' AND\n  Tags LIKE '%<parse.com>%' AND\n  Tags NOT LIKE '%<swift>%' AND\n  Tags LIKE '%<objective-c>%'\n  \nSELECT @Both = COUNT(*)\nFROM Posts\nWHERE\n  PostTypeId = 1 AND\n  CreationDate > '1\/1\/2015' AND\n  Tags LIKE '%<parse.com>%' AND\n  Tags LIKE '%<swift>%' AND\n  Tags LIKE '%<objective-c>%'\n  \nSELECT @Swift AS Swift, @ObjC AS ObjC, @Both AS Both"
    },
    {
        "QuerySetId": 408974,
        "Title": "New User's Questions closed after N minutes of registering",
        "Description": null,
        "QueryBody": "SELECT \n  DATEADD(D, DATEDIFF(D, 0, p.ClosedDate), 0) AS ClosedDate,\n  count(*)                                    AS Total\nFROM Posts p\n  INNER JOIN Users u ON p.OwnerUserId = u.Id\n  INNER JOIN PostHistory ph ON ph.PostId = p.Id\nWHERE DATEDIFF(MINUTE, u.CreationDate, p.ClosedDate) < ##ClosureTimeInMinutes##\nGROUP BY DATEADD(D, DATEDIFF(D, 0, p.ClosedDate), 0)\nORDER BY DATEADD(D, DATEDIFF(D, 0, p.ClosedDate), 0) DESC;",
        "CreationDate": "2015-12-15 12:18:19",
        "validated": false,
        "QueryBody_Original": "SELECT \n  DATEADD(D, DATEDIFF(D, 0, p.ClosedDate), 0) AS ClosedDate,\n  count(*)                                    AS Total\nFROM Posts p\n  INNER JOIN Users u ON p.OwnerUserId = u.Id\n  INNER JOIN PostHistory ph ON ph.PostId = p.Id\nWHERE DATEDIFF(MINUTE, u.CreationDate, p.ClosedDate) < ##ClosureTimeInMinutes##\nGROUP BY DATEADD(D, DATEDIFF(D, 0, p.ClosedDate), 0)\nORDER BY DATEADD(D, DATEDIFF(D, 0, p.ClosedDate), 0) DESC;"
    },
    {
        "QuerySetId": 412266,
        "Title": "Highest voted comments for a user",
        "Description": "Gets the highest voted comments for a given user.\r\n",
        "QueryBody": "SELECT  TOP 20\nc.Score as [Comment Score],\npt.Name as [Commented On],\nc.Text as [Comment],\nc.PostId as [Post Link]\nFROM Comments c, PostTypes pt, Posts p\nWHERE p.Id = c.PostId\nAND pt.Id = p.PostTypeId\nAND c.UserId = ##UserID:int##\n\nORDER BY c.Score DESC",
        "CreationDate": "2015-12-19 06:42:17",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 414205,
        "Title": "How many comments I have posted?",
        "Description": null,
        "QueryBody": "SELECT  COUNT(Id) AS TotalCount\nFROM Comments\nWHERE UserId = ##UserId##",
        "CreationDate": "2016-02-04 00:20:43",
        "validated": false,
        "QueryBody_Original": "SELECT  COUNT(Id) AS TotalCount\nFROM Comments\nWHERE UserId = ##UserId##"
    },
    {
        "QuerySetId": 414207,
        "Title": "Comment's score is 1 or more",
        "Description": null,
        "QueryBody": "SELECT  Text, Score, Id [Comment Link]\nFROM Comments \nWHERE UserId = ##UserId## AND Score >= 1\nORDER BY Score DESC",
        "CreationDate": "2016-02-04 00:18:11",
        "validated": false,
        "QueryBody_Original": "SELECT  Text, Score, Id [Comment Link]\nFROM Comments \nWHERE UserId = ##UserId## AND Score >= 1\nORDER BY Score DESC"
    },
    {
        "QuerySetId": 414363,
        "Title": "Trend for relevant questions (Tag and Searchstring)",
        "Description": null,
        "QueryBody": "DECLARE  @Tag nvarchar(25) = '##Tag##';\nDECLARE @Searchstring nvarchar(25) = '##Searchstring##'\n\nSELECT\n  COUNT(UniqueId), WeekStart\nFROM \n(\n  SELECT\n    Posts.Id AS UniqueId, \n    dateadd(week, datediff(day, '20000109', Posts.CreationDate) \/ 7, '20000109') AS WeekStart  \n  FROM Tags\n    INNER JOIN PostTags ON PostTags.TagId = Tags.Id\n    INNER JOIN Posts ON Posts.Id = PostTags.PostId\n  WHERE\n    Tags.TagName = @Tag and\n    (Posts.Body LIKE @Searchstring or \n    Posts.Title LIKE @Searchstring) and \n    Posts.PostTypeId = 1 -- Questions\n) RelevantQuestionsByWeek\nGROUP BY WeekStart;",
        "CreationDate": "2015-12-22 22:48:02",
        "validated": false,
        "QueryBody_Original": "DECLARE  @Tag nvarchar(25) = '##Tag##';\nDECLARE @Searchstring nvarchar(25) = '##Searchstring##'\n\nSELECT\n  COUNT(UniqueId), WeekStart\nFROM \n(\n  SELECT\n    Posts.Id AS UniqueId, \n    dateadd(week, datediff(day, '20000109', Posts.CreationDate) \/ 7, '20000109') AS WeekStart  \n  FROM Tags\n    INNER JOIN PostTags ON PostTags.TagId = Tags.Id\n    INNER JOIN Posts ON Posts.Id = PostTags.PostId\n  WHERE\n    Tags.TagName = @Tag and\n    (Posts.Body LIKE @Searchstring or \n    Posts.Title LIKE @Searchstring) and \n    Posts.PostTypeId = 1 -- Questions\n) RelevantQuestionsByWeek\nGROUP BY WeekStart;"
    },
    {
        "QuerySetId": 414396,
        "Title": "Trend (weekly amount) for a question (tag and search string)",
        "Description": null,
        "QueryBody": "DECLARE  @Tag nvarchar(25) = '##Tag##';\nDECLARE @Searchstring nvarchar(25) = '##Searchstring##'\n\nSELECT\n  COUNT(UniqueId), WeekStart\nFROM \n(\n  SELECT\n    Posts.Id AS UniqueId, \n    dateadd(week, datediff(day, '20000109', Posts.CreationDate) \/ 7, '20000109') AS WeekStart  \n  FROM Tags\n    INNER JOIN PostTags ON PostTags.TagId = Tags.Id\n    INNER JOIN Posts ON Posts.Id = PostTags.PostId\n  WHERE\n    Tags.TagName = @Tag and\n    (Posts.Body LIKE @Searchstring or \n    Posts.Title LIKE @Searchstring) and \n    Posts.PostTypeId = 1 -- Questions\n) RelevantQuestionsByWeek\nGROUP BY WeekStart;",
        "CreationDate": "2015-12-22 22:52:48",
        "validated": false,
        "QueryBody_Original": "DECLARE  @Tag nvarchar(25) = '##Tag##';\nDECLARE @Searchstring nvarchar(25) = '##Searchstring##'\n\nSELECT\n  COUNT(UniqueId), WeekStart\nFROM \n(\n  SELECT\n    Posts.Id AS UniqueId, \n    dateadd(week, datediff(day, '20000109', Posts.CreationDate) \/ 7, '20000109') AS WeekStart  \n  FROM Tags\n    INNER JOIN PostTags ON PostTags.TagId = Tags.Id\n    INNER JOIN Posts ON Posts.Id = PostTags.PostId\n  WHERE\n    Tags.TagName = @Tag and\n    (Posts.Body LIKE @Searchstring or \n    Posts.Title LIKE @Searchstring) and \n    Posts.PostTypeId = 1 -- Questions\n) RelevantQuestionsByWeek\nGROUP BY WeekStart;"
    },
    {
        "QuerySetId": 414503,
        "Title": "Find your most downvoted answers",
        "Description": null,
        "QueryBody": "DECLARE  @UserId int = ##UserId##\nselect p.Id AS [Post Link]\n, count(dv.ID) AS DownVotes\nfrom Posts p\njoin Votes dv on (p.Id = dv.PostId and dv.VoteTypeId = 3)\nwhere p.PostTypeID=2 AND p.OwnerUserId = @UserId\ngroup by p.Id, p.Title\norder by count(dv.ID) desc",
        "CreationDate": "2016-01-30 04:28:21",
        "validated": false,
        "QueryBody_Original": "DECLARE  @UserId int = ##UserId##\nselect p.Id AS [Post Link]\n, count(dv.ID) AS DownVotes\nfrom Posts p\njoin Votes dv on (p.Id = dv.PostId and dv.VoteTypeId = 3)\nwhere p.PostTypeID=2 AND p.OwnerUserId = @UserId\ngroup by p.Id, p.Title\norder by count(dv.ID) desc"
    },
    {
        "QuerySetId": 415208,
        "Title": "Total views on my questions",
        "Description": null,
        "QueryBody": "DECLARE  @UserId int = ##UserId##\n\nselect\n  sum(viewcount) as [Total views on questions]\nfrom \n  posts\nwhere \n  owneruserid = @userid and \n  posttypeid = 1 and \n  CreationDate > DATEADD(DAY, -13, GETDATE())",
        "CreationDate": "2015-12-26 20:57:36",
        "validated": false,
        "QueryBody_Original": "DECLARE  @UserId int = ##UserId##\n\nselect\n  sum(viewcount) as [Total views on questions]\nfrom \n  posts\nwhere \n  owneruserid = @userid and \n  posttypeid = 1 and \n  CreationDate > DATEADD(DAY, -13, GETDATE())"
    },
    {
        "QuerySetId": 415701,
        "Title": "Old questions with few answers",
        "Description": null,
        "QueryBody": "DECLARE  @Tag nvarchar(250) = '<##Tag##>';\nDECLARE @MaxAnswerCount int = ##MaxAnswerCount##;\nselect\n  'http:\/\/stackoverflow.com\/q\/' + concat(Id, '')\n  ,Tags\nfrom Posts\nwhere\n  PostTypeId = 1\n  and CreationDate < '2010.01.01'\n  and Score > 20\n  and charindex(@Tag, Tags) > 0\n  and AnswerCount <= @MaxAnswerCount\n  and ClosedDate is null\norder by Score desc;",
        "CreationDate": "2015-12-27 13:45:00",
        "validated": false,
        "QueryBody_Original": "DECLARE  @Tag nvarchar(250) = '<##Tag##>';\nDECLARE @MaxAnswerCount int = ##MaxAnswerCount##;\nselect\n  'http:\/\/stackoverflow.com\/q\/' + concat(Id, '')\n  ,Tags\nfrom Posts\nwhere\n  PostTypeId = 1\n  and CreationDate < '2010.01.01'\n  and Score > 20\n  and charindex(@Tag, Tags) > 0\n  and AnswerCount <= @MaxAnswerCount\n  and ClosedDate is null\norder by Score desc;"
    },
    {
        "QuerySetId": 416095,
        "Title": "Questions asked by X and answered by Y",
        "Description": null,
        "QueryBody": "SELECT  p.Id as [Post Link] from Posts p\ninner join Posts a on a.ParentId = p.Id\nwhere p.OwnerUserId = ##asker## and a.OwnerUserId = ##answerer##",
        "CreationDate": "2015-12-26 23:47:54",
        "validated": false,
        "QueryBody_Original": "SELECT  p.Id as [Post Link] from Posts p\ninner join Posts a on a.ParentId = p.Id\nwhere p.OwnerUserId = ##asker## and a.OwnerUserId = ##answerer##"
    },
    {
        "QuerySetId": 416371,
        "Title": "See comments made on my comments?",
        "Description": "http:\/\/meta.stackexchange.com\/a\/271004\/158100",
        "QueryBody": "DECLARE  @userid int = ##userid:int?447356## -- ShadowWizard\n\nselect orig_id as [Comment Link]\n     , postid as [Post Link]\n     , later_id as [Comment Link]\nfrom (\n    select c_orig.id as orig_id \n         , c_orig.postid \n         , c_later.id as later_id\n         , row_number()  over (partition by c_later.postid \n                               order by c_later.creationdate) as row\n    from comments c_orig  \n    inner join comments c_later \n            on c_later.postid = c_orig.postid\n    where c_orig.userid = @userid\n    and c_later.creationdate > c_orig.creationdate\n    and c_later.userid <>  @userid\n) as allcomments\nwhere row = 1\norder by postid",
        "CreationDate": "2015-12-28 00:17:01",
        "validated": false,
        "QueryBody_Original": "DECLARE  @userid int = ##userid:int?447356## -- ShadowWizard\n\nselect orig_id as [Comment Link]\n     , postid as [Post Link]\n     , later_id as [Comment Link]\nfrom (\n    select c_orig.id as orig_id \n         , c_orig.postid \n         , c_later.id as later_id\n         , row_number()  over (partition by c_later.postid \n                               order by c_later.creationdate) as row\n    from comments c_orig  \n    inner join comments c_later \n            on c_later.postid = c_orig.postid\n    where c_orig.userid = @userid\n    and c_later.creationdate > c_orig.creationdate\n    and c_later.userid <>  @userid\n) as allcomments\nwhere row = 1\norder by postid"
    },
    {
        "QuerySetId": 416392,
        "Title": "Search for a tag by name",
        "Description": "Enter your tag in the parameter field below.",
        "QueryBody": "SELECT  * FROM Tags\n  WHERE TagName = ##TagName:String?osx##",
        "CreationDate": "2015-12-28 02:27:38",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 416544,
        "Title": "Number of users with rep >= X",
        "Description": null,
        "QueryBody": "SELECT  count(Id) as [Number of Users] from Users \nwhere Reputation >= ##minrep##",
        "CreationDate": "2015-12-28 11:04:08",
        "validated": false,
        "QueryBody_Original": "SELECT  count(Id) as [Number of Users] from Users \nwhere Reputation >= ##minrep##"
    },
    {
        "QuerySetId": 416939,
        "Title": "My comment score per comment",
        "Description": null,
        "QueryBody": "DECLARE  @UserId int = ##UserId##\n\nSELECT Id as [Comment Link], Score\nFROM Comments \nWHERE UserId = @UserId",
        "CreationDate": "2015-12-28 23:07:24",
        "validated": false,
        "QueryBody_Original": "DECLARE  @UserId int = ##UserId##\n\nSELECT Id as [Comment Link], Score\nFROM Comments \nWHERE UserId = @UserId"
    },
    {
        "QuerySetId": 417654,
        "Title": "upvote-downvote ratio with adjustable offset",
        "Description": null,
        "QueryBody": "WITH  the highest down\/up vote ratio\n\nSELECT \n    Id AS [User Link],\n    CONVERT(float, DownVotes)\/(UpVotes+DownVotes) as du_ratio,\n     DownVotes, UpVotes,\n     (DownVotes+UpVotes) as totalVotes\nFROM \n    Users\nWHERE \n    Reputation > 125 -- they have to be allowed to downvote\n    --and DownVotes > 0\n    --and DownVotes < 10\n    and DownVotes > ##MinVotes:int?1000##\nORDER BY \n    DownVotes DESC",
        "CreationDate": "2015-12-30 21:00:25",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 417949,
        "Title": "Answered questions for a tag",
        "Description": null,
        "QueryBody": "SELECT  Id AS [Post Link],\n       Tags AS [Tags],\n       Title AS [Title],\n       Score,\n       ViewCount AS Views,\n       CreationDate AS [Date Asked]\n    FROM Posts\n    WHERE\n    Tags LIKE '%<' + ##TagName:string## + '>%' AND\n    ClosedDate IS NULL AND\n    (AnswerCount = 1)",
        "CreationDate": "2016-01-22 20:10:23",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 417984,
        "Title": "Most generous users since custom date (bounties awarded)",
        "Description": "List of all users who awarded bounties since date, sorted by total amount of bounties.",
        "QueryBody": "SELECT \n  Users.Id [User Link],\n  Users.DisplayName,\n  Users.Reputation,\n  (SELECT SUM(BountyAmount) FROM Votes WHERE Votes.UserId = Users.Id AND Votes.CreationDate > '##Year##'  AND Votes.CreationDate < ##Cutoff##) as TotalBountiesAwarded\nFROM Users\nWHERE\n  (SELECT SUM(BountyAmount) FROM Votes WHERE Votes.UserId = Users.Id AND Votes.CreationDate > '##Year##' ) > 0 -- ensure a bounty has been awarded\n  -- exclude Community and sin binned users\n  -- minimum amount here to qualify for this?\n  AND Users.Reputation > 50 \n--ORDER BY (SELECT SUM(BountyAmount) FROM Votes WHERE Votes.UserId = Users.Id AND Votes.CreationDate > '##Year##' AND Votes.CreationDate < ##Cutoff##) DESC",
        "CreationDate": "2017-04-11 18:43:30",
        "validated": false,
        "QueryBody_Original": "SELECT \n  Users.Id [User Link],\n  Users.DisplayName,\n  Users.Reputation,\n  (SELECT SUM(BountyAmount) FROM Votes WHERE Votes.UserId = Users.Id AND Votes.CreationDate > '##Year##'  AND Votes.CreationDate < ##Cutoff##) as TotalBountiesAwarded\nFROM Users\nWHERE\n  (SELECT SUM(BountyAmount) FROM Votes WHERE Votes.UserId = Users.Id AND Votes.CreationDate > '##Year##' ) > 0 -- ensure a bounty has been awarded\n  -- exclude Community and sin binned users\n  -- minimum amount here to qualify for this?\n  AND Users.Reputation > 50 \n--ORDER BY (SELECT SUM(BountyAmount) FROM Votes WHERE Votes.UserId = Users.Id AND Votes.CreationDate > '##Year##' AND Votes.CreationDate < ##Cutoff##) DESC"
    },
    {
        "QuerySetId": 417987,
        "Title": "Random sample of users with all of their votes for questions",
        "Description": null,
        "QueryBody": "WITH  all of their votes for questions\n-- Bigger samples go above the 50K limit on output\n\n;WITH UsersSample AS\n(\n  SELECT u.Id\n  FROM Users u tablesample(.5 percent)\n  WHERE u.UpVotes > 1\n  )\nSELECT u.Id as UserId,\n  v.PostId,\n  v.VoteTypeId\nFROM Votes v\n  RIGHT OUTER JOIN UsersSample u\n    ON v.UserId = u.Id\n-- WHERE\n--   v.VoteTypeId > 1 AND v.VoteTypeId < 4",
        "CreationDate": "2015-12-31 19:18:29",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 418318,
        "Title": "Answers from users whose first answer is in 2015",
        "Description": null,
        "QueryBody": "DECLARE  @votes as INT = ##MinimumVotesOnAnswer:int?1##\nDECLARE @tag as NVARCHAR(60) = ##QuestionTag:string? ##;\n\nSELECT\n  q.Id as [Post Link],\n  a.Id as [Answer Link],\n  a.Score as [Votes],\n  u.CreationDate as [User Arrival],\n  q.Tags as [Tags]\nFROM Posts a\n  JOIN Users u ON a.OwnerUserId = u.Id\n  JOIN Posts q ON q.Id = a.ParentId\nWHERE\n  u.CreationDate >= CONVERT( DATETIME, '1 JAN 2015', 106 )\n  AND u.CreationDate < CONVERT( DATETIME, '1 JAN 2016', 106 )\n  AND a.Score >= @votes\n  AND (@tag = '' or q.tags like '%<'+@tag+'>%')\nORDER BY u.CreationDate",
        "CreationDate": "2016-01-02 03:16:53",
        "validated": false,
        "QueryBody_Original": "DECLARE  @votes as INT = ##MinimumVotesOnAnswer:int?1##\nDECLARE @tag as NVARCHAR(60) = ##QuestionTag:string? ##;\n\nSELECT\n  q.Id as [Post Link],\n  a.Id as [Answer Link],\n  a.Score as [Votes],\n  u.CreationDate as [User Arrival],\n  q.Tags as [Tags]\nFROM Posts a\n  JOIN Users u ON a.OwnerUserId = u.Id\n  JOIN Posts q ON q.Id = a.ParentId\nWHERE\n  u.CreationDate >= CONVERT( DATETIME, '1 JAN 2015', 106 )\n  AND u.CreationDate < CONVERT( DATETIME, '1 JAN 2016', 106 )\n  AND a.Score >= @votes\n  AND (@tag = '' or q.tags like '%<'+@tag+'>%')\nORDER BY u.CreationDate"
    },
    {
        "QuerySetId": 418406,
        "Title": "Number of answers and views of answers in year",
        "Description": null,
        "QueryBody": "SELECT  count(*) Count, sum(q.ViewCount) Views\nfrom Posts a join Posts q on q.Id = a.ParentId\nwhere a.OwnerUserId = ##userId##\nand a.PostTypeId = 2\nand q.PostTypeId = 1\nand a.CreationDate >= '##year##0101'\nand a.CreationDate <= '##year##1231'",
        "CreationDate": "2016-01-02 13:56:12",
        "validated": false,
        "QueryBody_Original": "SELECT  count(*) Count, sum(q.ViewCount) Views\nfrom Posts a join Posts q on q.Id = a.ParentId\nwhere a.OwnerUserId = ##userId##\nand a.PostTypeId = 2\nand q.PostTypeId = 1\nand a.CreationDate >= '##year##0101'\nand a.CreationDate <= '##year##1231'"
    },
    {
        "QuerySetId": 418519,
        "Title": "Top users by average question score",
        "Description": "List the top users by average score (upvotes - downvotes) on answers\r\n",
        "QueryBody": "SELECT  TOP 1000\n  p.OwnerUserId As [User Link],\n  Min(u.Reputation) As [Reputation],\n  Count(*) As [Number of questions],\n  Round(Avg(Convert(Float, p.Score)), 2) As [Average score]\nFROM Posts p\nINNER JOIN Users u ON p.OwnerUserId = u.Id\nWHERE p.PostTypeId = 1\nGROUP BY p.OwnerUserId\nHAVING Count(*) >= ##MinimumQuestionsPerUser?10##\nORDER BY [Average score] ASC",
        "CreationDate": "2017-12-26 04:53:44",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 418726,
        "Title": "Simple Activity graph (questions & answers \/ week)",
        "Description": null,
        "QueryBody": "DECLARE  @epoch as datetime = DATEADD(WEEK, - ##Weeks:int?104## - 1, CURRENT_TIMESTAMP)\n\nselect DATEADD(DAY, 7 - DATEPART(WEEKDAY, CONVERT(DATE,p.CreationDate)), Convert(DATE, p.CreationDate)) as YearMon,\n       case when pt.Id = 1 then 'Questions Asked in week'\n               when pt.Id = 2 then 'Answers Given in week'\n               else 'Unknown'\n       end as Series,\n       count(*) as Action\n    from Posts p, PostTypes pt\n    where p.PostTypeId = pt.Id\n      and p.PostTypeId in (1, 2)\n      and p.CreationDate > @epoch\n      and p.ClosedDate is null\n    Group by DATEADD(DAY, 7 - DATEPART(WEEKDAY, CONVERT(DATE,p.CreationDate)), Convert(DATE, p.CreationDate)),\n          pt.Id",
        "CreationDate": "2016-01-03 23:04:04",
        "validated": false,
        "QueryBody_Original": "DECLARE  @epoch as datetime = DATEADD(WEEK, - ##Weeks:int?104## - 1, CURRENT_TIMESTAMP)\n\nselect DATEADD(DAY, 7 - DATEPART(WEEKDAY, CONVERT(DATE,p.CreationDate)), Convert(DATE, p.CreationDate)) as YearMon,\n       case when pt.Id = 1 then 'Questions Asked in week'\n               when pt.Id = 2 then 'Answers Given in week'\n               else 'Unknown'\n       end as Series,\n       count(*) as Action\n    from Posts p, PostTypes pt\n    where p.PostTypeId = pt.Id\n      and p.PostTypeId in (1, 2)\n      and p.CreationDate > @epoch\n      and p.ClosedDate is null\n    Group by DATEADD(DAY, 7 - DATEPART(WEEKDAY, CONVERT(DATE,p.CreationDate)), Convert(DATE, p.CreationDate)),\n          pt.Id"
    },
    {
        "QuerySetId": 419138,
        "Title": "Number of deleted posts for user",
        "Description": null,
        "QueryBody": "DECLARE  @UserId int = ##UserId##\n\nSELECT *\nFROM PostHistory\nWHERE \n    PostHistory.UserId = @UserId",
        "CreationDate": "2016-01-04 22:42:35",
        "validated": false,
        "QueryBody_Original": "DECLARE  @UserId int = ##UserId##\n\nSELECT *\nFROM PostHistory\nWHERE \n    PostHistory.UserId = @UserId"
    },
    {
        "QuerySetId": 420487,
        "Title": "Who can vote on synonyms for a given tag?",
        "Description": null,
        "QueryBody": "SELECT  u.id as [User Link]\n, case when u.reputation>=2500 then 'yes' else 'no' end\nas [barrier]\n, LastAccessDate\nfrom users u\nwhere 4 < (SELECT sum(a.score)\n  from posts a\n  , posts q\n  , posttags pt\n  , tags t\n  where u.id=a.owneruserid\n  and a.posttypeid=2\n  and q.posttypeid=1\n  and a.parentid=q.id\n  and q.id=pt.postid\n  and pt.tagid = t.id\n  and t.tagname = ##TagName:string##\n)\n-- TagName: Enter the tag name. Not a synonym.",
        "CreationDate": "2016-10-19 22:00:59",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 421019,
        "Title": "Unanswered questions by non-noobs for a tag",
        "Description": null,
        "QueryBody": "DECLARE  @TagName as nvarchar(35) = '##TagName##'\nDECLARE @minRep as int = ##MinimumReputation:int?100##;\n\nSELECT \n    Posts.Id as [Post Link],\n    Posts.Tags as [Tags], \n    Posts.Score, \n    Posts.ViewCount, \n    Users.Reputation,\n    Posts.CreationDate, \n    Users.LastAccessDate\nFROM  Posts\n    INNER JOIN PostTags ON Posts.Id          = PostTags.PostId\n    INNER JOIN Tags     ON PostTags.TagId    = Tags.id\n    INNER JOIN Users    ON Posts.OwnerUserId = Users.id\nWHERE Tags.TagName = @TagName\n      AND Posts.AnswerCount = 0\n      AND Posts.PostTypeId  = 1            -- PostTypeId = 1 -> Question\n      AND Posts.CommunityOwnedDate is null\n      AND Posts.ClosedDate         is null\n      AND Users.Reputation > @minRep\nORDER by Posts.CreationDate      DESC;",
        "CreationDate": "2016-01-08 17:07:26",
        "validated": false,
        "QueryBody_Original": "DECLARE  @TagName as nvarchar(35) = '##TagName##'\nDECLARE @minRep as int = ##MinimumReputation:int?100##;\n\nSELECT \n    Posts.Id as [Post Link],\n    Posts.Tags as [Tags], \n    Posts.Score, \n    Posts.ViewCount, \n    Users.Reputation,\n    Posts.CreationDate, \n    Users.LastAccessDate\nFROM  Posts\n    INNER JOIN PostTags ON Posts.Id          = PostTags.PostId\n    INNER JOIN Tags     ON PostTags.TagId    = Tags.id\n    INNER JOIN Users    ON Posts.OwnerUserId = Users.id\nWHERE Tags.TagName = @TagName\n      AND Posts.AnswerCount = 0\n      AND Posts.PostTypeId  = 1            -- PostTypeId = 1 -> Question\n      AND Posts.CommunityOwnedDate is null\n      AND Posts.ClosedDate         is null\n      AND Users.Reputation > @minRep\nORDER by Posts.CreationDate      DESC;"
    },
    {
        "QuerySetId": 421170,
        "Title": "Ratio of upvotes to views",
        "Description": "Displays the questions with the greatest ratio of upvotes to views, for questions with at least a given number of views.  This helps to find the true gems, where looking at just upvotes tends to favour questions that have hit the Top Network Questions and received a ton of views.",
        "QueryBody": "DECLARE  @Threshold int = ##ViewThreshold##\n\nSELECT TOP 100\n    p.Id AS [Post Link],\n    p.OwnerUserId AS [User Link],\n    SUM(CASE WHEN v.VoteTypeId = 2 THEN 1 ELSE 0 END)\n    - SUM(CASE WHEN v.VoteTypeId = 3 THEN 1 ELSE 0 END) AS [NetUpvotes],\n    p.ViewCount AS [Views],\n    ROUND(CAST(SUM(CASE WHEN v.VoteTypeId = 2 THEN 1 ELSE 0 END)\n    - SUM(CASE WHEN v.VoteTypeId = 3 THEN 1 ELSE 0 END) AS float)\n    \/ CAST(p.ViewCount AS float) * 100, 4)\n       AS [Vote-to-view Ratio]\nFROM\n    Posts p \n    inner join Votes v on v.PostId=p.Id\nWHERE \n    p.ViewCount > @Threshold\nGROUP BY p.Id, p.OwnerUserId, p.ViewCount\nORDER BY [Vote-to-view Ratio] DESC",
        "CreationDate": "2016-01-08 22:48:29",
        "validated": false,
        "QueryBody_Original": "DECLARE  @Threshold int = ##ViewThreshold##\n\nSELECT TOP 100\n    p.Id AS [Post Link],\n    p.OwnerUserId AS [User Link],\n    SUM(CASE WHEN v.VoteTypeId = 2 THEN 1 ELSE 0 END)\n    - SUM(CASE WHEN v.VoteTypeId = 3 THEN 1 ELSE 0 END) AS [NetUpvotes],\n    p.ViewCount AS [Views],\n    ROUND(CAST(SUM(CASE WHEN v.VoteTypeId = 2 THEN 1 ELSE 0 END)\n    - SUM(CASE WHEN v.VoteTypeId = 3 THEN 1 ELSE 0 END) AS float)\n    \/ CAST(p.ViewCount AS float) * 100, 4)\n       AS [Vote-to-view Ratio]\nFROM\n    Posts p \n    inner join Votes v on v.PostId=p.Id\nWHERE \n    p.ViewCount > @Threshold\nGROUP BY p.Id, p.OwnerUserId, p.ViewCount\nORDER BY [Vote-to-view Ratio] DESC"
    },
    {
        "QuerySetId": 424105,
        "Title": "Top Askers (with average score)",
        "Description": "Shows the top 50 askers by question count.\r\n",
        "QueryBody": "WITH  average score\n-- PostTypeId: Post Type (Q=1, A=2)\n-- TagName: Tag (Only for Questions)\n\nSELECT TOP ##MaximumResults?10000##\n  OwnerUserId as [User Link],\n  COUNT(*) as PostCount,\n  SUM(Score) as TotalScore,\n  AVG(Score) as AverageScore\nFROM Posts\nWHERE \nPostTypeId=##PostTypeId?1##\nAND OwnerUserId != 1\nAND Tags LIKE '##TagName?%%##'\nGROUP BY OwnerUserId\nHAVING COUNT(*) > ##MinNrPosts?10##\nORDER BY AVG(Score) ASC",
        "CreationDate": "2016-01-15 21:35:45",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 424645,
        "Title": "Most popular tags in 2015",
        "Description": null,
        "QueryBody": "DECLARE  @Yr nvarchar(25) = '##Year##';\n\nselect \n       num.TagName as Tag,\n       row_number() over (order by rate.Rate desc) as RankInYear,\n       row_number() over (order by num.Num desc) as TotalRank,\n       rate.Rate as QuestionsIn2015,\n       num.Num as QuestionsTotal\n\nfrom\n\n(select count(PostId) as Rate, TagName\nfrom\n  Tags, PostTags, Posts\nwhere Tags.Id = PostTags.TagId and Posts.Id = PostId\nand datepart(year, Posts.CreationDate) = @Yr\ngroup by TagName) as rate\n\nINNER JOIN\n\n(select count(PostId) as Num, TagName\nfrom\n  Tags, PostTags, Posts\nwhere Tags.Id = PostTags.TagId and Posts.Id = PostId\ngroup by TagName\nhaving count(PostId) > 800)\nas num ON rate.TagName = num.TagName\norder by rate.rate desc\n;",
        "CreationDate": "2016-03-08 01:28:10",
        "validated": false,
        "QueryBody_Original": "DECLARE  @Yr nvarchar(25) = '##Year##';\n\nselect \n       num.TagName as Tag,\n       row_number() over (order by rate.Rate desc) as RankInYear,\n       row_number() over (order by num.Num desc) as TotalRank,\n       rate.Rate as QuestionsIn2015,\n       num.Num as QuestionsTotal\n\nfrom\n\n(select count(PostId) as Rate, TagName\nfrom\n  Tags, PostTags, Posts\nwhere Tags.Id = PostTags.TagId and Posts.Id = PostId\nand datepart(year, Posts.CreationDate) = @Yr\ngroup by TagName) as rate\n\nINNER JOIN\n\n(select count(PostId) as Num, TagName\nfrom\n  Tags, PostTags, Posts\nwhere Tags.Id = PostTags.TagId and Posts.Id = PostId\ngroup by TagName\nhaving count(PostId) > 800)\nas num ON rate.TagName = num.TagName\norder by rate.rate desc\n;"
    },
    {
        "QuerySetId": 425112,
        "Title": "Get Country & Reputation Wise Rank",
        "Description": null,
        "QueryBody": "SELECT \n    ROW_NUMBER() OVER(ORDER BY Reputation DESC) AS [#], \n    Id AS [User Link], \n    Reputation\nFROM\n    Users \nWHERE\n    LOWER(Location) LIKE LOWER('%##CountryName##%')\n    AND Reputation > ##Reputation##\n    AND LastAccessDate between '20-Oct-17' and '20-Nov-17'\nORDER BY\n    Reputation DESC;",
        "CreationDate": "2017-11-20 11:33:23",
        "validated": false,
        "QueryBody_Original": "SELECT \n    ROW_NUMBER() OVER(ORDER BY Reputation DESC) AS [#], \n    Id AS [User Link], \n    Reputation\nFROM\n    Users \nWHERE\n    LOWER(Location) LIKE LOWER('%##CountryName##%')\n    AND Reputation > ##Reputation##\n    AND LastAccessDate between '20-Oct-17' and '20-Nov-17'\nORDER BY\n    Reputation DESC;"
    },
    {
        "QuerySetId": 425113,
        "Title": "Get Country & Reputation Wise Rank Lower Than Submitted Reputaion",
        "Description": null,
        "QueryBody": "SELECT \n    ROW_NUMBER() OVER(ORDER BY Reputation DESC) AS [#], \n    Id AS [User Link], \n    Reputation\nFROM\n    Users \nWHERE\n    LOWER(Location) LIKE LOWER('%##CountryName##%')\n    AND Reputation < ##Reputation##\nORDER BY\n    Reputation DESC;",
        "CreationDate": "2016-01-19 10:20:41",
        "validated": false,
        "QueryBody_Original": "SELECT \n    ROW_NUMBER() OVER(ORDER BY Reputation DESC) AS [#], \n    Id AS [User Link], \n    Reputation\nFROM\n    Users \nWHERE\n    LOWER(Location) LIKE LOWER('%##CountryName##%')\n    AND Reputation < ##Reputation##\nORDER BY\n    Reputation DESC;"
    },
    {
        "QuerySetId": 425114,
        "Title": "Most CW answers on questions that hasn't been CW in history",
        "Description": "There're some false positives since \"Mod removes wiki\" isn't in PostHistory",
        "QueryBody": "SELECT  TOP ##topn:int?200##\n   q.Id AS [Post Link],q.AnswerCount AS totalanswers,COUNT(*) AS cwanswers,\n   q.Score AS [Q Score],q.ClosedDate\nFROM Posts q INNER JOIN Posts a ON q.Id=a.ParentId LEFT OUTER JOIN PostHistory h\n  ON q.Id=h.PostId And h.PostHistoryTypeId=16\nWHERE q.PostTypeId=1 AND a.PostTypeId=2 AND a.CommunityOwnedDate IS NOT NULL\n  AND q.CommunityOwnedDate IS NULL\nGROUP BY q.Id,q.AnswerCount,q.Score,q.ClosedDate\nHAVING COUNT(h.Id)=0\nORDER BY COUNT(*) DESC",
        "CreationDate": "2016-01-19 11:23:10",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 425587,
        "Title": "Number of answers outscoring a given user's answers",
        "Description": "Rank users by the number of answers that outscore the target user's answer on the same question. Only answers posted at most 24 hours earlier are considered.",
        "QueryBody": "SELECT \n  b.OwnerUserId as [User Link],\n  count(*) as [Count],\n  min(b.Id) as [Post Link]\nfrom Posts a, Posts b\nwhere a.OwnerUserId = ##User##\n  and b.OwnerUserId <> a.OwnerUserId\n  and b.ParentId = a.ParentId\n  and b.Score > a.Score\n  and a.CreationDate <= DateAdd(hour, 24, b.CreationDate)\ngroup by b.OwnerUserId\norder by [Count] desc",
        "CreationDate": "2016-01-20 02:32:28",
        "validated": false,
        "QueryBody_Original": "SELECT \n  b.OwnerUserId as [User Link],\n  count(*) as [Count],\n  min(b.Id) as [Post Link]\nfrom Posts a, Posts b\nwhere a.OwnerUserId = ##User##\n  and b.OwnerUserId <> a.OwnerUserId\n  and b.ParentId = a.ParentId\n  and b.Score > a.Score\n  and a.CreationDate <= DateAdd(hour, 24, b.CreationDate)\ngroup by b.OwnerUserId\norder by [Count] desc"
    },
    {
        "QuerySetId": 425677,
        "Title": "User answer stats per tag",
        "Description": "Given a tag on the site, this query will return you some statistics around how correct they are within that tag",
        "QueryBody": "DECLARE  @TAGS NVARCHAR(255) = '%<' + LOWER('##SelectedTag##') + '>%'\n\n-- get all answers matching a tag, store in temp\nSELECT\n  pt.OwnerUserId\n  ,pt.Score\n  ,CASE WHEN parent.AcceptedAnswerId = pt.id THEN 1 ELSE 0 END AS AcceptedAnswer\n  ,pt.Score \/ pt.ViewCount AS ScorePerViewPct\nINTO #TEMP\nFROM Posts pt\n  LEFT JOIN Posts parent ON pt.ParentId = parent.Id\nWHERE parent.tags LIKE @TAGS\n  AND pt.PostTypeId = 2 --answer\n\n\nSELECT TOP 100\n  p.OwnerUserId\n  ,p.TaggedAnswerCount\n  ,p.TaggedAnswersAccepted\n  ,p.TaggedAnswerScoreViewPctAvg\nFROM (\n  SELECT t.OwnerUserId\n    ,COUNT(t.OwnerUserId) as TaggedAnswerCount\n    ,SUM(t.AcceptedAnswer) as TaggedAnswersAccepted\n    ,AVG(t.ScorePerViewPct) as TaggedAnswerScoreViewPctAvg\n  FROM #TEMP t\n  GROUP BY OwnerUserId\n) p\n\n--get std dev",
        "CreationDate": "2016-01-22 03:22:11",
        "validated": false,
        "QueryBody_Original": "DECLARE  @TAGS NVARCHAR(255) = '%<' + LOWER('##SelectedTag##') + '>%'\n\n-- get all answers matching a tag, store in temp\nSELECT\n  pt.OwnerUserId\n  ,pt.Score\n  ,CASE WHEN parent.AcceptedAnswerId = pt.id THEN 1 ELSE 0 END AS AcceptedAnswer\n  ,pt.Score \/ pt.ViewCount AS ScorePerViewPct\nINTO #TEMP\nFROM Posts pt\n  LEFT JOIN Posts parent ON pt.ParentId = parent.Id\nWHERE parent.tags LIKE @TAGS\n  AND pt.PostTypeId = 2 --answer\n\n\nSELECT TOP 100\n  p.OwnerUserId\n  ,p.TaggedAnswerCount\n  ,p.TaggedAnswersAccepted\n  ,p.TaggedAnswerScoreViewPctAvg\nFROM (\n  SELECT t.OwnerUserId\n    ,COUNT(t.OwnerUserId) as TaggedAnswerCount\n    ,SUM(t.AcceptedAnswer) as TaggedAnswersAccepted\n    ,AVG(t.ScorePerViewPct) as TaggedAnswerScoreViewPctAvg\n  FROM #TEMP t\n  GROUP BY OwnerUserId\n) p\n\n--get std dev"
    },
    {
        "QuerySetId": 425977,
        "Title": "Answer (Up\/Down) Votes from a specific Question",
        "Description": null,
        "QueryBody": "DECLARE  @ParentId int = 247621\n--Substitute the following linn with \"2\" for UpVotes or \"3\" for DownVotes\nDECLARE @kind int = 2\n\n\nselect\n    count(v.postid) as 'DV count', v.postid AS [Post Link],p.body\nfrom\n    votes v\n    inner join posts p on p.id=v.postid\nwhere \n    p.ParentId = @ParentId and\n    p.PostTypeId = 2 and\n    v.VoteTypeId = @kind\ngroup by\n    v.postid,p.body\norder by\n    'DV count' desc",
        "CreationDate": "2016-01-22 04:30:03",
        "validated": false,
        "QueryBody_Original": "DECLARE  @ParentId int = 247621\n--Substitute the following linn with \"2\" for UpVotes or \"3\" for DownVotes\nDECLARE @kind int = 2\n\n\nselect\n    count(v.postid) as 'DV count', v.postid AS [Post Link],p.body\nfrom\n    votes v\n    inner join posts p on p.id=v.postid\nwhere \n    p.ParentId = @ParentId and\n    p.PostTypeId = 2 and\n    v.VoteTypeId = @kind\ngroup by\n    v.postid,p.body\norder by\n    'DV count' desc"
    },
    {
        "QuerySetId": 426716,
        "Title": "Top 20 users of SAPUI5",
        "Description": null,
        "QueryBody": "DECLARE  @user_id int = 1641714;\nDECLARE @limit int = 20;\nDECLARE @tag_id int = (select id from tags where tagname = 'openui5');\n\n--select rank() over (order by score desc) \"Rank\", * from (\nselect top (@limit)\n  rank() over (order by sum(answers.score) desc) \"Rank\",\n  users.id \"User Link\"\n  ,sum(answers.score) as \"Score\"\n  ,(case when users.id = @user_id then '<<<<' else '' end)\nfrom users\njoin posts answers on (users.id = answers.owneruserid)\njoin posts parent on (answers.parentid = parent.id)\njoin posttags on (parent.id = posttags.postid)\nwhere posttags.tagid = @tag_id\nand answers.posttypeid = 2  -- answers only\ngroup by users.id\norder by sum(answers.score) desc\n;",
        "CreationDate": "2016-01-22 16:19:31",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 426853,
        "Title": "Answer breakdown by score for user",
        "Description": null,
        "QueryBody": "SELECT \n  p.Score,\n  count(p.Id) [PostCount]\nfrom Posts p\nwhere\n  p.OwnerUserId = ##UserId## and\n  p.PostTypeId = 2 --answer\ngroup by\n  p.Score\norder by p.Score asc",
        "CreationDate": "2016-01-22 21:23:15",
        "validated": false,
        "QueryBody_Original": "SELECT \n  p.Score,\n  count(p.Id) [PostCount]\nfrom Posts p\nwhere\n  p.OwnerUserId = ##UserId## and\n  p.PostTypeId = 2 --answer\ngroup by\n  p.Score\norder by p.Score asc"
    },
    {
        "QuerySetId": 427220,
        "Title": "Is there a way to see how the markup of a per-site meta answer is formed?",
        "Description": "http:\/\/meta.stackexchange.com\/questions\/273592\/is-there-a-way-to-see-how-the-markup-of-a-per-site-meta-answer-is-formed",
        "QueryBody": "SELECT  text\nfrom posthistory \nwhere postid = ##postid:int?303865##\nand posthistorytypeid in (2,5) -- body",
        "CreationDate": "2016-01-24 18:07:16",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 427292,
        "Title": "What are the rarest badges I have?",
        "Description": null,
        "QueryBody": "SELECT \n  DISTINCT MyBadges.Name,\n  (\n    SELECT COUNT(*)\n    FROM Badges\n    WHERE Badges.Name = MyBadges.Name\n  ) AS TotalCount\n  FROM Badges MyBadges\n  WHERE MyBadges.UserId = ##UserId##\n  ORDER BY TotalCount ASC",
        "CreationDate": "2016-01-25 04:24:35",
        "validated": false,
        "QueryBody_Original": "SELECT \n  DISTINCT MyBadges.Name,\n  (\n    SELECT COUNT(*)\n    FROM Badges\n    WHERE Badges.Name = MyBadges.Name\n  ) AS TotalCount\n  FROM Badges MyBadges\n  WHERE MyBadges.UserId = ##UserId##\n  ORDER BY TotalCount ASC"
    },
    {
        "QuerySetId": 427293,
        "Title": "How much rep would I have if there were no rep cap",
        "Description": null,
        "QueryBody": "DECLARE  @UserId int = ##UserId##\n\n\nSELECT SUM(Case When VoteTypeID = 1 Then 15 WHEN (VoteTypeID=2 AND p.PostTypeID=2) THEN 10 WHEN (VoteTypeID=2 AND p.PostTypeID=1) THEN 5 WHEN VoteTypeID=3 THEN -2 ELSE 0 END)\nFROM Votes v\nINNER JOIN Posts p ON p.ID = v.PostID\nWHERE p.OwnerUserID = @UserID AND p.CommunityOwnedDate IS NULL",
        "CreationDate": "2018-05-04 10:45:28",
        "validated": false,
        "QueryBody_Original": "DECLARE  @UserId int = ##UserId##\n\n\nSELECT SUM(Case When VoteTypeID = 1 Then 15 WHEN (VoteTypeID=2 AND p.PostTypeID=2) THEN 10 WHEN (VoteTypeID=2 AND p.PostTypeID=1) THEN 5 WHEN VoteTypeID=3 THEN -2 ELSE 0 END)\nFROM Votes v\nINNER JOIN Posts p ON p.ID = v.PostID\nWHERE p.OwnerUserID = @UserID AND p.CommunityOwnedDate IS NULL"
    },
    {
        "QuerySetId": 427294,
        "Title": "What are the rarest badges I do\/don't have?",
        "Description": null,
        "QueryBody": "SELECT \n  Badges.Name,\n  COUNT(*) AS Count,\n  CASE WHEN COUNT(Users.Id) > 0 THEN 'Yes' ELSE 'No' END AS HaveIt\nFROM Badges\nLEFT OUTER JOIN Users\nON Badges.UserId = Users.Id AND Users.Id = ##UserId##\nWHERE Badges.TagBased IN (##TagBased##)\nGROUP BY Badges.Name\nORDER BY HaveIt DESC, Count ASC",
        "CreationDate": "2016-01-25 04:41:59",
        "validated": false,
        "QueryBody_Original": "SELECT \n  Badges.Name,\n  COUNT(*) AS Count,\n  CASE WHEN COUNT(Users.Id) > 0 THEN 'Yes' ELSE 'No' END AS HaveIt\nFROM Badges\nLEFT OUTER JOIN Users\nON Badges.UserId = Users.Id AND Users.Id = ##UserId##\nWHERE Badges.TagBased IN (##TagBased##)\nGROUP BY Badges.Name\nORDER BY HaveIt DESC, Count ASC"
    },
    {
        "QuerySetId": 427377,
        "Title": "How many users in given tag have bigger reputation than ",
        "Description": null,
        "QueryBody": "DECLARE  @Reputation int = ##Reputation##\nDECLARE @Tag nvarchar(35) = '##Tag##'\n\nselect count(distinct u.Id) from Users u, Posts p, PostTags pt, Tags t where \np.OwnerUserId = u.Id and \npt.PostId = p.Id and \npt.TagId = t.Id and \nt.TagName = @Tag and\nu.Reputation > @Reputation",
        "CreationDate": "2016-01-25 15:08:04",
        "validated": false,
        "QueryBody_Original": "DECLARE  @Reputation int = ##Reputation##\nDECLARE @Tag nvarchar(35) = '##Tag##'\n\nselect count(distinct u.Id) from Users u, Posts p, PostTags pt, Tags t where \np.OwnerUserId = u.Id and \npt.PostId = p.Id and \npt.TagId = t.Id and \nt.TagName = @Tag and\nu.Reputation > @Reputation"
    },
    {
        "QuerySetId": 427801,
        "Title": "Perl 6 questions per month",
        "Description": null,
        "QueryBody": "SELECT  CAST(CONVERT(VARCHAR(7), CreationDate, 120) + '-01' AS datetime),\n--       COUNT(*)\nSELECT Tags\nFROM Posts\nWHERE Tags LIKE '%perl6%'\n--GROUP BY CONVERT(VARCHAR(7), CreationDate, 120)\n--ORDER BY CONVERT(VARCHAR(7), CreationDate, 120)",
        "CreationDate": "2020-09-18 18:26:52",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 427930,
        "Title": "My 50 Highest Rated Answers",
        "Description": null,
        "QueryBody": "DECLARE  @UserId int = ##UserId##\n\nSELECT TOP 50 \n  p.Id AS [Post Link], \n  COALESCE(p.LastEditDate,p.CreationDate) AS MostRecentChange,\n  (\n    Select Count(v.Id) \n    FROM Votes v\n    INNER JOIN VoteTypes vt ON v.VoteTypeId = vt.Id\n    WHERE vt.Name='UpMod' AND\n      v.PostId = p.Id\n  ) AS UpVotes,\n  (\n    Select Count(v.Id) \n    FROM Votes v\n    INNER JOIN VoteTypes vt ON v.VoteTypeId = vt.Id\n    WHERE vt.Name='DownMod' AND\n      v.PostId = p.Id\n  ) AS DownVotes,\n  p.Score,\n  iif(p.Id = p2.AcceptedAnswerId, 'Yes','No') as Accepted  \nFROM Posts p\nINNER JOIN PostTypes pt ON pt.Id = p.PostTypeId\nINNER JOIN Posts p2 ON p.ParentId = p2.Id\nWHERE \n  pt.Name='Answer' AND\n  p.OwnerUserId=@UserId\nORDER BY \n  p.Score DESC, \n  p.LastEditDate DESC",
        "CreationDate": "2016-02-07 12:43:51",
        "validated": false,
        "QueryBody_Original": "DECLARE  @UserId int = ##UserId##\n\nSELECT TOP 50 \n  p.Id AS [Post Link], \n  COALESCE(p.LastEditDate,p.CreationDate) AS MostRecentChange,\n  (\n    Select Count(v.Id) \n    FROM Votes v\n    INNER JOIN VoteTypes vt ON v.VoteTypeId = vt.Id\n    WHERE vt.Name='UpMod' AND\n      v.PostId = p.Id\n  ) AS UpVotes,\n  (\n    Select Count(v.Id) \n    FROM Votes v\n    INNER JOIN VoteTypes vt ON v.VoteTypeId = vt.Id\n    WHERE vt.Name='DownMod' AND\n      v.PostId = p.Id\n  ) AS DownVotes,\n  p.Score,\n  iif(p.Id = p2.AcceptedAnswerId, 'Yes','No') as Accepted  \nFROM Posts p\nINNER JOIN PostTypes pt ON pt.Id = p.PostTypeId\nINNER JOIN Posts p2 ON p.ParentId = p2.Id\nWHERE \n  pt.Name='Answer' AND\n  p.OwnerUserId=@UserId\nORDER BY \n  p.Score DESC, \n  p.LastEditDate DESC"
    },
    {
        "QuerySetId": 428556,
        "Title": "Answer Activity For Most Active Users",
        "Description": null,
        "QueryBody": "DECLARE  @DataDumpData AS DATETIME = (SELECT MAX(v.CreationDate) FROM [Votes] v) ;\nDECLARE @CutoffDate AS DATETIME = EOMONTH(DATEADD(month, -(##Months:int?12##), @DataDumpData)) ;\n\nWITH TopUsers AS (\n    SELECT TOP ##Users:int?3##\n           p.OwnerUserId,\n           COUNT(*) AS [Answers]\n    FROM Posts p\n    WHERE p.PostTypeId = 2\n    GROUP BY p.OwnerUserId\n    ORDER BY 2 DESC\n)\nSELECT EOMONTH(p.CreationDate) AS [mo],\n       u.DisplayName,\n       COUNT(*)\nFROM [Posts] p\nINNER JOIN TopUsers tu ON tu.OwnerUserId = p.OwnerUserId\nINNER JOIN [Users] u ON u.Id = tu.OwnerUserId\nWHERE p.PostTypeId = 2\nAND DATEDIFF(dd, @CutoffDate, p.CreationDate) > 0\nGROUP BY EOMONTH(p.CreationDate), u.DisplayName\nORDER BY EOMONTH(p.CreationDate), u.DisplayName ;",
        "CreationDate": "2016-01-28 02:59:49",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 428699,
        "Title": "Christianity Questions to Answer (custom)",
        "Description": "Good questions, custom tags, without great answers or any accepted answers, or answers by a particular user, that have been around for at least X months.",
        "QueryBody": "DECLARE  @Exclude int = ##Exclude?21576##;\n-- Exclude: Exclude questions posted by these users:   \"Returns all users with at least this many qualifying edits\"\n\n\nselect id as [Post Link], creationdate as 'Creation Date', score as 'Question Score'\nfrom posts\nwhere posttypeid = 1\nand OwnerUserID NOT IN  (@Exclude)\nand (tags like '%##Tag1?protestant##%'\nor tags like '%##Tag2?NULL##%'\nor tags like '%##Tag3?NULL##%')\nand score >= 3\nand acceptedanswerid is null\nand (select max(score) from posts answers\n  where posttypeid = 2 \n  and parentid = posts.id) <= 2\nand closeddate is  null\nand not exists (select * from posts answers where owneruserid = ##AlreadyAnsweredBy?21576## and posttypeid = 2 and parentid = posts.id)\nand datediff(mm,creationdate,getdate()) >= ##MonthsOld?3##\norder by creationdate",
        "CreationDate": "2018-08-06 22:44:14",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 429066,
        "Title": "Quantidade de votos por coment\u00e1rio",
        "Description": null,
        "QueryBody": "DECLARE  @UserId int = ##UserId##\n\nSELECT PostId as [Post Link], Comments.Id as [Comment Link],\nComments.Score,\nComments.Text\n\nFROM Comments\nINNER JOIN Posts ON Posts.Id = Comments.PostId\n\nWHERE UserId = @UserId\n\nORDER BY Comments.Score DESC",
        "CreationDate": "2016-01-28 20:03:23",
        "validated": false,
        "QueryBody_Original": "DECLARE  @UserId int = ##UserId##\n\nSELECT PostId as [Post Link], Comments.Id as [Comment Link],\nComments.Score,\nComments.Text\n\nFROM Comments\nINNER JOIN Posts ON Posts.Id = Comments.PostId\n\nWHERE UserId = @UserId\n\nORDER BY Comments.Score DESC"
    },
    {
        "QuerySetId": 429243,
        "Title": "What is the percentage of down voting users (with input)?",
        "Description": null,
        "QueryBody": "DECLARE  @MinDownVotes int = ##MinDownVotes:int##\n\n;WITH DownVoterCount AS (\nSELECT DownVoterCount = CAST(Count(*) AS float)\nFROM Users\nWhere Users.Downvotes >= @MinDownVotes\n), UserCount AS (\nSELECT UserCount = CAST(Count(*) AS float)\nFROM Users\n), DownVoterPercentage AS (\nSELECT ROUND(((SELECT DownVoterCount FROM DownVoterCount) \/ (SELECT UserCount FROM UserCount)) * 100, 4) AS DownVoterPercentage\n)\n\nSELECT DownVoterPercentage\nFROM DownVoterPercentage",
        "CreationDate": "2016-01-29 06:59:36",
        "validated": false,
        "QueryBody_Original": "DECLARE  @MinDownVotes int = ##MinDownVotes:int##\n\n;WITH DownVoterCount AS (\nSELECT DownVoterCount = CAST(Count(*) AS float)\nFROM Users\nWhere Users.Downvotes >= @MinDownVotes\n), UserCount AS (\nSELECT UserCount = CAST(Count(*) AS float)\nFROM Users\n), DownVoterPercentage AS (\nSELECT ROUND(((SELECT DownVoterCount FROM DownVoterCount) \/ (SELECT UserCount FROM UserCount)) * 100, 4) AS DownVoterPercentage\n)\n\nSELECT DownVoterPercentage\nFROM DownVoterPercentage"
    },
    {
        "QuerySetId": 429294,
        "Title": "What are the scores of my comments, and the scores of the posts they are posted on?",
        "Description": null,
        "QueryBody": "DECLARE  @MyUserId int = ##MyUserId:int##\n\n;WITH MyComments AS (\nSELECT CommentScore = Score, Text, UserId, PostId\nFROM Comments\nWHERE UserId = @MyUserId\n), PostScores AS (\nSELECT PostScores = Score, Id\nFROM Posts\n)\n\nSELECT CommentScore, Text, PostScores.PostScores\nFROM MyComments\n\nINNER JOIN PostScores ON MyComments.PostId = PostScores.Id\n\nORDER BY CommentScore DESC",
        "CreationDate": "2016-01-29 10:20:30",
        "validated": false,
        "QueryBody_Original": "DECLARE  @MyUserId int = ##MyUserId:int##\n\n;WITH MyComments AS (\nSELECT CommentScore = Score, Text, UserId, PostId\nFROM Comments\nWHERE UserId = @MyUserId\n), PostScores AS (\nSELECT PostScores = Score, Id\nFROM Posts\n)\n\nSELECT CommentScore, Text, PostScores.PostScores\nFROM MyComments\n\nINNER JOIN PostScores ON MyComments.PostId = PostScores.Id\n\nORDER BY CommentScore DESC"
    },
    {
        "QuerySetId": 429400,
        "Title": "Interest groups, user affinity Tagvector",
        "Description": null,
        "QueryBody": "DECLARE  @UserId1 int = ##UserId1##\n\nDECLARE @UserId2 int = ##UserId2##  \n\nSELECT TOP(200)\n   TagName,\n   round(\n   10*min(merit)*(AVG(merit)-STDEVP(merit)) \/(AVG(merit)+STDEVP(merit)),\n     0) AS affinity_index,\n     \n   max(merit) as mx, min(merit) as mn\n   \nFROM (\n  SELECT -- TOP(10) \n      Posts.OwnerUserId AS userId,\n      TagName,\n      round(sqrt(COUNT(*)),0) AS merit -- quadratic voting metric\n\n  FROM Tags\n      INNER JOIN PostTags ON PostTags.TagId = Tags.id\n      INNER JOIN Posts ON Posts.ParentId = PostTags.PostId\n      INNER JOIN Votes ON Votes.PostId = Posts.Id and VoteTypeId = 2\n  WHERE \n      Posts.OwnerUserId = @UserId1 OR Posts.OwnerUserId = @UserId2\n  GROUP BY Posts.OwnerUserId, TagName \n  ) t\nGROUP BY TagName \nHAVING count(*)>1\nORDER BY affinity_index DESC, TagName",
        "CreationDate": "2016-01-31 05:08:25",
        "validated": false,
        "QueryBody_Original": "DECLARE  @UserId1 int = ##UserId1##\n\nDECLARE @UserId2 int = ##UserId2##  \n\nSELECT TOP(200)\n   TagName,\n   round(\n   10*min(merit)*(AVG(merit)-STDEVP(merit)) \/(AVG(merit)+STDEVP(merit)),\n     0) AS affinity_index,\n     \n   max(merit) as mx, min(merit) as mn\n   \nFROM (\n  SELECT -- TOP(10) \n      Posts.OwnerUserId AS userId,\n      TagName,\n      round(sqrt(COUNT(*)),0) AS merit -- quadratic voting metric\n\n  FROM Tags\n      INNER JOIN PostTags ON PostTags.TagId = Tags.id\n      INNER JOIN Posts ON Posts.ParentId = PostTags.PostId\n      INNER JOIN Votes ON Votes.PostId = Posts.Id and VoteTypeId = 2\n  WHERE \n      Posts.OwnerUserId = @UserId1 OR Posts.OwnerUserId = @UserId2\n  GROUP BY Posts.OwnerUserId, TagName \n  ) t\nGROUP BY TagName \nHAVING count(*)>1\nORDER BY affinity_index DESC, TagName"
    },
    {
        "QuerySetId": 430286,
        "Title": "Two-user affinity vetor, by interesting profiles",
        "Description": null,
        "QueryBody": "DECLARE  @UserId1 int = ##UserId1##\nDECLARE @UserId2 int = ##UserId2##\n\n\t\tSELECT\n\t\t    PostTags.PostId, Posts.OwnerUserId,\n\t\t    COUNT(*) as p_tot_tags\n\t\tFROM Tags\n\t\t    INNER JOIN PostTags ON PostTags.TagId = Tags.id\n\t\t    INNER JOIN Posts ON Posts.ParentId = PostTags.PostId\n\t\tWHERE Posts.OwnerUserId IN (@UserId1,@UserId2)\n\t\tGROUP BY PostTags.PostId, Posts.OwnerUserId",
        "CreationDate": "2016-01-31 19:22:04",
        "validated": false,
        "QueryBody_Original": "DECLARE  @UserId1 int = ##UserId1##\nDECLARE @UserId2 int = ##UserId2##\n\n\t\tSELECT\n\t\t    PostTags.PostId, Posts.OwnerUserId,\n\t\t    COUNT(*) as p_tot_tags\n\t\tFROM Tags\n\t\t    INNER JOIN PostTags ON PostTags.TagId = Tags.id\n\t\t    INNER JOIN Posts ON Posts.ParentId = PostTags.PostId\n\t\tWHERE Posts.OwnerUserId IN (@UserId1,@UserId2)\n\t\tGROUP BY PostTags.PostId, Posts.OwnerUserId"
    },
    {
        "QuerySetId": 430354,
        "Title": "Monthly count of posts with inline http images not from imgur",
        "Description": null,
        "QueryBody": "SELECT \n  DateAdd(Month, DateDiff(Month, 0, CreationDate), 0) as [Month],\n  Count(*) as [Posts]\nfrom Posts\nwhere Body like '%<img src=\"http:\/\/%'\n  and Replace(Replace(Replace(Body, '<img src=\"http:\/\/i.stack.imgur.com\/', 'X'), '<img src=\"http:\/\/i.imgur.com\/', 'X'), '<img src=\"http:\/\/imgur.com\/', 'X') like '%<img src=\"http:\/\/%'\n  and CreationDate between ##StartDate:string?2015-01-01## and ##EndDate:string?2016-01-01##\ngroup by DateAdd(Month, DateDiff(Month, 0, CreationDate), 0)\norder by [Month]",
        "CreationDate": "2016-01-31 22:54:34",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 431139,
        "Title": "suggested edits with most rejection reasons",
        "Description": null,
        "QueryBody": "SELECT  TOP ##topn:int?200##\nrt.SuggestedEditId AS [Suggested Edit Link],COUNT(DISTINCT rr.RejectionReasonId) AS n\nFROM ReviewTasks rt INNER JOIN ReviewTaskResults rr ON rr.ReviewTaskId=rt.Id\nWHERE rt.ReviewTaskTypeId=1\nGROUP BY rt.SuggestedEditId\n\nORDER BY COUNT(DISTINCT rr.RejectionReasonId) DESC",
        "CreationDate": "2016-02-02 14:31:00",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 432138,
        "Title": "my answers to my favorite questions",
        "Description": null,
        "QueryBody": "DECLARE  @MyUserID INT = ##UserID:int##\n\nselect distinct 'site:\/\/q\/' + cast(a.id as nvarchar) +'|Answer Link'\n     , v.postid as [Post Link]\n     , v.creationdate as [favorited on date]\n     , v.userid as [User Link]\nfrom votes v \ninner join posts a on a.parentid = v.postid\nwhere v.votetypeid = 5 -- favorite\nand v.userid = @MyUserID\nand a.OwnerUserId = @MyUserID\norder by v.creationdate desc",
        "CreationDate": "2016-02-04 17:55:02",
        "validated": false,
        "QueryBody_Original": "DECLARE  @MyUserID INT = ##UserID:int##\n\nselect distinct 'site:\/\/q\/' + cast(a.id as nvarchar) +'|Answer Link'\n     , v.postid as [Post Link]\n     , v.creationdate as [favorited on date]\n     , v.userid as [User Link]\nfrom votes v \ninner join posts a on a.parentid = v.postid\nwhere v.votetypeid = 5 -- favorite\nand v.userid = @MyUserID\nand a.OwnerUserId = @MyUserID\norder by v.creationdate desc"
    },
    {
        "QuerySetId": 432664,
        "Title": "Current Working Sandbox - Fixable questions",
        "Description": null,
        "QueryBody": "SELECT \n  TOP\n    ##ReturnNum:int?10## PostId\n    AS\n      [Post Link],\n      PostHistoryTypeId\n    FROM PostHistory\n    WHERE\n      PostHistoryTypeId = 10\n  ORDER BY\n    Id\n  DESC;\n\nSELECT TOP 10 Id FROM Posts ORDER BY Id DESC",
        "CreationDate": "2016-02-07 01:36:00",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 432959,
        "Title": "My 50 Lowest Rated Answers",
        "Description": null,
        "QueryBody": "DECLARE  @UserId int = ##UserId##\n\nSELECT TOP 50 \n  p.Id AS [Post Link], \n  COALESCE(p.LastEditDate,p.CreationDate) AS MostRecentChange,\n  (\n    Select Count(v.Id) \n    FROM Votes v\n    INNER JOIN VoteTypes vt ON v.VoteTypeId = vt.Id\n    WHERE vt.Name='UpMod' AND\n      v.PostId = p.Id\n  ) AS UpVotes,\n  (\n    Select Count(v.Id) \n    FROM Votes v\n    INNER JOIN VoteTypes vt ON v.VoteTypeId = vt.Id\n    WHERE vt.Name='DownMod' AND\n      v.PostId = p.Id\n  ) AS DownVotes,\n  p.Score,\n  iif(p.Id = p2.AcceptedAnswerId, 'Yes','No') as Accepted\nFROM Posts p\nINNER JOIN PostTypes pt ON pt.Id = p.PostTypeId\nINNER JOIN Posts p2 ON p.ParentId = p2.Id\nWHERE \n  pt.Name='Answer' AND\n  p.OwnerUserId=@UserId\nORDER BY \n  p.Score, \n  p.LastEditDate DESC",
        "CreationDate": "2016-02-07 12:42:31",
        "validated": false,
        "QueryBody_Original": "DECLARE  @UserId int = ##UserId##\n\nSELECT TOP 50 \n  p.Id AS [Post Link], \n  COALESCE(p.LastEditDate,p.CreationDate) AS MostRecentChange,\n  (\n    Select Count(v.Id) \n    FROM Votes v\n    INNER JOIN VoteTypes vt ON v.VoteTypeId = vt.Id\n    WHERE vt.Name='UpMod' AND\n      v.PostId = p.Id\n  ) AS UpVotes,\n  (\n    Select Count(v.Id) \n    FROM Votes v\n    INNER JOIN VoteTypes vt ON v.VoteTypeId = vt.Id\n    WHERE vt.Name='DownMod' AND\n      v.PostId = p.Id\n  ) AS DownVotes,\n  p.Score,\n  iif(p.Id = p2.AcceptedAnswerId, 'Yes','No') as Accepted\nFROM Posts p\nINNER JOIN PostTypes pt ON pt.Id = p.PostTypeId\nINNER JOIN Posts p2 ON p.ParentId = p2.Id\nWHERE \n  pt.Name='Answer' AND\n  p.OwnerUserId=@UserId\nORDER BY \n  p.Score, \n  p.LastEditDate DESC"
    },
    {
        "QuerySetId": 432963,
        "Title": "My 50 Highest Rated Accepted Answers",
        "Description": null,
        "QueryBody": "DECLARE  @UserId int = ##UserId##\n\nSELECT TOP 50 \n  p.Id AS [Post Link], \n  COALESCE(p.LastEditDate,p.CreationDate) AS MostRecentChange,\n  (\n    Select Count(v.Id) \n    FROM Votes v\n    INNER JOIN VoteTypes vt ON v.VoteTypeId = vt.Id\n    WHERE vt.Name='UpMod' AND\n      v.PostId = p.Id\n  ) AS UpVotes,\n  (\n    Select Count(v.Id) \n    FROM Votes v\n    INNER JOIN VoteTypes vt ON v.VoteTypeId = vt.Id\n    WHERE vt.Name='DownMod' AND\n      v.PostId = p.Id\n  ) AS DownVotes,\n  p.Score    \nFROM Posts p\nINNER JOIN PostTypes pt ON pt.Id = p.PostTypeId\nINNER JOIN Posts p2 ON p.ParentId = p2.Id\nWHERE \n  pt.Name='Answer' AND\n  p.OwnerUserId=@UserId AND\n  p.Id = p2.AcceptedAnswerId  \nORDER BY \n  p.Score DESC, \n  p.LastEditDate DESC",
        "CreationDate": "2016-02-07 12:48:16",
        "validated": false,
        "QueryBody_Original": "DECLARE  @UserId int = ##UserId##\n\nSELECT TOP 50 \n  p.Id AS [Post Link], \n  COALESCE(p.LastEditDate,p.CreationDate) AS MostRecentChange,\n  (\n    Select Count(v.Id) \n    FROM Votes v\n    INNER JOIN VoteTypes vt ON v.VoteTypeId = vt.Id\n    WHERE vt.Name='UpMod' AND\n      v.PostId = p.Id\n  ) AS UpVotes,\n  (\n    Select Count(v.Id) \n    FROM Votes v\n    INNER JOIN VoteTypes vt ON v.VoteTypeId = vt.Id\n    WHERE vt.Name='DownMod' AND\n      v.PostId = p.Id\n  ) AS DownVotes,\n  p.Score    \nFROM Posts p\nINNER JOIN PostTypes pt ON pt.Id = p.PostTypeId\nINNER JOIN Posts p2 ON p.ParentId = p2.Id\nWHERE \n  pt.Name='Answer' AND\n  p.OwnerUserId=@UserId AND\n  p.Id = p2.AcceptedAnswerId  \nORDER BY \n  p.Score DESC, \n  p.LastEditDate DESC"
    },
    {
        "QuerySetId": 432964,
        "Title": "My 50 Lowest Rated Accepted Answers",
        "Description": null,
        "QueryBody": "DECLARE  @UserId int = ##UserId##\n\nSELECT TOP 50 \n  p.Id AS [Post Link], \n  COALESCE(p.LastEditDate,p.CreationDate) AS MostRecentChange,\n  (\n    Select Count(v.Id) \n    FROM Votes v\n    INNER JOIN VoteTypes vt ON v.VoteTypeId = vt.Id\n    WHERE vt.Name='UpMod' AND\n      v.PostId = p.Id\n  ) AS UpVotes,\n  (\n    Select Count(v.Id) \n    FROM Votes v\n    INNER JOIN VoteTypes vt ON v.VoteTypeId = vt.Id\n    WHERE vt.Name='DownMod' AND\n      v.PostId = p.Id\n  ) AS DownVotes,\n  p.Score    \nFROM Posts p\nINNER JOIN PostTypes pt ON pt.Id = p.PostTypeId\nINNER JOIN Posts p2 ON p.ParentId = p2.Id\nWHERE \n  pt.Name='Answer' AND\n  p.OwnerUserId=@UserId AND\n  p.Id = p2.AcceptedAnswerId  \nORDER BY \n  p.Score, \n  p.LastEditDate DESC",
        "CreationDate": "2016-02-07 12:49:39",
        "validated": false,
        "QueryBody_Original": "DECLARE  @UserId int = ##UserId##\n\nSELECT TOP 50 \n  p.Id AS [Post Link], \n  COALESCE(p.LastEditDate,p.CreationDate) AS MostRecentChange,\n  (\n    Select Count(v.Id) \n    FROM Votes v\n    INNER JOIN VoteTypes vt ON v.VoteTypeId = vt.Id\n    WHERE vt.Name='UpMod' AND\n      v.PostId = p.Id\n  ) AS UpVotes,\n  (\n    Select Count(v.Id) \n    FROM Votes v\n    INNER JOIN VoteTypes vt ON v.VoteTypeId = vt.Id\n    WHERE vt.Name='DownMod' AND\n      v.PostId = p.Id\n  ) AS DownVotes,\n  p.Score    \nFROM Posts p\nINNER JOIN PostTypes pt ON pt.Id = p.PostTypeId\nINNER JOIN Posts p2 ON p.ParentId = p2.Id\nWHERE \n  pt.Name='Answer' AND\n  p.OwnerUserId=@UserId AND\n  p.Id = p2.AcceptedAnswerId  \nORDER BY \n  p.Score, \n  p.LastEditDate DESC"
    },
    {
        "QuerySetId": 433616,
        "Title": "Which of your posts have been downvoted?",
        "Description": "Lists posts (including both questions and answers) owned by the given user that have been downvoted at least once, sorted by number of downvotes in descending order.",
        "QueryBody": "SELECT  P.Id as [Post Link], P.CreationDate, count(*) DownVotes from Posts P\njoin Votes V on P.Id = V.PostId\nwhere P.OwnerUserId = ##UserId:int## and V.VoteTypeId = 3\ngroup by P.Id, P.CreationDate\norder by count(*) desc;",
        "CreationDate": "2016-02-09 13:16:44",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 434318,
        "Title": "Users with both Android and iOS tag badge",
        "Description": null,
        "QueryBody": "SELECT  b.userid from Badges b where b.Name = 'python')",
        "CreationDate": "2016-02-10 22:03:40",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 434937,
        "Title": "View all close votes for a particular question",
        "Description": null,
        "QueryBody": "SELECT  Text\nfrom PostHistory\nwhere PostId = ##PostId:int##",
        "CreationDate": "2016-08-24 02:15:01",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 435091,
        "Title": "Percent of answers added on confirmed dupes",
        "Description": null,
        "QueryBody": "WITH  phid as (\nselect postid, max(id) id\nfrom posthistory\nwhere posthistorytypeid in (3, 10, 11)\ngroup by postid)\n\nselect dateadd(day, datediff(day, 0, a.creationdate)\/##granularity:int?14##*##granularity##, 0) [date]\n, sum(case when posthistorytypeid = 10 and ph.comment in (1, 101) then 100.0 else 0 end) \/ count(*) [Percent of answers added on confirmed dupes]\nfrom posts q\nleft join phid on q.id = phid.postid\nleft join posthistory ph on ph.id = phid.id\njoin posts a on a.parentid = q.id\nwhere datediff(day, q.creationdate, a.creationdate) <= ##maxdiff:int?0##\ngroup by dateadd(day, datediff(day, 0, a.creationdate)\/##granularity##*##granularity##, 0)\norder by dateadd(day, datediff(day, 0, a.creationdate)\/##granularity##*##granularity##, 0)",
        "CreationDate": "2016-02-11 09:11:14",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 435140,
        "Title": "My 50 Highest Rated Answers On Questions With No Accepted Answer",
        "Description": null,
        "QueryBody": "DECLARE  @UserId int = ##UserId##\n\nSELECT TOP 50\n  p.Id AS [Post Link],\n  COALESCE(p.LastEditDate,p.CreationDate) AS MostRecentChange,\n  (\n    Select Count(v.Id) \n    FROM Votes v\n    INNER JOIN VoteTypes vt ON v.VoteTypeId = vt.Id\n    WHERE vt.Name='UpMod' AND\n      v.PostId = p.Id\n  ) AS UpVotes,\n  (\n    Select Count(v.Id) \n    FROM Votes v\n    INNER JOIN VoteTypes vt ON v.VoteTypeId = vt.Id\n    WHERE vt.Name='DownMod' AND\n      v.PostId = p.Id\n  ) AS DownVotes,\n  p.Score\nFROM Posts p\nINNER JOIN PostTypes pt ON pt.Id = p.PostTypeId\nINNER JOIN Posts p2 ON p.ParentId = p2.Id\nWHERE \n  pt.Name='Answer' AND\n  p.OwnerUserId=@UserId AND\n  p2.AcceptedAnswerId IS NULL\nORDER BY \n  p.Score DESC, \n  p.LastEditDate DESC",
        "CreationDate": "2016-02-11 12:32:54",
        "validated": false,
        "QueryBody_Original": "DECLARE  @UserId int = ##UserId##\n\nSELECT TOP 50\n  p.Id AS [Post Link],\n  COALESCE(p.LastEditDate,p.CreationDate) AS MostRecentChange,\n  (\n    Select Count(v.Id) \n    FROM Votes v\n    INNER JOIN VoteTypes vt ON v.VoteTypeId = vt.Id\n    WHERE vt.Name='UpMod' AND\n      v.PostId = p.Id\n  ) AS UpVotes,\n  (\n    Select Count(v.Id) \n    FROM Votes v\n    INNER JOIN VoteTypes vt ON v.VoteTypeId = vt.Id\n    WHERE vt.Name='DownMod' AND\n      v.PostId = p.Id\n  ) AS DownVotes,\n  p.Score\nFROM Posts p\nINNER JOIN PostTypes pt ON pt.Id = p.PostTypeId\nINNER JOIN Posts p2 ON p.ParentId = p2.Id\nWHERE \n  pt.Name='Answer' AND\n  p.OwnerUserId=@UserId AND\n  p2.AcceptedAnswerId IS NULL\nORDER BY \n  p.Score DESC, \n  p.LastEditDate DESC"
    },
    {
        "QuerySetId": 435675,
        "Title": "Questions with X amount of votes.",
        "Description": null,
        "QueryBody": "SELECT  p.Id as [Post Link],\np.Score, \n(SELECT COUNT(v.Id) FROM Votes v WHERE v.VoteTypeId IN (2, 3) AND v.PostId = p.Id) as VoteCount,\np.CreationDate\n\nFROM Posts p\n\nWHERE p.Score < ##ScoreInput##\nAND (p.CreationDate < GETDATE() AND p.CreationDate > DATEADD(day,-##DaysAgo##, GETDATE()))\n\nORDER BY p.CreationDate DESC",
        "CreationDate": "2016-02-13 01:48:25",
        "validated": false,
        "QueryBody_Original": "SELECT  p.Id as [Post Link],\np.Score, \n(SELECT COUNT(v.Id) FROM Votes v WHERE v.VoteTypeId IN (2, 3) AND v.PostId = p.Id) as VoteCount,\np.CreationDate\n\nFROM Posts p\n\nWHERE p.Score < ##ScoreInput##\nAND (p.CreationDate < GETDATE() AND p.CreationDate > DATEADD(day,-##DaysAgo##, GETDATE()))\n\nORDER BY p.CreationDate DESC"
    },
    {
        "QuerySetId": 435864,
        "Title": "List of users sorted by rep",
        "Description": null,
        "QueryBody": "SELECT \n  Id as [User Link],\n  DisplayName,\n  Reputation\nFROM \n  Users\nWHERE\n  Reputation>##MinRep##\nORDER BY Reputation DESC",
        "CreationDate": "2016-02-18 13:05:16",
        "validated": false,
        "QueryBody_Original": "SELECT \n  Id as [User Link],\n  DisplayName,\n  Reputation\nFROM \n  Users\nWHERE\n  Reputation>##MinRep##\nORDER BY Reputation DESC"
    },
    {
        "QuerySetId": 437013,
        "Title": "JVM Language Popularity by Date",
        "Description": null,
        "QueryBody": "SELECT  convert(int, substring(convert(VARCHAR, p.CreationDate, 126),1,4)) as YEAR, TagName, count(1)\nfrom Posts p, PostTags pt, Tags t\nwhere p.id = pt.PostId and pt.TagId = t.id\nand TagName in( 'java', 'c#', 'scala')\nand p.CreationDate < '2016\/01\/01'\ngroup by TagName, substring(convert(VARCHAR, p.CreationDate, 126),1,4)\norder by 1",
        "CreationDate": "2016-02-27 16:46:43",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 437434,
        "Title": "Reviewers who often approve edits that get rejected",
        "Description": null,
        "QueryBody": "SELECT  TOP ##topn:int?200## v.UserId AS [User Link],\nSUM(CASE WHEN v.VoteTypeId=2 THEN 1 ELSE 0 END) AS approves,\nSUM(CASE WHEN v.VoteTypeId=3 THEN 1 ELSE 0 END) AS rejects,\nSUM(CASE WHEN v.VoteTypeId=2 AND e.RejectionDate IS NOT NULL  THEN 1 ELSE 0 END) AS wrongapproves,\nCAST(\n  SUM(CASE WHEN v.VoteTypeId=2 AND e.RejectionDate IS NOT NULL  THEN 1 ELSE 0 END)\n  AS DECIMAL(16,8))\/SUM(CASE WHEN v.VoteTypeId=2 THEN 1 ELSE 0 END)  AS wrongapproverate,\nMAX(v.CreationDate) AS lastvotedate\nFROM SuggestedEditVotes v INNER JOIN SuggestedEdits e ON v.SuggestedEditId=e.Id\nWHERE v.CreationDate>=##minvotedate:string?2016-01-01##\nGROUP BY v.UserId\nHAVING SUM(CASE WHEN v.VoteTypeId=2 THEN 1 ELSE 0 END) >=##minapproves:int?20##\nORDER BY wrongapproverate DESC",
        "CreationDate": "2016-02-16 14:51:33",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 437451,
        "Title": "Reviewers who often reject edits that get approved",
        "Description": null,
        "QueryBody": "SELECT  TOP ##topn:int?200## v.UserId AS [User Link],\nSUM(CASE WHEN v.VoteTypeId=2 THEN 1 ELSE 0 END) AS approves,\nSUM(CASE WHEN v.VoteTypeId=3 THEN 1 ELSE 0 END) AS rejects,\nSUM(CASE WHEN v.VoteTypeId=3 AND e.ApprovalDate IS NOT NULL  THEN 1 ELSE 0 END) AS wrongrejects,\nCAST(\n  SUM(CASE WHEN v.VoteTypeId=3 AND e.ApprovalDate IS NOT NULL  THEN 1 ELSE 0 END)\n  AS DECIMAL(16,8))\/SUM(CASE WHEN v.VoteTypeId=3 THEN 1 ELSE 0 END)  AS wrongrejectrate,\nMAX(v.CreationDate) AS lastvotedate\nFROM SuggestedEditVotes v INNER JOIN SuggestedEdits e ON v.SuggestedEditId=e.Id\nWHERE v.CreationDate>=##minvotedate:string?2016-01-01##\nGROUP BY v.UserId\nHAVING SUM(CASE WHEN v.VoteTypeId=3 THEN 1 ELSE 0 END) >=##minrejects:int?20##\nORDER BY wrongrejectrate DESC",
        "CreationDate": "2016-02-16 14:59:01",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 437457,
        "Title": "Most common suggested edit rejection reasons",
        "Description": null,
        "QueryBody": "SELECT  TOP ##topn:int?200## COUNT(*) AS num,RejectionReasonId,\nMIN(Name) AS Name,MIN(Description) AS Description,Comment\nFROM ReviewTaskResults t\nLEFT JOIN ReviewRejectionReasons r ON t.ReJectionReasonId=r.Id\nWHERE ReviewTaskResultTypeId=3\nGROUP BY RejectionReasonId,Comment\nORDER BY COUNT(*) DESC",
        "CreationDate": "2016-02-16 15:12:14",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 437472,
        "Title": "Upvoted questions closed as duplicate of downvoted one",
        "Description": null,
        "QueryBody": "SELECT  TOP ##topn:int?200## s.Id AS [Post Link],s.Score,MAX(t.Score) AS tScore\nFROM Posts t INNER JOIN PostLinks l ON t.Id=l.RelatedPostId INNER JOIN Posts s ON s.Id=l.PostId\nWHERE s.Score>=##minscore:int?20## AND l.LinkTypeId=3\nGROUP BY s.Id,s.Score\nORDER BY MAX(t.Score)",
        "CreationDate": "2016-02-16 16:35:18",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 437671,
        "Title": "User's positive-score answers to questions without an accepted answer",
        "Description": null,
        "QueryBody": "SELECT \n a.Id as [Post Link]\n,a.Score as [Answer Score]\n,q.Score as [Question Score]\n,u.Reputation as [OP's Reputation]\n,count(uq.Id) as [OP's Questions]\n,format(sum(iif(uq.AcceptedAnswerId is null, 0.0, 1.0)) \/ count(uq.Id), 'p3') as [OP's Acceptance Rate]\n,datediff(week, max(u.LastAccessDate), getdate()) as [Weeks absent]\nfrom dbo.Posts as a\n  join dbo.Posts as q\n     join dbo.Users as u\n       join dbo.Posts as uq\n       on uq.OwnerUserId = u.Id\n       and uq.PostTypeId = 1 -- question\n     on u.Id = q.OwnerUserId\n  on q.Id = a.ParentId\n  and q.AcceptedAnswerId is null and q.Score >= 0\nwhere a.OwnerUserId = ##userId:int##\nand a.Score > 0\ngroup by\n a.Id\n,a.Score\n,q.Score\n,u.Reputation\norder by a.Score desc;",
        "CreationDate": "2016-02-16 23:43:38",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 437680,
        "Title": "Find all questions with a certain tag edited by you",
        "Description": null,
        "QueryBody": "SELECT  distinct PostHistory.PostId as [Post Link]\nfrom PostHistory, Posts\nwhere PostHistory.PostId = Posts.Id\nand PostHistory.UserId = ##UserId##\nand PostHistoryTypeId between 4 and 6\nand Posts.Tags like '%<' + ##tag:string## + '>%'",
        "CreationDate": "2016-02-16 23:59:55",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 437863,
        "Title": "User with the Most Favorites",
        "Description": null,
        "QueryBody": "WITH  the Most Favorites\n\n    SELECT TOP 50 COUNT(*) AS favcnt, Votes.UserId  AS [User Link]\n    FROM Votes \n      INNER JOIN \n        Users ON Votes.UserId = Users.Id\n    WHERE Votes.VoteTypeId = 5\n    GROUP BY UserId\n    ORDER BY favcnt DESC",
        "CreationDate": "2018-11-23 02:33:08",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 438626,
        "Title": "most common comments by new users",
        "Description": null,
        "QueryBody": "SELECT  TOP ##topn:int?200## Text,COUNT(*) AS num,MIN(c.Id) AS [Comment Link]\nFROM Comments c INNER JOIN Users u ON c.UserId=u.Id\nWHERE u.Reputation<=##maxrep:int?10## AND\n   NOT (Lower(Text) Like Lower(##excludepattern:string?thank%##)\n          AND LEN(Text)<=##excludemaxlen:int?30##)\nGROUP BY Text\nORDER BY COUNT(*) DESC",
        "CreationDate": "2016-02-18 19:06:43",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 438635,
        "Title": "Comment texts with high average score",
        "Description": null,
        "QueryBody": "SELECT  TOP ##topn:int?200## Text,COUNT(*) AS num,AVG(Score) AS avgscore,\nMIN(Score) AS  minscore,MAX(Score) AS maxscore,MIN(Id) AS [Comment Link]\nFROM Comments\nGROUP BY Text\nHAVING COUNT(*)>=##mincount:int?20##\nORDER BY AVG(Score) DESC",
        "CreationDate": "2016-02-18 19:19:09",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 438965,
        "Title": "low-rep users with many votes",
        "Description": null,
        "QueryBody": "SELECT  TOP ##topn:int?200##\nId AS [User Link],Reputation,CreationDate,LastAccessDate,UpVotes,DownVotes\nFROM Users\nWHERE Reputation<=##maxrep:int?500## AND UpVotes+DownVotes>=##minvotes:int?0##\nORDER BY ##orderby?UpVotes+DownVotes DESC##",
        "CreationDate": "2016-02-19 11:13:50",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 438971,
        "Title": "Users with zero upvotes but many downvotes",
        "Description": null,
        "QueryBody": "SELECT  TOP ##topn:int?200##\nId AS [User Link],Reputation,CreationDate,LastAccessDate,DownVotes\nFROM Users\nWHERE UpVotes=0\nORDER BY DownVotes DESC",
        "CreationDate": "2016-02-19 11:11:05",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 439973,
        "Title": "Top 100 related tags of single tag All Time",
        "Description": null,
        "QueryBody": "WITH  that base tag.\n\nselect TOP(100) t1.TagName as Tag, t2.TagName as \"Related Tag\", count(t2.TagName) as \"Count\"\n\nfrom PostTags as pt1\n  INNER JOIN Tags as t1 ON pt1.TagId = t1.Id\n  INNER JOIN PostTags as pt2 ON pt1.PostId = pt2.PostId AND pt1.TagId <> pt2.TagId\n  INNER JOIN Tags as t2 ON pt2.TagId = t2.Id\n  INNER JOIN posts A on pt2.postid = A.id\nwhere t1.TagName = ##MyTag:string##\n-- and A.creationdate > getdate() - 365\ngroup by t1.TagName, t2.TagName\norder by count(t2.TagName) desc",
        "CreationDate": "2016-02-28 05:57:49",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 440033,
        "Title": "Gobal Up- to Down-vote ratio",
        "Description": null,
        "QueryBody": "SELECT   \n  sum(UpVotes) as uv, \n  sum(DownVotes) as dv,\n  ROUND((CAST(sum(UpVotes) AS FLOAT)) \/ (CAST(sum(DownVotes) AS FLOAT)),3) AS Ratio\nFROM \n  Users\nWHERE \n  (UpVotes + DownVotes) > ##minVotes## \n  and DownVotes > ##minDV##",
        "CreationDate": "2016-02-23 12:35:08",
        "validated": false,
        "QueryBody_Original": "SELECT   \n  sum(UpVotes) as uv, \n  sum(DownVotes) as dv,\n  ROUND((CAST(sum(UpVotes) AS FLOAT)) \/ (CAST(sum(DownVotes) AS FLOAT)),3) AS Ratio\nFROM \n  Users\nWHERE \n  (UpVotes + DownVotes) > ##minVotes## \n  and DownVotes > ##minDV##"
    },
    {
        "QuerySetId": 440290,
        "Title": "Find all the questions about API ",
        "Description": null,
        "QueryBody": "SELECT  q.Title AS PostTitle\nFROM Posts q\n       INNER JOIN PostTags pt ON q.Id = pt.PostId\n       INNER JOIN Tags t ON pt.TagId = t.Id\nWHERE\n       t.TagName LIKE '%api%'\n       and q.Title LIKE '%value%')\nINTERSECT\n(SELECT q.Title AS PostTitle\nFROM Posts q\n       INNER JOIN PostTags pt ON q.Id = pt.PostId\n       INNER JOIN Tags t ON pt.TagId = t.Id\nWHERE\n       t.TagName LIKE '%c%'\n       and q.Title LIKE '%value%')\nEXCEPT\n(SELECT q.Title AS PostTitle\nFROM Posts q\n       INNER JOIN PostTags pt ON q.Id = pt.PostId\n       INNER JOIN Tags t ON pt.TagId = t.Id\nWHERE\n       t.TagName LIKE '%.NET%'\n       and q.Title LIKE '%value%')",
        "CreationDate": "2016-02-23 20:45:04",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 440961,
        "Title": " Favorite Users By Question SO",
        "Description": null,
        "QueryBody": "DECLARE  @PostId int = ##PostId##\n\nSELECT a.Id As [User Link], a.Reputation, b.CreationDate As DateFavorited\nFROM USERS a, VOTES b WHERE b.UserId = a.Id AND b.VoteTypeId = 5 AND b.PostId = @PostId\nORDER BY b.CreationDate DESC",
        "CreationDate": "2016-02-24 15:43:54",
        "validated": false,
        "QueryBody_Original": "DECLARE  @PostId int = ##PostId##\n\nSELECT a.Id As [User Link], a.Reputation, b.CreationDate As DateFavorited\nFROM USERS a, VOTES b WHERE b.UserId = a.Id AND b.VoteTypeId = 5 AND b.PostId = @PostId\nORDER BY b.CreationDate DESC"
    },
    {
        "QuerySetId": 441069,
        "Title": "Find UX Stack Exchange Users In Your City (with user-links)",
        "Description": null,
        "QueryBody": "WITH  user-links)\n-- A simply query to find users in your city or country. Added user links.\n\nselect Id [User Link], Reputation, DisplayName, Location\nfrom Users\nwhere Location like '%##Location##%'\norder by Reputation desc",
        "CreationDate": "2016-03-15 20:20:01",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 441075,
        "Title": "Find Mathematics Stack Exchange Users by location (with user-links)",
        "Description": null,
        "QueryBody": "WITH  user-links)\n-- A simply query to find users in your city or country. Added user links.\n\nselect Id [User Link], Reputation, DisplayName, Location\nfrom Users\nwhere Location like '%##Location##%'\norder by Reputation desc",
        "CreationDate": "2016-02-24 23:25:29",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 441845,
        "Title": "Users with the most favorites",
        "Description": null,
        "QueryBody": "SELECT  top ##number## * from (\n    SELECT COUNT(*) AS favcnt, Votes.UserId AS [User Link]\n    FROM Votes \n      INNER JOIN \n        Users ON Votes.UserId = Users.Id\n    WHERE Votes.VoteTypeId = 5\n    GROUP BY UserId\n    ) subq\nORDER BY favcnt DESC",
        "CreationDate": "2016-02-26 12:16:40",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 443461,
        "Title": "Posts by a user ordered by number of links they contain",
        "Description": null,
        "QueryBody": "SELECT  \n  posts.Id AS [Post Link], \n  (LEN(posts.Body) - \n   LEN(REPLACE(posts.Body,'https:\/\/'+LOWER(RIGHT(DB_NAME(db_id()),LEN(DB_NAME(db_id()))-CHARINDEX('.',DB_NAME(db_id())))),'')))\/14\n  +(LEN(posts.Body) - \n    LEN(REPLACE(posts.Body,'http:\/\/'+LOWER(RIGHT(DB_NAME(db_id()),LEN(DB_NAME(db_id()))-CHARINDEX('.',DB_NAME(db_id())))),'')))\/13 AS 'Links',\n  (CASE WHEN posts.PostTypeId=2 THEN 'A' ELSE 'Q' END) AS 'Type',\n  (CASE WHEN posts.PostTypeId=2 THEN questions.Tags \n                                ELSE posts.Tags END) AS 'Tags'\nFROM Posts posts\nLEFT JOIN Posts questions ON posts.ParentId=questions.Id\nWHERE posts.OwnerUserId=##UserId##\nORDER BY Links DESC",
        "CreationDate": "2016-03-22 21:48:48",
        "validated": false,
        "QueryBody_Original": "SELECT  \n  posts.Id AS [Post Link], \n  (LEN(posts.Body) - \n   LEN(REPLACE(posts.Body,'https:\/\/'+LOWER(RIGHT(DB_NAME(db_id()),LEN(DB_NAME(db_id()))-CHARINDEX('.',DB_NAME(db_id())))),'')))\/14\n  +(LEN(posts.Body) - \n    LEN(REPLACE(posts.Body,'http:\/\/'+LOWER(RIGHT(DB_NAME(db_id()),LEN(DB_NAME(db_id()))-CHARINDEX('.',DB_NAME(db_id())))),'')))\/13 AS 'Links',\n  (CASE WHEN posts.PostTypeId=2 THEN 'A' ELSE 'Q' END) AS 'Type',\n  (CASE WHEN posts.PostTypeId=2 THEN questions.Tags \n                                ELSE posts.Tags END) AS 'Tags'\nFROM Posts posts\nLEFT JOIN Posts questions ON posts.ParentId=questions.Id\nWHERE posts.OwnerUserId=##UserId##\nORDER BY Links DESC"
    },
    {
        "QuerySetId": 445187,
        "Title": "Top 100 Voted Unanswered Questions by Tag",
        "Description": null,
        "QueryBody": "DECLARE  @Tag nvarchar(50);\n\nSELECT TOP 100 \n  Id, \n  Title, \n  Score, \n  ViewCount \nFROM Posts \nWHERE \n  AnswerCount = 0 AND \n  ClosedDate IS NULL AND\n  TAGS = 'office-js'\nORDER BY SCORE DESC",
        "CreationDate": "2016-10-03 22:05:44",
        "validated": false,
        "QueryBody_Original": "DECLARE  @Tag nvarchar(50);\n\nSELECT TOP 100 \n  Id, \n  Title, \n  Score, \n  ViewCount \nFROM Posts \nWHERE \n  AnswerCount = 0 AND \n  ClosedDate IS NULL AND\n  TAGS = 'office-js'\nORDER BY SCORE DESC"
    },
    {
        "QuerySetId": 445681,
        "Title": "Most-loved users (least-downvoted as a percentage of total reputation)",
        "Description": null,
        "QueryBody": "SELECT  TOP 200\n Posts.OwnerUserId AS [User Link],\n Users.Reputation,\n sum(CASE WHEN Votes.VoteTypeId = 3 THEN 1 ELSE 0 END) AS [Downvotes For This User's Posts],\n FORMAT(sum(CASE WHEN Votes.VoteTypeId = 3 THEN 1 ELSE 0 END) * 100.0 \/ Users.Reputation, '##0.###', 'en-us') AS [Downvotes As Percentage Of Reputation]\n \nFROM\n\n Posts\n     JOIN Votes ON Votes.PostId = Posts.Id\n     JOIN Users ON Users.Id = Posts.OwnerUserId\n \nWHERE Posts.PostTypeId = 1\nAND Users.Reputation >= ##MinimumReputation?4000##\n\nGROUP BY Posts.OwnerUserId, Users.Reputation\n\nHAVING sum(CASE WHEN Votes.VoteTypeId = 3 THEN 1 ELSE 0 END) >= ##MinimumDownVotes?0##\n\nORDER BY [Downvotes As Percentage Of Reputation] ASC, Users.Reputation DESC",
        "CreationDate": "2016-09-14 21:26:27",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 445925,
        "Title": "Most common tags with short, long, or missing excerpt or wiki",
        "Description": "Lists the most commonly used tags with empty\/missing\/short tag wikis (wiki or excerpt). Can also identify tag wikis that are over a specified length. Enter -1 for all parameters to match all tags. Tags that have been synonymized are excluded.",
        "QueryBody": "DECLARE  @max_body_length INT = ##MaxBodyLength:INT?50##;\n-- MaxExcerptLength: Max excerpt length\nDECLARE @max_excerpt_length INT = ##MaxExcerptLength:INT?50##;\n\nSELECT Count,\n       t.TagName,\n       LEN(pe.Body)  AS [Excerpt length],\n       LEN(pw.Body)  AS [Wiki length],\n       ExcerptPostId AS [Post Link]\nFROM   Tags t\n       LEFT JOIN Posts pe ON pe.Id = t.ExcerptPostId\n       LEFT JOIN Posts pw ON pw.Id = t.WikiPostId\nWHERE  ExcerptPostId IS NULL                 -- no excerpt post\n       OR LEN(pe.Body) < @max_excerpt_length -- excerpt very short\n       OR WikiPostId IS NULL                 -- no wiki\n       OR LEN(pw.Body) < @max_body_length    -- wiki very short\nORDER  BY Count DESC, len(pw.Body) desc, len(pe.body) desc, t.TagName",
        "CreationDate": "2016-03-08 11:08:00",
        "validated": false,
        "QueryBody_Original": "DECLARE  @max_body_length INT = ##MaxBodyLength:INT?50##;\n-- MaxExcerptLength: Max excerpt length\nDECLARE @max_excerpt_length INT = ##MaxExcerptLength:INT?50##;\n\nSELECT Count,\n       t.TagName,\n       LEN(pe.Body)  AS [Excerpt length],\n       LEN(pw.Body)  AS [Wiki length],\n       ExcerptPostId AS [Post Link]\nFROM   Tags t\n       LEFT JOIN Posts pe ON pe.Id = t.ExcerptPostId\n       LEFT JOIN Posts pw ON pw.Id = t.WikiPostId\nWHERE  ExcerptPostId IS NULL                 -- no excerpt post\n       OR LEN(pe.Body) < @max_excerpt_length -- excerpt very short\n       OR WikiPostId IS NULL                 -- no wiki\n       OR LEN(pw.Body) < @max_body_length    -- wiki very short\nORDER  BY Count DESC, len(pw.Body) desc, len(pe.body) desc, t.TagName"
    },
    {
        "QuerySetId": 446064,
        "Title": "Find posts that were inactive for 24 months",
        "Description": null,
        "QueryBody": "SELECT  TOP 50\n    Id as [Post Link],\n    Score,\n    LastActivityDate\nFROM Posts\nWHERE PostTypeId=2\nAND OwnerUserId!=##UserID:int##\nAND LastActivityDate < DATEADD(mm, -24, GETDATE())\nAND LastEditorUserId is null\nORDER BY LastActivityDate DESC",
        "CreationDate": "2016-03-06 05:38:39",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 447223,
        "Title": "How Many of my Answers have been the Accepted Answer",
        "Description": null,
        "QueryBody": "DECLARE  @UserId int = ##UserId##\n\nSELECT answers.Id as [Post Link], answers.score as pontuacao, \nanswers.OwnerUSerId as[User Link],\nCONVERT(VARCHAR, answers.CreationDate,103) as CreationDate\nFROM posts as answers\nINNER JOIN posts all_posts ON all_posts.AcceptedAnswerId = answers.Id\nWHERE \nanswers.OwnerUserId = @UserId\nAND answers.PostTypeId = 2\nAND answers.ClosedDate IS NULL\nAND answers.DeletionDate IS NULL\nORDER BY pontuacao DESC",
        "CreationDate": "2016-03-18 01:37:56",
        "validated": false,
        "QueryBody_Original": "DECLARE  @UserId int = ##UserId##\n\nSELECT answers.Id as [Post Link], answers.score as pontuacao, \nanswers.OwnerUSerId as[User Link],\nCONVERT(VARCHAR, answers.CreationDate,103) as CreationDate\nFROM posts as answers\nINNER JOIN posts all_posts ON all_posts.AcceptedAnswerId = answers.Id\nWHERE \nanswers.OwnerUserId = @UserId\nAND answers.PostTypeId = 2\nAND answers.ClosedDate IS NULL\nAND answers.DeletionDate IS NULL\nORDER BY pontuacao DESC"
    },
    {
        "QuerySetId": 447276,
        "Title": "Percentage rate of my answers accepted with score zero",
        "Description": null,
        "QueryBody": "DECLARE  @UserId int = ##UserId##\n\nSELECT \n    (CAST(Count(a.Id) AS float) \/ (SELECT Count(*) FROM Posts WHERE OwnerUserId = @UserId AND PostTypeId = 2) * 100) AS AcceptedPercentage,\n    Count(a.Id) as \"Total Answers\"\nFROM\n    Posts q\n  INNER JOIN\n    Posts a ON q.AcceptedAnswerId = a.Id\nWHERE\n    a.OwnerUserId = @UserId\n  AND\n    a.PostTypeId = 2\n  AND\n  a.score = 0\n  AND\n  a.OwnerUserId <> q.OwnerUserId",
        "CreationDate": "2016-03-09 17:30:31",
        "validated": false,
        "QueryBody_Original": "DECLARE  @UserId int = ##UserId##\n\nSELECT \n    (CAST(Count(a.Id) AS float) \/ (SELECT Count(*) FROM Posts WHERE OwnerUserId = @UserId AND PostTypeId = 2) * 100) AS AcceptedPercentage,\n    Count(a.Id) as \"Total Answers\"\nFROM\n    Posts q\n  INNER JOIN\n    Posts a ON q.AcceptedAnswerId = a.Id\nWHERE\n    a.OwnerUserId = @UserId\n  AND\n    a.PostTypeId = 2\n  AND\n  a.score = 0\n  AND\n  a.OwnerUserId <> q.OwnerUserId"
    },
    {
        "QuerySetId": 447278,
        "Title": "My Answers Most Upvoted Without selfie-Answers",
        "Description": null,
        "QueryBody": "DECLARE  @UserId int = ##UserId##\n\nSELECT answers.Id as [Post Link], answers.score as pontuacao, answers.OwnerUSerId as[User Link] FROM posts as answers\nINNER JOIN posts all_posts ON all_posts.AcceptedAnswerId = answers.Id\nWHERE \nanswers.OwnerUserId = @UserId\nAND answers.PostTypeId = 2\nAND answers.ClosedDate IS NULL\nAND answers.DeletionDate IS NULL\nAND answers.OwnerUSerId <> all_posts.OwnerUSerId\nORDER BY pontuacao DESC",
        "CreationDate": "2016-03-09 03:01:56",
        "validated": false,
        "QueryBody_Original": "DECLARE  @UserId int = ##UserId##\n\nSELECT answers.Id as [Post Link], answers.score as pontuacao, answers.OwnerUSerId as[User Link] FROM posts as answers\nINNER JOIN posts all_posts ON all_posts.AcceptedAnswerId = answers.Id\nWHERE \nanswers.OwnerUserId = @UserId\nAND answers.PostTypeId = 2\nAND answers.ClosedDate IS NULL\nAND answers.DeletionDate IS NULL\nAND answers.OwnerUSerId <> all_posts.OwnerUSerId\nORDER BY pontuacao DESC"
    },
    {
        "QuerySetId": 447479,
        "Title": "Questions closed for a custom off-topic reason",
        "Description": null,
        "QueryBody": "SELECT  top ##NumResults:int?50##\n  p.Id,\n  p.Id as [Post Link]\nfrom posthistory ph\ninner join posthistorytypes pht on ph.posthistorytypeid = pht.id\ninner join posts p on ph.PostId = p.Id\n--inner join pendingflags pf on p.Id = pf.PostId\nwhere pht.id = 10 --and pf.CloseAsOffTopicReasonTypeId = 4",
        "CreationDate": "2016-03-09 14:26:27",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 447484,
        "Title": "Questions closed for a custom reason",
        "Description": "See here for close reason types:\r\nhttp:\/\/data.stackexchange.com\/stackoverflow\/query\/36599\/show-all-types\r\n\r\nNote that if a question has been closed and reopened multiple times, all reasons will show up in the results.",
        "QueryBody": "SELECT  top ##NumResults:int?50##\n  p.Id,\n  p.Id as [Post Link]\nfrom PostHistory ph\ninner join PostHistoryTypes pht on ph.PostHistoryTypeId = pht.id\ninner join Posts p on ph.PostId = p.Id\n--inner join PendingFlags pf on p.Id = pf.PostId\nwhere pht.id = 102\n--and pf.CloseAsOffTopicReasonTypeId = ##CustomCloseReason:int?4##",
        "CreationDate": "2017-02-17 00:42:10",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 450741,
        "Title": "Reputation ranges for new users after one week",
        "Description": null,
        "QueryBody": "WITH  collate normalization\n\n\nSELECT TOP ##topn:int?200## Text COLLATE SQL_Latin1_General_CP1_CI_AS,COUNT(*) AS num,MIN(c.Id) AS [Comment Link]\nFROM Comments c INNER JOIN Users u ON c.UserId=u.Id\nWHERE u.Reputation<=##maxrep:int?10## AND\n   NOT (Text COLLATE SQL_Latin1_General_CP1_CI_AS Like ##excludepattern:string?thank%##\n          AND LEN(Text)<=##excludemaxlen:int?30##)\nGROUP BY Text COLLATE SQL_Latin1_General_CP1_CI_AS\nORDER BY COUNT(*) DESC",
        "CreationDate": "2016-03-15 13:57:17",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 450855,
        "Title": "Questions using Stack Snippets without JS \/ CSS \/ HTML tags",
        "Description": null,
        "QueryBody": "SELECT  top ##MaxRows:int?100##  -- avoid timeouts :(\n  Post.Id as [Post Link],\n  Post.OwnerUserId as [User Link],\n  Post.Score,\n  Post.CreationDate,\n  Post.ViewCount,\n  Post.Tags\nfrom Posts as Post\nwhere Post.PostTypeId = 1 -- questions\n  and Post.Score between ##MinScore:int?0## and ##MaxScore:int?99999##\n  and Post.CreationDate between ##MinDate:string?2012-01-01## and ##MaxDate:string?2016-01-01##\n  and Post.Tags not like '%html%'\n  and Post.Tags not like '%css%'\n  and Post.Tags not like '%javascript%'\n  and Post.Tags not like '%js%'\n  and Post.Tags not like '%jquery%'\n  and Post.Tags not like '%ajax%'  \n  and Post.Body like '%<div class=\"snippet\"%'\norder by Post.Score desc",
        "CreationDate": "2016-03-15 17:47:21",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 451048,
        "Title": "Count answers with score \u2264 0 and at least one \u201cthanks\u201d comment by a low-rep user",
        "Description": null,
        "QueryBody": "SELECT  TOP ##topn:int?10## p.Score as [Score],\nCOUNT(*) AS num,  max(c.Id) AS [Comment Link]\nFROM Comments c INNER JOIN Users u ON c.UserId=u.Id\nINNER JOIN Posts p ON c.PostId = p.Id\nWHERE u.Reputation<=##maxrep:int?10## AND\np.PostTypeId = 2 AND\nText COLLATE SQL_Latin1_General_CP1_CI_AS Like '%than[kx]%'\nAND p.Score<=0\nGROUP BY p.Score\nORDER BY [Score] DESC",
        "CreationDate": "2016-03-16 00:47:34",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 451060,
        "Title": "Summary of \u201cthanks for the link\u201d comments",
        "Description": null,
        "QueryBody": "SELECT  TOP ##topn:int?1000## c.Id AS [Comment Link], p.Id as [Post Link],\np.CreationDate as [Post Date], p.ClosedDate\nFROM Comments c INNER JOIN Posts p ON c.PostId=p.Id\nWHERE \np.PostTypeId = 2 AND len(P.Body) <= 400 AND\nText COLLATE SQL_Latin1_General_CP1_CI_AS Like '%than[kx] for the link%'\nORDER BY c.CreationDate DESC",
        "CreationDate": "2016-03-15 22:45:14",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 451262,
        "Title": "Search for copyright notices in posts",
        "Description": null,
        "QueryBody": "SELECT  top ##MaxRows:int?100##  -- avoid timeouts :(\n  Post.Id as [Post Link],\n  Post.OwnerUserId as [User Link],\n  Post.Score,\n  Post.CreationDate,\n  Post.ViewCount\nfrom Posts as Post\nwhere Post.Body like '%\/\/ Copyright%'",
        "CreationDate": "2016-03-16 00:57:47",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 451290,
        "Title": "View to Vote Ratio per User",
        "Description": null,
        "QueryBody": "SELECT  P.Title, P.ViewCount, P.Score, CONCAT(P.ViewCount \/ nullif(P.Score, 0), ':1') AS Ratio\nFROM Posts AS P\nWHERE P.OwnerUserId = ##UserId## AND\n      P.PostTypeId = 1;",
        "CreationDate": "2016-03-16 03:37:25",
        "validated": false,
        "QueryBody_Original": "SELECT  P.Title, P.ViewCount, P.Score, CONCAT(P.ViewCount \/ nullif(P.Score, 0), ':1') AS Ratio\nFROM Posts AS P\nWHERE P.OwnerUserId = ##UserId## AND\n      P.PostTypeId = 1;"
    },
    {
        "QuerySetId": 451425,
        "Title": "Compare monthly usage of tags\u2014with graph",
        "Description": null,
        "QueryBody": "SELECT   \nDATEFROMPARTS(YEAR(p.CreationDate),MONTH(p.CreationDate),1) as [Date], t.TagName,\ncount(*)\nfrom Posts p\njoin PostTags pt on pt.PostId = p.Id\njoin Tags t on t.Id = pt.TagId \nwhere \nDATEFROMPARTS(YEAR(p.CreationDate),MONTH(p.CreationDate),1)<\nDATEFROMPARTS(YEAR(getdate()),MONTH(getdate()),1)\nAND\n(t.TagName = ##Tag1:string?android##\nor t.TagName = ##Tag2:string?python##)\ngroup by t.TagName,\n         DATEFROMPARTS(YEAR(p.CreationDate),MONTH(p.CreationDate),1)\norder by [Date] desc",
        "CreationDate": "2016-03-16 15:35:59",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 451430,
        "Title": "Visualize and compare tags variations usage month by month ",
        "Description": null,
        "QueryBody": "SELECT  \nDATEFROMPARTS(YEAR(p.CreationDate),MONTH(p.CreationDate),1) as [Date], t.TagName,\ncount(*) as Count\nfrom Posts p\njoin PostTags pt on pt.PostId = p.Id\njoin Tags t on t.Id = pt.TagId \nwhere \nDATEFROMPARTS(YEAR(p.CreationDate),MONTH(p.CreationDate),1)<\nDATEFROMPARTS(YEAR(getdate()),MONTH(getdate()),1)\nAND\n(t.TagName like ##Tag1:string?android-%##)\ngroup by t.TagName,\n         DATEFROMPARTS(YEAR(p.CreationDate),MONTH(p.CreationDate),1)\norder by [Date] desc",
        "CreationDate": "2016-03-16 15:48:56",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 451454,
        "Title": "Quantas perguntas de PHP realizei",
        "Description": null,
        "QueryBody": "SELECT  count(Posts.Id) as Total\nfrom Posts\ninner join Users on (Posts.OwnerUserId=Users.Id)\nwhere OwnerUserId= ##UserId## and Tags like '%php%'",
        "CreationDate": "2016-03-16 17:37:00",
        "validated": false,
        "QueryBody_Original": "SELECT  count(Posts.Id) as Total\nfrom Posts\ninner join Users on (Posts.OwnerUserId=Users.Id)\nwhere OwnerUserId= ##UserId## and Tags like '%php%'"
    },
    {
        "QuerySetId": 451661,
        "Title": "How are the top @topn %tag%s from @YYYYMM doing today?",
        "Description": null,
        "QueryBody": "DECLARE  @topN int",
        "CreationDate": "2016-03-17 12:19:09",
        "validated": false,
        "QueryBody_Original": "DECLARE  @topN int"
    },
    {
        "QuerySetId": 452091,
        "Title": "Number of Posts on SO Per Month",
        "Description": null,
        "QueryBody": "DECLARE  @1MonthsAgo datetime = DATEADD(month, -1, GETDATE())\nDECLARE @2MonthsAgo datetime = DATEADD(month, -2, GETDATE())\n\nSELECT COUNT(*)\nFROM Posts\nWHERE ParentId is null and\nPosts.CreationDate > @1MonthsAgo;",
        "CreationDate": "2016-03-18 00:15:11",
        "validated": false,
        "QueryBody_Original": "DECLARE  @1MonthsAgo datetime = DATEADD(month, -1, GETDATE())\nDECLARE @2MonthsAgo datetime = DATEADD(month, -2, GETDATE())\n\nSELECT COUNT(*)\nFROM Posts\nWHERE ParentId is null and\nPosts.CreationDate > @1MonthsAgo;"
    },
    {
        "QuerySetId": 452419,
        "Title": "All my answers with score",
        "Description": null,
        "QueryBody": "DECLARE  @UserId int = ##UserId##\n\nSELECT answers.Id as [Post Link], answers.score as pontuacao, \nanswers.OwnerUSerId as[User Link],\nCONVERT(VARCHAR, answers.CreationDate,103) as CreationDate\nFROM posts as answers\nWHERE \nanswers.OwnerUserId = @UserId\nAND answers.PostTypeId = 2\nAND answers.ClosedDate IS NULL\nAND answers.DeletionDate IS NULL\nAND answers.score = 0\nAND answers.AcceptedAnswerId = @UserId\nORDER BY CreationDate ASC",
        "CreationDate": "2016-10-27 18:05:28",
        "validated": false,
        "QueryBody_Original": "DECLARE  @UserId int = ##UserId##\n\nSELECT answers.Id as [Post Link], answers.score as pontuacao, \nanswers.OwnerUSerId as[User Link],\nCONVERT(VARCHAR, answers.CreationDate,103) as CreationDate\nFROM posts as answers\nWHERE \nanswers.OwnerUserId = @UserId\nAND answers.PostTypeId = 2\nAND answers.ClosedDate IS NULL\nAND answers.DeletionDate IS NULL\nAND answers.score = 0\nAND answers.AcceptedAnswerId = @UserId\nORDER BY CreationDate ASC"
    },
    {
        "QuerySetId": 453142,
        "Title": "Show all comments and post id's for a question",
        "Description": "http:\/\/meta.stackoverflow.com\/questions\/319386\/question-appearing-twice-in-google-search-results\/319389#319389",
        "QueryBody": "SELECT  'Q', id as id \nfrom posts \nwhere id = ##question:int##\nand posttypeid = 1 -- Q\nunion\nSELECT 'A', id as id\nfrom posts \nwhere parentid = ##question:int##\nand posttypeid = 2 -- A\nunion\nSELECT 'CQ', id\nfrom comments\nwhere postid = ##question:int##\nunion\nSELECT 'CA', c.id\nfrom comments c\ninner join posts p on c.postid = p.id\nwhere p.parentid = ##question:int##",
        "CreationDate": "2016-03-20 14:11:23",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 453449,
        "Title": "Questions with \"best approach\" or \"best option\"",
        "Description": null,
        "QueryBody": "SELECT  top ##MaxRows:int?100##\n  Post.Id as [Post Link],\n  Post.OwnerUserId as [User Link],\n  Post.Score,\n  Post.CreationDate,\n  Post.ViewCount\nfrom Posts as Post\nwhere Post.PostTypeId = 1 -- questions\nand Post.ClosedDate is null\nand (Post.Body like '%best approach%' or Post.Body like '%best option%' or Post.Body like '%best strategy%')\n-- order by Post.Score desc",
        "CreationDate": "2016-03-21 02:18:15",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 453841,
        "Title": "interesting unanswered question on mysql",
        "Description": null,
        "QueryBody": "SELECT  * from Users\n-- SELECT * from PostTags\n-- SELECT * from Tags where TagName = 'mysql'\n\nSELECT Posts.Id  as [Post Link], \nPosts.CreationDate, Posts.Score, Posts.ViewCount \nfrom Posts \ninner join PostTags \n           on PostTags.PostId = Posts.id \n           and PostTags.TagId in (\n             SELECT Tags.Id from Tags where TagName ='mysql'\n           )\ninner join Users \n           on Posts.OwnerUserId = Users.Id \n           and Users.Reputation > 50\nwhere 1=1 \n-- and OwnerUserId =  68931 -- ##UserId##\nand Posts.CreationDate >= '2016-01-01'\nand Posts.PostTypeId = 1 -- question\nand Posts.Score >= 0\nand Posts.ViewCount >= 50\nand Posts.AcceptedAnswerId is null\norder by Posts.CreationDate desc",
        "CreationDate": "2016-03-22 12:11:43",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 454081,
        "Title": "Order questions by links for selected user",
        "Description": null,
        "QueryBody": "DECLARE  @user_id int = ##UserId##\n\nselect\n  pl.RelatedPostId as [Post Link],\n  count(pl.RelatedPostId) as [Number of Links],\n  p.Title, p.Score, p.ViewCount, p.AnswerCount\nfrom PostLinks pl\njoin Posts p on p.Id = pl.PostId and p.OwnerUserId = @user_id\ngroup by pl.RelatedPostId, p.ViewCount, p.Score, p.AnswerCount, p.Title\norder by [Number of Links] desc",
        "CreationDate": "2016-03-23 20:24:02",
        "validated": false,
        "QueryBody_Original": "DECLARE  @user_id int = ##UserId##\n\nselect\n  pl.RelatedPostId as [Post Link],\n  count(pl.RelatedPostId) as [Number of Links],\n  p.Title, p.Score, p.ViewCount, p.AnswerCount\nfrom PostLinks pl\njoin Posts p on p.Id = pl.PostId and p.OwnerUserId = @user_id\ngroup by pl.RelatedPostId, p.ViewCount, p.Score, p.AnswerCount, p.Title\norder by [Number of Links] desc"
    },
    {
        "QuerySetId": 455710,
        "Title": "Who are the top users on a tag?",
        "Description": "Who are the top users on a tag?",
        "QueryBody": "DECLARE  @TagName varchar(40) = ##TagName:string##\n\nSELECT TOP 20 \nrank() over (order by count(*) desc) ranking,\n    TagName,\n    Users.Id [User Link],\n    DisplayName,\n    Score,\n    COUNT(*) AS UpVotes \nFROM Tags\n    INNER JOIN PostTags ON PostTags.TagId = Tags.id\n    INNER JOIN Posts ON Posts.ParentId = PostTags.PostId\n    INNER JOIN Votes ON Votes.PostId = Posts.Id and VoteTypeId = 2\n    INNER JOIN Users ON Posts.OwnerUserId = Users.Id\nWHERE \n    Tags.TagName = @TagName\nGROUP BY TagName, Users.Id,DisplayName,Score \nORDER BY UpVotes DESC",
        "CreationDate": "2018-09-16 17:22:12",
        "validated": false,
        "QueryBody_Original": "DECLARE  @TagName varchar(40) = ##TagName:string##\n\nSELECT TOP 20 \nrank() over (order by count(*) desc) ranking,\n    TagName,\n    Users.Id [User Link],\n    DisplayName,\n    Score,\n    COUNT(*) AS UpVotes \nFROM Tags\n    INNER JOIN PostTags ON PostTags.TagId = Tags.id\n    INNER JOIN Posts ON Posts.ParentId = PostTags.PostId\n    INNER JOIN Votes ON Votes.PostId = Posts.Id and VoteTypeId = 2\n    INNER JOIN Users ON Posts.OwnerUserId = Users.Id\nWHERE \n    Tags.TagName = @TagName\nGROUP BY TagName, Users.Id,DisplayName,Score \nORDER BY UpVotes DESC"
    },
    {
        "QuerySetId": 455723,
        "Title": "Active users with rep > 3k",
        "Description": null,
        "QueryBody": "SELECT  count(*)\nfrom Users\nwhere Users.Reputation > ##MinimalRepuation:int?3000##\n\nSELECT count(*)\nfrom Users\nwhere Users.Reputation > ##MinimalRepuation:int?3000##\nand DATEDIFF(DD, Users.LastAccessDate, CURRENT_TIMESTAMP) < ##LastSeenInDays:int?30##",
        "CreationDate": "2016-03-23 16:39:50",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 455751,
        "Title": "Low rep users active for > 5 years",
        "Description": null,
        "QueryBody": "DECLARE  @reputation INT\n\nSELECT * FROM Users\nWHERE CreationDate < DateAdd(yy, -5, GetDate())\nAND Reputation < @reputation",
        "CreationDate": "2016-03-23 18:00:00",
        "validated": false,
        "QueryBody_Original": "DECLARE  @reputation INT\n\nSELECT * FROM Users\nWHERE CreationDate < DateAdd(yy, -5, GetDate())\nAND Reputation < @reputation"
    },
    {
        "QuerySetId": 458040,
        "Title": "\"Bad\" questions from new users in 2013-2014",
        "Description": null,
        "QueryBody": "DECLARE  @epoch datetime = 'March 1, 2014'\n\n\nselect dateadd(month, datediff(month, @epoch, u.CreationDate), @epoch) Month,\n       iif (q.DeletionDate is null\n            and q.ClosedDate is null, 'good', 'bad') quality,\n       count(*) questions\nfrom Users u \n     join Posts q on OwnerUserId = u.Id \n                     and datediff(month, @epoch, q.CreationDate)\n                         < datediff(month, @epoch, u.CreationDate) + 2\n                     and PostTypeId = 1\nwhere u.CreationDate between 'January 1, 2013' and 'January 1, 2015'\ngroup by datediff(month, @epoch, u.CreationDate),\n         iif (q.DeletionDate is null\n            and q.ClosedDate is null, 'good', 'bad')\norder by Month, quality desc;",
        "CreationDate": "2016-03-24 22:37:19",
        "validated": false,
        "QueryBody_Original": "DECLARE  @epoch datetime = 'March 1, 2014'\n\n\nselect dateadd(month, datediff(month, @epoch, u.CreationDate), @epoch) Month,\n       iif (q.DeletionDate is null\n            and q.ClosedDate is null, 'good', 'bad') quality,\n       count(*) questions\nfrom Users u \n     join Posts q on OwnerUserId = u.Id \n                     and datediff(month, @epoch, q.CreationDate)\n                         < datediff(month, @epoch, u.CreationDate) + 2\n                     and PostTypeId = 1\nwhere u.CreationDate between 'January 1, 2013' and 'January 1, 2015'\ngroup by datediff(month, @epoch, u.CreationDate),\n         iif (q.DeletionDate is null\n            and q.ClosedDate is null, 'good', 'bad')\norder by Month, quality desc;"
    },
    {
        "QuerySetId": 458049,
        "Title": "Positive vs. negatively scored questions by month",
        "Description": null,
        "QueryBody": "DECLARE  @epoch datetime = 'March 1, 2014'\n\nselect dateadd(month, datediff(month, @epoch, q.CreationDate), @epoch) Month,\n       case\n         when Score > 0 and PostTypeId = 1 then 'welcome questions'\n         when Score <= 0 and PostTypeId = 1 then 'unwelcome questions'\n         else 'answers'\n       end type,\n       --PostTypeId,\n       count(*) N\nfrom Posts q \nwhere PostTypeId in (1, 2)\ngroup by datediff(month, @epoch, q.CreationDate),\n         case\n         when Score > 0 and PostTypeId = 1 then 'welcome questions'\n         when Score <= 0 and PostTypeId = 1 then 'unwelcome questions'\n         else 'answers'\n       end ,\n       PostTypeId\norder by Month, type desc;",
        "CreationDate": "2016-04-01 08:24:16",
        "validated": false,
        "QueryBody_Original": "DECLARE  @epoch datetime = 'March 1, 2014'\n\nselect dateadd(month, datediff(month, @epoch, q.CreationDate), @epoch) Month,\n       case\n         when Score > 0 and PostTypeId = 1 then 'welcome questions'\n         when Score <= 0 and PostTypeId = 1 then 'unwelcome questions'\n         else 'answers'\n       end type,\n       --PostTypeId,\n       count(*) N\nfrom Posts q \nwhere PostTypeId in (1, 2)\ngroup by datediff(month, @epoch, q.CreationDate),\n         case\n         when Score > 0 and PostTypeId = 1 then 'welcome questions'\n         when Score <= 0 and PostTypeId = 1 then 'unwelcome questions'\n         else 'answers'\n       end ,\n       PostTypeId\norder by Month, type desc;"
    },
    {
        "QuerySetId": 458382,
        "Title": " Find posts to edit for Excavator and Archaeologist badges",
        "Description": null,
        "QueryBody": "SELECT  TOP 1000\n    p.Id as [Post Link],\n    p2.Tags,  -- get Tags from parent question    \n    p.Score,\n    p.LastActivityDate\nFROM Posts p\n  INNER JOIN Posts p2 ON p2.Id  = p.ParentId -- join with questions (p2)  \nWHERE p.PostTypeId=2 -- Answers\nAND p.CreationDate > '2013-01-01'\nAND p.LastActivityDate < DATEADD(mm, -6, GETDATE())\nAND p.Score >= 0\nAND p.ClosedDate is null\nAND p.LastEditDate is null\nORDER BY p.LastActivityDate",
        "CreationDate": "2016-03-28 04:20:09",
        "validated": false,
        "QueryBody_Original": "SELECT  TOP 1000\n    p.Id as [Post Link],\n    p2.Tags,  -- get Tags from parent question    \n    p.Score,\n    p.LastActivityDate\nFROM Posts p\n  INNER JOIN Posts p2 ON p2.Id  = p.ParentId -- join with questions (p2)  \nWHERE p.PostTypeId=2 -- Answers\nAND p.CreationDate > '2013-01-01'\nAND p.LastActivityDate < DATEADD(mm, -6, GETDATE())\nAND p.Score >= 0\nAND p.ClosedDate is null\nAND p.LastEditDate is null\nORDER BY p.LastActivityDate"
    },
    {
        "QuerySetId": 460230,
        "Title": "How many upvotes & downvotes do I have for each tag?",
        "Description": null,
        "QueryBody": "DECLARE  @UserId int = ##UserId##\n\nSELECT --TOP 20 \n    TagName,\n    SUM(Case when Votes.VoteTypeId = 2 then 1 else 0 end) AS UpVotes,\n    SUM(Case when Votes.VoteTypeId = 3 then 1 else 0 end) AS DownVotes \nFROM Tags\n    INNER JOIN PostTags ON PostTags.TagId = Tags.id\n    INNER JOIN Posts ON Posts.ParentId = PostTags.PostId\n    INNER JOIN Votes ON Votes.PostId = Posts.Id and\n    (VoteTypeId = 2 or VoteTypeId = 3)\nWHERE \n    Posts.OwnerUserId = @UserId\nGROUP BY TagName \nORDER BY UpVotes DESC, Downvotes DESC",
        "CreationDate": "2016-03-27 20:34:58",
        "validated": false,
        "QueryBody_Original": "DECLARE  @UserId int = ##UserId##\n\nSELECT --TOP 20 \n    TagName,\n    SUM(Case when Votes.VoteTypeId = 2 then 1 else 0 end) AS UpVotes,\n    SUM(Case when Votes.VoteTypeId = 3 then 1 else 0 end) AS DownVotes \nFROM Tags\n    INNER JOIN PostTags ON PostTags.TagId = Tags.id\n    INNER JOIN Posts ON Posts.ParentId = PostTags.PostId\n    INNER JOIN Votes ON Votes.PostId = Posts.Id and\n    (VoteTypeId = 2 or VoteTypeId = 3)\nWHERE \n    Posts.OwnerUserId = @UserId\nGROUP BY TagName \nORDER BY UpVotes DESC, Downvotes DESC"
    },
    {
        "QuerySetId": 460479,
        "Title": "List Posts that were of type question but are not any longer",
        "Description": "This was to find out if a post that was a question can have a different postype today\r\nSince the result were 0 records i assume that this is not the case - meaning a question always stats a question.",
        "QueryBody": "SELECT  pt.* from PostTypes pt\n\nSELECT ph.PostId, pt.Name from PostHistory ph\n   INNER JOIN Posts p ON ph.PostId = p.Id\n   INNER JOIN PostTypes pt ON ph.PostHistoryTypeId = pt.Id\n   WHERE p.CreationDate > '2016-01-01'\n   AND ph.PostHistoryTypeId = 1 -- Questions\n   AND p.PostTypeId !=1 -- no Questions",
        "CreationDate": "2016-03-28 05:48:26",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 460658,
        "Title": "answers including old MATLAB docs links",
        "Description": "Find answers containing old links to MATLAB docs, which are likely broken.\r\nSee: http:\/\/undocumentedmatlab.com\/blog\/changes-in-the-online-doc-urls",
        "QueryBody": "DECLARE  @UserId int = ##UserId##\n\nSELECT TOP 100\n  p.Id,\n  p.Id as [Post Link],\n  pt.Name as [Type],\n  p.Score,\n  p.CreationDate,\n  p.Tags\nFROM\n  Posts p INNER JOIN PostTypes pt ON pt.Id = p.PostTypeId\nWHERE\n  p.Body LIKE '%helpdesk%' AND\n  p.OwnerUserId = @UserId AND\n  p.postTypeId = 2\nORDER BY p.CreationDate DESC",
        "CreationDate": "2016-03-28 15:28:13",
        "validated": false,
        "QueryBody_Original": "DECLARE  @UserId int = ##UserId##\n\nSELECT TOP 100\n  p.Id,\n  p.Id as [Post Link],\n  pt.Name as [Type],\n  p.Score,\n  p.CreationDate,\n  p.Tags\nFROM\n  Posts p INNER JOIN PostTypes pt ON pt.Id = p.PostTypeId\nWHERE\n  p.Body LIKE '%helpdesk%' AND\n  p.OwnerUserId = @UserId AND\n  p.postTypeId = 2\nORDER BY p.CreationDate DESC"
    },
    {
        "QuerySetId": 461253,
        "Title": "Single-use tags with no wiki",
        "Description": "Candidates for being deleted by the cleanup script, unless a wiki excerpt is written.",
        "QueryBody": "WITH  a zero excerpt length (need to fix these anyway)\n-- synonym targets\n\nSELECT t.TagName,\n       ExcerptPostId AS [Post Link],\n       pe.CreationDate\nFROM   Tags t\n       LEFT JOIN Posts pe ON pe.Id = t.ExcerptPostId\n       LEFT JOIN Posts pw ON pw.Id = t.WikiPostId\n       LEFT JOIN TagSynonyms ts ON ts.SourceTagName = t.TagName\nWHERE  Count = 1\n       AND (WikiPostId IS NULL OR (LEN(pe.Body) < 1 AND LEN(pw.Body) < 1))\n       AND ts.SourceTagName is null -- exclude tags that are synonyms\nORDER BY t.TagName",
        "CreationDate": "2016-03-29 08:39:49",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 461367,
        "Title": "Get comments for specific tag",
        "Description": null,
        "QueryBody": "SELECT \n  *\nFROM Comments c\nJOIN Posts p\nON p.Id = c.PostId\nWHERE c.UserId = ##UserId##\nAND p.Tags LIKE 'python%'",
        "CreationDate": "2016-03-29 14:38:24",
        "validated": false,
        "QueryBody_Original": "SELECT \n  *\nFROM Comments c\nJOIN Posts p\nON p.Id = c.PostId\nWHERE c.UserId = ##UserId##\nAND p.Tags LIKE 'python%'"
    },
    {
        "QuerySetId": 461458,
        "Title": "Find Questions from a given UserId that has an answer from the same UserId",
        "Description": null,
        "QueryBody": "DECLARE  @UserId int = '##UserId?123##';\n\nSelect p.Id, p2.Id, p2.ParentId, p.Id AS [Post Link], p.Score, p.ViewCount, p.CreationDate from Posts p\n INNER JOIN Posts p2 ON p2.ParentId = p.Id  \nWHERE p.OwnerUserId = @UserId and p2.OwnerUserId = @UserId",
        "CreationDate": "2016-03-29 16:22:20",
        "validated": false,
        "QueryBody_Original": "DECLARE  @UserId int = '##UserId?123##';\n\nSelect p.Id, p2.Id, p2.ParentId, p.Id AS [Post Link], p.Score, p.ViewCount, p.CreationDate from Posts p\n INNER JOIN Posts p2 ON p2.ParentId = p.Id  \nWHERE p.OwnerUserId = @UserId and p2.OwnerUserId = @UserId"
    },
    {
        "QuerySetId": 461871,
        "Title": "Questions with a single-use tag that has no tag wiki",
        "Description": "These single-use tags are candidates for being deleted by the cleanup script, unless a wiki excerpt is written. Some of these questions might become untagged if the single-use tag deletion script is turned back on.",
        "QueryBody": "WITH  a zero excerpt length (need to fix these anyway)\n-- synonym targets\n\nSELECT TagName, PostId as [Post Link], p.Tags, p.CreationDate\nFROM Tags t\n     LEFT JOIN Posts pe ON pe.Id = t.ExcerptPostId\n     LEFT JOIN Posts pw ON pw.Id = t.WikiPostId\n--     LEFT JOIN TagSynonyms ts ON ts.SourceTagName = t.TagName\n     LEFT JOIN PostTags pt ON TagId = t.Id\n     LEFT JOIN Posts p ON p.Id = PostId\nWHERE Count = 1\n      AND (WikiPostId IS NULL OR (LEN(pe.Body) < 1 AND LEN(pw.Body) < 1))\n--      AND ts.SourceTagName is null -- exclude tags that are synonyms\nORDER BY t.TagName",
        "CreationDate": "2016-04-04 05:33:42",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 463097,
        "Title": "Recent questions containing a given string",
        "Description": null,
        "QueryBody": "SELECT  TOP 2000 \nId as [Post Link],\nAnswerCount,\nAcceptedAnswerId \nFROM Posts\nWHERE \nYEAR(CreationDate)  >= ##FromYear:int?2016##\nAND\nBody COLLATE SQL_Latin1_General_CP1_CI_AS LIKE '%'+##SearchString:string##+'%'\nAND PostTypeId = 1\nORDER BY CreationDate DESC",
        "CreationDate": "2016-03-31 14:15:35",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 463367,
        "Title": "Lubos Motl vs. Ron Maimon     ",
        "Description": "What questions does Lubos Motl have a higher\/lower score on than Ron Maimon?\r\n        ",
        "QueryBody": "DECLARE  @UserId int = 4864;\n\nwith fights as (\n  select RonAnswer.ParentId as Question,\n   RonAnswer.Score as RonScore,\n   lubosmAnswer.Score as LubosmScore\n  from Posts as RonAnswer\n  inner join Posts as lubosmAnswer\n   on lubosmAnswer.OwnerUserId = 1236 and RonAnswer.ParentId = lubosmAnswer.ParentId\n  where RonAnswer.ownerUserId = @UserId and RonAnswer.postTypeId = 2\n)\n\nselect\n  case\n   when RonScore > LubosmScore then 'Ron wins'    \n   when RonScore < LubosmScore then 'Lubos wins'\n   else 'Tie'\n  end as 'Winner',\n  Question as [Post Link],\n  RonScore as 'My score',\n  LubosmScore as \"Lubos'm score\"\nfrom fights;",
        "CreationDate": "2020-10-03 11:10:58",
        "validated": false,
        "QueryBody_Original": "DECLARE  @UserId int = 4864;\n\nwith fights as (\n  select RonAnswer.ParentId as Question,\n   RonAnswer.Score as RonScore,\n   lubosmAnswer.Score as LubosmScore\n  from Posts as RonAnswer\n  inner join Posts as lubosmAnswer\n   on lubosmAnswer.OwnerUserId = 1236 and RonAnswer.ParentId = lubosmAnswer.ParentId\n  where RonAnswer.ownerUserId = @UserId and RonAnswer.postTypeId = 2\n)\n\nselect\n  case\n   when RonScore > LubosmScore then 'Ron wins'    \n   when RonScore < LubosmScore then 'Lubos wins'\n   else 'Tie'\n  end as 'Winner',\n  Question as [Post Link],\n  RonScore as 'My score',\n  LubosmScore as \"Lubos'm score\"\nfrom fights;"
    },
    {
        "QuerySetId": 463486,
        "Title": "Answers per Fiscal Quarter by DisplayName",
        "Description": null,
        "QueryBody": "DECLARE  @user varchar(50);\nSELECT @user = 'Shaun Luttin';\n\nDECLARE @startDate DATETIME;\nSELECT @startDate = '11\/01\/2015';\n\nDECLARE @endDate DATETIME;\nSELECT @endDate = '10\/31\/2016';\n\nSELECT\n  pt.Name,\n  Posts = COUNT(*),\n  Views = SUM(COALESCE(p.ViewCount, parent.ViewCount)),\n  Start = DATENAME(m, @startDate),\n  Finish = DATENAME(m, @endDate)\nFROM Posts p\nLEFT JOIN Posts parent ON p.ParentId = parent.Id\nJOIN Users u ON p.OwnerUserId = u.Id\nJOIN PostTypes pt ON p.PostTypeId = pt.Id\nWHERE u.DisplayName = @user\nAND p.CreationDate BETWEEN @startDate AND @endDate\nGROUP BY ROLLUP(pt.Name)",
        "CreationDate": "2016-10-09 01:39:46",
        "validated": false,
        "QueryBody_Original": "DECLARE  @user varchar(50);\nSELECT @user = 'Shaun Luttin';\n\nDECLARE @startDate DATETIME;\nSELECT @startDate = '11\/01\/2015';\n\nDECLARE @endDate DATETIME;\nSELECT @endDate = '10\/31\/2016';\n\nSELECT\n  pt.Name,\n  Posts = COUNT(*),\n  Views = SUM(COALESCE(p.ViewCount, parent.ViewCount)),\n  Start = DATENAME(m, @startDate),\n  Finish = DATENAME(m, @endDate)\nFROM Posts p\nLEFT JOIN Posts parent ON p.ParentId = parent.Id\nJOIN Users u ON p.OwnerUserId = u.Id\nJOIN PostTypes pt ON p.PostTypeId = pt.Id\nWHERE u.DisplayName = @user\nAND p.CreationDate BETWEEN @startDate AND @endDate\nGROUP BY ROLLUP(pt.Name)"
    },
    {
        "QuerySetId": 464264,
        "Title": "Find information about elasticsearch questions",
        "Description": null,
        "QueryBody": "DECLARE  @SearchTagId int = ##TagId##\n\nSELECT\n    p.Id,\n    p.CreationDate,\n    p.Score,\n    p.ViewCount,\n    p.title,\n    p.AnswerCount,\n    p.CommentCount,\n    p.FavoriteCount,\n    p.AcceptedAnswerId,\n    u.DisplayName AS CreatorName,\n    e.DisplayName AS EditorName\nFROM Posts AS p\n    INNER JOIN PostTags AS pt ON pt.PostId = p.Id\n    INNER JOIN Users AS u ON p.OwnerUserId = u.Id\n    LEFT JOIN Users AS e ON p.LastEditorUserId = e.Id\nWHERE\n    pt.TagId = @SearchTagId",
        "CreationDate": "2016-04-02 15:20:49",
        "validated": false,
        "QueryBody_Original": "DECLARE  @SearchTagId int = ##TagId##\n\nSELECT\n    p.Id,\n    p.CreationDate,\n    p.Score,\n    p.ViewCount,\n    p.title,\n    p.AnswerCount,\n    p.CommentCount,\n    p.FavoriteCount,\n    p.AcceptedAnswerId,\n    u.DisplayName AS CreatorName,\n    e.DisplayName AS EditorName\nFROM Posts AS p\n    INNER JOIN PostTags AS pt ON pt.PostId = p.Id\n    INNER JOIN Users AS u ON p.OwnerUserId = u.Id\n    LEFT JOIN Users AS e ON p.LastEditorUserId = e.Id\nWHERE\n    pt.TagId = @SearchTagId"
    },
    {
        "QuerySetId": 467625,
        "Title": "All SQL Server Tags by Popularity et al.",
        "Description": null,
        "QueryBody": "DECLARE  @total float\n\n-- SELECT @total = Sum(Cast(ViewCount as bigint)) FROM Posts WHERE PostTypeId = 1\n\nSELECT\n    Tags.TagName\n    ,COUNT(Posts.Id) as QuestionCount\n    ,Sum(Cast(Posts.ViewCount as bigint)) AS Views\n    --,str(100 * Sum(Cast(Posts.ViewCount as bigint)) \/ @total,6,2) AS percentOfSite\n    ,Sum(Cast(Posts.ViewCount as bigint)) \/ Count(*) AS AvgViews\n  FROM Posts \n  JOIN PostTags ON Posts.Id = PostTags.PostId\n  JOIN Tags ON PostTags.TagId = Tags.Id\n  WHERE \n  -- Posts.CreationDate >= '2016-02-01'\n  --  AND Posts.CreationDate < '2016-03-01'\n    Tags.TagName like '%sql%server%'\n--  GROUP BY dateadd(wk, datediff(wk, 0, Posts.CreationDate), 0)\n-- WHERE Posts.PostTypeId = 1 All post types\n GROUP BY Tags.Tagname\n ORDER BY Views DESC",
        "CreationDate": "2016-04-07 13:26:46",
        "validated": false,
        "QueryBody_Original": "DECLARE  @total float\n\n-- SELECT @total = Sum(Cast(ViewCount as bigint)) FROM Posts WHERE PostTypeId = 1\n\nSELECT\n    Tags.TagName\n    ,COUNT(Posts.Id) as QuestionCount\n    ,Sum(Cast(Posts.ViewCount as bigint)) AS Views\n    --,str(100 * Sum(Cast(Posts.ViewCount as bigint)) \/ @total,6,2) AS percentOfSite\n    ,Sum(Cast(Posts.ViewCount as bigint)) \/ Count(*) AS AvgViews\n  FROM Posts \n  JOIN PostTags ON Posts.Id = PostTags.PostId\n  JOIN Tags ON PostTags.TagId = Tags.Id\n  WHERE \n  -- Posts.CreationDate >= '2016-02-01'\n  --  AND Posts.CreationDate < '2016-03-01'\n    Tags.TagName like '%sql%server%'\n--  GROUP BY dateadd(wk, datediff(wk, 0, Posts.CreationDate), 0)\n-- WHERE Posts.PostTypeId = 1 All post types\n GROUP BY Tags.Tagname\n ORDER BY Views DESC"
    },
    {
        "QuerySetId": 467638,
        "Title": "top 150 questions for specific tag and body content selection order by viewcount\/monthssincecreated",
        "Description": null,
        "QueryBody": "SELECT  TOP 150 Id AS [Post Link],Title,Body,CreationDate,Tags,ViewCount,Score,FavoriteCount\nFROM Posts \nWHERE PostTypeId = 1\nAND Tags LIKE '%<' + ##tagname:string## + '>%' \nAND (Title LIKE '%' + ##topic:string## + '%' OR Tags LIKE '%<' + ##topic:string## + '>%' OR Body LIKE '%<' + ##topic:string## + '>%') \nAND CreationDate >= ##sinceYear:string##\nORDER BY ViewCount\/CASE WHEN DATEDIFF(Month,getdate(),CreationDate) != 0 THEN DATEDIFF(Month,getdate(),CreationDate) ELSE 1 END ASC",
        "CreationDate": "2018-10-30 14:25:35",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 468012,
        "Title": "Find posts by post type",
        "Description": "Mainly useful for browsing weird post types. If you want to look at orphaned tag wiki edits, visit http:\/\/data.stackexchange.com\/scifi\/query\/468010\/orphaned-tag-wikis",
        "QueryBody": "SELECT \n  'site:\/\/posts\/' + cast(p.Id AS VarChar(10)) + '\/revisions|' + cast(p.Id AS VarChar(10)) AS [Link],\n  PostTypes.Name,\n  p.Body,\n  p.CreationDate,\n  p.LastEditDate,\n  (CASE WHEN p.LastEditorUserId IS NOT NULL THEN\n     'site:\/\/users\/' + CAST(p.LastEditorUserId AS nvarchar) + '|' ELSE '' END) +\n     COALESCE(p.LastEditorDisplayName, Users.DisplayName) AS [User Link]\nFROM Posts p\nLEFT JOIN PostTypes on p.PostTypeId = PostTypes.Id\nLEFT JOIN Users on p.LastEditorUserId = Users.Id\nWHERE p.PostTypeId in (##PostTypes?7, 8##)\n    and (##UserId:int?0## = 0 or p.OwnerUserId = ##UserId##)\nORDER BY p.PostTypeId,\n         CreationDate desc\n\nSELECT getdate() as [Time of query]",
        "CreationDate": "2016-06-05 07:44:41",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 470667,
        "Title": "Trending Google Cloud Platform Tags",
        "Description": "This query is somewhat generic so that I can see trending for multiple tags.  In this example I'm comparing different JavaScript Frameworks\/Libraries, but these Tag names can be easily changed to any tag names you want.\r\n\r\nFor a visual comparison, in the result click \"Graph\" tab.  Very cool feature.\r\n\r\nText Output\r\nRoundToMonth,TagName,TagCount\r\n\"2014-03-01 00:00:00\",\"angularjs\",\"3871\"\r\n\"2014-03-01 00:00:00\",\"backbone.js\",\"550\"\r\n\"2014-03-01 00:00:00\",\"ember.js\",\"554\"\r\n\"2014-03-01 00:00:00\",\"knockout.js\",\"407\"\r\n\"2014-02-01 00:00:00\",\"angularjs\",\"3320\"\r\n\"2014-02-01 00:00:00\",\"backbone.js\",\"552\"\r\n\"2014-02-01 00:00:00\",\"ember.js\",\"507\"\r\n\"2014-02-01 00:00:00\",\"knockout.js\",\"447\"\r\n\"2014-01-01 00:00:00\",\"angularjs\",\"3087\"\r\n\"2014-01-01 00:00:00\",\"backbone.js\",\"525\"\r\n\"2014-01-01 00:00:00\",\"ember.js\",\"447\"\r\n",
        "QueryBody": "DECLARE  @StartDate DATETIME = '2011-1-1'\n        ,@EndDate DATETIME = '2016-3-31'\n\n--\nSELECT RoundToMonth, TagName, TagCount\nFROM \n(\n  SELECT  \n    DATEADD(Month, DATEDIFF(MONTH, 0, CreationDate), 0) RoundToMonth\n    , COUNT(PostTags.TagID) TagCount\n    , TagID\n  FROM PostTags\n  LEFT JOIN Posts ON\n    PostTags.PostId = Posts.Id\n  WHERE \n    PostTags.TagID IN (SELECT Id FROM #MyTags)\n    AND CreationDate > @StartDate\n    AND CreationDate < @EndDate\n  GROUP BY\n    DATEADD(Month, DATEDIFF(MONTH, 0, CreationDate), 0)\n    , PostTags.TagID\n)TagCountPerMonth\nLEFT JOIN Tags ON\n  TagCountPerMonth.TagId = Tags.Id\nORDER BY RoundToMonth DESC, TagName ASC",
        "CreationDate": "2016-04-13 01:47:59",
        "validated": false,
        "QueryBody_Original": "DECLARE  @StartDate DATETIME = '2011-1-1'\n        ,@EndDate DATETIME = '2016-3-31'\n\n--\nSELECT RoundToMonth, TagName, TagCount\nFROM \n(\n  SELECT  \n    DATEADD(Month, DATEDIFF(MONTH, 0, CreationDate), 0) RoundToMonth\n    , COUNT(PostTags.TagID) TagCount\n    , TagID\n  FROM PostTags\n  LEFT JOIN Posts ON\n    PostTags.PostId = Posts.Id\n  WHERE \n    PostTags.TagID IN (SELECT Id FROM #MyTags)\n    AND CreationDate > @StartDate\n    AND CreationDate < @EndDate\n  GROUP BY\n    DATEADD(Month, DATEDIFF(MONTH, 0, CreationDate), 0)\n    , PostTags.TagID\n)TagCountPerMonth\nLEFT JOIN Tags ON\n  TagCountPerMonth.TagId = Tags.Id\nORDER BY RoundToMonth DESC, TagName ASC"
    },
    {
        "QuerySetId": 471269,
        "Title": "Generic post content LIKE search",
        "Description": "Do a generic T-SQL LIKE query on post HTML content and format the results nicely.\r\n\r\nWildcards that work include % for any string, _ for any character, [ABCDE] or [A-E] for a letter from A to E, and [^ABCDE] or [^A-E] for any character *except* A to E. To match a literal \"%\", \"_\", \"[\" or \"]\", insert a backslash (\"\\\") before it. Remember to wrap the search pattern in % signs if you don't want to anchor it to the beginning and\/or end of the post, and remember that the content being searched is parsed HTML, *not* Markdown.\r\n\r\nThis query will probably time out on SO unless you narrow down the date range! Try e.g. limiting the search to posts made within one or two years. On smaller sites, you can leave in the default values.",
        "QueryBody": "WITH  Matched as (\n  select * from Posts\n  where Body like '%' + ##PostHTML:string## + '%'\n)\nselect top ##MaxResults:int?100##\n  Post.Id as [Post Link],\n  PostTypes.Name as [Type],\n  case\n    when Author.Id is null then Post.OwnerDisplayName\n    else 'site:\/\/users\/' + cast(Author.Id as varchar) + '|' + Author.DisplayName\n  end as [Author],\n  Post.Score,\n  Post.CreationDate,\n  coalesce(Post.ViewCount, Parent.ViewCount) as [Views],\n  coalesce(Post.Tags, Parent.Tags) as [Tags]\nfrom Matched as Post\n  join PostTypes on Post.PostTypeId = PostTypes.Id\n  left join Posts as Parent on Post.ParentId = Parent.Id\n  left join Users as Author on Post.OwnerUserId = Author.Id\nwhere Post.CreationDate between ##StartDate:string?2000-01-01## and ##EndDate:string?2100-12-31## + ' 23:59:59'",
        "CreationDate": "2016-04-14 15:00:47",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 471796,
        "Title": "JanitorTags: posts that contain two specified tags",
        "Description": "2 user-inputtable tags, with defaults;\r\npost must have a score > 1;\r\npost must not be closed\r\n",
        "QueryBody": "SELECT  Id as [Post Link],Score,ViewCount,CreationDate,LastEditDate,LastActivityDate,AnswerCount,FavoriteCount \n-- SELECT Id as [Post Link],*\nfrom Posts p \nwhere p.Id in (\n  SELECT pt1.PostId from PostTags pt1\n  join PostTags pt2 on\n  pt2.PostId = pt1.PostId\n  where pt1.TagId = (SELECT Id from Tags where TagName = ##Tag1:string?centos##)\n    and pt2.TagId = (SELECT Id from Tags where TagName = ##Tag2:string?rhel##)\n  )\n  and p.Score > 1\n  and p.ClosedDate IS NULL\n  order by CreationDate DESC",
        "CreationDate": "2016-06-19 03:46:34",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 471798,
        "Title": "Number of answers with score higher or equal to given value",
        "Description": null,
        "QueryBody": "SELECT  COUNT(*) as [Number of Answers]\nFROM  Posts P\nWhere (\n  P.PostTypeId = 2 AND\n  P.Score >= ##Score##\n  )",
        "CreationDate": "2016-04-14 23:16:59",
        "validated": false,
        "QueryBody_Original": "SELECT  COUNT(*) as [Number of Answers]\nFROM  Posts P\nWhere (\n  P.PostTypeId = 2 AND\n  P.Score >= ##Score##\n  )"
    },
    {
        "QuerySetId": 471982,
        "Title": "Find questions migrated from a particular site",
        "Description": "Only selects questions that have never been closed.",
        "QueryBody": "SELECT \nPostId as [Post Link], Score, AnswerCount,\n     CASE WHEN AcceptedAnswerId is not null THEN N'\u2714' ELSE '' END as HasAccepted\nFrom PostHistory\nleft join Posts on PostHistory.PostId = Posts.Id\nWhere Posts.PostTypeId = 1\n      and Posts.ClosedDate is null\n      and PostHistoryTypeId = 36\n      and Comment like 'from %' + ##site:string## + '%'\nOrder by Score desc, AnswerCount desc, Posts.Title, Posts.Id",
        "CreationDate": "2016-04-15 11:22:50",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 472220,
        "Title": "All posts from separate SE sites",
        "Description": null,
        "QueryBody": "DECLARE  @UserId int = ##UserId##\n\nSELECT Posts.Body\nFROM Posts\nWHERE Posts.OwnerUserId = @UserId",
        "CreationDate": "2016-04-15 21:30:20",
        "validated": false,
        "QueryBody_Original": "DECLARE  @UserId int = ##UserId##\n\nSELECT Posts.Body\nFROM Posts\nWHERE Posts.OwnerUserId = @UserId"
    },
    {
        "QuerySetId": 472269,
        "Title": "Number of Google Maps API questions on Stack Overflow",
        "Description": null,
        "QueryBody": "SELECT  count(id), convert(varchar(8), CreationDate, 126)\n    from Posts\n   where PostTypeId = 1\n     and Tags like '%google%maps%'\ngroup by convert(varchar(8), CreationDate, 126)\norder by convert(varchar(8), CreationDate, 126) desc;",
        "CreationDate": "2016-08-03 14:20:07",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 472607,
        "Title": "Information schema for a Table",
        "Description": "DON'T EDIT THIS QUERY!\r\n\r\nYOU HAVE LINKED TO IT FROM HERE: http:\/\/meta.stackexchange.com\/a\/2678\/158100\r\n\r\nREMEMBER?",
        "QueryBody": "SELECT  c.Table_Name\n     , case \n       when ##PK:string?id## = c.column_name then concat(c.column_name,' (PK)') \n       else c.column_name \n       end as column_name\n     , data_type\n     , is_nullable\n     , coalesce(CHARACTER_MAXIMUM_LENGTH\n             , numeric_precision\n             , datetime_precision) as [Length\/precision]\n --     ,*\nfrom INFORMATION_SCHEMA.Columns c\nwhere c.table_name = ##table:string?posts##\norder by ordinal_position",
        "CreationDate": "2020-05-13 23:39:31",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 472703,
        "Title": "Users with the same display name",
        "Description": "Useful for finding all posts by unregistered users. The first line of results gives a total for all accounts matched. The total reputation calculated subtracts the 1 rep you get for each account, except for the first account. This should be what the user's rep would be if all accounts were merged, assuming none of the accounts have a +100 association bonus.",
        "QueryBody": "SELECT  Users.Id as [User Link],\n    Reputation,\n    count(distinct q.Id) as [Questions],\n    count(distinct a.Id) as [Answers],\n    Users.CreationDate\nfrom Users\nleft join Posts q on q.OwnerUserId = Users.Id and q.PostTypeId = 1\nleft join Posts a on a.OwnerUserId = Users.Id and a.PostTypeId = 2\nwhere DisplayName like '%' + ##name:string?Golding## + '%'\ngroup by Users.Id, Users.Reputation, Users.CreationDate\norder by CreationDate",
        "CreationDate": "2016-04-16 23:30:20",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 472849,
        "Title": "When did I write answers in a particular tag?",
        "Description": null,
        "QueryBody": "SELECT \n  Answer.CreationDate,\n  row_number() over (order by Answer.CreationDate) as Counter\nfrom Posts Answer\njoin Posts Question on\n  Question.Id = Answer.ParentId\nwhere\n  Answer.PostTypeId = 2\/*answer*\/\n  and Answer.OwnerUserId = ##UserId##\n  and Question.Tags like '%<'+##Tag:string##+'>%'",
        "CreationDate": "2016-04-17 06:24:57",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 472975,
        "Title": "Get User Rank By Country & Reputaion",
        "Description": null,
        "QueryBody": "SELECT  TOP 5000\n    ROW_NUMBER() OVER(ORDER BY Reputation DESC) AS [#], \n    Id AS [User Link], \n    Reputation\nFROM\n    Users\nWHERE\n    LOWER(Location) LIKE LOWER('%##CountryName##%') AND \n    Reputation >=##Reputation##\nORDER BY\n    Reputation DESC;",
        "CreationDate": "2016-04-17 14:59:03",
        "validated": false,
        "QueryBody_Original": "SELECT  TOP 5000\n    ROW_NUMBER() OVER(ORDER BY Reputation DESC) AS [#], \n    Id AS [User Link], \n    Reputation\nFROM\n    Users\nWHERE\n    LOWER(Location) LIKE LOWER('%##CountryName##%') AND \n    Reputation >=##Reputation##\nORDER BY\n    Reputation DESC;"
    },
    {
        "QuerySetId": 476438,
        "Title": "Search comments or view top comments",
        "Description": "Find the top comments, or comments with specific text or by users with a specific name. Names and comment text can contain the wildcard \"%\".",
        "QueryBody": "DECLARE  @user_id int = ##UserId:int?0##\n-- UserName: User Name \"% to disable\"\nDECLARE @user_name nvarchar(40) = ##UserName:string?%##\n-- text: Text (% to match all)\nDECLARE @text nvarchar(600) = ##text:string?%##\n\nselect top (##TopN:int?100##)\n    (case when c.UserId is not null then\n      'site:\/\/users\/' + cast(c.UserId as nvarchar) + '|' else '' end) +\n      coalesce(Users.DisplayName, c.UserDisplayName) as [User Link],\n    c.Score,\n    c.Id as [Comment Link],\n    c.CreationDate\ninto #Results\nfrom Comments c\nleft join Users on Users.Id = c.UserId\nwhere lower(Text) like '%' + lower(@text) + '%'\n    and (@user_id = 0 or c.UserId = @user_id)\n    and lower(coalesce(Users.DisplayName, c.UserDisplayName)) like lower(@user_name)\n\nselect *\nfrom #Results\norder by Score desc, CreationDate desc",
        "CreationDate": "2016-05-25 17:58:23",
        "validated": false,
        "QueryBody_Original": "DECLARE  @user_id int = ##UserId:int?0##\n-- UserName: User Name \"% to disable\"\nDECLARE @user_name nvarchar(40) = ##UserName:string?%##\n-- text: Text (% to match all)\nDECLARE @text nvarchar(600) = ##text:string?%##\n\nselect top (##TopN:int?100##)\n    (case when c.UserId is not null then\n      'site:\/\/users\/' + cast(c.UserId as nvarchar) + '|' else '' end) +\n      coalesce(Users.DisplayName, c.UserDisplayName) as [User Link],\n    c.Score,\n    c.Id as [Comment Link],\n    c.CreationDate\ninto #Results\nfrom Comments c\nleft join Users on Users.Id = c.UserId\nwhere lower(Text) like '%' + lower(@text) + '%'\n    and (@user_id = 0 or c.UserId = @user_id)\n    and lower(coalesce(Users.DisplayName, c.UserDisplayName)) like lower(@user_name)\n\nselect *\nfrom #Results\norder by Score desc, CreationDate desc"
    },
    {
        "QuerySetId": 476491,
        "Title": "How many upvotes does my username have for each tag?",
        "Description": "how long before I get tag badges?\r\n",
        "QueryBody": "DECLARE  @UserId int = ##UserId##\nDECLARE @DisplayName nvarchar(4) = '##UserName##'\n\nSELECT --TOP 20 \n    TagName,\n    COUNT(*) AS UpVotes \nFROM Tags\n    INNER JOIN PostTags ON PostTags.TagId = Tags.id\n    INNER JOIN Posts ON Posts.ParentId = PostTags.PostId\n    INNER JOIN Votes ON Votes.PostId = Posts.Id and VoteTypeId = 2\n    INNER JOIN Users ON Users.AccountId = Posts.OwnerUserId\nWHERE \n    --Posts.OwnerUserId = @UserId\n    Users.DisplayName = @DisplayName\nGROUP BY TagName \nORDER BY UpVotes DESC",
        "CreationDate": "2016-04-22 06:08:15",
        "validated": false,
        "QueryBody_Original": "DECLARE  @UserId int = ##UserId##\nDECLARE @DisplayName nvarchar(4) = '##UserName##'\n\nSELECT --TOP 20 \n    TagName,\n    COUNT(*) AS UpVotes \nFROM Tags\n    INNER JOIN PostTags ON PostTags.TagId = Tags.id\n    INNER JOIN Posts ON Posts.ParentId = PostTags.PostId\n    INNER JOIN Votes ON Votes.PostId = Posts.Id and VoteTypeId = 2\n    INNER JOIN Users ON Users.AccountId = Posts.OwnerUserId\nWHERE \n    --Posts.OwnerUserId = @UserId\n    Users.DisplayName = @DisplayName\nGROUP BY TagName \nORDER BY UpVotes DESC"
    },
    {
        "QuerySetId": 476576,
        "Title": "Evolution of the number of posts of a given type",
        "Description": "Calculates a graph with the number of posts of a given type for each day between two chosen dates. Posts types are 1 for question, 2 for answers, and for more, see http:\/\/meta.stackexchange.com\/q\/2677\/285933 ",
        "QueryBody": "DECLARE  @startdate as date, @enddate as date\n\nSELECT \n--  year(CreationDate) as \"Year\",\n--  month(CreationDate) as \"Month\",\n--  day(CreationDate) as \"Day\",\n--  day(CreationDate) as \"Date\",\n  DATENAME(dy,CreationDate) as DayDate,\n  STR(year(CreationDate)) + '-' + STR(month(CreationDate)) + '-' + STR(day(CreationDate)) as FullDate,\n  count(*) as Total\nFROM \n  Posts\n  where PostTypeId = 1\n--GROUP BY year(CreationDate), month(CreationDate), day(CreationDate)\n--ORDER BY year(CreationDate) DESC, month(CreationDate) DESC, day(CreationDate) DESC\nGROUP BY STR(year(CreationDate)) + '-' + STR(month(CreationDate)) + '-' + STR(day(CreationDate)), DATENAME(dy,CreationDate)\nORDER BY FullDate DESC",
        "CreationDate": "2016-04-22 12:32:10",
        "validated": false,
        "QueryBody_Original": "DECLARE  @startdate as date, @enddate as date\n\nSELECT \n--  year(CreationDate) as \"Year\",\n--  month(CreationDate) as \"Month\",\n--  day(CreationDate) as \"Day\",\n--  day(CreationDate) as \"Date\",\n  DATENAME(dy,CreationDate) as DayDate,\n  STR(year(CreationDate)) + '-' + STR(month(CreationDate)) + '-' + STR(day(CreationDate)) as FullDate,\n  count(*) as Total\nFROM \n  Posts\n  where PostTypeId = 1\n--GROUP BY year(CreationDate), month(CreationDate), day(CreationDate)\n--ORDER BY year(CreationDate) DESC, month(CreationDate) DESC, day(CreationDate) DESC\nGROUP BY STR(year(CreationDate)) + '-' + STR(month(CreationDate)) + '-' + STR(day(CreationDate)), DATENAME(dy,CreationDate)\nORDER BY FullDate DESC"
    },
    {
        "QuerySetId": 476871,
        "Title": "Quarterly Report - Number of Answers by Display Name",
        "Description": null,
        "QueryBody": "DECLARE  @answer INTEGER; \nSELECT @answer = Id FROM PostTypes WHERE Name = 'Answer';\n\nDECLARE @user INTEGER;\nSELECT @user = Id FROM Users WHERE DisplayName = 'Shaun Luttin';\n\nSELECT Year = Year(CreationDate),\n    Quarter = DatePart(Quarter, CreationDate),\n    Answers = Count(*)\nFROM Posts\nWHERE PostTypeId = @answer\nAND OwnerUserId = @user\nGROUP BY DatePart(Quarter, CreationDate), Year(CreationDate)\n\n\nORDER BY Year, Quarter",
        "CreationDate": "2016-04-23 01:30:58",
        "validated": false,
        "QueryBody_Original": "DECLARE  @answer INTEGER; \nSELECT @answer = Id FROM PostTypes WHERE Name = 'Answer';\n\nDECLARE @user INTEGER;\nSELECT @user = Id FROM Users WHERE DisplayName = 'Shaun Luttin';\n\nSELECT Year = Year(CreationDate),\n    Quarter = DatePart(Quarter, CreationDate),\n    Answers = Count(*)\nFROM Posts\nWHERE PostTypeId = @answer\nAND OwnerUserId = @user\nGROUP BY DatePart(Quarter, CreationDate), Year(CreationDate)\n\n\nORDER BY Year, Quarter"
    },
    {
        "QuerySetId": 477550,
        "Title": "Can SEDE be used to compare SE sites?",
        "Description": "http:\/\/meta.stackoverflow.com\/questions\/321643\/can-sede-be-used-to-compare-se-sites",
        "QueryBody": "SELECT  name\nfrom sys.databases\n\nSELECT sot.tagname \nfrom tags sot \ninner join superuser.dbo.tags sut \n        on sut.tagname = sot.tagname\ninner join serverfault.dbo.tags sft\n        on sft.tagname = sot.tagname",
        "CreationDate": "2016-04-25 01:03:38",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 477819,
        "Title": "Recent Political Posts and Comments",
        "Description": "Gets recent posts and comments in the politics stack exchange",
        "QueryBody": "DECLARE  @StartDate Date = '2016-04-7'\nDECLARE @EndDate Date = '2016-04-18'\n\nSELECT CreationDate, Body\nFROM Posts\nWHERE CreationDate >= CONVERT(datetime, @StartDate) AND CreationDate <= CONVERT(datetime, @EndDate)\nUNION\nSELECT CreationDate, Text AS Body\nFROM Comments\nWHERE CreationDate >= CONVERT(datetime, @StartDate) AND CreationDate <= CONVERT(datetime, @EndDate)",
        "CreationDate": "2016-04-30 00:49:23",
        "validated": false,
        "QueryBody_Original": "DECLARE  @StartDate Date = '2016-04-7'\nDECLARE @EndDate Date = '2016-04-18'\n\nSELECT CreationDate, Body\nFROM Posts\nWHERE CreationDate >= CONVERT(datetime, @StartDate) AND CreationDate <= CONVERT(datetime, @EndDate)\nUNION\nSELECT CreationDate, Text AS Body\nFROM Comments\nWHERE CreationDate >= CONVERT(datetime, @StartDate) AND CreationDate <= CONVERT(datetime, @EndDate)"
    },
    {
        "QuerySetId": 478114,
        "Title": "Top 500 SciFi Questions (Score\/ViewCount)",
        "Description": null,
        "QueryBody": "WITH  a minimum view count of: \"Enter 0 (zero) to view all posts\"\n\nSELECT TOP 500 Title, Body, ViewCount, Score, Score\/(ViewCount*1.00) Ratio\nFROM Posts p JOIN PostTypes pt on p.PostTypeID = pt.ID\nWHERE pt.Name = 'Question' and (Score > ##questionScore:int## or ViewCount > ##questionViews:int##)\nORDER BY Ratio DESC",
        "CreationDate": "2016-04-26 16:28:27",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 478373,
        "Title": "High Rep Users with no logins in the last month",
        "Description": null,
        "QueryBody": "SELECT  Id as [User Link], AboutMe, Views, Reputation, Convert(Char(10), CONVERT(nvarchar(30), LastAccessDate, 126), 101) AS [Last Login], Convert(CHAR(10), CONVERT(nvarchar(30), CreationDate, 126), 101) AS [First Login]\nFROM Users\nWHERE\nReputation > 10000\nAND\nAboutMe != ''\nAND\nDATEDIFF(month, LastAccessDate, GETDATE() ) > 0\nAND\nDATEDIFF(month, CreationDate, GETDATE() ) < 60",
        "CreationDate": "2016-04-28 19:53:16",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 480375,
        "Title": "My posts with unversioned JSBin links",
        "Description": null,
        "QueryBody": "SELECT    COUNT(*), PostTypeId\nFROM     Posts\nWHERE    OwnerUserId = ##UserId##\nAND      (\nBody LIKE '%http:\/\/jsbin.com\/[^\/][^\/][^\/][^\/]% '\nOR\nBody LIKE '%http:\/\/jsbin.com\/[^\/][^\/][^\/][^\/]\/% '\nOR\nBody LIKE '%http:\/\/jsbin.com\/[^\/][^\/][^\/][^\/][^\/]% '\nOR\nBody LIKE '%http:\/\/jsbin.com\/[^\/][^\/][^\/][^\/][^\/]\/% '\nOR\nBody LIKE '%http:\/\/jsbin.com\/[^\/][^\/][^\/][^\/][^\/][^\/]% '\nOR\nBody LIKE '%http:\/\/jsbin.com\/[^\/][^\/][^\/][^\/][^\/][^\/]\/% '\nOR\nBody LIKE '%http:\/\/jsbin.com\/[^\/][^\/][^\/][^\/][^\/][^\/][^\/]% '\nOR\nBody LIKE '%http:\/\/jsbin.com\/[^\/][^\/][^\/][^\/][^\/][^\/][^\/]\/% '\nOR\nBody LIKE '%http:\/\/jsbin.com\/[^\/][^\/][^\/][^\/][^\/][^\/][^\/][^\/]% '\nOR\nBody LIKE '%http:\/\/jsbin.com\/[^\/][^\/][^\/][^\/][^\/][^\/][^\/][^\/]\/% '\n)\nGROUP BY PostTypeId\nORDER BY COUNT(*) DESC;",
        "CreationDate": "2016-04-30 11:30:09",
        "validated": false,
        "QueryBody_Original": "SELECT    COUNT(*), PostTypeId\nFROM     Posts\nWHERE    OwnerUserId = ##UserId##\nAND      (\nBody LIKE '%http:\/\/jsbin.com\/[^\/][^\/][^\/][^\/]% '\nOR\nBody LIKE '%http:\/\/jsbin.com\/[^\/][^\/][^\/][^\/]\/% '\nOR\nBody LIKE '%http:\/\/jsbin.com\/[^\/][^\/][^\/][^\/][^\/]% '\nOR\nBody LIKE '%http:\/\/jsbin.com\/[^\/][^\/][^\/][^\/][^\/]\/% '\nOR\nBody LIKE '%http:\/\/jsbin.com\/[^\/][^\/][^\/][^\/][^\/][^\/]% '\nOR\nBody LIKE '%http:\/\/jsbin.com\/[^\/][^\/][^\/][^\/][^\/][^\/]\/% '\nOR\nBody LIKE '%http:\/\/jsbin.com\/[^\/][^\/][^\/][^\/][^\/][^\/][^\/]% '\nOR\nBody LIKE '%http:\/\/jsbin.com\/[^\/][^\/][^\/][^\/][^\/][^\/][^\/]\/% '\nOR\nBody LIKE '%http:\/\/jsbin.com\/[^\/][^\/][^\/][^\/][^\/][^\/][^\/][^\/]% '\nOR\nBody LIKE '%http:\/\/jsbin.com\/[^\/][^\/][^\/][^\/][^\/][^\/][^\/][^\/]\/% '\n)\nGROUP BY PostTypeId\nORDER BY COUNT(*) DESC;"
    },
    {
        "QuerySetId": 481662,
        "Title": "Dupe Hammer usage per User",
        "Description": null,
        "QueryBody": "DECLARE  @UserId varchar(60) = '##UserId##'\n\nselect hc.UserId [User Link], count(*) HammerClosed, \n  count(hr.Id) Reopened,\n  Round(count(hr.Id)*100.0\/count(*),0) PctError\nfrom PostHistory hc\nleft join PostHistory hr on hr.PostId=hc.PostId \n          and hr.CreationDate > hc.CreationDate\n          and hr.PostHistoryTypeId=11\n          and hr.text not like '%\"Id\":' + CAST(hc.UserId AS VARCHAR) + '%'\nwhere hc.PostHistoryTypeId=10\n--and hc.UserId = @UserId\nand hc.Comment like '101%'\nand hc.Text like '%BindingReason\":{\"GoldTagBadge%'\nand hc.CreationDate > getdate()-2\ngroup by hc.UserId\norder by count(*) desc;",
        "CreationDate": "2018-06-18 04:57:51",
        "validated": false,
        "QueryBody_Original": "DECLARE  @UserId varchar(60) = '##UserId##'\n\nselect hc.UserId [User Link], count(*) HammerClosed, \n  count(hr.Id) Reopened,\n  Round(count(hr.Id)*100.0\/count(*),0) PctError\nfrom PostHistory hc\nleft join PostHistory hr on hr.PostId=hc.PostId \n          and hr.CreationDate > hc.CreationDate\n          and hr.PostHistoryTypeId=11\n          and hr.text not like '%\"Id\":' + CAST(hc.UserId AS VARCHAR) + '%'\nwhere hc.PostHistoryTypeId=10\n--and hc.UserId = @UserId\nand hc.Comment like '101%'\nand hc.Text like '%BindingReason\":{\"GoldTagBadge%'\nand hc.CreationDate > getdate()-2\ngroup by hc.UserId\norder by count(*) desc;"
    },
    {
        "QuerySetId": 482402,
        "Title": "Most recent still open questions with custom close reasons ",
        "Description": null,
        "QueryBody": "SELECT  * from (\nSELECT TOP ##topn:int?1000## p.Id as [Post Link],\nc.Id AS [Comment Link], \nc.CreationDate as [Comment Date], \nu.Id as [User Link],\nu.Reputation as Reputation,\nSUBSTRING(c.Text, 47, LEN(c.Text) - 46) as \n[I'm voting to close this question as off-topic]\nFROM Comments c INNER JOIN Users u ON c.UserId=u.Id\nINNER JOIN Posts p ON c.PostId=p.Id\nWHERE \np.ClosedDate is NULL AND\nu.Reputation >= ##rep:int?1000## AND\nText COLLATE SQL_Latin1_General_CP1_CI_AS Like 'I''m voting to close this question as off-topic because%'\nORDER BY c.CreationDate DESC) x\nORDER BY x.Reputation DESC",
        "CreationDate": "2016-05-04 13:12:52",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 482563,
        "Title": "Display names containing a substring",
        "Description": null,
        "QueryBody": "SELECT  \nu.displayname COLLATE SQL_Latin1_General_CP1_CI_AS as [User Link],\ncount(*) as [times name used]\nfrom Users u\nwhere u.displayname COLLATE SQL_Latin1_General_CP1_CI_AS \n  like ##DisplayName:string?%panda%##\ngroup by u.displayname COLLATE SQL_Latin1_General_CP1_CI_AS\norder by count(*) desc",
        "CreationDate": "2016-05-04 13:51:06",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 482590,
        "Title": "Check to see if your own answers have been linked in any other question\/answer",
        "Description": null,
        "QueryBody": "DECLARE  @UserId int = ##UserId##\n\nSELECT \n  *\nFROM\n  PostLinks\nWHERE\n  RelatedPostId IN(SELECT Id FROM posts WHERE OwnerUserId=@UserId AND PostTypeId=2)\n  AND LinkTypeId=1",
        "CreationDate": "2016-05-04 15:04:47",
        "validated": false,
        "QueryBody_Original": "DECLARE  @UserId int = ##UserId##\n\nSELECT \n  *\nFROM\n  PostLinks\nWHERE\n  RelatedPostId IN(SELECT Id FROM posts WHERE OwnerUserId=@UserId AND PostTypeId=2)\n  AND LinkTypeId=1"
    },
    {
        "QuerySetId": 483655,
        "Title": "Tags and PostTags tables with synonyms merged",
        "Description": "Makes a table named #TagsMerged that merges all approved tag synonyms into the Count column. It skips the ExcerptPostId and WikiPostId columns. The count in the Tags table might be off by one or so if it wasn't in sync with the total number of questions having that tag at the time of the data dump. Also makes a #PostTagsMerged table that replaces synonymized tags with their targets.",
        "QueryBody": "SELECT  Tags.Id,\n       Tags.TagName,\n       count(distinct PostTags.PostId) as [Count]\ninto #TagsMerged\nfrom Tags\nleft join TagSynonyms ts1 on ts1.TargetTagName = Tags.TagName and ts1.ApprovalDate is not null\nleft join TagSynonyms ts2 on ts2.SourceTagName = Tags.TagName and ts2.ApprovalDate is not null\nleft join Tags tstags on tstags.TagName = ts1.SourceTagName\ninner join PostTags on PostTags.TagId in (Tags.Id, tstags.Id)\nwhere ts2.SourceTagName is null\ngroup by Tags.Id, Tags.TagName\n\nSELECT Tags.Id, Tags.TagName, Tags.Count\nfrom Tags\nleft join #TagsMerged on Tags.Id = #TagsMerged.Id\nwhere Tags.Count <> #TagsMerged.Count --#TagsMerged.Id is null\norder by Tags.Count desc, Tags.TagName",
        "CreationDate": "2016-05-10 00:04:32",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 484281,
        "Title": "Pundit comments, with scores, sorted DESC",
        "Description": null,
        "QueryBody": "SELECT  Id AS [Comment Link], Score FROM Comments WHERE UserId = ##UserId## AND Score > 0\nORDER BY Score DESC",
        "CreationDate": "2018-07-19 21:40:11",
        "validated": false,
        "QueryBody_Original": "SELECT  Id AS [Comment Link], Score FROM Comments WHERE UserId = ##UserId## AND Score > 0\nORDER BY Score DESC"
    },
    {
        "QuerySetId": 484857,
        "Title": "Ruby, Python, PHP popularity over time",
        "Description": null,
        "QueryBody": "SELECT  TagName, substring(convert(VARCHAR, p.CreationDate, 126),1,4), count(1)\nfrom Posts p, PostTags pt, Tags t\nwhere p.id = pt.PostId and pt.TagId = t.id\nand TagName in( 'ruby', 'python', 'php')\ngroup by TagName, substring(convert(VARCHAR, p.CreationDate, 126),1,4)\norder by 1",
        "CreationDate": "2016-05-11 21:31:31",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 484866,
        "Title": "Find the ratio of closed question to asked questions for a given user",
        "Description": null,
        "QueryBody": "SELECT  \n  count(*) as 'TotalQuestions', \n  (SELECT count(*) as 'TotalClosed' FROM Posts C Where C.OwnerUserId = P.OwnerUserID and ClosedDate != '') as 'TotalClosed',\n  --count(*) \/ CASE WHEN (SELECT count(*) as 'TotalClosed' FROM Posts C Where C.OwnerUserId = P.OwnerUserID and ClosedDate != '') = 0 THEN 1 ELSE (SELECT count(*) as 'TotalClosed' FROM Posts C Where C.OwnerUserId = P.OwnerUserID and ClosedDate != '') END as 'Ratio'\n  (SELECT count(*) as 'TotalClosed' FROM Posts C Where C.OwnerUserId = P.OwnerUserID and ClosedDate != '') * 100.0 \/ count(*) * 1.0 as 'percent'\nFROM Posts P\n  where P.OwnerUserId = ##UserId##\nGroup By OwnerUserId",
        "CreationDate": "2016-05-11 23:18:47",
        "validated": false,
        "QueryBody_Original": "SELECT  \n  count(*) as 'TotalQuestions', \n  (SELECT count(*) as 'TotalClosed' FROM Posts C Where C.OwnerUserId = P.OwnerUserID and ClosedDate != '') as 'TotalClosed',\n  --count(*) \/ CASE WHEN (SELECT count(*) as 'TotalClosed' FROM Posts C Where C.OwnerUserId = P.OwnerUserID and ClosedDate != '') = 0 THEN 1 ELSE (SELECT count(*) as 'TotalClosed' FROM Posts C Where C.OwnerUserId = P.OwnerUserID and ClosedDate != '') END as 'Ratio'\n  (SELECT count(*) as 'TotalClosed' FROM Posts C Where C.OwnerUserId = P.OwnerUserID and ClosedDate != '') * 100.0 \/ count(*) * 1.0 as 'percent'\nFROM Posts P\n  where P.OwnerUserId = ##UserId##\nGroup By OwnerUserId"
    },
    {
        "QuerySetId": 484883,
        "Title": "Total Closed, Total Questions, ratio",
        "Description": null,
        "QueryBody": "SELECT  \n  count(*) as TotalQuestions, \n  (SELECT count(*) as TotalClosed FROM Posts C Where C.OwnerUserId = P.OwnerUserID and ClosedDate != '' and PostTypeID = 1) as TotalClosed,\n  (SELECT count(*) as TotalClosed FROM Posts C Where C.OwnerUserId = P.OwnerUserID and ClosedDate != '' and PostTypeID = 1) * 100.0 \/ count(*) * 1.0 as PercentClosed\nFROM Posts P\n  where P.OwnerUserId = ##UserId## and PostTypeID = 1\nGroup By OwnerUserId",
        "CreationDate": "2016-05-11 23:29:16",
        "validated": false,
        "QueryBody_Original": "SELECT  \n  count(*) as TotalQuestions, \n  (SELECT count(*) as TotalClosed FROM Posts C Where C.OwnerUserId = P.OwnerUserID and ClosedDate != '' and PostTypeID = 1) as TotalClosed,\n  (SELECT count(*) as TotalClosed FROM Posts C Where C.OwnerUserId = P.OwnerUserID and ClosedDate != '' and PostTypeID = 1) * 100.0 \/ count(*) * 1.0 as PercentClosed\nFROM Posts P\n  where P.OwnerUserId = ##UserId## and PostTypeID = 1\nGroup By OwnerUserId"
    },
    {
        "QuerySetId": 484998,
        "Title": "Find the list of questions with a given tag without accepted answer ",
        "Description": "This will print a list of questions that are marked with a given tag, are not closed, don't have an accepted answer, have less that 'maxanswer' answers.",
        "QueryBody": "DECLARE  @tagname VARCHAR(120) = ##tagname## -- use, eg. '%<warfare>%'\n\nSELECT\n  q.CreationDate,\n  q.Id as [Post Link],\n  q.Tags,\n  q.AnswerCount as [Number of Answers],\n  sum(a.Score) as [Sum of Score of Answers]\nFROM\n  Posts q\n  inner join Posts a on a.parentId = q.Id\nWHERE \n  q.PostTypeId = 1 \n  and q.AnswerCount< ##maxanswers?4## \n  and q.Tags like @tagname\n  and ISNULL(q.AcceptedAnswerId,0)=0\n  and ISNULL(q.ClosedDate,0)=0\nGROUP BY q.CreationDate, q.Id, q.Tags, q.AnswerCount\nORDER BY q.CreationDate DESC",
        "CreationDate": "2016-05-20 00:00:51",
        "validated": false,
        "QueryBody_Original": "DECLARE  @tagname VARCHAR(120) = ##tagname## -- use, eg. '%<warfare>%'\n\nSELECT\n  q.CreationDate,\n  q.Id as [Post Link],\n  q.Tags,\n  q.AnswerCount as [Number of Answers],\n  sum(a.Score) as [Sum of Score of Answers]\nFROM\n  Posts q\n  inner join Posts a on a.parentId = q.Id\nWHERE \n  q.PostTypeId = 1 \n  and q.AnswerCount< ##maxanswers?4## \n  and q.Tags like @tagname\n  and ISNULL(q.AcceptedAnswerId,0)=0\n  and ISNULL(q.ClosedDate,0)=0\nGROUP BY q.CreationDate, q.Id, q.Tags, q.AnswerCount\nORDER BY q.CreationDate DESC"
    },
    {
        "QuerySetId": 485160,
        "Title": "Last day of year two dates",
        "Description": null,
        "QueryBody": "DECLARE  @startdate as date = '01\/01\/2014';\nDECLARE @enddate as date = '03\/20\/2016';\n\nwith dates as(  \n    select dt = dateadd(yy, datediff(yy, 0, @startdate) + 1, -1)\n    where dateadd(yy, 1, @startDate) <= @endDate\n    union all\n    select dateadd(yy, 1, dt)\n    from dates\n    where dateadd(yy, 1, dt) <= @endDate\n)\nselect cast(dt as date) as dt\nfrom dates\nunion\nselect @enddate;",
        "CreationDate": "2016-05-12 14:13:45",
        "validated": false,
        "QueryBody_Original": "DECLARE  @startdate as date = '01\/01\/2014';\nDECLARE @enddate as date = '03\/20\/2016';\n\nwith dates as(  \n    select dt = dateadd(yy, datediff(yy, 0, @startdate) + 1, -1)\n    where dateadd(yy, 1, @startDate) <= @endDate\n    union all\n    select dateadd(yy, 1, dt)\n    from dates\n    where dateadd(yy, 1, dt) <= @endDate\n)\nselect cast(dt as date) as dt\nfrom dates\nunion\nselect @enddate;"
    },
    {
        "QuerySetId": 485535,
        "Title": "unpivot and match row# to col#",
        "Description": null,
        "QueryBody": "SELECT -specific-number-of-column-for-specific-number-of-id\/37195325#37195325\n*\/\n\nwith test_data(ID1,    NAME1,   PRICE,   DATE1)\nas (\nSELECT 123, 'JOHN',  22, '1\/1\/2010'  union all\nSELECT 234, 'KING',  50, '5\/10\/2009' union all\nSELECT 345, 'JACK', 400, '30\/11\/210'\n)\n\nSELECT ID1, DATA\nFROM\n(\n  SELECT ID1, DATA, COL,\n  row_number() over (partition by ID1 order by id1) RN,\n  dense_rank() over (order by id1) DR\n  from (\n    SELECT \n      cast(ID1   as varchar(10)) ID1, \n      cast(NAME1 as varchar(10)) NAME1, \n      cast(PRICE as varchar(10)) PRICE,\n      cast(DATE1 as varchar(10)) DATE1\n    FROM test_data td\n  ) td1\n  unpivot\n  (\n   DATA for COL in (NAME1, PRICE, DATE1) \n  ) td2\n) td3\nwhere DR = RN",
        "CreationDate": "2017-03-28 15:30:58",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 485622,
        "Title": "Deletable questions with a tag",
        "Description": null,
        "QueryBody": "SELECT  p.Id\nFROM Posts p \nWHERE (\n  p.PostTypeId = 1 AND\n  p.ClosedDate IS NOT NULL AND\n  p.Score <= ##maxscore## AND\n  p.ViewCount <= ##maxviews## AND\n  p.Tags LIKE '%##tag##%' AND\n  datediff(day, p.ClosedDate, getdate()) >= ##mindays## AND\n  ##maxscore## >= ALL (\n    SELECT a.Score FROM Posts a WHERE (\n      a.ParentId = p.Id\n    ) \n  )\n  AND NOT EXISTS ( SELECT pl.Id FROM PostLinks pl\n  WHERE pl.PostId = p.Id AND pl.LinkTypeId = 3\n  )\n)\nORDER BY p.ClosedDate ASC",
        "CreationDate": "2016-05-14 03:53:46",
        "validated": false,
        "QueryBody_Original": "SELECT  p.Id\nFROM Posts p \nWHERE (\n  p.PostTypeId = 1 AND\n  p.ClosedDate IS NOT NULL AND\n  p.Score <= ##maxscore## AND\n  p.ViewCount <= ##maxviews## AND\n  p.Tags LIKE '%##tag##%' AND\n  datediff(day, p.ClosedDate, getdate()) >= ##mindays## AND\n  ##maxscore## >= ALL (\n    SELECT a.Score FROM Posts a WHERE (\n      a.ParentId = p.Id\n    ) \n  )\n  AND NOT EXISTS ( SELECT pl.Id FROM PostLinks pl\n  WHERE pl.PostId = p.Id AND pl.LinkTypeId = 3\n  )\n)\nORDER BY p.ClosedDate ASC"
    },
    {
        "QuerySetId": 485825,
        "Title": "Count of questions posted per day of the week for a given tag",
        "Description": "Days are counted in UTC.",
        "QueryBody": "SELECT  datepart(dw, allposts.CreationDate) as Day,\n    case datepart(dw, allposts.CreationDate)\n    when 1 then 'Sunday'\n    when 2 then 'Monday'\n    when 3 then 'Tuesday'\n    when 4 then 'Wednesday'\n    when 5 then 'Thursday'\n    when 6 then 'Friday'\n    when 7 then 'Saturday'\n    end\n    as [Day of Week],\n    count(taggedposts.Id) as [Tagged posts],\n    count(allposts.Id) as [All posts],\n    round(100.0*count(taggedposts.Id)\/count(allposts.Id),3) as [Percent]\ninto #Results\nfrom Posts allposts\nleft join Posts taggedposts on allposts.Id = taggedposts.Id\n          and taggedposts.Tags like '%##TagName?story-identification##%'\ngroup by datepart(dw, allposts.CreationDate)\n\nSELECT *\nfrom #Results\norder by Day\n\nSELECT Day, [Day of Week], [Percent]\nfrom #Results\norder by Day",
        "CreationDate": "2016-05-15 04:39:17",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 486826,
        "Title": "Recent long questions -- check if they contain code",
        "Description": null,
        "QueryBody": "SELECT  TOP ##topN:int?100##Id AS [Post Link], Body, LEN(Body) AS length,\nCASE \n      WHEN CHARINDEX('<pre><code>',Body) > 0 THEN 'Yes' \n      ELSE 'No'\n   END \nAS HasCode,\nCASE \n      WHEN CHARINDEX('<div class=\"snippet\"',Body) > 0 THEN 'Yes' \n      ELSE 'No'\n   END \nAS HasSnippet\nFROM Posts WHERE\nPostTypeId=1 \nAND CreationDate > DATEADD(MONTH, -##months:int?2##, GETDATE())\nORDER BY LEN(Body) DESC",
        "CreationDate": "2016-05-17 15:06:40",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 487351,
        "Title": "Your accepted answers sorted by score",
        "Description": null,
        "QueryBody": "SELECT  * from Posts as Answers\nwhere OwnerUserId = ##UserId## \nand PostTypeId = 2\nand exists (\nSELECT Id from Posts as Questions \nwhere PostTypeId = 1 \nand Questions.AcceptedAnswerId = Answers.Id\n) order by Score desc",
        "CreationDate": "2016-05-18 05:27:42",
        "validated": false,
        "QueryBody_Original": "SELECT  * from Posts as Answers\nwhere OwnerUserId = ##UserId## \nand PostTypeId = 2\nand exists (\nSELECT Id from Posts as Questions \nwhere PostTypeId = 1 \nand Questions.AcceptedAnswerId = Answers.Id\n) order by Score desc"
    },
    {
        "QuerySetId": 487573,
        "Title": "Get all your comment with dates and scores",
        "Description": null,
        "QueryBody": "DECLARE  @UserId int = ##UserId##\n\nSELECT     Score, CreationDate, Id AS [Comment Link]\nFROM     Comments\nWHERE     UserId = @UserId \nORDER BY CreationDate DESC",
        "CreationDate": "2016-05-18 19:17:29",
        "validated": false,
        "QueryBody_Original": "DECLARE  @UserId int = ##UserId##\n\nSELECT     Score, CreationDate, Id AS [Comment Link]\nFROM     Comments\nWHERE     UserId = @UserId \nORDER BY CreationDate DESC"
    },
    {
        "QuerySetId": 488239,
        "Title": "Normal and visual string reversion",
        "Description": null,
        "QueryBody": "DECLARE  @ varchar(99)='AB(XY){}[]'\n\nPRINT reverse(@)SELECT\n@=STUFF(@,n,1,SUBSTRING('()][}{'+@,CHARINDEX(SUBSTRING(@,n,1),')([]{}'+@),1))FROM(SELECT\nTOP(LEN(@))number+1 n FROM master..spt_values WHERE'P'=type)C PRINT REVERSE(@)",
        "CreationDate": "2016-05-19 19:34:27",
        "validated": false,
        "QueryBody_Original": "DECLARE  @ varchar(99)='AB(XY){}[]'\n\nPRINT reverse(@)SELECT\n@=STUFF(@,n,1,SUBSTRING('()][}{'+@,CHARINDEX(SUBSTRING(@,n,1),')([]{}'+@),1))FROM(SELECT\nTOP(LEN(@))number+1 n FROM master..spt_values WHERE'P'=type)C PRINT REVERSE(@)"
    },
    {
        "QuerySetId": 488352,
        "Title": "Find all posts where a certain user has edited and included a certain keyword",
        "Description": null,
        "QueryBody": "SELECT  distinct PostHistory.PostId as [Post Link]\nfrom PostHistory\nleft join Posts on Posts.Id = PostHistory.PostId\nwhere PostHistoryTypeId = 5\nand Text like '%' + ##keyword:string## + '%'\nand OwnerUserId = ##UserId##\nand Posts.CreationDate > ##date##",
        "CreationDate": "2016-05-19 22:56:05",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 488683,
        "Title": "Users who started with a identification request and then made another post (self-answers excluded)",
        "Description": null,
        "QueryBody": "WITH \n  first_user_posts AS (\n    SELECT\n      u.id AS userId,\n      MIN(p.id) AS postId\n    FROM users u \n    JOIN posts p ON (u.id = p.onwerUserId)\n    WHERE p.\n\nSELECT *\nFROM posts p\nJOIN posts op ON (p.id <> op.id AND p.id <> op.parentid AND p.owneruserid = op.owneruserid)\nJOIN posttags pt ON (p.id = pt.postid)\nJOIN tags t ON (pt.tagid = t.id)\nWHERE p.posttypeid = 1 -- questions\n  AND t.tagname LIKE 'identify%' -- identification requests\n*\/\n\nSELECT * FROM posttypes",
        "CreationDate": "2016-05-20 15:59:46",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 488745,
        "Title": "Number of Later Posts Per User by First Tag",
        "Description": null,
        "QueryBody": "WITH  FirstQuestionTags AS \n(\n    SELECT p.OwnerUserId, p.ClosedDate, pt.TagId, RANK() OVER (PARTITION BY p.OwnerUserId ORDER BY p.Id) AS [Rank]\n    FROM Posts p\n    INNER JOIN PostTags pt ON pt.PostId = p.Id\n),\nFirstTagMatches AS\n(\n  SELECT ft.OwnerUserId, ft.ClosedDate\n  FROM FirstQuestionTags ft\n  INNER JOIN Tags t ON t.Id = ft.TagId\n  WHERE ft.Rank = 1 AND t.TagName LIKE ##TagName:string## + '%'\n)\nSELECT * FROM FirstTagMatches",
        "CreationDate": "2016-05-20 18:12:28",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 488751,
        "Title": "My answers using snippet.log workaround",
        "Description": null,
        "QueryBody": "SELECT        Id AS [Post Link]\nFROM         Posts\nWHERE        PostTypeId = 2\n             AND OwnerUserId = ##UserId##\n             AND Body LIKE '%tjcrowder.github.io\/simple-snippets-console\/snippet.js%'\nORDER BY     CreationDate DESC;",
        "CreationDate": "2016-05-20 18:19:09",
        "validated": false,
        "QueryBody_Original": "SELECT        Id AS [Post Link]\nFROM         Posts\nWHERE        PostTypeId = 2\n             AND OwnerUserId = ##UserId##\n             AND Body LIKE '%tjcrowder.github.io\/simple-snippets-console\/snippet.js%'\nORDER BY     CreationDate DESC;"
    },
    {
        "QuerySetId": 489859,
        "Title": "get top protected questions by tag",
        "Description": null,
        "QueryBody": "DECLARE  @TagName NVARCHAR(25) = ##TagName##;\nSELECT TOP 100 \n  [Post Link] = Posts.Id,\n  Posts.ViewCount,\n  Posts.Score,\n  Tags.TagName AS [Tag Name]\nFROM PostHistory\n  INNER JOIN PostTags ON PostTags.PostId = PostHistory.PostId\n  INNER JOIN Tags ON PostTags.TagId = Tags.Id\n  INNER JOIN Posts ON PostTags.PostId = Posts.Id\nWHERE PostHistory.PostHistoryTypeId = 19 AND Tags.TagName = @TagName\nORDER BY Posts.ViewCount DESC;",
        "CreationDate": "2017-12-10 11:34:48",
        "validated": false,
        "QueryBody_Original": "DECLARE  @TagName NVARCHAR(25) = ##TagName##;\nSELECT TOP 100 \n  [Post Link] = Posts.Id,\n  Posts.ViewCount,\n  Posts.Score,\n  Tags.TagName AS [Tag Name]\nFROM PostHistory\n  INNER JOIN PostTags ON PostTags.PostId = PostHistory.PostId\n  INNER JOIN Tags ON PostTags.TagId = Tags.Id\n  INNER JOIN Posts ON PostTags.PostId = Posts.Id\nWHERE PostHistory.PostHistoryTypeId = 19 AND Tags.TagName = @TagName\nORDER BY Posts.ViewCount DESC;"
    },
    {
        "QuerySetId": 490078,
        "Title": "User's answers with competing answers",
        "Description": null,
        "QueryBody": "SELECT  a.Id as [Post Link], a.Score from Posts a\ninner join Posts q on a.ParentId = q.Id \nwhere a.OwnerUserId = ##userid## and q.AnswerCount > 1\norder by a.Score desc",
        "CreationDate": "2016-05-24 22:54:23",
        "validated": false,
        "QueryBody_Original": "SELECT  a.Id as [Post Link], a.Score from Posts a\ninner join Posts q on a.ParentId = q.Id \nwhere a.OwnerUserId = ##userid## and q.AnswerCount > 1\norder by a.Score desc"
    },
    {
        "QuerySetId": 492361,
        "Title": "Find review items for a post",
        "Description": null,
        "QueryBody": "SELECT  * from ReviewTasks where PostId=##PostId:int##",
        "CreationDate": "2016-05-30 19:41:05",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 493114,
        "Title": "Get Response Data for a Given User's Questions",
        "Description": "For a given User's ID, this query gets available data on answers, comments, and comments on answers for the User's Questions.",
        "QueryBody": "DECLARE  Globals *\/\n\nDECLARE @userID int = ##UserID##\n\n\/* Grab Answers For Questions Asked By User *\/\n\nSELECT * FROM Posts WHERE PostTypeId = 2 AND ParentId IN (\n    SELECT PostId from PostHistory WHERE UserId = @userID\n    AND PostHistoryTypeId = 1); --Indicates titling of a question\n\n\/* check on stuff *\/\n\n\/* Grab Comments on Questions Asked By User *\/\n\nSELECT * from Comments WHERE PostID IN (\n  SELECT PostId from PostHistory WHERE UserID = @userID\n  AND PostHistoryTypeId = 1); --Indicates titling of a question\n \nSELECT TOP 10 * from Comments;",
        "CreationDate": "2016-06-01 09:32:30",
        "validated": false,
        "QueryBody_Original": "DECLARE  Globals *\/\n\nDECLARE @userID int = ##UserID##\n\n\/* Grab Answers For Questions Asked By User *\/\n\nSELECT * FROM Posts WHERE PostTypeId = 2 AND ParentId IN (\n    SELECT PostId from PostHistory WHERE UserId = @userID\n    AND PostHistoryTypeId = 1); --Indicates titling of a question\n\n\/* check on stuff *\/\n\n\/* Grab Comments on Questions Asked By User *\/\n\nSELECT * from Comments WHERE PostID IN (\n  SELECT PostId from PostHistory WHERE UserID = @userID\n  AND PostHistoryTypeId = 1); --Indicates titling of a question\n \nSELECT TOP 10 * from Comments;"
    },
    {
        "QuerySetId": 495383,
        "Title": "Answers with references to Wikipedia by user",
        "Description": "Returns all answers by chosen user that have \"en.wikipedia.org\/wiki\" in them somewhere.",
        "QueryBody": "DECLARE  @UserId int = ##UserId##\n\nSELECT\n  A.Id as [Post Link],\n  A.CreationDate as [Answer Date]\nFROM\n  Posts A\nWHERE\n       A.PostTypeId = 2 --answers\n  AND (A.Body LIKE '%en.m.wikipedia.org\/wiki%')\nORDER BY\n  [Answer Date] DESC",
        "CreationDate": "2016-06-06 14:56:32",
        "validated": false,
        "QueryBody_Original": "DECLARE  @UserId int = ##UserId##\n\nSELECT\n  A.Id as [Post Link],\n  A.CreationDate as [Answer Date]\nFROM\n  Posts A\nWHERE\n       A.PostTypeId = 2 --answers\n  AND (A.Body LIKE '%en.m.wikipedia.org\/wiki%')\nORDER BY\n  [Answer Date] DESC"
    },
    {
        "QuerySetId": 495518,
        "Title": "Top programmers from Romania by Tag",
        "Description": null,
        "QueryBody": "DECLARE  @tag_id int = (select id from tags where tagname = LOWER('##TagName##'));\n\nselect top (##Limit##)\n  rank() over (order by sum(answers.score) desc) \"Rank\",\n  users.DisplayName \"User\",\n  CONCAT('http:\/\/stackoverflow.com\/users\/', users.id) \"User Link\",\n  sum(answers.score) as \"Score\"\nfrom users\njoin posts answers on (users.id = answers.owneruserid)\njoin posts parent on (answers.parentid = parent.id)\njoin posttags on (parent.id = posttags.postid)\nwhere posttags.tagid = @tag_id\nand LOWER(Location) LIKE '%leipzig%'\n--and answers.posttypeid = 2  -- answers only\ngroup by users.id, users.DisplayName\norder by sum(answers.score) desc;",
        "CreationDate": "2016-09-20 16:13:00",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 495873,
        "Title": "Reputation from Answers to Closed Questions",
        "Description": null,
        "QueryBody": "SELECT \n  sum(case when v.VoteTypeId = 1 then 15 \n           when v.VoteTypeId = 2 then 10\n           when v.VoteTypeId = 3 then -2\n           else 0 end)\n  as 'Reputation'\nfrom\n  Posts q\n    inner join Posts a\n      on a.ParentId = q.Id\n      inner join Votes v\n        on v.PostId = a.Id\nwhere\n  a.CommunityOwnedDate is null\n  and a.OwnerUserId = ##UserId##\n  and a.postTypeId = 2\n  and not (q.ClosedDate is null)",
        "CreationDate": "2016-06-04 17:15:39",
        "validated": false,
        "QueryBody_Original": "SELECT \n  sum(case when v.VoteTypeId = 1 then 15 \n           when v.VoteTypeId = 2 then 10\n           when v.VoteTypeId = 3 then -2\n           else 0 end)\n  as 'Reputation'\nfrom\n  Posts q\n    inner join Posts a\n      on a.ParentId = q.Id\n      inner join Votes v\n        on v.PostId = a.Id\nwhere\n  a.CommunityOwnedDate is null\n  and a.OwnerUserId = ##UserId##\n  and a.postTypeId = 2\n  and not (q.ClosedDate is null)"
    },
    {
        "QuerySetId": 495897,
        "Title": "Find in a tag: unanswered questions with score<=0 answers",
        "Description": "http:\/\/meta.stackoverflow.com\/questions\/322530\/find-in-a-tag-unanswered-questions-with-score-0-answers",
        "QueryBody": "SELECT  p.id as [Post Link]\nfrom posts p\ninner join posttags pt on pt.postid = p.id\ninner join tags t on t.id = pt.tagid\nwhere acceptedanswerid is null -- the question has no accepted answer\nand answercount > 0\nand t.tagname = ##tagname:string## -- from one tag\nand answercount =  \n    ( SELECT count(*) \n      from posts a \n      where a.parentid = p.id\n      and score <= 0 ) -- all answers within the question are score<=0",
        "CreationDate": "2016-06-04 21:49:23",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 496692,
        "Title": "Get posts by tag, for the last 7 days.",
        "Description": null,
        "QueryBody": "DECLARE  @Tag nvarchar(25) = 'gluon';\n\nSELECT TOP 100\n  Posts.Id AS [Post Link], Posts.Body, Posts.Tags\nFROM Tags\n  INNER JOIN PostTags ON PostTags.TagId = Tags.Id\n  INNER JOIN Posts ON Posts.Id = PostTags.PostId\nWHERE\n  Tags.TagName = @Tag AND\n  Posts.PostTypeId = 1 -- Questions\n  AND Posts.CreationDate >= DATEADD(day,-7, GETDATE())\nORDER BY Posts.CreationDate DESC",
        "CreationDate": "2018-04-04 11:23:45",
        "validated": false,
        "QueryBody_Original": "DECLARE  @Tag nvarchar(25) = 'gluon';\n\nSELECT TOP 100\n  Posts.Id AS [Post Link], Posts.Body, Posts.Tags\nFROM Tags\n  INNER JOIN PostTags ON PostTags.TagId = Tags.Id\n  INNER JOIN Posts ON Posts.Id = PostTags.PostId\nWHERE\n  Tags.TagName = @Tag AND\n  Posts.PostTypeId = 1 -- Questions\n  AND Posts.CreationDate >= DATEADD(day,-7, GETDATE())\nORDER BY Posts.CreationDate DESC"
    },
    {
        "QuerySetId": 497497,
        "Title": "Stack Overflow should publish periodic on-site language popularity statistics",
        "Description": "http:\/\/meta.stackoverflow.com\/questions\/325761\/stack-overflow-should-publish-periodic-on-site-language-popularity-statistics",
        "QueryBody": "WITH  a , like haskell,vb.net\"\nselect cast(DATEADD(DAY, 1-DATEPART(WEEKDAY, p.creationdate), p.creationdate) as date) as [week]\n     , tagname\n     , count(*) as qcount\n     -- , sum(viewcount) as totviews\nfrom posts p \ninner join posttags pt on pt.postid = p.id\ninner join tags t on t.id = pt.tagid\nwhere tagname in (select * from STRING_SPLIT(##tags:string##, ','))\ngroup by cast(DATEADD(DAY, 1-DATEPART(WEEKDAY, p.creationdate), p.creationdate) as date) , tagname\norder by cast(DATEADD(DAY, 1-DATEPART(WEEKDAY, p.creationdate), p.creationdate) as date)",
        "CreationDate": "2016-06-08 18:40:22",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 498624,
        "Title": "Sum It Up with a Digital Triangle",
        "Description": null,
        "QueryBody": "DECLARE  @ varchar(100)= '1 2 3 4 5 6 7'\n\nDECLARE @j INT=1,@i INT=LEN(@)\nWHILE @i>0\nBEGIN\nPRINT @\n  WHILE @i>@j\n    SELECT @=STUFF(@,@i-1,2,RIGHT(SUBSTRING(@,@i-2,1)+SUBSTRING(@,@i,1)*1,1)+' '),@i-=2\n  SELECT @=STUFF(@,@j,1,' '),@j+=1,@i=LEN(@)\nEND",
        "CreationDate": "2016-06-14 16:23:29",
        "validated": false,
        "QueryBody_Original": "DECLARE  @ varchar(100)= '1 2 3 4 5 6 7'\n\nDECLARE @j INT=1,@i INT=LEN(@)\nWHILE @i>0\nBEGIN\nPRINT @\n  WHILE @i>@j\n    SELECT @=STUFF(@,@i-1,2,RIGHT(SUBSTRING(@,@i-2,1)+SUBSTRING(@,@i,1)*1,1)+' '),@i-=2\n  SELECT @=STUFF(@,@j,1,' '),@j+=1,@i=LEN(@)\nEND"
    },
    {
        "QuerySetId": 499473,
        "Title": "self accepted answers in the given tag",
        "Description": null,
        "QueryBody": "DECLARE  @TagName nvarchar(25) = '##TagName##'\n\nselect \n       selfAnswer.Id as [Post Link], \n       question.Score as QuestionScore,\n       selfAnswer.Score as AnswerScore,\n       question.tags\nfrom posts as question\n    inner join posts as selfAnswer\n        on  selfAnswer.owneruserid = question.owneruserid\n        and selfAnswer.parentid = question.id\n        and selfAnswer.id = question.acceptedanswerid\nwhere \n    question.posttypeid = 1\nand selfAnswer.posttypeid = 2\nand question.tags like concat('%', @TagName, '%')\norder by \n(question.Score + selfAnswer.Score) desc,\n        selfAnswer.CreationDate desc",
        "CreationDate": "2016-06-13 15:36:22",
        "validated": false,
        "QueryBody_Original": "DECLARE  @TagName nvarchar(25) = '##TagName##'\n\nselect \n       selfAnswer.Id as [Post Link], \n       question.Score as QuestionScore,\n       selfAnswer.Score as AnswerScore,\n       question.tags\nfrom posts as question\n    inner join posts as selfAnswer\n        on  selfAnswer.owneruserid = question.owneruserid\n        and selfAnswer.parentid = question.id\n        and selfAnswer.id = question.acceptedanswerid\nwhere \n    question.posttypeid = 1\nand selfAnswer.posttypeid = 2\nand question.tags like concat('%', @TagName, '%')\norder by \n(question.Score + selfAnswer.Score) desc,\n        selfAnswer.CreationDate desc"
    },
    {
        "QuerySetId": 499853,
        "Title": "Percentage of Questions wiuthout the Accepted Answer @until",
        "Description": null,
        "QueryBody": "DECLARE  @until nvarchar (10) = '##until##'\n\nSELECT \n(CAST(Count(q.Id) AS float) \/ (SELECT Count(*) FROM Posts WHERE Posts.CreationDate < @until AND PostTypeId = 1) * 100) AS AcceptedPercentage\nFROM\n    Posts q\n  INNER JOIN\n    Posts a ON q.AcceptedAnswerId = a.Id\nWHERE\n    a.PostTypeId = 2\n    AND\n    q.CreationDate < @until",
        "CreationDate": "2019-08-06 23:34:02",
        "validated": false,
        "QueryBody_Original": "DECLARE  @until nvarchar (10) = '##until##'\n\nSELECT \n(CAST(Count(q.Id) AS float) \/ (SELECT Count(*) FROM Posts WHERE Posts.CreationDate < @until AND PostTypeId = 1) * 100) AS AcceptedPercentage\nFROM\n    Posts q\n  INNER JOIN\n    Posts a ON q.AcceptedAnswerId = a.Id\nWHERE\n    a.PostTypeId = 2\n    AND\n    q.CreationDate < @until"
    },
    {
        "QuerySetId": 499946,
        "Title": "Percentage of Questions with the Accepted Answer @until",
        "Description": null,
        "QueryBody": "DECLARE  @until nvarchar (10) = '##until##'\nSELECT \n(CAST(Count(distinct q.Id) AS float) \/ (SELECT Count(*) FROM Posts WHERE Posts.CreationDate < @until AND PostTypeId = 1) * 100) AS AcceptedPercentage\nFROM\n    Posts q\n  INNER JOIN\n    Posts a ON q.Id = a.ParentID\nWHERE\n    a.PostTypeId = 2\n  \n    AND\n     q.CreationDate < @until\n    AND\n    q.PostTypeId = 1",
        "CreationDate": "2019-08-03 19:37:53",
        "validated": false,
        "QueryBody_Original": "DECLARE  @until nvarchar (10) = '##until##'\nSELECT \n(CAST(Count(distinct q.Id) AS float) \/ (SELECT Count(*) FROM Posts WHERE Posts.CreationDate < @until AND PostTypeId = 1) * 100) AS AcceptedPercentage\nFROM\n    Posts q\n  INNER JOIN\n    Posts a ON q.Id = a.ParentID\nWHERE\n    a.PostTypeId = 2\n  \n    AND\n     q.CreationDate < @until\n    AND\n    q.PostTypeId = 1"
    },
    {
        "QuerySetId": 500313,
        "Title": "Count of my answers containing Stack Snippets",
        "Description": null,
        "QueryBody": "SELECT  COUNT(*)\nFROM   Posts\nWHERE  OwnerUserId = ##UserId##\nAND    PostTypeId = 2\nAND    Body LIKE '%class=\"snippet\"%';",
        "CreationDate": "2016-06-15 11:30:44",
        "validated": false,
        "QueryBody_Original": "SELECT  COUNT(*)\nFROM   Posts\nWHERE  OwnerUserId = ##UserId##\nAND    PostTypeId = 2\nAND    Body LIKE '%class=\"snippet\"%';"
    },
    {
        "QuerySetId": 500315,
        "Title": "Proof that there are spaces",
        "Description": null,
        "QueryBody": "SELECT  TOP 100 Id AS [Post Link], Body\nFROM   Posts\nWHERE  OwnerUserId = ##UserId##\nAND    PostTypeId = 2\nAND    Body LIKE '%snippet%'\nORDER BY CreationDate DESC;",
        "CreationDate": "2016-06-15 11:33:01",
        "validated": false,
        "QueryBody_Original": "SELECT  TOP 100 Id AS [Post Link], Body\nFROM   Posts\nWHERE  OwnerUserId = ##UserId##\nAND    PostTypeId = 2\nAND    Body LIKE '%snippet%'\nORDER BY CreationDate DESC;"
    },
    {
        "QuerySetId": 500398,
        "Title": "Find operations required to get result",
        "Description": null,
        "QueryBody": "DECLARE  @a varchar(max)= '5,5,5'\nDECLARE @b varchar(20) = '5'\n\n,@ varchar(max)='';WITH D as(SELECT @a a UNION ALL SELECT STUFF(a,charindex(',',a),1,value)FROM STRING_SPLIT('*,+,.\/,-,',',')x,d WHERE a like'%,%')SELECT @+=a+','''+REPLACE(a,'.','')+'''),('FROM D WHERE a not like'%,%'EXEC('SELECT y FROM(values('+@+'null,null))g(x,y)WHERE x='+@b)",
        "CreationDate": "2016-06-17 12:00:08",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 501869,
        "Title": "Perguntas de Score Baixo & Respostas de Score Alto",
        "Description": null,
        "QueryBody": "DECLARE  @ScoreBaixo int = ##ScoreBaixo##\nDECLARE @ScoreAlto int = ##ScoreAlto##\n\nSELECT P.Id AS [Post Link], P.Score AS 'SCORE PERG.', A.Score AS 'SCORE RESP.'\nFROM Posts AS P\n  JOIN\n    ( SELECT Id, Score\n      FROM Posts\n      GROUP BY Id, Score\n    ) AS A\n    ON  P.AcceptedAnswerId = A.Id\n    WHERE P.Score < @ScoreBaixo\n    AND\n    A.Score > @ScoreAlto;",
        "CreationDate": "2016-06-17 22:34:24",
        "validated": false,
        "QueryBody_Original": "DECLARE  @ScoreBaixo int = ##ScoreBaixo##\nDECLARE @ScoreAlto int = ##ScoreAlto##\n\nSELECT P.Id AS [Post Link], P.Score AS 'SCORE PERG.', A.Score AS 'SCORE RESP.'\nFROM Posts AS P\n  JOIN\n    ( SELECT Id, Score\n      FROM Posts\n      GROUP BY Id, Score\n    ) AS A\n    ON  P.AcceptedAnswerId = A.Id\n    WHERE P.Score < @ScoreBaixo\n    AND\n    A.Score > @ScoreAlto;"
    },
    {
        "QuerySetId": 501875,
        "Title": "Perguntas de Score Alto & Respostas de Score Alto",
        "Description": null,
        "QueryBody": "DECLARE  @Score int = ##Score##\n\nSELECT P.Id AS [Post Link], P.Score AS 'SCORE PERG.', A.Score AS 'SCORE RESP.'\nFROM Posts AS P\n  JOIN\n    ( SELECT Id, Score\n      FROM Posts\n      GROUP BY Id, Score\n    ) AS A\n    ON  P.AcceptedAnswerId = A.Id\n    WHERE P.Score > @Score\n    AND\n    A.Score > @Score;",
        "CreationDate": "2016-06-18 21:40:51",
        "validated": false,
        "QueryBody_Original": "DECLARE  @Score int = ##Score##\n\nSELECT P.Id AS [Post Link], P.Score AS 'SCORE PERG.', A.Score AS 'SCORE RESP.'\nFROM Posts AS P\n  JOIN\n    ( SELECT Id, Score\n      FROM Posts\n      GROUP BY Id, Score\n    ) AS A\n    ON  P.AcceptedAnswerId = A.Id\n    WHERE P.Score > @Score\n    AND\n    A.Score > @Score;"
    },
    {
        "QuerySetId": 502270,
        "Title": "Tags with the most views per question",
        "Description": "For each tag, calculate the views per question and the views per day per question.",
        "QueryBody": "DECLARE  @numtags int = ##NumTags:int?1000##\nDECLARE @mincount int = ##MinCount:int?20##\nDECLARE @excludetag nvarchar(35) = ##ExcludeTag:string?-##\n\nselect top (@numtags)\n    TagName,\n    Tags.Count,\n    sum(ViewCount) as Views,\n    sum(ViewCount)\/Tags.Count as [Views per question]\ninto #table\nfrom Tags\nleft join PostTags on PostTags.TagId = Tags.Id\nleft join Posts on Posts.Id = PostTags.PostId\nwhere Posts.PostTypeId = 1 and Tags.Count >= @mincount\n    and (@excludetag = '-' or Tags not like '%<' + @excludetag + '>%')\ngroup by TagName, Tags.Count\norder by Tags.Count desc, Tags.TagName\n\nselect TagName, Count, Views, [Views per question]\nfrom #table\norder by [Views per question] desc\n\nselect row_number() over (order by [Views per question] desc) as Rank,\n    [Views per question]\nfrom #table",
        "CreationDate": "2016-06-19 08:14:13",
        "validated": false,
        "QueryBody_Original": "DECLARE  @numtags int = ##NumTags:int?1000##\nDECLARE @mincount int = ##MinCount:int?20##\nDECLARE @excludetag nvarchar(35) = ##ExcludeTag:string?-##\n\nselect top (@numtags)\n    TagName,\n    Tags.Count,\n    sum(ViewCount) as Views,\n    sum(ViewCount)\/Tags.Count as [Views per question]\ninto #table\nfrom Tags\nleft join PostTags on PostTags.TagId = Tags.Id\nleft join Posts on Posts.Id = PostTags.PostId\nwhere Posts.PostTypeId = 1 and Tags.Count >= @mincount\n    and (@excludetag = '-' or Tags not like '%<' + @excludetag + '>%')\ngroup by TagName, Tags.Count\norder by Tags.Count desc, Tags.TagName\n\nselect TagName, Count, Views, [Views per question]\nfrom #table\norder by [Views per question] desc\n\nselect row_number() over (order by [Views per question] desc) as Rank,\n    [Views per question]\nfrom #table"
    },
    {
        "QuerySetId": 502802,
        "Title": "Write a program to elasticize strings",
        "Description": null,
        "QueryBody": "DECLARE  @x varchar(max)='Lobby'\n\nDECLARE @ INT=LEN(@x)WHILE @>0SELECT\n@x=STUFF(@x,@,1,REPLICATE(SUBSTRING(@x,@,1),@)),@-=1PRINT @x",
        "CreationDate": "2016-06-21 12:38:53",
        "validated": false,
        "QueryBody_Original": "DECLARE  @x varchar(max)='Lobby'\n\nDECLARE @ INT=LEN(@x)WHILE @>0SELECT\n@x=STUFF(@x,@,1,REPLICATE(SUBSTRING(@x,@,1),@)),@-=1PRINT @x"
    },
    {
        "QuerySetId": 504071,
        "Title": "Search comments by user for subpattern",
        "Description": null,
        "QueryBody": "SELECT  Id as [Comment Link], PostId as [Post Link], * from Comments\nwhere (UserId = ##UserId## or UserDisplayName = '##UserName? ##')\norder by CreationDate desc",
        "CreationDate": "2017-10-08 17:24:40",
        "validated": false,
        "QueryBody_Original": "SELECT  Id as [Comment Link], PostId as [Post Link], * from Comments\nwhere (UserId = ##UserId## or UserDisplayName = '##UserName? ##')\norder by CreationDate desc"
    },
    {
        "QuerySetId": 504215,
        "Title": "Migration notes in schema at Data.SE",
        "Description": "http:\/\/meta.stackexchange.com\/questions\/280576\/migration-notes-in-schema-at-data-se",
        "QueryBody": "SELECT  postid as [Post Link]\n     , creationdate\n     , posthistorytypeid as [type]\n     , case \n       when posthistorytypeid = 35 then 'Away'\n       when posthistorytypeid = 36 then 'Here'\n       end as migrated\n     , comment     \nfrom posthistory \nwhere postid = ##postid:int?36025884##",
        "CreationDate": "2016-06-25 14:02:58",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 504344,
        "Title": "Most frequent duplicate targets for a tag",
        "Description": null,
        "QueryBody": "SELECT  top ##Count:int##\n  RelatedPostId as [Post Link],\n  count(*) as \"Number of duplicates\"\n\nfrom PostLinks\n  join Posts q on q.Id = RelatedPostId\n  join PostTags pt on q.Id = pt.PostId\n  join Tags t on pt.TagId = t.Id\n \nwhere LinkTypeId=3\n  and t.TagName = ##Tag:string##\n\ngroup by RelatedPostId\norder by count(*) desc",
        "CreationDate": "2016-06-26 01:59:13",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 504464,
        "Title": "Find lone answers to questions asked by users with low reputation",
        "Description": null,
        "QueryBody": "SELECT  p.CreationDate, p.Id as [Post Link], a.Id as [Post Link]\nFROM Posts p\nJOIN Posts a ON p.Id = a.ParentId\nJOIN Users u ON p.OwnerUserId = u.Id\nJOIN Users au ON a.OwnerUserId = au.Id\nWHERE a.PostTypeId = 2\nAND p.AnswerCount = 1\nAND p.AcceptedAnswerID IS NULL\nAND u.Reputation <= ##MaxRep##\nAND a.OwnerUserId = ##UserId##\nORDER BY p.CreationDate DESC",
        "CreationDate": "2016-06-26 08:19:59",
        "validated": false,
        "QueryBody_Original": "SELECT  p.CreationDate, p.Id as [Post Link], a.Id as [Post Link]\nFROM Posts p\nJOIN Posts a ON p.Id = a.ParentId\nJOIN Users u ON p.OwnerUserId = u.Id\nJOIN Users au ON a.OwnerUserId = au.Id\nWHERE a.PostTypeId = 2\nAND p.AnswerCount = 1\nAND p.AcceptedAnswerID IS NULL\nAND u.Reputation <= ##MaxRep##\nAND a.OwnerUserId = ##UserId##\nORDER BY p.CreationDate DESC"
    },
    {
        "QuerySetId": 504636,
        "Title": "Which is my most upvoted comment?",
        "Description": null,
        "QueryBody": "DECLARE  @UserId int = ##UserId##\n\nSELECT \n    *\nFROM \n    Comments\nWHERE \n    UserId = @UserId\n    AND Score = (SELECT MAX(Score)\n                 FROM Comments\n                 WHERE UserId = @UserId)",
        "CreationDate": "2016-06-26 13:45:24",
        "validated": false,
        "QueryBody_Original": "DECLARE  @UserId int = ##UserId##\n\nSELECT \n    *\nFROM \n    Comments\nWHERE \n    UserId = @UserId\n    AND Score = (SELECT MAX(Score)\n                 FROM Comments\n                 WHERE UserId = @UserId)"
    },
    {
        "QuerySetId": 504681,
        "Title": "100 high-scoring posts (Concise edition)",
        "Description": "A concise edition of http:\/\/data.stackexchange.com\/stackoverflow\/query\/504298\/100-high-scoring-posts, with only the ID, votes and titles and views (for questions). You can choose a minimum score yourself.",
        "QueryBody": "SELECT  TOP 100 Title, Id, Score, ViewCount\n  FROM Posts\n WHERE Score >= ##MinScore:int##\n \n-- MinScore: Minimum score",
        "CreationDate": "2016-06-26 14:25:38",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 505984,
        "Title": "Target questions for \"canonical\" vs \"fastest-gun\" answers",
        "Description": "based off http:\/\/meta.stackexchange.com\/questions\/171172\/stack-overflow-technology-makes-me-write-bad-answers\r\n\r\n- 2+ upvotes\r\n- ? 0 answers? No. Don't -care number of A.\r\n- Tags with average number of followers == ???\r\n--- maybe contains a tag from my favorites?\r\n--- http:\/\/data.stackexchange.com\/unix\/query\/356006\/my-tags-by-post-count\r\n---- maybe posts where all of the tags are middle-of-the-road counts for me? or high counts?\r\n---- at least one of the tags?\r\n- not closed\r\n- not community-owned\r\n- posted in the last month\r\n- at least one favorite\r\n- adhoc - less than 6 answers (maybe HNQ activity)\r\n\r\n\r\nposts where one of their tags is in:\r\n(SELECT TOP 20 T.Id\r\nFROM Tags T, PostTags Pot, Posts P, Users U, PostTypes Pt\r\nWHERE U.Id = P.OwnerUserId\r\nAND Pt.Id = P.PostTypeId\r\nAND P.OwnerUserId = ##user:int?117549##\r\nAND Pot.PostId = P.ParentID\r\nAND  T.Id = Pot.TagId\r\nGROUP BY T.Id)",
        "QueryBody": "SELECT  Id as [Post Link], Body, Score, Tags, AnswerCount, FavoriteCount, \nDATEDIFF(Day, CreationDate, GETDATE()) As Age\nFROM Posts\nJOIN posttags ON posts.id = posttags.postid\nwhere \nPostTypeId = 1 -- Question\nand Score > 1\nand ClosedDate IS NULL -- not closed\nand CommunityOwnedDate IS NULL -- not Community Wiki\nand FavoriteCount > 0\nand DATEDIFF(Day, CreationDate, GETDATE()) < 31\nand AnswerCount < 6\nand Body NOT LIKE ##user:int?117549## -- gratuitous clause to get my userid\nand\nposttags.tagid IN (\nSELECT TOP 20 T.Id\nFROM Tags T, PostTags Pot, Posts P, Users U, PostTypes Pt\nWHERE\nU.Id = P.OwnerUserId\nAND\nPt.Id = P.PostTypeId\nAND\nP.OwnerUserId = ##user:int?117549##\nAND\nPot.PostId = P.ParentID\nAND \nT.Id = Pot.TagId\nGROUP BY T.Id\n)",
        "CreationDate": "2016-06-29 19:06:43",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 505994,
        "Title": "My top tags by Post Count",
        "Description": null,
        "QueryBody": "SELECT  TagName + ', ' AS 'data()' \n  FROM \n  (\n    SELECT TOP 5 T.TagName, Count(Pot.TagId) AS TagCount\n    FROM Tags T, PostTags Pot, Posts P, Users U, PostTypes Pt\n    WHERE\n    U.Id = P.OwnerUserId\n    AND\n    Pt.Id = P.PostTypeId\n    AND\n    P.OwnerUserId = 53236\n    AND\n    Pot.PostId = P.ParentID\n    AND \n    T.Id = Pot.TagId\n    AND\n    P.LastActivityDate > DATEADD(year, -3, GetDate())\n    GROUP BY T.TagName\n    ORDER BY Count(Pot.TagId) DESC \n  ) AS test\n  FOR XML PATH('')",
        "CreationDate": "2017-03-20 16:31:43",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 506713,
        "Title": "Concatenate the result of an ordered String_Split in a variable",
        "Description": "http:\/\/stackoverflow.com\/questions\/38129614\/concatenate-the-result-of-an-ordered-string-split-in-a-variable",
        "QueryBody": "DECLARE  @revname nvarchar(128) \nDECLARE @part nvarchar(128) \n\n  select @revname = coalesce(@revname +'.','')  + value\n  from string_split(db_name(),'.')\n  order by row_number() over( order by (select 1)) desc\n  \n  select '1: ' + @revname\n  \n  \n  select @revname = coalesce(@revname +'.','')  + value\n  from string_split(db_name(),'.')\n  -- order by row_number() over( order by (select 1)) desc\n  \n  select '2: ' + @revname\n  \n  select value + '.' as [text()]\n  from string_split(db_name(),'.') \n  where value is not null\n  order by row_number() over( order by (select 1)) desc\n  for xml path('')",
        "CreationDate": "2016-06-30 21:08:28",
        "validated": false,
        "QueryBody_Original": "DECLARE  @revname nvarchar(128) \nDECLARE @part nvarchar(128) \n\n  select @revname = coalesce(@revname +'.','')  + value\n  from string_split(db_name(),'.')\n  order by row_number() over( order by (select 1)) desc\n  \n  select '1: ' + @revname\n  \n  \n  select @revname = coalesce(@revname +'.','')  + value\n  from string_split(db_name(),'.')\n  -- order by row_number() over( order by (select 1)) desc\n  \n  select '2: ' + @revname\n  \n  select value + '.' as [text()]\n  from string_split(db_name(),'.') \n  where value is not null\n  order by row_number() over( order by (select 1)) desc\n  for xml path('')"
    },
    {
        "QuerySetId": 506846,
        "Title": "Answer Resonance & Importance to Impacted Users",
        "Description": "The goal here is to measure the impact of an answer on the users who have viewed it - the idea being that the higher the percentage of viewers who have upvoted an answer, the more that answer resonated with the group of viewers, and the higher the percentage of viewers who have favorited an answer, the more that answer is important to the group of viewers.\r\n\r\nI put a cut off at 5000 views as a minimum exposure, and removed closed or locked questions as they (presumably) have been deemed to be not good questions.",
        "QueryBody": "SELECT \n    a.Id as answer_id,\n    q.Id as question_id,\n    q.ViewCount,\n    q.FavoriteCount,\n    a.Score,  \n    a.OwnerUserId,\n    (a.Score*1000)\/q.ViewCount as resonance,\n    (q.FavoriteCount*1000)\/q.ViewCount as importance,\n    CASE WHEN q.AcceptedAnswerId = a.Id THEN 'Accepted' ELSE '' END as recognized\nFROM\n    Posts a\n      JOIN Posts q ON a.ParentId = q.Id AND q.postTypeId = 1\n      LEFT JOIN PostHistory ph ON q.Id = ph.PostID AND ph.PostHistoryTypeID = 14\nWHERE\n    ph.Id IS NULL AND\n    a.postTypeId = 2 AND\n    a.CommunityOwnedDate IS NULL AND\n    q.ClosedDate IS NULL AND\n    a.OwnerUserId = ##UserID##\nORDER BY\n    (a.Score*1000)\/q.ViewCount DESC,\n    (q.FavoriteCount*1000)\/q.ViewCount DESC",
        "CreationDate": "2016-07-01 00:43:13",
        "validated": false,
        "QueryBody_Original": "SELECT \n    a.Id as answer_id,\n    q.Id as question_id,\n    q.ViewCount,\n    q.FavoriteCount,\n    a.Score,  \n    a.OwnerUserId,\n    (a.Score*1000)\/q.ViewCount as resonance,\n    (q.FavoriteCount*1000)\/q.ViewCount as importance,\n    CASE WHEN q.AcceptedAnswerId = a.Id THEN 'Accepted' ELSE '' END as recognized\nFROM\n    Posts a\n      JOIN Posts q ON a.ParentId = q.Id AND q.postTypeId = 1\n      LEFT JOIN PostHistory ph ON q.Id = ph.PostID AND ph.PostHistoryTypeID = 14\nWHERE\n    ph.Id IS NULL AND\n    a.postTypeId = 2 AND\n    a.CommunityOwnedDate IS NULL AND\n    q.ClosedDate IS NULL AND\n    a.OwnerUserId = ##UserID##\nORDER BY\n    (a.Score*1000)\/q.ViewCount DESC,\n    (q.FavoriteCount*1000)\/q.ViewCount DESC"
    },
    {
        "QuerySetId": 507361,
        "Title": "Users with at least N reputation on two specified sites",
        "Description": "The selected site is the first site. The second site is specified with the database name(see http:\/\/data.stackexchange.com\/stackoverflow\/query\/312685\/all-stack-exchange-databases).",
        "QueryBody": "SELECT  TOP ##topn:int?200## a.Id AS [User Link],a.Reputation AS rep1,b.Reputation AS rep2\nFROM Users a INNER JOIN ##database?[SuperUser]##..Users b ON a.AccountId=b.AccountId\nWHERE a.Reputation>=##n:int?500## AND b.Reputation>=##n##\nORDER BY a.Reputation DESC",
        "CreationDate": "2016-07-03 13:30:34",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 507404,
        "Title": "Score at time of post",
        "Description": null,
        "QueryBody": "SELECT  sum(score) + 1\nfrom\n(SELECT count(*) * p.posttypeid * 5 score\nfrom posts p \ninner join votes v on v.postid = p.id\ninner join posts p2 on p2.owneruserid = p.owneruserid\nwhere p2.id = ##postid?8092417##\nand v.votetypeid = 2\nand p.creationdate < p2.creationdate\nand v.creationdate < p2.creationdate\nand p.posttypeid in (1, 2)\ngroup by p.posttypeid\nunion all\nSELECT count(*) * -2\nfrom posts p \ninner join votes v on v.postid = p.id\ninner join posts p2 on p2.owneruserid = p.owneruserid\nwhere p2.id = ##postid?8092417##\nand v.votetypeid = 3\nand p.creationdate < p2.creationdate\nand v.creationdate < p2.creationdate\nand p.posttypeid in (1, 2)\ngroup by p.posttypeid) t",
        "CreationDate": "2016-07-03 16:17:39",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 507562,
        "Title": "Puzzles You May Have Missed",
        "Description": null,
        "QueryBody": "SELECT  top(30) q.Id as [Post Link], q.OwnerUserId as [User Link],\n(1.0 * q.Score * q.Score\/q.ViewCount) as Rank,\nq.Score, q.ViewCount, \nq.Tags, q.CreationDate,\nq.AnswerCount, SUM(p.Score) as AScore\nfrom Posts q\ninner join Posts p\non p.ParentId = q.Id\nwhere q.PostTypeId = 1\nand q.AcceptedAnswerId is not null\nand q.Score > 0\nand q.ViewCount < 500\nand q.CreationDate > DATEFROMPARTS(##year?2016##,##month?01##,01) \nand q.CreationDate < DATEADD(dd, -1, DATEADD(mm, 3, DATEFROMPARTS(##year?2016##,##month?01##,01)))\ngroup by q.Id, q.OwnerUserId, q.CreationDate, q.Tags, q.Score, q.ViewCount, q.AnswerCount, p.ParentId\norder by Rank desc",
        "CreationDate": "2016-07-09 12:54:27",
        "validated": false,
        "QueryBody_Original": "SELECT  top(30) q.Id as [Post Link], q.OwnerUserId as [User Link],\n(1.0 * q.Score * q.Score\/q.ViewCount) as Rank,\nq.Score, q.ViewCount, \nq.Tags, q.CreationDate,\nq.AnswerCount, SUM(p.Score) as AScore\nfrom Posts q\ninner join Posts p\non p.ParentId = q.Id\nwhere q.PostTypeId = 1\nand q.AcceptedAnswerId is not null\nand q.Score > 0\nand q.ViewCount < 500\nand q.CreationDate > DATEFROMPARTS(##year?2016##,##month?01##,01) \nand q.CreationDate < DATEADD(dd, -1, DATEADD(mm, 3, DATEFROMPARTS(##year?2016##,##month?01##,01)))\ngroup by q.Id, q.OwnerUserId, q.CreationDate, q.Tags, q.Score, q.ViewCount, q.AnswerCount, p.ParentId\norder by Rank desc"
    },
    {
        "QuerySetId": 507690,
        "Title": "Where should I put my mirror?",
        "Description": null,
        "QueryBody": "DECLARE  @t varchar(99)='AbccbA'\n\n,@z char(99)='',@a INT=0,@ INT=0WHILE @a<LEN(@t)SELECT\n@z=IIF(LEN(x)>LEN(@z)\/2and @t LIKE'%'+x+REVERSE(x)+'%'COLLATE\nThai_bin,x+'|'+REVERSE(x),@z),@=IIF(@=99,1,@+1),@a+=IIF(@=1,1,0)FROM(SELECT\nSUBSTRING(@t,@a,@)x)x PRINT @z",
        "CreationDate": "2016-07-04 18:29:58",
        "validated": false,
        "QueryBody_Original": "DECLARE  @t varchar(99)='AbccbA'\n\n,@z char(99)='',@a INT=0,@ INT=0WHILE @a<LEN(@t)SELECT\n@z=IIF(LEN(x)>LEN(@z)\/2and @t LIKE'%'+x+REVERSE(x)+'%'COLLATE\nThai_bin,x+'|'+REVERSE(x),@z),@=IIF(@=99,1,@+1),@a+=IIF(@=1,1,0)FROM(SELECT\nSUBSTRING(@t,@a,@)x)x PRINT @z"
    },
    {
        "QuerySetId": 507751,
        "Title": "Top 100 Users by answer accepted rate (users with >100 answers)",
        "Description": "The top users based on what percent of answers they have given have been accepted.\r\nExcludes users with fewer than 20 answers.\r\n",
        "QueryBody": "WITH  fewer than 20 answers.\n\nWITH\nUserAnswers AS\n(\n SELECT U.Id,\n        U.Reputation,\n        COUNT( DISTINCT A.Id ) AS AnswerCount,\n        COUNT( Q.Id ) AS AcceptedCount\n FROM Users U\n JOIN Posts A ON A.OwnerUserId = U.Id AND A.PostTypeId = 2\n LEFT OUTER JOIN Posts Q ON Q.AcceptedAnswerId = A.Id\n GROUP BY U.Id,\n          U.Reputation\n)\n\nSELECT TOP 1000\n U.Id AS [User Link],\n U.Reputation,\n U.AnswerCount,\n U.AcceptedCount,\n ROUND((CAST(U.AcceptedCount AS FLOAT) \/ U.AnswerCount)*100,3) AS Percentage \n\nFROM\n UserAnswers U\n\nWHERE U.AnswerCount >= 100\n\nORDER BY\n Percentage DESC",
        "CreationDate": "2017-05-09 11:46:10",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 507762,
        "Title": "Fastest users to get to X rep",
        "Description": "Fastest user to reach a certain rep score.",
        "QueryBody": "DECLARE  @User1 int = ##User1##;\nDECLARE @User2 int = ##User2##;\n\n--SELECT * from [Votes] where ([UserId]=@User1 OR [UserId]=@User2) ORDER BY [CreationDate]\nSELECT * from [VoteTypes]\n--SELECT * from [PostTypes]",
        "CreationDate": "2016-07-09 21:13:54",
        "validated": false,
        "QueryBody_Original": "DECLARE  @User1 int = ##User1##;\nDECLARE @User2 int = ##User2##;\n\n--SELECT * from [Votes] where ([UserId]=@User1 OR [UserId]=@User2) ORDER BY [CreationDate]\nSELECT * from [VoteTypes]\n--SELECT * from [PostTypes]"
    },
    {
        "QuerySetId": 507816,
        "Title": "Questions which attract controversial answers",
        "Description": "Search for posts which have attracted significantly more controversial answers than good ones",
        "QueryBody": "SELECT  p.Id as [Post Link], p.Score from (\nSELECT p.ParentId, count(*) as ContACnt from (\n    SELECT\n      PostId,\n      up = sum(case when VoteTypeId = 2 then 1 else 0 end),\n      down = sum(case when VoteTypeId = 3 then 1 else 0 end)\n    from Votes v join Posts p on p.Id = v.PostId\n    where VoteTypeId in (2,3) and PostTypeId = 2\n    group by PostId\n  ) as ContA\n  join posts p on ContA.PostId = p.Id\n  where down > (up \/ ##UVDVRatio:int##) and (down + up) > ##MinVotes:int## and p.Score > 0\n  group by p.ParentId\n) as ContQ\njoin posts p on ContQ.ParentId = p.Id\nwhere ContQ.ContACnt > (p.AnswerCount \/ 2)\norder by Score desc",
        "CreationDate": "2016-07-05 04:04:48",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 508407,
        "Title": "What's the second non-repeating character?",
        "Description": null,
        "QueryBody": "DECLARE  @ varchar(99)=',,zzzbb@kkkkkkJgg'\n\n,@i INT=99WHILE @i>1SELECT\n@i-=1,@=IIF(LEN(@)>=LEN(x),x,@)FROM(SELECT\nREPLACE(@,SUBSTRING(@,@i,1),'')x)x PRINT SUBSTRING(@,2,1)",
        "CreationDate": "2019-04-07 07:54:29",
        "validated": false,
        "QueryBody_Original": "DECLARE  @ varchar(99)=',,zzzbb@kkkkkkJgg'\n\n,@i INT=99WHILE @i>1SELECT\n@i-=1,@=IIF(LEN(@)>=LEN(x),x,@)FROM(SELECT\nREPLACE(@,SUBSTRING(@,@i,1),'')x)x PRINT SUBSTRING(@,2,1)"
    },
    {
        "QuerySetId": 508510,
        "Title": "Reverse a string while maintaining the capitalization in the same places",
        "Description": null,
        "QueryBody": "DECLARE  @ varchar(max)='Hello, MidnIghtas'\n\n,@o varchar(max)='',@i INT=0WHILE @i<LEN(@)SELECT\n@i+=1,@o+=IIF(ascii(x)=ascii(lower(x)),lower(y),upper(y))FROM(SELECT\nSUBSTRING(@,@i+1,1)x,SUBSTRING(@,len(@)-@i,1)y)z\nPRINT @o",
        "CreationDate": "2016-07-07 19:52:02",
        "validated": false,
        "QueryBody_Original": "DECLARE  @ varchar(max)='Hello, MidnIghtas'\n\n,@o varchar(max)='',@i INT=0WHILE @i<LEN(@)SELECT\n@i+=1,@o+=IIF(ascii(x)=ascii(lower(x)),lower(y),upper(y))FROM(SELECT\nSUBSTRING(@,@i+1,1)x,SUBSTRING(@,len(@)-@i,1)y)z\nPRINT @o"
    },
    {
        "QuerySetId": 508589,
        "Title": "Better template for multi db queries",
        "Description": null,
        "QueryBody": "DECLARE  @tagname nvarchar = 'sshfs'\n\nDECLARE @sql nvarchar(max) -- holds build up sql string\n\n\nselect @sql = @sql +\n'select @url\n      , t.tagname\n      , t.count\n from tags t \n where t.tagname = ''' + @tagname + ''' collate sql_latin1_general_cp1_ci_ai;'\nfrom sys.databases\nwhere database_id >5\n\nselect @sql",
        "CreationDate": "2016-07-06 19:22:52",
        "validated": false,
        "QueryBody_Original": "DECLARE  @tagname nvarchar = 'sshfs'\n\nDECLARE @sql nvarchar(max) -- holds build up sql string\n\n\nselect @sql = @sql +\n'select @url\n      , t.tagname\n      , t.count\n from tags t \n where t.tagname = ''' + @tagname + ''' collate sql_latin1_general_cp1_ci_ai;'\nfrom sys.databases\nwhere database_id >5\n\nselect @sql"
    },
    {
        "QuerySetId": 509046,
        "Title": "Golf to find Boring numbers",
        "Description": null,
        "QueryBody": "DECLARE  @t varchar(99)='3452514263534543543543543543876514264527473275'\n\n,@z bit=0,@a INT=1,@ INT=1WHILE @a<LEN(@t)SELECT\n@z=IIF(@t LIKE'%'+replicate(SUBSTRING(@t,@a,@),5)+'%',1,@z),@=IIF(@=20,1,@+1),@a+=IIF(@=1,1,0)PRINT @z",
        "CreationDate": "2016-07-07 18:54:14",
        "validated": false,
        "QueryBody_Original": "DECLARE  @t varchar(99)='3452514263534543543543543543876514264527473275'\n\n,@z bit=0,@a INT=1,@ INT=1WHILE @a<LEN(@t)SELECT\n@z=IIF(@t LIKE'%'+replicate(SUBSTRING(@t,@a,@),5)+'%',1,@z),@=IIF(@=20,1,@+1),@a+=IIF(@=1,1,0)PRINT @z"
    },
    {
        "QuerySetId": 509163,
        "Title": "DocuSign - Get Unanswered Questions",
        "Description": null,
        "QueryBody": "SELECT \n  p.Id,\n  'http:\/\/stackoverflow.com\/questions\/' + CONVERT(VARCHAR, p.Id) as URL,\n  p.Title,\n  p.CreationDate\nFROM Posts p\n  JOIN PostTags pt\n    JOIN Tags t\n    ON t.Id = pt.TagId\n  ON pt.PostId = p.Id\nWHERE\n  t.TagName = 'docusignapi'\n  AND p.AcceptedAnswerID IS NULL\nORDER BY\n  p.CreationDate DESC",
        "CreationDate": "2016-07-08 00:18:01",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 509307,
        "Title": "Rearrange a number into alphabetical order",
        "Description": null,
        "QueryBody": "DECLARE  @s BIGINT=1234567890\n\nDECLARE @ char(99)=@s,@i INT=99,@j INT=98WHILE @i>1SELECT @=IIF(CHARINDEX(x,'236719458')>CHARINDEX(y,'236719458'),STUFF(STUFF(@,@j,1,x),@i,1,y),@),@i-=IIF(@j=1,1,0),@j=IIF(@j=1,@i,@j-1)FROM(SELECT SUBSTRING(@,@i,1)x,SUBSTRING(@,@j,1)y)z PRINT CAST(@ as bigint)",
        "CreationDate": "2016-07-08 13:53:26",
        "validated": false,
        "QueryBody_Original": "DECLARE  @s BIGINT=1234567890\n\nDECLARE @ char(99)=@s,@i INT=99,@j INT=98WHILE @i>1SELECT @=IIF(CHARINDEX(x,'236719458')>CHARINDEX(y,'236719458'),STUFF(STUFF(@,@j,1,x),@i,1,y),@),@i-=IIF(@j=1,1,0),@j=IIF(@j=1,@i,@j-1)FROM(SELECT SUBSTRING(@,@i,1)x,SUBSTRING(@,@j,1)y)z PRINT CAST(@ as bigint)"
    },
    {
        "QuerySetId": 509329,
        "Title": "Do high-reputation users post low-score questions and answers?",
        "Description": null,
        "QueryBody": "SELECT \n  Posts.Score,\n  Users.Reputation,\n  PostTypes.Name AS 'Type',\n  Users.Id AS [User Link],\n  Posts.Id AS [Post Link]\nFROM Posts\nJOIN Users\n  ON Users.Id = Posts.OwnerUserID\nJOIN PostTypes ON Posts.PostTypeId = PostTypes.Id\nWHERE Posts.Score < ##PostScoreThreshold:int?0##\n  AND Users.Reputation > ##ReputationThreshold:int?1000##\n  AND PostTypes.Id = ##PostType?1##\n  -- PostScoreThreshold: Maximum post score\n  -- ReputationThreshold: Minimum user reputation\n  -- PostType: Type of post, 1 for questions and 2 for answers\nORDER BY Users.Reputation DESC",
        "CreationDate": "2016-07-08 15:32:18",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 509344,
        "Title": "Determine the \u201cLuck\u201d of a string",
        "Description": null,
        "QueryBody": "DECLARE  @t varchar(99)='oluck'\n\n,@z INT=0,@a INT=0,@ INT=1,@c INT=0WHILE @a<LEN(@t)SELECT\n@a+=IIF(@=1,1,0),@z=IIF('LUCKY'LIKE'%'+x+'%'and @>@z,@,@z),@c+=IIF(x\nIN('O','M','E','N'),2,0),@=IIF(@+@a-1=LEN(@t),1,@+1)FROM(SELECT\nSUBSTRING(@t,@a,@)x)x PRINT POWER(2,@z)-@c",
        "CreationDate": "2016-07-08 16:51:18",
        "validated": false,
        "QueryBody_Original": "DECLARE  @t varchar(99)='oluck'\n\n,@z INT=0,@a INT=0,@ INT=1,@c INT=0WHILE @a<LEN(@t)SELECT\n@a+=IIF(@=1,1,0),@z=IIF('LUCKY'LIKE'%'+x+'%'and @>@z,@,@z),@c+=IIF(x\nIN('O','M','E','N'),2,0),@=IIF(@+@a-1=LEN(@t),1,@+1)FROM(SELECT\nSUBSTRING(@t,@a,@)x)x PRINT POWER(2,@z)-@c"
    },
    {
        "QuerySetId": 509836,
        "Title": "Singapore Top User with Python tag",
        "Description": null,
        "QueryBody": "WITH  Python tag\n-- List of Singapore-based users by reputation score. Query, naturally, by a Singaporean user.\n-- \n-- This is the original query!\n\nSELECT\n    ROW_NUMBER() OVER(ORDER BY u.Reputation DESC) AS [#], \n    u.Id AS [User Link], \n    u.Reputation\nFROM\n    Users u\ninner join posts p on p.ownerUserid = u.id\ninner join posttags pt on pt.postid = p.id\ninner join tags t on t.id = pt.tagid\nWHERE\n    LOWER(u.Location) LIKE '%singapore%'\n    OR UPPER(u.Location) LIKE '%SG'\n    and t.tagname = 'python'\nGROUP BY \n    u.reputation, u.id\nORDER BY\n    Reputation DESC;",
        "CreationDate": "2016-07-10 12:58:15",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 509962,
        "Title": "Up\/down vote breakdown for a post",
        "Description": null,
        "QueryBody": "SELECT \n  Posts.Id AS [Post Link],\n  Posts.Score AS 'Score',\n  COUNT(CASE WHEN Votes.VoteTypeId = 2 THEN 1 END) AS 'UpVotes',\n  COUNT(CASE WHEN Votes.VoteTypeId = 3 THEN 1 END) AS 'DownVotes'\nFROM Posts\nJOIN Votes ON Votes.PostId = Posts.Id\nWHERE Posts.Id = ##post:int##\n   -- post: Post Id to query\n  AND (Votes.VoteTypeId = 2 OR Votes.VoteTypeId = 3)\nGROUP BY Posts.Id, Posts.Score",
        "CreationDate": "2016-07-10 21:33:39",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 510006,
        "Title": "Quantifiably Good Questions by Tag",
        "Description": null,
        "QueryBody": "DECLARE  @tagName nvarchar(50) = ##Tag:string##;\n\nSELECT\n  p.Score,\n  p.Id [Post Link]\nFROM Posts p\n  LEFT JOIN PostTags pt ON p.Id = pt.PostId\n  LEFT JOIN Tags t ON pt.TagId = t.Id\n  LEFT JOIN PostTypes pty ON pty.Id = p.PostTypeId\nWHERE p.Score >= ##MinScore##\n      AND ViewCount >= ##MinViewCount##\n      AND pty.Name = 'Question'\n      AND t.TagName = @tagName\nORDER BY p.Score DESC;",
        "CreationDate": "2016-07-11 02:20:13",
        "validated": false,
        "QueryBody_Original": "DECLARE  @tagName nvarchar(50) = ##Tag:string##;\n\nSELECT\n  p.Score,\n  p.Id [Post Link]\nFROM Posts p\n  LEFT JOIN PostTags pt ON p.Id = pt.PostId\n  LEFT JOIN Tags t ON pt.TagId = t.Id\n  LEFT JOIN PostTypes pty ON pty.Id = p.PostTypeId\nWHERE p.Score >= ##MinScore##\n      AND ViewCount >= ##MinViewCount##\n      AND pty.Name = 'Question'\n      AND t.TagName = @tagName\nORDER BY p.Score DESC;"
    },
    {
        "QuerySetId": 510178,
        "Title": "one question and one answer",
        "Description": null,
        "QueryBody": "SELECT  count(*) from Posts where ParentId IN (SELECT Id from Posts where PostTypeId = 1 and AnswerCount = 1 and CommentCount = 0\u3000and AcceptedAnswerId is not null) and CommentCount = 0;",
        "CreationDate": "2016-07-11 13:54:59",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 510497,
        "Title": "Print the ASCII printable character set",
        "Description": null,
        "QueryBody": "DECLARE  @ char(94)=''WHILE 94>LEN(@)SELECT @=char(126-LEN(@))+@ PRINT @",
        "CreationDate": "2016-07-12 11:49:38",
        "validated": false,
        "QueryBody_Original": "DECLARE  @ char(94)=''WHILE 94>LEN(@)SELECT @=char(126-LEN(@))+@ PRINT @"
    },
    {
        "QuerySetId": 510620,
        "Title": "Find users with highest count of [tag:optimization]",
        "Description": null,
        "QueryBody": "WITH  Questions AS (\n  SELECT *\n  FROM Posts\n  WHERE PostTypeId = 1\n)\n\nSELECT TOP ##Limit:int?100##\n  OwnerUserId,\n  OwnerUserId [User Link],\n  COUNT(*) c\nFROM Questions\nWHERE\n  Tags LIKE '%<optimization>%'\nGROUP BY OwnerUserId\nORDER BY c DESC",
        "CreationDate": "2016-07-12 00:26:07",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 510775,
        "Title": "Asked by user1 and answered by user2",
        "Description": null,
        "QueryBody": "SELECT  q.id as [Post Link]\nfrom posts q join posts a on a.parentid=q.id\nwhere \nq.posttypeid = 1 and\na.posttypeid = 2 and\nq.owneruserid = ##askerid## and\na.owneruserid = ##answererid##",
        "CreationDate": "2016-07-12 11:25:53",
        "validated": false,
        "QueryBody_Original": "SELECT  q.id as [Post Link]\nfrom posts q join posts a on a.parentid=q.id\nwhere \nq.posttypeid = 1 and\na.posttypeid = 2 and\nq.owneruserid = ##askerid## and\na.owneruserid = ##answererid##"
    },
    {
        "QuerySetId": 511136,
        "Title": "How many downvotes did I get?",
        "Description": "The title says it all",
        "QueryBody": "DECLARE  @UserId int\nSELECT DownVotes FROM Users WHERE Id = @UserId",
        "CreationDate": "2016-07-12 18:40:26",
        "validated": false,
        "QueryBody_Original": "DECLARE  @UserId int\nSELECT DownVotes FROM Users WHERE Id = @UserId"
    },
    {
        "QuerySetId": 512103,
        "Title": "Posts recently migrated from MathOverflow to Mathematics Stack Exchange",
        "Description": null,
        "QueryBody": "SELECT  TOP ##number?50##\n  PostHistory.PostId AS [Post Link],\n  Posts.CreationDate AS 'Asked on',\n  PostHistory.CreationDate AS 'Migrated on'\nFROM PostHistory\nJOIN Posts ON PostHistory.PostId = Posts.Id\nWHERE PostHistory.PostHistoryTypeId = 35 -- Post migrated away\n  AND PostHistory.Comment LIKE '%math.stackexchange.com%'\nORDER BY PostHistory.CreationDate DESC\n\n-- number: Number of questions to show:",
        "CreationDate": "2016-07-14 20:18:06",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 512458,
        "Title": "Tags without excerpts for specific user",
        "Description": null,
        "QueryBody": "DECLARE  @User INT = ##UserId:int##\nDECLARE @Answers BIT = ##UseAnswers:int?0##\n\nSELECT T.TagName, (SELECT COUNT(*) FROM PostTags WHERE TagId = T.Id) AS Posts\nFROM Tags T\n  INNER JOIN PostTags PT ON PT.TagId = T.Id\n  INNER JOIN Posts P ON PT.PostId  = P.Id\nWHERE\n  T.ExcerptPostId IS NULL AND\n  (P.OwnerUserId = @User\n   OR @Answers != 0 AND EXISTS (SELECT * FROM Posts A WHERE \n     A.ParentId = P.Id AND A.OwnerUserId = @User))\nGROUP BY T.TagName, T.Id\nORDER BY Posts DESC",
        "CreationDate": "2018-02-03 20:15:33",
        "validated": false,
        "QueryBody_Original": "DECLARE  @User INT = ##UserId:int##\nDECLARE @Answers BIT = ##UseAnswers:int?0##\n\nSELECT T.TagName, (SELECT COUNT(*) FROM PostTags WHERE TagId = T.Id) AS Posts\nFROM Tags T\n  INNER JOIN PostTags PT ON PT.TagId = T.Id\n  INNER JOIN Posts P ON PT.PostId  = P.Id\nWHERE\n  T.ExcerptPostId IS NULL AND\n  (P.OwnerUserId = @User\n   OR @Answers != 0 AND EXISTS (SELECT * FROM Posts A WHERE \n     A.ParentId = P.Id AND A.OwnerUserId = @User))\nGROUP BY T.TagName, T.Id\nORDER BY Posts DESC"
    },
    {
        "QuerySetId": 514064,
        "Title": "How many views did the question I answered get?",
        "Description": "Finds every answer you wrote, and then looks how many views the question got. Kinda cool imo.",
        "QueryBody": "DECLARE  @UserId int = ##UserId##\n\nSELECT A.ParentId AS \"Question ID\", Q.Id AS [Post Link], Q.Tags as \"Tags\", Q.ViewCount AS \"Views\"\n    FROM Posts as A\n    INNER JOIN Posts as Q\n       On Q.Id = A.ParentId\n    WHERE A.PostTypeId = 2\n      AND A.OwnerUserId = @UserId\n    ORDER BY Q.ViewCount DESC",
        "CreationDate": "2016-07-19 01:52:51",
        "validated": false,
        "QueryBody_Original": "DECLARE  @UserId int = ##UserId##\n\nSELECT A.ParentId AS \"Question ID\", Q.Id AS [Post Link], Q.Tags as \"Tags\", Q.ViewCount AS \"Views\"\n    FROM Posts as A\n    INNER JOIN Posts as Q\n       On Q.Id = A.ParentId\n    WHERE A.PostTypeId = 2\n      AND A.OwnerUserId = @UserId\n    ORDER BY Q.ViewCount DESC"
    },
    {
        "QuerySetId": 514066,
        "Title": "How many answer views did I get in each tag?",
        "Description": "Very WIP, and will return duplicates (one view may be in both pokemon-go and ios, for example)",
        "QueryBody": "DECLARE  @UserId int = ##UserId##\n    \nSELECT (sum(q.ViewCount)) as [Total Views], count(a.Id) as \"Answer Count\"\n    FROM Posts a\n    INNER JOIN Posts q on q.Id = a.ParentId\n    WHERE a.OwnerUserId = @UserId\n    ORDER BY [Total Views] DESC",
        "CreationDate": "2017-08-27 18:13:28",
        "validated": false,
        "QueryBody_Original": "DECLARE  @UserId int = ##UserId##\n    \nSELECT (sum(q.ViewCount)) as [Total Views], count(a.Id) as \"Answer Count\"\n    FROM Posts a\n    INNER JOIN Posts q on q.Id = a.ParentId\n    WHERE a.OwnerUserId = @UserId\n    ORDER BY [Total Views] DESC"
    },
    {
        "QuerySetId": 514080,
        "Title": "How many times has a user been wrong?",
        "Description": "How bad of a user are YOU?!",
        "QueryBody": "DECLARE  @UserId int = ##UserId##\n\nSELECT COUNT(*)\n    FROM Votes v\n    INNER JOIN Posts p ON v.PostId = p.Id\n    WHERE (v.VoteTypeId = 3 \n           OR v.VoteTypeId = 4\n           OR v.VoteTypeId = 6\n           OR v.VoteTypeId = 10\n           OR v.VoteTypeId = 12\n           OR v.VoteTypeId = 15)\n      AND p.OwnerUserID = @UserId",
        "CreationDate": "2016-07-19 02:33:57",
        "validated": false,
        "QueryBody_Original": "DECLARE  @UserId int = ##UserId##\n\nSELECT COUNT(*)\n    FROM Votes v\n    INNER JOIN Posts p ON v.PostId = p.Id\n    WHERE (v.VoteTypeId = 3 \n           OR v.VoteTypeId = 4\n           OR v.VoteTypeId = 6\n           OR v.VoteTypeId = 10\n           OR v.VoteTypeId = 12\n           OR v.VoteTypeId = 15)\n      AND p.OwnerUserID = @UserId"
    },
    {
        "QuerySetId": 514800,
        "Title": "Find Answer by Text and UserId",
        "Description": null,
        "QueryBody": "SELECT  * FROM Posts where\n  OwnerUserId = ##UserId## AND\n  ParentId > 0 AND\n  Body LIKE '%##Text##%'",
        "CreationDate": "2016-07-20 12:13:19",
        "validated": false,
        "QueryBody_Original": "SELECT  * FROM Posts where\n  OwnerUserId = ##UserId## AND\n  ParentId > 0 AND\n  Body LIKE '%##Text##%'"
    },
    {
        "QuerySetId": 515428,
        "Title": "Best Algerian stack overflow users",
        "Description": null,
        "QueryBody": "SELECT  TOP ##Count:int?2000##\n        ROW_NUMBER() OVER(ORDER BY Reputation DESC) AS [#],\n        Id AS [User Link],\n        Reputation,\n        -- Id AS ID,\n        Age,\n        Location,\n        WebsiteUrl as Wesbite,\n        LastAccessDate AS Seen,\n        -- Views,\n        -- UpVotes,\n        -- DownVotes,\n        CreationDate   \n        \nFROM Users \nWHERE \n        Reputation >= ##MinimalReputation:int?1## \n\n        AND (\n               UPPER(Location) LIKE UPPER('%Algeria%')\n               OR UPPER(Location) LIKE UPPER('%Algerie%')\n               OR UPPER(Location) LIKE UPPER('%Algiers%')\n               OR UPPER(Location) LIKE UPPER('DZ')\n               OR UPPER(Location) LIKE UPPER('%\u062c\u0632\u0627\u0626\u0631%')\n               )  \n             \nORDER BY Reputation DESC",
        "CreationDate": "2016-07-21 13:50:52",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 516024,
        "Title": "All questions I have not voted on",
        "Description": null,
        "QueryBody": "SELECT  TOP ##HowMany?200## -- HowMany: How many questions? \"Begins with the most recent\"\nPosts.Id AS [Post Link],\nPosts.OwnerDisplayName,\nPosts.CreationDate,\nVotes.VoteTypeId,\nVotes.UserId\n\nFROM Posts\n  JOIN Votes\n    ON Votes.PostId = Posts.Id\n\n     \n WHERE\n Posts.PostTypeId = 1 -- Questions only. Use Posts.PostTypeId IN (1,2) to include answers also\n--  AND Votes.UserId IN \n--     (SELECT Users.Id FROM Users WHERE Users.DisplayName = '##Username##') -- Username: Your username\n  --AND Votes.VoteTypeId IN (2,3) -- up\/down votes\n  \n--GROUP BY Posts.Id, Posts.OwnerDisplayName, Posts.CreationDate\n\nORDER BY Posts.CreationDate DESC",
        "CreationDate": "2016-07-22 19:54:34",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 516756,
        "Title": "Algeiran top  stack users",
        "Description": null,
        "QueryBody": "SELECT  TOP ##Count:int?1000##\n        ROW_NUMBER() OVER(ORDER BY Reputation DESC) AS [#],\n        Id AS [User Link],\n        Reputation,\n        -- Id AS ID,\n        Age,\n        Location,\n        WebsiteUrl as Wesbite,\n        LastAccessDate AS Seen,\n        -- Views,\n        -- UpVotes,\n        -- DownVotes,\n        CreationDate   \n        \nFROM Users \nWHERE \n        Reputation >= ##MinimalReputation:int?10## \n\n        AND (\n               UPPER(Location) LIKE UPPER('%Algeria%')\n               OR UPPER(Location) LIKE UPPER('%Algerie%')\n               OR UPPER(Location) LIKE UPPER('%Algiers%')\n               OR UPPER(Location) LIKE UPPER('%\u062c\u0632\u0627\u0626\u0631%')\n               )  \n             \nORDER BY Reputation DESC",
        "CreationDate": "2016-07-25 18:30:43",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 517175,
        "Title": "[old] Get a candidate's answers to election questionnaire",
        "Description": "See discussion at http:\/\/meta.stackexchange.com\/q\/281666\/287315",
        "QueryBody": "DECLARE  @questionnaire_question_id int = ##QuestionnaireQuestionId##\nDECLARE @candidate_user_id int = ##CandidateUserId##\nSELECT id, link=CONCAT('http:\/\/meta.puzzling.stackexchange.com\/a\/',id)\nFROM Posts \nWHERE ParentId = @questionnaire_question_id \nAND OwnerUserId = @candidate_user_id;",
        "CreationDate": "2016-07-26 19:19:50",
        "validated": false,
        "QueryBody_Original": "DECLARE  @questionnaire_question_id int = ##QuestionnaireQuestionId##\nDECLARE @candidate_user_id int = ##CandidateUserId##\nSELECT id, link=CONCAT('http:\/\/meta.puzzling.stackexchange.com\/a\/',id)\nFROM Posts \nWHERE ParentId = @questionnaire_question_id \nAND OwnerUserId = @candidate_user_id;"
    },
    {
        "QuerySetId": 517177,
        "Title": "Get a candidate's answers to election questionnaire",
        "Description": "See discussion at http:\/\/meta.stackexchange.com\/q\/281666\/287315.  \r\nExample from there would use QuestionnaireQuestionId = 5114 (which is known at the time the election is going live, as it's linked to in the top of the election page) and CandidateUserId = 5208 (which is known at the time the candidate box is built, to generate the rest of that box's contents). ",
        "QueryBody": "DECLARE  @questionnaire_question_id int = ##QuestionnaireQuestionId##\nDECLARE @candidate_user_id int = ##CandidateUserId##\nSELECT link=CONCAT('http:\/\/meta.puzzling.stackexchange.com\/a\/',id)\nFROM Posts \nWHERE ParentId = @questionnaire_question_id \nAND OwnerUserId = @candidate_user_id;",
        "CreationDate": "2016-07-26 18:47:07",
        "validated": false,
        "QueryBody_Original": "DECLARE  @questionnaire_question_id int = ##QuestionnaireQuestionId##\nDECLARE @candidate_user_id int = ##CandidateUserId##\nSELECT link=CONCAT('http:\/\/meta.puzzling.stackexchange.com\/a\/',id)\nFROM Posts \nWHERE ParentId = @questionnaire_question_id \nAND OwnerUserId = @candidate_user_id;"
    },
    {
        "QuerySetId": 517211,
        "Title": "Questions closed as primarily opinion-based",
        "Description": null,
        "QueryBody": "SELECT  p.ID as [Post Link] from Posts p\ninner join PostHistory ph on p.Id = ph.PostId\nwhere\n PostTypeId = 1 and\n ClosedDate is not null and\n PostHistoryTypeId = 10 and\n Comment = '105' and\n AnswerCount > 0 and\n Score >= ##MinScore:int##\norder by p.CreationDate desc",
        "CreationDate": "2016-08-08 17:42:18",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 518875,
        "Title": "Popular Questions without Nice Answers",
        "Description": "All non-CW questions with at least 1000 views but no non-CW answer scored at least 10.\r\n",
        "QueryBody": "WITH out Nice Answers\n-- All non-CW questions WITH at least 1000 views but no non-CW answer scored at least 10.\n\nSelect\n  question.Id as [Post Link],\n  question.Score,\n  max(answer.Score) as \"Top Answer\",\n  question.AnswerCount as \"Answer Count\",\n  question.ViewCount as \"View Count\"\nfrom \n  Posts as question,\n  Posts as answer\nwhere  \n  answer.CommunityOwnedDate is null and\n  question.CommunityOwnedDate is null and\n  answer.PostTypeId=2 and\n  answer.ParentId = question.Id and\n  question.ViewCount > 1000 and\n  question.ClosedDate is null\ngroup by\n  question.Id,\n  question.Score,\n  question.Title,\n  question.AnswerCount,\n  question.ViewCount\nhaving max(answer.score) < 1\norder by question.ViewCount \/ case when max(answer.score) = 0 then 0.5 else max(answer.score) end desc",
        "CreationDate": "2016-07-28 18:04:10",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 518876,
        "Title": "Tags eligible for Documentation tag",
        "Description": null,
        "QueryBody": "DECLARE  @tagname nvarchar(35) = '##TagName##';\nselect t.TagName, count(q.Id) as QuestionCount\nfrom Tags t\ninner join PostTags pt on t.Id = pt.TagId\ninner join Posts q on pt.PostId = q.Id\ngroup by t.TagName\nhaving count(q.Id) >= 500 and t.TagName like @tagname\norder by t.TagName",
        "CreationDate": "2016-07-28 18:19:15",
        "validated": false,
        "QueryBody_Original": "DECLARE  @tagname nvarchar(35) = '##TagName##';\nselect t.TagName, count(q.Id) as QuestionCount\nfrom Tags t\ninner join PostTags pt on t.Id = pt.TagId\ninner join Posts q on pt.PostId = q.Id\ngroup by t.TagName\nhaving count(q.Id) >= 500 and t.TagName like @tagname\norder by t.TagName"
    },
    {
        "QuerySetId": 519371,
        "Title": "What would my uncapped reputation be?",
        "Description": null,
        "QueryBody": "DECLARE  @UserId int = ##UserId##\n\nSELECT \n    SUM(CASE\n      WHEN VoteTypeId = 1 THEN 15 -- Accepted answer.\n      WHEN VoteTypeId = 2 AND PostTypeId = 1 THEN 5 -- Upvoted question\n      WHEN VoteTypeId = 2 AND PostTypeId = 2 THEN 10 -- Upvoted answer.\n      WHEN VoteTypeId = 3 THEN -2 -- Downvote.\n      WHEN VoteTypeId = 9 THEN BountyAmount -- Earned Bounty\nEND) AS UncappedReputation\nFROM\n    Votes\n  INNER JOIN \n    Posts ON Posts.Id = Votes.PostId\nWHERE\n    Posts.OwnerUserId = @UserId",
        "CreationDate": "2016-07-30 04:04:18",
        "validated": false,
        "QueryBody_Original": "DECLARE  @UserId int = ##UserId##\n\nSELECT \n    SUM(CASE\n      WHEN VoteTypeId = 1 THEN 15 -- Accepted answer.\n      WHEN VoteTypeId = 2 AND PostTypeId = 1 THEN 5 -- Upvoted question\n      WHEN VoteTypeId = 2 AND PostTypeId = 2 THEN 10 -- Upvoted answer.\n      WHEN VoteTypeId = 3 THEN -2 -- Downvote.\n      WHEN VoteTypeId = 9 THEN BountyAmount -- Earned Bounty\nEND) AS UncappedReputation\nFROM\n    Votes\n  INNER JOIN \n    Posts ON Posts.Id = Votes.PostId\nWHERE\n    Posts.OwnerUserId = @UserId"
    },
    {
        "QuerySetId": 520002,
        "Title": "Community Owned posts by User",
        "Description": null,
        "QueryBody": "DECLARE  @UserId int = ##UserId##\n\nSELECT --TOP 20 \n    Posts.Id as [Post Link],\n    Posts.Title,\n    Posts.AnswerCount,\n    Posts.CommunityOwnedDate\nFROM Posts\nWHERE \n    Posts.OwnerUserId = @UserId\n    AND\n    Posts.CommunityOwnedDate > 0\nORDER BY Posts.CommunityOwnedDate desc",
        "CreationDate": "2016-08-01 21:39:53",
        "validated": false,
        "QueryBody_Original": "DECLARE  @UserId int = ##UserId##\n\nSELECT --TOP 20 \n    Posts.Id as [Post Link],\n    Posts.Title,\n    Posts.AnswerCount,\n    Posts.CommunityOwnedDate\nFROM Posts\nWHERE \n    Posts.OwnerUserId = @UserId\n    AND\n    Posts.CommunityOwnedDate > 0\nORDER BY Posts.CommunityOwnedDate desc"
    },
    {
        "QuerySetId": 520338,
        "Title": "Questions I have answered with close votes",
        "Description": null,
        "QueryBody": "DECLARE  @UserId int = ##UserId##;\n\nSELECT *\nFROM posts p\nINNER JOIN posts q ON p.parentId = q.id\nINNER JOIN postFeedback cv ON q.id = cv.PostId\nWHERE p.ownerUserId = @UserId",
        "CreationDate": "2016-08-02 19:37:13",
        "validated": false,
        "QueryBody_Original": "DECLARE  @UserId int = ##UserId##;\n\nSELECT *\nFROM posts p\nINNER JOIN posts q ON p.parentId = q.id\nINNER JOIN postFeedback cv ON q.id = cv.PostId\nWHERE p.ownerUserId = @UserId"
    },
    {
        "QuerySetId": 520477,
        "Title": "Questions with answers from both specified users",
        "Description": null,
        "QueryBody": "SELECT  DISTINCT questions.id as [Post Link]\nfrom posts questions inner join\nposts answer1 on answer1.parentid = questions.id inner join\nposts answer2 on answer2.parentid = questions.id\nwhere answer1.owneruserid = ##user1## and answer2.owneruserid = ##user2##",
        "CreationDate": "2016-08-03 04:01:33",
        "validated": false,
        "QueryBody_Original": "SELECT  DISTINCT questions.id as [Post Link]\nfrom posts questions inner join\nposts answer1 on answer1.parentid = questions.id inner join\nposts answer2 on answer2.parentid = questions.id\nwhere answer1.owneruserid = ##user1## and answer2.owneruserid = ##user2##"
    },
    {
        "QuerySetId": 521107,
        "Title": "Questions that have a single tag",
        "Description": null,
        "QueryBody": "WITH  a single tag\n-- and counts them up\n\n\nWITH TagNames AS (\n  SELECT Id, TagName\n  FROM Tags\n  )\n, TagCount AS (\n  SELECT COUNT(*) AS TagN, MIN(TagId) AS TagId, PostId\n  FROM PostTags\n  GROUP BY PostId\n  )\n, SingleTagCounts AS (\n  SELECT COUNT(*) AS SingleCount, TagId\n  FROM TagCount\n  WHERE TagN = 1\n  GROUP BY TagId\n  )\nSELECT TagNames.TagName, SingleTagCounts.SingleCount, TagNames.Id\nFROM SingleTagCounts LEFT JOIN TagNames ON SingleTagCounts.TagId = TagNames.Id\nORDER BY SingleTagCounts.SingleCount DESC",
        "CreationDate": "2016-08-04 20:17:58",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 521110,
        "Title": "Questions with only a single tag",
        "Description": null,
        "QueryBody": "WITH  only a single tag\n-- Not quite sure why \n-- [SELECT * FROM Posts WHERE Tags = 'r']\n-- does not work\n\nWITH TagCount AS (\n  SELECT COUNT(*) AS TagN, MIN(TagId) AS TagId, PostId\n  FROM PostTags\n  GROUP BY PostId\n  )\n, SingleTags AS (\nSELECT TagCount.PostId, TagCount.TagId, Tags.TagName\nFROM TagCount LEFT JOIN Tags ON TagCount.TagId = Tags.Id\nWHERE TagCount.TagN = 1 AND Tags.TagName = '##TagName##'\n)\nSELECT * FROM SingleTags LEFT JOIN Posts ON SingleTags.PostId = Posts.Id\nORDER BY CreationDate DESC",
        "CreationDate": "2016-08-04 21:00:06",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 521942,
        "Title": "Is it possible to search for words\/content in an answer given to a favorite question?",
        "Description": "http:\/\/meta.stackexchange.com\/q\/246747\/158100",
        "QueryBody": "SELECT  a.id as [Post Link]\n     , a.creationdate\n     , a.score\n     , a.owneruserid as [User Link]\nfrom  posts q\ninner join posts a on a.parentid = q.id\ninner join votes v on v.postid = q.id \nwhere v.votetypeid = 5 -- favorite\nand v.userid = ##userid:int?58382##\nand a.body like '%' + ##search:string## + '%'",
        "CreationDate": "2016-08-07 20:12:33",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 521958,
        "Title": "Graph describing how does community respond to your activity",
        "Description": "http:\/\/meta.stackexchange.com\/questions\/244679\/graph-describing-how-does-community-respond-to-your-activity",
        "QueryBody": "DECLARE  @uid int = ##userid:int?607407##\n\nselect creationdate\n     , 'Posted ' + substring('QA',posttypeid,1) as event\n     , id as [Post Link]\n     , owneruserid as [User Link]\nfrom posts\nwhere owneruserid = @uid\nunion \nselect p.creationdate\n     , 'Received A'\n     , p.id\n     , p.owneruserid\nfrom posts p\ninner join posts oq on oq.id = p.parentid\nwhere oq.owneruserid = @uid\nunion \nselect c.creationdate \n     , 'Comment on ' + substring('QA',posttypeid,1)\n     , postid\n     , userid\nfrom comments c\ninner join posts p on p.id = c.postid\nwhere p.owneruserid = @uid\nunion \nselect c.creationdate\n     , 'Comment after Comment'\n     , c.postid\n     , c.userid\nfrom comments c\ninner join comments oc on oc.postid = c.postid\nwhere oc.userid = @uid\norder by 1 desc",
        "CreationDate": "2016-08-07 21:45:39",
        "validated": false,
        "QueryBody_Original": "DECLARE  @uid int = ##userid:int?607407##\n\nselect creationdate\n     , 'Posted ' + substring('QA',posttypeid,1) as event\n     , id as [Post Link]\n     , owneruserid as [User Link]\nfrom posts\nwhere owneruserid = @uid\nunion \nselect p.creationdate\n     , 'Received A'\n     , p.id\n     , p.owneruserid\nfrom posts p\ninner join posts oq on oq.id = p.parentid\nwhere oq.owneruserid = @uid\nunion \nselect c.creationdate \n     , 'Comment on ' + substring('QA',posttypeid,1)\n     , postid\n     , userid\nfrom comments c\ninner join posts p on p.id = c.postid\nwhere p.owneruserid = @uid\nunion \nselect c.creationdate\n     , 'Comment after Comment'\n     , c.postid\n     , c.userid\nfrom comments c\ninner join comments oc on oc.postid = c.postid\nwhere oc.userid = @uid\norder by 1 desc"
    },
    {
        "QuerySetId": 522505,
        "Title": "Top 400 by average daily reputation",
        "Description": "Lists the top 400 users ordered by the average reputation gained per day (total reputation divided by days of membership).",
        "QueryBody": "DECLARE  @today date\nSELECT @today = GetDate()\n\nSELECT TOP 400\n  RANK() OVER(ORDER BY Reputation \/ DATEDIFF(day, CreationDate, @today) DESC) AS Rank,\n  Id AS [User Link],\n  Reputation \/ DATEDIFF(day, CreationDate, @today) AS DailyReputation\nFROM\n  Users\nWHERE\n  Reputation > 5000\nORDER BY \n  DailyReputation DESC",
        "CreationDate": "2017-11-08 03:31:15",
        "validated": false,
        "QueryBody_Original": "DECLARE  @today date\nSELECT @today = GetDate()\n\nSELECT TOP 400\n  RANK() OVER(ORDER BY Reputation \/ DATEDIFF(day, CreationDate, @today) DESC) AS Rank,\n  Id AS [User Link],\n  Reputation \/ DATEDIFF(day, CreationDate, @today) AS DailyReputation\nFROM\n  Users\nWHERE\n  Reputation > 5000\nORDER BY \n  DailyReputation DESC"
    },
    {
        "QuerySetId": 522626,
        "Title": "Questions that may need protection",
        "Description": "Finds the 20 question between 1 and 30 days old that have the most answers containing \"thank\" or \"thx\" from users with less than 10 reputation.",
        "QueryBody": "DECLARE  @Today date\nSELECT @Today = GetDate()\n\nSELECT TOP 20\n  Answers.ParentId AS [Post Link], COUNT(Answers.Id) AS ThankYouAnswers\nFROM Posts Answers\nINNER JOIN Posts Questions ON\n  Questions.Id = Answers.ParentId AND\n  Questions.PostTypeId = 1 AND\n  Questions.DeletionDate IS NULL AND\n  Questions.ClosedDate IS NULL AND\n  Questions.CommunityOwnedDate IS NULL\nINNER JOIN Users ON\n  Answers.OwnerUserId = Users.Id AND\n  Users.Reputation < 10 \nWHERE\n  Answers.PostTypeId = 2 AND \n  Answers.DeletionDate IS NULL AND\n  Answers.CommunityOwnedDate IS NULL AND\n  Answers.CreationDate < @Today AND\n  LEN(Answers.Body) < 150 AND\n  (Answers.Body LIKE '%thank%' OR Answers.Body LIKE '%thx%')\nGROUP BY Answers.ParentId\nHAVING COUNT(Answers.Id) > 0\nORDER BY ThankYouAnswers DESC",
        "CreationDate": "2016-08-17 13:11:05",
        "validated": false,
        "QueryBody_Original": "DECLARE  @Today date\nSELECT @Today = GetDate()\n\nSELECT TOP 20\n  Answers.ParentId AS [Post Link], COUNT(Answers.Id) AS ThankYouAnswers\nFROM Posts Answers\nINNER JOIN Posts Questions ON\n  Questions.Id = Answers.ParentId AND\n  Questions.PostTypeId = 1 AND\n  Questions.DeletionDate IS NULL AND\n  Questions.ClosedDate IS NULL AND\n  Questions.CommunityOwnedDate IS NULL\nINNER JOIN Users ON\n  Answers.OwnerUserId = Users.Id AND\n  Users.Reputation < 10 \nWHERE\n  Answers.PostTypeId = 2 AND \n  Answers.DeletionDate IS NULL AND\n  Answers.CommunityOwnedDate IS NULL AND\n  Answers.CreationDate < @Today AND\n  LEN(Answers.Body) < 150 AND\n  (Answers.Body LIKE '%thank%' OR Answers.Body LIKE '%thx%')\nGROUP BY Answers.ParentId\nHAVING COUNT(Answers.Id) > 0\nORDER BY ThankYouAnswers DESC"
    },
    {
        "QuerySetId": 522684,
        "Title": "Average number of links per answer",
        "Description": null,
        "QueryBody": "DECLARE  @UserId INT = ##UserId##;\nDECLARE @LinkPattern VARCHAR(100) = 'scifi.stackexchange.com';\n\nSELECT\n  AVG(\n    CAST((len(A.Body) - len(replace(A.Body, @LinkPattern, ''))) AS float)\n      \/CAST(len(@LinkPattern) AS float)\n  ) AS [Link Average]\nFROM Posts A\nWHERE\n  A.OwnerUserId = @UserId\n  AND A.PostTypeId = 2",
        "CreationDate": "2016-09-20 02:15:51",
        "validated": false,
        "QueryBody_Original": "DECLARE  @UserId INT = ##UserId##;\nDECLARE @LinkPattern VARCHAR(100) = 'scifi.stackexchange.com';\n\nSELECT\n  AVG(\n    CAST((len(A.Body) - len(replace(A.Body, @LinkPattern, ''))) AS float)\n      \/CAST(len(@LinkPattern) AS float)\n  ) AS [Link Average]\nFROM Posts A\nWHERE\n  A.OwnerUserId = @UserId\n  AND A.PostTypeId = 2"
    },
    {
        "QuerySetId": 524420,
        "Title": "Highest voted answers with lowest content length",
        "Description": null,
        "QueryBody": "DECLARE  @BodyCount int = ##BodyCount##\nDECLARE @ScoreThreshold int = ##ScoreThreshold##\nSELECT TOP 40 Id AS [Post Link] , LEN(Body) AS contentSize , Score from Posts WHERE Score > ##ScoreThreshold## AND LEN(Body)<##BodyCount## AND PostTypeId = 2 ORDER BY Score DESC",
        "CreationDate": "2016-08-15 09:46:51",
        "validated": false,
        "QueryBody_Original": "DECLARE  @BodyCount int = ##BodyCount##\nDECLARE @ScoreThreshold int = ##ScoreThreshold##\nSELECT TOP 40 Id AS [Post Link] , LEN(Body) AS contentSize , Score from Posts WHERE Score > ##ScoreThreshold## AND LEN(Body)<##BodyCount## AND PostTypeId = 2 ORDER BY Score DESC"
    },
    {
        "QuerySetId": 524832,
        "Title": "Answers in QM tag vs QM answers with Dirac notation",
        "Description": "This is an attempt at a rough measure of a user's technical content on quantum mechanics answers. This measures a surrogate, which is the use of LaTeX \\rangle (i.e. the Dirac ket marker \u27e9) as a sign of how often the user uses that language.\r\n\r\nHowever, it doesn't really work - there's little correlation with the technical experts in the tag.",
        "QueryBody": "SELECT  \n  Users.Id AS [User Link],\n  Users.Reputation AS 'Reputation',\n  COUNT(answers.Id) AS 'In QM tag',\n  SUM(CASE WHEN answers.Body LIKE '%rangle%' THEN 1 ELSE 0 END) AS 'With rangles',\n  CONVERT( DECIMAL(6,1), 100*CAST(\n     SUM(CASE WHEN answers.Body LIKE '%rangle%' THEN 1 ELSE 0 END)\n    AS FLOAT)\/CAST(COUNT(*) AS FLOAT) ) AS 'Percentage'\nFROM Posts answers\nJOIN Posts questions ON answers.ParentId = questions.Id\nJOIN Users ON Users.Id = answers.OwnerUserId\nWHERE answers.PostTypeId = 2 --answers\n  AND questions.Tags LIKE '%<quantum-mechanics>%'\n  AND Users.Reputation > ##minRep?100##\n--minRep: Minimum user reputation:\n\nGROUP BY Users.Id, Reputation\nHAVING COUNT(answers.Id) > ##answersNo?10##\n--answersNo: Number of answers above:\n\nORDER BY 'Percentage' DESC",
        "CreationDate": "2016-08-16 02:01:55",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 525240,
        "Title": "Vote histogram on old posts",
        "Description": null,
        "QueryBody": "SELECT  \n  Votes.CreationDate,\n  SUM(CASE WHEN Posts.PostTypeId = 2 THEN 10 ELSE 5 END) AS 'Score'\nFROM Votes\nJOIN Posts on Posts.Id = Votes.PostId\nWHERE Posts.OwnerUserId = ##UserId##\n  AND Votes.VoteTypeId IN (1,2) -- Up & down votes\n  AND DATEADD(day, ##AgeDifference?30##, Posts.CreationDate) < Votes.CreationDate\nGROUP BY Votes.CreationDate\nORDER BY Votes.CreationDate DESC",
        "CreationDate": "2016-08-17 01:44:01",
        "validated": false,
        "QueryBody_Original": "SELECT  \n  Votes.CreationDate,\n  SUM(CASE WHEN Posts.PostTypeId = 2 THEN 10 ELSE 5 END) AS 'Score'\nFROM Votes\nJOIN Posts on Posts.Id = Votes.PostId\nWHERE Posts.OwnerUserId = ##UserId##\n  AND Votes.VoteTypeId IN (1,2) -- Up & down votes\n  AND DATEADD(day, ##AgeDifference?30##, Posts.CreationDate) < Votes.CreationDate\nGROUP BY Votes.CreationDate\nORDER BY Votes.CreationDate DESC"
    },
    {
        "QuerySetId": 525728,
        "Title": "Unanswered questions with high views + high votes, by tag",
        "Description": "A list of questions with a high score and low view count\r\n",
        "QueryBody": "WITH  high views + high votes, by tag\n-- Enter Query Description\nselect\n  a.Id, a.Title, a.Score, a.ViewCount, a.Tags\nfrom Posts a\nwhere id in(select parentId from Posts where OwnerUserId = 108797)\norder by ViewCount desc",
        "CreationDate": "2016-08-31 19:03:50",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 526890,
        "Title": "how to view active history for the specific day for specific tag",
        "Description": "http:\/\/meta.stackoverflow.com\/questions\/329611\/how-to-view-active-history-for-the-specific-day-for-specific-tag",
        "QueryBody": "SELECT  distinct p.id as [Post Link]\n     , case when p.posttypeid = 1 then 'Q' else 'A' end as qa\n     , p.creationdate\n     , p.score\n     , p.owneruserid as [User Link]\nfrom posts  p\ninner join posttags pt on pt.postid = coalesce(p.parentid, p.id)\ninner join tags t on t.id = pt.tagid\ninner join posthistory ph on ph.postid = p.id\nwhere t.tagname = ##tag:string##\nand ph.creationdate between ##date:string## and dateadd(d, 1, cast(##date:string## as date))",
        "CreationDate": "2016-08-20 20:11:07",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 527106,
        "Title": "Is there a way to see the what percentage you are in a particular tag?",
        "Description": "http:\/\/meta.stackexchange.com\/questions\/283693\/is-there-a-way-to-see-the-what-percentage-you-are-in-a-particular-tag",
        "QueryBody": "WITH  tagleague as \n(\n-- build score and count per user\nselect p.owneruserid\n     , sum(score) as score\n     , count(*) as posts\n     , rank() over(order by sum(score) desc) as tagrank\nfrom posts p  \ninner join posttags pt on pt.postid = coalesce(p.parentid, p.id) -- questions have tags\ninner join tags t on t.id = pt.tagid\nwhere t.tagname = ##tagname:string?java##\nand p.owneruserid is not null\nand posttypeid in (1,2) -- Q\/A \ngroup by owneruserid\n)\n\nselect owneruserid as [User Link]\n     , ( cast(tagrank as decimal) \n       \/ (select count(*) from tagleague) \n       * 100 ) as perc\n     , (select count(*) from tagleague) as total\n     , tagrank\nfrom tagleague\nwhere owneruserid = ##userid:int?1475228##  -- 22656  578411",
        "CreationDate": "2016-08-21 23:41:05",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 527178,
        "Title": "Highest 50 average answer score",
        "Description": null,
        "QueryBody": "WITH  the highest average answer score excluding\n-- community wiki \/ closed posts or users WITH less than 10 answers\n\nSELECT \n    TOP 50\n    Users.Id as [User Link],\n    Count(Posts.Id) AS Answers,\n    CAST(AVG(CAST(Score AS float)) as numeric(6,2)) AS [Average Answer Score]\nFROM\n    Posts\n  INNER JOIN\n    Users ON Users.Id = OwnerUserId\nWHERE \n    PostTypeId = 2 and CommunityOwnedDate is null and ClosedDate is null\nGROUP BY\n    Users.Id, DisplayName\nHAVING\n    Count(Posts.Id) > 20\nORDER BY\n    [Average Answer Score] DESC",
        "CreationDate": "2016-08-22 13:33:22",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 529683,
        "Title": "Number of users active last month",
        "Description": null,
        "QueryBody": "SELECT  count(*) ActiveUsersLastMonth\n\nfrom Users\n\nwhere DATEADD(month, -1, (SELECT max(LastAccessDate) from Users) ) <= LastAccessDate\n\n*\/\n\n\/*\nSELECT * from votes where VoteTypeId = 15\n*\/\n\nSELECT * from Posts where PostTypeId = 6\n\n\/*\n\nSELECT * from ReviewTasks \nwhere SuggestedEditId in (380847, 380999, 382967, 226039)\n   or CompletedByReviewTaskId in (380847, 380999, 382967, 226039)",
        "CreationDate": "2016-08-27 12:02:10",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 531294,
        "Title": "Roomba-eligible questions sans comment requirement",
        "Description": null,
        "QueryBody": "SELECT  DISTINCT COUNT(*) AS Eligible\n                  FROM Posts p\n                  WHERE p.Score = 0\n                        AND p.CreationDate < DATEADD(DAY, -365, GETDATE())\n                        AND p.AnswerCount = 0\n                        AND p.CommentCount <= 1\n                        AND p.ViewCount <= DATEDIFF(DAY, p.CreationDate, GETDATE()) * 1.5\n                        AND\n                        COALESCE(( SELECT TOP 1 ph.PostHistoryTypeId\n                                   FROM PostHistory ph\n                                   WHERE ph.PostId = p.Id\n                                         AND ph.PostHistoryTypeId IN (14, 15)\n                                   ORDER BY ph.Id DESC ), 0) <> 14",
        "CreationDate": "2016-08-31 05:05:32",
        "validated": false,
        "QueryBody_Original": "SELECT  DISTINCT COUNT(*) AS Eligible\n                  FROM Posts p\n                  WHERE p.Score = 0\n                        AND p.CreationDate < DATEADD(DAY, -365, GETDATE())\n                        AND p.AnswerCount = 0\n                        AND p.CommentCount <= 1\n                        AND p.ViewCount <= DATEDIFF(DAY, p.CreationDate, GETDATE()) * 1.5\n                        AND\n                        COALESCE(( SELECT TOP 1 ph.PostHistoryTypeId\n                                   FROM PostHistory ph\n                                   WHERE ph.PostId = p.Id\n                                         AND ph.PostHistoryTypeId IN (14, 15)\n                                   ORDER BY ph.Id DESC ), 0) <> 14"
    },
    {
        "QuerySetId": 532725,
        "Title": "Comments to unanswered unclosed questions",
        "Description": null,
        "QueryBody": "SELECT \n  Posts.Id as [Post Link],\n  Posts.CommentCount as [Comments],\n  Posts.Score as [Score],\n  Posts.CreationDate as [Asked],\n  Comments.CreationDate as [Commented],\n  Comments.Score as [Upvotes],\n  Comments.Text as [Comment]\nfrom Comments\n  join Posts on Posts.Id = Comments.PostId\nwhere Comments.UserId = ##UserId##\n  and Posts.PostTypeId = 1\n  and Posts.AnswerCount = 0\n  and Posts.ClosedDate is null",
        "CreationDate": "2017-03-25 00:47:45",
        "validated": false,
        "QueryBody_Original": "SELECT \n  Posts.Id as [Post Link],\n  Posts.CommentCount as [Comments],\n  Posts.Score as [Score],\n  Posts.CreationDate as [Asked],\n  Comments.CreationDate as [Commented],\n  Comments.Score as [Upvotes],\n  Comments.Text as [Comment]\nfrom Comments\n  join Posts on Posts.Id = Comments.PostId\nwhere Comments.UserId = ##UserId##\n  and Posts.PostTypeId = 1\n  and Posts.AnswerCount = 0\n  and Posts.ClosedDate is null"
    },
    {
        "QuerySetId": 532728,
        "Title": "Questions kept alive by your comments",
        "Description": "These questions would be automatically deleted by the RemoveAbandonedQuestions job, if they didn't have at least two comments. Some of these comments were written by you (or by the user whose user ID you've entered below, if not your own). If the feature request at http:\/\/meta.stackoverflow.com\/q\/333477 passes, these questions will be deleted. Would you like to convert any of your comments into answers before that happens?",
        "QueryBody": "SELECT \n  Posts.Id as [Post Link],\n  Posts.Score as PostScore,\n  Posts.ViewCount as PostViews,\n  Posts.CreationDate as PostDate,\n  Posts.CommentCount as PostComments\nfrom Posts\nwhere Posts.PostTypeId = 1\n  and Posts.Score = 1\n  and Posts.AnswerCount = 0\n  and Posts.CommentCount > ##commentCount:int##\n  and Posts.Tags LIKE '%<' + ##tag:string## + '>%'",
        "CreationDate": "2020-11-26 18:38:47",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 533025,
        "Title": "downvoted posts with positive PostFeedback",
        "Description": null,
        "QueryBody": "SELECT  TOP ##topn:int?200## p.Id AS [Post Link],MIN(p.PostTypeId) AS typeid,MIN(p.Score) AS Score,\nSUM(CASE f.VoteTypeId WHEN 1 THEN 1 WHEN 2 THEN -1 END) AS feedbackscore\nFROM Posts p INNER JOIN PostFeedBack f ON p.Id=f.PostId\nWHERE p.Score<=##maxscore:int?-5##\nGROUP BY p.Id\nHAVING SUM(CASE f.VoteTypeId WHEN 1 THEN 1 WHEN 2 THEN -1 END)>=##minfeedback:int?50##\nORDER BY MIN(p.Score)",
        "CreationDate": "2016-09-02 06:34:58",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 533587,
        "Title": "Get Posts and Upvotes for Last X days",
        "Description": "This query takes in a given integer X and returns all posts from the last X days as well as the votes on each of those posts.",
        "QueryBody": "DECLARE  @numDays int = ##numberOfDays##;\n\nSELECT \n  POSTS.Id AS PostID,\n  POSTS.PostTypeId,\n  POSTS.CreationDate,\n  POSTS.Score,\n  POSTS.ViewCount,\n  POSTS.Body,\n  COUNT(VOTES.Id) AS NumUpvotes\nFROM POSTS\n  LEFT JOIN VOTES ON POSTS.Id = VOTES.PostId\nWHERE \n  POSTS.CreationDate >= CURRENT_TIMESTAMP - @numDays\n  AND\n  VOTES.CreationDate >= CURRENT_TIMESTAMP - @numDays\n  AND\n  VOTES.VoteTypeId = 2 \/* upvote indicator number *\/\nGROUP BY\n  POSTS.Id,\n  POSTS.PostTypeId,\n  POSTS.CreationDate,\n  POSTS.Score,\n  POSTS.ViewCount,\n  POSTS.Body;\n\nSELECT COUNT(DISTINCT POSTS.Id) FROM POSTS\n  WHERE POSTS.CreationDate >= CURRENT_TIMESTAMP - @numDays;",
        "CreationDate": "2016-09-03 08:22:50",
        "validated": false,
        "QueryBody_Original": "DECLARE  @numDays int = ##numberOfDays##;\n\nSELECT \n  POSTS.Id AS PostID,\n  POSTS.PostTypeId,\n  POSTS.CreationDate,\n  POSTS.Score,\n  POSTS.ViewCount,\n  POSTS.Body,\n  COUNT(VOTES.Id) AS NumUpvotes\nFROM POSTS\n  LEFT JOIN VOTES ON POSTS.Id = VOTES.PostId\nWHERE \n  POSTS.CreationDate >= CURRENT_TIMESTAMP - @numDays\n  AND\n  VOTES.CreationDate >= CURRENT_TIMESTAMP - @numDays\n  AND\n  VOTES.VoteTypeId = 2 \/* upvote indicator number *\/\nGROUP BY\n  POSTS.Id,\n  POSTS.PostTypeId,\n  POSTS.CreationDate,\n  POSTS.Score,\n  POSTS.ViewCount,\n  POSTS.Body;\n\nSELECT COUNT(DISTINCT POSTS.Id) FROM POSTS\n  WHERE POSTS.CreationDate >= CURRENT_TIMESTAMP - @numDays;"
    },
    {
        "QuerySetId": 533887,
        "Title": "Posts From Between X And Y Days Ago",
        "Description": "Query written for the StackExchange Data Explorer that grabs posts from the last X and Y days ago, reputation of posting users, and the upvotes on given posts.",
        "QueryBody": "DECLARE  @numDaysEnd int = ##numberOfDaysEndLimit##;\nDECLARE @numDaysBegin int = ##numberOfDaysBeginLimit##;\n\n\/* then perform selection *\/\n\nSELECT \n  \/* get post info *\/\n  POSTS.Id AS PostID,\n  POSTS.PostTypeId,\n  POSTS.CreationDate,\n  POSTS.Score,\n  POSTS.ViewCount,\n  POSTS.Body,\n  POSTS.OwnerUserId,\n  \/* get user reputation for filtration *\/\n  USERS.Reputation,\n  \/* then get vote info *\/\n  VOTES.Id as upvoteID,\n  VOTES.CreationDate as voteDate,\n  VOTES.VoteTypeId as voteTypeID\nFROM POSTS\n  LEFT JOIN VOTES ON POSTS.Id = VOTES.PostId\n  LEFT JOIN USERS ON POSTS.OwnerUserId = USERS.Id\nWHERE \n  POSTS.CreationDate >= CURRENT_TIMESTAMP - @numDaysBegin\nAND\n  POSTS.CreationDate <= CURRENT_TIMESTAMP - @numDaysEnd;",
        "CreationDate": "2016-09-04 01:10:50",
        "validated": false,
        "QueryBody_Original": "DECLARE  @numDaysEnd int = ##numberOfDaysEndLimit##;\nDECLARE @numDaysBegin int = ##numberOfDaysBeginLimit##;\n\n\/* then perform selection *\/\n\nSELECT \n  \/* get post info *\/\n  POSTS.Id AS PostID,\n  POSTS.PostTypeId,\n  POSTS.CreationDate,\n  POSTS.Score,\n  POSTS.ViewCount,\n  POSTS.Body,\n  POSTS.OwnerUserId,\n  \/* get user reputation for filtration *\/\n  USERS.Reputation,\n  \/* then get vote info *\/\n  VOTES.Id as upvoteID,\n  VOTES.CreationDate as voteDate,\n  VOTES.VoteTypeId as voteTypeID\nFROM POSTS\n  LEFT JOIN VOTES ON POSTS.Id = VOTES.PostId\n  LEFT JOIN USERS ON POSTS.OwnerUserId = USERS.Id\nWHERE \n  POSTS.CreationDate >= CURRENT_TIMESTAMP - @numDaysBegin\nAND\n  POSTS.CreationDate <= CURRENT_TIMESTAMP - @numDaysEnd;"
    },
    {
        "QuerySetId": 534289,
        "Title": "Java Questions, Answers, Comments, SuggestedEdits and Votes - answered questions only",
        "Description": null,
        "QueryBody": "SELECT  questions that are answered\nSELECT Id as doc_id,\n  Case When ParentId IS NULL Then '-1' Else ParentId End as doc_parent_id,\n  'q' as doc_string_identifier,\n  Body as doc_words,\n  Score as score,\n  ViewCount as view_count,\n  AnswerCount as answer_count,\n  CommentCount as comment_count,\n  CreationDate as creation_date\nFrom Posts\nwhere \n  CreationDate > Convert(datetime, '20160101') \n  AND CreationDate < Convert(datetime, '20160201')\n  AND Tags Like '%<java>%'\n  AND PostTypeId = 1\n  AND AcceptedAnswerId IS NOT NULL",
        "CreationDate": "2016-09-05 09:34:28",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 536683,
        "Title": "Find 6 month old questions",
        "Description": null,
        "QueryBody": "WITH  MidResults AS (\nSELECT Id,\nOwnerUserId,\nCreationDate,\nScore,\nClosedDate,\nLastActivityDate,\nAnswerCount,\nROW_NUMBER() OVER(PARTITION BY OwnerUserId\nORDER BY CreationDate ASC) AS rank\nFROM Posts\nWHERE Posts.PostTypeId = 1 -- questions\n)\nSELECT TOP ##number?200##\nId AS [Post Link],\nScore,\nOwnerUserId AS [User Link],\nAnswerCount [Nbe Answers],\nCreationDate [Creation Date],\ncast( DATEADD(DAY, 1-datepart(day, CreationDate), CreationDate) as Date) As CreationMonth,\nLastActivityDate [Last Activity Date]\nFROM MidResults\nWHERE MidResults.rank = 1\nand LastActivityDate < DATEADD(month, -6, GETDATE())\nand ClosedDate IS NULL\nORDER BY CreationMonth DESC, AnswerCount DESC",
        "CreationDate": "2016-09-09 12:59:46",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 538500,
        "Title": "Compare monthly questions between two tags",
        "Description": null,
        "QueryBody": "SELECT  \n DATEFROMPARTS(YEAR(p.CreationDate), MONTH(p.CreationDate), 01) [MonthStart]\n  , COUNT(p.Id) [totalPosts]\n  INTO #tag1\nFROM Posts p\nJOIN PostTags pt ON p.Id = pt.PostId\nJOIN Tags t ON pt.TagId = t.Id\nWHERE t.TagName IN ('##Tag1##')\nGROUP BY MONTH(p.CreationDate), YEAR(p.CreationDate)\nORDER BY YEAR(p.CreationDate), MONTH(p.CreationDate)\n\nSELECT \n DATEFROMPARTS(YEAR(p.CreationDate), MONTH(p.CreationDate), 01) [MonthStart]\n  , COUNT(p.Id) [totalPosts]\n  INTO #tag2\nFROM Posts p\nJOIN PostTags pt ON p.Id = pt.PostId\nJOIN Tags t ON pt.TagId = t.Id\nWHERE t.TagName IN ('##Tag2##')\nGROUP BY MONTH(p.CreationDate), YEAR(p.CreationDate)\nORDER BY YEAR(p.CreationDate), MONTH(p.CreationDate)\n\n\nSELECT #tag2.MonthStart, #tag2.totalPosts\nFROM #tag2\nJOIN #tag1 on #tag1.MonthStart = #tag2.MonthStart",
        "CreationDate": "2016-09-13 01:18:06",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 538618,
        "Title": "Azure-DevOps tag usage over time",
        "Description": null,
        "QueryBody": "SELECT \n  CONVERT(date, CreationDate) AS [Date Posted],\n  ISNULL(COUNT(*), 0) AS [Questions Asked]\nFROM Posts\nWHERE\n  PostTypeId = 1\n  AND CHARINDEX(##TagName:string?azure-devops##, Tags) > 0\nGROUP BY CONVERT(date, CreationDate)\nORDER BY CONVERT(date, CreationDate)",
        "CreationDate": "2019-09-09 19:48:04",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 539456,
        "Title": "Most-loved askers (least downvotes on questions as a percentage of total reputation)",
        "Description": null,
        "QueryBody": "SELECT  TOP 200\n Posts.OwnerUserId AS [User Link],\n Users.Reputation,\n sum(CASE WHEN Votes.VoteTypeId = 3 THEN 1 ELSE 0 END) AS [Downvotes For This User's Posts],\n FORMAT(sum(CASE WHEN Votes.VoteTypeId = 3 THEN 1 ELSE 0 END) * 100.0 \/ Users.Reputation, '##0.###', 'en-us') AS [Downvotes As Percentage Of Reputation],\n COUNT(Posts.Id) AS Questions\n \nFROM\n\n Posts\n     JOIN Votes ON Votes.PostId = Posts.Id AND Posts.PostTypeId = 1\n     JOIN Users ON Users.Id = Posts.OwnerUserId\n \nWHERE \n   Users.Reputation >= ##MinimumReputation?4000##\n\nGROUP BY Posts.OwnerUserId, Users.Reputation\n\nHAVING sum(CASE WHEN Votes.VoteTypeId = 3 THEN 1 ELSE 0 END) >= ##MinimumDownVotes?0##\n AND COUNT(Users.Id) >= ##MinimumQuestions?5##\n \nORDER BY [Downvotes As Percentage Of Reputation] ASC, Users.Reputation DESC",
        "CreationDate": "2016-09-14 23:26:03",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 539683,
        "Title": "Comments that start with +1 or -1 (most recent)",
        "Description": null,
        "QueryBody": "SELECT  TOP 5000\n  Comments.Id AS [Comment Link],\n  Comments.Score AS [Comment Score],\n  Posts.Score AS [Post Score],\n  Comments.CreationDate AS [Date],\n  Posts.OwnerUserId\nFROM Comments\nJOIN Posts ON Posts.Id=Comments.PostId\nWHERE Text LIKE '[-+]1%'\n  AND OwnerUserId=##User##\nORDER BY Posts.Score DESC",
        "CreationDate": "2016-09-15 08:17:38",
        "validated": false,
        "QueryBody_Original": "SELECT  TOP 5000\n  Comments.Id AS [Comment Link],\n  Comments.Score AS [Comment Score],\n  Posts.Score AS [Post Score],\n  Comments.CreationDate AS [Date],\n  Posts.OwnerUserId\nFROM Comments\nJOIN Posts ON Posts.Id=Comments.PostId\nWHERE Text LIKE '[-+]1%'\n  AND OwnerUserId=##User##\nORDER BY Posts.Score DESC"
    },
    {
        "QuerySetId": 540930,
        "Title": "Dump Project Management Stack Exchange (PMSE) Posts",
        "Description": null,
        "QueryBody": "SELECT  * FROM Posts\nWHERE OwnerUserId = ##UserId##",
        "CreationDate": "2017-05-03 10:34:07",
        "validated": false,
        "QueryBody_Original": "SELECT  * FROM Posts\nWHERE OwnerUserId = ##UserId##"
    },
    {
        "QuerySetId": 541234,
        "Title": "Answers with the highest score",
        "Description": null,
        "QueryBody": "SELECT  \nr.Score AS rRep\n,q.Score AS qRep\n\/*,q.id AS qId\n,r.id AS rId*\/\n,'site:\/\/a\/' + CAST(r.id AS NVARCHAR) + '|' + q.Title AS link\n,q.Tags AS tags\n,COALESCE(r.LastEditDate, r.CreationDate) AS rDate\nFROM posts AS r, posts AS q\nWHERE q.Id = r.ParentId AND r.PostTypeId = 2 \nAND r.Score >= ##limit?160##\nORDER BY rRep DESC;",
        "CreationDate": "2018-07-05 01:44:59",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 541330,
        "Title": "Highest voted answers (obsolete query)",
        "Description": null,
        "QueryBody": "WITH -the-highest-score\" instead\nSELECT \nr.Score AS rRep\n,q.Score AS qRep\n\/*,q.id AS qId\n,r.id AS rId*\/\n,'http:\/\/earthscience.stackexchange.com\/a\/' + CAST(r.id AS NVARCHAR) + '\/5917|' + q.Title AS link\n,q.Tags AS tags\n,r.LastEditDate AS rDate\nFROM posts AS r, posts AS q\nWHERE q.Id = r.ParentId AND r.PostTypeId = 2 \nAND r.Score >= 30 \nORDER BY rRep DESC;",
        "CreationDate": "2020-10-02 15:08:10",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 541780,
        "Title": "Linkyness Leaderboard (including external links)",
        "Description": null,
        "QueryBody": "DECLARE  @LinkPattern VARCHAR(100) = 'a href=\"';\n\nSELECT\n  RANK() OVER(ORDER BY AVG(\n    CAST((len(A.Body) - len(replace(A.Body, @LinkPattern, ''))) AS float)\n      \/CAST(len(@LinkPattern) AS float)\n  ) DESC) AS Ranking,\n  AVG(\n    CAST((len(A.Body) - len(replace(A.Body, @LinkPattern, ''))) AS float)\n      \/CAST(len(@LinkPattern) AS float)\n  ) AS [Link Average],\n  U.Id AS [User Link]\nFROM Posts A\n  INNER JOIN Users U\n    ON A.OwnerUserId = U.Id\nWHERE A.PostTypeId = 2\nGROUP BY U.Id\nORDER BY AVG(\n    CAST((len(A.Body) - len(replace(A.Body, @LinkPattern, ''))) AS float)\n      \/CAST(len(@LinkPattern) AS float)\n  ) DESC",
        "CreationDate": "2016-09-20 02:22:01",
        "validated": false,
        "QueryBody_Original": "DECLARE  @LinkPattern VARCHAR(100) = 'a href=\"';\n\nSELECT\n  RANK() OVER(ORDER BY AVG(\n    CAST((len(A.Body) - len(replace(A.Body, @LinkPattern, ''))) AS float)\n      \/CAST(len(@LinkPattern) AS float)\n  ) DESC) AS Ranking,\n  AVG(\n    CAST((len(A.Body) - len(replace(A.Body, @LinkPattern, ''))) AS float)\n      \/CAST(len(@LinkPattern) AS float)\n  ) AS [Link Average],\n  U.Id AS [User Link]\nFROM Posts A\n  INNER JOIN Users U\n    ON A.OwnerUserId = U.Id\nWHERE A.PostTypeId = 2\nGROUP BY U.Id\nORDER BY AVG(\n    CAST((len(A.Body) - len(replace(A.Body, @LinkPattern, ''))) AS float)\n      \/CAST(len(@LinkPattern) AS float)\n  ) DESC"
    },
    {
        "QuerySetId": 542488,
        "Title": "SQL Server Questions With a Negative Score",
        "Description": null,
        "QueryBody": "SELECT  TOP 10 u.DisplayName, p.Title, p.Score\nFROM Posts AS p\n JOIN Users AS u\n  ON u.Id = p.OwnerUserId\nJOIN PostTags AS pt\n  ON p.Id = pt.PostId\nJOIN Tags AS t\n  ON pt.TagId = t.Id\nWHERE p.Score < 0\n  AND p.CreationDate >= '2015-01-01'\n  AND t.TagName LIKE '%sql-server%'\nORDER BY p.Score\nOPTION(RECOMPILE)",
        "CreationDate": "2016-09-21 16:53:36",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 542820,
        "Title": "Count of Posts by Date",
        "Description": null,
        "QueryBody": "WITH  a graph--\n\nSELECT cast(CreationDate as date), COUNT(Id) AS Count\nFROM Posts\nWHERE CreationDate > getutcdate()-180\nGROUP BY cast(CreationDate as date)\nORDER BY cast(CreationDate as date)",
        "CreationDate": "2016-09-22 20:57:59",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 542884,
        "Title": "Answer breakdown by which side of score = 10",
        "Description": null,
        "QueryBody": "SELECT    COUNT(1) AS [Total],\n         COUNT(CASE WHEN [Score] >= 10 THEN 1 ELSE NULL END) AS [EGT10],\n         COUNT(CASE WHEN [Score]  < 10 THEN 1 ELSE NULL END) AS [LG10]\nFROM     [Posts]\nWHERE    [PostTypeId] = 2\nAND      [DeletionDate] IS NULL\nAND      [OwnerUserId] = ##UserId##\n;",
        "CreationDate": "2016-09-22 12:26:21",
        "validated": false,
        "QueryBody_Original": "SELECT    COUNT(1) AS [Total],\n         COUNT(CASE WHEN [Score] >= 10 THEN 1 ELSE NULL END) AS [EGT10],\n         COUNT(CASE WHEN [Score]  < 10 THEN 1 ELSE NULL END) AS [LG10]\nFROM     [Posts]\nWHERE    [PostTypeId] = 2\nAND      [DeletionDate] IS NULL\nAND      [OwnerUserId] = ##UserId##\n;"
    },
    {
        "QuerySetId": 543039,
        "Title": "Users who put locations vs. users who did not",
        "Description": null,
        "QueryBody": "SELECT  Count(Id) --As [User Link]\nFrom Users\nWhere Location Is Null Or Location=''\n--Like '%Outer Space%'\n\nSELECT Count(Id)\nFrom Users\nWhere Location Is Not Null And Len(Location)>3\n\nSELECT Count(Id)\nFrom Users\nWhere CharIndex(' ', Location)>0",
        "CreationDate": "2016-09-22 18:49:35",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 543042,
        "Title": "Top 10 tags with top 5 tags",
        "Description": null,
        "QueryBody": "WITH  it--\n\nSELECT TOP 5 Tags\nFROM Posts\nWHERE Tags IN\n  (SELECT Top 10 Tags\n   FROM Tags\n   ORDER BY Count desc)",
        "CreationDate": "2016-09-22 20:37:25",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 543267,
        "Title": "Users activity and Zipf's law",
        "Description": null,
        "QueryBody": "SELECT  the percentage of people to get the satistics:\n-- pick a number between 1 and 100\n\n\nSELECT\n  count(*) AS [Number of active users],\n  sum(a.Counts) AS [Number of Question and Answers],\n  100.0*cast(sum(a.Counts) as real) \/ (SELECT count(*) FROM Posts p WHERE p.PostTypeId = 1 or p.PostTypeId = 2) t\nFROM\n  (\n  SELECT TOP (##percentage##) PERCENT\n    u.Id AS [User Link], \n    count(*) AS Counts \n  FROM\n    Users u\n    inner join Posts p on p.OwnerUserId = u.Id\n    WHERE p.PostTypeId = 1 or p.PostTypeId = 2\n    GROUP BY u.Id\n    ORDER BY Counts DESC\n  ) a",
        "CreationDate": "2016-09-23 00:50:04",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 544089,
        "Title": "\u041b\u0443\u0447\u0448\u0438\u0435 \u0443\u0447\u0430\u0441\u0442\u043d\u0438\u043a\u0438 \u0437\u0430 \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0438\u0435 N \u0434\u043d\u0435\u0439",
        "Description": null,
        "QueryBody": "SELECT  top ##MaxUsers:int?120##\n       owneruserid as [User Link]\n     , row_number() over(order by rep desc) as ranking\n     , rep\nfrom (\n  SELECT p.owneruserid\n        ,sum(case v.votetypeid when 2 then -- upvote\n               case p.posttypeid when 1 then 5 -- Q\n                                 else 10 end -- A\n             else 0 end) \n       + sum(case v.votetypeid when 3 then -2 else 0 end) -- downvote\n       + sum(case v.votetypeid when 1 then 15 else 0 end) as rep -- accept\n  from posts p \n  inner join votes v on v.postid = p.id\n  inner join users u on u.id = p.owneruserid\n  where v.creationdate > cast(getdate()-##NumberOfDays:int?90## as datetime)\n  and   v.votetypeid in (1,2,3)\n  and p.owneruserid is not null\n  group by p.owneruserid \n) as rawdata\norder by ranking",
        "CreationDate": "2016-09-25 01:47:49",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 544943,
        "Title": "Overall Closed Status of my Questions",
        "Description": "What percentage of my questions are closed?",
        "QueryBody": "SELECT \n  count(Id) AS 'All',\n  sum(CASE WHEN ClosedDate IS NULL THEN 1 ELSE 0 END) AS 'Open',\n  sum(CASE WHEN ClosedDate IS NOT NULL THEN 1 ELSE 0 END) AS 'Closed',\n  sum(CASE WHEN ClosedDate IS NULL THEN 1 ELSE 0 END) \/ CAST(count(Id) AS float) AS 'PercentOpen'\nFROM Posts\nWHERE PostTypeId = 1\nAND OwnerUserId = ##UserId##;",
        "CreationDate": "2016-09-26 22:36:20",
        "validated": false,
        "QueryBody_Original": "SELECT \n  count(Id) AS 'All',\n  sum(CASE WHEN ClosedDate IS NULL THEN 1 ELSE 0 END) AS 'Open',\n  sum(CASE WHEN ClosedDate IS NOT NULL THEN 1 ELSE 0 END) AS 'Closed',\n  sum(CASE WHEN ClosedDate IS NULL THEN 1 ELSE 0 END) \/ CAST(count(Id) AS float) AS 'PercentOpen'\nFROM Posts\nWHERE PostTypeId = 1\nAND OwnerUserId = ##UserId##;"
    },
    {
        "QuerySetId": 544950,
        "Title": "Average Score of my Questions",
        "Description": null,
        "QueryBody": "SELECT \nAVG(CAST(Score AS Float)) AS 'AverageScore'\nFROM Posts\nWHERE PostTypeId = 1\nAND OwnerUserId = ##UserId##;",
        "CreationDate": "2016-09-26 22:41:25",
        "validated": false,
        "QueryBody_Original": "SELECT \nAVG(CAST(Score AS Float)) AS 'AverageScore'\nFROM Posts\nWHERE PostTypeId = 1\nAND OwnerUserId = ##UserId##;"
    },
    {
        "QuerySetId": 547647,
        "Title": "How many answers I posted by Year",
        "Description": null,
        "QueryBody": "DECLARE  @UserId int = ##UserId##\n\nSELECT --TOP 20 \n    Year(a.CreationDate) AS [Year],\n    Month(a.CreationDate) as [Month],\n    COUNT(*) AS [Number of Answers] \nFROM Posts a\nINNER JOIN\n    Users ON Users.Id = a.OwnerUserId\nWHERE \n    a.OwnerUserId = @UserId\n    GROUP BY Year(a.CreationDate),  \n    Month(a.CreationDate) \n    ORDER BY Year(a.CreationDate) DESC,\n    Month(a.CreationDate) DESC",
        "CreationDate": "2018-05-25 20:13:56",
        "validated": false,
        "QueryBody_Original": "DECLARE  @UserId int = ##UserId##\n\nSELECT --TOP 20 \n    Year(a.CreationDate) AS [Year],\n    Month(a.CreationDate) as [Month],\n    COUNT(*) AS [Number of Answers] \nFROM Posts a\nINNER JOIN\n    Users ON Users.Id = a.OwnerUserId\nWHERE \n    a.OwnerUserId = @UserId\n    GROUP BY Year(a.CreationDate),  \n    Month(a.CreationDate) \n    ORDER BY Year(a.CreationDate) DESC,\n    Month(a.CreationDate) DESC"
    },
    {
        "QuerySetId": 548134,
        "Title": "Per hour for specific user",
        "Description": null,
        "QueryBody": "DECLARE  @UserId int = ##UserId##\n\nselect TOP 10000 \nCAST(p.CreationDate as Date) as PostDate,DATEPART(hour,p.CreationDate), \ncount(p.Id) as Posts\nfrom posts p, users u\n  where p.OwnerUserId = u.Id AND u.Id=@UserId\n  And p.PostTypeId=2\n  group by CAST(p.CreationDate as Date),DATEPART(hour,p.CreationDate)\norder by count(p.Id) DESC, PostDate asc",
        "CreationDate": "2016-10-02 12:09:19",
        "validated": false,
        "QueryBody_Original": "DECLARE  @UserId int = ##UserId##\n\nselect TOP 10000 \nCAST(p.CreationDate as Date) as PostDate,DATEPART(hour,p.CreationDate), \ncount(p.Id) as Posts\nfrom posts p, users u\n  where p.OwnerUserId = u.Id AND u.Id=@UserId\n  And p.PostTypeId=2\n  group by CAST(p.CreationDate as Date),DATEPART(hour,p.CreationDate)\norder by count(p.Id) DESC, PostDate asc"
    },
    {
        "QuerySetId": 548193,
        "Title": "Feature request: download all favorite questions button",
        "Description": "http:\/\/meta.stackoverflow.com\/questions\/335565\/feature-request-download-all-favorite-questions-button\/335620#335620",
        "QueryBody": "SELECT  case when posttypeid = 1 then '<hr>' else '' end \n     + '<div>'\n     + '<div>' \n     + title\n     + '<\/div>'\n     + '<\/div>' as html\nfrom\n(\nSELECT q.title\n     , '\/\/stackoverflow.com\/q\/' \n     + cast(p.id as nvarchar) as anchor\n     , case when p.posttypeid = 1 \n       then q.title\n       else 'answer' \n       end\n       as anchortext\n     , p.body\n     , q.tags\n     , q.score\n     , p.posttypeid \n     , coalesce(p.parentid, p.id) as grp\nfrom posts p\ninner join posts q on q.id = coalesce(p.parentid, p.id)\ninner join votes v on v.postid = q.id\nwhere v.votetypeid = 5 -- favorite\nand v.userid = ##userid?5175709##\n) as favposts\norder by grp\n       , posttypeid \n       , score desc",
        "CreationDate": "2016-10-02 14:01:13",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 549388,
        "Title": "1. \u0423 \u043a\u0430\u043a\u043e\u0433\u043e \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0430 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439 \u043d\u0435 \u0443\u043a\u0430\u0437\u0430\u043d \u0432\u043e\u0437\u0440\u0430\u0441\u0442?",
        "Description": null,
        "QueryBody": "SELECT  COUNT(Location) FROM Users WHERE Location LIKE '%Russia%' \n(SELECT * FROM Posts WHERE Id = 1);",
        "CreationDate": "2016-10-03 20:03:16",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 550260,
        "Title": "Get all Post ids by tag name",
        "Description": null,
        "QueryBody": "DECLARE  @t_id int = (SELECT Id FROM Tags WHERE TagName = ##tagName:string##)\n\nSELECT \n  PostID \nFROM \n  PostTags pt\nWHERE \n  pt.tagid = @t_id",
        "CreationDate": "2016-10-04 16:01:12",
        "validated": false,
        "QueryBody_Original": "DECLARE  @t_id int = (SELECT Id FROM Tags WHERE TagName = ##tagName:string##)\n\nSELECT \n  PostID \nFROM \n  PostTags pt\nWHERE \n  pt.tagid = @t_id"
    },
    {
        "QuerySetId": 550273,
        "Title": "Get all tags, which appear in posts with a specific tag",
        "Description": null,
        "QueryBody": "DECLARE  @t_id int = (SELECT Id FROM Tags WHERE TagName = ##tagName:string##);\n\nwith TaggedPosts (PostId) as (\nSELECT \n  PostID \nFROM \n  PostTags pt\nWHERE \npt.tagid = @t_id)\n\nSELECT DISTINCT\n  TagId\nFROM \n  TaggedPosts tpos\n  JOIN\n  PostTags pt\n  ON pt.PostId = tpos.PostId\nWHERE\n  pt.TagId != @t_id",
        "CreationDate": "2016-10-04 17:31:45",
        "validated": false,
        "QueryBody_Original": "DECLARE  @t_id int = (SELECT Id FROM Tags WHERE TagName = ##tagName:string##);\n\nwith TaggedPosts (PostId) as (\nSELECT \n  PostID \nFROM \n  PostTags pt\nWHERE \npt.tagid = @t_id)\n\nSELECT DISTINCT\n  TagId\nFROM \n  TaggedPosts tpos\n  JOIN\n  PostTags pt\n  ON pt.PostId = tpos.PostId\nWHERE\n  pt.TagId != @t_id"
    },
    {
        "QuerySetId": 550335,
        "Title": "Build a small adjacency matrix, seeded from one tag",
        "Description": null,
        "QueryBody": "DECLARE  @t_id int = (SELECT Id FROM Tags WHERE TagName = ##tagName:string##);\n\nWITH\nTaggedPosts (PostId) as \n(\nSELECT \n  PostID \nFROM \n  PostTags pt\nWHERE \npt.tagid = @t_id\n),\nDistTags (TagId) as\n(\nSELECT DISTINCT\n  TagId\nFROM \n  TaggedPosts tpos\n  JOIN\n  PostTags pt\n  ON pt.PostId = tpos.PostId\nWHERE\n  pt.TagId != @t_id\n),\nPostTagsProject (PostId, TagId) as\n(\nSELECT \n  pt.PostId, pt.TagId\nFROM \n  PostTags pt\n  JOIN\n  DistTags dt\n  ON dt.TagId = pt.TagId\n)\nSELECT\n  count(first_half.PostId) as cnt, \n  first_half.TagId as Tag1, \n  second_half.TagId as Tag2\nFROM \n  PostTagsProject first_half\n  JOIN\n  PostTagsProject second_half\n  ON first_half.PostId = second_half.PostId\nGROUP BY first_half.TagId, second_half.TagId\nORDER BY first_half.TagID ASC, second_half.TagId ASC",
        "CreationDate": "2016-10-04 18:38:45",
        "validated": false,
        "QueryBody_Original": "DECLARE  @t_id int = (SELECT Id FROM Tags WHERE TagName = ##tagName:string##);\n\nWITH\nTaggedPosts (PostId) as \n(\nSELECT \n  PostID \nFROM \n  PostTags pt\nWHERE \npt.tagid = @t_id\n),\nDistTags (TagId) as\n(\nSELECT DISTINCT\n  TagId\nFROM \n  TaggedPosts tpos\n  JOIN\n  PostTags pt\n  ON pt.PostId = tpos.PostId\nWHERE\n  pt.TagId != @t_id\n),\nPostTagsProject (PostId, TagId) as\n(\nSELECT \n  pt.PostId, pt.TagId\nFROM \n  PostTags pt\n  JOIN\n  DistTags dt\n  ON dt.TagId = pt.TagId\n)\nSELECT\n  count(first_half.PostId) as cnt, \n  first_half.TagId as Tag1, \n  second_half.TagId as Tag2\nFROM \n  PostTagsProject first_half\n  JOIN\n  PostTagsProject second_half\n  ON first_half.PostId = second_half.PostId\nGROUP BY first_half.TagId, second_half.TagId\nORDER BY first_half.TagID ASC, second_half.TagId ASC"
    },
    {
        "QuerySetId": 551315,
        "Title": "Preguntas m\u00e1s respondidas por mes",
        "Description": "Preguntas m\u00e1s respondidas.",
        "QueryBody": "DECLARE  @anio int = ##Anno?2016##;\nDECLARE @mes int =   ##Mes?9##;\n\n\/*\nIF @anio=0 @anio=format(CURRENT_TIMESTAMP,'yyyy');\nIF  @mes=0 @mes=format(CURRENT_TIMESTAMP,'MM');\n*\/\n\nWITH Answers AS (\n  SELECT ParentId AS Id, max(Score) AS Score\n  FROM Posts\n  WHERE PostTypeId = 2\n  GROUP BY ParentId\n)\n\nSELECT TOP 100\n  format(Q.CreationDate,'dd\/MM\/yy') \"Creaci\u00f3n\",\n  CONCAT('site:\/\/q\/',Q.Id,'|',Q.Title) Pregunta,\n  Q.AnswerCount \"Cantidad de Respuestas\",\n  Q.Score \"Puntaje de Pregunta\",\n  A.Score \"Puntaje de Mejor Respuesta\"\n\nFROM Posts Q\nLEFT OUTER JOIN Answers A\n  ON Q.Id = A.Id\nWHERE\n   Q.CreationDate >= CONCAT(@anio,'\/',@mes,'\/1')\n  and Q.CreationDate <  CONCAT(@anio,'\/',@mes+1,'\/1')\nORDER BY\n  3 DESC,\n  5 DESC,\n  4 DESC,\n  1 DESC,\n  Q.Title ASC\n;",
        "CreationDate": "2016-10-06 18:36:10",
        "validated": false,
        "QueryBody_Original": "DECLARE  @anio int = ##Anno?2016##;\nDECLARE @mes int =   ##Mes?9##;\n\n\/*\nIF @anio=0 @anio=format(CURRENT_TIMESTAMP,'yyyy');\nIF  @mes=0 @mes=format(CURRENT_TIMESTAMP,'MM');\n*\/\n\nWITH Answers AS (\n  SELECT ParentId AS Id, max(Score) AS Score\n  FROM Posts\n  WHERE PostTypeId = 2\n  GROUP BY ParentId\n)\n\nSELECT TOP 100\n  format(Q.CreationDate,'dd\/MM\/yy') \"Creaci\u00f3n\",\n  CONCAT('site:\/\/q\/',Q.Id,'|',Q.Title) Pregunta,\n  Q.AnswerCount \"Cantidad de Respuestas\",\n  Q.Score \"Puntaje de Pregunta\",\n  A.Score \"Puntaje de Mejor Respuesta\"\n\nFROM Posts Q\nLEFT OUTER JOIN Answers A\n  ON Q.Id = A.Id\nWHERE\n   Q.CreationDate >= CONCAT(@anio,'\/',@mes,'\/1')\n  and Q.CreationDate <  CONCAT(@anio,'\/',@mes+1,'\/1')\nORDER BY\n  3 DESC,\n  5 DESC,\n  4 DESC,\n  1 DESC,\n  Q.Title ASC\n;"
    },
    {
        "QuerySetId": 551778,
        "Title": "test accepted answers by user in date",
        "Description": null,
        "QueryBody": "DECLARE  @UserId int = ##UserId##\n\nSELECT \n answers.Id as[A.answerId],\n answers.ParentId as [A.questionId],\n answers.CreationDate as [A.CDate]\n \nFROM Posts questions LEFT JOIN Posts answers \n ON questions.AcceptedAnswerId = answers.Id \n\nwhere \n\n (answers.OwnerUserId = 5637321 OR\n answers.OwnerUserId = 5995040 OR\n answers.OwnerUserId = 5832311 OR\n answers.OwnerUserId = 5996134 OR\n answers.OwnerUserId = 6092067 OR\n answers.OwnerUserId = 6143482) AND\n answers.PostTypeId = 2 AND\n answers.CreationDate >= '09\/01\/2016' AND answers.CreationDate <= '10\/01\/2016'",
        "CreationDate": "2016-10-07 08:51:20",
        "validated": false,
        "QueryBody_Original": "DECLARE  @UserId int = ##UserId##\n\nSELECT \n answers.Id as[A.answerId],\n answers.ParentId as [A.questionId],\n answers.CreationDate as [A.CDate]\n \nFROM Posts questions LEFT JOIN Posts answers \n ON questions.AcceptedAnswerId = answers.Id \n\nwhere \n\n (answers.OwnerUserId = 5637321 OR\n answers.OwnerUserId = 5995040 OR\n answers.OwnerUserId = 5832311 OR\n answers.OwnerUserId = 5996134 OR\n answers.OwnerUserId = 6092067 OR\n answers.OwnerUserId = 6143482) AND\n answers.PostTypeId = 2 AND\n answers.CreationDate >= '09\/01\/2016' AND answers.CreationDate <= '10\/01\/2016'"
    },
    {
        "QuerySetId": 551799,
        "Title": "Accepted Answers by Group Members based on specified dates",
        "Description": null,
        "QueryBody": "DECLARE  @UserId int = ##UserId##\n\nSELECT \n users.DisplayName,\n answers.Id as[A.answerId],\n answers.ParentId as [A.questionId],\n answers.CreationDate as [A.CDate]\n \nFROM Posts questions LEFT JOIN Posts answers \n ON questions.AcceptedAnswerId = answers.Id LEFT JOIN Users users\n ON answers.OwneruserId = users.Id\n\nwhere \n\n (answers.OwnerUserId = 5637321 OR\n answers.OwnerUserId = 5995040 OR\n answers.OwnerUserId = 5832311 OR\n answers.OwnerUserId = 5996134 OR\n answers.OwnerUserId = 6092067 OR\n answers.OwnerUserId = 6143482) AND\n answers.PostTypeId = 2 AND\n answers.CreationDate >= '09\/01\/2016' AND answers.CreationDate <= '10\/01\/2016'",
        "CreationDate": "2016-10-07 09:01:46",
        "validated": false,
        "QueryBody_Original": "DECLARE  @UserId int = ##UserId##\n\nSELECT \n users.DisplayName,\n answers.Id as[A.answerId],\n answers.ParentId as [A.questionId],\n answers.CreationDate as [A.CDate]\n \nFROM Posts questions LEFT JOIN Posts answers \n ON questions.AcceptedAnswerId = answers.Id LEFT JOIN Users users\n ON answers.OwneruserId = users.Id\n\nwhere \n\n (answers.OwnerUserId = 5637321 OR\n answers.OwnerUserId = 5995040 OR\n answers.OwnerUserId = 5832311 OR\n answers.OwnerUserId = 5996134 OR\n answers.OwnerUserId = 6092067 OR\n answers.OwnerUserId = 6143482) AND\n answers.PostTypeId = 2 AND\n answers.CreationDate >= '09\/01\/2016' AND answers.CreationDate <= '10\/01\/2016'"
    },
    {
        "QuerySetId": 551866,
        "Title": "All questions with a *single* tag in last month",
        "Description": null,
        "QueryBody": "SELECT  Id as [Post Link] FROM Posts\nWHERE PostTypeId = 1 AND DATEPART(m, CreationDate) = DATEPART(m, DATEADD(m, -1, getdate()))\nAND DATEPART(yyyy, CreationDate) = DATEPART(yyyy, DATEADD(m, -1, getdate()))\n\nAND Tags = CONCAT('<', ##Tag:string##, '>')\nORDER BY CreationDate DESC",
        "CreationDate": "2016-10-07 13:17:18",
        "validated": false,
        "QueryBody_Original": "SELECT  Id as [Post Link] FROM Posts\nWHERE PostTypeId = 1 AND DATEPART(m, CreationDate) = DATEPART(m, DATEADD(m, -1, getdate()))\nAND DATEPART(yyyy, CreationDate) = DATEPART(yyyy, DATEADD(m, -1, getdate()))\n\nAND Tags = CONCAT('<', ##Tag:string##, '>')\nORDER BY CreationDate DESC"
    },
    {
        "QuerySetId": 552131,
        "Title": "What sort of questions are migrated here?",
        "Description": null,
        "QueryBody": "DECLARE  @from datetime = getdate() - 90,\n        @PostMigratedHere tinyint = 36,\n        @PostMigratedAway tinyint = 35,\n        @MigrationRejected tinyint = 42,\n        @Question tinyint = 1;\n \nselect count(*) as 'Migrated here', \n       avg(Score*1.0) 'Avg score',\n       avg(AnswerCount*1.0) 'Avg answers',\n       avg(CommentCount*1.0) 'Avg comments',\n       avg(datediff(hour, p.CreationDate, ph.CreationDate)\/24.0) 'Avg age (days)'\nfrom PostHistory ph\n     join Posts p on p.Id = PostId\nwhere PostHistoryTypeId In (@PostMigratedHere)\n      and ph.CreationDate > @from",
        "CreationDate": "2016-10-07 21:21:19",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 552763,
        "Title": "Answers, Posts, and Views by Date Range and DisplayName",
        "Description": null,
        "QueryBody": "DECLARE  @user INTEGER;\nSELECT @user = Id FROM Users WHERE DisplayName = 'eipi10';\n\nDECLARE @startDate DATETIME;\nSELECT @startDate = '01\/11\/2014';\n\nSELECT PostType = pt.Name, \n    TotalPosts = COUNT(*), \n    TotalViews = SUM(ViewCount)\nFROM Posts p\nJOIN PostTypes pt ON p.PostTypeId = pt.Id\nWHERE OwnerUserId = @user\nAND CreationDate > @startDate\nGROUP BY pt.Name",
        "CreationDate": "2017-06-30 20:49:08",
        "validated": false,
        "QueryBody_Original": "DECLARE  @user INTEGER;\nSELECT @user = Id FROM Users WHERE DisplayName = 'eipi10';\n\nDECLARE @startDate DATETIME;\nSELECT @startDate = '01\/11\/2014';\n\nSELECT PostType = pt.Name, \n    TotalPosts = COUNT(*), \n    TotalViews = SUM(ViewCount)\nFROM Posts p\nJOIN PostTypes pt ON p.PostTypeId = pt.Id\nWHERE OwnerUserId = @user\nAND CreationDate > @startDate\nGROUP BY pt.Name"
    },
    {
        "QuerySetId": 552919,
        "Title": "Posts and Views by Date Range and Display Name",
        "Description": null,
        "QueryBody": "DECLARE  @user varchar(50);\nDECLARE @startDate DATETIME;\nDECLARE @endDate DATETIME;\n\nSELECT @user = 'Pedro Lamas';\nSELECT @startDate = '3\/1\/2017';\nSELECT @endDate = '3\/31\/2018';\n\nSELECT\n  PostType = pt.Name,\n  Posts = COUNT(*),\n  Views = SUM(COALESCE(p.ViewCount, parent.ViewCount)),\n  Start = DATENAME(m, @startDate),\n  Finish = DATENAME(m, @endDate)\nFROM Posts p\nLEFT JOIN Posts parent ON p.ParentId = parent.Id\nJOIN Users u ON p.OwnerUserId = u.Id\nJOIN PostTypes pt ON p.PostTypeId = pt.Id\nWHERE u.DisplayName = @user\nAND p.CreationDate BETWEEN @startDate AND @endDate\nGROUP BY ROLLUP(pt.Name)",
        "CreationDate": "2018-03-15 04:35:25",
        "validated": false,
        "QueryBody_Original": "DECLARE  @user varchar(50);\nDECLARE @startDate DATETIME;\nDECLARE @endDate DATETIME;\n\nSELECT @user = 'Pedro Lamas';\nSELECT @startDate = '3\/1\/2017';\nSELECT @endDate = '3\/31\/2018';\n\nSELECT\n  PostType = pt.Name,\n  Posts = COUNT(*),\n  Views = SUM(COALESCE(p.ViewCount, parent.ViewCount)),\n  Start = DATENAME(m, @startDate),\n  Finish = DATENAME(m, @endDate)\nFROM Posts p\nLEFT JOIN Posts parent ON p.ParentId = parent.Id\nJOIN Users u ON p.OwnerUserId = u.Id\nJOIN PostTypes pt ON p.PostTypeId = pt.Id\nWHERE u.DisplayName = @user\nAND p.CreationDate BETWEEN @startDate AND @endDate\nGROUP BY ROLLUP(pt.Name)"
    },
    {
        "QuerySetId": 557440,
        "Title": "Top users per tag in location",
        "Description": null,
        "QueryBody": "DECLARE  @user_id int = ##UserID##;\nDECLARE @tag_id int = (select id from tags where tagname = '##TagName##');\n\n--select rank() over (order by score desc) \"Rank\", * from (\nselect \n  rank() over (order by sum(answers.score) desc) \"Rank\",\n  users.id \"User Link\"\n  ,sum(answers.score) as \"Score\"\n  ,(case when users.id = @user_id then '<<<<' else '' end)\nfrom users\njoin posts answers on (users.id = answers.owneruserid)\njoin posts parent on (answers.parentid = parent.id)\njoin posttags on (parent.id = posttags.postid)\nwhere posttags.tagid = @tag_id\nand answers.posttypeid = 2  -- answers only\nand lower(users.Location) like '%##Location##%'\ngroup by users.id\norder by sum(answers.score) desc;",
        "CreationDate": "2016-10-16 10:00:05",
        "validated": false,
        "QueryBody_Original": "DECLARE  @user_id int = ##UserID##;\nDECLARE @tag_id int = (select id from tags where tagname = '##TagName##');\n\n--select rank() over (order by score desc) \"Rank\", * from (\nselect \n  rank() over (order by sum(answers.score) desc) \"Rank\",\n  users.id \"User Link\"\n  ,sum(answers.score) as \"Score\"\n  ,(case when users.id = @user_id then '<<<<' else '' end)\nfrom users\njoin posts answers on (users.id = answers.owneruserid)\njoin posts parent on (answers.parentid = parent.id)\njoin posttags on (parent.id = posttags.postid)\nwhere posttags.tagid = @tag_id\nand answers.posttypeid = 2  -- answers only\nand lower(users.Location) like '%##Location##%'\ngroup by users.id\norder by sum(answers.score) desc;"
    },
    {
        "QuerySetId": 557751,
        "Title": "Find user by part of name and reputation estimate",
        "Description": null,
        "QueryBody": "SELECT \n  id,\n  id [User Link],\n  displayname,\n  creationdate\nfrom users\nwhere lower(displayname) like '%##name##%'\nand reputation between ##rep:int## - ##delta:int?1000## and ##rep## + ##delta##\n\n-- name: User name (any part) \"Case is ignored\"\n-- rep: Reputation estimate\n-- delta: Reputation range \"Plus or minus this amount\"",
        "CreationDate": "2016-10-16 18:25:48",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 559251,
        "Title": "Resposta por usu\u00e1rio e conte\u00fado",
        "Description": null,
        "QueryBody": "SELECT  Id AS [Post Link],\n       [OwnerUserId] AS [User Link]\nFROM Posts\nWHERE OwnerUserId=##UserId##\n  AND BODY LIKE '%##text##%' COLLATE sql_latin1_general_cp1_ci_as\n  AND PostTypeId = 2",
        "CreationDate": "2016-10-18 15:38:08",
        "validated": false,
        "QueryBody_Original": "SELECT  Id AS [Post Link],\n       [OwnerUserId] AS [User Link]\nFROM Posts\nWHERE OwnerUserId=##UserId##\n  AND BODY LIKE '%##text##%' COLLATE sql_latin1_general_cp1_ci_as\n  AND PostTypeId = 2"
    },
    {
        "QuerySetId": 559788,
        "Title": "Deleted posts based on comments",
        "Description": "Your comments with the most upvotes",
        "QueryBody": "SELECT \n    p.id as [Post Link], p.LastActivityDate\nfrom posts as p\n    INNER JOIN Comments c ON c.PostId = p.Id\n    INNER JOIN Users u ON p.OwnerUserId = u.Id\n    INNER JOIN PostHistory h ON p.Id = h.PostId\nwhere\n    c.UserId =  ##USERID## and\n    h.PostHistoryTypeId = '12'\norder by p.LastActivityDate desc",
        "CreationDate": "2016-10-19 14:08:53",
        "validated": false,
        "QueryBody_Original": "SELECT \n    p.id as [Post Link], p.LastActivityDate\nfrom posts as p\n    INNER JOIN Comments c ON c.PostId = p.Id\n    INNER JOIN Users u ON p.OwnerUserId = u.Id\n    INNER JOIN PostHistory h ON p.Id = h.PostId\nwhere\n    c.UserId =  ##USERID## and\n    h.PostHistoryTypeId = '12'\norder by p.LastActivityDate desc"
    },
    {
        "QuerySetId": 560111,
        "Title": "Question answered by HDE that contain \"star\"",
        "Description": null,
        "QueryBody": "SELECT  q.id as [Post Link]\nfrom posts q\ninner join posts a on q.id = a.parentid\nwhere a.owneruserid=##User:int##\nand q.body like '%star%'",
        "CreationDate": "2016-10-20 05:33:00",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 560120,
        "Title": "Questions answered by a user containing text",
        "Description": null,
        "QueryBody": "SELECT  q.id as [Post Link]\nfrom posts q\ninner join posts a on q.id = a.parentid\nwhere a.owneruserid=##UserId##\nand q.body like '%##Text##%'",
        "CreationDate": "2016-10-20 05:37:58",
        "validated": false,
        "QueryBody_Original": "SELECT  q.id as [Post Link]\nfrom posts q\ninner join posts a on q.id = a.parentid\nwhere a.owneruserid=##UserId##\nand q.body like '%##Text##%'"
    },
    {
        "QuerySetId": 560255,
        "Title": "Get question count for tag grouped by month",
        "Description": null,
        "QueryBody": "DECLARE  @TagName VARCHAR(35) = '##Tag##'\n\nSELECT \n  CAST(YEAR(CreationDate) AS VARCHAR(4)) + '-' + RIGHT('00' + CAST(MONTH(CreationDate) AS VARCHAR(2)), 2) AS [Month], \n  COUNT(*) AS [Count]\nFROM \n  Posts p\nJOIN PostTags pt ON p.Id = pt.PostId\nJOIN Tags t ON pt.TagId = t.Id\nWHERE \n  p.PostTypeId = 1 AND t.TagName = @TagName\nGROUP \n  BY CAST(YEAR(CreationDate) AS VARCHAR(4)) + '-' + RIGHT('00' + CAST(MONTH(CreationDate) AS VARCHAR(2)), 2)",
        "CreationDate": "2016-12-05 14:39:25",
        "validated": false,
        "QueryBody_Original": "DECLARE  @TagName VARCHAR(35) = '##Tag##'\n\nSELECT \n  CAST(YEAR(CreationDate) AS VARCHAR(4)) + '-' + RIGHT('00' + CAST(MONTH(CreationDate) AS VARCHAR(2)), 2) AS [Month], \n  COUNT(*) AS [Count]\nFROM \n  Posts p\nJOIN PostTags pt ON p.Id = pt.PostId\nJOIN Tags t ON pt.TagId = t.Id\nWHERE \n  p.PostTypeId = 1 AND t.TagName = @TagName\nGROUP \n  BY CAST(YEAR(CreationDate) AS VARCHAR(4)) + '-' + RIGHT('00' + CAST(MONTH(CreationDate) AS VARCHAR(2)), 2)"
    },
    {
        "QuerySetId": 560562,
        "Title": "Users by number of closed questions",
        "Description": null,
        "QueryBody": "DECLARE   cr cursor for \n  select comment, text \n  from posthistory ph \n  where posthistorytypeid =10\n  DECLARE @c nvarchar(200)\n  DECLARE @t nvarchar(2000)\n  DECLARE @v nvarchar(2000)\n  \nopen cr\nfetch next from cr into @c, @t\nwhile  @@FETCH_STATUS = 0  \nbegin\n  DECLARE vt cursor for\n    select value\n    from string_split(@t, ',')\n  open vt\n  fetch next from vt into @v\n  while @@FETCH_STATUS = 0  \n  begin\n    print @v\n    fetch next from vt into @v\n  end\n  close vt\n  DEALLOCATE vt\n  fetch next from cr into @c, @t\nend\n\nselect *\nfrom string_split('jdf,v,d;d;d',',')",
        "CreationDate": "2016-10-21 00:17:26",
        "validated": false,
        "QueryBody_Original": "DECLARE   cr cursor for \n  select comment, text \n  from posthistory ph \n  where posthistorytypeid =10\n  DECLARE @c nvarchar(200)\n  DECLARE @t nvarchar(2000)\n  DECLARE @v nvarchar(2000)\n  \nopen cr\nfetch next from cr into @c, @t\nwhile  @@FETCH_STATUS = 0  \nbegin\n  DECLARE vt cursor for\n    select value\n    from string_split(@t, ',')\n  open vt\n  fetch next from vt into @v\n  while @@FETCH_STATUS = 0  \n  begin\n    print @v\n    fetch next from vt into @v\n  end\n  close vt\n  DEALLOCATE vt\n  fetch next from cr into @c, @t\nend\n\nselect *\nfrom string_split('jdf,v,d;d;d',',')"
    },
    {
        "QuerySetId": 561482,
        "Title": "Post Score\/View ratio for a given user",
        "Description": null,
        "QueryBody": "DECLARE  @MinScore int = ##MinScore##\nDECLARE @MinViews int = ##MinViews##\n\nSELECT \n  P.Id as [Post Link],\n  CAST(P.Score AS FLOAT) \/ CAST(P.ViewCount AS FLOAT) SVRatio,\n  P.Score Score,\n  P.ViewCount Views,\n  P.CreationDate CreationDate\nFROM\n  Posts P\nWHERE\n  P.PostTypeId = 1 -- only question posts\n  AND P.OwnerUserId = ##userid##\n  AND P.Score >= @MinScore\n  AND P.ViewCount >= @MinViews\nORDER BY\n  SVRatio DESC",
        "CreationDate": "2016-10-23 12:03:31",
        "validated": false,
        "QueryBody_Original": "DECLARE  @MinScore int = ##MinScore##\nDECLARE @MinViews int = ##MinViews##\n\nSELECT \n  P.Id as [Post Link],\n  CAST(P.Score AS FLOAT) \/ CAST(P.ViewCount AS FLOAT) SVRatio,\n  P.Score Score,\n  P.ViewCount Views,\n  P.CreationDate CreationDate\nFROM\n  Posts P\nWHERE\n  P.PostTypeId = 1 -- only question posts\n  AND P.OwnerUserId = ##userid##\n  AND P.Score >= @MinScore\n  AND P.ViewCount >= @MinViews\nORDER BY\n  SVRatio DESC"
    },
    {
        "QuerySetId": 562144,
        "Title": "Fill in the Minesweeper clues",
        "Description": null,
        "QueryBody": "DECLARE  @ varchar(max)=\n' *   \n*  * \n  *  \n    *';\nWITH C as(SELECT x+1i,substring(@,x+1,1)v,x\/z r,x%z c FROM master..spt_values CROSS APPLY(SELECT number x,charindex(char(10),@)z)z WHERE type='P'and x<len(@))SELECT @=stuff(@,i,1,z)FROM(SELECT i,(SELECT count(*)FROM C WHERE abs(D.c-c)<2and abs(D.r-r)<2and'*'=v)z FROM C D WHERE''=v)h PRINT @",
        "CreationDate": "2016-10-24 17:35:33",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 562151,
        "Title": "Get all your comment with links, texts, dates and scores",
        "Description": null,
        "QueryBody": "DECLARE  @UserId int = ##UserId##\n\nSELECT     Score, CreationDate, Id AS [Comment Link], Text\nFROM     Comments\nWHERE     UserId = @UserId \nORDER BY CreationDate DESC",
        "CreationDate": "2016-10-24 16:07:19",
        "validated": false,
        "QueryBody_Original": "DECLARE  @UserId int = ##UserId##\n\nSELECT     Score, CreationDate, Id AS [Comment Link], Text\nFROM     Comments\nWHERE     UserId = @UserId \nORDER BY CreationDate DESC"
    },
    {
        "QuerySetId": 567182,
        "Title": "Days I hit rep cap",
        "Description": "Returns the days a user hit the rep cap",
        "QueryBody": "DECLARE  @UserId int = ##UserId##\nSELECT Row_Number() over (order by CreationDate) row, CreationDate, Votes\nFROM (\n       SELECT \n        SUM(\n          case votes.votetypeid \n            WHEN 1 THEN 15\n            WHEN 2 THEN 10 \n            WHEN 3 THEN -3\n            WHEN 9 THEN BountyAmount\n          END\n           ) as Votes,\n     Votes.CreationDate AS CreationDate\nFROM   Posts\n INNER JOIN Votes ON Votes.PostId = Posts.Id\nWHERE  Posts.OwnerUserId = @UserId\n AND Posts.CommunityOwnedDate IS NULL\n and votes.creationdate > '1\/1\/2011'\nGROUP  BY Votes.CreationDate\n) t\nWHERE Votes>=200",
        "CreationDate": "2017-08-11 05:47:09",
        "validated": false,
        "QueryBody_Original": "DECLARE  @UserId int = ##UserId##\nSELECT Row_Number() over (order by CreationDate) row, CreationDate, Votes\nFROM (\n       SELECT \n        SUM(\n          case votes.votetypeid \n            WHEN 1 THEN 15\n            WHEN 2 THEN 10 \n            WHEN 3 THEN -3\n            WHEN 9 THEN BountyAmount\n          END\n           ) as Votes,\n     Votes.CreationDate AS CreationDate\nFROM   Posts\n INNER JOIN Votes ON Votes.PostId = Posts.Id\nWHERE  Posts.OwnerUserId = @UserId\n AND Posts.CommunityOwnedDate IS NULL\n and votes.creationdate > '1\/1\/2011'\nGROUP  BY Votes.CreationDate\n) t\nWHERE Votes>=200"
    },
    {
        "QuerySetId": 567193,
        "Title": "Reputation per answers, for users with at least x posts and y reputation",
        "Description": null,
        "QueryBody": "SELECT  Rank=ROW_NUMBER() OVER \n  (ORDER BY ROUND((CAST(\"Total Score\" AS Float) \/ CAST (\"Total Answers\" AS Float)),2) DESC),\n ROUND((CAST(\"Total Score\" AS Float) \/ CAST (\"Total Answers\" AS Float)),2) AS \"Score Per Answer\",\n u.Id AS [User Link], u.Reputation, \"Total Answers\", \n ROUND((CAST(u.Reputation AS Float) \/ CAST(\"Total Answers\" AS Float)),2) AS \"Rep Per Answer\"\n \nFROM Users u \nINNER JOIN\n(SELECT p.OwnerUserId, COUNT(p.OwnerUserId) as \"Total Answers\", SUM(p.Score) as \"Total Score\"\n  FROM Posts p \n  WHERE p.PostTypeId = 2 \n  GROUP BY p.OwnerUserId\n  HAVING COUNT(p.OwnerUserId) >= ##MinimumPosts##) q\nON q.OwnerUserId = u.Id\nWHERE u.Reputation >= ##MinimumRep##\nORDER BY \"Score Per Answer\" DESC",
        "CreationDate": "2016-10-31 05:13:07",
        "validated": false,
        "QueryBody_Original": "SELECT  Rank=ROW_NUMBER() OVER \n  (ORDER BY ROUND((CAST(\"Total Score\" AS Float) \/ CAST (\"Total Answers\" AS Float)),2) DESC),\n ROUND((CAST(\"Total Score\" AS Float) \/ CAST (\"Total Answers\" AS Float)),2) AS \"Score Per Answer\",\n u.Id AS [User Link], u.Reputation, \"Total Answers\", \n ROUND((CAST(u.Reputation AS Float) \/ CAST(\"Total Answers\" AS Float)),2) AS \"Rep Per Answer\"\n \nFROM Users u \nINNER JOIN\n(SELECT p.OwnerUserId, COUNT(p.OwnerUserId) as \"Total Answers\", SUM(p.Score) as \"Total Score\"\n  FROM Posts p \n  WHERE p.PostTypeId = 2 \n  GROUP BY p.OwnerUserId\n  HAVING COUNT(p.OwnerUserId) >= ##MinimumPosts##) q\nON q.OwnerUserId = u.Id\nWHERE u.Reputation >= ##MinimumRep##\nORDER BY \"Score Per Answer\" DESC"
    },
    {
        "QuerySetId": 567397,
        "Title": "User avg score and rep per answer, with at least x posts and y rep",
        "Description": null,
        "QueryBody": "SELECT  \"Score Rank\"=ROW_NUMBER() OVER \n  (ORDER BY ROUND((CAST(\"Total Score\" AS Float) \/ CAST (\"Total Answers\" AS Float)),2) DESC),\n ROUND((CAST(\"Total Score\" AS Float) \/ CAST (\"Total Answers\" AS Float)),2) AS \"Score Per Answer\",\n u.Id AS [User Link], \"Rep Rank\"=ROW_NUMBER() OVER (ORDER BY u.Reputation DESC), u.Reputation, \"Total Answers\", \n ROUND((CAST(u.Reputation AS Float) \/ CAST(\"Total Answers\" AS Float)),2) AS \"Rep Per Answer\"\n \nFROM Users u \nINNER JOIN\n(SELECT p.OwnerUserId, COUNT(p.OwnerUserId) as \"Total Answers\", SUM(p.Score) as \"Total Score\"\n  FROM Posts p \n  WHERE p.PostTypeId = 2 \n  GROUP BY p.OwnerUserId\n  HAVING COUNT(p.OwnerUserId) >= ##MinimumPosts##) q\nON q.OwnerUserId = u.Id\nWHERE u.Reputation >= ##MinimumRep##\nORDER BY \"Score Per Answer\" DESC",
        "CreationDate": "2016-10-31 05:24:32",
        "validated": false,
        "QueryBody_Original": "SELECT  \"Score Rank\"=ROW_NUMBER() OVER \n  (ORDER BY ROUND((CAST(\"Total Score\" AS Float) \/ CAST (\"Total Answers\" AS Float)),2) DESC),\n ROUND((CAST(\"Total Score\" AS Float) \/ CAST (\"Total Answers\" AS Float)),2) AS \"Score Per Answer\",\n u.Id AS [User Link], \"Rep Rank\"=ROW_NUMBER() OVER (ORDER BY u.Reputation DESC), u.Reputation, \"Total Answers\", \n ROUND((CAST(u.Reputation AS Float) \/ CAST(\"Total Answers\" AS Float)),2) AS \"Rep Per Answer\"\n \nFROM Users u \nINNER JOIN\n(SELECT p.OwnerUserId, COUNT(p.OwnerUserId) as \"Total Answers\", SUM(p.Score) as \"Total Score\"\n  FROM Posts p \n  WHERE p.PostTypeId = 2 \n  GROUP BY p.OwnerUserId\n  HAVING COUNT(p.OwnerUserId) >= ##MinimumPosts##) q\nON q.OwnerUserId = u.Id\nWHERE u.Reputation >= ##MinimumRep##\nORDER BY \"Score Per Answer\" DESC"
    },
    {
        "QuerySetId": 567804,
        "Title": "Site Activity Close to Particular Question",
        "Description": null,
        "QueryBody": "DECLARE  @userID int = ##UserID##\nDECLARE @hoursSincePost int = ##HoursSincePost##\nDECLARE @dateOfQuestion datetime\n\nSELECT MAX(CreationDate)\n                                          FROM Posts\n                                          WHERE PostTypeID = 1 --Question posting\n                                          AND OwnerUserId = @userID;\n\n\/*SELECT *\nFROM Posts\nWHERE CreationDate > @dateOfQuestion\n  AND DATEDIFF(hour,@dateOfQuestion,CreationDate) <= @hoursSincePost;*\/",
        "CreationDate": "2016-11-06 03:59:02",
        "validated": false,
        "QueryBody_Original": "DECLARE  @userID int = ##UserID##\nDECLARE @hoursSincePost int = ##HoursSincePost##\nDECLARE @dateOfQuestion datetime\n\nSELECT MAX(CreationDate)\n                                          FROM Posts\n                                          WHERE PostTypeID = 1 --Question posting\n                                          AND OwnerUserId = @userID;\n\n\/*SELECT *\nFROM Posts\nWHERE CreationDate > @dateOfQuestion\n  AND DATEDIFF(hour,@dateOfQuestion,CreationDate) <= @hoursSincePost;*\/"
    },
    {
        "QuerySetId": 568362,
        "Title": "Links to user's top comments",
        "Description": null,
        "QueryBody": "DECLARE  @UserId int = ##UserId##\n\nSELECT TOP 30\n    Score, Id [Comment Link], Text\nFROM \n    Comments\nWHERE \n    UserId = @UserId\n\nORDER BY \n    Score DESC",
        "CreationDate": "2017-10-07 06:12:26",
        "validated": false,
        "QueryBody_Original": "DECLARE  @UserId int = ##UserId##\n\nSELECT TOP 30\n    Score, Id [Comment Link], Text\nFROM \n    Comments\nWHERE \n    UserId = @UserId\n\nORDER BY \n    Score DESC"
    },
    {
        "QuerySetId": 568627,
        "Title": "get Exception for all platforms",
        "Description": null,
        "QueryBody": "SELECT  Title, Tags, ViewCount, Score\nfrom Posts\nwhere \n    Tags LIKE '%android%'\n    and Title LIKE '%Exception%'\n    order by Tags ASC\n\nSELECT Title, Tags, ViewCount, Score\nfrom Posts\nwhere \n    Tags LIKE '%ios%'\n    and Title LIKE '%Exception%'\n    order by Tags ASC\n\nSELECT Title, Tags, ViewCount, Score\nfrom Posts\nwhere \n    Tags LIKE '%windows-phone%'\n    and Title LIKE '%Exception%'\n    order by Tags ASC",
        "CreationDate": "2016-11-01 19:15:11",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 568829,
        "Title": "How many questions have I closed?",
        "Description": "Counts the number of questions a user has closed.",
        "QueryBody": "DECLARE  @UserId int = ##UserId##\n\nSELECT TOP 100 *\nFROM Votes\nINNER JOIN Posts ON Votes.PostId = Posts.Id\nWHERE Posts.ClosedDate IS NOT NULL",
        "CreationDate": "2016-11-02 01:27:03",
        "validated": false,
        "QueryBody_Original": "DECLARE  @UserId int = ##UserId##\n\nSELECT TOP 100 *\nFROM Votes\nINNER JOIN Posts ON Votes.PostId = Posts.Id\nWHERE Posts.ClosedDate IS NOT NULL"
    },
    {
        "QuerySetId": 569725,
        "Title": "Get close reasons from questions answered by user",
        "Description": null,
        "QueryBody": "DECLARE  \n  @question int = 1,\n  @closedPostHistoryType int = 10,\n  @answererid int = ##UserID##\n\nselect\n  p.Id as [Post Link],\n  p.Title,\n  crt.name as [CloseReason]\nfrom \n  Posts as p\n\n  left join Posts as a\n    on a.ParentId = p.Id\n  left join PostHistory as ph\n    on p.Id = ph.PostId\n    and ph.PostHistoryTypeId = @closedPostHistoryType\n  left join CloseReasonTypes as crt\n    on try_cast(ph.Comment as int) = crt.Id\n    \nwhere \n  p.PostTypeId = @question\n  and a.OwnerUserId = @answererid\n  and crt.name is not null",
        "CreationDate": "2016-11-03 22:49:45",
        "validated": false,
        "QueryBody_Original": "DECLARE  \n  @question int = 1,\n  @closedPostHistoryType int = 10,\n  @answererid int = ##UserID##\n\nselect\n  p.Id as [Post Link],\n  p.Title,\n  crt.name as [CloseReason]\nfrom \n  Posts as p\n\n  left join Posts as a\n    on a.ParentId = p.Id\n  left join PostHistory as ph\n    on p.Id = ph.PostId\n    and ph.PostHistoryTypeId = @closedPostHistoryType\n  left join CloseReasonTypes as crt\n    on try_cast(ph.Comment as int) = crt.Id\n    \nwhere \n  p.PostTypeId = @question\n  and a.OwnerUserId = @answererid\n  and crt.name is not null"
    },
    {
        "QuerySetId": 571531,
        "Title": "Find a specific user's answers to a specific user's questions",
        "Description": null,
        "QueryBody": "SELECT  a.Id as [Post Link], a.CreationDate,\n    case when q.AcceptedAnswerId = a.Id then N'\u2713' else '' end as Accepted,\n    a.Score as [Answer Score]\nfrom Posts a\ninner join Posts q on a.ParentId = q.Id\nwhere a.OwnerUserId = ##AnswererId##\n    and q.OwnerUserId = ##AskerId##\norder by a.CreationDate desc",
        "CreationDate": "2016-11-05 00:04:53",
        "validated": false,
        "QueryBody_Original": "SELECT  a.Id as [Post Link], a.CreationDate,\n    case when q.AcceptedAnswerId = a.Id then N'\u2713' else '' end as Accepted,\n    a.Score as [Answer Score]\nfrom Posts a\ninner join Posts q on a.ParentId = q.Id\nwhere a.OwnerUserId = ##AnswererId##\n    and q.OwnerUserId = ##AskerId##\norder by a.CreationDate desc"
    },
    {
        "QuerySetId": 571615,
        "Title": "question score vs top answer score",
        "Description": null,
        "QueryBody": "SELECT  rbin, count(*) from\n(SELECT round(cast(q.score as float)\/ a.maxScore,1) as rbin from\n(SELECT parentid,max(score) as maxScore\nfrom posts where posttypeid = 2 group by parentid) as a\njoin posts as q\non q.id = a.parentid\nwhere a.maxScore >= ##minTopAnswerScore?5## and q.score >= ##minQuestionScore?0##\n) as r group by rbin order by rbin;",
        "CreationDate": "2016-11-05 05:25:57",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 571809,
        "Title": "My \u0651Friends Most Down-voted Comments (including comment text)",
        "Description": "My comments with at least one upvote, in order with most upvoted-comments first.",
        "QueryBody": "SELECT  postID [Post Link], Score, Text\nFROM \n    Comments\nWHERE UserId = ##UserId##\nAND Score <= 0\nORDER BY Score Desc",
        "CreationDate": "2016-11-05 20:55:56",
        "validated": false,
        "QueryBody_Original": "SELECT  postID [Post Link], Score, Text\nFROM \n    Comments\nWHERE UserId = ##UserId##\nAND Score <= 0\nORDER BY Score Desc"
    },
    {
        "QuerySetId": 573440,
        "Title": "Get questions with only a specific tag (plus bug\/feature request\/support\/discussion)",
        "Description": null,
        "QueryBody": "DECLARE  @TagId int;\nSelect @TagId=Id From Tags Where TagName='##tag##'\nIf @TagId Is Null Begin\n    Print 'Tag not found';\n    Return;\nEnd\n\nSelect Top 100 pt1.PostId As [Post Link]\nFrom PostTags pt1 Inner Join PostTags pt2 On pt1.PostId=pt2.PostId\n    Inner Join (\n        Select PostId, Count(TagId) As TagCount\n        From PostTags\n       Group By PostId\n       Having Count(TagId)>1\n   ) tc On tc.PostId=pt1.PostId And tc.TagCount=2\nWhere pt1.TagId=@TagId And pt2.TagId=1\n\n\n\n\n--Select Top 100 Id As [Post Link], Tags\n--From Posts Where Tags Like '%##tag##%'\n\n--Select * From Tags\n--Where TagName='##tag##'\n\n--Select * From Tags\n--Where TagName In ('bug', 'feature-request', 'discussion', 'support')",
        "CreationDate": "2016-11-07 17:48:12",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 573507,
        "Title": "Tag statistics for tags containing google",
        "Description": "Views, Score and Answers per Game (with limited blacklist for other tags)\r\n",
        "QueryBody": "DECLARE  @total float\nSELECT @total = Sum(Cast(ViewCount as bigint)) FROM Posts WHERE PostTypeId = 1\n\nSELECT \n    Tags.Tagname AS Tag, \n    Count(*) AS Questions, \n    Sum(Cast(Posts.ViewCount as bigint)) AS Views,\n    str(100 * Sum(Cast(Posts.ViewCount as bigint)) \/ @total,6,2) AS percentOfSite,\n    Sum(Posts.Score) AS Score,\n    Sum(Posts.AnswerCount) AS Answers,\n    Sum(Cast(Posts.ViewCount as bigint)) \/ Count(*) AS AvgViews,\n    str(Sum(Posts.Score) \/ Cast(Count(*) AS Float),6,2) AS AvgScore,\n    str(Sum(Posts.AnswerCount) \/ Cast(Count(*) AS Float),6,2) AS AvgAnswers\n  FROM Posts \n  JOIN PostTags ON Posts.Id = PostTags.PostId\n  JOIN Tags ON PostTags.TagId = Tags.Id\n  WHERE Posts.PostTypeId = 1 and Tags.Tagname LIKE '%' + 'tagging' + '%'\n  GROUP BY Tags.Tagname\n  ORDER BY Views DESC",
        "CreationDate": "2016-12-28 18:24:48",
        "validated": false,
        "QueryBody_Original": "DECLARE  @total float\nSELECT @total = Sum(Cast(ViewCount as bigint)) FROM Posts WHERE PostTypeId = 1\n\nSELECT \n    Tags.Tagname AS Tag, \n    Count(*) AS Questions, \n    Sum(Cast(Posts.ViewCount as bigint)) AS Views,\n    str(100 * Sum(Cast(Posts.ViewCount as bigint)) \/ @total,6,2) AS percentOfSite,\n    Sum(Posts.Score) AS Score,\n    Sum(Posts.AnswerCount) AS Answers,\n    Sum(Cast(Posts.ViewCount as bigint)) \/ Count(*) AS AvgViews,\n    str(Sum(Posts.Score) \/ Cast(Count(*) AS Float),6,2) AS AvgScore,\n    str(Sum(Posts.AnswerCount) \/ Cast(Count(*) AS Float),6,2) AS AvgAnswers\n  FROM Posts \n  JOIN PostTags ON Posts.Id = PostTags.PostId\n  JOIN Tags ON PostTags.TagId = Tags.Id\n  WHERE Posts.PostTypeId = 1 and Tags.Tagname LIKE '%' + 'tagging' + '%'\n  GROUP BY Tags.Tagname\n  ORDER BY Views DESC"
    },
    {
        "QuerySetId": 574527,
        "Title": "Question by user A answered by user B",
        "Description": null,
        "QueryBody": "SELECT \n  q.Id as [Post Link],\n  q.OwnerUserId as [User Link],\n  q.Score as 'Q Score',\n  a.Id as [Post Link],\n  a.OwnerUserId as [User Link],\n  a.Score as 'A Score',\n  Case when q.AcceptedAnswerId = a.Id then 1 else 0 end as 'Accepted?'\nFrom Posts q\nInner Join Posts a on a.ParentId = q.Id\nWhere q.PostTypeId = 1 \n  and a.PostTypeId = 2 \n  and q.OwnerUserId = ##questUserID## \n  and a.OwnerUserId = ##answerUserId##\nOrder by q.CreationDate",
        "CreationDate": "2016-11-08 22:27:24",
        "validated": false,
        "QueryBody_Original": "SELECT \n  q.Id as [Post Link],\n  q.OwnerUserId as [User Link],\n  q.Score as 'Q Score',\n  a.Id as [Post Link],\n  a.OwnerUserId as [User Link],\n  a.Score as 'A Score',\n  Case when q.AcceptedAnswerId = a.Id then 1 else 0 end as 'Accepted?'\nFrom Posts q\nInner Join Posts a on a.ParentId = q.Id\nWhere q.PostTypeId = 1 \n  and a.PostTypeId = 2 \n  and q.OwnerUserId = ##questUserID## \n  and a.OwnerUserId = ##answerUserId##\nOrder by q.CreationDate"
    },
    {
        "QuerySetId": 577621,
        "Title": "Highest Voted Comments for a User on SFF",
        "Description": null,
        "QueryBody": "SELECT  TOP 250\n    PostId AS [Post Link],\n    Score,\n    Text\nFROM Comments\nWHERE UserId = ##UserId##\nORDER BY Score DESC",
        "CreationDate": "2016-11-14 18:42:53",
        "validated": false,
        "QueryBody_Original": "SELECT  TOP 250\n    PostId AS [Post Link],\n    Score,\n    Text\nFROM Comments\nWHERE UserId = ##UserId##\nORDER BY Score DESC"
    },
    {
        "QuerySetId": 577646,
        "Title": "Highest Voted Comments for a User on History SE",
        "Description": null,
        "QueryBody": "SELECT  TOP 250\n    PostId AS [Post Link],\n    Score,\n    Text\nFROM Comments\nWHERE UserId = ##UserId##\nORDER BY Score DESC",
        "CreationDate": "2016-11-14 19:00:20",
        "validated": false,
        "QueryBody_Original": "SELECT  TOP 250\n    PostId AS [Post Link],\n    Score,\n    Text\nFROM Comments\nWHERE UserId = ##UserId##\nORDER BY Score DESC"
    },
    {
        "QuerySetId": 578164,
        "Title": "Find Deletable Questions I voted to close",
        "Description": null,
        "QueryBody": "DECLARE  @UserId int = ##UserId##\n\nSELECT DISTINCT Q.Id As [Post Link], A.CreationDate\nFROM Posts Q\n  INNER JOIN PostHistory PH ON Q.Id = PH.PostId\n  INNER JOIN Posts A ON Q.Id = A.ParentID\nWHERE PH.CreationDate <= DATEADD(d, -2, GETDATE())\n  AND PH.PostHistoryTypeId = 10\n  AND PH.UserId = @UserId\n  AND Q.ClosedDate IS NOT NULL\n  AND A.Score > 0",
        "CreationDate": "2018-07-06 04:23:42",
        "validated": false,
        "QueryBody_Original": "DECLARE  @UserId int = ##UserId##\n\nSELECT DISTINCT Q.Id As [Post Link], A.CreationDate\nFROM Posts Q\n  INNER JOIN PostHistory PH ON Q.Id = PH.PostId\n  INNER JOIN Posts A ON Q.Id = A.ParentID\nWHERE PH.CreationDate <= DATEADD(d, -2, GETDATE())\n  AND PH.PostHistoryTypeId = 10\n  AND PH.UserId = @UserId\n  AND Q.ClosedDate IS NOT NULL\n  AND A.Score > 0"
    },
    {
        "QuerySetId": 580957,
        "Title": "Tag ratings in dynamic SQL",
        "Description": "New version: https:\/\/data.stackexchange.com\/anime\/query\/745962\/tag-ratings",
        "QueryBody": "DECLARE  @foo numeric(19,9) = 1.9208;\nSELECT @foo;",
        "CreationDate": "2017-09-28 05:52:48",
        "validated": false,
        "QueryBody_Original": "DECLARE  @foo numeric(19,9) = 1.9208;\nSELECT @foo;"
    },
    {
        "QuerySetId": 586964,
        "Title": "Search users by location (Mathematics)",
        "Description": null,
        "QueryBody": "DECLARE  @location varchar = ##location##\nselect  Id, location, reputation, LastAccessDate\nfrom users where LOWER(location) like LOWER('%##location##%')\norder by reputation desc",
        "CreationDate": "2016-11-30 22:13:18",
        "validated": false,
        "QueryBody_Original": "DECLARE  @location varchar = ##location##\nselect  Id, location, reputation, LastAccessDate\nfrom users where LOWER(location) like LOWER('%##location##%')\norder by reputation desc"
    },
    {
        "QuerySetId": 587596,
        "Title": "Finding Total Close Vote Counts",
        "Description": null,
        "QueryBody": "DECLARE  @UserId INT = ##UserId##\nDECLARE @SinceDate Datetime = ##SinceDate##\n\nSELECT COUNT(*)--*, PostId as [Post Link], (SELECT 'TRUE' WHERE Text Like '%\"OriginalQuestionIds\"%') as [IsDuplicate]\nFROM PostHistory\nWHERE PostHistoryTypeId = 10 AND \n    CreationDate > @SinceDate AND \n    Text LIKE '%\"Id\":' + CAST(@UserId AS nvarchar) + ',%';\n\nSELECT COUNT(*)\nFROM Votes\nWHERE VoteTypeID = 6 AND\n    CreationDate > @SinceDate AND\n    UserId = @UserId",
        "CreationDate": "2016-12-01 04:13:03",
        "validated": false,
        "QueryBody_Original": "DECLARE  @UserId INT = ##UserId##\nDECLARE @SinceDate Datetime = ##SinceDate##\n\nSELECT COUNT(*)--*, PostId as [Post Link], (SELECT 'TRUE' WHERE Text Like '%\"OriginalQuestionIds\"%') as [IsDuplicate]\nFROM PostHistory\nWHERE PostHistoryTypeId = 10 AND \n    CreationDate > @SinceDate AND \n    Text LIKE '%\"Id\":' + CAST(@UserId AS nvarchar) + ',%';\n\nSELECT COUNT(*)\nFROM Votes\nWHERE VoteTypeID = 6 AND\n    CreationDate > @SinceDate AND\n    UserId = @UserId"
    },
    {
        "QuerySetId": 588941,
        "Title": "Search Comments for String by User",
        "Description": null,
        "QueryBody": "DECLARE  @pattern nvarchar(100) = UPPER(##Pattern:string##)\n\nSELECT\n    Id AS [Comment Link],\n    Score,\n    CreationDate,\n    PostId AS [Post Link]\nFROM Comments    \nWHERE UserId = ##UserID## AND UPPER(Text) LIKE '%' + @pattern + '%'\nORDER BY CreationDate DESC",
        "CreationDate": "2016-12-02 16:12:18",
        "validated": false,
        "QueryBody_Original": "DECLARE  @pattern nvarchar(100) = UPPER(##Pattern:string##)\n\nSELECT\n    Id AS [Comment Link],\n    Score,\n    CreationDate,\n    PostId AS [Post Link]\nFROM Comments    \nWHERE UserId = ##UserID## AND UPPER(Text) LIKE '%' + @pattern + '%'\nORDER BY CreationDate DESC"
    },
    {
        "QuerySetId": 589028,
        "Title": "Make big rocks into small rocks",
        "Description": null,
        "QueryBody": "DECLARE  @ int=50\n\n,@x int=1WHILE @>2SELECT @=@\/4*2,@x*=2PRINT replicate(@,@x)",
        "CreationDate": "2016-12-02 18:18:17",
        "validated": false,
        "QueryBody_Original": "DECLARE  @ int=50\n\n,@x int=1WHILE @>2SELECT @=@\/4*2,@x*=2PRINT replicate(@,@x)"
    },
    {
        "QuerySetId": 590205,
        "Title": "Tag Wikis and Their (lack of) Length",
        "Description": "Query 1 returns each tag wiki grouped by their length and the frequency of each length\r\n    \r\nQuery 2 returns the name of each tag wiki ordered by their length\r\n\r\nQuery 3 returns each tag wiki excerpt grouped by its length and the frequency of each length",
        "QueryBody": "SELECT  len(body) as [Length of Wiki], COUNT(len(body)) AS [Frequency]\n--FROM Posts\n--WHERE PostTypeId = 5\n--GROUP BY len(body)\n--ORDER BY COUNT(len(body)) DESC;\n\nSELECT Tags.TagName \nFROM Tags \nINNER JOIN Posts \nON Posts.Id = Tags.WikiPostId \nWHERE len(body) = 0\nORDER BY len(Posts.body)\n\nSELECT len(body) as [Length of Excerpt], COUNT(len(body)) AS [Frequency]\nFROM Posts\nWHERE PostTypeId = 5\nGROUP BY len(body)\nORDER BY len(body)",
        "CreationDate": "2016-12-04 23:25:55",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 590305,
        "Title": "Why am I not Socratic already? Good question days stunted by bad questions",
        "Description": "Have you ever found yourself wondering:\r\n\r\n\"Hey! I ask plenty of good questions! Why don't I have my (|first|second|[0-9]*th) socratic badge already?\"\r\n\r\nWell, it must be those bad questions. If you ask them, your good questions that day won't count; and unfortunately, you're often inspired to ask both good and bad questions on the same day.\r\n\r\nWith this query you'll be able to grit your teeth and curse your impetuousness when you see how many good question days you've wasted this way. And there's just one level of inner joining, to boot!\r\n\r\nCaveat: This does not take deleted posts into account, so its results can be a bit off, i.e. don't expect your next Socratic badge exactly when your 'actual' value hits the next  multiple of 100.\r\n",
        "QueryBody": "SELECT \n    sum(case when up > 0 then 1 else 0 end) as potential,\n    sum(case when up > 0 and down > 0 then 1 else 0 end) as stuntend,\n    sum(case when up > 0 and down = 0 then 1 else 0 end) as actual\nfrom (\n  SELECT\n    max(case when score > 0 then 1 else 0 end) as up,\n    max(case when score < 1 then 1 else 0 end) as down\n  from Posts\n  where OwnerUserId = ##UserId## and PostTypeId = 1 -- a question\n  group by CONVERT(VARCHAR(10), creationDate, 111) \n) question_days;",
        "CreationDate": "2017-04-12 19:26:23",
        "validated": false,
        "QueryBody_Original": "SELECT \n    sum(case when up > 0 then 1 else 0 end) as potential,\n    sum(case when up > 0 and down > 0 then 1 else 0 end) as stuntend,\n    sum(case when up > 0 and down = 0 then 1 else 0 end) as actual\nfrom (\n  SELECT\n    max(case when score > 0 then 1 else 0 end) as up,\n    max(case when score < 1 then 1 else 0 end) as down\n  from Posts\n  where OwnerUserId = ##UserId## and PostTypeId = 1 -- a question\n  group by CONVERT(VARCHAR(10), creationDate, 111) \n) question_days;"
    },
    {
        "QuerySetId": 591308,
        "Title": "All tag wiki edits by a specified user",
        "Description": null,
        "QueryBody": "SELECT \n  t.TagName,\n  h.CreationDate,\n  h.Text\nFROM\n  PostHistory AS h\n  INNER JOIN Tags AS t ON t.WikiPostId = h.PostId\nWHERE\n  h.UserId = ##UserId:int##",
        "CreationDate": "2020-09-11 17:00:39",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 592076,
        "Title": "Top Users from Algeria \/ \u0623\u0639\u0644\u0649 \u0627\u0644\u0645\u0633\u062a\u062e\u062f\u0645\u064a\u0646 \u0645\u0646 \u0627\u0644\u062c\u0632\u0627\u0626\u0631 \/ Top algerien utilisateurs stack ",
        "Description": null,
        "QueryBody": "SELECT  TOP ##Count:int?1500##\n        ROW_NUMBER() OVER(ORDER BY Reputation DESC) AS [#],\n        Id AS [User Link],\n        Reputation,\n        -- Id AS ID,\n        Age,\n        Location,\n        WebsiteUrl as Wesbite,\n        LastAccessDate AS Seen,\n        -- Views,\n        -- UpVotes,\n        -- DownVotes,\n        CreationDate   \n        \nFROM Users \nWHERE \n        Reputation >= ##MinimalReputation:int?10## \n\n        AND (\n                UPPER(Location) LIKE UPPER('%Algeria%')\n                OR UPPER(Location) LIKE UPPER('%Algerie%')\n                OR UPPER(Location) LIKE UPPER('%Algiers%')\n                OR UPPER(Location) LIKE UPPER('%\u062c\u0632\u0627\u0626\u0631%')\n                OR UPPER(Location) LIKE UPPER('%Adrar%')\n        )  \n             \nORDER BY Reputation DESC",
        "CreationDate": "2016-12-07 14:59:22",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 593135,
        "Title": "Questions that might need to be Protected",
        "Description": null,
        "QueryBody": "DECLARE  @Today date\nSELECT @Today = GetDate()\n\nSELECT TOP 100\n  Answers.ParentId AS [Post Link],\n  COUNT(Answers.Id) AS PoorQualityAnswers,\n  Questions.CreationDate AS [Asked]\nFROM Posts Answers\nINNER JOIN Posts Questions ON\n  Questions.Id = Answers.ParentId AND  \n  Questions.PostTypeId = 1 AND\n  DATEDIFF(day, Questions.CreationDate, @Today) BETWEEN 1 AND 100\nINNER JOIN Users ON\n  Answers.OwnerUserId = Users.Id AND\n  Users.Reputation < 10 \nWHERE\n  Answers.PostTypeId = 2 AND \n  (\n    LEN(Answers.Body) < 150 OR\n    (Lower(Answers.Body) LIKE '%thank%' OR Lower(Answers.Body) LIKE '%thx%' OR Lower(Answers.Body) LIKE '%also%') OR\n    Answers.Score <= 5\n  )\nGROUP BY Answers.ParentId, Questions.CreationDate\nORDER BY PoorQualityAnswers DESC",
        "CreationDate": "2016-12-09 07:19:46",
        "validated": false,
        "QueryBody_Original": "DECLARE  @Today date\nSELECT @Today = GetDate()\n\nSELECT TOP 100\n  Answers.ParentId AS [Post Link],\n  COUNT(Answers.Id) AS PoorQualityAnswers,\n  Questions.CreationDate AS [Asked]\nFROM Posts Answers\nINNER JOIN Posts Questions ON\n  Questions.Id = Answers.ParentId AND  \n  Questions.PostTypeId = 1 AND\n  DATEDIFF(day, Questions.CreationDate, @Today) BETWEEN 1 AND 100\nINNER JOIN Users ON\n  Answers.OwnerUserId = Users.Id AND\n  Users.Reputation < 10 \nWHERE\n  Answers.PostTypeId = 2 AND \n  (\n    LEN(Answers.Body) < 150 OR\n    (Lower(Answers.Body) LIKE '%thank%' OR Lower(Answers.Body) LIKE '%thx%' OR Lower(Answers.Body) LIKE '%also%') OR\n    Answers.Score <= 5\n  )\nGROUP BY Answers.ParentId, Questions.CreationDate\nORDER BY PoorQualityAnswers DESC"
    },
    {
        "QuerySetId": 593228,
        "Title": "Top user comment count between two dates",
        "Description": null,
        "QueryBody": "DECLARE  @BDate datetime = ##BDate## \nDECLARE @EDate datetime = ##EDate## \n\nSelect u.displayname, Count(c.id) as Total  from users u inner join \ncomments c on u.id=c.userid and c.CreationDate between @BDate and @EDate\ngroup by u.displayname\norder by total",
        "CreationDate": "2016-12-09 12:41:36",
        "validated": false,
        "QueryBody_Original": "DECLARE  @BDate datetime = ##BDate## \nDECLARE @EDate datetime = ##EDate## \n\nSelect u.displayname, Count(c.id) as Total  from users u inner join \ncomments c on u.id=c.userid and c.CreationDate between @BDate and @EDate\ngroup by u.displayname\norder by total"
    },
    {
        "QuerySetId": 596460,
        "Title": "Last 10 Posts From Me",
        "Description": null,
        "QueryBody": "DECLARE  @UserId int = ##UserId##\nSELECT TOP 10 * from POsts where OwnerUserId = @UserId Order by LastActivityDate DESC",
        "CreationDate": "2016-12-12 20:52:38",
        "validated": false,
        "QueryBody_Original": "DECLARE  @UserId int = ##UserId##\nSELECT TOP 10 * from POsts where OwnerUserId = @UserId Order by LastActivityDate DESC"
    },
    {
        "QuerySetId": 596663,
        "Title": "Time when new questions are most downvoted",
        "Description": null,
        "QueryBody": "DECLARE  @UserId int = ##UserId##\n\n--SELECT * FROM VoteTypes\n--select * from PostTypes\n\n\nSELECT TOP 20 \n    Posts.CreationDate\n    --COUNT(*) AS UpVotes \nFROM Posts\nINNER JOIN Votes ON Votes.PostId = Posts.Id and Votes.VoteTypeId = 3 --Downvote\n\nWHERE \n    Posts.PostTypeId = 1 -- questions\n--GROUP BY TagName \n--ORDER BY UpVotes DESC",
        "CreationDate": "2016-12-13 03:39:37",
        "validated": false,
        "QueryBody_Original": "DECLARE  @UserId int = ##UserId##\n\n--SELECT * FROM VoteTypes\n--select * from PostTypes\n\n\nSELECT TOP 20 \n    Posts.CreationDate\n    --COUNT(*) AS UpVotes \nFROM Posts\nINNER JOIN Votes ON Votes.PostId = Posts.Id and Votes.VoteTypeId = 3 --Downvote\n\nWHERE \n    Posts.PostTypeId = 1 -- questions\n--GROUP BY TagName \n--ORDER BY UpVotes DESC"
    },
    {
        "QuerySetId": 597393,
        "Title": "Progress in number of badges per type",
        "Description": null,
        "QueryBody": "SELECT  dateadd(day, datediff(day, 0, Date), 0) AS Date, Class, COUNT(*)\n  FROM Badges\n  WHERE UserId = ##UserId:int##\n  GROUP BY dateadd(day, datediff(day, 0, Date), 0), Class",
        "CreationDate": "2016-12-13 20:36:56",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 597514,
        "Title": "Anonymous Feedback + Votes over time on a Specific Tag",
        "Description": null,
        "QueryBody": "DECLARE  @StartDate DATETIME = '2014-1-1'\n        ,@EndDate DATETIME = DATEADD(WEEK, DATEDIFF(WEEK, 0, GETDATE()), -1) -- First Day Of current Month\n\n--\nSELECT RoundToWeek, TagName, TagCount\nFROM \n(\n  SELECT  \n    DATEADD(WEEK, DATEDIFF(WEEK, 0, CreationDate), 0) RoundToWeek\n    , COUNT(PostTags.TagID) TagCount\n    , TagID\n  FROM PostTags\n  LEFT JOIN Posts ON\n    PostTags.PostId = Posts.Id\n  WHERE \n    PostTags.TagID IN (SELECT Id FROM #MyTags)\n    AND CreationDate > @StartDate\n    AND CreationDate < @EndDate\n  GROUP BY\n    DATEADD(WEEK, DATEDIFF(WEEK, 0, CreationDate), 0)\n    , PostTags.TagID\n)TagCountPerWekk\nLEFT JOIN Tags ON\n  TagCountPerWekk.TagId = Tags.Id\nORDER BY RoundToWeek DESC, TagName ASC",
        "CreationDate": "2017-04-25 21:16:02",
        "validated": false,
        "QueryBody_Original": "DECLARE  @StartDate DATETIME = '2014-1-1'\n        ,@EndDate DATETIME = DATEADD(WEEK, DATEDIFF(WEEK, 0, GETDATE()), -1) -- First Day Of current Month\n\n--\nSELECT RoundToWeek, TagName, TagCount\nFROM \n(\n  SELECT  \n    DATEADD(WEEK, DATEDIFF(WEEK, 0, CreationDate), 0) RoundToWeek\n    , COUNT(PostTags.TagID) TagCount\n    , TagID\n  FROM PostTags\n  LEFT JOIN Posts ON\n    PostTags.PostId = Posts.Id\n  WHERE \n    PostTags.TagID IN (SELECT Id FROM #MyTags)\n    AND CreationDate > @StartDate\n    AND CreationDate < @EndDate\n  GROUP BY\n    DATEADD(WEEK, DATEDIFF(WEEK, 0, CreationDate), 0)\n    , PostTags.TagID\n)TagCountPerWekk\nLEFT JOIN Tags ON\n  TagCountPerWekk.TagId = Tags.Id\nORDER BY RoundToWeek DESC, TagName ASC"
    },
    {
        "QuerySetId": 598247,
        "Title": "Questions with a single tag",
        "Description": null,
        "QueryBody": "SELECT  TOP 100 Id AS [Post Link], CreationDate, Score\n  FROM Posts\n  WHERE Tags = '<' + LOWER(##TagName:string##) + '>'\n  ORDER BY CreationDate DESC",
        "CreationDate": "2016-12-14 13:23:21",
        "validated": false,
        "QueryBody_Original": "SELECT  TOP 100 Id AS [Post Link], CreationDate, Score\n  FROM Posts\n  WHERE Tags = '<' + LOWER(##TagName:string##) + '>'\n  ORDER BY CreationDate DESC"
    },
    {
        "QuerySetId": 598957,
        "Title": "Top Users in the Android Tag",
        "Description": null,
        "QueryBody": "DECLARE  @tag_id int = (select id from tags where tagname = 'android');\n\n--select rank() over (order by score desc) \"Rank\", * from (\nselect top (500)\n  rank() over (order by sum(answers.score) desc) \"Rank\",\n  users.id \"User Link\"\n  ,sum(answers.score) as \"Score\"\nfrom users\njoin posts answers on (users.id = answers.owneruserid)\njoin posts parent on (answers.parentid = parent.id)\njoin posttags on (parent.id = posttags.postid)\nwhere posttags.tagid = @tag_id\nand answers.posttypeid = 2  -- answers only\ngroup by users.id\norder by sum(answers.score) desc\n;",
        "CreationDate": "2019-09-18 13:21:18",
        "validated": false,
        "QueryBody_Original": "DECLARE  @tag_id int = (select id from tags where tagname = 'android');\n\n--select rank() over (order by score desc) \"Rank\", * from (\nselect top (500)\n  rank() over (order by sum(answers.score) desc) \"Rank\",\n  users.id \"User Link\"\n  ,sum(answers.score) as \"Score\"\nfrom users\njoin posts answers on (users.id = answers.owneruserid)\njoin posts parent on (answers.parentid = parent.id)\njoin posttags on (parent.id = posttags.postid)\nwhere posttags.tagid = @tag_id\nand answers.posttypeid = 2  -- answers only\ngroup by users.id\norder by sum(answers.score) desc\n;"
    },
    {
        "QuerySetId": 604896,
        "Title": "Find Stack Overflow Users In Ahmedabad (with user-links)",
        "Description": "A simply query to find users in Ahmadabad. Added user links to the original version.\r\n",
        "QueryBody": "WITH  user-links)\n-- A simply query to find users in your city or country. Added user links.\n\nselect Id [User Link], Reputation, DisplayName, Location\nfrom Users\nwhere Location like 'Ahmedabad%'\nOR  Location like 'Gujarat%'\norder by Reputation desc",
        "CreationDate": "2017-01-16 18:52:29",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 605545,
        "Title": "Comments of mine by score",
        "Description": null,
        "QueryBody": "SELECT  Score, Id as [Comment Link]\nfrom Comments\nwhere UserId = ##UserId##\norder by Score desc",
        "CreationDate": "2016-12-20 07:29:09",
        "validated": false,
        "QueryBody_Original": "SELECT  Score, Id as [Comment Link]\nfrom Comments\nwhere UserId = ##UserId##\norder by Score desc"
    },
    {
        "QuerySetId": 605990,
        "Title": "Number of other's comments on my posts",
        "Description": null,
        "QueryBody": "SELECT  p.id AS [Post Link], COUNT(*) AS count_\n  FROM comments AS c INNER JOIN posts AS p ON c.postid = p.id\n  WHERE p.owneruserid = ##UserId:int##\n    AND p.owneruserid != c.userid\n  GROUP BY p.id\n  ORDER BY count_ DESC",
        "CreationDate": "2016-12-21 00:15:12",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 606000,
        "Title": "Always end your questions with a \u2018?\u2019\u200a",
        "Description": null,
        "QueryBody": "WITH -a-stack-overflow-bigquery-and-other-stories-2470ebcda7f#.ta5dpi67m\nSELECT \n  DATEPART(YEAR, creationdate) year, \n  (CASE WHEN title LIKE '%?' then 'ends WITH ?' else 'does not' end) ends_WITH_question,\n  ROUND(COUNT(acceptedanswerid )* 100\/COUNT(*), 2) as answered ,\n  AVG(answercount * 1.0) as avg_answers \nFROM posts\nWHERE\n  posttypeid = 1\nGROUP BY\n  DATEPART(YEAR, creationdate),\n  (CASE WHEN title LIKE '%?' then 'ends WITH ?' else 'does not' end)\nORDER BY\n  DATEPART(YEAR, creationdate),\n  (CASE WHEN title LIKE '%?' then 'ends WITH ?' else 'does not' end)",
        "CreationDate": "2016-12-21 00:28:33",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 606103,
        "Title": "\"Hammer\" closed questions for user",
        "Description": null,
        "QueryBody": "SELECT  *\nfrom PostHistory hc\nwhere hc.PostHistoryTypeId=10\nand hc.Comment like '101%'\nand hc.Text like '%\"OriginalQuestionIds\":%15112125%\"Id\":##VoterId##,\"DisplayName\":\"%\",\"BindingReason\":{\"GoldTagBadge\"%'\nand hc.UserId in (##VoterId##, -1)",
        "CreationDate": "2017-05-09 20:12:54",
        "validated": false,
        "QueryBody_Original": "SELECT  *\nfrom PostHistory hc\nwhere hc.PostHistoryTypeId=10\nand hc.Comment like '101%'\nand hc.Text like '%\"OriginalQuestionIds\":%15112125%\"Id\":##VoterId##,\"DisplayName\":\"%\",\"BindingReason\":{\"GoldTagBadge\"%'\nand hc.UserId in (##VoterId##, -1)"
    },
    {
        "QuerySetId": 606112,
        "Title": "My Comments, with question links",
        "Description": null,
        "QueryBody": "DECLARE  @UserId int = ##UserId##\n\nSELECT \n    PostId AS [Post Link], Text, Score, CreationDate\nFROM \n    Comments\nWHERE \n    UserId = @UserId\nORDER BY \n    CreationDate ASC",
        "CreationDate": "2016-12-21 03:00:47",
        "validated": false,
        "QueryBody_Original": "DECLARE  @UserId int = ##UserId##\n\nSELECT \n    PostId AS [Post Link], Text, Score, CreationDate\nFROM \n    Comments\nWHERE \n    UserId = @UserId\nORDER BY \n    CreationDate ASC"
    },
    {
        "QuerySetId": 607250,
        "Title": "Reviews associated with a specific question",
        "Description": "Finds reviews associated with a given question.",
        "QueryBody": "SELECT  p.Title, rt.Id AS ReviewID, rtt.Name, rts.Name AS ReviewState, rt.CreationDate, rtr.*\n  FROM ReviewTasks rt\n    INNER JOIN Posts p ON rt.PostId = p.Id\n    INNER JOIN ReviewTaskTypes rtt ON rt.ReviewTaskTypeId = rtt.Id\n    INNER JOIN ReviewTaskStates rts ON rt.ReviewTaskStateId = rts.Id\n    INNER JOIN ReviewTaskResults rtr ON rtr.ReviewTaskId = rt.Id\n    --INNER JOIN ReviewTaskResultTypes rtrt ON rt.CompletedByReviewTaskId = rtrt.Id\n  WHERE rt.PostId = ##QuestionId##\n  ORDER BY rt.Id DESC\n  \nSELECT * FROM ReviewTaskStates",
        "CreationDate": "2016-12-30 03:13:22",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 607481,
        "Title": "Number of users with minRep created since Date",
        "Description": null,
        "QueryBody": "SELECT  count(1) from Users \nwhere Reputation >= ##minRep:int?200##\nand CreationDate >= '##Date##'",
        "CreationDate": "2016-12-24 01:05:29",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 607566,
        "Title": "How to find all answers that a certain person has answered me?",
        "Description": "http:\/\/meta.stackoverflow.com\/questions\/340245\/how-to-find-all-answers-that-a-certain-person-has-answered-me",
        "QueryBody": "WITH  questions as \n(select q.id \n     , q.owneruserid \nfrom posts q \ninner join posts a on q.id = a.parentid\nwhere a.owneruserid = ##userid:int?3577745##\n)\n\nselect q.id as [Post Link]\n     , q.owneruserid as [User Link]\n     , (select count(*) \n        from questions qs \n        where q.owneruserid = qs.owneruserid)\n        as [# tot questions]\nfrom questions q\norder by 3 desc , 2",
        "CreationDate": "2016-12-25 23:06:51",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 607996,
        "Title": "Comments by user mentioning specific phrases",
        "Description": null,
        "QueryBody": "DECLARE  @userId AS INT = ##UserId:int##;\nDECLARE @phrase1 AS NVARCHAR(60) = ##Phrase1:string? ##;\nDECLARE @phrase2 AS NVARCHAR(60) = ##Phrase2:string? ##;\nDECLARE @phrase3 AS NVARCHAR(60) = ##Phrase3:string? ##;\n\nSELECT TOP ##Limit:int?100##\n  c.Id AS [Comment Link],\n  c.Text,\n  c.Score,\n  c.CreationDate AS [Comment Date]\nFROM Comments c\nWHERE \n  UserId = @userId\n  AND (@phrase1 = '' OR LOWER(c.Text) LIKE '%' + @phrase1 + '%')\n  AND (@phrase2 = '' OR LOWER(c.Text) LIKE '%' + @phrase2 + '%')\n  AND (@phrase3 = '' OR LOWER(c.Text) LIKE '%' + @phrase3 + '%')\nORDER BY CreationDate DESC",
        "CreationDate": "2017-12-12 18:15:52",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 608142,
        "Title": "Given a user ID and a site, attempt to find all comments on posts that are valid for the Cleanup Cre",
        "Description": null,
        "QueryBody": "SELECT  DISTINCT c.PostId as [Post Link], c.Text as \"Comment Text\", c.Score as \"Comment Score\", c.CreationDate as \"Comment Date\"\nFROM Comments c\nJOIN PostHistory h on c.PostId = h.PostId\nJOIN Posts p on c.PostId = p.Id\nWHERE c.UserId = ##UserId##\n  AND h.CreationDate > c.CreationDate\n  AND c.Score > 0\n  AND p.OwnerUserId = h.UserId\n  AND p.OwnerUserId != ##UserId##",
        "CreationDate": "2016-12-26 10:50:08",
        "validated": false,
        "QueryBody_Original": "SELECT  DISTINCT c.PostId as [Post Link], c.Text as \"Comment Text\", c.Score as \"Comment Score\", c.CreationDate as \"Comment Date\"\nFROM Comments c\nJOIN PostHistory h on c.PostId = h.PostId\nJOIN Posts p on c.PostId = p.Id\nWHERE c.UserId = ##UserId##\n  AND h.CreationDate > c.CreationDate\n  AND c.Score > 0\n  AND p.OwnerUserId = h.UserId\n  AND p.OwnerUserId != ##UserId##"
    },
    {
        "QuerySetId": 608253,
        "Title": "Top askers in the past n days with avg questions asked per day",
        "Description": null,
        "QueryBody": "DECLARE  @days_diff int = ##DaysBack:int?30##\nDECLARE @num_users int = ##HowManyUsers:int?100##\n\nSELECT TOP (@num_users)\n  p.OwnerUserId AS [User Link],\n  COUNT(*) AS [Count],\n  ROUND(COUNT(*) \/ CONVERT(DECIMAL(10,2), @days_diff),2) Avg_Qs_per_Day\nFROM\n  Posts p\nWHERE\n  p.PostTypeId = 1 -- questions\n  AND p.CreationDate >= DATEADD(DAY, -@days_diff, GETDATE())\nGROUP BY\n  p.OwnerUserId\nORDER BY\n  [Count] DESC",
        "CreationDate": "2016-12-26 21:38:40",
        "validated": false,
        "QueryBody_Original": "DECLARE  @days_diff int = ##DaysBack:int?30##\nDECLARE @num_users int = ##HowManyUsers:int?100##\n\nSELECT TOP (@num_users)\n  p.OwnerUserId AS [User Link],\n  COUNT(*) AS [Count],\n  ROUND(COUNT(*) \/ CONVERT(DECIMAL(10,2), @days_diff),2) Avg_Qs_per_Day\nFROM\n  Posts p\nWHERE\n  p.PostTypeId = 1 -- questions\n  AND p.CreationDate >= DATEADD(DAY, -@days_diff, GETDATE())\nGROUP BY\n  p.OwnerUserId\nORDER BY\n  [Count] DESC"
    },
    {
        "QuerySetId": 608278,
        "Title": "Old questions with no answers",
        "Description": null,
        "QueryBody": "DECLARE  @maxAskTime DATETIME = convert(DATETIME, '##maxAskTime?2012\/10\/01 00:00:00##')\nDECLARE @minAskTime DATETIME = convert(DATETIME, '##minAskTime?2010\/10\/01 00:00:00##')\n\nSELECT TOP ##topN?500##\nQ.Id AS [Post Link], Q.ViewCount AS Views, \n  Q.Score, Q.CreationDate as [Creation Date], \n  Q.AnswerCount AS Answers\nFROM\n  Posts Q\nWHERE\n  Q.PostTypeId = 1 AND\n  Q.ClosedDate IS NULL AND\n  Q.CommunityOwnedDate IS NULL AND\n  Q.CreationDate < @maxAskTime AND\n  Q.CreationDate > @minAskTime AND\n  Q.AnswerCount = 0 AND\n  Q.Score>=##minScore?0## AND\n  Q.Score<=##maxScore?3##\nORDER BY Q.CreationDate ASC",
        "CreationDate": "2016-12-27 16:27:13",
        "validated": false,
        "QueryBody_Original": "DECLARE  @maxAskTime DATETIME = convert(DATETIME, '##maxAskTime?2012\/10\/01 00:00:00##')\nDECLARE @minAskTime DATETIME = convert(DATETIME, '##minAskTime?2010\/10\/01 00:00:00##')\n\nSELECT TOP ##topN?500##\nQ.Id AS [Post Link], Q.ViewCount AS Views, \n  Q.Score, Q.CreationDate as [Creation Date], \n  Q.AnswerCount AS Answers\nFROM\n  Posts Q\nWHERE\n  Q.PostTypeId = 1 AND\n  Q.ClosedDate IS NULL AND\n  Q.CommunityOwnedDate IS NULL AND\n  Q.CreationDate < @maxAskTime AND\n  Q.CreationDate > @minAskTime AND\n  Q.AnswerCount = 0 AND\n  Q.Score>=##minScore?0## AND\n  Q.Score<=##maxScore?3##\nORDER BY Q.CreationDate ASC"
    },
    {
        "QuerySetId": 609039,
        "Title": "Questions with scores less than 0",
        "Description": null,
        "QueryBody": "WITH  a score of less than -20\nselect q.Score, q.ID, q.Title\nfrom Posts q\nwhere q.Score = 0 and q.PostTypeId = 1\n\nselect q.Score, q.ID, q.Title\nfrom Posts q\nwhere q.PostTypeId = 1",
        "CreationDate": "2016-12-28 04:14:11",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 609510,
        "Title": "Best R questions in the past month",
        "Description": null,
        "QueryBody": "SELECT    TOP ##limit?50##\n         P.Id AS [Post Link], P.Tags, P.Score, P.AnswerCount, P.CreationDate\nFROM     Posts P\nWHERE    P.CreationDate > DATEADD(mm, -##lookback?1##, CURRENT_TIMESTAMP)\nORDER BY P.Score DESC, P.CreationDate DESC",
        "CreationDate": "2016-12-29 08:49:20",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 609538,
        "Title": "Comments by one user on answers by another user",
        "Description": null,
        "QueryBody": "SELECT  a.Id AS \"Post Link\", a.Score AS \"A.Score\", \n  a.Body AS \"A.Body\", c.Text AS \"C.Text\", c.Score AS \"C.Score\"\n\nFROM Posts q\n  JOIN Posts a ON q.Id = a.ParentId\n  JOIN Comments c ON a.Id = c.PostId\n\nWHERE a.PostTypeId = 2\n  AND a.OwnerUserId = ##AnswererID:int##\n  AND c.UserId = ##CommenterID:int##\n\nORDER BY a.Score DESC",
        "CreationDate": "2016-12-29 10:48:47",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 609572,
        "Title": "Comments by a specific user containing given keyword ",
        "Description": null,
        "QueryBody": "SELECT  Id AS [Comment Link], text, CreationDate\nFROM Comments\nWHERE Text LIKE '%##Word##%'\nAND UserID=##userid##\nORDER BY CreationDate",
        "CreationDate": "2016-12-29 15:37:52",
        "validated": false,
        "QueryBody_Original": "SELECT  Id AS [Comment Link], text, CreationDate\nFROM Comments\nWHERE Text LIKE '%##Word##%'\nAND UserID=##userid##\nORDER BY CreationDate"
    },
    {
        "QuerySetId": 610401,
        "Title": "Best of Code Review 2016 - Best Newcomer (answer) category",
        "Description": null,
        "QueryBody": "DECLARE  @TargetYear INT = 2016;\nDECLARE @Answer INT = 2;\nWITH FirstQuestions AS (\n  SELECT MIN(p.Id) AS [PostId]\n  FROM Posts AS p\n  WHERE p.PostTypeId = @Answer\n  GROUP BY p.OwnerUserId\n)\nSELECT\n  fq.PostId AS [Post Link],\n  p.OwnerUserId AS [User Link],\n  p.Score,\n  p.CreationDate\nFROM \n  FirstQuestions AS fq\n  JOIN Posts AS p\n    ON fq.PostId = p.Id\nWHERE\n  DATEPART(YEAR, CreationDate) = @TargetYear\n  AND p.ClosedDate IS NULL\nGROUP BY\n  fq.PostId,\n  p.OwnerUserId,\n  p.Score,\n  p.CreationDate\nORDER BY \n  p.Score DESC,\n  p.CreationDate ASC",
        "CreationDate": "2017-01-02 06:20:21",
        "validated": false,
        "QueryBody_Original": "DECLARE  @TargetYear INT = 2016;\nDECLARE @Answer INT = 2;\nWITH FirstQuestions AS (\n  SELECT MIN(p.Id) AS [PostId]\n  FROM Posts AS p\n  WHERE p.PostTypeId = @Answer\n  GROUP BY p.OwnerUserId\n)\nSELECT\n  fq.PostId AS [Post Link],\n  p.OwnerUserId AS [User Link],\n  p.Score,\n  p.CreationDate\nFROM \n  FirstQuestions AS fq\n  JOIN Posts AS p\n    ON fq.PostId = p.Id\nWHERE\n  DATEPART(YEAR, CreationDate) = @TargetYear\n  AND p.ClosedDate IS NULL\nGROUP BY\n  fq.PostId,\n  p.OwnerUserId,\n  p.Score,\n  p.CreationDate\nORDER BY \n  p.Score DESC,\n  p.CreationDate ASC"
    },
    {
        "QuerySetId": 611421,
        "Title": "Best of Code Review - Best Newcomer (question) category",
        "Description": null,
        "QueryBody": "DECLARE  @Year AS INT = ##Year:int?2016##",
        "CreationDate": "2017-01-04 21:17:00",
        "validated": false,
        "QueryBody_Original": "DECLARE  @Year AS INT = ##Year:int?2016##"
    },
    {
        "QuerySetId": 611609,
        "Title": "Comments by a specific user, sorted by score",
        "Description": null,
        "QueryBody": "SELECT  p.Id AS \"Post Link\", p.Score AS \"P.Score\", \n  p.Body AS \"P.Body\", c.Text AS \"C.Text\", c.Score AS \"C.Score\", c.CreationDate\n\nFROM Posts p\n  JOIN Comments c ON p.Id = c.PostId\n\nWHERE c.UserId = ##CommenterID:int##\n  AND c.Score >= ##MinimumCommentScore##\n\nORDER BY c.Score DESC",
        "CreationDate": "2017-01-05 09:25:40",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 611889,
        "Title": "Questions with accepted answer matching Differential Topology",
        "Description": null,
        "QueryBody": "DECLARE  @phrase AS NVARCHAR(60) = ##Text:string? ##;\n\nSELECT TOP ##Limit:int?100##\n  a.OwnerUserId,\n  a.OwnerUserId [User Link],\n  q.Id [Post Link]\nFROM Posts q\nJOIN Posts a\n  ON q.AcceptedAnswerId IS NOT NULL\n  AND q.AcceptedAnswerId = a.Id\nWHERE\n  q.Body LIKE '%' + @phrase + '%'\n  OR q.Title LIKE '%' + @phrase + '%'\nORDER BY a.Score DESC",
        "CreationDate": "2017-01-06 01:16:59",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 612171,
        "Title": "Asker and Answerer for a specified tag and date range",
        "Description": "For graph analysis you'd need the source, target and weight i.e. Asker -> Answerer or vice versa. This query will return the same for a specified tag, date range and answer score. You can use 'Score' as the weight.",
        "QueryBody": "DECLARE  @tag0 nvarchar(25) = ##tag0:string?r##\nDECLARE @start datetime = ##start:string?2014-01-01##\nDECLARE @end datetime = ##end:string?2014-12-31##\nDECLARE @minscore int = ##minscore?25##\n\nSELECT a.Id AS [Post Link], u.DisplayName AS \"Asker\", au.DisplayName AS \"Answerer\",\na.Score, au.Reputation, p.CreationDate AS \"Q_Date\", a.CreationDate AS \"A_Date\"\n  \nFROM Tags t\n  JOIN PostTags pt ON pt.TagId = t.Id\n  JOIN Posts p ON p.Id = pt.PostId\n  JOIN Posts a ON  a.ParentId = p.Id\n  JOIN Users u ON p.OwnerUserId = u.Id\n  JOIN Users au ON a.OwnerUserId = au.Id\nWHERE TagName = @tag0\n  AND a.PostTypeId = 2\n  AND a.CreationDate < @end AND a.CreationDate > @start\n  AND a.Score >= @minscore\nORDER BY a.Score DESC",
        "CreationDate": "2017-01-08 18:15:21",
        "validated": false,
        "QueryBody_Original": "DECLARE  @tag0 nvarchar(25) = ##tag0:string?r##\nDECLARE @start datetime = ##start:string?2014-01-01##\nDECLARE @end datetime = ##end:string?2014-12-31##\nDECLARE @minscore int = ##minscore?25##\n\nSELECT a.Id AS [Post Link], u.DisplayName AS \"Asker\", au.DisplayName AS \"Answerer\",\na.Score, au.Reputation, p.CreationDate AS \"Q_Date\", a.CreationDate AS \"A_Date\"\n  \nFROM Tags t\n  JOIN PostTags pt ON pt.TagId = t.Id\n  JOIN Posts p ON p.Id = pt.PostId\n  JOIN Posts a ON  a.ParentId = p.Id\n  JOIN Users u ON p.OwnerUserId = u.Id\n  JOIN Users au ON a.OwnerUserId = au.Id\nWHERE TagName = @tag0\n  AND a.PostTypeId = 2\n  AND a.CreationDate < @end AND a.CreationDate > @start\n  AND a.Score >= @minscore\nORDER BY a.Score DESC"
    },
    {
        "QuerySetId": 612476,
        "Title": "Gordon Linoff's Days Off since 2014",
        "Description": null,
        "QueryBody": "DECLARE  @FromDate date = '20140101';\nDECLARE @ThruDate date = (select max(LastAccessDate) from users where id=1144035);\n\nwith n as (select n from (values(0),(1),(2),(3),(4),(5),(6),(7),(8),(9)) t(n))\n, d as (\n  select top (datediff(day, @FromDate, @ThruDate)+1)  DateValue=convert(date,dateadd(day, row_number() over (order by (select 1)) -1, @fromdate))\n    from         n as deka\n      cross join n as hecto\n      cross join n as kilo     \/* 2.73 years *\/\n      cross join n as [10k]    \/* 27.3 years *\/\n      --cross join n as [100k] \/* 273  years *\/\n      --cross join n as mega\n)\n\nselect d.DateValue, Posts=count(p.Id)\nfrom d \n  left join posts p on d.DateValue = convert(date,p.creationdate) \n                  and  p.OwnerUserId = 1144035\ngroup by d.DateValue\nhaving count(p.Id) = 0",
        "CreationDate": "2017-01-07 19:33:56",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 613071,
        "Title": "sequence 1, 2, 3, 3, 2, 1 v2",
        "Description": null,
        "QueryBody": "DECLARE  @n int = 3;\nDECLARE @m int = 4;\n\nWITH numbers(v) AS(\n\tSELECT ROW_NUMBER() OVER(ORDER BY (SELECT NULL))\n\tFROM (VALUES(1), (2), (3), (4), (5), (6), (7), (8), (9)) AS n0(x)\n)\nSELECT ord = @n*(v+2*m) + n\n\t, n*(1-v) + ABS(-@n-1+n)*v\nFROM (SELECT TOP(@n) v FROM numbers ORDER BY v ASC) n(n)\nCROSS JOIN (VALUES(0), (1)) AS s(v)\nCROSS JOIN (SELECT TOP(@m) v-1 FROM numbers ORDER BY v ASC) m(m)\nORDER BY ord",
        "CreationDate": "2019-08-07 11:26:14",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 613075,
        "Title": "sequence 1, 2, 3, 3, 2, 1...",
        "Description": null,
        "QueryBody": "DECLARE  @n int = 3\nDECLARE @m int = 4;\n\nWITH numbers(x) AS(\n\tSELECT ROW_NUMBER() OVER(ORDER BY (SELECT NULL))\n\tFROM (VALUES(0), (0), (0), (0), (0), (0), (0), (0), (0), (0)) AS n0(x)\n\tCROSS JOIN (VALUES(0), (0), (0), (0), (0), (0), (0), (0), (0), (0)) AS n1(x)\n\tCROSS JOIN (VALUES(0), (0), (0), (0), (0), (0), (0), (0), (0), (0)) AS n2(x)\n)\nSELECT x\n\t, x % (2*@n) +\n\t\t (1-2*(x % @n)) * ( ((x-1) \/ @n) % 2)\nFROM (SELECT TOP(2*@n*@m) x FROM numbers) v(x)\nORDER BY x\n;",
        "CreationDate": "2017-01-09 21:13:05",
        "validated": false,
        "QueryBody_Original": "DECLARE  @n int = 3\nDECLARE @m int = 4;\n\nWITH numbers(x) AS(\n\tSELECT ROW_NUMBER() OVER(ORDER BY (SELECT NULL))\n\tFROM (VALUES(0), (0), (0), (0), (0), (0), (0), (0), (0), (0)) AS n0(x)\n\tCROSS JOIN (VALUES(0), (0), (0), (0), (0), (0), (0), (0), (0), (0)) AS n1(x)\n\tCROSS JOIN (VALUES(0), (0), (0), (0), (0), (0), (0), (0), (0), (0)) AS n2(x)\n)\nSELECT x\n\t, x % (2*@n) +\n\t\t (1-2*(x % @n)) * ( ((x-1) \/ @n) % 2)\nFROM (SELECT TOP(2*@n*@m) x FROM numbers) v(x)\nORDER BY x\n;"
    },
    {
        "QuerySetId": 613202,
        "Title": "duplicates linked to a post",
        "Description": null,
        "QueryBody": "SELECT  postid as [Post Link] \nfrom postlinks pl\ninner join posts p on p.id = pl.postid\nwhere relatedpostid = ##postid?218384##\nand linktypeid = 3  -- duplicate",
        "CreationDate": "2017-01-10 01:47:15",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 613285,
        "Title": "Top viewed questions by year",
        "Description": null,
        "QueryBody": "SELECT  TOP ##limit?10## Id AS [Post Link], ViewCount\nFROM Posts p\nWHERE YEAR(CreationDate)=##year?2016##\n      and PostTypeId=1\nORDER BY ViewCount DESC;",
        "CreationDate": "2017-01-28 01:31:45",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 613286,
        "Title": "Top answers by score or the year",
        "Description": null,
        "QueryBody": "SELECT  top ##limit?10##\n       Id as [Post Link], \n       Score\nfrom Posts p\nwhere year(CreationDate) = ##year?2016##\n      and p.PostTypeId = 2\norder by Score desc",
        "CreationDate": "2017-01-10 05:45:55",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 613724,
        "Title": "Get Ukrainian users with reputation > 200",
        "Description": null,
        "QueryBody": "WITH  user-links)\n-- A simply query to find users in your city or country. Added user links.\n\nselect Id [User Link], Reputation, DisplayName, Location\nfrom Users\nwhere Location like '%##Location##%'\nand Reputation > 200\norder by Reputation desc",
        "CreationDate": "2017-01-11 15:50:41",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 613862,
        "Title": "Number of upvotes per post",
        "Description": null,
        "QueryBody": "DECLARE  @totalNumberOfUpvotes int\nDECLARE @totalNumberOfQuestions float\nDECLARE @averageUpvotePerQuestion float\n\nselect @totalNumberOfUpvotes = sum(UpVotes) FROM Users ;\nselect @totalNumberOfQuestions = sum(PostTypeId) FROM Posts where PostTypeId='1';\n\nselect @averageUpvotePerQuestion = @totalNumberOfUpvotes \/ @totalNumberOfQuestions \nselect @averageUpvotePerQuestion as 'The average number of upvotes for each question'",
        "CreationDate": "2017-01-11 21:16:07",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 613888,
        "Title": "test query for empty rows",
        "Description": null,
        "QueryBody": "DECLARE  @UserId int =70\n\nSELECT Posts.Id as [Post Link]\nFROM Posts\nWHERE Posts.OwnerUserId = @UserId",
        "CreationDate": "2017-01-11 03:16:27",
        "validated": false,
        "QueryBody_Original": "DECLARE  @UserId int =70\n\nSELECT Posts.Id as [Post Link]\nFROM Posts\nWHERE Posts.OwnerUserId = @UserId"
    },
    {
        "QuerySetId": 614229,
        "Title": "Post by user, Vote on post and Vote by user?",
        "Description": null,
        "QueryBody": "SELECT  * from Posts where PostTypeId=2 AND OwnerUserId=2441156\n\nSELECT Id AS [Post Link], * from Posts where Id=23281808\n\nSELECT * from Votes where PostId=23281808",
        "CreationDate": "2017-01-11 18:37:13",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 614297,
        "Title": "Post by user, Vote on post but not user by vote",
        "Description": null,
        "QueryBody": "SELECT  * from Posts where PostTypeId=2 AND OwnerUserId=2441156\n\n--Sort them by votes and pick one that has 1+ votes\nSELECT Id AS [Post Link], * from Posts where Id=23281808\n\n--Use the Answer ID to see Votes info\nSELECT * from Votes where PostId=23281808\n\n--The user info is blank",
        "CreationDate": "2017-01-11 18:40:11",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 614600,
        "Title": "Quantas perguntas eu respondi de determinado usu\u00e1rio?",
        "Description": null,
        "QueryBody": "SELECT \n  Pergunta.Id, \n  Pergunta.Title,\n  Resposta.Id [IdMinhaResposta],\n  Pergunta.AcceptedAnswerId [IdRespostaAceita]\n\nFrom Posts [Pergunta]\nInner Join Posts [Resposta] \n  On Resposta.ParentId = Pergunta.Id \n  And Resposta.OwnerUserId = ##MyUserId##\n\nWhere \n  Pergunta.PostTypeId = 1 And \n  Pergunta.OwnerUserId = ##UserId##",
        "CreationDate": "2017-01-11 22:27:49",
        "validated": false,
        "QueryBody_Original": "SELECT \n  Pergunta.Id, \n  Pergunta.Title,\n  Resposta.Id [IdMinhaResposta],\n  Pergunta.AcceptedAnswerId [IdRespostaAceita]\n\nFrom Posts [Pergunta]\nInner Join Posts [Resposta] \n  On Resposta.ParentId = Pergunta.Id \n  And Resposta.OwnerUserId = ##MyUserId##\n\nWhere \n  Pergunta.PostTypeId = 1 And \n  Pergunta.OwnerUserId = ##UserId##"
    },
    {
        "QuerySetId": 614655,
        "Title": "TOP N USERS BY COUNTRY",
        "Description": null,
        "QueryBody": "SELECT \n    TOP ##Count##\n    ROW_NUMBER() OVER(ORDER BY Reputation DESC) AS [#], \n    Id AS [User Link], \n    Reputation\nFROM\n    Users\nWHERE\n    LOWER(Location) LIKE LOWER('%##CountryName##%')\nORDER BY\n    Reputation DESC;",
        "CreationDate": "2017-01-12 01:02:32",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 615861,
        "Title": "Recent post by given user",
        "Description": null,
        "QueryBody": "SELECT  TOP ##number?100##\nPosts.Id as [Post Link], Score, CreationDate\nFROM Posts\nWHERE OwnerUserId=##userid##\nORDER BY CreationDate DESC",
        "CreationDate": "2017-01-14 17:34:40",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 615862,
        "Title": "Accepted answers by a given user",
        "Description": null,
        "QueryBody": "SELECT  TOP ##number?100##\na.Id as [Post Link], a.Score, a.CreationDate\nFROM\n    Posts q\n  INNER JOIN\n    Posts a ON q.AcceptedAnswerId = a.Id\nWHERE a.OwnerUserId=##userid##\nORDER BY a.CreationDate DESC",
        "CreationDate": "2017-01-14 17:40:32",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 615875,
        "Title": "Comments containing given keyword on my posts",
        "Description": null,
        "QueryBody": "SELECT  c.Id AS [Comment Link], c.text, c.CreationDate, p.Id as [Post Link]\nFROM Comments c JOIN Posts p ON (c.PostId=p.Id)\nWHERE Text LIKE '%##Word##%'\nAND p.OwnerUserID=##userid##\nORDER BY CreationDate",
        "CreationDate": "2017-01-14 19:00:22",
        "validated": false,
        "QueryBody_Original": "SELECT  c.Id AS [Comment Link], c.text, c.CreationDate, p.Id as [Post Link]\nFROM Comments c JOIN Posts p ON (c.PostId=p.Id)\nWHERE Text LIKE '%##Word##%'\nAND p.OwnerUserID=##userid##\nORDER BY CreationDate"
    },
    {
        "QuerySetId": 616373,
        "Title": "Bluemix post count, view count, view\/post ratio per day",
        "Description": null,
        "QueryBody": "DECLARE  @TagName nvarchar (25) = 'ibm-bluemix'\n\nSELECT TOP 112 \n   CAST(p.CreationDate AS date) AS pdate,\n   COUNT(*) AS nposts_per_day,\n   SUM(p.ViewCount) AS nviews_per_day,\n   SUM(p.ViewCount)\/COUNT(*) AS view_post_ratio\n   FROM Tags \n   JOIN PostTags AS pt ON Tags.Id = pt.TagId \n   JOIN Posts AS p ON pt.PostId = p.Id\n   WHERE Tags.TagName = @TagName\n   GROUP BY CAST(p.CreationDate AS date)\n   ORDER BY pdate DESC",
        "CreationDate": "2017-09-08 00:13:22",
        "validated": false,
        "QueryBody_Original": "DECLARE  @TagName nvarchar (25) = 'ibm-bluemix'\n\nSELECT TOP 112 \n   CAST(p.CreationDate AS date) AS pdate,\n   COUNT(*) AS nposts_per_day,\n   SUM(p.ViewCount) AS nviews_per_day,\n   SUM(p.ViewCount)\/COUNT(*) AS view_post_ratio\n   FROM Tags \n   JOIN PostTags AS pt ON Tags.Id = pt.TagId \n   JOIN Posts AS p ON pt.PostId = p.Id\n   WHERE Tags.TagName = @TagName\n   GROUP BY CAST(p.CreationDate AS date)\n   ORDER BY pdate DESC"
    },
    {
        "QuerySetId": 616811,
        "Title": "Quantidade de downvotes nas minhas respostas",
        "Description": null,
        "QueryBody": "SELECT  Post.Id [Id da resposta], Count(1) [Downvotes]\n\nFrom Posts [Post]\n\nInner Join Votes [Vote] \n  On Vote.PostId = Post.Id\n  And VoteTypeId = 3\n\nWhere Post.PostTypeId = 1\n  And Post.OwnerUserId = ##MyUserId##\n  \nGroup By Post.Id\n\nOrder By Downvotes desc",
        "CreationDate": "2017-01-17 21:10:32",
        "validated": false,
        "QueryBody_Original": "SELECT  Post.Id [Id da resposta], Count(1) [Downvotes]\n\nFrom Posts [Post]\n\nInner Join Votes [Vote] \n  On Vote.PostId = Post.Id\n  And VoteTypeId = 3\n\nWhere Post.PostTypeId = 1\n  And Post.OwnerUserId = ##MyUserId##\n  \nGroup By Post.Id\n\nOrder By Downvotes desc"
    },
    {
        "QuerySetId": 617249,
        "Title": "Average question score of tag combinations",
        "Description": null,
        "QueryBody": "DECLARE  @Tag1 VARCHAR(25) = ##Tag1:string##\nDECLARE @Tag2 VARCHAR(25) = ##Tag2:string##\n\nSELECT avg(cast(Score AS FLOAT)) FROM Posts WHERE \n  PostTypeId = 1 AND Tags LIKE @Tag1 AND Tags LIKE @Tag2",
        "CreationDate": "2017-01-18 21:20:24",
        "validated": false,
        "QueryBody_Original": "DECLARE  @Tag1 VARCHAR(25) = ##Tag1:string##\nDECLARE @Tag2 VARCHAR(25) = ##Tag2:string##\n\nSELECT avg(cast(Score AS FLOAT)) FROM Posts WHERE \n  PostTypeId = 1 AND Tags LIKE @Tag1 AND Tags LIKE @Tag2"
    },
    {
        "QuerySetId": 617301,
        "Title": "Percentage of recent which are closed",
        "Description": null,
        "QueryBody": "DECLARE  @total AS real\nDECLARE @closed AS real\nDECLARE @votes AS real\n\nSELECT @total = COUNT(*) FROM Posts \n  WHERE (PostTypeID = 1 \n  AND CreationDate >= '2016-12-25' \n  AND CreationDate <= DATEADD(day, -6, CONVERT (date, SYSDATETIME())))\n  \nSELECT @closed = COUNT(*) FROM Posts \n  WHERE (PostTypeID = 1 \n  AND CreationDate >= '2016-12-25' \n  AND CreationDate <= DATEADD(day, -6, CONVERT (date, SYSDATETIME()))\n  AND ClosedDate IS NOT NULL)\n  \nSELECT @votes = COUNT(*) FROM Posts INNER JOIN Votes on Posts.Id = Votes.PostID\nwhere (Posts.PostTypeID = 1)\n  \n SELECT (@closed\/@total) * 100 AS PercentClosed, \n (@votes\/@total) * 100 AS PercentVotes",
        "CreationDate": "2017-01-18 23:11:36",
        "validated": false,
        "QueryBody_Original": "DECLARE  @total AS real\nDECLARE @closed AS real\nDECLARE @votes AS real\n\nSELECT @total = COUNT(*) FROM Posts \n  WHERE (PostTypeID = 1 \n  AND CreationDate >= '2016-12-25' \n  AND CreationDate <= DATEADD(day, -6, CONVERT (date, SYSDATETIME())))\n  \nSELECT @closed = COUNT(*) FROM Posts \n  WHERE (PostTypeID = 1 \n  AND CreationDate >= '2016-12-25' \n  AND CreationDate <= DATEADD(day, -6, CONVERT (date, SYSDATETIME()))\n  AND ClosedDate IS NOT NULL)\n  \nSELECT @votes = COUNT(*) FROM Posts INNER JOIN Votes on Posts.Id = Votes.PostID\nwhere (Posts.PostTypeID = 1)\n  \n SELECT (@closed\/@total) * 100 AS PercentClosed, \n (@votes\/@total) * 100 AS PercentVotes"
    },
    {
        "QuerySetId": 617344,
        "Title": "Get votes in the last X days",
        "Description": "Helper query that grabs all vote instances in the last X days",
        "QueryBody": "DECLARE  @numDaysBegin int = ##numberOfDaysBeginLimit##;\n\nSELECT * FROM Votes\nWHERE CreationDate >= CURRENT_TIMESTAMP - @numDaysBegin;",
        "CreationDate": "2017-01-19 00:14:39",
        "validated": false,
        "QueryBody_Original": "DECLARE  @numDaysBegin int = ##numberOfDaysBeginLimit##;\n\nSELECT * FROM Votes\nWHERE CreationDate >= CURRENT_TIMESTAMP - @numDaysBegin;"
    },
    {
        "QuerySetId": 617366,
        "Title": "Google Geo Tags per month",
        "Description": null,
        "QueryBody": "SELECT  count(id), convert(varchar(8), CreationDate, 126)\n    from Posts\n   where PostTypeId = 1 and Tags like '%google%maps%'\ngroup by convert(varchar(8), CreationDate, 126)\norder by convert(varchar(8), CreationDate, 126) desc;",
        "CreationDate": "2017-01-19 01:31:48",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 618071,
        "Title": "Find people from your company",
        "Description": "Enter a company name to search for people working at that company\r\n",
        "QueryBody": "SELECT  * FROM Users Where Id = ##UserId##",
        "CreationDate": "2017-01-20 06:30:37",
        "validated": false,
        "QueryBody_Original": "SELECT  * FROM Users Where Id = ##UserId##"
    },
    {
        "QuerySetId": 618216,
        "Title": "Top gis algerian on stackexchange",
        "Description": null,
        "QueryBody": "SELECT  TOP ##Count:int?100##\n        ROW_NUMBER() OVER(ORDER BY Reputation DESC) AS [#],\n        Id AS [User Link],\n        Reputation,\n        -- Id AS ID,\n        Age,\n        Location,\n        WebsiteUrl as Wesbite,\n        LastAccessDate AS Seen,\n        -- Views,\n        -- UpVotes,\n        -- DownVotes,\n        CreationDate   \n        \nFROM Users \nWHERE \n        Reputation >= ##MinimalReputation:int?200## \n\n        AND (\n               UPPER(Location) LIKE UPPER('%Algeria%')\n               OR UPPER(Location) LIKE UPPER('%Algerie%')\n               OR UPPER(Location) LIKE UPPER('%\u062c\u0632\u0627\u0626\u0631%')\n               )  \n             \nORDER BY Reputation DESC",
        "CreationDate": "2017-01-20 15:28:24",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 618236,
        "Title": "Find edit by a user with text",
        "Description": null,
        "QueryBody": "SELECT  PostId as [Post Link],* from PostHistory where UserId=##userId:int## and Text like '%'+'##text##'+'%'",
        "CreationDate": "2017-01-20 17:45:06",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 618558,
        "Title": "Users with Reputation equal or greater than a specific number",
        "Description": null,
        "QueryBody": "SELECT  Id [User Link], Location, WebsiteUrl, AboutMe \nFROM Users \nWHERE Users.Reputation >= ##ReputationEqualOrGreaterThan##",
        "CreationDate": "2018-01-16 02:45:05",
        "validated": false,
        "QueryBody_Original": "SELECT  Id [User Link], Location, WebsiteUrl, AboutMe \nFROM Users \nWHERE Users.Reputation >= ##ReputationEqualOrGreaterThan##"
    },
    {
        "QuerySetId": 618560,
        "Title": "[draft] How many upvotes do I have for each tag?",
        "Description": "How many upvotes do I have for each tag? (how long before I get tag badges?)\r\n",
        "QueryBody": "DECLARE  @UserId int = ##UserId##\n\nSELECT --TOP 20 \n    TagName,\n    COUNT(*) AS UpVotes \nFROM Tags\n    INNER JOIN PostTags ON PostTags.TagId = Tags.id\n    INNER JOIN Posts ON Posts.ParentId = PostTags.PostId\n    INNER JOIN Votes ON Votes.PostId = Posts.Id and VoteTypeId = 2\nWHERE \n    Posts.OwnerUserId = @UserId\nGROUP BY TagName \nORDER BY UpVotes DESC",
        "CreationDate": "2018-01-16 02:35:52",
        "validated": false,
        "QueryBody_Original": "DECLARE  @UserId int = ##UserId##\n\nSELECT --TOP 20 \n    TagName,\n    COUNT(*) AS UpVotes \nFROM Tags\n    INNER JOIN PostTags ON PostTags.TagId = Tags.id\n    INNER JOIN Posts ON Posts.ParentId = PostTags.PostId\n    INNER JOIN Votes ON Votes.PostId = Posts.Id and VoteTypeId = 2\nWHERE \n    Posts.OwnerUserId = @UserId\nGROUP BY TagName \nORDER BY UpVotes DESC"
    },
    {
        "QuerySetId": 618956,
        "Title": "Voter per view ratio for a given user",
        "Description": null,
        "QueryBody": "SELECT   Id as [Post Link], Score, ViewCount, (CAST(Score as float)\/(cast(ViewCount as float)+1)) as votes_per_view \nFROM Posts \nWHERE OwnerUserId=##userid## AND PostTypeId=1 AND ViewCount>10 \nORDER BY votes_per_view DESC",
        "CreationDate": "2017-01-23 22:28:29",
        "validated": false,
        "QueryBody_Original": "SELECT   Id as [Post Link], Score, ViewCount, (CAST(Score as float)\/(cast(ViewCount as float)+1)) as votes_per_view \nFROM Posts \nWHERE OwnerUserId=##userid## AND PostTypeId=1 AND ViewCount>10 \nORDER BY votes_per_view DESC"
    },
    {
        "QuerySetId": 619417,
        "Title": "Find Deleted Questions and Answers by User",
        "Description": "shows all deleted answers for the specified user",
        "QueryBody": "SELECT  distinct\n    p.id as [Post Link], p.LastActivityDate, p.DeletionDate\nfrom posts as p\njoin PostHistory as ph on p.id = ph.PostId\nwhere\n    p.OwnerUserId = ##USERID##\n    and p.DeletionDate is not null\norder by p.LastActivityDate desc",
        "CreationDate": "2017-02-15 11:59:02",
        "validated": false,
        "QueryBody_Original": "SELECT  distinct\n    p.id as [Post Link], p.LastActivityDate, p.DeletionDate\nfrom posts as p\njoin PostHistory as ph on p.id = ph.PostId\nwhere\n    p.OwnerUserId = ##USERID##\n    and p.DeletionDate is not null\norder by p.LastActivityDate desc"
    },
    {
        "QuerySetId": 621097,
        "Title": " Worst Posts of All Time",
        "Description": null,
        "QueryBody": "WITH  the lowest scores\n\n\nWITH VoteCounts AS (\nSELECT v.PostId AS PostId, vt.Name AS VoteTypeName\nFROM Votes v\nINNER JOIN VoteTypes vt ON v.voteTypeId = vt.Id\n)\nSELECT TOP 100 Id as [Post Link], Score, PostTypeId AS [Post Type]\n, (SELECT COUNT(*) FROM VoteCounts vc WHERE vc.VoteTypeName = 'UpMod' AND vc.PostId = Id) AS [Total Up Votes]\n, (SELECT COUNT(*) FROM VoteCounts vc WHERE vc.VoteTypeName = 'DownMod' AND vc.PostId = Id) AS [Total Down Votes]\nFROM Posts\nORDER BY Score",
        "CreationDate": "2017-01-29 13:15:26",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 621966,
        "Title": "Users in dire need of a Bard (most unsung users)",
        "Description": "Zero and non-zero accepted count. Self-accepted answers do not count.\r\n",
        "QueryBody": "SELECT \n     u.DisplayName,\n    sum(case when a.Score = 0 then 0 else 1 end) as [Scored Answers],  \n    sum(case when a.Score = 0 then 1 else 0 end) as [Unscored Answers],\n    sum(CASE WHEN a.Score = 0 then 1 else 0 end)*1000 \/ count(a.Id) \/ 10.0 as [Percentage Unscored]\nfrom\n    Posts q\n  inner join\n    Posts a\njoin\n    Users u on a.OwnerUserId = u.Id\n  on a.Id = q.AcceptedAnswerId\nwhere\n      a.CommunityOwnedDate is null\n  and a.OwnerUserId != q.OwnerUserId\n  and a.postTypeId = 2\ngroup by  u.DisplayName\nhaving count(a.Id) > 10\norder by [Percentage Unscored] desc",
        "CreationDate": "2017-01-31 22:51:31",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 622030,
        "Title": "User's answers with no downvotes",
        "Description": null,
        "QueryBody": "SELECT  tmp.id as [Post Link], tmp.upvotes \n\nfrom (\n\n    SELECT P.id \n      , sum(\n          case V.voteTypeId \n            when 2 then 1 --Upvote\n            else 0 \n          end) as Upvotes\n      , sum(\n          case V.voteTypeId\n            when 3 then 1\n            else 0\n          end) as Downvotes\n\n    from Posts P\n\n    join Votes V\n    on P.id = V.postId\n\n    where P.ownerUserId = ##userId##\n      and P.postTypeId = 2 --answers\n    group by P.id\n\n) as tmp\nwhere tmp.downvotes = 0\n  \norder by tmp.upvotes desc",
        "CreationDate": "2017-02-01 00:51:11",
        "validated": false,
        "QueryBody_Original": "SELECT  tmp.id as [Post Link], tmp.upvotes \n\nfrom (\n\n    SELECT P.id \n      , sum(\n          case V.voteTypeId \n            when 2 then 1 --Upvote\n            else 0 \n          end) as Upvotes\n      , sum(\n          case V.voteTypeId\n            when 3 then 1\n            else 0\n          end) as Downvotes\n\n    from Posts P\n\n    join Votes V\n    on P.id = V.postId\n\n    where P.ownerUserId = ##userId##\n      and P.postTypeId = 2 --answers\n    group by P.id\n\n) as tmp\nwhere tmp.downvotes = 0\n  \norder by tmp.upvotes desc"
    },
    {
        "QuerySetId": 625037,
        "Title": "Whose posts do I comment on?",
        "Description": null,
        "QueryBody": "SELECT  userid as [User Link],commentCount,up.postCount,\nround(cast(commentCount as float)\/up.postCount,2) as ratio\nfrom\n(SELECT count(c.id) as commentCount,p.owneruserid as userid\nfrom\n(SELECT id,postid from comments where userid = ##userid##) as c\njoin posts p\non c.postid = p.id\ngroup by p.owneruserid) as c\njoin\n(SELECT owneruserid,count(id) as postCount from posts group by owneruserid) as up\non up.owneruserid = c.userid\nwhere commentCount >= ##minCommentCount##\norder by c.commentCount desc",
        "CreationDate": "2017-02-07 22:59:53",
        "validated": false,
        "QueryBody_Original": "SELECT  userid as [User Link],commentCount,up.postCount,\nround(cast(commentCount as float)\/up.postCount,2) as ratio\nfrom\n(SELECT count(c.id) as commentCount,p.owneruserid as userid\nfrom\n(SELECT id,postid from comments where userid = ##userid##) as c\njoin posts p\non c.postid = p.id\ngroup by p.owneruserid) as c\njoin\n(SELECT owneruserid,count(id) as postCount from posts group by owneruserid) as up\non up.owneruserid = c.userid\nwhere commentCount >= ##minCommentCount##\norder by c.commentCount desc"
    },
    {
        "QuerySetId": 625045,
        "Title": "Whose posts do I comment on? (count one per post)",
        "Description": null,
        "QueryBody": "SELECT  userid as [User Link],commentCount,up.postCount,\nround(cast(commentCount as float)\/up.postCount,2) as ratio\nfrom\n(SELECT count(postid) as commentCount,p.owneruserid as userid\nfrom\n(SELECT distinct postid from comments where userid = ##userid##) as c\njoin posts p\non c.postid = p.id\ngroup by p.owneruserid) as c\njoin\n(SELECT owneruserid,count(id) as postCount from posts group by owneruserid) as up\non up.owneruserid = c.userid\nwhere commentCount >= ##minCommentCount##\norder by c.commentCount desc",
        "CreationDate": "2017-02-07 22:59:31",
        "validated": false,
        "QueryBody_Original": "SELECT  userid as [User Link],commentCount,up.postCount,\nround(cast(commentCount as float)\/up.postCount,2) as ratio\nfrom\n(SELECT count(postid) as commentCount,p.owneruserid as userid\nfrom\n(SELECT distinct postid from comments where userid = ##userid##) as c\njoin posts p\non c.postid = p.id\ngroup by p.owneruserid) as c\njoin\n(SELECT owneruserid,count(id) as postCount from posts group by owneruserid) as up\non up.owneruserid = c.userid\nwhere commentCount >= ##minCommentCount##\norder by c.commentCount desc"
    },
    {
        "QuerySetId": 625137,
        "Title": "Closures and reopenings attributed to an user",
        "Description": null,
        "QueryBody": "SELECT  PH.PostId, P.Title\nfrom PostHistory PH\n  inner join Posts P on P.id = PH.PostId\nwhere PH.UserId = ##UserId##\n  and PH.PostHistoryTypeId = 10\norder by P.CreationDate",
        "CreationDate": "2017-02-08 06:53:24",
        "validated": false,
        "QueryBody_Original": "SELECT  PH.PostId, P.Title\nfrom PostHistory PH\n  inner join Posts P on P.id = PH.PostId\nwhere PH.UserId = ##UserId##\n  and PH.PostHistoryTypeId = 10\norder by P.CreationDate"
    },
    {
        "QuerySetId": 625425,
        "Title": "Average age of users with 5000+ Rep",
        "Description": "Find out the average age of users with more then 5000 rep",
        "QueryBody": "WITH  5000+ Rep\n-- Find out the average age of users WITH more then 5000 rep\n\nSELECT Age\nFROM Users\nWHERE AccountId = 3113477",
        "CreationDate": "2017-05-06 23:40:18",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 625878,
        "Title": "Tag gold badges over time",
        "Description": null,
        "QueryBody": "SELECT  CONVERT(VARCHAR(7), Date, 120) AS ym, COUNT(*) FROM Badges\nWHERE Name=##TagName:string?php## AND Class=1\nGROUP BY CONVERT(VARCHAR(7), Date, 120)\nORDER BY ym;",
        "CreationDate": "2019-04-22 06:31:37",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 626001,
        "Title": "Users with the most badge of a type",
        "Description": null,
        "QueryBody": "SELECT  \n    Num,\n    Users.DisplayName\nfrom\n    (\n        SELECT\n            count(*) as Num,\n            UserId\n        from\n            Badges\n        where\n            Badges.Name=##BadgeName##\n        group by\n            UserId\n     ) as BadgeTop\njoin\n    Users on Users.Id=BadgeTop.UserId\nwhere Num>=##MinNumOfBadges##\norder by\n    Num desc",
        "CreationDate": "2017-02-09 15:20:34",
        "validated": false,
        "QueryBody_Original": "SELECT  \n    Num,\n    Users.DisplayName\nfrom\n    (\n        SELECT\n            count(*) as Num,\n            UserId\n        from\n            Badges\n        where\n            Badges.Name=##BadgeName##\n        group by\n            UserId\n     ) as BadgeTop\njoin\n    Users on Users.Id=BadgeTop.UserId\nwhere Num>=##MinNumOfBadges##\norder by\n    Num desc"
    },
    {
        "QuerySetId": 626167,
        "Title": "Todas perguntas respondidas por voc\u00ea mesmo",
        "Description": null,
        "QueryBody": "DECLARE  @UserId int = ##UserId##\n\nSELECT QUESTION.ID AS [Post Link], QUESTION.SCORE AS VOTO_NA_PERGUNTA, ANSWER.SCORE AS VOTO_NA_RESPOSTA, QUESTION.ANSWERCOUNT FROM POSTS AS QUESTION\nINNER JOIN POSTS AS ANSWER ON ANSWER.PARENTID = QUESTION.ID\nINNER JOIN USERS AS USERS ON USERS.ID = QUESTION.OWNERUSERID\nWHERE QUESTION.OWNERUSERID = ANSWER.OWNERUSERID AND USERS.ID = @UserId\nORDER BY QUESTION.CREATIONDATE DESC",
        "CreationDate": "2017-02-09 23:05:50",
        "validated": false,
        "QueryBody_Original": "DECLARE  @UserId int = ##UserId##\n\nSELECT QUESTION.ID AS [Post Link], QUESTION.SCORE AS VOTO_NA_PERGUNTA, ANSWER.SCORE AS VOTO_NA_RESPOSTA, QUESTION.ANSWERCOUNT FROM POSTS AS QUESTION\nINNER JOIN POSTS AS ANSWER ON ANSWER.PARENTID = QUESTION.ID\nINNER JOIN USERS AS USERS ON USERS.ID = QUESTION.OWNERUSERID\nWHERE QUESTION.OWNERUSERID = ANSWER.OWNERUSERID AND USERS.ID = @UserId\nORDER BY QUESTION.CREATIONDATE DESC"
    },
    {
        "QuerySetId": 626665,
        "Title": "Users with Largest Reputation by Year",
        "Description": null,
        "QueryBody": "SELECT  DATEPART(Year, u.CreationDate)as Year,\n       MAX(u.Reputation) as MaxReputation\nINTO #Reputations\nFROM Users u\nGROUP BY DATEPART(Year, u.CreationDate)\n            \nSELECT Users.DisplayName,\n       DATEPART(Year, Users.CreationDate) as Year,\n       Users.Reputation\nFROM Users\n  INNER JOIN #Reputations r ON DATEPART(Year, Users.CreationDate) = r.Year\nWHERE Users.Reputation = r.MaxReputation\nORDER BY Year",
        "CreationDate": "2017-03-07 01:03:32",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 627338,
        "Title": "Most Viewed Questions in three months",
        "Description": null,
        "QueryBody": "DECLARE  @From DATETIME = convert(DATETIME, '##StartDate?2015-01-01##')\nDECLARE @To DATETIME = convert(DATETIME, '##EndDate?2016-01-01##')\n\nselect top ##Count:int?20##\np.Id as [Post Link],\np.ViewCount\nfrom Posts p\nwhere p.PostTypeId = 1\n AND p.CreationDate BETWEEN @From AND @To\norder by p.ViewCount desc",
        "CreationDate": "2017-07-18 07:44:26",
        "validated": false,
        "QueryBody_Original": "DECLARE  @From DATETIME = convert(DATETIME, '##StartDate?2015-01-01##')\nDECLARE @To DATETIME = convert(DATETIME, '##EndDate?2016-01-01##')\n\nselect top ##Count:int?20##\np.Id as [Post Link],\np.ViewCount\nfrom Posts p\nwhere p.PostTypeId = 1\n AND p.CreationDate BETWEEN @From AND @To\norder by p.ViewCount desc"
    },
    {
        "QuerySetId": 627401,
        "Title": "Get users according to specific criteria 1",
        "Description": null,
        "QueryBody": "DECLARE  @start date = '2015-01-01',\n        @end date = '2015-01-31';\n\n\nDECLARE @reputation_from int = 50000\nDECLARE @reputation_to int = 1000000\n\nSELECT\n  a.OwnerUserId AS 'Uid',\n  COUNT(*) AS Acceptedanswers,\n  15 * (COUNT(*)) AS 'points',\n  DATEPART(WEEK, a.CreationDate)\n  AS 'week'\nFROM Posts q\nINNER JOIN Posts a\n  ON q.AcceptedAnswerId = a.Id\nWHERE a.OwnerUserId IN (SELECT\n  Id\nFROM users u\nWHERE u.Reputation > @reputation_from\nAND u.Reputation < @reputation_to)\nAND a.PostTypeId = 2\nAND a.CreationDate > @start\nAND a.CreationDate <= @end\nGROUP BY a.OwnerUserId,\n         DATEPART(WEEK, a.CreationDate)",
        "CreationDate": "2017-02-21 09:37:24",
        "validated": false,
        "QueryBody_Original": "DECLARE  @start date = '2015-01-01',\n        @end date = '2015-01-31';\n\n\nDECLARE @reputation_from int = 50000\nDECLARE @reputation_to int = 1000000\n\nSELECT\n  a.OwnerUserId AS 'Uid',\n  COUNT(*) AS Acceptedanswers,\n  15 * (COUNT(*)) AS 'points',\n  DATEPART(WEEK, a.CreationDate)\n  AS 'week'\nFROM Posts q\nINNER JOIN Posts a\n  ON q.AcceptedAnswerId = a.Id\nWHERE a.OwnerUserId IN (SELECT\n  Id\nFROM users u\nWHERE u.Reputation > @reputation_from\nAND u.Reputation < @reputation_to)\nAND a.PostTypeId = 2\nAND a.CreationDate > @start\nAND a.CreationDate <= @end\nGROUP BY a.OwnerUserId,\n         DATEPART(WEEK, a.CreationDate)"
    },
    {
        "QuerySetId": 627451,
        "Title": "Active developers by language with the best average answer score",
        "Description": null,
        "QueryBody": "SELECT  \n    TOP 500\n    Users.Id as [User Link],\n    Users.LastAccessDate as [Last Online],\n    Users.Location,\n    Count(Posts.Id) AS Answers,\n    Max(Score) AS [Maximum Answer Score],\n    CAST(AVG(CAST(Score AS float)) as numeric(6,2)) AS [Average Answer Score]\nFROM\n    Posts\n  INNER JOIN\n    Users ON Users.Id = OwnerUserId\nWHERE \nCommunityOwnedDate is null and ClosedDate is null and Tags like '%##language##%' and Posts.LastActivityDate > DATEADD(year, -##overTheLastNumberOfYears##, GetDate()) and Users.LastAccessDate > DATEADD(month, -##activeInTheLastNumberOfMonths##, GetDate())\nGROUP BY\n    Users.Id, Users.LastAccessDate, Users.Location, DisplayName\nHAVING\n    Count(Posts.Id) > 10 \nORDER BY\n    [Average Answer Score] DESC",
        "CreationDate": "2017-02-16 09:19:53",
        "validated": false,
        "QueryBody_Original": "SELECT  \n    TOP 500\n    Users.Id as [User Link],\n    Users.LastAccessDate as [Last Online],\n    Users.Location,\n    Count(Posts.Id) AS Answers,\n    Max(Score) AS [Maximum Answer Score],\n    CAST(AVG(CAST(Score AS float)) as numeric(6,2)) AS [Average Answer Score]\nFROM\n    Posts\n  INNER JOIN\n    Users ON Users.Id = OwnerUserId\nWHERE \nCommunityOwnedDate is null and ClosedDate is null and Tags like '%##language##%' and Posts.LastActivityDate > DATEADD(year, -##overTheLastNumberOfYears##, GetDate()) and Users.LastAccessDate > DATEADD(month, -##activeInTheLastNumberOfMonths##, GetDate())\nGROUP BY\n    Users.Id, Users.LastAccessDate, Users.Location, DisplayName\nHAVING\n    Count(Posts.Id) > 10 \nORDER BY\n    [Average Answer Score] DESC"
    },
    {
        "QuerySetId": 628489,
        "Title": "angular users in israel 2",
        "Description": null,
        "QueryBody": "SELECT  u.id id, count(a.id) answerCount\ninto #SELECTedUsers\nfrom posts a\njoin users u on u.id = a.owneruserid\njoin posts q on a.parentid = q.id\nwhere a.posttypeid = 2\nand q.tags like '%automation%'\nand u.location like '%Israel%'\ngroup by u.id \n\nSELECT  su.answerCount, u.*\nfrom users u\njoin #SELECTedUsers su on su.id = u.id\norder by answerCount desc",
        "CreationDate": "2017-07-17 13:55:52",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 628656,
        "Title": "How many Q&A per month for a user?",
        "Description": null,
        "QueryBody": "DECLARE  @UserId int = ##UserId##\nSELECT\n  FORMAT(P.CreationDate, 'yyyy-MM') AS Month,\n  PT.Name,\n  COUNT(1) AS Posts\nFROM Posts P\nJOIN PostTypes PT\nON P.PostTypeId = PT.Id\nWHERE OwnerUserId = @UserId\nGROUP BY FORMAT(P.CreationDate, 'yyyy-MM'), PT.Name\nORDER BY 1, 2\n;",
        "CreationDate": "2017-02-15 21:00:41",
        "validated": false,
        "QueryBody_Original": "DECLARE  @UserId int = ##UserId##\nSELECT\n  FORMAT(P.CreationDate, 'yyyy-MM') AS Month,\n  PT.Name,\n  COUNT(1) AS Posts\nFROM Posts P\nJOIN PostTypes PT\nON P.PostTypeId = PT.Id\nWHERE OwnerUserId = @UserId\nGROUP BY FORMAT(P.CreationDate, 'yyyy-MM'), PT.Name\nORDER BY 1, 2\n;"
    },
    {
        "QuerySetId": 629636,
        "Title": "Top Questions with answer by tag order by score, poster reputation ",
        "Description": null,
        "QueryBody": "SELECT  TOP 10 question.Id as [Post Link], poster.Reputation, question.tags\nFROM Posts question\nINNER JOIN Users poster\nON question.OwnerUserId = poster.Id\nAND question.Tags like '%##TagName1##%' --AND P.Tags like '%##TagName2##%'\nAND poster.Reputation > ##minreputation:int##\nORDER BY question.Score Desc",
        "CreationDate": "2017-11-22 23:27:23",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 629639,
        "Title": "Count number of rows of Questions with answer by tag and order by score, poster reputation ",
        "Description": null,
        "QueryBody": "SELECT  count( question.Id) --as [Post Link], poster.Reputation, answer.Id as [answer Link], answer.body, question.tags\nFROM Posts question\nINNER JOIN Posts answer\nON question.Id = answer.ParentId\nINNER JOIN Users poster\nON question.OwnerUserId = poster.Id\n--WHERE question.OwnerUserId = answer.OwnerUserId\n--AND question.AcceptedAnswerId != answer.Id\nWHERE question.Tags like '%##TagName1##%' --AND P.Tags like '%##TagName2##%'\nAND answer.Score > ##minanswerscore##\nAND poster.Reputation > ##minreputation:int##\n--ORDER BY question.Score Desc",
        "CreationDate": "2017-02-17 23:59:30",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 629737,
        "Title": "Answered vs. unanswered questions, by tag",
        "Description": null,
        "QueryBody": "SELECT  *, \n    Cast(100.0 * a.answered \/ a.total as decimal (10,2)) as PercentAnswered \n    from \n(\n  SELECT \n  -- p.Id, p.Title, p.AnswerCount, p.CommentCount, \n    t.TagName, sum(\n        CASE   \n           WHEN p.AnswerCount + p.CommentCount > 0 THEN 1\n           ELSE 0\n           END) as answered, \n           count(p.id) as total\n  from Posts p\n  join PostTags pTags on pTags.postId = p.Id\n  join Tags t on pTags.tagId = t.Id \n  group by t.TagName\n  ) as a \n  where a.total > ##MinQuestions:int##\n  order by PercentAnswered desc",
        "CreationDate": "2017-02-18 18:28:07",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 630024,
        "Title": "Get total question score for user",
        "Description": null,
        "QueryBody": "DECLARE  @UserId int = ##UserId##;\n\nSELECT Sum(Score) FROM Posts WHERE OwnerUserId=@UserId AND PostTypeId=1\nSELECT Sum(Score) FROM Posts WHERE OwnerUserId=@UserId AND PostTypeId=2",
        "CreationDate": "2017-02-19 17:16:24",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 630429,
        "Title": "number of Bazel questions per week",
        "Description": null,
        "QueryBody": "SELECT  \n---  CAST(AVG(CAST(bzlQuestions.num AS float)) as numeric(6,2)) as average\n---from (\n\n  SELECT \n    DATEPART(yyyy, p.CreationDate ) as y ,\n    DATEPART(ww, p.CreationDate ) as w ,\n    count(pt.PostId) as num\n  from\n    Tags, \n    PostTags pt, \n    Posts as p\n  where Tags.Id = pt.TagId \n    and p.Id = pt.PostId\n    and tags.tagname = 'tensorflow'\n  group by \n    TagName ,\n    DATEPART(yyyy, p.CreationDate ) ,\n    DATEPART(ww, p.CreationDate ) \n  \n---  ) as bzlQuestions",
        "CreationDate": "2017-02-22 00:44:48",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 630686,
        "Title": "All answer scores for an user (scaled)",
        "Description": null,
        "QueryBody": "SELECT  Row_Number() over (order by Score desc) as Ix\n  , case when Score > 0 then Sqrt(Cast(Score as real)) else 0 end as ScaledScore\nfrom Posts\nwhere PostTypeId = 2\n  and OwnerUserId = ##UserId##",
        "CreationDate": "2017-02-21 10:23:49",
        "validated": false,
        "QueryBody_Original": "SELECT  Row_Number() over (order by Score desc) as Ix\n  , case when Score > 0 then Sqrt(Cast(Score as real)) else 0 end as ScaledScore\nfrom Posts\nwhere PostTypeId = 2\n  and OwnerUserId = ##UserId##"
    },
    {
        "QuerySetId": 630876,
        "Title": "Questions with multiple answers by high reputed users",
        "Description": null,
        "QueryBody": "SELECT  \nq.Id AS qid,\n'site:\/\/\/q\/' + CAST(q.id AS NVARCHAR) + '\/4918|' + MIN(q.Title) AS title,\nCOUNT(a.Id) AS c\nFROM Posts AS q \nJOIN Posts AS a ON 1 = q.PostTypeId AND 2 = a.PostTypeId AND \nq.Id = a.ParentId\nJOIN Users AS s ON a.OwnerUserId = s.Id AND ##repLimit:int?6200## <= s.Reputation\nGROUP BY q.Id\nHAVING 5 <= COUNT(a.Id)\nORDER BY c DESC, qid DESC;",
        "CreationDate": "2017-02-21 18:08:15",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 631856,
        "Title": "Add bounty remarks to a question's revision history",
        "Description": "http:\/\/meta.stackexchange.com\/questions\/110003\/add-bounty-remarks-to-a-questions-revision-history",
        "QueryBody": "SELECT  pn.body as [Custom Comment]\n     , pt.Name as [Notice Type]\n     , pt.Body as [Reason]\n     , pn.creationdate\n     , pn.deletiondate\n     , owneruserid as [User Link]\nfrom postnotices pn\ninner join postnoticetypes pt on pt.id = pn.postnoticetypeid\nwhere postid = ##questionid?83292##",
        "CreationDate": "2017-02-23 16:19:28",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 631884,
        "Title": "How many of my close votes were accepted?",
        "Description": null,
        "QueryBody": "DECLARE  @UserId int = ##UserId##\n\nselect *\nfrom Votes\nWHERE  UserId = @UserId",
        "CreationDate": "2017-02-23 18:02:44",
        "validated": false,
        "QueryBody_Original": "DECLARE  @UserId int = ##UserId##\n\nselect *\nfrom Votes\nWHERE  UserId = @UserId"
    },
    {
        "QuerySetId": 631893,
        "Title": "Close Votes by User (with Links)",
        "Description": null,
        "QueryBody": "SELECT  Id as [Post Link], Score, LastActivityDate, ViewCount FROM Posts WHERE Id IN\n\n(SELECT PostId\nFROM PostHistory\nWHERE PostHistoryTypeId = 10\nAND Text LIKE '%\"Id\":' + CAST(##UserId## AS nvarchar) + ',%')\n\nAND ClosedDate IS NULL",
        "CreationDate": "2017-02-26 22:00:18",
        "validated": false,
        "QueryBody_Original": "SELECT  Id as [Post Link], Score, LastActivityDate, ViewCount FROM Posts WHERE Id IN\n\n(SELECT PostId\nFROM PostHistory\nWHERE PostHistoryTypeId = 10\nAND Text LIKE '%\"Id\":' + CAST(##UserId## AS nvarchar) + ',%')\n\nAND ClosedDate IS NULL"
    },
    {
        "QuerySetId": 632946,
        "Title": "How many questions(with the compiler error tag and compiler-warnings) tag have been accepted",
        "Description": null,
        "QueryBody": "SELECT  TagName, \nfrom Posts p, Tags t, PostTags, pt\nwhere p.PostTypeId=1 and p.Id = pt.PostId and pt.TagId = t.Id\nand p.Tags LIKE ('%<compiler-errors>%', '%<compiler-warnings>%')\nand t.TagName not in ('compiler-errors', 'compiler-warnings') \ngroup by TagName\norder by TagName desc;\n\n*\/\n\n--the chek \n\nSELECT TagName, Count(case when p.AcceptedAnswerId IS NOT NULL then 1 else null end)as NumAccepted\nfrom Posts p, Tags t, PostTags pt\nwhere p.PostTypeId=1 and p.Id = pt.PostId and pt.TagId = t.Id\nAND p.Tags LIKE '%<compiler-errors>%'\nAND p.Tags LIKE '%<compiler-warnings>%'\nand t.TagName not in ('compiler-errors', 'compiler-warnings') \ngroup by t.TagName\n--order by TagName asc;",
        "CreationDate": "2017-02-26 02:07:52",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 635047,
        "Title": "Top-most socratic users and their socratism",
        "Description": null,
        "QueryBody": "SELECT  top ##UserLimit##\n    question_days.OwnerUserId As [User Link],\n    sum(case when question_days.up > 0 and question_days.down = 0 then 1 else 0 end) as socratism,\n    Users.Reputation\nfrom (\n  SELECT\n    OwnerUserId,\n    max(case when score > 0 then 1 else 0 end) as up,\n    max(case when score < 1 then 1 else 0 end) as down\n  from Posts\n  where PostTypeId = 1 -- a question\n    and OwnerUserId is not null\n  group by CONVERT(VARCHAR(10), creationDate, 111), OwnerUserId\n) question_days\njoin Users on question_days.OwnerUserId = Users.Id\ngroup by question_days.OwnerUserId, Users.Reputation\norder by socratism desc;",
        "CreationDate": "2017-04-17 16:11:38",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 636184,
        "Title": "Score of positive questions over months",
        "Description": null,
        "QueryBody": "SELECT  \n --DATEADD(MONTH, DATEDIFF(MONTH, 0, CreationDate), 0),\n --sum(Score)\n--FROM Posts\n--WHERE Score > 0 AND Score < 150\n --AND ParentId is null\n--GROUP BY\n --DATEADD(MONTH, DATEDIFF(MONTH, 0, CreationDate), 0)\n--ORDER BY DATEADD(MONTH, DATEDIFF(MONTH, 0, CreationDate), 0)\n\nSELECT \n DATEADD(MONTH, DATEDIFF(MONTH, 0, Votes.CreationDate), 0),\n count(Votes.Id)\nFROM Votes\nINNER JOIN Posts\nON\n Votes.PostId=Posts.Id\nWHERE\n Posts.PostTypeId = 1 -- only questions\n AND DATEDIFF(DAY, Votes.CreationDate, Posts.CreationDate) > -30\n AND Votes.VoteTypeId = 2 -- only upvotes\n AND Posts.Score>0\nGROUP BY\n DATEADD(MONTH, DATEDIFF(MONTH, 0, Votes.CreationDate), 0)\nORDER BY DATEADD(MONTH, DATEDIFF(MONTH, 0, Votes.CreationDate), 0)",
        "CreationDate": "2017-03-06 02:18:20",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 638175,
        "Title": "Total score and answer count for each tag",
        "Description": null,
        "QueryBody": "DECLARE  @UserId int = ##UserId##\n\nSELECT -- TOP(20)\n  TagName,\n  SUM(Score) AS TotalTagScore,\n  COUNT(TagName) AS AnswerCount\nFROM Posts\n\nINNER JOIN PostTags ON Posts.ParentId = PostTags.PostId\nINNER JOIN Tags ON PostTags.TagId = Tags.Id\n\nWHERE Posts.OwnerUserId = @UserId\nAND Posts.PostTypeId = 2 -- Answers\n\nGROUP BY TagName\nORDER BY TotalTagScore DESC, AnswerCount DESC",
        "CreationDate": "2017-03-09 18:48:37",
        "validated": false,
        "QueryBody_Original": "DECLARE  @UserId int = ##UserId##\n\nSELECT -- TOP(20)\n  TagName,\n  SUM(Score) AS TotalTagScore,\n  COUNT(TagName) AS AnswerCount\nFROM Posts\n\nINNER JOIN PostTags ON Posts.ParentId = PostTags.PostId\nINNER JOIN Tags ON PostTags.TagId = Tags.Id\n\nWHERE Posts.OwnerUserId = @UserId\nAND Posts.PostTypeId = 2 -- Answers\n\nGROUP BY TagName\nORDER BY TotalTagScore DESC, AnswerCount DESC"
    },
    {
        "QuerySetId": 638616,
        "Title": "Tag count on the questions of my answers",
        "Description": null,
        "QueryBody": "DECLARE  @UserId int = ##UserId##\n\nSELECT\n    TagName,\n    COUNT(*) AS Tag\nFROM Tags\n    INNER JOIN PostTags ON PostTags.TagId = Tags.Id\n    INNER JOIN Posts ON Posts.ParentId = PostTags.PostId\nWHERE \n    Posts.OwnerUserId = @UserId\nGROUP BY TagName, Tags.Id\nORDER BY Tags.Id ASC",
        "CreationDate": "2017-03-10 16:28:53",
        "validated": false,
        "QueryBody_Original": "DECLARE  @UserId int = ##UserId##\n\nSELECT\n    TagName,\n    COUNT(*) AS Tag\nFROM Tags\n    INNER JOIN PostTags ON PostTags.TagId = Tags.Id\n    INNER JOIN Posts ON Posts.ParentId = PostTags.PostId\nWHERE \n    Posts.OwnerUserId = @UserId\nGROUP BY TagName, Tags.Id\nORDER BY Tags.Id ASC"
    },
    {
        "QuerySetId": 639461,
        "Title": "HTTP YouTube links on SFF",
        "Description": null,
        "QueryBody": "SELECT  \n  Post.Id as [Post Link],\n  PostTypes.Name as [Type]\nfrom Posts as Post\n  join PostTypes on Post.PostTypeId = PostTypes.Id\n  left join Posts as Parent on Post.ParentId = Parent.Id\n  left join Users as Author on Post.OwnerUserId = Author.Id\nwhere Post.Body like '%http:\/\/%youtube%'\n  and Post.CreationDate between ##StartDate:string?2010-12-01## and ##EndDate:string?2016-01-01##",
        "CreationDate": "2017-03-12 19:03:03",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 641305,
        "Title": "Old, bad questions with only unhelpful answers",
        "Description": "Attempting to frame a question set for addressing this meta post:\r\nhttp:\/\/meta.chemistry.stackexchange.com\/questions\/3633\/how-should-we-deal-with-bad-questions-that-attracted-not-too-helpful-answers",
        "QueryBody": "DECLARE  @AgeThresh int = ##AgeThresh:int##\n\nSELECT \n   AVG(q.Score) AS \"Question Score\",\n   q.Id AS [Post Link],\n   MAX(a.Score) AS \"Max Answer Score\",\n   MAX(q.CreationDate) AS \"Creation Date\",\n   MAX(q.ClosedDate) AS \"Closed Date\"\n       \n   FROM Posts q\n     JOIN Posts a ON a.ParentId = q.Id      -- Matching answers\n     JOIN PostHistory ph ON ph.PostId = q.Id   -- Tie into post history for close reason\n     \n   WHERE q.PostTypeId = 1 AND q.Score <=0 AND q.AnswerCount > 0\n      AND a.Score <= 1\n      AND DATEDIFF(day, q.LastActivityDate, CURRENT_TIMESTAMP) >= @AgeThresh\n      AND DATEDIFF(day, a.LastActivityDate, CURRENT_TIMESTAMP) >= @AgeThresh\n   \n   -- One row per question\n   GROUP BY q.Id\n   \n   ORDER BY MAX(q.Score), MAX(a.Score) ASC",
        "CreationDate": "2017-03-15 20:33:33",
        "validated": false,
        "QueryBody_Original": "DECLARE  @AgeThresh int = ##AgeThresh:int##\n\nSELECT \n   AVG(q.Score) AS \"Question Score\",\n   q.Id AS [Post Link],\n   MAX(a.Score) AS \"Max Answer Score\",\n   MAX(q.CreationDate) AS \"Creation Date\",\n   MAX(q.ClosedDate) AS \"Closed Date\"\n       \n   FROM Posts q\n     JOIN Posts a ON a.ParentId = q.Id      -- Matching answers\n     JOIN PostHistory ph ON ph.PostId = q.Id   -- Tie into post history for close reason\n     \n   WHERE q.PostTypeId = 1 AND q.Score <=0 AND q.AnswerCount > 0\n      AND a.Score <= 1\n      AND DATEDIFF(day, q.LastActivityDate, CURRENT_TIMESTAMP) >= @AgeThresh\n      AND DATEDIFF(day, a.LastActivityDate, CURRENT_TIMESTAMP) >= @AgeThresh\n   \n   -- One row per question\n   GROUP BY q.Id\n   \n   ORDER BY MAX(q.Score), MAX(a.Score) ASC"
    },
    {
        "QuerySetId": 641331,
        "Title": "Remaining posts with default alt-text",
        "Description": null,
        "QueryBody": "SELECT  \n    post.Id\n  , post.Id AS [Post Link]\n  , post.OwnerUserId AS [User Link]\n  , post.CreationDate\n  , post.LastActivityDate\n  , post.Score\n  , coalesce(post.ViewCount, parent.viewcount) as ViewCount\nFROM Posts post\nleft join Posts parent\non post.parentid = parent.id\nWHERE \n      (\n          post.Body LIKE '%alt text%'\n       OR post.Body LIKE '%enter image description here%'\n      )\n  AND \n      (\n          post.Title IS NULL\n       OR post.Title NOT LIKE '%alt text%' -- Exclude meta post discussing alt texts\n      )\n  and post.score > ##minScore## and coalesce(post.ViewCount, parent.viewcount) > ##minViewCount##\nORDER BY Id ASC -- In order by immutable Id, to facilitate cooperation",
        "CreationDate": "2017-03-15 08:39:40",
        "validated": false,
        "QueryBody_Original": "SELECT  \n    post.Id\n  , post.Id AS [Post Link]\n  , post.OwnerUserId AS [User Link]\n  , post.CreationDate\n  , post.LastActivityDate\n  , post.Score\n  , coalesce(post.ViewCount, parent.viewcount) as ViewCount\nFROM Posts post\nleft join Posts parent\non post.parentid = parent.id\nWHERE \n      (\n          post.Body LIKE '%alt text%'\n       OR post.Body LIKE '%enter image description here%'\n      )\n  AND \n      (\n          post.Title IS NULL\n       OR post.Title NOT LIKE '%alt text%' -- Exclude meta post discussing alt texts\n      )\n  and post.score > ##minScore## and coalesce(post.ViewCount, parent.viewcount) > ##minViewCount##\nORDER BY Id ASC -- In order by immutable Id, to facilitate cooperation"
    },
    {
        "QuerySetId": 641999,
        "Title": "Search post's title and\/or body for a string where the post contains an image",
        "Description": "Returns posts where:\r\n 1) Body or Title contains query string.\r\n 2) Body contains images.",
        "QueryBody": "SELECT  TOP ##Number:int?50##\n   P.Score\n  ,P.Id AS [Post Link]\n  --,P.ViewCount\n  --,P.LastActivityDate\n  --,C.Text AS [HTML]\n  \nFROM   Posts P\n       JOIN Comments C ON C.PostId = P.Id\n\nWHERE\n  (\n    P.Body LIKE '%' + ##Query:string?Lattice## + '%' OR\n    P.Title LIKE '%' + ##Query:string?Lattice## + '%'\n  )  \n  AND \n  (\n    P.PostTypeId = 1 OR\n    P.PostTypeId = 2\n  )\n  AND\n  (\n    P.Body  LIKE '%<img src%' OR\n    C.Text  LIKE '%<img src%' OR\n    C.Text  LIKE '%.jepg%'    OR\n    C.Text  LIKE '%.jpg%'     OR\n    C.Text  LIKE '%.tiff%'    OR\n    C.Text  LIKE '%.tif%'     OR\n    C.Text  LIKE '%.png%'     OR\n    C.Text  LIKE '%.gif%'     OR   \n    C.Text  LIKE '%.svg%'\n  )\n       \nORDER BY P.ViewCount DESC",
        "CreationDate": "2017-03-16 15:30:04",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 642391,
        "Title": "Statistics about voting to close and actually closed questions",
        "Description": "https:\/\/meta.stackoverflow.com\/questions\/345533\/statistics-about-vtc-and-actually-closed-questions",
        "QueryBody": "SELECT   ph.postid as [Post Link]\n     , ph.creationdate [was closed at]\n     , case \n       when p.closeddate is null then 'now open' \n       else 'still closed' \n       end [current state]\nfrom posthistory ph\nleft outer join posts p on p.id = ph.postid\nwhere posthistorytypeid = 10\nand text like '%\"Id\":' + cast(##userid:int## as nvarchar) + ',%'\norder by ph.creationdate",
        "CreationDate": "2017-03-16 23:44:56",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 643525,
        "Title": "Search comments of specific user",
        "Description": null,
        "QueryBody": "SELECT  PostId As [Post Link], Score, [Text], CreationDate From Comments\nWhere UserId=##UserId##\nOrder By Score Desc, CreationDate Desc",
        "CreationDate": "2017-05-13 19:05:28",
        "validated": false,
        "QueryBody_Original": "SELECT  PostId As [Post Link], Score, [Text], CreationDate From Comments\nWhere UserId=##UserId##\nOrder By Score Desc, CreationDate Desc"
    },
    {
        "QuerySetId": 643537,
        "Title": "Number of comments per month by user",
        "Description": "Number of comments per month by user (excludes deleted comments)",
        "QueryBody": "SELECT \n    YEAR(c.CreationDate)+MONTH(c.CreationDate)\/12.0,\n    COUNT(c.CreationDate) as Count\nFROM Comments c\nWHERE UserId=##UserId##\nGROUP by YEAR(c.CreationDate)+MONTH(c.CreationDate)\/12.0\nORDER by YEAR(c.CreationDate)+MONTH(c.CreationDate)\/12.0 ASC;",
        "CreationDate": "2017-05-06 16:45:08",
        "validated": false,
        "QueryBody_Original": "SELECT \n    YEAR(c.CreationDate)+MONTH(c.CreationDate)\/12.0,\n    COUNT(c.CreationDate) as Count\nFROM Comments c\nWHERE UserId=##UserId##\nGROUP by YEAR(c.CreationDate)+MONTH(c.CreationDate)\/12.0\nORDER by YEAR(c.CreationDate)+MONTH(c.CreationDate)\/12.0 ASC;"
    },
    {
        "QuerySetId": 646761,
        "Title": "Comments by one user on another's posts",
        "Description": null,
        "QueryBody": "SELECT  Comments.postID [Post Link], Posts.PostTypeId, Comments.Score, Comments.Text\nFROM \n    Comments, Posts\nWHERE Comments.UserId = ##UserId1##\nAND   Posts.Id = Comments.postID\nAND   Posts.OwnerUserId =  ##UserId2##\n-- AND Text LIKE '%base%'\n--ORDER BY Score Desc",
        "CreationDate": "2017-03-23 19:12:43",
        "validated": false,
        "QueryBody_Original": "SELECT  Comments.postID [Post Link], Posts.PostTypeId, Comments.Score, Comments.Text\nFROM \n    Comments, Posts\nWHERE Comments.UserId = ##UserId1##\nAND   Posts.Id = Comments.postID\nAND   Posts.OwnerUserId =  ##UserId2##\n-- AND Text LIKE '%base%'\n--ORDER BY Score Desc"
    },
    {
        "QuerySetId": 646815,
        "Title": "Getting Next Posts after female",
        "Description": null,
        "QueryBody": "SELECT  * \n--from posts, users \n-- where users.id=386579 and posts.OwnerUserId=users.id\n\n\n-- find the next oldest date after a post\n    SELECT p.Id, p.PostTypeId\n    From Posts as p\n    WHERE p.OwnerUserId = 386579\n      and p.Id = 6995419",
        "CreationDate": "2018-08-13 02:28:12",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 647450,
        "Title": "Questions tagged only with [homework]",
        "Description": null,
        "QueryBody": "DECLARE  @OpenQs nvarchar = ##OpenQs:string?Y##\nDECLARE @ClosedQs nvarchar = ##ClosedQs:string?N##\n\nSELECT q.Id as [Post Link], q.Score, q.Tags, q.ClosedDate, q.CreationDate\n\nFROM Posts q\n\nWHERE q.PostTypeId = 1 AND q.Tags = '<homework>' AND \n         (\n           (q.ClosedDate IS NULL AND UPPER(@OpenQs) = 'Y')\n         OR\n           (q.ClosedDate IS NOT NULL AND UPPER(@ClosedQs) = 'Y')\n         )\n\nORDER BY q.CreationDate ASC",
        "CreationDate": "2017-04-06 18:32:40",
        "validated": false,
        "QueryBody_Original": "DECLARE  @OpenQs nvarchar = ##OpenQs:string?Y##\nDECLARE @ClosedQs nvarchar = ##ClosedQs:string?N##\n\nSELECT q.Id as [Post Link], q.Score, q.Tags, q.ClosedDate, q.CreationDate\n\nFROM Posts q\n\nWHERE q.PostTypeId = 1 AND q.Tags = '<homework>' AND \n         (\n           (q.ClosedDate IS NULL AND UPPER(@OpenQs) = 'Y')\n         OR\n           (q.ClosedDate IS NOT NULL AND UPPER(@ClosedQs) = 'Y')\n         )\n\nORDER BY q.CreationDate ASC"
    },
    {
        "QuerySetId": 647462,
        "Title": "Questions with just two tags, [homework] and [CHOOSE YOUR OWN ADVENTURE]",
        "Description": null,
        "QueryBody": "DECLARE  @CoTag nvarchar(100) = ##CoTag:string##\nDECLARE @OpenQs nvarchar = ##OpenQs:string?Y##\nDECLARE @ClosedQs nvarchar = ##ClosedQs:string?N##\n\n\nSELECT q.Id as [Post Link], q.Score, q.Tags, q.ClosedDate\n\nFROM Posts q\n\nWHERE q.PostTypeId = 1 AND q.Tags LIKE '%<homework>%' \n                       AND q.Tags LIKE '%<' + @CoTag + '>%'\n                       AND LEN(q.Tags) - LEN(REPLACE(q.Tags, '><', '')) = 2\n                       AND \n         (\n           (q.ClosedDate IS NULL AND UPPER(@OpenQs) = 'Y')\n         OR\n           (q.ClosedDate IS NOT NULL AND UPPER(@ClosedQs) = 'Y')\n         )",
        "CreationDate": "2017-03-25 00:23:42",
        "validated": false,
        "QueryBody_Original": "DECLARE  @CoTag nvarchar(100) = ##CoTag:string##\nDECLARE @OpenQs nvarchar = ##OpenQs:string?Y##\nDECLARE @ClosedQs nvarchar = ##ClosedQs:string?N##\n\n\nSELECT q.Id as [Post Link], q.Score, q.Tags, q.ClosedDate\n\nFROM Posts q\n\nWHERE q.PostTypeId = 1 AND q.Tags LIKE '%<homework>%' \n                       AND q.Tags LIKE '%<' + @CoTag + '>%'\n                       AND LEN(q.Tags) - LEN(REPLACE(q.Tags, '><', '')) = 2\n                       AND \n         (\n           (q.ClosedDate IS NULL AND UPPER(@OpenQs) = 'Y')\n         OR\n           (q.ClosedDate IS NOT NULL AND UPPER(@ClosedQs) = 'Y')\n         )"
    },
    {
        "QuerySetId": 647464,
        "Title": "Questions with 'n' tags: [homework], [CHOOSE YOUR OWN ADVENTURE], and n-2 others",
        "Description": null,
        "QueryBody": "DECLARE  @CoTag nvarchar(100) = ##CoTag:string##\nDECLARE @NumTags int = ##NumTags:int##\nDECLARE @OpenQs nvarchar = ##OpenQs:string?Y##\nDECLARE @ClosedQs nvarchar = ##ClosedQs:string?N##\n\n\nSELECT q.Id as [Post Link], q.Score, q.Tags, q.ClosedDate\n\nFROM Posts q\n\nWHERE q.PostTypeId = 1 AND q.Tags LIKE '%<homework>%' \n                       AND q.Tags LIKE '%<' + @CoTag + '>%'\n                       AND LEN(q.Tags) - LEN(REPLACE(q.Tags, '><', '')) = 2 * (@NumTags-1)\n                       AND \n         (\n           (q.ClosedDate IS NULL AND UPPER(@OpenQs) = 'Y')\n         OR\n           (q.ClosedDate IS NOT NULL AND UPPER(@ClosedQs) = 'Y')\n         )",
        "CreationDate": "2017-03-25 01:04:39",
        "validated": false,
        "QueryBody_Original": "DECLARE  @CoTag nvarchar(100) = ##CoTag:string##\nDECLARE @NumTags int = ##NumTags:int##\nDECLARE @OpenQs nvarchar = ##OpenQs:string?Y##\nDECLARE @ClosedQs nvarchar = ##ClosedQs:string?N##\n\n\nSELECT q.Id as [Post Link], q.Score, q.Tags, q.ClosedDate\n\nFROM Posts q\n\nWHERE q.PostTypeId = 1 AND q.Tags LIKE '%<homework>%' \n                       AND q.Tags LIKE '%<' + @CoTag + '>%'\n                       AND LEN(q.Tags) - LEN(REPLACE(q.Tags, '><', '')) = 2 * (@NumTags-1)\n                       AND \n         (\n           (q.ClosedDate IS NULL AND UPPER(@OpenQs) = 'Y')\n         OR\n           (q.ClosedDate IS NOT NULL AND UPPER(@ClosedQs) = 'Y')\n         )"
    },
    {
        "QuerySetId": 650071,
        "Title": "Which tags occur most frequently alongside a given tag?",
        "Description": "Returns a list of all tags that are applied to the same question(s) as the indicated tag, along with the number of questions each tag is applied to alongside the indicated tag. Sorts by the most frequent co-applied tag.  Auto-creates links to searches for the returned tag combinations.",
        "QueryBody": "DECLARE  @Tag nvarchar(100) = ##Tag:string##\n\nSELECT t1.TagName, COUNT(t1.TagName)\n\nFROM Posts p\n\nLEFT JOIN Tags t1 ON p.Tags LIKE '%<' + t1.TagName + '>%'\n\nWHERE p.PostTypeId = 1 AND p.Tags LIKE '%<' + @Tag + '>%'\n      AND t1.TagName <> @Tag\n\nGROUP BY t1.TagName\n\nORDER BY COUNT(t1.TagName) DESC",
        "CreationDate": "2017-03-29 07:02:40",
        "validated": false,
        "QueryBody_Original": "DECLARE  @Tag nvarchar(100) = ##Tag:string##\n\nSELECT t1.TagName, COUNT(t1.TagName)\n\nFROM Posts p\n\nLEFT JOIN Tags t1 ON p.Tags LIKE '%<' + t1.TagName + '>%'\n\nWHERE p.PostTypeId = 1 AND p.Tags LIKE '%<' + @Tag + '>%'\n      AND t1.TagName <> @Tag\n\nGROUP BY t1.TagName\n\nORDER BY COUNT(t1.TagName) DESC"
    },
    {
        "QuerySetId": 650075,
        "Title": "Questions with exactly two specified tags",
        "Description": null,
        "QueryBody": "DECLARE  @Tag1 nvarchar(100) = ##Tag1:string##\nDECLARE @Tag2 nvarchar(100) = ##Tag2:string##\nDECLARE @OpenQs nvarchar = ##OpenQs:string?Y##\nDECLARE @ClosedQs nvarchar = ##ClosedQs:string?N##\n\n\nSELECT q.Id as [Post Link], q.Score, q.Tags, q.ClosedDate\n\nFROM Posts q\n\nWHERE q.PostTypeId = 1 AND q.Tags LIKE '%<' + @Tag1 + '>%' \n                       AND q.Tags LIKE '%<' + @Tag2 + '>%'\n                       AND LEN(q.Tags) - LEN(REPLACE(q.Tags, '><', '')) = 2\n                       AND \n         (\n           (q.ClosedDate IS NULL AND UPPER(@OpenQs) = 'Y')\n         OR\n           (q.ClosedDate IS NOT NULL AND UPPER(@ClosedQs) = 'Y')\n         )",
        "CreationDate": "2017-03-29 07:24:42",
        "validated": false,
        "QueryBody_Original": "DECLARE  @Tag1 nvarchar(100) = ##Tag1:string##\nDECLARE @Tag2 nvarchar(100) = ##Tag2:string##\nDECLARE @OpenQs nvarchar = ##OpenQs:string?Y##\nDECLARE @ClosedQs nvarchar = ##ClosedQs:string?N##\n\n\nSELECT q.Id as [Post Link], q.Score, q.Tags, q.ClosedDate\n\nFROM Posts q\n\nWHERE q.PostTypeId = 1 AND q.Tags LIKE '%<' + @Tag1 + '>%' \n                       AND q.Tags LIKE '%<' + @Tag2 + '>%'\n                       AND LEN(q.Tags) - LEN(REPLACE(q.Tags, '><', '')) = 2\n                       AND \n         (\n           (q.ClosedDate IS NULL AND UPPER(@OpenQs) = 'Y')\n         OR\n           (q.ClosedDate IS NOT NULL AND UPPER(@ClosedQs) = 'Y')\n         )"
    },
    {
        "QuerySetId": 651245,
        "Title": "How to put sql result into single cell",
        "Description": null,
        "QueryBody": "DECLARE  @t as table(productID int, packageID varchar(50));\n\nselect productID, stuff((\n    select ', ' + packageID\n    from @t \n    where (productID = t.productID) \n    for xml path(''), type).value('(.\/text())[1]','varchar(max)')\n    , 1, 2, '') as single_value\nfrom @t  t\nwhere productID = 1001\ngroup by productID;",
        "CreationDate": "2020-05-06 22:36:53",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 651536,
        "Title": "Find unanswered questions for specific tag",
        "Description": "This query returns a list of all questions that have zero answers. The questions returned are not closed. ",
        "QueryBody": "SELECT  t.TagName, p.Id AS [Post Link], p.Score, p.ViewCount\n  FROM Posts p\n    INNER JOIN PostTags pt ON p.Id = pt.PostId\n    INNER JOIN Tags t ON pt.TagId = t.Id\n  WHERE p.PostTypeId = 1\n    AND p.ClosedDate IS NULL\n    AND p.AnswerCount = 0\n    AND t.TagName LIKE ##TagName:string##",
        "CreationDate": "2017-03-30 23:37:37",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 651976,
        "Title": "Run query on all stackexchange databases",
        "Description": null,
        "QueryBody": "DECLARE  @Names VARCHAR(8000)\nSELECT @Names = COALESCE(@Names + ', ', ' ') + name\nFROM sysdatabases\nWHERE name NOT IN ('master', 'tempdb', 'model' ,'msdb', 'Data.StackExchange');\nSELECT @Names\n--@Names\n\n--EXEC SP_EXECUTESQL @SQLString.\n--exec sp_executesql @SQLString.\n--DECLARE @SQLString NVARCHAR(MAX)\n--SELECT @SQLString = 'SELECT COUNT(*) FROM StackOverflow.Users;';\n\n--EXEC SP_EXECUTESQL @SQLString\n\n--EXEC ('SELECT COUNT(*) FROM Users;');",
        "CreationDate": "2017-03-31 19:32:47",
        "validated": false,
        "QueryBody_Original": "DECLARE  @Names VARCHAR(8000)\nSELECT @Names = COALESCE(@Names + ', ', ' ') + name\nFROM sysdatabases\nWHERE name NOT IN ('master', 'tempdb', 'model' ,'msdb', 'Data.StackExchange');\nSELECT @Names\n--@Names\n\n--EXEC SP_EXECUTESQL @SQLString.\n--exec sp_executesql @SQLString.\n--DECLARE @SQLString NVARCHAR(MAX)\n--SELECT @SQLString = 'SELECT COUNT(*) FROM StackOverflow.Users;';\n\n--EXEC SP_EXECUTESQL @SQLString\n\n--EXEC ('SELECT COUNT(*) FROM Users;');"
    },
    {
        "QuerySetId": 652047,
        "Title": "Measuring similarities between all sites by their tags",
        "Description": "The query is not ready yet.",
        "QueryBody": "DECLARE  @TagQuery VARCHAR(max) = '\n  SELECT TOP 100 Name, Count\/SynN AS TagCount FROM (\n    SELECT\n      TagSynonyms.TargetTagName AS Name,\n      MIN(Tags.Count) AS Count,\n      COUNT(*) AS SynN\n    FROM TagSynonyms, Tags\n    WHERE Tags.TagName = TagSynonyms.TargetTagName\n    GROUP BY TagSynonyms.TargetTagName\n\n    UNION\n\n    SELECT\n      TagSynonyms.SourceTagName AS Name,\n      Tags.Count,\n      COUNT(*) OVER (PARTITION BY TagSynonyms.TargetTagName) AS SynN\n    FROM TagSynonyms, Tags\n    WHERE Tags.TagName = TagSynonyms.TargetTagName\n  ) AllTag\n  ORDER BY TagCount DESC\n'\n\nSELECT @TagQuery;",
        "CreationDate": "2017-03-31 23:44:57",
        "validated": false,
        "QueryBody_Original": "DECLARE  @TagQuery VARCHAR(max) = '\n  SELECT TOP 100 Name, Count\/SynN AS TagCount FROM (\n    SELECT\n      TagSynonyms.TargetTagName AS Name,\n      MIN(Tags.Count) AS Count,\n      COUNT(*) AS SynN\n    FROM TagSynonyms, Tags\n    WHERE Tags.TagName = TagSynonyms.TargetTagName\n    GROUP BY TagSynonyms.TargetTagName\n\n    UNION\n\n    SELECT\n      TagSynonyms.SourceTagName AS Name,\n      Tags.Count,\n      COUNT(*) OVER (PARTITION BY TagSynonyms.TargetTagName) AS SynN\n    FROM TagSynonyms, Tags\n    WHERE Tags.TagName = TagSynonyms.TargetTagName\n  ) AllTag\n  ORDER BY TagCount DESC\n'\n\nSELECT @TagQuery;"
    },
    {
        "QuerySetId": 652112,
        "Title": "All questions tagged with a given tag, and possibly other tags too",
        "Description": null,
        "QueryBody": "DECLARE  @Tag nvarchar(100) = ##Tag:string##\n\nSELECT q.Id AS [Post Link], q.Tags, q.Score, q.Title\n\nFROM Posts q\n\nWHERE q.PostTypeId = 1 and q.Score > 0 and q.Tags LIKE '%<' + @Tag + '>%'\n\nORDER BY q.Score DESC",
        "CreationDate": "2017-07-25 15:27:01",
        "validated": false,
        "QueryBody_Original": "DECLARE  @Tag nvarchar(100) = ##Tag:string##\n\nSELECT q.Id AS [Post Link], q.Tags, q.Score, q.Title\n\nFROM Posts q\n\nWHERE q.PostTypeId = 1 and q.Score > 0 and q.Tags LIKE '%<' + @Tag + '>%'\n\nORDER BY q.Score DESC"
    },
    {
        "QuerySetId": 652569,
        "Title": "find candidates for Reversal badge",
        "Description": "finds open questions with score <= -5",
        "QueryBody": "DECLARE  @tag VARCHAR(30) = ##TagToSearchIn:string##\n\nSELECT TOP 1000\n    Id AS [Post Link],\n    Score,\n    ViewCount as Views,\n    AnswerCount as Answers,\n    Body\nFROM Posts\nWHERE\n    AcceptedAnswerId IS NULL\n    AND PostTypeId = 1\n    AND ClosedDate IS NULL\n    AND Score <= -5\n    AND Tags LIKE '%<' + LOWER(@tag) + '>%'",
        "CreationDate": "2017-05-30 19:32:18",
        "validated": false,
        "QueryBody_Original": "DECLARE  @tag VARCHAR(30) = ##TagToSearchIn:string##\n\nSELECT TOP 1000\n    Id AS [Post Link],\n    Score,\n    ViewCount as Views,\n    AnswerCount as Answers,\n    Body\nFROM Posts\nWHERE\n    AcceptedAnswerId IS NULL\n    AND PostTypeId = 1\n    AND ClosedDate IS NULL\n    AND Score <= -5\n    AND Tags LIKE '%<' + LOWER(@tag) + '>%'"
    },
    {
        "QuerySetId": 654396,
        "Title": "Questions possibly with Chem.SE buzzwords in the title",
        "Description": "Exclude any particular category of buzzword by setting its 'ignore' threshold to a large negative number.",
        "QueryBody": "DECLARE  @ChemScore int = ##ChemScore:int?2##\nDECLARE @ExptScore int = ##ExptScore:int?5##  \n\nSELECT p.Id AS [Post Link], p.Score AS 'Score', p.Tags AS 'Tags'\n\nFROM Posts p\n\nWHERE p.PostTypeId = 1 AND\n  (\n    CHARINDEX('DOUBT', UPPER(p.Title)) > 0 OR\n    CHARINDEX('QUESTION', UPPER(p.Title)) > 0 OR\n    CHARINDEX('HELP', UPPER(p.Title)) > 0 OR\n    CHARINDEX('PROBLEM', UPPER(p.Title)) > 0 OR\n    (CHARINDEX('EXPERIMENT', UPPER(p.Title)) > 0 AND p.Score <= @ExptScore) OR\n    CHARINDEX('EXERCISE', UPPER(p.Title)) > 0 OR\n    (CHARINDEX(' CHEMISTR', UPPER(p.Title)) > 0 AND p.Score <=@ChemScore) OR\n    (CHARINDEX(' CHEMIC', UPPER(p.Title)) > 0 AND p.Score <=@ChemScore) OR\n    (CHARINDEX('CHEM', UPPER(p.Title)) = 1 AND p.Score <=@ChemScore)\n    )\n    \nORDER BY p.Score ASC",
        "CreationDate": "2017-04-06 18:27:05",
        "validated": false,
        "QueryBody_Original": "DECLARE  @ChemScore int = ##ChemScore:int?2##\nDECLARE @ExptScore int = ##ExptScore:int?5##  \n\nSELECT p.Id AS [Post Link], p.Score AS 'Score', p.Tags AS 'Tags'\n\nFROM Posts p\n\nWHERE p.PostTypeId = 1 AND\n  (\n    CHARINDEX('DOUBT', UPPER(p.Title)) > 0 OR\n    CHARINDEX('QUESTION', UPPER(p.Title)) > 0 OR\n    CHARINDEX('HELP', UPPER(p.Title)) > 0 OR\n    CHARINDEX('PROBLEM', UPPER(p.Title)) > 0 OR\n    (CHARINDEX('EXPERIMENT', UPPER(p.Title)) > 0 AND p.Score <= @ExptScore) OR\n    CHARINDEX('EXERCISE', UPPER(p.Title)) > 0 OR\n    (CHARINDEX(' CHEMISTR', UPPER(p.Title)) > 0 AND p.Score <=@ChemScore) OR\n    (CHARINDEX(' CHEMIC', UPPER(p.Title)) > 0 AND p.Score <=@ChemScore) OR\n    (CHARINDEX('CHEM', UPPER(p.Title)) = 1 AND p.Score <=@ChemScore)\n    )\n    \nORDER BY p.Score ASC"
    },
    {
        "QuerySetId": 654628,
        "Title": "All questions tagged with at least two given tags, formatted for copying out post active links",
        "Description": null,
        "QueryBody": "DECLARE  @Tag1 nvarchar(100) = ##Tag1:string##\nDECLARE @Tag2 nvarchar(100) = ##Tag2:string##\n\nSELECT --q.Title as 'Name', \n       q.Id as 'Id', 'http:\/\/chemistry.stackexchange.com\/q\/' + CAST(q.Id AS nvarchar(15)) AS 'Link'\n       --q.Tags AS 'Tags'\n\nFROM Posts q\n\nWHERE q.PostTypeId = 1 AND q.Tags LIKE '%<' + @Tag1 + '>%'\n                       AND q.Tags LIKE '%<' + @Tag2 + '>%'\n\nORDER BY q.Id ASC",
        "CreationDate": "2017-04-07 01:58:54",
        "validated": false,
        "QueryBody_Original": "DECLARE  @Tag1 nvarchar(100) = ##Tag1:string##\nDECLARE @Tag2 nvarchar(100) = ##Tag2:string##\n\nSELECT --q.Title as 'Name', \n       q.Id as 'Id', 'http:\/\/chemistry.stackexchange.com\/q\/' + CAST(q.Id AS nvarchar(15)) AS 'Link'\n       --q.Tags AS 'Tags'\n\nFROM Posts q\n\nWHERE q.PostTypeId = 1 AND q.Tags LIKE '%<' + @Tag1 + '>%'\n                       AND q.Tags LIKE '%<' + @Tag2 + '>%'\n\nORDER BY q.Id ASC"
    },
    {
        "QuerySetId": 654633,
        "Title": "All posts with a given tag, formatted for copying out post links",
        "Description": null,
        "QueryBody": "DECLARE  @Tag nvarchar(100) = ##Tag:string##\n\nSELECT --q.Title as 'Name', \n       q.Id as 'Id', 'http:\/\/chemistry.stackexchange.com\/q\/' + CAST(q.Id AS nvarchar(15)) AS 'Link'\n       --q.Tags AS 'Tags'\n\nFROM Posts q\n\nWHERE q.PostTypeId = 1 AND q.Tags LIKE '%<' + @Tag + '>%'\n\nORDER BY q.Id ASC",
        "CreationDate": "2017-04-07 01:54:50",
        "validated": false,
        "QueryBody_Original": "DECLARE  @Tag nvarchar(100) = ##Tag:string##\n\nSELECT --q.Title as 'Name', \n       q.Id as 'Id', 'http:\/\/chemistry.stackexchange.com\/q\/' + CAST(q.Id AS nvarchar(15)) AS 'Link'\n       --q.Tags AS 'Tags'\n\nFROM Posts q\n\nWHERE q.PostTypeId = 1 AND q.Tags LIKE '%<' + @Tag + '>%'\n\nORDER BY q.Id ASC"
    },
    {
        "QuerySetId": 654635,
        "Title": "All questions tagged with three tags, formatted for copying out links",
        "Description": null,
        "QueryBody": "DECLARE  @Tag1 nvarchar(100) = ##Tag1:string##\nDECLARE @Tag2 nvarchar(100) = ##Tag2:string##\nDECLARE @Tag3 nvarchar(100) = ##Tag3:string##\n\nSELECT --q.Title as 'Name', \n       q.Id as 'Id', 'http:\/\/chemistry.stackexchange.com\/q\/' + CAST(q.Id AS nvarchar(15)) AS 'Link'\n       --q.Tags AS 'Tags'\n\nFROM Posts q\n\nWHERE q.PostTypeId = 1 AND q.Tags LIKE '%<' + @Tag1 + '>%'\n                       AND q.Tags LIKE '%<' + @Tag2 + '>%'\n                       AND q.Tags LIKE '%<' + @Tag3 + '>%'\n\nORDER BY q.Id ASC",
        "CreationDate": "2017-04-07 02:00:29",
        "validated": false,
        "QueryBody_Original": "DECLARE  @Tag1 nvarchar(100) = ##Tag1:string##\nDECLARE @Tag2 nvarchar(100) = ##Tag2:string##\nDECLARE @Tag3 nvarchar(100) = ##Tag3:string##\n\nSELECT --q.Title as 'Name', \n       q.Id as 'Id', 'http:\/\/chemistry.stackexchange.com\/q\/' + CAST(q.Id AS nvarchar(15)) AS 'Link'\n       --q.Tags AS 'Tags'\n\nFROM Posts q\n\nWHERE q.PostTypeId = 1 AND q.Tags LIKE '%<' + @Tag1 + '>%'\n                       AND q.Tags LIKE '%<' + @Tag2 + '>%'\n                       AND q.Tags LIKE '%<' + @Tag3 + '>%'\n\nORDER BY q.Id ASC"
    },
    {
        "QuerySetId": 654820,
        "Title": "How to fill number of remaining charter in string using SQL server",
        "Description": null,
        "QueryBody": "DECLARE  @str as varchar(4) = 'WTRR';\nprint @str + replicate('X', 8 - len(@str))",
        "CreationDate": "2017-04-07 13:11:06",
        "validated": false,
        "QueryBody_Original": "DECLARE  @str as varchar(4) = 'WTRR';\nprint @str + replicate('X', 8 - len(@str))"
    },
    {
        "QuerySetId": 654918,
        "Title": "Compare tag usage over time",
        "Description": null,
        "QueryBody": "SELECT  *  \n  FROM \n  (\n  SELECT p.id, t.TagName, year(p.CreationDate) as [year]\n  FROM Tags t\n  JOIN PostTags pt on pt.TagId = t.id\n  JOIN Posts p on pt.PostId = p.id\n  \n  -- where t.TagName in ( ##tags## )\n\n  ) a \n  PIVOT (\n  -- count(id) FOR TagName IN ([spring-mvc], [playframework])\n  count(id) FOR TagName IN ( ##tags## )\n  ) p \norder by year\n\n-- tags format: [spring-mvc], [java]",
        "CreationDate": "2017-04-07 16:52:34",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 657055,
        "Title": "Quantidade de quest\u00f5es por tags",
        "Description": null,
        "QueryBody": "DECLARE  @DataInicio DateTime = Cast(DateAdd(Month, -1, GetDate()) As Date);\nDECLARE @DataFim DateTime = Cast(GetDate() As Date);\n\nSelect Tag.TagName [Tag],\n\nCount(1) [Qtd-Perguntas],\n@DataInicio [De],\n@DataFim [At\u00e9]\n\nFrom Posts Post\nInner Join PostTags PT On PT.PostId = Post.Id\nInner Join Tags Tag On Tag.Id = PT.TagId\n\nWhere Post.PostTypeId = 1 And\n\nPost.CreationDate Between @DataInicio And @DataFim\n\nGroup By Tag.Id, Tag.TagName\n\nOrder By [Qtd-Perguntas] Desc",
        "CreationDate": "2017-04-12 00:57:56",
        "validated": false,
        "QueryBody_Original": "DECLARE  @DataInicio DateTime = Cast(DateAdd(Month, -1, GetDate()) As Date);\nDECLARE @DataFim DateTime = Cast(GetDate() As Date);\n\nSelect Tag.TagName [Tag],\n\nCount(1) [Qtd-Perguntas],\n@DataInicio [De],\n@DataFim [At\u00e9]\n\nFrom Posts Post\nInner Join PostTags PT On PT.PostId = Post.Id\nInner Join Tags Tag On Tag.Id = PT.TagId\n\nWhere Post.PostTypeId = 1 And\n\nPost.CreationDate Between @DataInicio And @DataFim\n\nGroup By Tag.Id, Tag.TagName\n\nOrder By [Qtd-Perguntas] Desc"
    },
    {
        "QuerySetId": 657170,
        "Title": "Questions that I've answered that have not accepted an answer",
        "Description": "TODO: add a requirement that the Q-asker has logged in in the past .... year\r\n\r\n\"\r\nIf any of the answers solved your problem, please [accept it](https:\/\/unix.stackexchange.com\/help\/someone-answers) by clicking the checkmark next to it. Thank you!\r\n\"",
        "QueryBody": "SELECT  q.Id as [Post Link], q.CreationDate, a.Score, q.AnswerCount,\n  (DATEDIFF(WEEK, u.LastAccessdate, GETDATE())) as WeeksSinceUserLastLogin\n  \nFROM Posts q\n\n-- the Answer is tied to the listed Question\nINNER JOIN Posts a ON a.ParentId = q.Id\nJOIN Users u ON u.Id = q.OwnerUserId\n\nWHERE \n-- 1 = Question\nq.PostTypeId = 1\n\n-- Q does not have an accepted Answer\nAND q.AcceptedANswerId IS NULL\n\n-- Q is not closed\nAND q.ClosedDate IS NULL\n\n-- I wrote an Answer\nAND a.OwnerUserId = ##UserId:Int?117549##\n\n-- the asker has logged in \"recently\"\nAND (DATEDIFF(WEEK, u.LastAccessdate, GETDATE())) < 52\n\nORDER BY a.CreationDate DESC",
        "CreationDate": "2018-04-28 15:49:55",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 657542,
        "Title": "Users by Tag and Location",
        "Description": null,
        "QueryBody": "DECLARE  @TagName nvarchar(25) = ##Tag:string##\n\nSELECT TOP 100\n    u.Id as [User Link],\n    u.Reputation as [Reputation],\n    u.Age as [Age],\n    p.tags as [tags],\n    COUNT(*) AS UpVotes \nFROM Tags t with (nolock)\n    INNER JOIN PostTags pt with (nolock)ON pt.TagId = t.id\n    INNER JOIN Posts p with (nolock) ON p.ParentId = pt.PostId\n    INNER JOIN Votes v with (nolock) ON v.PostId = p.Id and v.VoteTypeId = 2\n    inner join Users u with (nolock) on u.Id = p.OwnerUserId\nWHERE \n    p.CommunityOwnedDate IS NULL\n    and t.TagName = @TagName\n    and LOWER(Location) LIKE LOWER('%##Location##%')\nGROUP BY u.Id,\nu.Reputation,\np.tags, \nu.age\nORDER BY UpVotes DESC",
        "CreationDate": "2017-10-31 22:23:33",
        "validated": false,
        "QueryBody_Original": "DECLARE  @TagName nvarchar(25) = ##Tag:string##\n\nSELECT TOP 100\n    u.Id as [User Link],\n    u.Reputation as [Reputation],\n    u.Age as [Age],\n    p.tags as [tags],\n    COUNT(*) AS UpVotes \nFROM Tags t with (nolock)\n    INNER JOIN PostTags pt with (nolock)ON pt.TagId = t.id\n    INNER JOIN Posts p with (nolock) ON p.ParentId = pt.PostId\n    INNER JOIN Votes v with (nolock) ON v.PostId = p.Id and v.VoteTypeId = 2\n    inner join Users u with (nolock) on u.Id = p.OwnerUserId\nWHERE \n    p.CommunityOwnedDate IS NULL\n    and t.TagName = @TagName\n    and LOWER(Location) LIKE LOWER('%##Location##%')\nGROUP BY u.Id,\nu.Reputation,\np.tags, \nu.age\nORDER BY UpVotes DESC"
    },
    {
        "QuerySetId": 657753,
        "Title": "Questions originally tagged [TAG] but now tagged [single-word-requests] or [phrase-requests]",
        "Description": null,
        "QueryBody": "SELECT  p.Id AS [Post Link], p.CreationDate, ph.Text AS [Initial tags], p.Tags\n  FROM Posts AS p\n  INNER JOIN PostTags AS pt ON p.Id = pt.PostId\n  INNER JOIN Tags AS t ON t.Id = pt.TagId\n  INNER JOIN PostHistory AS ph ON p.Id = ph.PostId\n    AND ph.PostHistoryTypeId = 3 -- initial tags\n  WHERE t.TagName IN ('single-word-requests', 'phrase-requests')\n    AND ph.Text LIKE '%<' + ##TagName:string## + '>%'\n    AND ph.Text NOT LIKE '%<single-word-requests>%'\n    AND ph.Text NOT LIKE '%<phrase-requests>%'\n  ORDER BY p.CreationDate DESC",
        "CreationDate": "2017-04-13 13:45:48",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 657810,
        "Title": "Votes and total vote count for diffrent post",
        "Description": null,
        "QueryBody": "DECLARE  @UserId int = ##UserId##\n\nSELECT Score as Vote,\n       COUNT(Score) PostCount\nFROM Posts q\n  \nWHERE q.OwnerUserId = @UserId\nGROUP BY Score  \nORDER BY Score DESC",
        "CreationDate": "2017-04-13 13:49:16",
        "validated": false,
        "QueryBody_Original": "DECLARE  @UserId int = ##UserId##\n\nSELECT Score as Vote,\n       COUNT(Score) PostCount\nFROM Posts q\n  \nWHERE q.OwnerUserId = @UserId\nGROUP BY Score  \nORDER BY Score DESC"
    },
    {
        "QuerySetId": 658129,
        "Title": "Tag score + accepted answer rate",
        "Description": "Get tags scores with acceptance rate",
        "QueryBody": "DECLARE  @userid int = ##userid:int##\n\nselect t.tagname\n     , count(*) as answers\n     , sum(a.score) as TagScore\nfrom posts q \ninner join posts a on a.parentid = q.id\ninner join posttags pt on pt.postid = q.id\ninner join tags t on t.tagname like '%Android%'\nwhere a.owneruserid = @userid\ngroup by t.tagname\norder by count(*) desc",
        "CreationDate": "2017-06-06 17:57:54",
        "validated": false,
        "QueryBody_Original": "DECLARE  @userid int = ##userid:int##\n\nselect t.tagname\n     , count(*) as answers\n     , sum(a.score) as TagScore\nfrom posts q \ninner join posts a on a.parentid = q.id\ninner join posttags pt on pt.postid = q.id\ninner join tags t on t.tagname like '%Android%'\nwhere a.owneruserid = @userid\ngroup by t.tagname\norder by count(*) desc"
    },
    {
        "QuerySetId": 658747,
        "Title": "Answer score distribution per length",
        "Description": "Shows the answer distribution, their average score and the required content length for upvote, grouped by their length logarithmically in 20% increasing groups",
        "QueryBody": "DECLARE  @AnswerNo INT;\n\nSELECT @AnswerNo = COUNT(*)\nFROM Posts\nWHERE PostTypeId = 2;\n\nWITH Raw AS (\n  SELECT\n    CAST(LOG(LEN(Body))\/LOG(##LogBase:FLOAT?1.2##) AS INT) AS LogLength,\n    Score\n  FROM Posts\n  WHERE PostTypeId=2\n),\nLogGrouped AS (\n  SELECT\n    CAST(POWER(##LogBase##, LogLength) AS INT) AS Length,\n    AVG(1.0 * Score) AS AverageScore,\n    COUNT(*) AS NumOfAnswers\n  FROM Raw\n  GROUP BY LogLength\n),\nLogGroupedRaw AS (\n  SELECT\n    Length,\n    AverageScore,\n    100.0 * NumOfAnswers \/ @AnswerNo AS PctOfAnswers\n  FROM LogGrouped\n)\nSELECT *, 1000.0 * AverageScore \/ Length AS UpvotePerKilobyte\nFROM LogGroupedRaw\nWHERE PctOfAnswers > ##MinimalPercent:FLOAT?0.2##\nORDER BY Length",
        "CreationDate": "2020-04-23 00:42:55",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 660854,
        "Title": "Short WHYT comments without links",
        "Description": null,
        "QueryBody": "SELECT  Id \nfrom Comments\nwhere lower(Text) like '##pattern?what have you tried%##' and len(Text) < ##maxlength?75## \norder by len(Text), Id asc",
        "CreationDate": "2017-05-12 20:32:05",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 662218,
        "Title": "Top Angular2 programmers in Globaly",
        "Description": null,
        "QueryBody": "SELECT  ROW_NUMBER() OVER(ORDER BY Score DESC) AS [#], us.id [User Link],\n       us.DisplayName,\n       tuser.Score\n       \nFROM Users us\n\nJOIN \n(SELECT Answers.OwnerUserId AS UserId, SUM(Answers.Score) AS Score\n     FROM Tags \n    JOIN PostTags ON Tags.Id = PostTags.TagId\n    JOIN Posts ON Posts.Id = PostTags.PostId  \n    JOIN Posts Answers ON Answers.ParentId = Posts.Id \n   WHERE Tags.TagName IN ('angular')\n  GROUP BY Answers.OwnerUserId\n) tuser ON tuser.UserId = us.Id\n\nORDER BY Score DESC;\n\n*\/\nSELECT sum(viewcount), year(creationdate),month(creationdate)  from posts where id in\n(SELECT parentid from posts where owneruserid=3858469 and posttypeid=2) and posttypeid=1\ngroup by  year(creationdate),month(creationdate)\norder by  year(creationdate) desc\n\n--SELECT * from posts where id=5145659",
        "CreationDate": "2018-06-20 18:33:27",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 662222,
        "Title": "Distribution of users by reputation, double logarithmic scale",
        "Description": null,
        "QueryBody": "WITH  LogRep AS (\n  SELECT POWER(##LogBase:FLOAT?1.2##,\n      CAST(\n        LOG(1.0 * Reputation)\/LOG(##LogBase##) AS INT\n      )\n    ) AS Reputation\n  FROM Users\n  WHERE\n    Reputation BETWEEN\n      ##MinimalRepShown:INT?202## AND ##MaximalRepShown:INT?35000##\n)\nSELECT\n  Reputation,\n  LOG(1.0 * COUNT(*))\/LOG(10.0) AS N\nFROM LogRep\nGROUP BY Reputation\nORDER BY Reputation",
        "CreationDate": "2017-05-30 20:53:16",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 662899,
        "Title": "User profiles with ##Tag## ##Badge Class# in EMEA",
        "Description": null,
        "QueryBody": "SELECT  u.Id as [User Link], u.DisplayName, u.Location, u.Reputation, u.websiteurl\n\nfrom Users u, Badges B\n\nwhere  \n\n( u.location like ('%nited%ingdom%') or u.location like ('%UK%') or u.location like ('%uk%') or u.location like ('%ondon%') or u.location like ('%anchester%') or u.location like ('%dinburgh%') or u.location like ('%ambridge%') or u.location like ('%xford%')) \n\nAND \n\n(b.Name = '##Tag##')\n\nAND \n\n(b.Class = ##BadgeClass:int?1##) \n\nAND b.UserId = u.Id\n\nGroup By\n\nu.Id, u.DisplayName, u.Reputation, u.Location, u.websiteurl\n\nOrder By u.Reputation desc",
        "CreationDate": "2017-09-14 14:06:31",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 663031,
        "Title": "All users from Banglades or Dhaka",
        "Description": null,
        "QueryBody": "SELECT \n  Id AS [User Link],\n  Location,\n  LastAccessDate as 'Last Seen',\n  Reputation\nFROM Users\nWHERE\n  LOWER(Location) LIKE LOWER('%'+##Location1:string?FCKGW##+'%')\n  OR\n  LOWER(Location) LIKE LOWER('%'+##Location2:string?FCKGW##+'%')\/*\n  OR\n  LOWER(Location) LIKE LOWER('%'+##Location3:string?-##+'%')\n  OR\n  LOWER(Location) LIKE LOWER('%'+##Location4:string?-##+'%')\n  OR\n  LOWER(Location) LIKE LOWER('%'+##Location5:string?-##+'%')\n  OR\n  LOWER(Location) LIKE LOWER('%'+##Location6:string?-##+'%')*\/\nORDER BY LastAccessDate DESC;",
        "CreationDate": "2017-04-27 20:00:32",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 663379,
        "Title": "Am I close to the \"Self-Learner\"-badge?",
        "Description": "This returns all your questions, where you have added a self-answer with a score of 2 or higher.",
        "QueryBody": "SELECT  a.ParentId as 'Question Id', a.Score as 'Answer Score', b.Title as 'Question Title'\nfrom Posts a\ninner join Posts b on b.Id = a.ParentId\nwhere a.OwnerUserId = ##UserId##\nand a.PostTypeId = 2\nand b.OwnerUserId = a.OwnerUserId\nand a.Score > 2",
        "CreationDate": "2017-04-26 16:19:26",
        "validated": false,
        "QueryBody_Original": "SELECT  a.ParentId as 'Question Id', a.Score as 'Answer Score', b.Title as 'Question Title'\nfrom Posts a\ninner join Posts b on b.Id = a.ParentId\nwhere a.OwnerUserId = ##UserId##\nand a.PostTypeId = 2\nand b.OwnerUserId = a.OwnerUserId\nand a.Score > 2"
    },
    {
        "QuerySetId": 664522,
        "Title": "How many posts did users with <50 rep post per day",
        "Description": "Returns the number of posts per day for the last ##NumberOfDays##",
        "QueryBody": "SELECT  day(Posts.CreationDate), count(Posts.Id)\nfrom Posts\ninner join Users u on u.Id = Posts.OwnerUserId\nwhere Posts.PostTypeId = 2\nand u.Reputation < 50\nand datediff(day, Posts.CreationDate, CURRENT_TIMESTAMP) <= ##NumberOfDays##\ngroup by day(Posts.CreationDate)",
        "CreationDate": "2017-04-28 18:10:47",
        "validated": false,
        "QueryBody_Original": "SELECT  day(Posts.CreationDate), count(Posts.Id)\nfrom Posts\ninner join Users u on u.Id = Posts.OwnerUserId\nwhere Posts.PostTypeId = 2\nand u.Reputation < 50\nand datediff(day, Posts.CreationDate, CURRENT_TIMESTAMP) <= ##NumberOfDays##\ngroup by day(Posts.CreationDate)"
    },
    {
        "QuerySetId": 665169,
        "Title": "average number of comments per question",
        "Description": null,
        "QueryBody": "DECLARE  @totalcomments int\nselect @totalcomments = count(id) from comments\n\nDECLARE @totalposts int\nselect @totalposts = count(id) from posts\n\nselect @totalcomments, @totalposts",
        "CreationDate": "2017-04-30 16:47:08",
        "validated": false,
        "QueryBody_Original": "DECLARE  @totalcomments int\nselect @totalcomments = count(id) from comments\n\nDECLARE @totalposts int\nselect @totalposts = count(id) from posts\n\nselect @totalcomments, @totalposts"
    },
    {
        "QuerySetId": 666016,
        "Title": "Top limited number of users in a tag by Location",
        "Description": null,
        "QueryBody": "DECLARE  @user_id int = ##UserID##;\nDECLARE @limit int = ##Limit##;\n\n--select rank() over (order by score desc) \"Rank\", * from (\nselect top (@limit)\n  rank() over (order by sum(answers.score) desc) \"Rank\",\n  users.id \"User Link\"\n  ,sum(answers.score) as \"Score\"\n  ,(case when users.id = @user_id then '<<<<' else '' end)\nfrom users\njoin posts answers on (users.id = answers.owneruserid)\njoin posts parent on (answers.parentid = parent.id)\njoin posttags on (parent.id = posttags.postid)\nwhere 1=1\n--and answers.posttypeid = 2  -- answers only\nand LOWER(users.Location) LIKE LOWER('%##CountryName##%')\ngroup by users.id\norder by sum(answers.score) desc\n;",
        "CreationDate": "2018-06-26 18:09:17",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 666655,
        "Title": "Answers By Vote Count and Tag",
        "Description": null,
        "QueryBody": "DECLARE  @TagName nvarchar(35) = '##TagName##'\nDECLARE @StartTagId int = ##StartTagId##\nDECLARE @MinVoteCount int = ##MinVoteCount##\n\nSELECT --TOP 20\n  min(a.OwnerUserId), count(a.Id)\n  --MIN(a.OwnerUserId)--, Count(a.id)\n  --q.Id, q.Tags, a.OwnerDisplayName, a.OwnerUserId, pt.TagId\nFROM Posts q\n --INNER JOIN Posts a on q.AcceptedAnswerId = a.id\n INNER JOIN Posts a on q.Id = a.ParentId\n INNER JOIN PostTags pt on pt.PostId = q.id\nWHERE\n  a.OwnerUserId is not null\n  and a.PostTypeId = 2\n  and a.Score > @MinVoteCount\n  and pt.TagId = @StartTagId\nGROUP BY a.OwnerUserId",
        "CreationDate": "2017-05-04 00:37:28",
        "validated": false,
        "QueryBody_Original": "DECLARE  @TagName nvarchar(35) = '##TagName##'\nDECLARE @StartTagId int = ##StartTagId##\nDECLARE @MinVoteCount int = ##MinVoteCount##\n\nSELECT --TOP 20\n  min(a.OwnerUserId), count(a.Id)\n  --MIN(a.OwnerUserId)--, Count(a.id)\n  --q.Id, q.Tags, a.OwnerDisplayName, a.OwnerUserId, pt.TagId\nFROM Posts q\n --INNER JOIN Posts a on q.AcceptedAnswerId = a.id\n INNER JOIN Posts a on q.Id = a.ParentId\n INNER JOIN PostTags pt on pt.PostId = q.id\nWHERE\n  a.OwnerUserId is not null\n  and a.PostTypeId = 2\n  and a.Score > @MinVoteCount\n  and pt.TagId = @StartTagId\nGROUP BY a.OwnerUserId"
    },
    {
        "QuerySetId": 666788,
        "Title": "Questions on a specific date",
        "Description": null,
        "QueryBody": "SELECT  TOP 10 *\nFROM Posts\nWHERE CreationDate = ##PostDate##",
        "CreationDate": "2017-05-04 08:45:45",
        "validated": false,
        "QueryBody_Original": "SELECT  TOP 10 *\nFROM Posts\nWHERE CreationDate = ##PostDate##"
    },
    {
        "QuerySetId": 667414,
        "Title": "Finding favorites of a user with no accepted answer and no answer posted by that user",
        "Description": null,
        "QueryBody": "DECLARE  @UserID int = ##UserID:int##\n\nSELECT p.Id AS [Post Link], MAX(p.Score) AS 'Score',\n    CAST(MAX(p.AcceptedAnswerId) AS bit) AS 'Accepted Answer?'\n\nFROM Posts p\nLEFT JOIN Votes v ON v.VoteTypeId = 5 AND v.PostId = p.Id\n--LEFT JOIN Posts p2 ON p2.PostTypeId = 2 AND p2.ParentId = p.Id AND \n\nWHERE p.PostTypeId = 1 AND p.AcceptedAnswerId IS NULL AND v.UserId = @UserID\n--AND (SELECT p2.Id FROM Posts p2 WHERE p2.PostTypeId = 2 AND p2.ParentId = p.Id AND p2.OwnerUserId = @UserId) IS NULL\n\nGROUP BY p.Id\n\nORDER BY MAX(p.Score) ASC",
        "CreationDate": "2017-05-05 18:28:23",
        "validated": false,
        "QueryBody_Original": "DECLARE  @UserID int = ##UserID:int##\n\nSELECT p.Id AS [Post Link], MAX(p.Score) AS 'Score',\n    CAST(MAX(p.AcceptedAnswerId) AS bit) AS 'Accepted Answer?'\n\nFROM Posts p\nLEFT JOIN Votes v ON v.VoteTypeId = 5 AND v.PostId = p.Id\n--LEFT JOIN Posts p2 ON p2.PostTypeId = 2 AND p2.ParentId = p.Id AND \n\nWHERE p.PostTypeId = 1 AND p.AcceptedAnswerId IS NULL AND v.UserId = @UserID\n--AND (SELECT p2.Id FROM Posts p2 WHERE p2.PostTypeId = 2 AND p2.ParentId = p.Id AND p2.OwnerUserId = @UserId) IS NULL\n\nGROUP BY p.Id\n\nORDER BY MAX(p.Score) ASC"
    },
    {
        "QuerySetId": 667427,
        "Title": "Number of 'favorite votes' each user has cast",
        "Description": null,
        "QueryBody": "SELECT  u.Id AS [User Link], COUNT(p.Id) AS 'Total Votes', --COUNT(IIF(v.VoteTypeId = 5, 1, 0)) AS 'Favorites Count',\n--(SELECT COUNT(v1.Id) FROM Votes v1 WHERE v1.UserId = u.Id GROUP BY v1.UserId) AS 'Count'\n--COUNT(IIF(v.Id IS NULL, 0, 1)) AS 'Count',\n\nSELECT u.Id AS [User Link], --COUNT(IIF(v.VoteTypeId = 5, 1, 0)) AS 'Favorites Marked',\n'site:\/\/users\/' + CAST(u.Id AS nvarchar(10)) + '?tab=favorites' AS 'User Favorites Page'\n\n\nFROM Users u\n--LEFT JOIN Votes v ON v.UserId = u.Id\n--JOIN Posts p ON v.PostId = p.Id\n\n\n--WHERE v.VoteTypeId IS NULL --OR v.VoteTypeId = 5\n\nWHERE (SELECT COUNT(v.UserId) FROM Votes v WHERE v.UserId = u.Id) IS NULL\n\n\n--GROUP BY u.Id\n\n--ORDER BY COUNT(IIF(v.VoteTypeId IS NULL, 0, 1)) ASC",
        "CreationDate": "2017-05-05 20:38:24",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 667440,
        "Title": "Distribution of questions or answers by user for the year",
        "Description": null,
        "QueryBody": "SELECT  OwnerUserId, count(*) as NumPosts from Posts\nwhere PostTypeId = ##type?2##\ngroup by OwnerUserId\norder by NumPosts desc",
        "CreationDate": "2017-05-05 19:52:54",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 667807,
        "Title": "Count of posts edited by two users",
        "Description": null,
        "QueryBody": "SELECT  Week, [22], [17163], [17702], [13438]\nFROM (\n  SELECT \n    DATEADD(WEEK, DATEDIFF(WEEK, 0, c.CreationDate), 0) AS [Week]\n    , c.UserId\n    , COUNT(*) AS Count\n    FROM Comments c WHERE c.UserId IN (22,17163,17702,13438) and YEAR(c.CreationDate) >= 2016\n  GROUP BY DATEADD(WEEK, DATEDIFF(WEEK, 0, c.CreationDate), 0), c.UserId\n) src\nPIVOT (\n  MAX(Count)\n  FOR UserId IN ([22], [17163], [17702], [13438])\n) piv\nORDER BY [Week] DESC",
        "CreationDate": "2017-05-06 17:20:17",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 668009,
        "Title": "Tags created by the great [identification-request] retagging of 2017",
        "Description": "See https:\/\/anime.meta.stackexchange.com\/q\/3994\/",
        "QueryBody": "SELECT \n  ph.Text,\n  ph.CreationDate\nINTO\n  #t\nFROM\n  PostHistory AS ph\nWHERE\n  ph.PostHistoryTypeId = 6 -- Edit Tags\n  -- By @senshin\n  AND ph.UserId = 1908\n  -- A bit before the retagging began - see https:\/\/anime.meta.stackexchange.com\/revisions\/3994\/3\n  AND ph.CreationDate > '2017-02-06' \n  -- Posts that were tagged [identification-request] immediately before senshin's edit\n  AND (\n    SELECT TOP 1 ph2.Text\n    FROM PostHistory AS ph2\n    WHERE ph2.PostId = ph.PostId\n          AND ph2.PostHistoryTypeId IN (3, 6, 9) -- Initial\/Edit\/Rollback Tags\n          AND ph2.CreationDate < ph.CreationDate\n    ORDER BY ph2.CreationDate DESC\n    ) LIKE '%<identification-request>%'\nORDER BY\n  ph.CreationDate ASC\n  \nSELECT * FROM #t",
        "CreationDate": "2017-05-07 16:02:54",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 668146,
        "Title": "Answer score by post length",
        "Description": "Groups posts of varying length together by answer score for a given user.",
        "QueryBody": "DECLARE  @UserId int = ##UserId##\n\nSELECT \np.Score as AnswerScore,\nsum(case when len(p.body) <= 200 then 1 else 0 end) as PostsWithLen_0_200,\nsum(case when len(p.body) between 201 and 500 then 1 else 0 end) as PostsWithLen_201_500,\nsum(case when len(p.body) between 501 and 1000 then 1 else 0 end) as PostsWithLen_501_1000,\nsum(case when len(p.body) between 1001 and 2000 then 1 else 0 end) as PostsWithLen_1001_2000,\nsum(case when len(p.body) > 2001 then 1 else 0 end) as PostsWithLen_2001plus\n    \nFROM\n    Posts p\nWHERE\n    p.OwnerUserId = @UserId\n  AND\n    p.PostTypeId = 2\ngroup by p.Score",
        "CreationDate": "2017-05-08 14:45:35",
        "validated": false,
        "QueryBody_Original": "DECLARE  @UserId int = ##UserId##\n\nSELECT \np.Score as AnswerScore,\nsum(case when len(p.body) <= 200 then 1 else 0 end) as PostsWithLen_0_200,\nsum(case when len(p.body) between 201 and 500 then 1 else 0 end) as PostsWithLen_201_500,\nsum(case when len(p.body) between 501 and 1000 then 1 else 0 end) as PostsWithLen_501_1000,\nsum(case when len(p.body) between 1001 and 2000 then 1 else 0 end) as PostsWithLen_1001_2000,\nsum(case when len(p.body) > 2001 then 1 else 0 end) as PostsWithLen_2001plus\n    \nFROM\n    Posts p\nWHERE\n    p.OwnerUserId = @UserId\n  AND\n    p.PostTypeId = 2\ngroup by p.Score"
    },
    {
        "QuerySetId": 671057,
        "Title": "Average Number of Answers for Quick Accept vs Slow Accept",
        "Description": null,
        "QueryBody": "SELECT \n  AVG(CAST(p.AnswerCount AS float)) as NumberOfAnswers\nFROM\n  Posts p INNER JOIN \n  Posts a on a.Id = p.AcceptedAnswerId INNER JOIN\n  Votes v on a.Id = v.PostId\nWHERE\n  p.PostTypeId = 1 AND\n  p.AcceptedAnswerID IS NOT NULL AND\n  v.VoteTypeId = 1 AND\n  DATEDIFF(day, p.CreationDate, v.CreationDate) > 1 AND\n  p.AnswerCount > 1\n\nSELECT\n  AVG(CAST(p.AnswerCount AS float)) as NumberOfAnswers\nFROM\n  Posts p INNER JOIN \n  Posts a on a.Id = p.AcceptedAnswerId INNER JOIN\n  Votes v on a.Id = v.PostId\nWHERE\n  p.PostTypeId = 1 AND\n  p.AcceptedAnswerID IS NOT NULL AND\n  v.VoteTypeId = 1 AND\n  DATEDIFF(day, p.CreationDate, v.CreationDate) = 0 AND\n  p.AnswerCount > 1",
        "CreationDate": "2017-05-14 22:01:54",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 671088,
        "Title": "Most popular bad questions about Python with body _R-year by year",
        "Description": "All non-CW questions with at least 1000 views ordered by votes ascending so that the least popular of the questions is on top\r\n",
        "QueryBody": "WITH  at least 1000 views ordered by votes ascending so that the least popular of the questions is on top\n\nSelect TOP 500\n  question.Id as [Post Link],\n  question.Title,\n  question.Score,\n  question.Body,\n  question.AnswerCount as \"Answer Count\",\n  question.ViewCount,\n  t.TagName\nfrom\n  Posts as question\nJOIN PostTypes ty ON ty.Id = question.PostTypeId\nJOIN PostTags questiont ON question.Id = questiont.PostId\nJOIN Tags t ON t.Id = questiont.TagId\nwhere  \n  question.CommunityOwnedDate is null and\n  question.PostTypeId=1 and\n  question.ViewCount > 1 and\n  t.TagName = 'python' and\n  ty.Name = 'Question' and\n  question.CreationDate < '2017-01-01' and\n  question.CreationDate > '2007-01-01'\n\n\norder by question.Score asc, question.ViewCount desc",
        "CreationDate": "2017-05-31 13:13:21",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 673365,
        "Title": "[WIP] Who are the top answering users for a set of tags?",
        "Description": null,
        "QueryBody": "DECLARE  @UserId int = ##UserId:int?149428##\nDECLARE @TagList varchar(8000) = ##TagList:string?python,python-2.7,python-3.x##\n\nSELECT TOP 25 a.Id, a.ParentId, a.Score, a.OwnerUserId, q.Title, q.Tags, q.AnswerCount, q.FavoriteCount\n--SELECT TOP 25 a.Id, a.Score, a.ParentId, a.OwnerUserId\nFROM Posts AS a\nINNER JOIN Posts AS q\n  ON q.Id = a.ParentId\nINNER JOIN PostTags\n  ON q.Id = PostTags.PostId\nINNER JOIN Users\n  ON a.OwnerUserId = Users.Id\nWHERE\n  PostTags.TagId IN (\n    SELECT Id\n    FROM Tags\n    WHERE TagName IN (\n      SELECT *\n      FROM string_split(@TagList, ',')\n    )\n  )\n  AND a.Score >= 1\n  AND a.OwnerUserId = @UserId\n--GROUP BY a.Id, a.ParentId, a.Score, a.OwnerUserId\n--GROUP BY a.OwnerUserId\nORDER BY a.Score DESC",
        "CreationDate": "2017-05-21 21:30:20",
        "validated": false,
        "QueryBody_Original": "DECLARE  @UserId int = ##UserId:int?149428##\nDECLARE @TagList varchar(8000) = ##TagList:string?python,python-2.7,python-3.x##\n\nSELECT TOP 25 a.Id, a.ParentId, a.Score, a.OwnerUserId, q.Title, q.Tags, q.AnswerCount, q.FavoriteCount\n--SELECT TOP 25 a.Id, a.Score, a.ParentId, a.OwnerUserId\nFROM Posts AS a\nINNER JOIN Posts AS q\n  ON q.Id = a.ParentId\nINNER JOIN PostTags\n  ON q.Id = PostTags.PostId\nINNER JOIN Users\n  ON a.OwnerUserId = Users.Id\nWHERE\n  PostTags.TagId IN (\n    SELECT Id\n    FROM Tags\n    WHERE TagName IN (\n      SELECT *\n      FROM string_split(@TagList, ',')\n    )\n  )\n  AND a.Score >= 1\n  AND a.OwnerUserId = @UserId\n--GROUP BY a.Id, a.ParentId, a.Score, a.OwnerUserId\n--GROUP BY a.OwnerUserId\nORDER BY a.Score DESC"
    },
    {
        "QuerySetId": 675648,
        "Title": "Find Stack Overflow Users by City and keyword",
        "Description": null,
        "QueryBody": "DECLARE  @user_id int = ##UserID##;\nDECLARE @limit int = ##Limit##;\nDECLARE @tag_id int = (select id from tags where tagname = '##TagName##');\n\n--select rank() over (order by score desc) \"Rank\", * from (\nselect top (@limit)\n  rank() over (order by sum(answers.score) desc) \"Rank\",\n  users.id \"User Link\"\n  ,sum(answers.score) as \"Score\"\n  ,(case when users.id = @user_id then '<<<<' else '' end)\nfrom users\njoin posts answers on (users.id = answers.owneruserid)\njoin posts parent on (answers.parentid = parent.id)\njoin posttags on (parent.id = posttags.postid)\nwhere posttags.tagid = @tag_id\nand answers.posttypeid = 2  -- answers only\ngroup by users.id\norder by sum(answers.score) desc\n;",
        "CreationDate": "2017-05-25 14:08:02",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 675672,
        "Title": "Top users by answer score of tag and location",
        "Description": null,
        "QueryBody": "DECLARE  @limit int = ##Limit##;\n\nselect top (@limit)\n  rank() over (order by sum(answers.score) desc) \"Rank\",\n  users.id \"User Link\",\n  sum(answers.score) as \"Score\"\nfrom users\njoin posts answers on (users.id = answers.owneruserid)\njoin posts parent on (answers.parentid = parent.id)\njoin posttags on (parent.id = posttags.postid)\nwhere posttags.tagid in \n  (select id from tags where lower(tagname) like lower('scala'))\nand answers.posttypeid = 2  -- answers only\nand lower(users.location) like lower('New York') \ngroup by users.id\norder by sum(answers.score) desc\n;",
        "CreationDate": "2018-10-17 02:48:46",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 676268,
        "Title": "Number of posts by calendar year, with deleted",
        "Description": null,
        "QueryBody": "SELECT  datepart(year, CreationDate) as year,\n  count(Id) as postsCount \n  from Posts\nwhere PostTypeId = ##type?2##\ngroup by datepart(year, CreationDate) \norder by datepart(year, CreationDate) asc",
        "CreationDate": "2017-05-26 17:35:48",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 676526,
        "Title": "Top X viewed questions for the last Y days",
        "Description": null,
        "QueryBody": "SELECT  TOP ##ResultSize## Id as [Post Link], ViewCount, Score From Posts\nWHERE CreationDate > GETDATE() - ##Days##\nORDER BY ViewCount DESC",
        "CreationDate": "2017-05-27 12:04:11",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 677529,
        "Title": "Sandbox Stale Posts per Month",
        "Description": null,
        "QueryBody": "SELECT  * from Posts as post\n--Where post.Id = 2140\n\nSELECT \n  sum(case when CreationDate >= DATEADD(mm, -1, GETDATE()) then 1 else 0 end),\n  sum(case when CreationDate >= DATEADD(mm, -2, GETDATE()) AND CreationDate < DATEADD(mm, -1, GETDATE()) then 1 else 0 end),\n  sum(case when CreationDate >= DATEADD(mm, -3, GETDATE()) AND CreationDate < DATEADD(mm, -2, GETDATE()) then 1 else 0 end),\n  sum(case when CreationDate >= DATEADD(mm, -4, GETDATE()) AND CreationDate < DATEADD(mm, -3, GETDATE()) then 1 else 0 end),\n  sum(case when CreationDate >= DATEADD(mm, -5, GETDATE()) AND CreationDate < DATEADD(mm, -4, GETDATE()) then 1 else 0 end),\n  sum(case when CreationDate >= DATEADD(mm, -6, GETDATE()) AND CreationDate < DATEADD(mm, -5, GETDATE()) then 1 else 0 end)\nFrom Posts\nWhere ParentId = 2140",
        "CreationDate": "2017-05-29 18:09:19",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 677754,
        "Title": "Export all actions of the user which you're interested in",
        "Description": null,
        "QueryBody": "SELECT  CreationDate, Score, Body FROM Posts WHERE OwnerUserId = 221\nSELECT v.VoteTypeId, v.PostId AS [Post Link]\nFROM Votes v\nWHERE v.UserId = 221",
        "CreationDate": "2017-05-30 15:19:49",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 678052,
        "Title": "Users With Most Accepted Answers",
        "Description": null,
        "QueryBody": "SELECT  top ##NoUsers?3##\n  p.OwnerUserId as [User Link],\n  count(p.Id) as [Answers]\nfrom\n  Posts p JOIN Posts q ON q.AcceptedAnswerId = p.Id\nwhere\n      q.PostTypeId = 1\n  and p.PostTypeId = 2\n  and p.OwnerUserId is not null\n  and p.DeletionDate is null\n  and right(convert(nchar(10), p.CreationDate, 103), 7) = ##Month:string##\ngroup by p.OwnerUserId\norder by count(p.Id) desc",
        "CreationDate": "2017-05-30 19:41:41",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 678062,
        "Title": "Users Who Asked the Most Questions",
        "Description": null,
        "QueryBody": "SELECT  top ##NoUsers?3##\n  p.OwnerUserId as [User Link],\n  count(p.Id) as [Questions]\nfrom\n  Posts p\nwhere\n      PostTypeId = 1\n  and OwnerUserId is not null\n  and DeletionDate is null\n  and right(convert(nchar(10), CreationDate, 103), 7) = ##Month:string##\ngroup by p.OwnerUserId\norder by count(p.Id) desc",
        "CreationDate": "2017-05-30 19:47:51",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 678073,
        "Title": "Users Who Answered the Most Questions",
        "Description": null,
        "QueryBody": "SELECT  top ##NoUsers?3##\n  p.OwnerUserId as [User Link],\n  count(p.Id) as [Questions]\nfrom\n  Posts p\nwhere\n      PostTypeId = 2\n  and OwnerUserId is not null\n  and DeletionDate is null\n  and right(convert(nchar(10), CreationDate, 103), 7) = ##Month:string##\ngroup by p.OwnerUserId\norder by count(p.Id) desc",
        "CreationDate": "2017-05-30 19:54:41",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 680252,
        "Title": "Questions closed as off topic on not constructive",
        "Description": null,
        "QueryBody": "SELECT  *\nFROM Posts Questions\n WHERE\n        Questions.PostTypeId = 1 -- Questions\n        And \n        Questions.Tags like '%<' + ##tagname:string## + '>%' \n        OR(Questions.Title LIKE '%' + ##topic:string## + '%' OR Questions.Tags LIKE '%<' + ##topic:string## + '>%' OR Questions.Body LIKE '%' + ##topic:string## + '%')\n           \n        AND year(Questions.CreationDate) between 2014 and 2018",
        "CreationDate": "2019-02-19 06:56:52",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 680388,
        "Title": "Close votes on Tag X",
        "Description": null,
        "QueryBody": "SELECT  Posts.Id AS [Post Link]\nFROM Posts\n    INNER JOIN PostTags ON PostTags.PostId = Posts.Id\n    INNER JOIN Tags ON PostTags.TagId = Tags.Id\nWHERE Tags.TagName = ##Tag:string## AND\n    Posts.CreationDate > DateAdd(year, -1, getDate())",
        "CreationDate": "2017-06-04 15:14:21",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 680494,
        "Title": "Comments containing a certain word or phrase",
        "Description": null,
        "QueryBody": "SELECT  TOP 3 PostId [Post Link], CreationDate, Text\nFROM Comments\nWHERE Text LIKE '%' + ##SearchQuery:string## + '%'\nORDER BY CreationDate DESC",
        "CreationDate": "2017-12-22 19:10:43",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 680698,
        "Title": "Most viewed questions and answers for a user",
        "Description": null,
        "QueryBody": "SELECT \n  Questions.Id as [Post Link],\n  Questions.ViewCount\nfrom Posts as Questions\nwhere Questions.OwnerUserId = ##UserId##\nand Questions.PostTypeId = 1\n\nORDER by ViewCount desc;",
        "CreationDate": "2020-10-06 16:06:39",
        "validated": false,
        "QueryBody_Original": "SELECT \n  Questions.Id as [Post Link],\n  Questions.ViewCount\nfrom Posts as Questions\nwhere Questions.OwnerUserId = ##UserId##\nand Questions.PostTypeId = 1\n\nORDER by ViewCount desc;"
    },
    {
        "QuerySetId": 681495,
        "Title": "Users with >= N downvotes and Marshal badge",
        "Description": null,
        "QueryBody": "SELECT  u.Id as [User Link], u.Downvotes from Users u\ninner join Badges b on b.UserId = u.id \nwhere b.Name = 'Marshal' and u.DownVotes >= ##min?1000##\norder by u.Downvotes desc",
        "CreationDate": "2017-06-06 05:19:57",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 681845,
        "Title": "Questions with RAW tag at first revision and no RAW tag now",
        "Description": null,
        "QueryBody": "SELECT  Posts.Id as [Post Link],\n  Posts.Tags,\n  PostInits.Text as [Initial Tags],\n  Posts.CreationDate\nfrom Posts\ninner join (\n  SELECT PostId, Text\n  from PostHistory\n  where PostHistoryTypeId = 3\n  and Text like '%rules-as-written%'\n) as PostInits on Posts.Id = PostInits.PostId\nwhere Posts.Tags not like '%rules-as-written%'\nand (DATEDIFF(month, Posts.CreationDate, GETDATE()) < ##MaxQuestionAgeInMonths:int?24##)\norder by CreationDate desc",
        "CreationDate": "2017-06-07 03:35:39",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 681846,
        "Title": "Questions with a specific tag now and not at first revision",
        "Description": null,
        "QueryBody": "SELECT  Posts.Id as [Post Link],\n  Posts.Tags,\n  PostInits.Text as [Initial Tags],\n  Posts.CreationDate\nfrom Posts\ninner join (\n  SELECT PostId, Text\n  from PostHistory\n  where PostHistoryTypeId = 3\n  and Text not like '%##Tag##%'\n) as PostInits on Posts.Id = PostInits.PostId\nwhere Posts.Tags like '%##Tag##%'\nand (DATEDIFF(month, Posts.CreationDate, GETDATE()) <= ##MaxQuestionAgeInMonths:int?24##)\nand (DATEDIFF(month, Posts.CreationDate, GETDATE()) >= ##MinQuestionAgeInMonths:int?0##)\norder by CreationDate desc",
        "CreationDate": "2017-07-17 14:08:35",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 681853,
        "Title": "Questions with a specific tag at first revision and without that tag now",
        "Description": null,
        "QueryBody": "SELECT  Posts.Id as [Post Link],\n  Posts.Tags,\n  PostInits.Text as [Initial Tags],\n  Posts.CreationDate\nfrom Posts\ninner join (\n  SELECT PostId, Text\n  from PostHistory\n  where PostHistoryTypeId = 3\n  and Text like '%##Tag##%'\n) as PostInits on Posts.Id = PostInits.PostId\nwhere Posts.Tags not like '%##Tag##%'\nand (DATEDIFF(month, Posts.CreationDate, GETDATE()) <= ##MaxQuestionAgeInMonths:int?24##)\nand (DATEDIFF(month, Posts.CreationDate, GETDATE()) >= ##MinQuestionAgeInMonths:int?0##)\norder by CreationDate desc",
        "CreationDate": "2017-07-17 14:08:08",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 681986,
        "Title": "Questions with a specific tag both at first and current revision",
        "Description": null,
        "QueryBody": "SELECT \nSUM(CASE WHEN HadTag = 1 AND HasTag = 0 THEN 1 ELSE 0 END) AS TagRemoved,\nSUM(CASE WHEN HadTag = 0 AND HasTag = 1 THEN 1 ELSE 0 END) AS TagAdded,\nSUM(CASE WHEN HadTag = 1 AND HasTag = 1 THEN 1 ELSE 0 END) AS TagPersisted,\nSUM(CASE WHEN HadTag = 1 OR HasTag = 1 THEN 1 ELSE 0 END) AS Total\nfrom\n(SELECT CASE WHEN Posts.Tags LIKE '%##Tag##%' THEN 1 ELSE 0 END AS HasTag,\nHadTag\nfrom Posts\ninner join (\n  SELECT PostId, Text,\n  CASE WHEN Text LIKE '%##Tag##%' THEN 1 ELSE 0 END AS HadTag\n  from PostHistory\n  where PostHistoryTypeId = 3\n) as PostInits on Posts.Id = PostInits.PostId\nwhere (DATEDIFF(month, Posts.CreationDate, GETDATE()) <= ##MaxQuestionAgeInMonths:int?24##)\nand (DATEDIFF(month, Posts.CreationDate, GETDATE()) >= ##MinQuestionAgeInMonths:int?0##)) sq",
        "CreationDate": "2017-07-17 17:38:19",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 682113,
        "Title": "LogScale reputation distribution, 1% bin precision",
        "Description": null,
        "QueryBody": "WITH  1% relative error\n-- WITHout fetching the whole table\n\n\nSELECT power( 1.02, bin ) AS approx_rep, count(*) AS n FROM (\n        SELECT floor( log(reputation) \/ log(1.02) + 0.5) AS bin \n        FROM users where reputation <1000 AND reputation > 101\n    ) AS temp GROUP BY bin ORDER BY bin;",
        "CreationDate": "2017-06-07 18:24:29",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 682499,
        "Title": "Top n Python questions since x",
        "Description": null,
        "QueryBody": "SELECT  TOP(##top:int?10##) p.id,  p.Title, p.CreationDate, p.Score, p.AnswerCount\nFROM Posts AS p\n  JOIN PostTags AS ptags ON p.Id = ptags.PostId\n  JOIN Tags AS tags ON tags.Id = ptags.TagId\nWHERE \n  tags.TagName = 'python'\n  AND p.PostTypeId = 1 -- question\n  AND p.Score > 1\n  AND p.CreationDate >=  ##since:string##\nORDER BY p.Score DESC, p.CreationDate DESC",
        "CreationDate": "2017-06-10 07:10:10",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 683106,
        "Title": "Sandbox: Inactive for X months && Score <= Y",
        "Description": null,
        "QueryBody": "SELECT  \n  'https:\/\/codegolf.meta.stackexchange.com\/a\/' + CAST(P.Id AS nvarchar) + '\/43214|' + CAST(P.Score as nvarchar) \nFrom Posts as P\nWhere ParentId = 2140\n  and P.Score <= ##Score##\n  and P.LastActivityDate <= DateAdd(mm,-##Month##, getDate())",
        "CreationDate": "2017-06-09 22:39:03",
        "validated": false,
        "QueryBody_Original": "SELECT  \n  'https:\/\/codegolf.meta.stackexchange.com\/a\/' + CAST(P.Id AS nvarchar) + '\/43214|' + CAST(P.Score as nvarchar) \nFrom Posts as P\nWhere ParentId = 2140\n  and P.Score <= ##Score##\n  and P.LastActivityDate <= DateAdd(mm,-##Month##, getDate())"
    },
    {
        "QuerySetId": 683270,
        "Title": "TeX.SX \\\\ corruption (based on user ID)",
        "Description": null,
        "QueryBody": "DECLARE  @UserId int = ##UserId##\n\n\nselect\n ID AS [Post Link],\n     'site:\/\/posts\/' + CAST(Id AS nvarchar) + '\/edit|' + \n  'Edit'  AS [Edit Link],\n   CreationDate\nfrom posts\nwhere (replace(replace(body,'\\\\',''), ' ','X')  like '%\\XXXX%') \nand (Posts.OwnerUserId = @UserId or 0 = @UserID)\norder by CreationDate;",
        "CreationDate": "2017-06-10 18:22:30",
        "validated": false,
        "QueryBody_Original": "DECLARE  @UserId int = ##UserId##\n\n\nselect\n ID AS [Post Link],\n     'site:\/\/posts\/' + CAST(Id AS nvarchar) + '\/edit|' + \n  'Edit'  AS [Edit Link],\n   CreationDate\nfrom posts\nwhere (replace(replace(body,'\\\\',''), ' ','X')  like '%\\XXXX%') \nand (Posts.OwnerUserId = @UserId or 0 = @UserID)\norder by CreationDate;"
    },
    {
        "QuerySetId": 683280,
        "Title": "accepted answers with \\\\ bug",
        "Description": null,
        "QueryBody": "DECLARE  @UserId int = ##UserId##\n\n\nselect\n p.ID AS [Post Link],\n     'site:\/\/posts\/' + CAST(p.Id AS nvarchar) + '\/edit|' + \n  'Edit'  AS [Edit Link],\n   p.CreationDate\nfrom posts p JOIN posts q on q.AcceptedAnswerId = p.Id\nwhere (replace(replace(p.body,'\\\\',''), ' ','X')  like '%\\XXXX%') \nand (p.OwnerUserId = @UserId or 0 = @UserID)\norder by p.CreationDate;",
        "CreationDate": "2017-06-10 22:02:40",
        "validated": false,
        "QueryBody_Original": "DECLARE  @UserId int = ##UserId##\n\n\nselect\n p.ID AS [Post Link],\n     'site:\/\/posts\/' + CAST(p.Id AS nvarchar) + '\/edit|' + \n  'Edit'  AS [Edit Link],\n   p.CreationDate\nfrom posts p JOIN posts q on q.AcceptedAnswerId = p.Id\nwhere (replace(replace(p.body,'\\\\',''), ' ','X')  like '%\\XXXX%') \nand (p.OwnerUserId = @UserId or 0 = @UserID)\norder by p.CreationDate;"
    },
    {
        "QuerySetId": 683874,
        "Title": "viewcount by range of Unanswered question minus last day",
        "Description": null,
        "QueryBody": "DECLARE  @date DATETIME\n\nSELECT @date = max(CreationDate)-Datepart(dd, max(CreationDate))\nFROM posts\nWHERE PostTypeId = 1;\n\n\nselect\navg(CAST(viewcount AS BIGINT)) AS 'Avg question ViewCount(all)'\n   \n\nfrom posts\nwhere posttypeid = 1\n\nand ClosedDate is null\nand CreationDate < @date",
        "CreationDate": "2017-06-13 21:12:41",
        "validated": false,
        "QueryBody_Original": "DECLARE  @date DATETIME\n\nSELECT @date = max(CreationDate)-Datepart(dd, max(CreationDate))\nFROM posts\nWHERE PostTypeId = 1;\n\n\nselect\navg(CAST(viewcount AS BIGINT)) AS 'Avg question ViewCount(all)'\n   \n\nfrom posts\nwhere posttypeid = 1\n\nand ClosedDate is null\nand CreationDate < @date"
    },
    {
        "QuerySetId": 683888,
        "Title": "TeX.SX \\\\ corruption (based on user ID or 0) with edit link ",
        "Description": null,
        "QueryBody": "DECLARE  @year int = ##Year##\n\n\nselect\n p.ID AS [Post Link],\n     'site:\/\/posts\/' + CAST(p.Id AS nvarchar) + '\/edit|' + \n  'Edit'  AS [Edit Link],\n   p.CreationDate\nfrom posts p\nwhere 1=1\nand p.AcceptedAnswerId!=p.ID\nand year(p.CreationDate)!=2011 and year(p.CreationDate)=@year\nand (replace(replace(p.body,'\\\\',''), ' ','X')  like '%\\XXXX%') \norder by p.CreationDate desc;",
        "CreationDate": "2017-06-13 20:19:31",
        "validated": false,
        "QueryBody_Original": "DECLARE  @year int = ##Year##\n\n\nselect\n p.ID AS [Post Link],\n     'site:\/\/posts\/' + CAST(p.Id AS nvarchar) + '\/edit|' + \n  'Edit'  AS [Edit Link],\n   p.CreationDate\nfrom posts p\nwhere 1=1\nand p.AcceptedAnswerId!=p.ID\nand year(p.CreationDate)!=2011 and year(p.CreationDate)=@year\nand (replace(replace(p.body,'\\\\',''), ' ','X')  like '%\\XXXX%') \norder by p.CreationDate desc;"
    },
    {
        "QuerySetId": 684214,
        "Title": "TeX.SX \\\\ corruption (based on year, not accepted) with edit link ",
        "Description": null,
        "QueryBody": "DECLARE  @year int = ##Year##\n\n\nselect\n p.ID AS [Post Link],\n     'site:\/\/posts\/' + CAST(p.Id AS nvarchar) + '\/edit|' + \n  'Edit'  AS [Edit Link],\n   p.CreationDate\nfrom posts p\nwhere 1=1\nand p.AcceptedAnswerId<>p.ID\nand year(p.CreationDate)!=2011 and year(p.CreationDate)=@year\nand (\n      (replace(replace(p.body,'\\\\',''), ' ','X')  like '%\\XXXX%') \n    )\norder by p.CreationDate desc;",
        "CreationDate": "2017-06-14 20:28:28",
        "validated": false,
        "QueryBody_Original": "DECLARE  @year int = ##Year##\n\n\nselect\n p.ID AS [Post Link],\n     'site:\/\/posts\/' + CAST(p.Id AS nvarchar) + '\/edit|' + \n  'Edit'  AS [Edit Link],\n   p.CreationDate\nfrom posts p\nwhere 1=1\nand p.AcceptedAnswerId<>p.ID\nand year(p.CreationDate)!=2011 and year(p.CreationDate)=@year\nand (\n      (replace(replace(p.body,'\\\\',''), ' ','X')  like '%\\XXXX%') \n    )\norder by p.CreationDate desc;"
    },
    {
        "QuerySetId": 684286,
        "Title": "Corruption \\\\ based on year ",
        "Description": null,
        "QueryBody": "DECLARE  @year int = ##Year##\n\n\nselect\n p.ID AS [Post Link],\n     'site:\/\/posts\/' + CAST(p.Id AS nvarchar) + '\/edit|' + \n  'Edit'  AS [Edit Link],\n   p.CreationDate\nfrom posts p\nwhere 1=1\nand p.AcceptedAnswerId is null\nand year(p.CreationDate)=@year\nand (replace(replace(p.body,'\\\\',''), ' ','X')  like '%\\XXXX%') \n      \norder by p.CreationDate desc;",
        "CreationDate": "2017-06-14 20:06:48",
        "validated": false,
        "QueryBody_Original": "DECLARE  @year int = ##Year##\n\n\nselect\n p.ID AS [Post Link],\n     'site:\/\/posts\/' + CAST(p.Id AS nvarchar) + '\/edit|' + \n  'Edit'  AS [Edit Link],\n   p.CreationDate\nfrom posts p\nwhere 1=1\nand p.AcceptedAnswerId is null\nand year(p.CreationDate)=@year\nand (replace(replace(p.body,'\\\\',''), ' ','X')  like '%\\XXXX%') \n      \norder by p.CreationDate desc;"
    },
    {
        "QuerySetId": 684580,
        "Title": "Filtered \\\\ corruption null accepted posts",
        "Description": null,
        "QueryBody": "DECLARE  @year int = ##Year##\n\n\nselect\n p.ID AS [Post Link],\n     'site:\/\/posts\/' + CAST(p.Id AS nvarchar) + '\/edit|' + \n  'Edit'  AS [Edit Link],\n   p.CreationDate\nfrom posts p\nwhere 1=1\nand (not(p.AcceptedAnswerId<>p.ID) or p.AcceptedAnswerId is null)\nand year(p.CreationDate)=@year\nand (replace(replace(p.body,'\\\\',''), ' ','X')  like '%\\XXXX%') \nand (p.OwnerUserId is null or p.OwnerUserId not in (5764,4301,16967,15925))\norder by p.CreationDate desc;",
        "CreationDate": "2017-06-15 21:56:48",
        "validated": false,
        "QueryBody_Original": "DECLARE  @year int = ##Year##\n\n\nselect\n p.ID AS [Post Link],\n     'site:\/\/posts\/' + CAST(p.Id AS nvarchar) + '\/edit|' + \n  'Edit'  AS [Edit Link],\n   p.CreationDate\nfrom posts p\nwhere 1=1\nand (not(p.AcceptedAnswerId<>p.ID) or p.AcceptedAnswerId is null)\nand year(p.CreationDate)=@year\nand (replace(replace(p.body,'\\\\',''), ' ','X')  like '%\\XXXX%') \nand (p.OwnerUserId is null or p.OwnerUserId not in (5764,4301,16967,15925))\norder by p.CreationDate desc;"
    },
    {
        "QuerySetId": 685111,
        "Title": "Total Answers and Total Answers Views in a Year",
        "Description": null,
        "QueryBody": "DECLARE  @userId int = ##userId##;\n\nselect count(*) questions\n  , sum(q.ViewCount \n        --* DATEDIFF(day, a.CreationDate, GETDATE())\n        --\/ DATEDIFF(day, q.CreationDate, GETDATE())\n        )views\n  , MAX(a.CreationDate) lastAnswerDate\nfrom Posts a join Posts q on q.Id = a.ParentId\nwhere a.OwnerUserId = @userId\nand a.PostTypeId = 2\nand q.PostTypeId = 1",
        "CreationDate": "2018-09-05 11:56:44",
        "validated": false,
        "QueryBody_Original": "DECLARE  @userId int = ##userId##;\n\nselect count(*) questions\n  , sum(q.ViewCount \n        --* DATEDIFF(day, a.CreationDate, GETDATE())\n        --\/ DATEDIFF(day, q.CreationDate, GETDATE())\n        )views\n  , MAX(a.CreationDate) lastAnswerDate\nfrom Posts a join Posts q on q.Id = a.ParentId\nwhere a.OwnerUserId = @userId\nand a.PostTypeId = 2\nand q.PostTypeId = 1"
    },
    {
        "QuerySetId": 685688,
        "Title": "Socket.IO vs SockJS vs Primus",
        "Description": null,
        "QueryBody": "DECLARE    @StartDate DATETIME = '2016-1-1'\n         ,@EndDate DATETIME = '2017-06-18'\n\nSELECT RoundToMonth, TagName, TagCount\nFROM \n(\n  SELECT  \n    DATEADD(Month, DATEDIFF(MONTH, 0, CreationDate), 0) RoundToMonth\n    , COUNT(PostTags.TagID) TagCount\n    , TagID\n  FROM PostTags\n  LEFT JOIN Posts ON\n    PostTags.PostId = Posts.Id\n  WHERE \n    PostTags.TagID IN (SELECT Id FROM #MyTags)\n    AND CreationDate > @StartDate\n    AND CreationDate < @EndDate\n  GROUP BY\n    DATEADD(Month, DATEDIFF(MONTH, 0, CreationDate), 0)\n    , PostTags.TagID\n) TagCountPerMonth\nLEFT JOIN Tags ON TagCountPerMonth.TagId = Tags.Id\nORDER BY RoundToMonth DESC, TagName ASC",
        "CreationDate": "2019-07-07 15:57:43",
        "validated": false,
        "QueryBody_Original": "DECLARE    @StartDate DATETIME = '2016-1-1'\n         ,@EndDate DATETIME = '2017-06-18'\n\nSELECT RoundToMonth, TagName, TagCount\nFROM \n(\n  SELECT  \n    DATEADD(Month, DATEDIFF(MONTH, 0, CreationDate), 0) RoundToMonth\n    , COUNT(PostTags.TagID) TagCount\n    , TagID\n  FROM PostTags\n  LEFT JOIN Posts ON\n    PostTags.PostId = Posts.Id\n  WHERE \n    PostTags.TagID IN (SELECT Id FROM #MyTags)\n    AND CreationDate > @StartDate\n    AND CreationDate < @EndDate\n  GROUP BY\n    DATEADD(Month, DATEDIFF(MONTH, 0, CreationDate), 0)\n    , PostTags.TagID\n) TagCountPerMonth\nLEFT JOIN Tags ON TagCountPerMonth.TagId = Tags.Id\nORDER BY RoundToMonth DESC, TagName ASC"
    },
    {
        "QuerySetId": 685724,
        "Title": "Posts containing a certain word or phrase formatted as code",
        "Description": "Formatting programming language names or other keywords as code is explicitly discouraged (see https:\/\/meta.stackexchange.com\/q\/135112\/349538). However, some users do it anyway. This query will help you find such posts so that you can edit them.",
        "QueryBody": "SELECT  TOP ##NumberOfPosts:int?100## Id AS [Post Link]\nFROM   Posts\nWHERE  Body LIKE '%<code>' + ##WordFormattedAsCode:string## + '<\/code>%'",
        "CreationDate": "2017-06-18 16:51:56",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 685959,
        "Title": "Country and Reputation Wise Rank",
        "Description": null,
        "QueryBody": "SELECT \n    ROW_NUMBER() OVER(ORDER BY Reputation DESC) AS [#], \n    Id AS [User Link], \n    Reputation\nFROM\n    Users \nWHERE\n    LOWER(Location) LIKE LOWER('%##CountryName##%')\n    AND Reputation > ##Reputation##\nORDER BY\n    Reputation DESC;",
        "CreationDate": "2018-01-16 02:59:22",
        "validated": false,
        "QueryBody_Original": "SELECT \n    ROW_NUMBER() OVER(ORDER BY Reputation DESC) AS [#], \n    Id AS [User Link], \n    Reputation\nFROM\n    Users \nWHERE\n    LOWER(Location) LIKE LOWER('%##CountryName##%')\n    AND Reputation > ##Reputation##\nORDER BY\n    Reputation DESC;"
    },
    {
        "QuerySetId": 686796,
        "Title": "Search users by displayName and Country",
        "Description": null,
        "QueryBody": "WITH  user-links)\n-- A simply query to find users in your city or country. Added user links.\n\nselect Id [User Link], Reputation, DisplayName, Location\nfrom Users\nwhere \n-- Location like '%##Location##%' and\nDisplayName like '%##DisplayName##%'\norder by Reputation desc",
        "CreationDate": "2017-06-21 10:19:37",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 686938,
        "Title": "Find questions with only one given tag",
        "Description": null,
        "QueryBody": "SELECT  Id, Score, Title FROM Posts \nWHERE PostTypeId = 1 AND Tags LIKE '<'+##TagName:string##+'>'",
        "CreationDate": "2017-06-21 22:41:28",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 687141,
        "Title": "Highest scoring unanswered questions in the last two weeks",
        "Description": null,
        "QueryBody": "SELECT  P.Id AS [Post Link], Score, AnswerCount, ViewCount, CreationDate\nFROM Posts P\nINNER JOIN PostTags PT\n  ON PT.PostId = P.Id\nINNER JOIN Tags T\n  ON T.Id = PT.TagId\nWHERE T.TagName = ##Tag:string##\nAND P.AcceptedAnswerId IS NULL\nAND P.CreationDate >= GETDATE()-14\nORDER BY Score DESC, AnswerCount ASC, CreationDate DESC",
        "CreationDate": "2017-06-22 15:38:44",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 687544,
        "Title": "Rep distribution - Distrubucion de la Reputacion",
        "Description": "es\r\n==\r\nGenerates a data table suitable for graphing Rep distribution, as a metric of site performance.\r\n\r\n\r\nGenera una dabka de datos apropiada para graficar la distribuci\u00f3n de la reputaci\u00f3n como m\u00e9trica de desempe\u00f1o de un sitio",
        "QueryBody": "SELECT  \n    ROUND(reputation\/##Width##, 0)*##Width## as Rep, \n    COUNT(*) as number_of_users \nFROM (\n    SELECT * \n    FROM Users \n    WHERE reputation >101  \n    ) a\nGROUP BY ROUND(reputation\/##Width##, 0)*##Width## \nORDER BY ROUND(reputation\/##Width##, 0)*##Width##",
        "CreationDate": "2017-06-23 06:24:39",
        "validated": false,
        "QueryBody_Original": "SELECT  \n    ROUND(reputation\/##Width##, 0)*##Width## as Rep, \n    COUNT(*) as number_of_users \nFROM (\n    SELECT * \n    FROM Users \n    WHERE reputation >101  \n    ) a\nGROUP BY ROUND(reputation\/##Width##, 0)*##Width## \nORDER BY ROUND(reputation\/##Width##, 0)*##Width##"
    },
    {
        "QuerySetId": 688206,
        "Title": "\"Thanks\" comments on accepted answers",
        "Description": null,
        "QueryBody": "DECLARE  @NumComments INT = ##NumComments?100##\n\nSELECT TOP (@NumComments) Id AS [Comment Link]\nFROM Comments\nWHERE (\n    Text LIKE 'thank you%' COLLATE SQL_Latin1_General_CP1_CI_AS OR\n    Text LIKE 'thanks%' COLLATE SQL_Latin1_General_CP1_CI_AS\n)\nAND EXISTS(\n    SELECT *\n    FROM Votes\n    WHERE VoteTypeId = 1 AND PostId = Comments.PostId\n)\nORDER BY Len(Text), CreationDate",
        "CreationDate": "2017-12-22 23:40:36",
        "validated": false,
        "QueryBody_Original": "DECLARE  @NumComments INT = ##NumComments?100##\n\nSELECT TOP (@NumComments) Id AS [Comment Link]\nFROM Comments\nWHERE (\n    Text LIKE 'thank you%' COLLATE SQL_Latin1_General_CP1_CI_AS OR\n    Text LIKE 'thanks%' COLLATE SQL_Latin1_General_CP1_CI_AS\n)\nAND EXISTS(\n    SELECT *\n    FROM Votes\n    WHERE VoteTypeId = 1 AND PostId = Comments.PostId\n)\nORDER BY Len(Text), CreationDate"
    },
    {
        "QuerySetId": 690993,
        "Title": "Views on Naruto\/etc vs. other questions",
        "Description": null,
        "QueryBody": "SELECT \n  p.Id,\n  (CASE WHEN \n    p.Tags LIKE '%<naruto>%' \n    OR p.Tags LIKE '%<bleach>%' \n    OR p.Tags LIKE '%<one-piece>%' \n    OR p.Tags LIKE '%<dragon-ball%' \n    OR p.Tags LIKE '%<fairy-tail>%'\n    THEN 1 ELSE 0 END) AS \"IsFiveFranchises\"\nINTO #t\nFROM Posts AS p\n\nSELECT\n  t.IsFiveFranchises,\n  SUM(p.ViewCount) AS [TotalQuestionViews]\nFROM\n  Posts AS p\n  INNER JOIN #t AS t ON p.Id = t.Id\nGROUP BY\n  t.IsFiveFranchises",
        "CreationDate": "2017-07-04 01:14:12",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 691816,
        "Title": "Questions in a given tag sorted by number of views per day",
        "Description": null,
        "QueryBody": "DECLARE  @today datetime = getdate()\n\nselect\n  q.Id as [Post Link],\n  q.ViewCount,\n  round(cast(q.ViewCount as float) \/ DATEDIFF(dd, q.CreationDate, @today), 1) as ViewsPerDay\nfrom Posts q\norder by Len(q.Body) desc",
        "CreationDate": "2017-07-22 10:55:19",
        "validated": false,
        "QueryBody_Original": "DECLARE  @today datetime = getdate()\n\nselect\n  q.Id as [Post Link],\n  q.ViewCount,\n  round(cast(q.ViewCount as float) \/ DATEDIFF(dd, q.CreationDate, @today), 1) as ViewsPerDay\nfrom Posts q\norder by Len(q.Body) desc"
    },
    {
        "QuerySetId": 692590,
        "Title": "rep diff with and without rep cap",
        "Description": null,
        "QueryBody": "DECLARE  @UserID int = ##UserID:int##\n\nDECLARE @nocapRep int\nselect @nocapRep = SUM(Case When VoteTypeID = 1 Then 15 WHEN (VoteTypeID=2 AND p.PostTypeID=2) THEN 10 WHEN (VoteTypeID=2 AND p.PostTypeID=1) THEN 5 WHEN VoteTypeID=3 THEN -2 when VoteTypeID=16 then 2 ELSE 0 END)\nFROM Votes v\nINNER JOIN Posts p ON p.ID = v.PostID\nWHERE p.OwnerUserID = @UserID AND p.CommunityOwnedDate IS NULL\n\nDECLARE @withCap int\nSelect @withCap = max(Reputation)\nFrom Users \nwhere Id = ##UserID:int##\n\nDECLARE @diff varchar(50) = Case when @nocapRep-@withCap = -100 then 'assoc.' when @nocapRep-@withCap > 0 then convert(varchar(50),@nocapRep-@withCap) else 'err' end\n\nSelect DisplayName, @nocapRep,  @withCap, @diff,@nocapRep-@withCap from Users where Id = ##UserID:int##",
        "CreationDate": "2017-07-07 17:47:37",
        "validated": false,
        "QueryBody_Original": "DECLARE  @UserID int = ##UserID:int##\n\nDECLARE @nocapRep int\nselect @nocapRep = SUM(Case When VoteTypeID = 1 Then 15 WHEN (VoteTypeID=2 AND p.PostTypeID=2) THEN 10 WHEN (VoteTypeID=2 AND p.PostTypeID=1) THEN 5 WHEN VoteTypeID=3 THEN -2 when VoteTypeID=16 then 2 ELSE 0 END)\nFROM Votes v\nINNER JOIN Posts p ON p.ID = v.PostID\nWHERE p.OwnerUserID = @UserID AND p.CommunityOwnedDate IS NULL\n\nDECLARE @withCap int\nSelect @withCap = max(Reputation)\nFrom Users \nwhere Id = ##UserID:int##\n\nDECLARE @diff varchar(50) = Case when @nocapRep-@withCap = -100 then 'assoc.' when @nocapRep-@withCap > 0 then convert(varchar(50),@nocapRep-@withCap) else 'err' end\n\nSelect DisplayName, @nocapRep,  @withCap, @diff,@nocapRep-@withCap from Users where Id = ##UserID:int##"
    },
    {
        "QuerySetId": 693180,
        "Title": "Search UserId's posts by Tags with <TagName>",
        "Description": null,
        "QueryBody": "SELECT  Posts.id as [Post Link], Posts.Score as [Score], Posts.Tags as [Tagged With]\n\nFROM Posts\n\nWHERE\n     \n     (Posts.OwnerUserId=##User:int##) AND\n     (Posts.Tags LIKE '%##TagName##%')\n\n--ORDER BY Posts.Score DESC",
        "CreationDate": "2017-07-09 08:18:45",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 695493,
        "Title": "Answers that took way too long to accept (all users)",
        "Description": "Answers that took the longest from being posted to being accepted. Only answers that are currently accepted are counted. This query is for all users; for a single user, see query 695498.",
        "QueryBody": "SELECT \n  Posts.Id AS [Post Link],\n  DATEDIFF(day, Posts.CreationDate, Votes.CreationDate) AS [Time Taken to Accept in Days],\n  ROUND(DATEDIFF(day, Posts.CreationDate, Votes.CreationDate) \/ 12.0, 0) AS [in Months],\n  ROUND(DATEDIFF(day, Posts.CreationDate, Votes.CreationDate) \/ 365.0, 1) AS [and in Years]\nFROM\n  Posts\nJOIN\n  Votes\n  ON Posts.Id = Votes.PostId\nWHERE\n  Votes.VoteTypeId = 1\n  AND DATEDIFF(day, Posts.CreationDate, Votes.CreationDate) >= 365 * ##MinYears?5##\nORDER BY\n  [Time Taken to Accept in Days] DESC",
        "CreationDate": "2017-07-14 12:11:58",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 695498,
        "Title": "Answers that took way too long to accept (single user)",
        "Description": "Answers that took the longest from being posted to being accepted. Only answers that are currently accepted are counted. This query is for a single user; for all users, see query 695493.",
        "QueryBody": "SELECT \n  Posts.Id AS [Post Link],\n  DATEDIFF(day, Posts.CreationDate, Votes.CreationDate) AS [Time Taken to Accept in Days],\n  ROUND(DATEDIFF(day, Posts.CreationDate, Votes.CreationDate) \/ 12.0, 0) AS [in Months],\n  ROUND(DATEDIFF(day, Posts.CreationDate, Votes.CreationDate) \/ 365.0, 1) AS [and in Years]\nFROM\n  Posts\nJOIN\n  Votes\n  ON Posts.Id = Votes.PostId\nWHERE\n  OwnerUserId = ##UserId##\n  AND Votes.VoteTypeId = 1\n  AND DATEDIFF(day, Posts.CreationDate, Votes.CreationDate) >= 365 * ##MinYears?1##\nORDER BY\n  [Time Taken to Accept in Days] DESC",
        "CreationDate": "2017-07-14 12:12:34",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 695908,
        "Title": "All my answers in stackoverflow",
        "Description": "All my answers in stackoverflow",
        "QueryBody": "DECLARE  @UserId int = ##UserId##\n\nSELECT \n   *\nFROM\n    Posts q\n  INNER JOIN\n    Posts a ON q.Id = a.ParentId\nWHERE\n    a.OwnerUserId = @UserId\n  AND\n    a.PostTypeId = 2\nORDER BY\n    q.CreationDate Asc",
        "CreationDate": "2017-07-14 22:50:46",
        "validated": false,
        "QueryBody_Original": "DECLARE  @UserId int = ##UserId##\n\nSELECT \n   *\nFROM\n    Posts q\n  INNER JOIN\n    Posts a ON q.Id = a.ParentId\nWHERE\n    a.OwnerUserId = @UserId\n  AND\n    a.PostTypeId = 2\nORDER BY\n    q.CreationDate Asc"
    },
    {
        "QuerySetId": 701411,
        "Title": "Questions by tag with score 1 or greater and answer score 4 or greater",
        "Description": null,
        "QueryBody": "DECLARE  @Tag nvarchar(100) = ##Tag:string##\n\nSELECT q.Id AS [Post Link], q.Tags, q.Score, q.Title, q.ClosedDate, \n   (SELECT SUM(Score) FROM Posts A WHERE q.Id = A.ParentId AND A.Score > 0) AS asco\n\nFROM Posts q\n\nWHERE q.PostTypeId = 1 and q.Score > 0 and q.Tags LIKE '%<' + @Tag + '>%'\n   AND (SELECT SUM(Score) FROM Posts A WHERE q.Id = A.ParentId AND A.Score > 0) >= 4\nORDER BY asco DESC",
        "CreationDate": "2017-08-16 04:06:16",
        "validated": false,
        "QueryBody_Original": "DECLARE  @Tag nvarchar(100) = ##Tag:string##\n\nSELECT q.Id AS [Post Link], q.Tags, q.Score, q.Title, q.ClosedDate, \n   (SELECT SUM(Score) FROM Posts A WHERE q.Id = A.ParentId AND A.Score > 0) AS asco\n\nFROM Posts q\n\nWHERE q.PostTypeId = 1 and q.Score > 0 and q.Tags LIKE '%<' + @Tag + '>%'\n   AND (SELECT SUM(Score) FROM Posts A WHERE q.Id = A.ParentId AND A.Score > 0) >= 4\nORDER BY asco DESC"
    },
    {
        "QuerySetId": 701482,
        "Title": "can I see country-wise rankings?",
        "Description": "https:\/\/meta.stackexchange.com\/questions\/194149\/can-i-see-country-wise-rankings",
        "QueryBody": "SELECT  count(*)\nfrom users\nwhere reputation>9 and reputation<=50 and location like '%' + ##location:string## + '%' collate SQL_Latin1_General_CP1_CI_AI",
        "CreationDate": "2019-01-08 08:14:51",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 701539,
        "Title": "Find broken Guava links (code.google.com)",
        "Description": null,
        "QueryBody": "DECLARE  @tag_id int = (select id from tags where tagname = '##TagName##');\n\nSELECT TOP ##Limit##\n     Id AS [Post Link], Body, Score, Tags\nFROM\n    posts\nJOIN\n    posttags ON posts.id = posttags.postid\nWHERE\n    posttags.tagid = @tag_id\nAND\n    LOWER(Body) LIKE '%code.google.com\/p\/guava-libraries\/source\/browse%'\nORDER BY score DESC",
        "CreationDate": "2018-01-07 19:07:47",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 701541,
        "Title": "Find broken Guava links (docs.guava-libraries.googlecode.com)",
        "Description": null,
        "QueryBody": "DECLARE  @tag_id int = (select id from tags where tagname = '##TagName##');\n\nSELECT TOP ##Limit##\n     Id AS [Post Link], Body, Score, Tags\nFROM\n    posts\nJOIN\n    posttags ON posts.id = posttags.postid\nWHERE\n    posttags.tagid = @tag_id\nAND\n    LOWER(Body) LIKE '%docs.guava-libraries.googlecode.com%'\nORDER BY score DESC",
        "CreationDate": "2018-01-07 19:09:57",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 701549,
        "Title": "Top users per tag and location",
        "Description": null,
        "QueryBody": "DECLARE  @limit int = ##Limit##;\nDECLARE @tag_id int = (select id from tags where tagname = '##TagName##');\n\nselect top (@limit)\n  rank() over (order by sum(answers.score) desc) \"Rank\",\n  users.id \"User Link\",\n  users.location,\n  sum(answers.score) as \"Score\"\nfrom users\njoin posts answers on (users.id = answers.owneruserid)\njoin posts parent on (answers.parentid = parent.id)\njoin posttags on (parent.id = posttags.postid)\nwhere posttags.tagid = @tag_id\nand answers.posttypeid = 2  -- answers only\nand LOWER(location) LIKE '%##City##%'\ngroup by users.id, users.location\norder by sum(answers.score) desc;",
        "CreationDate": "2017-07-26 03:14:29",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 701565,
        "Title": "Questions by User A with Answers by User B",
        "Description": null,
        "QueryBody": "SELECT  Id, Id AS [Post Link]\nFROM Posts AS Questions\nWHERE OwnerUserId = ##QuestionAuthor:int##\nand PostTypeId = 2\norder by len(Body)",
        "CreationDate": "2018-04-19 17:16:42",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 701958,
        "Title": "Total DTD (Range) 'google-classroom' Tag + 'classroom' in Title ",
        "Description": null,
        "QueryBody": "DECLARE  @StartDate datetime = '##StartDate##';\nDECLARE @EndDate datetime = '##EndDate##';\n\nSELECT \n  ID as [Post Link],\n  CreationDate,\n  Tags FROM Posts \nWHERE \n  Title Like '%classroom%'\n  and Posts.Tags COLLATE SQL_Latin1_General_CP1_CI_AS Like '%google-classroom%'  \n  and \n  CreationDate \n  BETWEEN \n  @StartDate  \/*start date format should be 2017-01-01 00:00:00 or 2017-01-01 *\/ \n  and         \/*end date format should be 2017-12-31 00:00:00 or 2017-01-01 *\/\n  @EndDate \nORDER BY CreationDate ASC",
        "CreationDate": "2017-08-02 21:47:09",
        "validated": false,
        "QueryBody_Original": "DECLARE  @StartDate datetime = '##StartDate##';\nDECLARE @EndDate datetime = '##EndDate##';\n\nSELECT \n  ID as [Post Link],\n  CreationDate,\n  Tags FROM Posts \nWHERE \n  Title Like '%classroom%'\n  and Posts.Tags COLLATE SQL_Latin1_General_CP1_CI_AS Like '%google-classroom%'  \n  and \n  CreationDate \n  BETWEEN \n  @StartDate  \/*start date format should be 2017-01-01 00:00:00 or 2017-01-01 *\/ \n  and         \/*end date format should be 2017-12-31 00:00:00 or 2017-01-01 *\/\n  @EndDate \nORDER BY CreationDate ASC"
    },
    {
        "QuerySetId": 702161,
        "Title": "Find questions closed by a specific gold hammer",
        "Description": null,
        "QueryBody": "SELECT  PostId As [Post Link], CreationDate As [ReopenTime]\nFrom PostHistory\nWhere UserId=##UserId## And PostHistoryTypeId=11\n  And CharIndex('\"BindingReason\":{\"GoldTagBadge\"', [Text])>0\nOrder By ReopenTime Desc",
        "CreationDate": "2017-12-17 03:51:19",
        "validated": false,
        "QueryBody_Original": "SELECT  PostId As [Post Link], CreationDate As [ReopenTime]\nFrom PostHistory\nWhere UserId=##UserId## And PostHistoryTypeId=11\n  And CharIndex('\"BindingReason\":{\"GoldTagBadge\"', [Text])>0\nOrder By ReopenTime Desc"
    },
    {
        "QuerySetId": 702308,
        "Title": "Find top posts with a certain tag",
        "Description": null,
        "QueryBody": "DECLARE  @tag_id int = (select id from tags where tagname = '##TagName##');\n\nSELECT TOP ##Limit##\n     Id AS [Post Link], Body, Score, Tags\nFROM\n    posts\nJOIN\n    posttags ON posts.id = posttags.postid\nWHERE\n    posttags.tagid = @tag_id\nORDER BY\n    Score DESC",
        "CreationDate": "2018-04-24 14:53:29",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 702698,
        "Title": "Total DTD (Range)  'google-classroom' Tag + 'classroom' in Body",
        "Description": null,
        "QueryBody": "DECLARE  @StartDate datetime = '##StartDate##';\nDECLARE @EndDate datetime = '##EndDate##';\n\nSELECT \n  ID as [Post Link],\n  CreationDate,\n  Tags,ViewCount,AnswerCount,CommentCount \nFROM \n  Posts \nWHERE \n  Posts.body COLLATE SQL_Latin1_General_CP1_CI_AS Like '%classroom%' \n  and \n  Posts.Tags COLLATE SQL_Latin1_General_CP1_CI_AS Like '%google-classroom%'\n  and \n  CreationDate \n  BETWEEN \n  @StartDate  \/*start date format should be 2017-01-01 00:00:00 *\/ \n  and         \/*end date format should be 2017-12-31 00:00:00 *\/\n  @EndDate \nORDER BY CreationDate ASC",
        "CreationDate": "2017-08-02 21:45:52",
        "validated": false,
        "QueryBody_Original": "DECLARE  @StartDate datetime = '##StartDate##';\nDECLARE @EndDate datetime = '##EndDate##';\n\nSELECT \n  ID as [Post Link],\n  CreationDate,\n  Tags,ViewCount,AnswerCount,CommentCount \nFROM \n  Posts \nWHERE \n  Posts.body COLLATE SQL_Latin1_General_CP1_CI_AS Like '%classroom%' \n  and \n  Posts.Tags COLLATE SQL_Latin1_General_CP1_CI_AS Like '%google-classroom%'\n  and \n  CreationDate \n  BETWEEN \n  @StartDate  \/*start date format should be 2017-01-01 00:00:00 *\/ \n  and         \/*end date format should be 2017-12-31 00:00:00 *\/\n  @EndDate \nORDER BY CreationDate ASC"
    },
    {
        "QuerySetId": 702726,
        "Title": "get top user by framework",
        "Description": null,
        "QueryBody": "DECLARE  @limit int = ##Limit##;\nDECLARE @tag_id int = (select id from tags where tagname = '##TagName##');\n\nSELECT TOP (@limit)\nrank() OVER (ORDER BY SUM(answers.score) DESC ) \"Rank\",\n  users.id AS [User Link],\n  users.Reputation,\n  SUM(answers.score) AS \"Framework Score\"\n\nFROM users\n  join posts answers ON (users.id = answers.owneruserid)\n  join posts parent ON (answers.parentid = parent.id)\n  join posttags ON (parent.id = posttags.postid)\n\nWHERE posttags.tagid = @tag_id and answers.posttypeid = 2\n\nGROUP BY users.id, users.Reputation\n\nORDER BY SUM(answers.score) DESC;",
        "CreationDate": "2017-07-29 00:26:37",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 702839,
        "Title": "Total DTD (Range)  'google-classroom' Tag",
        "Description": null,
        "QueryBody": "DECLARE  @StartDate datetime = '##StartDate##';\nDECLARE @EndDate datetime = '##EndDate##';\n\nSELECT \n  ID as [Post Link],\n  CreationDate,\n  Tags,\n  Score, AnswerCount,CommentCount\n  FROM Posts \nWHERE \n  Posts.Tags Like '%google-classroom%'  \n  and \n  CreationDate \n  BETWEEN \n  @StartDate  \/*start date format should be 2017-01-01 00:00:00 or 2017-01-01 *\/ \n  and         \/*end date format should be 2017-12-31 00:00:00 or 2017-01-01 *\/\n  @EndDate \nORDER BY CreationDate ASC",
        "CreationDate": "2017-07-28 23:07:58",
        "validated": false,
        "QueryBody_Original": "DECLARE  @StartDate datetime = '##StartDate##';\nDECLARE @EndDate datetime = '##EndDate##';\n\nSELECT \n  ID as [Post Link],\n  CreationDate,\n  Tags,\n  Score, AnswerCount,CommentCount\n  FROM Posts \nWHERE \n  Posts.Tags Like '%google-classroom%'  \n  and \n  CreationDate \n  BETWEEN \n  @StartDate  \/*start date format should be 2017-01-01 00:00:00 or 2017-01-01 *\/ \n  and         \/*end date format should be 2017-12-31 00:00:00 or 2017-01-01 *\/\n  @EndDate \nORDER BY CreationDate ASC"
    },
    {
        "QuerySetId": 702861,
        "Title": "Total DTD (Range)  'google-classroom' Tag + SearchWord in Title or body",
        "Description": null,
        "QueryBody": "DECLARE  @StartDate datetime = '##StartDate##';\nDECLARE @EndDate datetime = '##EndDate##';\nDECLARE @SearchWord nvarchar(100) = ##SearchWord:string##;\nSELECT \n  ID as [Post Link],\n  CreationDate,\n  Tags FROM Posts \nWHERE \n  Title Like '%@SearchWord%'\n  or\n  Body Like @SearchWord\n  and Posts.Tags Like '%google-classroom%'  \n  and \n  CreationDate \n  BETWEEN \n  @StartDate  \/*start date format should be 2017-01-01 00:00:00 or 2017-01-01 *\/ \n  and         \/*end date format should be 2017-12-31 00:00:00 or 2017-01-01 *\/\n  @EndDate \nORDER BY CreationDate ASC",
        "CreationDate": "2017-07-28 23:50:40",
        "validated": false,
        "QueryBody_Original": "DECLARE  @StartDate datetime = '##StartDate##';\nDECLARE @EndDate datetime = '##EndDate##';\nDECLARE @SearchWord nvarchar(100) = ##SearchWord:string##;\nSELECT \n  ID as [Post Link],\n  CreationDate,\n  Tags FROM Posts \nWHERE \n  Title Like '%@SearchWord%'\n  or\n  Body Like @SearchWord\n  and Posts.Tags Like '%google-classroom%'  \n  and \n  CreationDate \n  BETWEEN \n  @StartDate  \/*start date format should be 2017-01-01 00:00:00 or 2017-01-01 *\/ \n  and         \/*end date format should be 2017-12-31 00:00:00 or 2017-01-01 *\/\n  @EndDate \nORDER BY CreationDate ASC"
    },
    {
        "QuerySetId": 703458,
        "Title": "Inactive Post older than 6 Months for Tag C#",
        "Description": null,
        "QueryBody": "SELECT  TOP 1000 P.Id AS [Post Link],P.Tags, P.CreationDate, P.Score, P.PostTypeID, p.LastEditDate,p.LastActivityDate\nFROM Posts AS P\nWHERE  p.LastEditDate < DATEADD(month, -6, p.LastActivityDate) \nAND Score <= 5 AND Tags LIKE '%c#%'\nORDER BY P.Score ASC, P.CreationDate ASC",
        "CreationDate": "2017-07-31 10:04:13",
        "validated": false,
        "QueryBody_Original": "SELECT  TOP 1000 P.Id AS [Post Link],P.Tags, P.CreationDate, P.Score, P.PostTypeID, p.LastEditDate,p.LastActivityDate\nFROM Posts AS P\nWHERE  p.LastEditDate < DATEADD(month, -6, p.LastActivityDate) \nAND Score <= 5 AND Tags LIKE '%c#%'\nORDER BY P.Score ASC, P.CreationDate ASC"
    },
    {
        "QuerySetId": 705302,
        "Title": "users and their accepted question rate",
        "Description": "rep greater than 1,000? yes -- \"established user - You've been around for a while\"",
        "QueryBody": "SELECT  TOP 100 \n--   [Users].Id as [User Link], \n--   [Users].Reputation, \n--  DATEDIFF(year, [Users].CreationDate, GETDATE()) \"UserAge\"\n-- FROM Users\n-- WHERE [Users].Reputation > 1000\n-- -- temporary sort; really sort by percent\n-- ORDER BY [Users].Reputation DESC\n\n\nSELECT COUNT(acceptedq.Id), COUNT(unacceptedq.Id)\nFROM Posts acceptedq, Posts unacceptedq\nWHERE \n-- 1 = Question\nacceptedq.PostTypeId = 1\n-- Q has an accepted Answer\nAND acceptedq.AcceptedANswerId IS NOT NULL\n-- Q is not closed\nAND acceptedq.ClosedDate IS NULL\nAND acceptedq.OwnerUserId = 674\n\nAND\n\nunacceptedq.PostTypeId = 1\nAND unacceptedq.AcceptedANswerId IS NULL\n-- Q is not closed\nAND unacceptedq.ClosedDate IS NULL\nAND unacceptedq.OwnerUserId = 674\nGROUP BY acceptedq.OwnerUserId",
        "CreationDate": "2017-08-05 20:07:29",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 705378,
        "Title": "Medallas faltantes en puntuacion de candidato",
        "Description": null,
        "QueryBody": "SELECT  DISTINCT \nName AS Medalla\nFROM Badges\nWHERE Name IN (\n  'Civic Duty', \n  'Cleanup',\n  'Constituent',\n  'Convention',\n  'Copy Editor',\n  'Deputy',\n  'Electorate',\n  'Enthusiast',\n  'Explainer',\n  'Investor',\n  'Marshal',\n  'Organizer',\n  'Quorum',\n  'Refiner',\n  'Sportsmanship',\n  'Strunk & White',\n  'Tag Editor',\n  'Reviewer',\n  'Steward', \n  'Yearling'\n)\nAND Name NOT IN (\n  SELECT Name FROM Badges\n  WHERE UserId = ##UserId##\n)",
        "CreationDate": "2017-08-02 20:13:54",
        "validated": false,
        "QueryBody_Original": "SELECT  DISTINCT \nName AS Medalla\nFROM Badges\nWHERE Name IN (\n  'Civic Duty', \n  'Cleanup',\n  'Constituent',\n  'Convention',\n  'Copy Editor',\n  'Deputy',\n  'Electorate',\n  'Enthusiast',\n  'Explainer',\n  'Investor',\n  'Marshal',\n  'Organizer',\n  'Quorum',\n  'Refiner',\n  'Sportsmanship',\n  'Strunk & White',\n  'Tag Editor',\n  'Reviewer',\n  'Steward', \n  'Yearling'\n)\nAND Name NOT IN (\n  SELECT Name FROM Badges\n  WHERE UserId = ##UserId##\n)"
    },
    {
        "QuerySetId": 705881,
        "Title": "Questions answered by me without an accepted answer",
        "Description": null,
        "QueryBody": "SELECT  q.Id AS [Post Link], a.CreationDate\n  FROM Posts AS q\n  INNER JOIN Posts AS a ON a.ParentId = q.Id\n  WHERE a.OwnerUserId = ##UserId##\n    AND q.AcceptedAnswerId IS NULL",
        "CreationDate": "2017-08-03 11:34:52",
        "validated": false,
        "QueryBody_Original": "SELECT  q.Id AS [Post Link], a.CreationDate\n  FROM Posts AS q\n  INNER JOIN Posts AS a ON a.ParentId = q.Id\n  WHERE a.OwnerUserId = ##UserId##\n    AND q.AcceptedAnswerId IS NULL"
    },
    {
        "QuerySetId": 705882,
        "Title": "Questions answered by me without an accepted answer, with only one answer",
        "Description": null,
        "QueryBody": "SELECT  q.Id AS [Post Link], a.CreationDate\n  FROM Posts AS q\n  INNER JOIN Posts AS a ON a.ParentId = q.Id\n  WHERE a.OwnerUserId = ##UserId##\n    AND q.AnswerCount = 1\n    AND q.AcceptedAnswerId IS NULL",
        "CreationDate": "2017-08-03 11:35:40",
        "validated": false,
        "QueryBody_Original": "SELECT  q.Id AS [Post Link], a.CreationDate\n  FROM Posts AS q\n  INNER JOIN Posts AS a ON a.ParentId = q.Id\n  WHERE a.OwnerUserId = ##UserId##\n    AND q.AnswerCount = 1\n    AND q.AcceptedAnswerId IS NULL"
    },
    {
        "QuerySetId": 707734,
        "Title": "Where do I comment about \"testfor\"",
        "Description": null,
        "QueryBody": "SELECT  PostId as [Post Link], Text\n  from Comments\n  where UserId = ##UserId##\n    and Text like '%testfor%';",
        "CreationDate": "2017-11-22 19:58:08",
        "validated": false,
        "QueryBody_Original": "SELECT  PostId as [Post Link], Text\n  from Comments\n  where UserId = ##UserId##\n    and Text like '%testfor%';"
    },
    {
        "QuerySetId": 708452,
        "Title": "Tags with given length of name",
        "Description": null,
        "QueryBody": "SELECT  Id, Tagname, Count\nFROM Tags\nWHERE len(tagname)=##length##\nORDER BY Count DESC",
        "CreationDate": "2017-08-09 19:54:27",
        "validated": false,
        "QueryBody_Original": "SELECT  Id, Tagname, Count\nFROM Tags\nWHERE len(tagname)=##length##\nORDER BY Count DESC"
    },
    {
        "QuerySetId": 708458,
        "Title": "Tags with tagname of lenght at least",
        "Description": null,
        "QueryBody": "SELECT  Id, Tagname, Count\nFROM Tags\nWHERE len(tagname)>=##length##\nORDER BY Count DESC",
        "CreationDate": "2017-08-09 20:05:02",
        "validated": false,
        "QueryBody_Original": "SELECT  Id, Tagname, Count\nFROM Tags\nWHERE len(tagname)>=##length##\nORDER BY Count DESC"
    },
    {
        "QuerySetId": 709811,
        "Title": "Voting and History Event timeline to your posts",
        "Description": null,
        "QueryBody": "SELECT \n  Posts.Id AS [Post Link],\n  PostTypes.Name AS PostType,\n  'Vote' AS EventType,\n  VoteTypes.Name AS VoteType,\n  Votes.CreationDate AS VoteDate,\n  Votes.UserId AS [User Link],\n  Votes.BountyAmount\nFROM Votes, VoteTypes, Posts, Users, PostTypes\nWHERE\n  Votes.VoteTypeId = VoteTypes.Id\n  AND\n  Votes.PostId = Posts.Id\n  AND\n  Posts.OwnerUserId = Users.Id\n  AND\n  Users.AccountId = ##SEAccountId:int##\n  AND\n  Posts.PostTypeId = PostTypes.Id\nORDER BY Votes.CreationDate DESC, Votes.Id DESC;",
        "CreationDate": "2017-08-12 21:31:31",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 710269,
        "Title": "User to user answer correlation",
        "Description": null,
        "QueryBody": "DECLARE  @search_user int = ##UserToSearch##;\n\n---\nSELECT\nu.Id AS Questioner_Id,\np1.Id AS Question_Id,\np2.Id AS Answer_Id,\n( CASE WHEN p1.AcceptedAnswerId = p2.Id THEN 1 ELSE 0 END ) AS Is_Accepted_Answer\n\nINTO\n#temp_relations\n\nFROM Posts AS p2\nINNER JOIN Posts AS p1 ON p2.ParentId = p1.Id\nINNER JOIN Users AS u ON p1.OwnerUserId = u.Id\n\nWHERE p2.OwnerUserId = @search_user;\n---\n\nSELECT\n@search_user AS [User Link],\nu.DisplayName AS [Questioner Name],\ntmp.Questioner_Id AS [Questioner ID],\nCOUNT(tmp.Answer_Id) AS [Number of Answers],\nSUM(tmp.Is_Accepted_Answer) AS [Number of Accepted Answers]\n\nFROM #temp_relations AS tmp\nINNER JOIN Users AS u ON tmp.Questioner_Id = u.Id\n\nGROUP BY \ntmp.Questioner_Id,\nu.DisplayName\n\nORDER BY COUNT(tmp.Answer_Id) DESC;\n---",
        "CreationDate": "2017-08-14 17:20:18",
        "validated": false,
        "QueryBody_Original": "DECLARE  @search_user int = ##UserToSearch##;\n\n---\nSELECT\nu.Id AS Questioner_Id,\np1.Id AS Question_Id,\np2.Id AS Answer_Id,\n( CASE WHEN p1.AcceptedAnswerId = p2.Id THEN 1 ELSE 0 END ) AS Is_Accepted_Answer\n\nINTO\n#temp_relations\n\nFROM Posts AS p2\nINNER JOIN Posts AS p1 ON p2.ParentId = p1.Id\nINNER JOIN Users AS u ON p1.OwnerUserId = u.Id\n\nWHERE p2.OwnerUserId = @search_user;\n---\n\nSELECT\n@search_user AS [User Link],\nu.DisplayName AS [Questioner Name],\ntmp.Questioner_Id AS [Questioner ID],\nCOUNT(tmp.Answer_Id) AS [Number of Answers],\nSUM(tmp.Is_Accepted_Answer) AS [Number of Accepted Answers]\n\nFROM #temp_relations AS tmp\nINNER JOIN Users AS u ON tmp.Questioner_Id = u.Id\n\nGROUP BY \ntmp.Questioner_Id,\nu.DisplayName\n\nORDER BY COUNT(tmp.Answer_Id) DESC;\n---"
    },
    {
        "QuerySetId": 710396,
        "Title": "Average Time to Close per Month",
        "Description": null,
        "QueryBody": "SELECT \n( CONVERT(NVARCHAR(20),DATEPART(MONTH, p.CreationDate)) + ' - ' +  CONVERT(nvarchar(20),DATEPART(YEAR, p.CreationDate)) ) AS [Year and Month],\n( AVG(DATEDIFF(HOUR, p.CreationDate, p.ClosedDate)) ) AS [Time to Close in Hours],\n( COUNT(CONVERT(BIGINT,p.Id)) ) AS [Questions Closed]\n\nFROM Posts AS p\n\nWHERE \n( p.ClosedDate IS NOT NULL ) \nAND ( (SELECT COUNT(ph.Id) FROM PostHistory AS ph WHERE ph.PostId = p.Id AND ph.PostHistoryTypeId = 11) = 0 )\nAND ( p.CreationDate >= DATEADD(dd, -365, p.ClosedDate) )\nGROUP BY \nDATEPART(YEAR, p.CreationDate),\nDATEPART(MONTH, p.CreationDate)\n\nORDER BY\nDATEPART(YEAR, p.CreationDate) DESC,\nDATEPART(MONTH, p.CreationDate) DESC",
        "CreationDate": "2017-08-18 15:34:18",
        "validated": false,
        "QueryBody_Original": "SELECT \n( CONVERT(NVARCHAR(20),DATEPART(MONTH, p.CreationDate)) + ' - ' +  CONVERT(nvarchar(20),DATEPART(YEAR, p.CreationDate)) ) AS [Year and Month],\n( AVG(DATEDIFF(HOUR, p.CreationDate, p.ClosedDate)) ) AS [Time to Close in Hours],\n( COUNT(CONVERT(BIGINT,p.Id)) ) AS [Questions Closed]\n\nFROM Posts AS p\n\nWHERE \n( p.ClosedDate IS NOT NULL ) \nAND ( (SELECT COUNT(ph.Id) FROM PostHistory AS ph WHERE ph.PostId = p.Id AND ph.PostHistoryTypeId = 11) = 0 )\nAND ( p.CreationDate >= DATEADD(dd, -365, p.ClosedDate) )\nGROUP BY \nDATEPART(YEAR, p.CreationDate),\nDATEPART(MONTH, p.CreationDate)\n\nORDER BY\nDATEPART(YEAR, p.CreationDate) DESC,\nDATEPART(MONTH, p.CreationDate) DESC"
    },
    {
        "QuerySetId": 711528,
        "Title": "Retrieve Answered Posts Based on Tag Name and Score",
        "Description": null,
        "QueryBody": "SELECT  \n    p.Body,\n    p.Title,\n    p.Id,\n    p.CreationDate,\n    p.DeletionDate,\n    p.Tags,\n    p.AnswerCount,\n    p.AcceptedAnswerId\nFROM Tags t\nJOIN PostTags pt ON pt.TagId = t.Id \nJOIN Posts as p ON p.Id = pt.PostId\nWHERE \n    (\n      t.TagName = ##TagNameOne:string## OR\n      t.TagName = ##TagNameTwo:string## OR\n      t.TagName = ##TagNameThree:string##\n    ) AND\n    p.PostTypeId = 1 AND\n    p.score > ##MinScore:int## AND\n    p.AcceptedAnswerId <> 0 AND\n    p.Body like '%<code>%'\n    -- MinScore: Minimum question score in inclue\n    -- TagNameOne: Tag Name One\n    -- TagNameTwo: Tag Name Two\n    -- TagNameThree: Tag Name Three",
        "CreationDate": "2017-08-18 11:51:19",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 711649,
        "Title": "Find comments containing a given string",
        "Description": null,
        "QueryBody": "SELECT  TOP ##topn:int?1000## Text COLLATE SQL_Latin1_General_CP1_CI_AS,\nc.Id AS [Comment Link],c.CreationDate\nFROM Comments c INNER JOIN Users u ON c.UserId=u.Id\nWHERE \nText COLLATE SQL_Latin1_General_CP1_CI_AS Like ##QueryString:string?%default query%##\nORDER BY c.CreationDate DESC",
        "CreationDate": "2017-08-17 23:41:46",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 711650,
        "Title": "Find text in comments ",
        "Description": null,
        "QueryBody": "SELECT  TOP ##topn:int?1000## Text COLLATE SQL_Latin1_General_CP1_CI_AS,\nc.Id AS [Comment Link], c.CreationDate\nFROM Comments c INNER JOIN Users u ON c.UserId=u.Id\nWHERE \nu.Reputation>=##minrep:int?10000## \/* min reputation *\/\n\/* AND\nu.Id Like ##uid:int## *\/\nAND\nText COLLATE SQL_Latin1_General_CP1_CI_AS Like ##QueryString:string?%default query%##\nORDER BY c.CreationDate DESC",
        "CreationDate": "2017-08-17 23:50:20",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 711861,
        "Title": "return reputable sa user ",
        "Description": null,
        "QueryBody": "SELECT  displayname from users group by displayname\n\nSELECT max(Reputation\n)\n   FROM users\n   where displayname in \n   (\n  SELECT displayname\n  FROM users)\n  \n  group by displayname",
        "CreationDate": "2019-07-08 20:16:19",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 712193,
        "Title": "Accepted answers to questions by now-anonymous users",
        "Description": null,
        "QueryBody": "SELECT  a.Id AS [Post Link]\n  FROM Posts AS a\n  INNER JOIN Posts AS q ON q.AcceptedAnswerId = a.Id\n  LEFT OUTER JOIN Users AS u ON q.OwnerUserId = u.Id\n  WHERE a.OwnerUserId = ##UserId##\n    AND u.Id IS NULL",
        "CreationDate": "2017-08-19 14:27:32",
        "validated": false,
        "QueryBody_Original": "SELECT  a.Id AS [Post Link]\n  FROM Posts AS a\n  INNER JOIN Posts AS q ON q.AcceptedAnswerId = a.Id\n  LEFT OUTER JOIN Users AS u ON q.OwnerUserId = u.Id\n  WHERE a.OwnerUserId = ##UserId##\n    AND u.Id IS NULL"
    },
    {
        "QuerySetId": 712195,
        "Title": "Closure and Reopen history by Community, Golden Badge Owners and Mod Intervention",
        "Description": null,
        "QueryBody": "SELECT  TOP 20 * FROM PostHistory WHERE PostHistoryTypeId IN (10, 11)\n\nSELECT TOP 10\n  PostId,\n  JSON_VALUE(Text, '$.Voters[0].Id') As Voter0,\n  JSON_VALUE(Text, '$.Voters[1].Id') As Voter1,\n  JSON_VALUE(Text, '$.Voters[2].Id') As Voter2,\n  JSON_VALUE(Text, '$.Voters[3].Id') As Voter3,\n  JSON_VALUE(Text, '$.Voters[4].Id') As Voter4\nFROM PostHistory\nWHERE PostHistoryTypeId IN (10, 11)",
        "CreationDate": "2017-08-19 14:51:27",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 712215,
        "Title": "Top Comments of a user",
        "Description": null,
        "QueryBody": "SELECT  TOP 250\n    PostId AS [Post Link],\n    Score,\n    Text\nFROM Comments\nWHERE UserId = ##UserId##\nORDER BY Score DESC",
        "CreationDate": "2017-08-19 17:00:29",
        "validated": false,
        "QueryBody_Original": "SELECT  TOP 250\n    PostId AS [Post Link],\n    Score,\n    Text\nFROM Comments\nWHERE UserId = ##UserId##\nORDER BY Score DESC"
    },
    {
        "QuerySetId": 714332,
        "Title": "Search Brazilian By Tech Tag (Hiring Mode)",
        "Description": null,
        "QueryBody": "DECLARE  @tag varchar(200) = ##Tag:string##;\n\nselect\n  sum(p.Score) as TotalScore,\n  u.Id as [User Link],\n  u.Reputation,\n  u.Location\nfrom\n  Users u,\n  Posts p,\n  PostTags pt,\n  Tags t\nwhere\n  t.TagName = @tag and\n  pt.TagId = t.Id and\n  pt.PostId = p.ParentId and\n  p.PostTypeId = 2 and -- Answer\n  u.Id = p.OwnerUserId\n  and (\n          lower(u.Location) like '%brazil%' or\n          lower(u.Location) like '%brasil%' or\n          lower(u.Location) like '%br' or\n          lower(u.AboutMe) like '%brasil%' or\n          lower(u.AboutMe) like '%brazil%' or\n          lower(u.WebsiteUrl) like '%.br' or\n          lower(u.WebsiteUrl) like '%.br\/%'\n      )\ngroup by u.Id, u.DisplayName, u.Reputation, u.Location\norder by TotalScore desc",
        "CreationDate": "2017-08-24 21:28:26",
        "validated": false,
        "QueryBody_Original": "DECLARE  @tag varchar(200) = ##Tag:string##;\n\nselect\n  sum(p.Score) as TotalScore,\n  u.Id as [User Link],\n  u.Reputation,\n  u.Location\nfrom\n  Users u,\n  Posts p,\n  PostTags pt,\n  Tags t\nwhere\n  t.TagName = @tag and\n  pt.TagId = t.Id and\n  pt.PostId = p.ParentId and\n  p.PostTypeId = 2 and -- Answer\n  u.Id = p.OwnerUserId\n  and (\n          lower(u.Location) like '%brazil%' or\n          lower(u.Location) like '%brasil%' or\n          lower(u.Location) like '%br' or\n          lower(u.AboutMe) like '%brasil%' or\n          lower(u.AboutMe) like '%brazil%' or\n          lower(u.WebsiteUrl) like '%.br' or\n          lower(u.WebsiteUrl) like '%.br\/%'\n      )\ngroup by u.Id, u.DisplayName, u.Reputation, u.Location\norder by TotalScore desc"
    },
    {
        "QuerySetId": 714557,
        "Title": "Questions on Anime.Se sorted by spoiler %",
        "Description": null,
        "QueryBody": "DECLARE  @qt_st INT;\nDECLARE @qt_cnt INT;\n\nSELECT\np.Id,\np.Body\n\nINTO #temp_posts\n\nFROM Posts AS p \n\nWHERE CHARINDEX('<blockquote class=\"spoiler\">', p.Body) > 0;\n\nSELECT * FROM #temp_posts;",
        "CreationDate": "2017-08-25 15:33:38",
        "validated": false,
        "QueryBody_Original": "DECLARE  @qt_st INT;\nDECLARE @qt_cnt INT;\n\nSELECT\np.Id,\np.Body\n\nINTO #temp_posts\n\nFROM Posts AS p \n\nWHERE CHARINDEX('<blockquote class=\"spoiler\">', p.Body) > 0;\n\nSELECT * FROM #temp_posts;"
    },
    {
        "QuerySetId": 715250,
        "Title": "Find Stack Overflow Users In Your City (with user-links) With Their Score For One Particular Tag",
        "Description": null,
        "QueryBody": "WITH  user-links) and their score for a particular Tag\n-- A simply query to find users in your city or country WITH their rank\/score for a particular Tag. Added user links.\n\nselect \n        us.Id [User Link], \n        us.Reputation, \n        us.DisplayName, \n        us.Location, us.AboutMe, us.EmailHash, us.CreationDate        \nfrom Users us\n--where UPPER(us.Location) like UPPER('%##LocationName##%')\nwhere UPPER(us.DisplayName) like ('%##Name##%')",
        "CreationDate": "2019-03-30 14:20:30",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 716208,
        "Title": "My answers, by creation date",
        "Description": "My answers ordered by creation date",
        "QueryBody": "SELECT \n    q.Id, q.Title, a.Id, a.CreationDate, a.LastEditDate, a.LastEditorUserId, a.Score\nfrom\n    Posts q\n  inner join\n    Posts a\n  on q.Id = a.ParentId and a.postTypeId = 2 and q.postTypeId = 1\nwhere\n  a.OwnerUserId = ##UserId##\norder by a.CreationDate asc",
        "CreationDate": "2017-10-29 18:25:03",
        "validated": false,
        "QueryBody_Original": "SELECT \n    q.Id, q.Title, a.Id, a.CreationDate, a.LastEditDate, a.LastEditorUserId, a.Score\nfrom\n    Posts q\n  inner join\n    Posts a\n  on q.Id = a.ParentId and a.postTypeId = 2 and q.postTypeId = 1\nwhere\n  a.OwnerUserId = ##UserId##\norder by a.CreationDate asc"
    },
    {
        "QuerySetId": 717139,
        "Title": "When my Suggested Edit decisions were reversed",
        "Description": null,
        "QueryBody": "DECLARE  @UserId int = ##UserId##\n\nSELECT TOP 1000 SE.PostId as [Post Link], V.Name as [Vote Type], SE.ApprovalDate, SE.RejectionDate\nFROM SuggestedEditVotes SEV\nINNER JOIN SuggestedEdits SE\nON SEV.SuggestedEditId = SE.Id\nINNER JOIN VoteTypes V\nON V.Id = SEV.VoteTypeId\nWHERE SEV.UserId = @UserId\nAND ((SEV.VoteTypeId = 2 AND RejectionDate IS NOT NULL)\n    OR (SEV.VoteTypeId = 3 AND ApprovalDate IS NOT NULL))\nORDER BY SEV.ID DESC",
        "CreationDate": "2017-08-31 20:58:27",
        "validated": false,
        "QueryBody_Original": "DECLARE  @UserId int = ##UserId##\n\nSELECT TOP 1000 SE.PostId as [Post Link], V.Name as [Vote Type], SE.ApprovalDate, SE.RejectionDate\nFROM SuggestedEditVotes SEV\nINNER JOIN SuggestedEdits SE\nON SEV.SuggestedEditId = SE.Id\nINNER JOIN VoteTypes V\nON V.Id = SEV.VoteTypeId\nWHERE SEV.UserId = @UserId\nAND ((SEV.VoteTypeId = 2 AND RejectionDate IS NOT NULL)\n    OR (SEV.VoteTypeId = 3 AND ApprovalDate IS NOT NULL))\nORDER BY SEV.ID DESC"
    },
    {
        "QuerySetId": 718953,
        "Title": "Users with many questions in a single tag",
        "Description": null,
        "QueryBody": "SELECT  \nMAX(t.Count) AS TagCount, \n'site:\/\/questions\/tagged\/' + MAX(t.TagName) + '|' + MAX(t.TagName) AS TagLink, \nCOALESCE('site:\/\/users\/' + CAST(p.OwnerUserId AS NVARCHAR) + '|' + u.DisplayName, p.OwnerDisplayName) AS UserLink,\nCOUNT(p.Id) AS UTQnCount\nFROM Tags AS t \nLEFT JOIN PostTags as a ON a.TagId = t.Id \nJOIN Posts AS p ON p.Id = a.PostId \nLEFT JOIN users AS u ON u.Id = p.OwnerUserId\nWHERE p.PostTypeId = 1\nGROUP BY t.Id, p.OwnerUserId, p.OwnerdisplayName, u.DisplayName\nHAVING ##MinCount?40## <= COUNT(p.Id)\nORDER BY MAX(t.Count) DESC, t.Id DESC, COUNT(p.Id) DESC;",
        "CreationDate": "2017-09-05 19:29:31",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 719644,
        "Title": "how unsung am I without date?",
        "Description": null,
        "QueryBody": "SELECT \n    count(a.Id) as [Accepted Answers],\n    sum(case when a.Score = 0 then 0 else 1 end) as [Scored Answers],  \n    sum(case when a.Score = 0 then 1 else 0 end) as [Unscored Answers],\n    sum(CASE WHEN a.Score = 0 then 1 else 0 end)*1000 \/ count(a.Id) \/ 10.0 as [Percentage Unscored]\nfrom\n    Posts q\n  inner join\n    Posts a\n  on a.Id = q.AcceptedAnswerId\nwhere\n      a.CommunityOwnedDate is null\n  and a.OwnerUserId = ##UserId##\n  and q.OwnerUserId != ##UserId##\n  and a.postTypeId = 2",
        "CreationDate": "2017-09-11 19:12:21",
        "validated": false,
        "QueryBody_Original": "SELECT \n    count(a.Id) as [Accepted Answers],\n    sum(case when a.Score = 0 then 0 else 1 end) as [Scored Answers],  \n    sum(case when a.Score = 0 then 1 else 0 end) as [Unscored Answers],\n    sum(CASE WHEN a.Score = 0 then 1 else 0 end)*1000 \/ count(a.Id) \/ 10.0 as [Percentage Unscored]\nfrom\n    Posts q\n  inner join\n    Posts a\n  on a.Id = q.AcceptedAnswerId\nwhere\n      a.CommunityOwnedDate is null\n  and a.OwnerUserId = ##UserId##\n  and q.OwnerUserId != ##UserId##\n  and a.postTypeId = 2"
    },
    {
        "QuerySetId": 720261,
        "Title": "best javascript in san diego",
        "Description": null,
        "QueryBody": "SELECT  Tags.ID, SUM(Answers.Score) AS Score\n  FROM Tags\n  JOIN PostTags ON Tags.ID = PostTags.TagID\n  JOIN Posts ON Posts.ID = PostTags.PostID\n  JOIN Posts Answers ON Answers.ParentID = Posts.ID\n  WHERE Tags.TagName\n  IN ('sorting')\n  Group by tags.id\n  ) union\n (SELECT u.id as Userid, 0 AS score\n From Users u\n Where lower(u.AboutMe) like '%\"augmented reality\"%'\n ))",
        "CreationDate": "2017-09-10 07:14:33",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 720798,
        "Title": "Get all the data from a post id",
        "Description": null,
        "QueryBody": "SELECT  *\nfrom posts\nwhere Id = ##id##",
        "CreationDate": "2017-09-09 23:51:52",
        "validated": false,
        "QueryBody_Original": "SELECT  *\nfrom posts\nwhere Id = ##id##"
    },
    {
        "QuerySetId": 721233,
        "Title": "Your downvoted questions what you can't delete",
        "Description": "Buggy - after the daily mirror is ready, I will be able to fix it",
        "QueryBody": "WITH  Raw AS (\n  SELECT\n    Q.Id AS QId,\n    A.Id AS AId,\n    Votes.Id AS VoteId\n  FROM Posts AS Q\n  INNER JOIN Posts AS A ON Q.Id = A.ParentId\n  LEFT JOIN Votes ON Votes.PostId = A.Id\n  WHERE \n    Q.OwnerUserId = ##UserId:int##\n    AND Q.Score < 0\n    AND A.OwnerUserId <> ##UserId##\n)\nSELECT QId\nFROM Raw\nWHERE VoteId IS NOT NULL\/*\nUNION\nSELECT QId\nFROM Raw\nGROUP BY QId\nHAVING COUNT(DISTINCT AId) > 1*\/",
        "CreationDate": "2017-09-11 05:15:08",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 721534,
        "Title": "How many posts have a given string in them?",
        "Description": null,
        "QueryBody": "DECLARE  @TotalPosts int\nSelect @TotalPosts = count(Id) \nfrom Posts\n\nSelect Count(Id) As Count, Count(Id)*100.0\/@TotalPosts As Percentage\nfrom Posts\nwhere Body Like ('%' + ##SearchTerm:String## + '%')",
        "CreationDate": "2017-09-11 22:30:32",
        "validated": false,
        "QueryBody_Original": "DECLARE  @TotalPosts int\nSelect @TotalPosts = count(Id) \nfrom Posts\n\nSelect Count(Id) As Count, Count(Id)*100.0\/@TotalPosts As Percentage\nfrom Posts\nwhere Body Like ('%' + ##SearchTerm:String## + '%')"
    },
    {
        "QuerySetId": 721594,
        "Title": "Find posts with a given string",
        "Description": null,
        "QueryBody": "SELECT  TOP 500 Id As [Post Link]\nfrom Posts\nwhere Body Like ('%' + ##SearchTerm:String## + '%')",
        "CreationDate": "2017-09-11 21:43:58",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 723685,
        "Title": "Comments by a specific user containing a search term",
        "Description": null,
        "QueryBody": "SELECT  p.Id AS \"Post Link\", p.Score AS \"P.Score\", \n  p.Body AS \"P.Body\", c.Text AS \"C.Text\", c.Score AS \"C.Score\", c.CreationDate\n\nFROM Posts p\n  JOIN Comments c ON p.Id = c.PostId\n\nWHERE c.UserId = ##CommenterID:int##\nAND LOWER(c.Text) LIKE LOWER('%##SearchTerm##%')\n\nORDER BY c.Score DESC",
        "CreationDate": "2017-09-15 21:08:15",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 724902,
        "Title": "Answer to vote ratio by Question ID",
        "Description": null,
        "QueryBody": "SELECT  1.0*Score\/AnswerCount FROM Posts WHERE ##i##=Id",
        "CreationDate": "2020-05-27 16:02:57",
        "validated": false,
        "QueryBody_Original": "SELECT  1.0*Score\/AnswerCount FROM Posts WHERE ##i##=Id"
    },
    {
        "QuerySetId": 725398,
        "Title": "Scores and Misc info for questions",
        "Description": null,
        "QueryBody": "DECLARE  @timeWindow INT = 6;\n\nWith VoteCounts as\n      (SELECT SUM(CASE WHEN VoteTypeId = 2 THEN 1 ELSE 0 END) as UpVotes,\n             SUM(CASE WHEN VoteTypeId = 3 THEN 1 ELSE 0 END) as DownVotes,\n             PostId\n      FROM Votes INNER JOIN Posts ON Votes.PostId = Posts.Id\n      WHERE ABS(DATEDIFF(hh, Posts.CreationDate, Votes.CreationDate)) < @timeWindow\n      GROUP BY PostId)\n\nselect Posts.Id, Posts.CreationDate, Score, ParentId,\n       PostTypes.Name as QuestionOrAnswer,\n       ViewCount, Body, OwnerUserId, Title, Tags, \n       VoteCounts.UpVotes as UpVotesFirst6Hours, \n       VoteCounts.DownVotes as DownVotesFirst6Hours\nFROM Posts\nLEFT JOIN VoteCounts ON VoteCounts.PostId = Posts.Id \nLEFT JOIN PostTypes ON Posts.PostTypeId = PostTypes.Id\nWHERE PostTypeId =1",
        "CreationDate": "2017-09-25 22:51:26",
        "validated": false,
        "QueryBody_Original": "DECLARE  @timeWindow INT = 6;\n\nWith VoteCounts as\n      (SELECT SUM(CASE WHEN VoteTypeId = 2 THEN 1 ELSE 0 END) as UpVotes,\n             SUM(CASE WHEN VoteTypeId = 3 THEN 1 ELSE 0 END) as DownVotes,\n             PostId\n      FROM Votes INNER JOIN Posts ON Votes.PostId = Posts.Id\n      WHERE ABS(DATEDIFF(hh, Posts.CreationDate, Votes.CreationDate)) < @timeWindow\n      GROUP BY PostId)\n\nselect Posts.Id, Posts.CreationDate, Score, ParentId,\n       PostTypes.Name as QuestionOrAnswer,\n       ViewCount, Body, OwnerUserId, Title, Tags, \n       VoteCounts.UpVotes as UpVotesFirst6Hours, \n       VoteCounts.DownVotes as DownVotesFirst6Hours\nFROM Posts\nLEFT JOIN VoteCounts ON VoteCounts.PostId = Posts.Id \nLEFT JOIN PostTypes ON Posts.PostTypeId = PostTypes.Id\nWHERE PostTypeId =1"
    },
    {
        "QuerySetId": 726736,
        "Title": "ASOIAF questions with low scoring answers and no accepted answer",
        "Description": null,
        "QueryBody": "DECLARE  @From_Date DATETIME = convert(DATETIME, '##StartDate?2013\/01\/01##')\nDECLARE @To_Date DATETIME = dateadd(mm, 3, @From_Date)\nPRINT 'from ' + format(@From_Date, 'D') + ' to ' + format(@To_Date, 'D')\n\nSELECT id as [Post Link]\nFROM Posts\nWHERE PostTypeId=2 AND CreationDate BETWEEN @From_Date\n        AND @To_Date\nAND Tags LIKE '%a-song-of-ice-and-fire%'",
        "CreationDate": "2018-07-02 12:01:51",
        "validated": false,
        "QueryBody_Original": "DECLARE  @From_Date DATETIME = convert(DATETIME, '##StartDate?2013\/01\/01##')\nDECLARE @To_Date DATETIME = dateadd(mm, 3, @From_Date)\nPRINT 'from ' + format(@From_Date, 'D') + ' to ' + format(@To_Date, 'D')\n\nSELECT id as [Post Link]\nFROM Posts\nWHERE PostTypeId=2 AND CreationDate BETWEEN @From_Date\n        AND @To_Date\nAND Tags LIKE '%a-song-of-ice-and-fire%'"
    },
    {
        "QuerySetId": 726759,
        "Title": "Search my answer posts by missing tag",
        "Description": null,
        "QueryBody": "DECLARE  @MyUserID INT = ##UserID:int##\nDECLARE @Tag nvarchar(25) = ##Tag:string##\nDECLARE @PostText nvarchar(600) = ##PostText:string##\n\nSELECT @PostText = UPPER(@PostText)\n\nSELECT\n    Answer.Id AS [Post Link],\n    Answer.Score AS [Score],\n    Answer.CreationDate AS [Creation Date]\nFROM\n    Posts Question\nLEFT JOIN Posts Answer ON Question.ID = Answer.ParentId\nWHERE\n    Answer.OwnerUserId = @MyUserID AND\n    Answer.PostTypeId IN (2, 3) AND\n    Answer.Score > 0 AND\n    Question.Tags NOT LIKE '%' + @Tag + '%' AND\n    UPPER(Question.Body) LIKE '%' + @PostText + '%'    \nORDER BY\n    Answer.Score\nDESC",
        "CreationDate": "2017-09-27 22:38:02",
        "validated": false,
        "QueryBody_Original": "DECLARE  @MyUserID INT = ##UserID:int##\nDECLARE @Tag nvarchar(25) = ##Tag:string##\nDECLARE @PostText nvarchar(600) = ##PostText:string##\n\nSELECT @PostText = UPPER(@PostText)\n\nSELECT\n    Answer.Id AS [Post Link],\n    Answer.Score AS [Score],\n    Answer.CreationDate AS [Creation Date]\nFROM\n    Posts Question\nLEFT JOIN Posts Answer ON Question.ID = Answer.ParentId\nWHERE\n    Answer.OwnerUserId = @MyUserID AND\n    Answer.PostTypeId IN (2, 3) AND\n    Answer.Score > 0 AND\n    Question.Tags NOT LIKE '%' + @Tag + '%' AND\n    UPPER(Question.Body) LIKE '%' + @PostText + '%'    \nORDER BY\n    Answer.Score\nDESC"
    },
    {
        "QuerySetId": 728428,
        "Title": "Number of question by site filtered by tag",
        "Description": null,
        "QueryBody": "DECLARE  @sql nvarchar(max)\n\nselect \n @sql = isnull(@sql + ' UNION ALL ','') + \n 'SELECT DISTINCT ''' + quotename(name) + ''' as Site, (SELECT COUNT(Id) FROM ' + quotename(name) + '..Posts WHERE Tags like ''%markdown%'' AND PostTypeId = 1 ) as ''Number_of_Questions'' ' +\n 'FROM ' + quotename(name) + '..Posts ' \n from sys.databases d\n WHERE\n        ((d.name NOT LIKE '%Meta%') Or d.name='StackOverflow.Meta') AND\n        (d.name NOT IN ('master', 'model', 'tempdb', 'msdb', 'Data.StackExchange'))\n           \n           \nEXEC sp_executesql @sql",
        "CreationDate": "2017-09-26 18:18:08",
        "validated": false,
        "QueryBody_Original": "DECLARE  @sql nvarchar(max)\n\nselect \n @sql = isnull(@sql + ' UNION ALL ','') + \n 'SELECT DISTINCT ''' + quotename(name) + ''' as Site, (SELECT COUNT(Id) FROM ' + quotename(name) + '..Posts WHERE Tags like ''%markdown%'' AND PostTypeId = 1 ) as ''Number_of_Questions'' ' +\n 'FROM ' + quotename(name) + '..Posts ' \n from sys.databases d\n WHERE\n        ((d.name NOT LIKE '%Meta%') Or d.name='StackOverflow.Meta') AND\n        (d.name NOT IN ('master', 'model', 'tempdb', 'msdb', 'Data.StackExchange'))\n           \n           \nEXEC sp_executesql @sql"
    },
    {
        "QuerySetId": 730566,
        "Title": "who i am - advanced",
        "Description": null,
        "QueryBody": "WITH  DataSource AS\n(\n    select row_number() OVER (ORDER BY reputation DESC) as RowID,creationdate, displayName, reputation, LastAccessDate, Location, id\n    from users\n    where Location LIKE '%Bulgaria%'\n)\nSELECT *\nFROM DataSource DS\nCROSS APPLY\n(\n    SELECT SUM(IIF(posttypeID = 1, 1, 0)) AS QuestionsCount\n          ,SUM(IIF(posttypeID = 2, 1, 0)) AS AnswersCount\n          ,SUM(IIF(posttypeID = 1 AND CreationDate >= DATEADD(DAY, -7, GETUTCDATE()), 1, 0)) AS QuestionsCountLast7Days\n    FROM Posts\n    WHERE OwnerUserID = DS.id\n    AND posttypeID IN (1, 2)\n) DS1\nWHERE DS.RowID <= 30\nORDER BY RowID\n\nSELECT *\nFROM PostTypes\n\n\nreturn\n\nSELECT TOP 100 *\nFROM Votes\nWHERE PostID = 1485393\n\nSELECT *\nFROM VoteTypes",
        "CreationDate": "2017-10-26 13:36:25",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 731539,
        "Title": "Badges lead table (most bronze, silver and gold overall and for tags)",
        "Description": null,
        "QueryBody": "WITH  separate tagbadge counts\n\nSELECT TOP(##limit:int?25##)\n  u.id as [User Link],\n  COUNT(*) as Total,\n  COUNT(CASE WHEN b.Class = 1 THEN 1 ELSE NULL END) as Gold,\n  COUNT(CASE WHEN b.Class = 2 THEN 1 ELSE NULL END) as Silver,\n  COUNT(CASE WHEN b.Class = 3 THEN 1 ELSE NULL END) as Bronze,\n  COUNT(CASE WHEN b.TagBased = 1 THEN 1 ELSE NULL END) as [Total (tags)],\n  COUNT(CASE WHEN b.TagBased = 1 AND b.Class = 1 THEN 1 ELSE NULL END) as [Gold (tags)],\n  COUNT(CASE WHEN b.TagBased = 1 AND b.Class = 2 THEN 1 ELSE NULL END) as [Silver (tags)],\n  COUNT(CASE WHEN b.TagBased = 1 AND b.Class = 3 THEN 1 ELSE NULL END) as [Bronze (tags)]\nFROM Users u\nINNER JOIN Badges b ON b.UserId = u.Id\nGROUP BY u.id\nORDER BY COUNT(*) desc",
        "CreationDate": "2017-09-29 19:30:33",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 731875,
        "Title": "All questions by a given user",
        "Description": null,
        "QueryBody": "SELECT  CreationDate, Id as [Post Link], Title, Body\nFROM posts\nWHERE (LastEditorUserId = ##UserId##)\nORDER BY CreationDate DESC",
        "CreationDate": "2020-03-05 17:08:24",
        "validated": false,
        "QueryBody_Original": "SELECT  CreationDate, Id as [Post Link], Title, Body\nFROM posts\nWHERE (LastEditorUserId = ##UserId##)\nORDER BY CreationDate DESC"
    },
    {
        "QuerySetId": 733771,
        "Title": "Links to answers by a given user",
        "Description": null,
        "QueryBody": "SELECT  CreationDate, Id as [Post Link]\nFROM posts\nWHERE (PostTypeId=2) AND (OwnerUserId = ##UserId##)\nORDER BY CreationDate DESC",
        "CreationDate": "2017-10-02 09:04:34",
        "validated": false,
        "QueryBody_Original": "SELECT  CreationDate, Id as [Post Link]\nFROM posts\nWHERE (PostTypeId=2) AND (OwnerUserId = ##UserId##)\nORDER BY CreationDate DESC"
    },
    {
        "QuerySetId": 736927,
        "Title": "Deep Learning over Time CV",
        "Description": null,
        "QueryBody": "SELECT \n  convert(char(7), CreationDate, 20) as [month],\n  count(*) as [count]\nfrom Posts p\nwhere p.PostTypeId = 1\n  and p.Tags like '%<torch>%' \ngroup by convert(char(7), CreationDate, 20)\n\nSELECT\n  convert(char(7), CreationDate, 20) as [month],\n  count(*) as [count]\nfrom Posts p\nwhere p.PostTypeId = 1\n  and p.Tags like '%<pytorch>%' \ngroup by convert(char(7), CreationDate, 20)\n\nSELECT\n  convert(char(7), CreationDate, 20) as [month],\n  count(*) as [count]\nfrom Posts p\nwhere p.PostTypeId = 1\n  and p.Tags like '%<tensorflow>%' \ngroup by convert(char(7), CreationDate, 20)",
        "CreationDate": "2017-10-05 13:40:24",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 737728,
        "Title": "-- How many upvotes do I have for each tag? -- how long before I get tag badges?  DECLARE @UserId in",
        "Description": null,
        "QueryBody": "DECLARE  @UserId int = 10000\n\nSELECT --TOP 20 \n    TagName,\n    COUNT(*) AS UpVotes \nFROM Tags\n    INNER JOIN PostTags ON PostTags.TagId = Tags.id\n    INNER JOIN Posts ON Posts.ParentId = PostTags.PostId\n    INNER JOIN Votes ON Votes.PostId = Posts.Id and VoteTypeId = 2\nWHERE \n    Posts.OwnerUserId = @UserId\nGROUP BY TagName \nORDER BY UpVotes DESC",
        "CreationDate": "2017-10-06 16:34:28",
        "validated": false,
        "QueryBody_Original": "DECLARE  @UserId int = 10000\n\nSELECT --TOP 20 \n    TagName,\n    COUNT(*) AS UpVotes \nFROM Tags\n    INNER JOIN PostTags ON PostTags.TagId = Tags.id\n    INNER JOIN Posts ON Posts.ParentId = PostTags.PostId\n    INNER JOIN Votes ON Votes.PostId = Posts.Id and VoteTypeId = 2\nWHERE \n    Posts.OwnerUserId = @UserId\nGROUP BY TagName \nORDER BY UpVotes DESC"
    },
    {
        "QuerySetId": 738460,
        "Title": "Users Location ends with X",
        "Description": "Find users who's location field contains the specified parameter.",
        "QueryBody": "WITH  Website\n-- Find users who's location field contains the specified parameter.\n-- Only users WITH a website will be displayed\n\nSELECT us.DisplayName, \nus.Id as [User Link],\n  us.Reputation,\n  us.Age,\n\n  us.Location,\n  us.*\nFROM Users us\n\nWHERE us.Location LIKE '%South Africa%'\n\nAND us.Age < 35\nORDER BY us.age DESC",
        "CreationDate": "2017-10-09 15:45:13",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 738536,
        "Title": "Homework over time with time bins",
        "Description": null,
        "QueryBody": "SELECT \n  DATEADD(DD,\n   -(DATEDIFF(DD,CreationDate,GETDATE())-DATEDIFF(DD,CreationDate,GETDATE())%7)\n   ,CONVERT(date,GETDATE())) AS RoundedDate,\n  COUNT(*) AS Count\nFROM Posts\nWHERE Tags LIKE '%homework-and-exercises%'\n\nGROUP BY DATEADD(DD,\n   -(DATEDIFF(DD,CreationDate,GETDATE())-DATEDIFF(DD,CreationDate,GETDATE())%7)\n   ,CONVERT(date,GETDATE()))\n   \nORDER BY RoundedDate DESC",
        "CreationDate": "2017-10-09 20:56:34",
        "validated": false,
        "QueryBody_Original": "SELECT \n  DATEADD(DD,\n   -(DATEDIFF(DD,CreationDate,GETDATE())-DATEDIFF(DD,CreationDate,GETDATE())%7)\n   ,CONVERT(date,GETDATE())) AS RoundedDate,\n  COUNT(*) AS Count\nFROM Posts\nWHERE Tags LIKE '%homework-and-exercises%'\n\nGROUP BY DATEADD(DD,\n   -(DATEDIFF(DD,CreationDate,GETDATE())-DATEDIFF(DD,CreationDate,GETDATE())%7)\n   ,CONVERT(date,GETDATE()))\n   \nORDER BY RoundedDate DESC"
    },
    {
        "QuerySetId": 739029,
        "Title": "Your (and others) daily cycle",
        "Description": "It shows, how many questions, answers and comments did you post, grouped by the hour of the day.",
        "QueryBody": "SELECT  * FROM Votes, Users\nWHERE\n  Votes.UserId = Users.Id\n  AND\n  Users.AccountId=##UserId:int##;",
        "CreationDate": "2017-10-11 03:04:33",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 741754,
        "Title": "Questions in selected tag that I haven't answered yet",
        "Description": "This is a query to determine all the posts that the submitting user does not have an answer for within a specified tag.",
        "QueryBody": "DECLARE  @userId int\nDECLARE @tagId int\n\nSELECT @userId = Id FROM Users WHERE DisplayName = '##UserName##'\nSELECT @tagId = Id FROM Tags WHERE TagName = '##Tag##'\n\nSELECT  p.Id AS [Post Link],\n        CASE WHEN p.AcceptedAnswerId >= 1 THEN 'Yes' ELSE 'No' END as HasAccepted,\n        CASE WHEN p.AnswerCount >= 1 THEN 'Yes' ELSE 'No' END as HasAnswers,\n        p.Score,\n        p.Tags,\n        p.CreationDate,\n        p.LastActivityDate,\n        p.ClosedDate\n\nFROM Posts p\nJOIN PostTags pt ON pt.PostId = p.Id AND pt.TagId = @tagId\nLEFT JOIN Posts a ON a.ParentId = p.Id AND a.PostTypeId = 2 AND @userId = a.OwnerUserId\n\nWHERE p.PostTypeId = 1\nAND p.DeletionDate IS NULL\nAND a.Id IS NULL\nORDER BY CreationDate DESC",
        "CreationDate": "2017-10-16 04:47:59",
        "validated": false,
        "QueryBody_Original": "DECLARE  @userId int\nDECLARE @tagId int\n\nSELECT @userId = Id FROM Users WHERE DisplayName = '##UserName##'\nSELECT @tagId = Id FROM Tags WHERE TagName = '##Tag##'\n\nSELECT  p.Id AS [Post Link],\n        CASE WHEN p.AcceptedAnswerId >= 1 THEN 'Yes' ELSE 'No' END as HasAccepted,\n        CASE WHEN p.AnswerCount >= 1 THEN 'Yes' ELSE 'No' END as HasAnswers,\n        p.Score,\n        p.Tags,\n        p.CreationDate,\n        p.LastActivityDate,\n        p.ClosedDate\n\nFROM Posts p\nJOIN PostTags pt ON pt.PostId = p.Id AND pt.TagId = @tagId\nLEFT JOIN Posts a ON a.ParentId = p.Id AND a.PostTypeId = 2 AND @userId = a.OwnerUserId\n\nWHERE p.PostTypeId = 1\nAND p.DeletionDate IS NULL\nAND a.Id IS NULL\nORDER BY CreationDate DESC"
    },
    {
        "QuerySetId": 742071,
        "Title": "Comment with link to how-to-ask page",
        "Description": null,
        "QueryBody": "SELECT \n   Text [Comment Link],\n   Score\n   \nFROM\n   Comments\n   \nWHERE\n   UserId = ##userID## AND\n   Text Like '%how_to_ask%'\n\nORDER BY \n    Score DESC",
        "CreationDate": "2017-10-15 10:25:09",
        "validated": false,
        "QueryBody_Original": "SELECT \n   Text [Comment Link],\n   Score\n   \nFROM\n   Comments\n   \nWHERE\n   UserId = ##userID## AND\n   Text Like '%how_to_ask%'\n\nORDER BY \n    Score DESC"
    },
    {
        "QuerySetId": 742277,
        "Title": "All questions tagged with a given tag, and possibly other tags too (with score at least 1)",
        "Description": null,
        "QueryBody": "DECLARE  @Tag nvarchar(100) = ##Tag:string##\n\nSELECT q.Id AS [Post Link], q.Tags, q.Score\n\nFROM Posts q\n\nWHERE q.Score >= 0 and q.Tags LIKE '%<' + @Tag + '>%'\n\nORDER BY q.Score DESC",
        "CreationDate": "2017-10-24 10:55:04",
        "validated": false,
        "QueryBody_Original": "DECLARE  @Tag nvarchar(100) = ##Tag:string##\n\nSELECT q.Id AS [Post Link], q.Tags, q.Score\n\nFROM Posts q\n\nWHERE q.Score >= 0 and q.Tags LIKE '%<' + @Tag + '>%'\n\nORDER BY q.Score DESC"
    },
    {
        "QuerySetId": 744151,
        "Title": "[ALPHA] [Comment connected - Comment correlation]",
        "Description": null,
        "QueryBody": "SELECT  \nu1.Id AS commenter_id,\nu2.Id AS commentee_id,\nMAX(c.CreationDate) AS last_comment,\nCOUNT(c.Id) AS number_comments\n\nINTO #temp_commentplot\n\nFROM Comments AS c\nINNER JOIN Posts AS p ON c.PostId = p.Id\nINNER JOIN Users AS u1 ON c.UserId = u1.Id\nINNER JOIN Users AS u2 ON p.OwnerUserId = u2.Id\n\nWHERE ( c.CreationDate > DATEADD(dd, -##CommentDateRange:int?300##, GETDATE()) )\nAND ( u1.Id <> u2.Id )\n\nGROUP BY\nu1.Id,\nu2.Id\n\nHAVING COUNT(c.Id) > 10\nAND ( MAX(c.CreationDate) > DATEADD(dd, -##DateRange:int?60##, GETDATE()) );\n\nSELECT * FROM #temp_commentplot",
        "CreationDate": "2017-10-18 11:02:00",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 744231,
        "Title": "All posts with tag since date",
        "Description": null,
        "QueryBody": "DECLARE  @tag VARCHAR(10) = '<' + ##tag:string## + '>'\nDECLARE @startdate DATETIME = '##StartDate##'\n\nSELECT * FROM Posts\nWHERE CHARINDEX(@tag, Tags)>0 AND CreationDate > @startdate",
        "CreationDate": "2017-10-18 17:05:59",
        "validated": false,
        "QueryBody_Original": "DECLARE  @tag VARCHAR(10) = '<' + ##tag:string## + '>'\nDECLARE @startdate DATETIME = '##StartDate##'\n\nSELECT * FROM Posts\nWHERE CHARINDEX(@tag, Tags)>0 AND CreationDate > @startdate"
    },
    {
        "QuerySetId": 744375,
        "Title": "Average review time per task type",
        "Description": null,
        "QueryBody": "SELECT  Name,\n  AVG(CAST(DATEDIFF(DAY, CreationDate, DeletionDate) AS FLOAT))  \n  FROM ReviewTasks INNER JOIN ReviewTaskTypes\n    ON ReviewTasks.ReviewTaskTypeId = ReviewTaskTypes.Id\n  WHERE CreationDate BETWEEN ##DateFrom:string## AND ##DateTill:string##\n    AND DeletionDate IS NOT NULL\n  GROUP BY Name",
        "CreationDate": "2017-10-18 23:11:05",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 744596,
        "Title": "Find stackoverflow users by reputation",
        "Description": null,
        "QueryBody": "DECLARE  @Reputation int = ##Reputation##\n\nselect u.Id [User Link], * from Users u where u.Reputation = @Reputation",
        "CreationDate": "2017-10-19 20:29:50",
        "validated": false,
        "QueryBody_Original": "DECLARE  @Reputation int = ##Reputation##\n\nselect u.Id [User Link], * from Users u where u.Reputation = @Reputation"
    },
    {
        "QuerySetId": 744601,
        "Title": "Find stackoverflow users by reputation interval",
        "Description": null,
        "QueryBody": "DECLARE  @ReputationStart int = ##ReputationValueStart##\nDECLARE @ReputationEnd int = ##ReputationValueEnd##\n\nselect u.Id [User Link],  u.DisplayName, u.Age, u.Reputation, u.WebsiteUrl, u.Location from Users u where u.Reputation >= @ReputationStart and u.Reputation <= @ReputationEnd",
        "CreationDate": "2017-10-19 20:45:23",
        "validated": false,
        "QueryBody_Original": "DECLARE  @ReputationStart int = ##ReputationValueStart##\nDECLARE @ReputationEnd int = ##ReputationValueEnd##\n\nselect u.Id [User Link],  u.DisplayName, u.Age, u.Reputation, u.WebsiteUrl, u.Location from Users u where u.Reputation >= @ReputationStart and u.Reputation <= @ReputationEnd"
    },
    {
        "QuerySetId": 745535,
        "Title": "Users by number of questions they asked",
        "Description": null,
        "QueryBody": "SELECT  \nCOALESCE('site:\/\/users\/' + CAST(p.OwnerUserId AS NVARCHAR) + '|' + u.DisplayName, p.OwnerDisplayName) AS UserLink,\nCOUNT(p.Id) AS QCount\nFROM Posts AS p\nLEFT JOIN users AS u ON u.Id = p.OwnerUserId\nWHERE p.PostTypeId = 1\nGROUP BY p.OwnerUserId, p.OwnerdisplayName, u.DisplayName\nHAVING ##MinCount?100## <= COUNT(p.Id)\nORDER BY COUNT(p.Id) DESC;",
        "CreationDate": "2017-10-23 02:41:54",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 746185,
        "Title": "IF\/ELSE branching using temp table(s)",
        "Description": null,
        "QueryBody": "DECLARE  @OrderByCreationDate BIT = 1\n\nIF @OrderByCreationDate = 1\n    SELECT *\n    FROM #TempUsers\n    -- This clause is different between the 2 conditionals\n    ORDER BY CreationDate DESC\nELSE\n    SELECT *\n    FROM #TempUsers\n    ORDER BY Reputation DESC",
        "CreationDate": "2017-10-24 16:15:51",
        "validated": false,
        "QueryBody_Original": "DECLARE  @OrderByCreationDate BIT = 1\n\nIF @OrderByCreationDate = 1\n    SELECT *\n    FROM #TempUsers\n    -- This clause is different between the 2 conditionals\n    ORDER BY CreationDate DESC\nELSE\n    SELECT *\n    FROM #TempUsers\n    ORDER BY Reputation DESC"
    },
    {
        "QuerySetId": 746329,
        "Title": "Question stats for a week",
        "Description": null,
        "QueryBody": "DECLARE  @start datetime = '2017-10-08',\n        @end datetime = '2017-10-15';\n\nselect count(iif(Score < 0, 1, 0))\nfrom Posts\nwhere CreationDate between @start and @end",
        "CreationDate": "2017-10-25 03:43:12",
        "validated": false,
        "QueryBody_Original": "DECLARE  @start datetime = '2017-10-08',\n        @end datetime = '2017-10-15';\n\nselect count(iif(Score < 0, 1, 0))\nfrom Posts\nwhere CreationDate between @start and @end"
    },
    {
        "QuerySetId": 746333,
        "Title": "Total score and number of a user's posts",
        "Description": null,
        "QueryBody": "SELECT  SUM(p.Score) AS [Total Score], \n    COUNT(p.Id) AS [Number of Posts], \n    MIN(p.CreationDate) as [First Post],\n    MAX(p.CreationDate) as [Last Post],\n    DATEDIFF(day, MIN(p.CreationDate), MAX(p.CreationDate)) as Duration\nFROM Posts p\nWHERE p.OwnerUserId = ##id##",
        "CreationDate": "2017-10-25 04:36:51",
        "validated": false,
        "QueryBody_Original": "SELECT  SUM(p.Score) AS [Total Score], \n    COUNT(p.Id) AS [Number of Posts], \n    MIN(p.CreationDate) as [First Post],\n    MAX(p.CreationDate) as [Last Post],\n    DATEDIFF(day, MIN(p.CreationDate), MAX(p.CreationDate)) as Duration\nFROM Posts p\nWHERE p.OwnerUserId = ##id##"
    },
    {
        "QuerySetId": 746894,
        "Title": "Count combinations of mandatory tags on meta",
        "Description": null,
        "QueryBody": "WITH  MandatoryTags as (select\n  case when Tags like '%<discussion>%' or Tags like '%<support>%' then 'Yes' else '' end as [Discussion-Support],\n  case when Tags like '%<bug>%' or Tags like '%<feature-request>%' then 'Yes' else '' end as [Bug-Feature]\nfrom Posts\nwhere PostTypeId = 1\n  and ClosedDate is null\n  and CreationDate >= ##StartDate:string?2017-01-01##\n  and CreationDate < ##EndDate:string?2018-01-01##\n), TotalSum as (\n  select count(*) as [Total] from MandatoryTags\n)\nselect\n  count(*) as [Count],\n  round(count(*) * 100.0 \/ [Total], 2) as [Percent],\n  [Discussion-Support], [Bug-Feature]\nfrom MandatoryTags, TotalSum\ngroup by\n  [Total], [Discussion-Support], [Bug-Feature]",
        "CreationDate": "2017-10-26 15:41:16",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 746983,
        "Title": "Users who start questions with \"So ...\"",
        "Description": null,
        "QueryBody": "SELECT  p.id  AS [Post Link]\nFROM Posts p \nJOIN Users u ON p.OwnerUserId = u.Id\n\n\nWHERE p.PostTypeId = 2\n   AND p.OwnerUserId = ##UserId:int##\n   AND UPPER(p.body) LIKE UPPER('%##CommentText##%')",
        "CreationDate": "2019-04-11 14:18:23",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 749070,
        "Title": "Batch Select Questions and Accepted Answer",
        "Description": null,
        "QueryBody": "SELECT  TOP ##NumberOfQuestionsToFetch##\n              question.Id AS QuestionId, \n              question.Score AS QuestionScore,\n              question.Title AS QuestionTitle,\n              question.Body AS QuestionBody,\n              question.Tags,\n              answer.Id AS AcceptedAnswerId,\n              answer.Score AS AnswerScore,\n              answer.Body AS AnswerBody\nFROM Posts AS question\nJOIN Posts AS answer on question.AcceptedAnswerId = answer.Id\nINNER JOIN PostTags AS question_tags on question_tags.PostId = question.Id\nINNER JOIN Tags on question_tags.TagId = Tags.Id\nWHERE question.Id > ##LastFetchedQuestionId## AND \n      Tags.TagName IN ('##Tag##')\n      ORDER BY question.Id ASC",
        "CreationDate": "2017-10-30 21:30:38",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 749309,
        "Title": "comments by user A on posts by user B",
        "Description": null,
        "QueryBody": "SELECT  c.postid as [Post Link], c.id as [Comment Link], c.text from\nposts p\njoin \n(SELECT id,postid,text from comments where userid = ##commentUser##) as c\non c.postid = p.id\nwhere p.owneruserid = ##postUser##",
        "CreationDate": "2017-10-31 03:20:05",
        "validated": false,
        "QueryBody_Original": "SELECT  c.postid as [Post Link], c.id as [Comment Link], c.text from\nposts p\njoin \n(SELECT id,postid,text from comments where userid = ##commentUser##) as c\non c.postid = p.id\nwhere p.owneruserid = ##postUser##"
    },
    {
        "QuerySetId": 750978,
        "Title": "tags from the answers the user posted",
        "Description": null,
        "QueryBody": "DECLARE  @UserId int = ##UserID##\n\nselect P1.Tags, P.ParentId, P.Id, P.OwnerUserId, P.Body\nfrom Posts P, Users U, Posts P1\nwhere P.Id != P.ParentId AND\n      P1.Id = P.ParentId AND\n      P.OwnerUserId = U.Id AND\n      U.Id = @UserId",
        "CreationDate": "2017-11-02 04:12:37",
        "validated": false,
        "QueryBody_Original": "DECLARE  @UserId int = ##UserID##\n\nselect P1.Tags, P.ParentId, P.Id, P.OwnerUserId, P.Body\nfrom Posts P, Users U, Posts P1\nwhere P.Id != P.ParentId AND\n      P1.Id = P.ParentId AND\n      P.OwnerUserId = U.Id AND\n      U.Id = @UserId"
    },
    {
        "QuerySetId": 754148,
        "Title": "Total number of questions tagged python",
        "Description": null,
        "QueryBody": "DECLARE  @UserId int = 4766032\n\nSELECT\n    Tags.TagName, PostTags.PostId, Posts.OwnerUserId, Votes.VoteTypeId\nFROM Tags\n    INNER JOIN PostTags on Tags.Id = PostTags.TagId\n    INNER JOIN Posts on PostTags.PostId = Posts.Id\n    INNER JOIN Votes on Posts.Id = Votes.PostId\nWHERE Tags.TagName = 'python'",
        "CreationDate": "2017-11-07 23:46:20",
        "validated": false,
        "QueryBody_Original": "DECLARE  @UserId int = 4766032\n\nSELECT\n    Tags.TagName, PostTags.PostId, Posts.OwnerUserId, Votes.VoteTypeId\nFROM Tags\n    INNER JOIN PostTags on Tags.Id = PostTags.TagId\n    INNER JOIN Posts on PostTags.PostId = Posts.Id\n    INNER JOIN Votes on Posts.Id = Votes.PostId\nWHERE Tags.TagName = 'python'"
    },
    {
        "QuerySetId": 756602,
        "Title": "Comments that vastly outscore the posts they're under",
        "Description": null,
        "QueryBody": "SELECT  TOP ##number?100##\n  Comments.Score AS 'CS', \n  Posts.Score AS 'PS',\n  round(cast(Comments.Score as float)\/ cast(Posts.Score as float), 0.001) AS r,\n  Comments.Id AS [Comment Link],\n  Users. Id AS [User Link],\n  Posts.Id AS [Post Link],\n  Comments.CreationDate\nFROM Comments\nJOIN Posts ON Comments.PostId = Posts.Id\nLEFT JOIN Users ON Comments.UserId = Users.Id\nWHERE Posts.Score > ##ScoreThreshold?0##\nORDER BY cast(Comments.Score as float)\/ cast(Posts.Score as float) DESC",
        "CreationDate": "2017-11-12 23:36:02",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 758484,
        "Title": "Dupes of a specific question",
        "Description": null,
        "QueryBody": "SELECT  DISTINCT Posts.Id AS [Post Link], Posts.*\nFROM Posts, PostHistory\nWHERE\n  Posts.PostTypeId = 1\n  AND Posts.DeletionDate IS NULL\n  AND Posts.ClosedDate IS NOT NULL\n  AND PostHistory.PostId = Posts.Id\n  AND PostHistory.PostHistoryTypeId = 10\n  AND PostHistory.Comment in ('1', '101')\n  AND JSON_VALUE(PostHistory.Text, '$.OriginalQuestionIds[0]')\n    = ##QuestionId:int##\nORDER BY Posts.Id DESC",
        "CreationDate": "2017-11-15 08:25:06",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 760118,
        "Title": "Constituent Badges for Election 3",
        "Description": null,
        "QueryBody": "SELECT \n  Id as BadgeId,\n  UserId,\n  DATEDIFF(second, {d '1970-01-01'}, Date) as Timestamp \nFROM Badges\nWHERE Name = 'Constituent' \nAND Date > '2017-01-13 00:00'",
        "CreationDate": "2017-11-18 14:16:14",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 761533,
        "Title": "Posts with tag by day",
        "Description": null,
        "QueryBody": "SELECT  CONVERT(DATETIME, CONVERT(VARCHAR(16), Posts.CreationDate, 106)) 'Day', COUNT(Posts.Id) 'PostsCount'\nFROM Posts\nWHERE Tags LIKE '%##TagName##%'\nGROUP BY CONVERT(DATETIME, CONVERT(VARCHAR(16), Posts.CreationDate, 106))\nORDER BY Day",
        "CreationDate": "2017-11-24 01:42:38",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 761584,
        "Title": "Closed Questions By GTE ViewCount",
        "Description": null,
        "QueryBody": "SELECT  COUNT(*) AS TotalCount\nFROM Posts\nWHERE\n  ClosedDate IS NOT NULL\n  AND PostTypeID = 1 \n  AND CreationDate >= ##startdate:string##\n  AND ViewCount >= ##viewcount:int##",
        "CreationDate": "2017-11-22 09:43:20",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 763147,
        "Title": "Reputation at end of the year",
        "Description": null,
        "QueryBody": "SELECT  Reputation from Users WHERE Id = ##userId##",
        "CreationDate": "2017-11-25 17:40:50",
        "validated": false,
        "QueryBody_Original": "SELECT  Reputation from Users WHERE Id = ##userId##"
    },
    {
        "QuerySetId": 764070,
        "Title": "reputation per expected from upvote\/accept",
        "Description": null,
        "QueryBody": "SELECT \nid as [User Link],\nreputation,\nvoteScore,\nround(cast(reputation as float) \/ voteScore, 2) as ratio\nfrom\n(\nSELECT up.id, max(up.reputation) as reputation,\nsum(\ncase v.VoteTypeId\n  when 1 then 15\n  when 2 then iif(posttypeid = 1, 5, 10)\nend\n) as voteScore from\n(SELECT p.id as postId,p.PostTypeId,u.id,u.reputation from\n(SELECT id,reputation from users\nwhere\nreputation > ##minReputation?50000##\n--and id = 1672\n) as u\njoin posts p\non u.id = p.owneruserid\nwhere p.communityowneddate is null) as up\njoin votes v\non up.postId = v.PostId\nwhere v.VoteTypeId in (1,2) -- accept\/upvote\ngroup by up.id) as uvc\norder by reputation desc",
        "CreationDate": "2017-11-28 00:47:29",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 764795,
        "Title": "Search for spam in profile info",
        "Description": "Finds accounts with typical spam keywords in \"about me\" field\r\n",
        "QueryBody": "WITH  typical spam keywords in \"about me\" field\n\nSELECT id AS [User Link], AboutMe, WebsiteUrl\n  FROM Users\n WHERE (AboutMe LIKE '%My uncle, Scrooge McDuck, is the richest duck in the world. He makes me polish his coins for 30 cents an hour. My girlfriend is Daisy Duck and my nephews are Huey, Dewey and Louie Duck. My neighbor Jones and my cousin Gladstone drive me nuts. I live in Duckburg, Calisota WITH my 3 nephews.%')",
        "CreationDate": "2018-02-13 00:04:32",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 765318,
        "Title": "Yearly Impact -- People Reached",
        "Description": null,
        "QueryBody": "DECLARE  @UserId int = ##UserId##\n\nSELECT\n  FORMAT(SUM(ViewCount), '#,#') AS [Views],\n  DATEPART(yyyy, CreationDate) AS [Year]\nFROM\n(\n  SELECT ViewCount, CreationDate\n  FROM Posts\n  WHERE OwnerUserId = @UserId AND PostTypeId IN (1, 3) -- question or wiki\n  UNION ALL\n  SELECT others.ViewCount, others.CreationDate\n  FROM Posts mine\n  JOIN Posts others ON mine.ParentId = others.Id\n  WHERE mine.OwnerUserId = @UserId AND mine.PostTypeId = 2 -- answer\n) grp\nGROUP BY DATEPART(yyyy, CreationDate)\nORDER BY [Year] DESC;",
        "CreationDate": "2018-10-18 21:53:28",
        "validated": false,
        "QueryBody_Original": "DECLARE  @UserId int = ##UserId##\n\nSELECT\n  FORMAT(SUM(ViewCount), '#,#') AS [Views],\n  DATEPART(yyyy, CreationDate) AS [Year]\nFROM\n(\n  SELECT ViewCount, CreationDate\n  FROM Posts\n  WHERE OwnerUserId = @UserId AND PostTypeId IN (1, 3) -- question or wiki\n  UNION ALL\n  SELECT others.ViewCount, others.CreationDate\n  FROM Posts mine\n  JOIN Posts others ON mine.ParentId = others.Id\n  WHERE mine.OwnerUserId = @UserId AND mine.PostTypeId = 2 -- answer\n) grp\nGROUP BY DATEPART(yyyy, CreationDate)\nORDER BY [Year] DESC;"
    },
    {
        "QuerySetId": 768005,
        "Title": "Tag-badge leaderboard for a specific tag",
        "Description": null,
        "QueryBody": "SELECT  TOP 100\n  SUM(answers.Score) AS 'Total Score',\n  COUNT(answers.Id) AS 'Total answers',\n  answers.OwnerUserId AS [User Link]\nFROM Posts answers\nINNER JOIN Posts questions ON questions.Id = answers.ParentId\nWHERE answers.CommunityOwnedDate IS NULL\n  AND questions.Tags LIKE '%'+##tag##+'%'\n  AND answers.PostTypeId=2 --answers\n  AND answers.OwnerUserId IS NOT NULL\nGROUP BY answers.OwnerUserId\nORDeR BY SUM(answers.Score) DESC",
        "CreationDate": "2017-12-07 01:14:30",
        "validated": false,
        "QueryBody_Original": "SELECT  TOP 100\n  SUM(answers.Score) AS 'Total Score',\n  COUNT(answers.Id) AS 'Total answers',\n  answers.OwnerUserId AS [User Link]\nFROM Posts answers\nINNER JOIN Posts questions ON questions.Id = answers.ParentId\nWHERE answers.CommunityOwnedDate IS NULL\n  AND questions.Tags LIKE '%'+##tag##+'%'\n  AND answers.PostTypeId=2 --answers\n  AND answers.OwnerUserId IS NOT NULL\nGROUP BY answers.OwnerUserId\nORDeR BY SUM(answers.Score) DESC"
    },
    {
        "QuerySetId": 768541,
        "Title": "Users with N accepted answers",
        "Description": null,
        "QueryBody": "SELECT  p.OwnerUserId as [User Link], count(p.Id) as AcceptedAnswers from Posts p \nwhere exists (\n  SELECT * from Posts q where q.AcceptedAnswerId = p.Id\n  )\ngroup by p.OwnerUserId\nhaving count(p.Id) >= ##acceptedanswers##\norder by count(p.Id) desc",
        "CreationDate": "2017-12-17 01:16:17",
        "validated": false,
        "QueryBody_Original": "SELECT  p.OwnerUserId as [User Link], count(p.Id) as AcceptedAnswers from Posts p \nwhere exists (\n  SELECT * from Posts q where q.AcceptedAnswerId = p.Id\n  )\ngroup by p.OwnerUserId\nhaving count(p.Id) >= ##acceptedanswers##\norder by count(p.Id) desc"
    },
    {
        "QuerySetId": 769754,
        "Title": "How many words did I have to write per upvote?",
        "Description": null,
        "QueryBody": "SELECT  id as [Post Link], len(body) * 1.0 \/ score as [letters per upvote]\nfrom posts\nwhere owneruserid = ##user## and score > 0\norder by 2",
        "CreationDate": "2017-12-12 04:58:57",
        "validated": false,
        "QueryBody_Original": "SELECT  id as [Post Link], len(body) * 1.0 \/ score as [letters per upvote]\nfrom posts\nwhere owneruserid = ##user## and score > 0\norder by 2"
    },
    {
        "QuerySetId": 769755,
        "Title": "How hard did they work for their rep?",
        "Description": null,
        "QueryBody": "SELECT  users.displayname, sum(len(body)) * 1.0 \/ reputation as [letters per rep point]\nfrom posts inner join users on posts.owneruserid = users.id\nwhere reputation > ##repthreshold##\ngroup by users.displayname, reputation\norder by 2",
        "CreationDate": "2017-12-12 04:45:57",
        "validated": false,
        "QueryBody_Original": "SELECT  users.displayname, sum(len(body)) * 1.0 \/ reputation as [letters per rep point]\nfrom posts inner join users on posts.owneruserid = users.id\nwhere reputation > ##repthreshold##\ngroup by users.displayname, reputation\norder by 2"
    },
    {
        "QuerySetId": 769896,
        "Title": "Questions asked by user X and answered by user Y",
        "Description": null,
        "QueryBody": "DECLARE  @askerId AS INT = ##AskerID:int##\nDECLARE @answererId AS INT = ##AnswererID:int##\n\nSELECT TOP ##Limit:int?100##\n  q.Id [Post Link],\n  q.CreationDate,\n  q.Score Q,\n  a.Score A,\n  q.AnswerCount Ans,\n  CASE WHEN q.AcceptedAnswerId IS NOT NULL THEN 1 ELSE null END Acc,\n  q.ViewCount Views,\n  q.FavoriteCount Fav,\n  q.Tags,\n  q.ClosedDate\nFROM Posts q\nJOIN Posts a\n  ON q.OwnerUserId = @askerId\n  AND a.ParentId = q.Id\n  AND a.OwnerUserId = @answererId\nORDER BY q.CreationDate DESC",
        "CreationDate": "2018-03-11 16:32:15",
        "validated": false,
        "QueryBody_Original": "DECLARE  @askerId AS INT = ##AskerID:int##\nDECLARE @answererId AS INT = ##AnswererID:int##\n\nSELECT TOP ##Limit:int?100##\n  q.Id [Post Link],\n  q.CreationDate,\n  q.Score Q,\n  a.Score A,\n  q.AnswerCount Ans,\n  CASE WHEN q.AcceptedAnswerId IS NOT NULL THEN 1 ELSE null END Acc,\n  q.ViewCount Views,\n  q.FavoriteCount Fav,\n  q.Tags,\n  q.ClosedDate\nFROM Posts q\nJOIN Posts a\n  ON q.OwnerUserId = @askerId\n  AND a.ParentId = q.Id\n  AND a.OwnerUserId = @answererId\nORDER BY q.CreationDate DESC"
    },
    {
        "QuerySetId": 770806,
        "Title": "Who receives votes from me",
        "Description": null,
        "QueryBody": "SELECT  --TOP 50\ncount(*) --r.DisplayName, r.Reputation, sum(v.BountyAmount) as ReputationReceived\n  from Users m\n       inner join Votes v on m.id = v.UserId\n       --join Posts p on p.id = v.PostId\n       --join Users r on r.id = p.OwnerUserId\n where m.id = ##userID##\n-- group by r.DisplayName, r.Reputation\n-- order by ReputationReceived desc",
        "CreationDate": "2017-12-15 15:35:13",
        "validated": false,
        "QueryBody_Original": "SELECT  --TOP 50\ncount(*) --r.DisplayName, r.Reputation, sum(v.BountyAmount) as ReputationReceived\n  from Users m\n       inner join Votes v on m.id = v.UserId\n       --join Posts p on p.id = v.PostId\n       --join Users r on r.id = p.OwnerUserId\n where m.id = ##userID##\n-- group by r.DisplayName, r.Reputation\n-- order by ReputationReceived desc"
    },
    {
        "QuerySetId": 771163,
        "Title": "What tags I vote on the most?",
        "Description": "What tags you like to vote on.",
        "QueryBody": "DECLARE  @UserId int = ##UserId##\n\nSELECT TagName, count(*) c\nFROM Votes\n    INNER JOIN Posts ON Votes.PostId = Posts.Id\n    INNER JOIN PostTags ON Posts.Id = PostTags.PostId\n    INNER JOIN Tags ON PostTags.TagId = Tags.id\nWHERE Votes.UserId = @UserId\nGROUP BY TagName\nORDER BY c DESC",
        "CreationDate": "2017-12-16 17:00:57",
        "validated": false,
        "QueryBody_Original": "DECLARE  @UserId int = ##UserId##\n\nSELECT TagName, count(*) c\nFROM Votes\n    INNER JOIN Posts ON Votes.PostId = Posts.Id\n    INNER JOIN PostTags ON Posts.Id = PostTags.PostId\n    INNER JOIN Tags ON PostTags.TagId = Tags.id\nWHERE Votes.UserId = @UserId\nGROUP BY TagName\nORDER BY c DESC"
    },
    {
        "QuerySetId": 771520,
        "Title": "Which question give you a \u201cHero of Time\u201d hat?",
        "Description": null,
        "QueryBody": "SELECT  *\nFROM Posts\nWHERE OwnerUserId = ##UserId## AND PostTypeId = 1 \nAND SCORE > 0\nAND CONVERT(date, CreationDate) > cast('12\/14\/2017' as datetime)\nAND CONVERT(date, CreationDate) < cast('01\/01\/2018' as datetime) \nAND CONVERT(VARCHAR(5), CreationDate, 108) = '00:00'",
        "CreationDate": "2017-12-17 23:54:37",
        "validated": false,
        "QueryBody_Original": "SELECT  *\nFROM Posts\nWHERE OwnerUserId = ##UserId## AND PostTypeId = 1 \nAND SCORE > 0\nAND CONVERT(date, CreationDate) > cast('12\/14\/2017' as datetime)\nAND CONVERT(date, CreationDate) < cast('01\/01\/2018' as datetime) \nAND CONVERT(VARCHAR(5), CreationDate, 108) = '00:00'"
    },
    {
        "QuerySetId": 771787,
        "Title": "Upvoted comments per user (winterbash 2017)",
        "Description": null,
        "QueryBody": "SELECT  \nc.id as [Comment Link], c.CreationDate\nfrom Comments c\nwhere \nc.UserDisplayName = ##username:string##\nand\nc.CreationDate >= Convert(datetime, '2017-12-13' )",
        "CreationDate": "2017-12-18 14:04:27",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 773660,
        "Title": "Show top 50 unanswered questions",
        "Description": null,
        "QueryBody": "SELECT  TOP 50 Posts.Id, Title\nFROM Posts\nWHERE Posts.Score = 0 AND\n      Posts.AnswerCount = 0 AND \n      Posts.CommentCount > 10 AND\n      Posts.ClosedDate IS NULL AND \n      Posts.DeletionDate IS NULL AND\n      Posts.CreationDate < DATEADD(week,-2,GETDATE())\n\nORDER BY Posts.CreationDate DESC",
        "CreationDate": "2017-12-21 16:15:10",
        "validated": false,
        "QueryBody_Original": "SELECT  TOP 50 Posts.Id, Title\nFROM Posts\nWHERE Posts.Score = 0 AND\n      Posts.AnswerCount = 0 AND \n      Posts.CommentCount > 10 AND\n      Posts.ClosedDate IS NULL AND \n      Posts.DeletionDate IS NULL AND\n      Posts.CreationDate < DATEADD(week,-2,GETDATE())\n\nORDER BY Posts.CreationDate DESC"
    },
    {
        "QuerySetId": 774508,
        "Title": "Downvoted Because (anywhere in comment)",
        "Description": null,
        "QueryBody": "SELECT \n id as [Comment Link],\n text,\n creationdate\nfrom \n comments\nwhere \n text like '%http:\/\/idownvotedbecau.se\/%'\n and len(text) <= ##CommentLength:int##\n and CreationDate > DATEADD(dd, -##CreationDate:int?30##, GETDATE())",
        "CreationDate": "2017-12-22 22:20:08",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 774599,
        "Title": "Downvotes as more than N% of votes",
        "Description": null,
        "QueryBody": "DECLARE  @PERCENT float = ##PERCENTDOWNVOTES##\nDECLARE @MIN_VOTES int = ##MINVOTES##\n\n\nSELECT \n  id as [User Link], \n  Reputation,\n  UpVotes,\n  DownVotes,\n  (1.0*downVotes\/(1.0*UpVotes+1.0*DownVotes)) as PercentDown\n\nfrom USERS\n\nwhere \n  downVotes>0 and \n  (1.0*downVotes\/(1.0*UpVotes+1.0*DownVotes)) > @PERCENT\/100.0 and\n  (UpVotes+DownVotes) > @MIN_VOTES\n\norder by DownVotes desc",
        "CreationDate": "2018-01-06 23:59:19",
        "validated": false,
        "QueryBody_Original": "DECLARE  @PERCENT float = ##PERCENTDOWNVOTES##\nDECLARE @MIN_VOTES int = ##MINVOTES##\n\n\nSELECT \n  id as [User Link], \n  Reputation,\n  UpVotes,\n  DownVotes,\n  (1.0*downVotes\/(1.0*UpVotes+1.0*DownVotes)) as PercentDown\n\nfrom USERS\n\nwhere \n  downVotes>0 and \n  (1.0*downVotes\/(1.0*UpVotes+1.0*DownVotes)) > @PERCENT\/100.0 and\n  (UpVotes+DownVotes) > @MIN_VOTES\n\norder by DownVotes desc"
    },
    {
        "QuerySetId": 775055,
        "Title": "\u0427\u0438\u0441\u043b\u043e \u0433\u043e\u043b\u043e\u0441\u043e\u0432 \u00ab\u0437\u0430\u00bb \u0438 \u00ab\u043f\u0440\u043e\u0442\u0438\u0432\u00bb",
        "Description": null,
        "QueryBody": "SELECT  posts.id as [Post Link], \n  sum(case when votes.votetypeid = 2 then 1 else 0 end) as \"\u0433\u043e\u043b\u043e\u0441\u043e\u0432 \u0437\u0430\",\n  sum(case when votes.votetypeid = 3 then 1 else 0 end) as \"\u0433\u043e\u043b\u043e\u0441\u043e\u0432 \u043f\u0440\u043e\u0442\u0438\u0432\"\nfrom posts, votes\nwhere posts.id = votes.postid and posts.id = ##PostId:int?90##\ngroup by posts.id",
        "CreationDate": "2017-12-26 03:05:23",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 775227,
        "Title": "Curious Inquisitive Socratic Badge Progress",
        "Description": "Calculates the number of days a user has with questions that have upvotes and there are no downvoted questions and displays progress toward each of the badges",
        "QueryBody": "SELECT \ncase when days >= 5 then 'Yes' else concat(days, '\/', 5) end as Curious,\ncase when days >= 30 then 'Yes' else concat(days, '\/', 30) end as Inquisitive,\ncase when days >= 100 then 'Yes' else concat(days, '\/', 100) end as Socratic,\ndays\nfrom (SELECT count(*) as days\nfrom (SELECT\n  CONVERT(VARCHAR(10), creationDate, 111) as creationDay,\n  sum(case when score > 0 then 1 else 0 end) as up,\n  sum(case when score < 1 then 1 else 0 end) as down\nfrom Posts\nwhere OwnerUserId = ##UserId##\nand PostTypeId = 1\ngroup by CONVERT(VARCHAR(10), creationDate, 111) \n) x\nwhere up > 0 and down = 0\n) y",
        "CreationDate": "2017-12-27 04:58:33",
        "validated": false,
        "QueryBody_Original": "SELECT \ncase when days >= 5 then 'Yes' else concat(days, '\/', 5) end as Curious,\ncase when days >= 30 then 'Yes' else concat(days, '\/', 30) end as Inquisitive,\ncase when days >= 100 then 'Yes' else concat(days, '\/', 100) end as Socratic,\ndays\nfrom (SELECT count(*) as days\nfrom (SELECT\n  CONVERT(VARCHAR(10), creationDate, 111) as creationDay,\n  sum(case when score > 0 then 1 else 0 end) as up,\n  sum(case when score < 1 then 1 else 0 end) as down\nfrom Posts\nwhere OwnerUserId = ##UserId##\nand PostTypeId = 1\ngroup by CONVERT(VARCHAR(10), creationDate, 111) \n) x\nwhere up > 0 and down = 0\n) y"
    },
    {
        "QuerySetId": 775643,
        "Title": "Show post to Socratic badge",
        "Description": "shows all posts that are meet the Socratic badge requirements.\r\n",
        "QueryBody": "SELECT  Id, Id as [Post Link]\nFROM\n    Posts\nWHERE\n    OwnerUserId = ##UserId## and\n    PostTypeId = 1 and\n    Score > 0 and\n    DeletionDate is null and\n    ClosedDate is null\nORDER by Id DESC",
        "CreationDate": "2017-12-28 23:20:50",
        "validated": false,
        "QueryBody_Original": "SELECT  Id, Id as [Post Link]\nFROM\n    Posts\nWHERE\n    OwnerUserId = ##UserId## and\n    PostTypeId = 1 and\n    Score > 0 and\n    DeletionDate is null and\n    ClosedDate is null\nORDER by Id DESC"
    },
    {
        "QuerySetId": 776355,
        "Title": "Max reputation users of the same age as me",
        "Description": null,
        "QueryBody": "DECLARE  @UserID int = ##UserID##\n\nSELECT\n    DisplayName AS Name,\n    Id as [User ID],\n    Reputation\nFROM Users\nWHERE Age = (SELECT Age FROM Users WHERE Id = @UserID)\nORDER BY Reputation DESC",
        "CreationDate": "2017-12-31 17:22:53",
        "validated": false,
        "QueryBody_Original": "DECLARE  @UserID int = ##UserID##\n\nSELECT\n    DisplayName AS Name,\n    Id as [User ID],\n    Reputation\nFROM Users\nWHERE Age = (SELECT Age FROM Users WHERE Id = @UserID)\nORDER BY Reputation DESC"
    },
    {
        "QuerySetId": 776710,
        "Title": "Questions with\/without a specific tag at starting revision versus now, tabulated as qty by month",
        "Description": null,
        "QueryBody": "SELECT  Count(Posts.Id) as [Count],\n  CONCAT(YEAR(Posts.CreationDate), ' - ', MONTH(Posts.CreationDate)) as [Year - Month]\nfrom Posts\ninner join (\n  SELECT PostId, Text\n  from PostHistory\n  where PostHistoryTypeId = 3\n  and Text like '%##Tag##%'\n) as PostInits on Posts.Id = PostInits.PostId\nwhere Posts.Tags not like '%##Tag##%'\nand (DATEDIFF(month, Posts.CreationDate, GETDATE()) <= ##MaxQuestionAgeInMonths:int?24##)\nand (DATEDIFF(month, Posts.CreationDate, GETDATE()) >= ##MinQuestionAgeInMonths:int?0##)\ngroup by YEAR(Posts.CreationDate), MONTH(Posts.CreationDate)\norder by YEAR(Posts.CreationDate) desc, MONTH(Posts.CreationDate) desc",
        "CreationDate": "2018-01-02 15:18:39",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 776755,
        "Title": "Score per 100 bytes graph",
        "Description": null,
        "QueryBody": "DECLARE  @UserId int = ##UserId##\n\nSELECT\n  Len(Body) as 'Bytes',\n  100.0 * sum(Score) \/ (Len(Body) * Count(*)) as 'Score per 100 Bytes'\nFROM \n  Posts\nWHERE \n  OwnerUserId = @UserId and PostTypeId = 2 and Score > 0\nGROUP BY\n  Len(Body)",
        "CreationDate": "2018-01-02 17:00:07",
        "validated": false,
        "QueryBody_Original": "DECLARE  @UserId int = ##UserId##\n\nSELECT\n  Len(Body) as 'Bytes',\n  100.0 * sum(Score) \/ (Len(Body) * Count(*)) as 'Score per 100 Bytes'\nFROM \n  Posts\nWHERE \n  OwnerUserId = @UserId and PostTypeId = 2 and Score > 0\nGROUP BY\n  Len(Body)"
    },
    {
        "QuerySetId": 776913,
        "Title": "Questions with specific tag above question\/answer score",
        "Description": null,
        "QueryBody": "DECLARE  @Pattern VARCHAR(35) = ##TagPattern:string?%identify-this-%##\nDECLARE @QuestionScore INT = ##QuestionScore:int?5##\nDECLARE @AnswerScore INT = ##AnswerScore:int?3##\nDECLARE @Accepted BIT = ##Accepted:int?0##\n\nSELECT Q.Id AS [Post Link], Q.Score AS [Score], Q.ViewCount AS [Views] FROM\n  Posts Q\nWHERE\n  Q.PostTypeId = 1 AND\n  Q.Tags LIKE @Pattern AND\n  Q.Score >= @QuestionScore AND\n  (@Accepted = 0 OR Q.AcceptedAnswerId IS NOT NULL) AND\n  EXISTS (SELECT * FROM Posts A WHERE \n    A.ParentId = Q.Id AND A.Score >= @AnswerScore)\nORDER BY Q.Score DESC",
        "CreationDate": "2018-01-23 05:59:39",
        "validated": false,
        "QueryBody_Original": "DECLARE  @Pattern VARCHAR(35) = ##TagPattern:string?%identify-this-%##\nDECLARE @QuestionScore INT = ##QuestionScore:int?5##\nDECLARE @AnswerScore INT = ##AnswerScore:int?3##\nDECLARE @Accepted BIT = ##Accepted:int?0##\n\nSELECT Q.Id AS [Post Link], Q.Score AS [Score], Q.ViewCount AS [Views] FROM\n  Posts Q\nWHERE\n  Q.PostTypeId = 1 AND\n  Q.Tags LIKE @Pattern AND\n  Q.Score >= @QuestionScore AND\n  (@Accepted = 0 OR Q.AcceptedAnswerId IS NOT NULL) AND\n  EXISTS (SELECT * FROM Posts A WHERE \n    A.ParentId = Q.Id AND A.Score >= @AnswerScore)\nORDER BY Q.Score DESC"
    },
    {
        "QuerySetId": 776922,
        "Title": " Questions with specific tag below question\/answer score",
        "Description": null,
        "QueryBody": "DECLARE  @Pattern VARCHAR(35) = ##TagPattern:string?%identify-this-%##\nDECLARE @QuestionScore INT = ##QuestionScore:int?5##\nDECLARE @AnswerScore INT = ##AnswerScore:int?3##\nDECLARE @Accepted BIT = ##Accepted:int?0##\n\nSELECT Q.Id FROM\n  Posts Q\nWHERE\n  Q.PostTypeId = 1 AND\n  Q.Tags LIKE @Pattern AND\n  (Q.Score < @QuestionScore OR\n  (@Accepted = 1 AND Q.AcceptedAnswerId IS NULL) OR\n  NOT EXISTS (SELECT * FROM Posts A WHERE \n    A.ParentId = Q.Id AND A.Score >= @AnswerScore))\n--ORDER BY Q.Score DESC",
        "CreationDate": "2018-02-07 19:20:06",
        "validated": false,
        "QueryBody_Original": "DECLARE  @Pattern VARCHAR(35) = ##TagPattern:string?%identify-this-%##\nDECLARE @QuestionScore INT = ##QuestionScore:int?5##\nDECLARE @AnswerScore INT = ##AnswerScore:int?3##\nDECLARE @Accepted BIT = ##Accepted:int?0##\n\nSELECT Q.Id FROM\n  Posts Q\nWHERE\n  Q.PostTypeId = 1 AND\n  Q.Tags LIKE @Pattern AND\n  (Q.Score < @QuestionScore OR\n  (@Accepted = 1 AND Q.AcceptedAnswerId IS NULL) OR\n  NOT EXISTS (SELECT * FROM Posts A WHERE \n    A.ParentId = Q.Id AND A.Score >= @AnswerScore))\n--ORDER BY Q.Score DESC"
    },
    {
        "QuerySetId": 778151,
        "Title": "Top users by average non-deleted answer score",
        "Description": "List of top users by average non-deleted and non-community wiki answer score.",
        "QueryBody": "SELECT  \n    TOP ##NumUsers##\n    Users.Id as [User Link],\n    Count(Posts.Id) AS Answers,\n    CAST(AVG(CAST(Score AS float)) as numeric(6,2)) AS [Average Answer Score]\nFROM\n    Posts\n  INNER JOIN\n    Users ON Users.Id = OwnerUserId\nWHERE \n    PostTypeId = 2 and CommunityOwnedDate is null and ClosedDate is null\nGROUP BY\n    Users.Id, DisplayName\nHAVING\n    Count(Posts.Id) > ##MinAnswers##\nORDER BY\n    [Average Answer Score] DESC",
        "CreationDate": "2018-01-05 14:24:31",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 778206,
        "Title": "Those times you were stupid and you asked twice on the same day",
        "Description": "... so they don't count for the Asking Days badges curious\/inquisitive\/socratic.",
        "QueryBody": "SELECT \n  questions.Id AS [Post Link],\n  cast(questions.CreationDate As Date) AS 'date',\n  initialQs.Id AS [Post Link]\nFROM Posts questions\nJOIN Posts initialQs \n  ON cast(initialQs.CreationDate As Date)=cast(questions.CreationDate As Date)\nWHERE questions.OwnerUserId = ##UserId##\n  AND questions.PostTypeId = 1 --questions\n  AND initialQs.OwnerUserId = ##UserId## AND initialQs.PostTypeId = 1\nGROUP BY questions.CreationDate,\n         questions.Id, initialQs.Id, \n         cast(initialQs.CreationDate As Date)\nHAVING questions.CreationDate > MIN(initialQs.CreationDate)\nORDER BY questions.CreationDate DESC",
        "CreationDate": "2018-01-05 18:40:12",
        "validated": false,
        "QueryBody_Original": "SELECT \n  questions.Id AS [Post Link],\n  cast(questions.CreationDate As Date) AS 'date',\n  initialQs.Id AS [Post Link]\nFROM Posts questions\nJOIN Posts initialQs \n  ON cast(initialQs.CreationDate As Date)=cast(questions.CreationDate As Date)\nWHERE questions.OwnerUserId = ##UserId##\n  AND questions.PostTypeId = 1 --questions\n  AND initialQs.OwnerUserId = ##UserId## AND initialQs.PostTypeId = 1\nGROUP BY questions.CreationDate,\n         questions.Id, initialQs.Id, \n         cast(initialQs.CreationDate As Date)\nHAVING questions.CreationDate > MIN(initialQs.CreationDate)\nORDER BY questions.CreationDate DESC"
    },
    {
        "QuerySetId": 778982,
        "Title": "Find unsanswerd posts from people with certain rep",
        "Description": null,
        "QueryBody": "DECLARE  @tag_id int = (select Id from Tags where TagName = '##TagName##');\n\nSELECT TOP ##Limit##\n    Posts.Id AS [Post Link], Body, Score, Tags, Reputation,\n    PostLinks.RelatedPostId AS [Post Link]\nFROM\n    Posts\nJOIN\n    PostTags ON Posts.Id = PostTags.PostId\nJOIN\n    Users ON Posts.OwnerUserId = Users.Id\nLEFT JOIN\n    PostLinks ON Posts.Id = PostLinks.PostId\nWHERE PostTags.TagId = @tag_id\n  AND AnswerCount = 0\n  AND PostLinks.PostId IS NULL\nORDER BY Score DESC",
        "CreationDate": "2018-01-07 20:02:24",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 779947,
        "Title": "upvotes vs downvotes by user",
        "Description": null,
        "QueryBody": "SELECT \nid as [User Link],\nround(cast(upvotes as float)\/(upvotes+downvotes),2) as upFrac,\nround(cast(downvotes as float)\/(upvotes+downvotes),2) as downFrac,\nupvotes+downvotes as numVotes,\nreputation\nfrom Users\nwhere upvotes+downvotes>##minVotes?25##\norder by numVotes desc",
        "CreationDate": "2018-01-09 02:59:26",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 780421,
        "Title": "Percentage of users with at least 10k rep",
        "Description": null,
        "QueryBody": "SELECT  COUNT(Id) FROM Users WHERE Reputation >= 10000)\nUNION\n(SELECT COUNT(Id) FROM Users WHERE Reputation < 10000)",
        "CreationDate": "2018-01-09 23:38:05",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 781617,
        "Title": "Site's questions per hour of the day",
        "Description": "Questions grouped per hour of the day, posted less than X Days ago; also graphed",
        "QueryBody": "SELECT \n  CAST(STR(datepart(hour,p.creationdate)) AS int) as Hour,\n  COUNT(datepart(hour,p.creationdate)) AS '# of questions'\nFROM Posts AS p\nWHERE p.PostTypeId = 1 -- Question\n-- and p.creationdate less than X weeks\nAND DATEDIFF(DAY, p.CreationDate, GETDATE()) < ##Days:int?7##\nGROUP BY datepart(hour, p.creationdate)",
        "CreationDate": "2018-01-12 06:07:21",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 784516,
        "Title": "oracle versions combined with list aggregation",
        "Description": "dba.stackexchange: oracle versions combined with list aggregation",
        "QueryBody": "SELECT  max(id), min(id), count(*), members\nfrom (\nSELECT p1.id , STUFF(( SELECT  ','+ t2.tagname FROM \nposts p2 join posttags pt2 on (p2.id=pt2.postid)\njoin tags t2  on (pt2.tagid=t2.id and t2.tagname in \n('oracle','oracle-12c','oracle-11g-r2',\n'oracle-11g','oracle-10g-r2','oracle-10g',\n'oracle-9i','oracle-8i')) \nWHERE p1.id = p2.id \ngroup by t2.tagname\norder by t2.tagname\nFOR XML PATH('')),1 ,1, '')  Members\nFROM  posts p1 join posttags pt1 on (p1.id=pt1.postid)\njoin tags t1  on (pt1.tagid=t1.id and t1.tagname in \n('oracle','oracle-12c','oracle-11g-r2',\n'oracle-11g','oracle-10g-r2','oracle-10g',\n'oracle-9i','oracle-8i')) \nGROUP BY p1.id\n) as aggr\ngroup by members",
        "CreationDate": "2018-01-18 03:55:33",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 785284,
        "Title": "Get all posts that were posted by a user and edited by another",
        "Description": null,
        "QueryBody": "DECLARE  @UserId INT = ##UserId##\n\nSELECT \n  Posts.Id AS [Post Link],\n  Posts.CreationDate AS [Post Date],\n  PostHistory.CreationDate AS [Edit Date],\n  PostHistoryTypes.Name AS [Edit Type]\nFROM Posts\nJOIN PostHistory\n  ON Posts.Id = PostHistory.PostId\nJOIN PostHistoryTypes \n  ON PostHistory.PostHistoryTypeId = PostHistoryTypes.Id\nWHERE OwnerUserId = @UserId\nAND PostHistory.UserId <> @UserId\nORDER BY Posts.CreationDate DESC",
        "CreationDate": "2018-01-18 18:54:19",
        "validated": false,
        "QueryBody_Original": "DECLARE  @UserId INT = ##UserId##\n\nSELECT \n  Posts.Id AS [Post Link],\n  Posts.CreationDate AS [Post Date],\n  PostHistory.CreationDate AS [Edit Date],\n  PostHistoryTypes.Name AS [Edit Type]\nFROM Posts\nJOIN PostHistory\n  ON Posts.Id = PostHistory.PostId\nJOIN PostHistoryTypes \n  ON PostHistory.PostHistoryTypeId = PostHistoryTypes.Id\nWHERE OwnerUserId = @UserId\nAND PostHistory.UserId <> @UserId\nORDER BY Posts.CreationDate DESC"
    },
    {
        "QuerySetId": 786455,
        "Title": "All posts by user ID",
        "Description": null,
        "QueryBody": "SELECT \n  Post.Id as [Post Link],\n  Type.Name as [Type],\n  Post.Score as [Score],\n  Post.CreationDate as [CreationDate],\n  coalesce(Post.Tags, Parent.Tags) as [Tags]\nfrom Posts as Post\n  left join PostTypes as Type on Type.Id = Post.PostTypeId\n  left join Posts as Parent on Parent.Id = Post.ParentId\nwhere Post.OwnerUserId = ##UserID:int##\norder by Post.Id ASC",
        "CreationDate": "2018-01-19 17:33:25",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 787544,
        "Title": "Find all images by user 2284240",
        "Description": null,
        "QueryBody": "DECLARE  @UserId int = ##UserId##;\n\nselect Id as [Post Link], * from posts where owneruserid=2284240 and body like '%i.stack.imgur.com%';",
        "CreationDate": "2018-01-20 16:35:39",
        "validated": false,
        "QueryBody_Original": "DECLARE  @UserId int = ##UserId##;\n\nselect Id as [Post Link], * from posts where owneruserid=2284240 and body like '%i.stack.imgur.com%';"
    },
    {
        "QuerySetId": 787550,
        "Title": "Find all images by user",
        "Description": null,
        "QueryBody": "DECLARE  @UserId int = 856152;\n\nselect Id as [Post Link], * from posts where owneruserid=2284240 and body like '%i.stack.imgur.com%';",
        "CreationDate": "2018-01-22 19:26:53",
        "validated": false,
        "QueryBody_Original": "DECLARE  @UserId int = 856152;\n\nselect Id as [Post Link], * from posts where owneruserid=2284240 and body like '%i.stack.imgur.com%';"
    },
    {
        "QuerySetId": 789338,
        "Title": "Which of my questions did Jon Skeet answer?",
        "Description": null,
        "QueryBody": "DECLARE  @UserId int = ##UserId##;\n\nDECLARE @jonSkeetUserId INT = 22656\n\nselect \n Questions.Title Question,\n'https:\/\/stackoverflow.com\/a\/' + cast(Answers.Id as nvarchar) Url\nfrom Posts Questions \njoin Posts Answers \n  on Answers.PostTypeId=2 AND Answers.ParentId = Questions.Id\nwhere Questions.OwnerUserId=@UserId and Questions.PostTypeId=1\nand Answers.OwnerUserId=@jonSkeetUserId",
        "CreationDate": "2018-01-22 23:27:33",
        "validated": false,
        "QueryBody_Original": "DECLARE  @UserId int = ##UserId##;\n\nDECLARE @jonSkeetUserId INT = 22656\n\nselect \n Questions.Title Question,\n'https:\/\/stackoverflow.com\/a\/' + cast(Answers.Id as nvarchar) Url\nfrom Posts Questions \njoin Posts Answers \n  on Answers.PostTypeId=2 AND Answers.ParentId = Questions.Id\nwhere Questions.OwnerUserId=@UserId and Questions.PostTypeId=1\nand Answers.OwnerUserId=@jonSkeetUserId"
    },
    {
        "QuerySetId": 789587,
        "Title": "So do you have your answer on SO",
        "Description": null,
        "QueryBody": "SELECT  TOP 100\n       row_number() OVER (ORDER BY c.CreationDate DESC) AS [Nr]\n     , p.Id AS [Post Link]\n     , c.Text\n     , c.CreationDate AS comment_date\n     , c.Score AS comment_score\n     , 'site:\/\/questions\/' + CAST(p.Id AS nvarchar) + '#' + CAST(p.AcceptedAnswerId AS nvarchar) AS [Accepted Answer]\nFROM   Comments AS c\nJOIN   Posts As p ON p.Id = c.PostId\nWHERE  c.Text LIKE '%' + ##SearchQuery:string?o you have%answer## + '%'\nAND    c.UserId = ##UserId:int?939860##  -- My SO userID as default\nORDER  BY c.CreationDate DESC;",
        "CreationDate": "2020-08-26 03:48:01",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 789876,
        "Title": "Highest scoring questions and answer by tag",
        "Description": null,
        "QueryBody": "SELECT  TagName,\n  QuestionID AS [Post Link], q_.OwnerUserId AS [User Link], q_.Score AS [Q score],\n  AnswerID AS [Post Link], a_.OwnerUserId AS [User Link], a_.Score AS [A score]\nFROM\n(SELECT TagName,\n  (SELECT TOP 1 q.Id\n     FROM Posts AS q INNER JOIN PostTags AS qt ON q.Id = qt.PostId\n     WHERE qt.TagId = t.Id ORDER BY q.Score DESC) AS QuestionID,\n  (SELECT TOP 1 a.Id\n     FROM Posts AS a INNER JOIN PostTags AS at ON a.ParentId = at.PostId\n     WHERE at.TagId = t.Id ORDER BY a.Score DESC) AS AnswerID\n  FROM Tags AS t\n  WHERE t.TagName = ##TagName:string##) AS temp\n  INNER JOIN Posts AS q_ ON temp.QuestionId = q_.Id\n  LEFT OUTER JOIN Posts AS a_ ON temp.AnswerId = a_.Id",
        "CreationDate": "2018-01-23 16:27:46",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 790205,
        "Title": "number of users having more reputation than me",
        "Description": null,
        "QueryBody": "DECLARE  @userid int = ##UserId##\n\nselect count(*) \nfrom Users\nwhere Reputation >= (select Reputation from Users where Id = @userid)",
        "CreationDate": "2018-01-24 22:30:36",
        "validated": false,
        "QueryBody_Original": "DECLARE  @userid int = ##UserId##\n\nselect count(*) \nfrom Users\nwhere Reputation >= (select Reputation from Users where Id = @userid)"
    },
    {
        "QuerySetId": 792711,
        "Title": "Top SO users by tech stack (tags score) and location",
        "Description": null,
        "QueryBody": "SELECT  \n  row_number() over (order by sum(a.score) desc) as [#],\n  u.id as [User Link],\n  sum(a.score) as Score\nfrom\n  users u\n  join posts a on a.ownerUserId = u.id and a.postTypeId = 2 and a.score > 0\n  join posts q on q.id = a.parentId\n  join postTags pt on pt.postId = q.id\n  join tags t on t.id = pt.tagId and (\n    t.tagName in (SELECT value from string_split(lower(replace(##Tags:string? ##, ' ', '')), ','))\n    or (##TagMask## <> ' ' and t.tagName like '%' + lower(replace(##TagMask:string? ##, ' ', '')) + '%')\n  )  \nwhere\n  lower(u.location) like '%' + lower(##Location:string##) + '%' \n  and u.reputation > 1000  \n group by\n  u.id\n\n-- Tags:Tags (comma separated):\n-- TagMask:Tag mask (live blank if none):\n-- Location: User location mask:",
        "CreationDate": "2018-01-28 20:07:22",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 793086,
        "Title": "top earners of a single badge",
        "Description": null,
        "QueryBody": "SELECT  userid as [User Link],count(id) as num\nfrom badges\nwhere name = ##badgeName:string##\ngroup by userid\nhaving count(id) > 1\norder by count(id) desc",
        "CreationDate": "2018-01-28 23:14:25",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 793619,
        "Title": "Comments for user by tag",
        "Description": null,
        "QueryBody": "SELECT  parent.score, postid as [Post Link], comments.creationdate, comments.text, parent.tags from comments\njoin posts parent on (comments.postid = parent.id)\nwhere userid = ##userid## and parent.tags like '%##tagname##%'\norder by parent.score desc, creationdate desc",
        "CreationDate": "2018-01-29 16:16:46",
        "validated": false,
        "QueryBody_Original": "SELECT  parent.score, postid as [Post Link], comments.creationdate, comments.text, parent.tags from comments\njoin posts parent on (comments.postid = parent.id)\nwhere userid = ##userid## and parent.tags like '%##tagname##%'\norder by parent.score desc, creationdate desc"
    },
    {
        "QuerySetId": 793917,
        "Title": "Is there a way to find users with a certain set of badges?",
        "Description": "https:\/\/meta.stackoverflow.com\/questions\/362661",
        "QueryBody": "DECLARE  @pivotcols nvarchar(max) =N'[Count],[Ratio]'\n\nselect @pivotcols = @pivotcols + ',[' +  name + ']'\nfrom (\n  select row_number() over (order by count(*) desc) as rank\n       , name\n  from badges\n  where tagbased = 0\n  group by name\n) as data\norder by rank desc\nprint @pivotcols\n*\/",
        "CreationDate": "2018-01-30 02:26:02",
        "validated": false,
        "QueryBody_Original": "DECLARE  @pivotcols nvarchar(max) =N'[Count],[Ratio]'\n\nselect @pivotcols = @pivotcols + ',[' +  name + ']'\nfrom (\n  select row_number() over (order by count(*) desc) as rank\n       , name\n  from badges\n  where tagbased = 0\n  group by name\n) as data\norder by rank desc\nprint @pivotcols\n*\/"
    },
    {
        "QuerySetId": 794609,
        "Title": "Answers of a user ordered by reaction time",
        "Description": null,
        "QueryBody": "WITH  Raw AS (\n  SELECT\n    A.Id,\n    DATEDIFF(ss, Q.CreationDate, A.CreationDate) AS Seconds\n  FROM Posts Q, Posts A\n  WHERE\n    A.ParentId = Q.Id\n    AND\n    A.OwnerUserId = ##AccountId:int##\n)\nSELECT\n  RANK() OVER (ORDER BY Seconds, Id) AS TimeRank,\n  Id AS [Post Link],\n  Seconds\nFROM Raw\nORDER BY TimeRank",
        "CreationDate": "2018-01-31 01:31:43",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 795317,
        "Title": "Is there a way to find users with a certain set of badges? (take 2)",
        "Description": "https:\/\/meta.stackoverflow.com\/questions\/362661\/is-there-a-way-to-find-users-with-a-certain-set-of-badges",
        "QueryBody": "SELECT  Id, DisplayName, Reputation\n from Users\n where Id IN\n (\n SELECT b.UserId\n FROM Badges b\n WHERE b.Name IN ('Steward')\n and tagbased = 0\n GROUP BY b.UserId\n HAVING COUNT(*) = 7\n )\norder by DisplayName asc\n\nSELECT Id\n     , DisplayName\n     , Reputation\nfrom Users u\ninner join (\n SELECT b.UserId\n FROM Badges b\n WHERE b.Name IN ('Steward')\n and tagbased = 0\n GROUP BY b.UserId\n HAVING COUNT(*) = 7\n ) b1 on b1.userid = u.id\ninner join (\n SELECT b.UserId\n FROM Badges b\n WHERE b.Name IN ('Unsung Hero')\n and tagbased = 0\n GROUP BY b.UserId\n HAVING COUNT(*) = 1\n) b2 on b2.userid = u.id\n \norder by DisplayName asc",
        "CreationDate": "2018-02-01 00:12:11",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 796816,
        "Title": "Most Upvoted Machine Learning Questions",
        "Description": "The top 20 Machine learning questions with specified number of up-votes (ignores down-votes)\r\n",
        "QueryBody": "WITH  the most up-votes (ignores down-votes)\n\nselect top ##count## count(v.postid) as 'Vote count', v.postid AS [Post Link]\n--,p.body, t.tagname\nfrom votes v \ninner join posts p on p.id=v.postid\ninner join posttags pt on pt.postid=p.id\ninner join tags t on pt.tagid=t.id and t.tagname like '%machine-learning%'\nwhere PostTypeId = 1 and VoteTypeId=2\ngroup by v.postid\n--,p.body,t.tagname\n--having count(v.postid) > ##upvotes##\norder by 'Vote count' desc",
        "CreationDate": "2018-02-09 12:24:21",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 796874,
        "Title": "Questions with most answers with no <h[1-6]>",
        "Description": null,
        "QueryBody": "DECLARE  @target INT;\n\n\nSELECT TOP 1\n  @target =Question.Id\nfrom Posts as Answer\nINNER JOIN Posts as Question on Question.Id = Answer.ParentId\nWHERE Question.Tags like '%<code-golf>%'\n  and Question.Tags not like '%<tips>%'\n  and Answer.Body not like '<h[1-6]>%'\nGROUP BY Question.ID\nORDER BY count(*) DESC\n\nSELECT \n  Id  as [Post Link],\n  *\nfrom Posts \nwhere \n  ParentId = @target\n  and Body not like '<h[1-6]>%'",
        "CreationDate": "2018-03-03 16:46:23",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 797078,
        "Title": "Find Users in Your City",
        "Description": null,
        "QueryBody": "WITH  user-links)\n-- A simply query to find users in your city or country. Added user links.\n\nselect Id [User Link], Reputation, DisplayName, Location\nfrom Users\nwhere Location like '%##Location##%'\norder by Reputation desc",
        "CreationDate": "2018-02-05 03:56:00",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 797605,
        "Title": "Questions protected\/unprotected by specified user",
        "Description": null,
        "QueryBody": "SELECT  PostId AS [Post Link], t.Name, po.creationdate\n  FROM PostHistory AS p\n  INNER JOIN PostHistoryTypes AS t ON p.PostHistoryTypeId = t.Id\n  inner join posts po on p.postid = po.id\n  WHERE PostHistoryTypeId IN (19, 20) -- Question Protected, Question Unprotected\n    AND UserId = ##UserId:int##",
        "CreationDate": "2020-07-09 19:36:50",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 797646,
        "Title": "Location search - By tech",
        "Description": null,
        "QueryBody": "WITH  user-links)\n-- A simply query to find users in your city or country. Added user links.\n\nselect Id [User Link], Reputation, DisplayName, Location\nfrom Users\nwhere Location like '%##Location##%'\norder by Reputation desc",
        "CreationDate": "2018-03-22 21:48:49",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 801198,
        "Title": "Tag with no usage guidance, but it has a tag wiki, can you help us summarize it?",
        "Description": null,
        "QueryBody": "WITH out a wiki excerpt but WITH a tag wiki.\n*\/\nselect \nTagsWOWikiExcerpt.Id as TagId, TagsWOWikiExcerpt.Tagname,\nTagsWOWikiExcerpt.Count,\nTagsWOWikiExcerpt.ExcerptBody, Posts.Body as WikiBody,\nTagsWOWikiExcerpt.PosttypeId, \nTagsWOWikiExcerpt.CreationDate, TagsWOWikiExcerpt.DeletionDate, \nTagsWOWikiExcerpt.LastEditDate, TagsWOWikiExcerpt.LastActivityDate\nfrom \n(\nselect Tags.*,\nPosts.Body as ExcerptBody, Posts.PosttypeId, \nPosts.CreationDate, Posts.DeletionDate, Posts.LastEditDate, \nPosts.LastActivityDate\nfrom Tags join Posts on Tags.ExcerptPostId=Posts.Id\nwhere len(Posts.Body)=0\n) TagsWOWikiExcerpt\njoin Posts on TagsWOWikiExcerpt.WikiPostId=Posts.Id\nwhere len(Posts.Body)>0\norder by TagsWOWikiExcerpt.Count DESC",
        "CreationDate": "2018-02-10 17:04:56",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 803254,
        "Title": "Average number of answers per *answered* question, time limited",
        "Description": null,
        "QueryBody": "SELECT  ROUND(AVG(CAST(Answers AS FLOAT)), 2) FROM (\nSELECT q.Id, COUNT(*) AS [Answers]\n  FROM Posts AS q\n  INNER JOIN Posts AS a ON a.ParentId = q.Id\n  WHERE a.CreationDate BETWEEN ##AnswerDateFrom:string?2000-01-01##\n                           AND ##AnswerDateTill:string?2999-12-31##\n    AND q.CreationDate BETWEEN ##QuestionDateFrom:string##\n                           AND ##QuestionDateTill:string##\n  GROUP BY q.Id\n  ) AS temp",
        "CreationDate": "2018-02-13 13:11:05",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 803264,
        "Title": " Average number of answers per question, time limited",
        "Description": null,
        "QueryBody": "SELECT  ROUND(AVG(CAST(Answers AS FLOAT)), 2) FROM (\nSELECT q.Id, COUNT(a.Id) AS [Answers]\n  FROM Posts AS q\n  LEFT OUTER JOIN Posts AS a ON a.ParentId = q.Id\n  WHERE a.CreationDate BETWEEN ##AnswerDateFrom:string?2000-01-01##\n                           AND ##AnswerDateTill:string?2999-12-31##\n    AND q.CreationDate BETWEEN ##QuestionDateFrom:string##\n                           AND ##QuestionDateTill:string##\n    AND q.PostTypeId = 1\n  GROUP BY q.Id\n  ) AS temp",
        "CreationDate": "2018-02-13 13:19:39",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 804525,
        "Title": "How many posts with 'python' tag have no accepted answer",
        "Description": null,
        "QueryBody": "WITH  'python' tag have no accepted answer\n\nSELECT Count(*)\nFROM Posts\nWhere Tags LIKE '%python%' AND AcceptedAnswerId IS NULL",
        "CreationDate": "2018-02-14 01:21:31",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 804963,
        "Title": "People helped - By user and date range",
        "Description": null,
        "QueryBody": "SELECT  count(a.ParentId) as AnswerCount, sum(q.ViewCount) \n                        From Posts a\n                        Join Posts q On a.ParentId = q.Id\n                       Where a.PostTypeId = 2\n                         And a.CreationDate >= '##StartDate##'\n                         And a.CreationDate <= '##EndDate##'\n                         AND a.DeletionDate is NULL\n                         And a.OwnerUserId = ##UserId##",
        "CreationDate": "2018-02-19 22:52:40",
        "validated": false,
        "QueryBody_Original": "SELECT  count(a.ParentId) as AnswerCount, sum(q.ViewCount) \n                        From Posts a\n                        Join Posts q On a.ParentId = q.Id\n                       Where a.PostTypeId = 2\n                         And a.CreationDate >= '##StartDate##'\n                         And a.CreationDate <= '##EndDate##'\n                         AND a.DeletionDate is NULL\n                         And a.OwnerUserId = ##UserId##"
    },
    {
        "QuerySetId": 805131,
        "Title": "Check number of questions related to a meta question",
        "Description": null,
        "QueryBody": "SELECT  count(*)\nfrom Posts as post\nINNER JOIN PostTags as pt\n  ON pt.PostId = post.Id  \nINNER JOIN Tags as tag\n  ON tag.Id = pt.TagId\nwhere PostTypeId = 1\nand tag.Tagname = 'kdb'\n\n--Number Of Questions having [q-lang] tags.\nSELECT count(*)\nfrom Posts as post\nINNER JOIN PostTags as pt\n  ON pt.PostId = post.Id  \nINNER JOIN Tags as tag\n  ON tag.Id = pt.TagId\nwhere PostTypeId = 1\nand tag.Tagname = 'q-lang'\n\nSELECT distinct count(*)\nfrom Posts as post\ninner join PostTags as pt\n  on pt.PostId = post.Id\ninner join Tags as tag\n  on tag.Id = pt.TagId\ninner join TagSynonyms as ts\n  on tag.TagName = ts.TargetTagName and ts.SourceTagName = 'q-lang'\nwhere PostTypeId = 1\nand tag.Tagname = 'kdb' or tag.TagName = ts.SourceTagName",
        "CreationDate": "2018-02-15 14:35:57",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 805779,
        "Title": "Find PTIJ references in regular comments",
        "Description": null,
        "QueryBody": "SELECT   c.text as 'Comment Text', u.displayname as Username, ps.title 'Post Title', c.postid as postID\n\nfrom Comments as c join PostTags as pt on c.PostId = pt.PostId\n                   join Posts    as ps on ps.id    = pt.PostId\n                   join Users    as u  on u.id     = c.userid \n\nwhere     pt.TagId != 635\n\n      AND lower(c.text) LIKE '%purim torah%'\n      OR  lower(c.text) LIKE '%ptij%'        \n\n\ngroup by ps.title, c.postid, u.displayname, c.text\n\norder by u.displayname",
        "CreationDate": "2018-02-16 06:57:29",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 806490,
        "Title": "Top users per country with max count",
        "Description": null,
        "QueryBody": "SELECT  TOP ##MaxCount##\n    ROW_NUMBER() OVER(ORDER BY Reputation DESC) AS [#], \n    Id AS [User Link], \n    Reputation\nFROM\n    Users\nWHERE\n    LOWER(Location) LIKE LOWER('%##Country##%')\nORDER BY\n    Reputation DESC;",
        "CreationDate": "2018-02-17 21:02:11",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 807155,
        "Title": "Who Answers My Questions? (Tutorial)",
        "Description": null,
        "QueryBody": "SELECT  a.Id AS [Post Link], a.Score, au.Id AS [User Link]\n\nFROM Posts p \nJOIN Posts a ON p.Id = a.ParentId\nJOIN Users au ON a.OwnerUserId = au.Id\n\nWHERE p.PostTypeId = 1 -- question\n  AND p.OwnerUserId = ##UserId##\n\nORDER BY a.Score DESC",
        "CreationDate": "2018-02-19 00:03:16",
        "validated": false,
        "QueryBody_Original": "SELECT  a.Id AS [Post Link], a.Score, au.Id AS [User Link]\n\nFROM Posts p \nJOIN Posts a ON p.Id = a.ParentId\nJOIN Users au ON a.OwnerUserId = au.Id\n\nWHERE p.PostTypeId = 1 -- question\n  AND p.OwnerUserId = ##UserId##\n\nORDER BY a.Score DESC"
    },
    {
        "QuerySetId": 807538,
        "Title": "Find Mathematics Users In Your City (with user-links)",
        "Description": null,
        "QueryBody": "WITH  user-links)\n-- A simply query to find users in your city or country. Added user links.\n\nselect Id [User Link], Reputation, DisplayName, Location\nfrom Users\nwhere Location like '%##Location##%'\norder by Reputation desc",
        "CreationDate": "2018-02-19 17:34:19",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 808999,
        "Title": "Find Age of a User",
        "Description": null,
        "QueryBody": "SELECT  Age From Users Where Id = ##UserId##",
        "CreationDate": "2018-02-21 20:41:35",
        "validated": false,
        "QueryBody_Original": "SELECT  Age From Users Where Id = ##UserId##"
    },
    {
        "QuerySetId": 809024,
        "Title": "Filter posts by high rep user",
        "Description": null,
        "QueryBody": "DECLARE  @RepFilter int = 50\n\nSELECT      ParentId as [Post Link], OwnerUserId\nFROM        Posts\nJOIN        Users ON Posts.OwnerUserId = Users.Id\nWHERE       Users.Reputation > @RepFilter and PostTypeId = 1",
        "CreationDate": "2018-05-17 06:00:25",
        "validated": false,
        "QueryBody_Original": "DECLARE  @RepFilter int = 50\n\nSELECT      ParentId as [Post Link], OwnerUserId\nFROM        Posts\nJOIN        Users ON Posts.OwnerUserId = Users.Id\nWHERE       Users.Reputation > @RepFilter and PostTypeId = 1"
    },
    {
        "QuerySetId": 809074,
        "Title": "Bad question days by month",
        "Description": null,
        "QueryBody": "SELECT \n    year_,\n    month_,\n    sum(case when down > 0 then 1 else 0 end) as bad_days\nfrom (\n  SELECT\n    YEAR(creationDate) as year_,\n    MONTH(creationDate) as month_,\n    max(case when score > 0 then 1 else 0 end) as up,\n    max(case when score < 1 then 1 else 0 end) as down\n  from Posts\n  where OwnerUserId = ##UserId## and PostTypeId = 1 -- a question\n  group by creationDate\n) question_days group by year_, month_ order by year_ asc, month_ asc;",
        "CreationDate": "2018-03-01 04:24:34",
        "validated": false,
        "QueryBody_Original": "SELECT \n    year_,\n    month_,\n    sum(case when down > 0 then 1 else 0 end) as bad_days\nfrom (\n  SELECT\n    YEAR(creationDate) as year_,\n    MONTH(creationDate) as month_,\n    max(case when score > 0 then 1 else 0 end) as up,\n    max(case when score < 1 then 1 else 0 end) as down\n  from Posts\n  where OwnerUserId = ##UserId## and PostTypeId = 1 -- a question\n  group by creationDate\n) question_days group by year_, month_ order by year_ asc, month_ asc;"
    },
    {
        "QuerySetId": 810166,
        "Title": "Search for comments by user and phrase",
        "Description": null,
        "QueryBody": "SELECT  c.Id AS [Comment Link]\n  , c.UserId AS [User Link]\n  , c.CreationDate AS [Date]\nFROM Comments AS c\nWHERE (##userId:int?0## = 0 OR userID=##userId:int##)\n  AND Text LIKE '%##Phrase##%' COLLATE Latin1_General_100_CI_AI_SC\nORDER BY c.CreationDate DESC",
        "CreationDate": "2018-08-13 08:05:37",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 810461,
        "Title": "Find all users above given reputation",
        "Description": null,
        "QueryBody": "SELECT \n  Id AS [User Link], Reputation, CreationDate, DisplayName, LastAccessDate\nFROM Users   \nWHERE (Reputation > ##rep##) and (DisplayName LIKE '%user%')\nORDER BY Reputation",
        "CreationDate": "2018-02-25 13:36:17",
        "validated": false,
        "QueryBody_Original": "SELECT \n  Id AS [User Link], Reputation, CreationDate, DisplayName, LastAccessDate\nFROM Users   \nWHERE (Reputation > ##rep##) and (DisplayName LIKE '%user%')\nORDER BY Reputation"
    },
    {
        "QuerySetId": 810463,
        "Title": "Find all users above given reputation with username user*",
        "Description": null,
        "QueryBody": "SELECT \n  Id AS [User Link], Reputation, CreationDate, DisplayName, LastAccessDate\nFROM Users   \nWHERE (Reputation > ##rep##) and (DisplayName LIKE '%user%')\nORDER BY Reputation DESC",
        "CreationDate": "2018-02-25 13:37:13",
        "validated": false,
        "QueryBody_Original": "SELECT \n  Id AS [User Link], Reputation, CreationDate, DisplayName, LastAccessDate\nFROM Users   \nWHERE (Reputation > ##rep##) and (DisplayName LIKE '%user%')\nORDER BY Reputation DESC"
    },
    {
        "QuerySetId": 810471,
        "Title": "All comments on your posts",
        "Description": null,
        "QueryBody": "SELECT  c.UserId as [User Link], c.Id as [Comment Link], c.CreationDate as [Comment Date], p.Id AS [Post Link], c.Text AS Comment \nFROM Posts p\nINNER JOIN Comments c\nON c.PostId=p.Id\nWHERE p.OwnerUserID=##UserId##\nORDER BY c.CreationDate DESC",
        "CreationDate": "2018-02-25 13:44:26",
        "validated": false,
        "QueryBody_Original": "SELECT  c.UserId as [User Link], c.Id as [Comment Link], c.CreationDate as [Comment Date], p.Id AS [Post Link], c.Text AS Comment \nFROM Posts p\nINNER JOIN Comments c\nON c.PostId=p.Id\nWHERE p.OwnerUserID=##UserId##\nORDER BY c.CreationDate DESC"
    },
    {
        "QuerySetId": 811034,
        "Title": "Probable tag creations for a specific user",
        "Description": null,
        "QueryBody": "SELECT  p.Id AS [Post Link], t.TagName\nFROM (\nSELECT pt.TagId, MIN(p.CreationDate) AS CreationDate\n  FROM PostTags AS pt\n  INNER JOIN Posts AS p ON p.Id = pt.PostId\n  GROUP BY pt.TagId\n  ) AS temp\nINNER JOIN PostTags AS pt ON pt.TagId = temp.TagId\nINNER JOIN Posts AS p ON p.Id = pt.PostId\n                     AND p.CreationDate = temp.CreationDate\nINNER JOIN Tags AS t ON temp.TagId = t.Id\nWHERE p.OwnerUserId = ##UserId:int##",
        "CreationDate": "2018-02-27 01:07:00",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 811219,
        "Title": "List of past bounties on a SE site",
        "Description": "https:\/\/meta.stackexchange.com\/questions\/307406\/list-of-past-bounties-on-a-se-site\/307426?noredirect=1#comment999884_307426",
        "QueryBody": "WITH  awarded as\n( \nselect v.postid\n     , v.bountyamount\n     , v.creationdate\n     , p.parentid questionid\n     , p.owneruserid \n     from votes v\n     inner join posts p on p.id = v.postid \n     where v.votetypeid = 9 -- award \n)\n\nselect top ##maxrows?100##\n'site:\/\/q\/' + cast(v.postid as nvarchar)+ '|' + q.title as [Question]\n     , v.bountyamount\n     , v.creationdate\n     , v.userid as [User Link]\n     , a.postid as [Post Link]\n     , a.bountyamount\n     , a.owneruserid as [User Link]\nfrom votes v\ninner join posts q on q.id = v.postid\nleft outer join awarded a \n  on v.postid = a.questionid \n and a.creationdate \n between v.creationdate \n and dateadd(d, 8, v.creationdate)\nwhere v.votetypeid = 8 -- bounty start\norder by v.creationdate desc",
        "CreationDate": "2018-02-28 11:43:36",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 811541,
        "Title": "Vote count of a users questions",
        "Description": null,
        "QueryBody": "DECLARE  @UserId int = ##UserId##\n\nSELECT TOP 100 \n\tPosts.Id AS [Post Link], \n\tCOUNT(upvotes.Id) AS UpVotes\nFROM Posts\n    LEFT JOIN Votes AS upvotes ON upvotes.PostId = Posts.Id\nWHERE Posts.OwnerUserId = @UserId\n    AND Posts.PostTypeId = 1\n\tAND upvotes.VoteTypeId = 2\nGROUP BY Posts.Id\nORDER BY UpVotes DESC",
        "CreationDate": "2018-02-27 21:54:44",
        "validated": false,
        "QueryBody_Original": "DECLARE  @UserId int = ##UserId##\n\nSELECT TOP 100 \n\tPosts.Id AS [Post Link], \n\tCOUNT(upvotes.Id) AS UpVotes\nFROM Posts\n    LEFT JOIN Votes AS upvotes ON upvotes.PostId = Posts.Id\nWHERE Posts.OwnerUserId = @UserId\n    AND Posts.PostTypeId = 1\n\tAND upvotes.VoteTypeId = 2\nGROUP BY Posts.Id\nORDER BY UpVotes DESC"
    },
    {
        "QuerySetId": 811641,
        "Title": "Posts with tags not in favorites",
        "Description": null,
        "QueryBody": "DECLARE  @TagName nvarchar(600)\nDECLARE @UserId int\n\nSELECT @TagName = ##TagName:string##\nSELECT @UserId = ##UserId##\n\nSELECT DISTINCT TOP 100\n  Posts.id as [Post Link],\n  Posts.CreationDate\nFROM Posts\nWHERE \n  Posts.PostTypeId  = 1\n  AND Posts.tags LIKE '%' + @TagName +'%' \n  AND Posts.Id NOT IN (\n    SELECT PostId \n    FROM Votes \n    WHERE Votes.UserId=@UserId AND Votes.VoteTypeId = 5\n  )\nORDER BY Posts.CreationDate DESC",
        "CreationDate": "2018-02-27 23:46:57",
        "validated": false,
        "QueryBody_Original": "DECLARE  @TagName nvarchar(600)\nDECLARE @UserId int\n\nSELECT @TagName = ##TagName:string##\nSELECT @UserId = ##UserId##\n\nSELECT DISTINCT TOP 100\n  Posts.id as [Post Link],\n  Posts.CreationDate\nFROM Posts\nWHERE \n  Posts.PostTypeId  = 1\n  AND Posts.tags LIKE '%' + @TagName +'%' \n  AND Posts.Id NOT IN (\n    SELECT PostId \n    FROM Votes \n    WHERE Votes.UserId=@UserId AND Votes.VoteTypeId = 5\n  )\nORDER BY Posts.CreationDate DESC"
    },
    {
        "QuerySetId": 813730,
        "Title": "What Version of R You Using?",
        "Description": null,
        "QueryBody": "DECLARE  @ptn varchar(20) = 'R version [0-9]';\n\nSELECT\n  t1.YearMonth,\n  RVersion, \n  COUNT(t1.RVersion) AS n\nFROM (\n  SELECT\n    DATEADD(MONTH, DATEDIFF(MONTH, 0, Posts.CreationDate), 0) AS YearMonth, \n    TRIM(' .,;:\/?<()anopx' FROM SUBSTRING(Posts.Body, PATINDEX('%' + @ptn + '%', Posts.Body) + 9, 7)) AS 'RVersion'\n  FROM \n    Posts\n  WHERE \n    Posts.Tags LIKE '%<r>%' AND \n    Posts.Body LIKE '%' + @ptn + '%') AS t1\nGROUP BY\n  t1.YearMonth, \n  t1.RVersion\nORDER BY \n  t1.YearMonth, \n  t1.RVersion;",
        "CreationDate": "2018-03-03 22:24:59",
        "validated": false,
        "QueryBody_Original": "DECLARE  @ptn varchar(20) = 'R version [0-9]';\n\nSELECT\n  t1.YearMonth,\n  RVersion, \n  COUNT(t1.RVersion) AS n\nFROM (\n  SELECT\n    DATEADD(MONTH, DATEDIFF(MONTH, 0, Posts.CreationDate), 0) AS YearMonth, \n    TRIM(' .,;:\/?<()anopx' FROM SUBSTRING(Posts.Body, PATINDEX('%' + @ptn + '%', Posts.Body) + 9, 7)) AS 'RVersion'\n  FROM \n    Posts\n  WHERE \n    Posts.Tags LIKE '%<r>%' AND \n    Posts.Body LIKE '%' + @ptn + '%') AS t1\nGROUP BY\n  t1.YearMonth, \n  t1.RVersion\nORDER BY \n  t1.YearMonth, \n  t1.RVersion;"
    },
    {
        "QuerySetId": 818478,
        "Title": "Revisions by user and keyword",
        "Description": null,
        "QueryBody": "SELECT  'site:\/\/posts\/' + CAST(h.PostId AS NVARCHAR) + '\/revisions',\n  h.Text\n  FROM PostHistory AS h\n  WHERE h.UserId = ##UserId:int##\n    AND h.PostHistoryTypeId = 5 -- Edit Body\n    AND h.Text LIKE '%[^a-z]' + ##Keyword:string## + '[^a-z]%' COLLATE SQL_Latin1_General_CP1_CI_AS",
        "CreationDate": "2019-02-02 16:06:58",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 824220,
        "Title": "Opportunities to improve the language in your answers",
        "Description": null,
        "QueryBody": "DECLARE  @UserId int = ##UserId##\n\nselect * from Posts\nwhere PostTypeId = 2 \nand ownerUserId = @UserId\nand (\nBody like '%simply%' or\nBody like '%simple%' or\nBody like '%basically%' or \nBody like '%easily%' or\nBody like '%obviously%' or\nBody like '%obvious%' or \nBody like '%of course%' or\nBody like '%everybody knows%' or\nBody like '%everyone knows%'\n)",
        "CreationDate": "2018-03-17 21:09:11",
        "validated": false,
        "QueryBody_Original": "DECLARE  @UserId int = ##UserId##\n\nselect * from Posts\nwhere PostTypeId = 2 \nand ownerUserId = @UserId\nand (\nBody like '%simply%' or\nBody like '%simple%' or\nBody like '%basically%' or \nBody like '%easily%' or\nBody like '%obviously%' or\nBody like '%obvious%' or \nBody like '%of course%' or\nBody like '%everybody knows%' or\nBody like '%everyone knows%'\n)"
    },
    {
        "QuerySetId": 825507,
        "Title": "Votes distribution of regular users who have cast votes",
        "Description": null,
        "QueryBody": "DECLARE  @Interval int = 20\nDECLARE @IsRemoveLeast bit = 'false'\n\nSELECT\n  VotesFloor,\n  COUNT(*) AS UserCount\nFROM\n  (SELECT\n     FLOOR((UpVotes + DownVotes) \/ @Interval) * @Interval AS VotesFloor\n   FROM\n     Users\n   WHERE\n     UpVotes + DownVotes > 0 AND ID > 0\n  ) AS Hist\nWHERE\n  @IsRemoveLeast != 1 OR (VotesFloor != 0)\nGROUP BY\n  VotesFloor\nORDER BY\n  VotesFloor DESC",
        "CreationDate": "2018-03-19 21:31:53",
        "validated": false,
        "QueryBody_Original": "DECLARE  @Interval int = 20\nDECLARE @IsRemoveLeast bit = 'false'\n\nSELECT\n  VotesFloor,\n  COUNT(*) AS UserCount\nFROM\n  (SELECT\n     FLOOR((UpVotes + DownVotes) \/ @Interval) * @Interval AS VotesFloor\n   FROM\n     Users\n   WHERE\n     UpVotes + DownVotes > 0 AND ID > 0\n  ) AS Hist\nWHERE\n  @IsRemoveLeast != 1 OR (VotesFloor != 0)\nGROUP BY\n  VotesFloor\nORDER BY\n  VotesFloor DESC"
    },
    {
        "QuerySetId": 826805,
        "Title": "Deleted question on which I casted close votes",
        "Description": null,
        "QueryBody": "DECLARE  @UserId int = ##UserId##\n\nselect *\nfrom Votes v\nwhere v.UserId = @UserId",
        "CreationDate": "2018-03-21 14:44:02",
        "validated": false,
        "QueryBody_Original": "DECLARE  @UserId int = ##UserId##\n\nselect *\nfrom Votes v\nwhere v.UserId = @UserId"
    },
    {
        "QuerySetId": 828108,
        "Title": "Answers by a user that have been merged to a different question",
        "Description": null,
        "QueryBody": "SELECT  p.Id AS [Post Link]\nFROM Posts p, PostHistory ph\nWHERE p.PostTypeId = 2                   -- is an answer\n      AND ph.PostId = p.Id\n      AND ph.PostHistoryTypeId IN (38)   -- has a merge destination\n      AND p.OwnerUserId = ##userId##\nORDER BY p.Id ASC",
        "CreationDate": "2018-03-22 18:49:03",
        "validated": false,
        "QueryBody_Original": "SELECT  p.Id AS [Post Link]\nFROM Posts p, PostHistory ph\nWHERE p.PostTypeId = 2                   -- is an answer\n      AND ph.PostId = p.Id\n      AND ph.PostHistoryTypeId IN (38)   -- has a merge destination\n      AND p.OwnerUserId = ##userId##\nORDER BY p.Id ASC"
    },
    {
        "QuerySetId": 828700,
        "Title": "How close am I to Pundit badge?",
        "Description": null,
        "QueryBody": "DECLARE  @UserId int = ##UserId##\n\nSELECT \n    PostId As [Post Link],\n    Count(*) AS CommentCount,\n    Score\nFROM \n    Comments\nWHERE \n    UserId = @UserId\n    AND Score >= 4\nGROUP BY \n    PostId, Score\nORDER BY \n    Score DESC",
        "CreationDate": "2018-03-22 16:31:26",
        "validated": false,
        "QueryBody_Original": "DECLARE  @UserId int = ##UserId##\n\nSELECT \n    PostId As [Post Link],\n    Count(*) AS CommentCount,\n    Score\nFROM \n    Comments\nWHERE \n    UserId = @UserId\n    AND Score >= 4\nGROUP BY \n    PostId, Score\nORDER BY \n    Score DESC"
    },
    {
        "QuerySetId": 829966,
        "Title": "Closed questions that need to be deleted",
        "Description": null,
        "QueryBody": "SELECT  CAST(DATEDIFF(DAY, ClosedDate, GETDATE()) as FLOAT) AS Days, Posts.title AS Title, 'https:\/\/stackoverflow.com\/q\/' + ltrim(Posts.id) AS url, Posts.Score AS Score FROM Posts WHERE CAST(DATEDIFF(DAY, ClosedDate, GETDATE()) as FLOAT) != 0 AND Posts.Score <= ##Score## ORDER BY -(CAST(DATEDIFF(DAY, ClosedDate, GETDATE()) as FLOAT))",
        "CreationDate": "2018-03-24 22:01:02",
        "validated": false,
        "QueryBody_Original": "SELECT  CAST(DATEDIFF(DAY, ClosedDate, GETDATE()) as FLOAT) AS Days, Posts.title AS Title, 'https:\/\/stackoverflow.com\/q\/' + ltrim(Posts.id) AS url, Posts.Score AS Score FROM Posts WHERE CAST(DATEDIFF(DAY, ClosedDate, GETDATE()) as FLOAT) != 0 AND Posts.Score <= ##Score## ORDER BY -(CAST(DATEDIFF(DAY, ClosedDate, GETDATE()) as FLOAT))"
    },
    {
        "QuerySetId": 830673,
        "Title": "Closed posts by day of week in which they were created",
        "Description": null,
        "QueryBody": "SELECT  *\nfrom Votes V\nwhere V.UserId = ##UserId##\n  --and V.VoteTypeId = 6\n\n\n\/*\nSELECT DatePart(dw, P.CreationDate), Count(P.Id)\nfrom Posts P\nwhere P.ClosedDate is not null\n    and P.CreationDate >= '2018-01-01'\ngroup by DatePart(dw, P.CreationDate)\n*\/",
        "CreationDate": "2018-03-27 01:50:29",
        "validated": false,
        "QueryBody_Original": "SELECT  *\nfrom Votes V\nwhere V.UserId = ##UserId##\n  --and V.VoteTypeId = 6\n\n\n\/*\nSELECT DatePart(dw, P.CreationDate), Count(P.Id)\nfrom Posts P\nwhere P.ClosedDate is not null\n    and P.CreationDate >= '2018-01-01'\ngroup by DatePart(dw, P.CreationDate)\n*\/"
    },
    {
        "QuerySetId": 832162,
        "Title": "Top N answerers for a given tag from Denmark",
        "Description": null,
        "QueryBody": "DECLARE  @tagName nvarchar(35) = '##tagName##'\n\nSELECT top (##Limit##)\n    TagName,\n    SUM(case votes.votetypeid \n            WHEN 2 THEN 1  -- upvote\n            WHEN 3 THEN -1  -- downvote\n            END) as Rep,\n    Users.Id as [User Link],\n    number = ROW_NUMBER() OVER (ORDER BY TagName)\nFROM Tags\n    INNER JOIN PostTags ON PostTags.TagId = Tags.id\n    INNER JOIN Posts ON Posts.ParentId = PostTags.PostId\n    INNER JOIN Users ON Posts.OwnerUserId = Users.Id                \n    INNER JOIN Votes ON Votes.PostId = Posts.Id\nWHERE Tags.TagName = @tagName\n    AND Posts.CommunityOwnedDate IS NULL\n    AND (Location LIKE '%Copenhagen%')\nGROUP BY TagName, Users.Id\nORDER BY Rep DESC",
        "CreationDate": "2018-04-10 10:36:32",
        "validated": false,
        "QueryBody_Original": "DECLARE  @tagName nvarchar(35) = '##tagName##'\n\nSELECT top (##Limit##)\n    TagName,\n    SUM(case votes.votetypeid \n            WHEN 2 THEN 1  -- upvote\n            WHEN 3 THEN -1  -- downvote\n            END) as Rep,\n    Users.Id as [User Link],\n    number = ROW_NUMBER() OVER (ORDER BY TagName)\nFROM Tags\n    INNER JOIN PostTags ON PostTags.TagId = Tags.id\n    INNER JOIN Posts ON Posts.ParentId = PostTags.PostId\n    INNER JOIN Users ON Posts.OwnerUserId = Users.Id                \n    INNER JOIN Votes ON Votes.PostId = Posts.Id\nWHERE Tags.TagName = @tagName\n    AND Posts.CommunityOwnedDate IS NULL\n    AND (Location LIKE '%Copenhagen%')\nGROUP BY TagName, Users.Id\nORDER BY Rep DESC"
    },
    {
        "QuerySetId": 832414,
        "Title": "Which community downvote most R or Python",
        "Description": null,
        "QueryBody": "DECLARE  @UserId int = 1987629\n\nSELECT --TOP 20 \n    TagName,\n    COUNT(*) AS DownVotes \nFROM Tags\n    INNER JOIN PostTags ON PostTags.TagId = Tags.id\n    INNER JOIN Posts ON Posts.ParentId = PostTags.PostId\n    INNER JOIN Votes ON Votes.PostId = Posts.Id and VoteTypeId = 2\nWHERE \n    Posts.OwnerUserId = @UserId\nGROUP BY TagName \nORDER BY DownVotes DESC",
        "CreationDate": "2018-03-28 22:49:39",
        "validated": false,
        "QueryBody_Original": "DECLARE  @UserId int = 1987629\n\nSELECT --TOP 20 \n    TagName,\n    COUNT(*) AS DownVotes \nFROM Tags\n    INNER JOIN PostTags ON PostTags.TagId = Tags.id\n    INNER JOIN Posts ON Posts.ParentId = PostTags.PostId\n    INNER JOIN Votes ON Votes.PostId = Posts.Id and VoteTypeId = 2\nWHERE \n    Posts.OwnerUserId = @UserId\nGROUP BY TagName \nORDER BY DownVotes DESC"
    },
    {
        "QuerySetId": 833059,
        "Title": "Posts by user 'Zeta' sorted by length",
        "Description": null,
        "QueryBody": "DECLARE  @userName VARCHAR(40) = 'Vogel612';\nDECLARE @userId INT = (SELECT Id FROM Users WHERE DisplayName = @userName);\nSELECT\n  Id AS [Post Link],\n  CreationDate,\n  LEN(Body) AS [Answer Length]\nFROM\n  Posts\nWHERE\n  OwnerUserId = @userId\n  --AND PostTypeId = 2 -- answer\nGROUP BY\n  Id,\n  PostTypeId,\n  CreationDate,\n  LEN(Body)\nORDER BY\n  [Answer Length] DESC",
        "CreationDate": "2018-03-30 13:11:22",
        "validated": false,
        "QueryBody_Original": "DECLARE  @userName VARCHAR(40) = 'Vogel612';\nDECLARE @userId INT = (SELECT Id FROM Users WHERE DisplayName = @userName);\nSELECT\n  Id AS [Post Link],\n  CreationDate,\n  LEN(Body) AS [Answer Length]\nFROM\n  Posts\nWHERE\n  OwnerUserId = @userId\n  --AND PostTypeId = 2 -- answer\nGROUP BY\n  Id,\n  PostTypeId,\n  CreationDate,\n  LEN(Body)\nORDER BY\n  [Answer Length] DESC"
    },
    {
        "QuerySetId": 833123,
        "Title": "How many questions did SO have X days after its creation?",
        "Description": "Note that the public beta started on September 15th, 2008",
        "QueryBody": "SELECT  COUNT(*) \nFROM Posts\nWHERE PostTypeId=1\nAND CreationDate < DATEADD(day, ##Days##, '2008-07-15')",
        "CreationDate": "2018-03-30 16:45:55",
        "validated": false,
        "QueryBody_Original": "SELECT  COUNT(*) \nFROM Posts\nWHERE PostTypeId=1\nAND CreationDate < DATEADD(day, ##Days##, '2008-07-15')"
    },
    {
        "QuerySetId": 834282,
        "Title": "Posts with pending close flags with multiple reasons",
        "Description": null,
        "QueryBody": "WITH  cnts as \n(\nselect postid \nfrom pendingflags\nwhere  closeReasonTypeId in (101,102,103,104,105)\ngroup by postid\nhaving count(*) > 2 -- could be 1 if you want more records\n  and min(closeReasonTypeId) <> max(closeReasonTypeId) -- what a hack!\n)\n\nselect postid as [Post Link]\n     , [101] as [duplicate]\n     , [102] as [off-topic]\n     , [103] as [Unclear]\n     , [104] as [Too broad]\n     , [105] as [Opinion based]\nfrom (\nselect pf.postid, id, closeReasonTypeId\nfrom pendingflags pf\ninner join cnts on cnts.postid = pf.postid\nwhere flagtypeid in (13,14)\n) as data\nPIVOT\n(\ncount(id)\nfor closeReasonTypeId in ([101],[102],[103],[104],[105])\n) as pvt",
        "CreationDate": "2018-04-03 23:55:16",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 835883,
        "Title": "What is the average age of the users in this database and how many of the users are actually this ag",
        "Description": null,
        "QueryBody": "DECLARE  @avg_age int = (select avg(Age) from Users)\n\nDECLARE @user_age int =(select count(*) from Users where Age =@avg_age) \n\nselect @avg_age as [Average Age], @user_age as [Number of users]",
        "CreationDate": "2018-04-09 00:50:10",
        "validated": false,
        "QueryBody_Original": "DECLARE  @avg_age int = (select avg(Age) from Users)\n\nDECLARE @user_age int =(select count(*) from Users where Age =@avg_age) \n\nselect @avg_age as [Average Age], @user_age as [Number of users]"
    },
    {
        "QuerySetId": 835920,
        "Title": "(EXAMPLE #1) Time to First Answer (no link to question)",
        "Description": null,
        "QueryBody": "SELECT  \n  q.id as [Question ID],\n  q.creationdate as [Question Date],\n  min(a.creationdate) as [1st Answer Date],\n  datediff(n,q.creationdate,min(a.creationdate)) as [Min to 1st Answer]\n\nfrom\n  posts q left outer join posts a\n  on q.id = a.parentid\n\nwhere \n  q.posttypeid = 1 \n  and (a.posttypeid = 2 or a.posttypeid is null)\n  and q.deletiondate is null and a.deletiondate is null\n  and q.closeddate is null and a.closeddate is null\n  and q.creationdate>=dateadd(d,-##daysBack:int?10##,getdate())\n\ngroup by\n  q.id,\n  q.creationdate\n\norder by\n  q.id\n\n\n-- daysBack: How many days back?! \"Include how many days before today?\"",
        "CreationDate": "2018-04-06 11:05:51",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 836069,
        "Title": "tag badges for a user",
        "Description": null,
        "QueryBody": "SELECT \n  b.name,\n  b.date,\n  b.class\n\nfrom \n  badges b\n\nwhere\n  b.tagbased = 'true'\n  and b.userid = ##UserId##\n\n\n\n\n-- UserId: Enter UserID:! \"Enter your numeric user ID.\"",
        "CreationDate": "2018-04-06 18:40:43",
        "validated": false,
        "QueryBody_Original": "SELECT \n  b.name,\n  b.date,\n  b.class\n\nfrom \n  badges b\n\nwhere\n  b.tagbased = 'true'\n  and b.userid = ##UserId##\n\n\n\n\n-- UserId: Enter UserID:! \"Enter your numeric user ID.\""
    },
    {
        "QuerySetId": 836095,
        "Title": "points towards a specific user's specific tag",
        "Description": null,
        "QueryBody": "SELECT  \n  t.tagname ,\n  sum(a.score) as [sumScor],\n  count(a.id) as [#Answers]\nfrom posts a join posts q\n  on a.parentid = q.id\n  , tags t\n \nwhere \n  a.owneruserid=##UserID##\n  and a.posttypeid=2\n  and a.deletiondate is null\n  and a.closeddate is null\n  and q.deletiondate is null\n  and q.closeddate is null\n  and a.communityowneddate is null\n  and q.communityowneddate is null\n  and q.tags like '%<'+t.tagname+'>%'\n\ngroup by\n  t.tagname",
        "CreationDate": "2018-04-06 20:00:12",
        "validated": false,
        "QueryBody_Original": "SELECT  \n  t.tagname ,\n  sum(a.score) as [sumScor],\n  count(a.id) as [#Answers]\nfrom posts a join posts q\n  on a.parentid = q.id\n  , tags t\n \nwhere \n  a.owneruserid=##UserID##\n  and a.posttypeid=2\n  and a.deletiondate is null\n  and a.closeddate is null\n  and q.deletiondate is null\n  and q.closeddate is null\n  and a.communityowneddate is null\n  and q.communityowneddate is null\n  and q.tags like '%<'+t.tagname+'>%'\n\ngroup by\n  t.tagname"
    },
    {
        "QuerySetId": 836689,
        "Title": "# of votes by question (for a specific user)",
        "Description": null,
        "QueryBody": "SELECT  \n  p.id as [Post Link],\n  p.creationdate,\n  count(v.votetypeid) as [# Votes]\n\nfrom \n  posts p left outer join votes v\n  on v.postid = p.id\n  \nwhere\n  p.owneruserid = ##UserID##\n  and votetypeid in (1,2,3,5, null) --Accepted, Up, Down, Favorite\n \ngroup by p.id, p.creationdate\n\norder by p.creationdate",
        "CreationDate": "2018-04-08 17:57:43",
        "validated": false,
        "QueryBody_Original": "SELECT  \n  p.id as [Post Link],\n  p.creationdate,\n  count(v.votetypeid) as [# Votes]\n\nfrom \n  posts p left outer join votes v\n  on v.postid = p.id\n  \nwhere\n  p.owneruserid = ##UserID##\n  and votetypeid in (1,2,3,5, null) --Accepted, Up, Down, Favorite\n \ngroup by p.id, p.creationdate\n\norder by p.creationdate"
    },
    {
        "QuerySetId": 836813,
        "Title": "How many users were created each calendar year (since the beginning of 2010) in this database?",
        "Description": null,
        "QueryBody": "SELECT  count(*) from Users where Year(CreationDate)=2018 \nSELECT Year(CreationDate) as [Year], count(*) as [Users] from Users \nwhere Year(CreationDate)>=2010 group by Year(CreationDate)",
        "CreationDate": "2018-04-09 01:00:42",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 836891,
        "Title": "People who answered my questions",
        "Description": null,
        "QueryBody": "DECLARE  @UserId int = ##UserId##\n\n-- SELECT USERS THAT INTERACTED WITH MY QUESTIONS\nSELECT OwnerUserId, DisplayName, Location, Count(*) As Answers\nFROM Posts\nJOIN Users ON Posts.OwnerUserId = Users.Id\nWHERE ParentId IN (\n  -- SELECT MY QUESTIONS\n  SELECT Id\n  FROM Posts\n  WHERE OwnerUserId = @UserId\n    AND PostTypeId = 1\n)\nGROUP BY OwnerUserId, DisplayName, Location\nORDER BY Answers DESC",
        "CreationDate": "2018-11-11 01:56:21",
        "validated": false,
        "QueryBody_Original": "DECLARE  @UserId int = ##UserId##\n\n-- SELECT USERS THAT INTERACTED WITH MY QUESTIONS\nSELECT OwnerUserId, DisplayName, Location, Count(*) As Answers\nFROM Posts\nJOIN Users ON Posts.OwnerUserId = Users.Id\nWHERE ParentId IN (\n  -- SELECT MY QUESTIONS\n  SELECT Id\n  FROM Posts\n  WHERE OwnerUserId = @UserId\n    AND PostTypeId = 1\n)\nGROUP BY OwnerUserId, DisplayName, Location\nORDER BY Answers DESC"
    },
    {
        "QuerySetId": 837141,
        "Title": "Respostas paras medalhas Int\u00e9rprete, Aprimorador e Luminar",
        "Description": null,
        "QueryBody": "SELECT  a.Id as [Post Link], a.Score, a.CreationDate\n  from Posts q \n  join Posts a on a.ParentId = q.Id\n where q.PostTypeId = 1 and \n       q.ClosedDate is null and\n       a.PostTypeId = 2 and \n       a.Score > 0 and \n       a.OwnerUserId = ##UserId## and\n       -- exclude self answered\n       IsNull(q.OwnerUserId, -1) <> a.OwnerUserId and \n       exists(SELECT 1 \n                from PostHistory ph \n               where ph.PostHistoryTypeId in (4,5) \n                 and ph.PostId = a.ParentId \n                 and ph.UserId = a.OwnerUserId \n                 and abs(datediff(hh, ph.CreationDate, a.CreationDate)) < 12)\norder by a.CreationDate desc",
        "CreationDate": "2018-04-09 22:25:06",
        "validated": false,
        "QueryBody_Original": "SELECT  a.Id as [Post Link], a.Score, a.CreationDate\n  from Posts q \n  join Posts a on a.ParentId = q.Id\n where q.PostTypeId = 1 and \n       q.ClosedDate is null and\n       a.PostTypeId = 2 and \n       a.Score > 0 and \n       a.OwnerUserId = ##UserId## and\n       -- exclude self answered\n       IsNull(q.OwnerUserId, -1) <> a.OwnerUserId and \n       exists(SELECT 1 \n                from PostHistory ph \n               where ph.PostHistoryTypeId in (4,5) \n                 and ph.PostId = a.ParentId \n                 and ph.UserId = a.OwnerUserId \n                 and abs(datediff(hh, ph.CreationDate, a.CreationDate)) < 12)\norder by a.CreationDate desc"
    },
    {
        "QuerySetId": 837744,
        "Title": "Average Score by Month for a specific user or users",
        "Description": null,
        "QueryBody": "SELECT  \n  datefromparts(year(p.creationdate),month(p.creationdate),1) as YearMth,\n  format(cast(sum(score) as decimal) \/ count(id),'0.0') as AvgScore\n  \nfrom \n  posts p \n  \nwhere\n  owneruserid in ( ##UserID## )\n  and posttypeid in (1,2)\n  \ngroup by \n  datefromparts(year(p.creationdate),month(p.creationdate),1)\n\norder by\n  datefromparts(year(p.creationdate),month(p.creationdate),1)\n  \n  \n  \n  --UserID: Enter one or more User ID's!\"Enter one (or more) numeric user id's (separated by comma's)",
        "CreationDate": "2018-04-10 17:48:38",
        "validated": false,
        "QueryBody_Original": "SELECT  \n  datefromparts(year(p.creationdate),month(p.creationdate),1) as YearMth,\n  format(cast(sum(score) as decimal) \/ count(id),'0.0') as AvgScore\n  \nfrom \n  posts p \n  \nwhere\n  owneruserid in ( ##UserID## )\n  and posttypeid in (1,2)\n  \ngroup by \n  datefromparts(year(p.creationdate),month(p.creationdate),1)\n\norder by\n  datefromparts(year(p.creationdate),month(p.creationdate),1)\n  \n  \n  \n  --UserID: Enter one or more User ID's!\"Enter one (or more) numeric user id's (separated by comma's)"
    },
    {
        "QuerySetId": 837933,
        "Title": "Short accepted answer containing link",
        "Description": null,
        "QueryBody": "SELECT  TOP ##number##\n  a.Id as [Post Link], LEN(a.Body), a.Body\nfrom Posts a\ninner join Posts q on a.ParentId = q.Id\nwhere a.PostTypeId = 2 and q.AcceptedAnswerId = a.Id\nand (LEN(a.Body)<##max##)\nand a.Body like '%<a href=%'\norder by LEN(a.Body)",
        "CreationDate": "2018-04-10 21:47:58",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 840082,
        "Title": "Top 20 Tags for downvotes I have",
        "Description": null,
        "QueryBody": "DECLARE  @UserId int = ##UserId##\n\nSELECT --TOP 20 \n    TagName,\n    COUNT(*) AS DownVotes\nFROM Tags\n    INNER JOIN PostTags ON PostTags.TagId = Tags.id\n    INNER JOIN Posts ON Posts.ParentId = PostTags.PostId\n    INNER JOIN Votes ON Votes.PostId = Posts.Id and VoteTypeId = 3\nWHERE \n    Posts.OwnerUserId = @UserId\nGROUP BY TagName \nORDER BY DownVotes DESC",
        "CreationDate": "2018-04-16 05:46:05",
        "validated": false,
        "QueryBody_Original": "DECLARE  @UserId int = ##UserId##\n\nSELECT --TOP 20 \n    TagName,\n    COUNT(*) AS DownVotes\nFROM Tags\n    INNER JOIN PostTags ON PostTags.TagId = Tags.id\n    INNER JOIN Posts ON Posts.ParentId = PostTags.PostId\n    INNER JOIN Votes ON Votes.PostId = Posts.Id and VoteTypeId = 3\nWHERE \n    Posts.OwnerUserId = @UserId\nGROUP BY TagName \nORDER BY DownVotes DESC"
    },
    {
        "QuerySetId": 840407,
        "Title": "Creation date for a Tag",
        "Description": null,
        "QueryBody": "WITH  oldestPost AS (\n    SELECT\n                t.Id,\n                Min (q.CreationDate) AS [Oldest Post]\n    FROM        Tags t\n    LEFT JOIN   PostTags pt\n    ON          t.Id            = pt.TagId\n    INNER JOIN  Posts q\n    ON          q.Id            = pt.PostId\n    WHERE       t.TagName       =##TargTagName:string##\n    GROUP BY    t.Id\n),\nfoo AS (select 1 as bar)\nSELECT      *\nFROM        oldestPost op, foo",
        "CreationDate": "2018-04-17 00:48:57",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 840693,
        "Title": "Total tag score vs no. of answers in tag for a given user",
        "Description": "Returns a distribution, for a given user and over all the tags that user has answered, of the users' total score on that tag (horizontal axis) versus the total number of answers they've written (vertical axis).",
        "QueryBody": "DECLARE  @EndDate datetime = (select case\n  -- If we request 'today', actually use the date\n  -- of the most recent transfer to this database,\n  -- which may be as much as a week in the past.\n  when lower(##EndDate:string?today##) = 'today' then max(CreationDate)\n  -- Otherwise, specify the most recent date to include.\n  else ##EndDate##\n  end\n  from Posts\n);\n  \nDECLARE @StartDate datetime = dateadd(day, -1*##DaysBack?30##, @EndDate);\n\nSELECT\nanswers.Score as Score,\nCOUNT(answers.Id) AS TotalAnswers\nFROM Posts questions \nINNER JOIN Posts answers ON answers.ParentId = Questions.Id\nWHERE answers.OwnerUserId = ##userId##\n  AND questions.CommunityOwnedDate IS NULL\n  AND answers.CreationDate between @StartDate and @EndDate\nGROUP BY answers.Score\nORDER BY answers.Score",
        "CreationDate": "2018-06-29 05:08:11",
        "validated": false,
        "QueryBody_Original": "DECLARE  @EndDate datetime = (select case\n  -- If we request 'today', actually use the date\n  -- of the most recent transfer to this database,\n  -- which may be as much as a week in the past.\n  when lower(##EndDate:string?today##) = 'today' then max(CreationDate)\n  -- Otherwise, specify the most recent date to include.\n  else ##EndDate##\n  end\n  from Posts\n);\n  \nDECLARE @StartDate datetime = dateadd(day, -1*##DaysBack?30##, @EndDate);\n\nSELECT\nanswers.Score as Score,\nCOUNT(answers.Id) AS TotalAnswers\nFROM Posts questions \nINNER JOIN Posts answers ON answers.ParentId = Questions.Id\nWHERE answers.OwnerUserId = ##userId##\n  AND questions.CommunityOwnedDate IS NULL\n  AND answers.CreationDate between @StartDate and @EndDate\nGROUP BY answers.Score\nORDER BY answers.Score"
    },
    {
        "QuerySetId": 841172,
        "Title": "What are Your Mostly Viewed Answers?",
        "Description": null,
        "QueryBody": "SELECT  \n    q.ViewCount AS [View_Count],\n    q.Title AS [Title],\n    q.id as [Id]\nFROM\n    Posts q\n  INNER JOIN\n    Posts ans\n  ON ans.ParentId = q.Id\n  \nWHERE\n      ans.CommunityOwnedDate is null\n  and ans.OwnerUserId = ##UserId##\n  and (ans.Score > 0 OR q.AcceptedAnswerId = ans.Id)\nORDER BY \n  View_Count DESC",
        "CreationDate": "2018-04-18 10:25:41",
        "validated": false,
        "QueryBody_Original": "SELECT  \n    q.ViewCount AS [View_Count],\n    q.Title AS [Title],\n    q.id as [Id]\nFROM\n    Posts q\n  INNER JOIN\n    Posts ans\n  ON ans.ParentId = q.Id\n  \nWHERE\n      ans.CommunityOwnedDate is null\n  and ans.OwnerUserId = ##UserId##\n  and (ans.Score > 0 OR q.AcceptedAnswerId = ans.Id)\nORDER BY \n  View_Count DESC"
    },
    {
        "QuerySetId": 842272,
        "Title": "Top 50 All Time Related Tags of Single Tag",
        "Description": null,
        "QueryBody": "WITH  that base tag.\n\nselect TOP(50) t1.TagName as Tag, t2.TagName as \"Related Tag\", count(t2.TagName) as \"Count\"\n\nfrom PostTags as pt1\n  INNER JOIN Tags as t1 ON pt1.TagId = t1.Id\n  INNER JOIN PostTags as pt2 ON pt1.PostId = pt2.PostId AND pt1.TagId <> pt2.TagId\n  INNER JOIN Tags as t2 ON pt2.TagId = t2.Id\n  INNER JOIN posts A on pt2.postid = A.id\n  where t1.TagName in ( 'javascript', 'java')\n-- and A.creationdate > getdate() - 365 Date filter\ngroup by t1.TagName, t2.TagName\norder by count(t2.TagName) desc",
        "CreationDate": "2018-04-20 11:12:22",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 843414,
        "Title": "Forgetful O.P.'s?  (Questions with ONE, UNACCEPTED ANSWER [yours!] yet has a positive score.)",
        "Description": "Questions which have only one answer, posted by the specified user, but was Not Accepted even though it has a positive score.  (Perhaps it's time to check in with the OP and remind them of the SO\/SE customs!)  Also ignores closed\/deleted questions\/answers, and any where the OP has not been active in the past 100 days, and question score must be -2 or better.",
        "QueryBody": "SELECT \n  datediff(d,q.creationdate,getdate()) as [DaysSinceAsked],\n  a.id as [Post Link],\n  q.viewcount as [QViews],\n  q.score as [QueScore],\n  q.owneruserid as [User Link],\n  datediff(d,q.lastactivitydate,getdate()) as [DaysSinceActive],\n  datediff(d,a.creationdate,getdate()) as [DaysSinceAnswered],\n  a.score as [AnsScore]\n  \nfrom \n  posts q join posts a\n  on q.id = a.parentid\n\nwhere\n  q.closeddate is null and a.closeddate is null\n  and q.deletiondate is null and a.deletiondate is null\n  and q.posttypeid=1 and a.posttypeid=2\n  and q.acceptedanswerid is null\n  and q.answercount = 1\n  and a.score > 0\n  and a.owneruserid in (##UserID##)\n  \norder by \n  a.score+q.score  desc,\n  q.creationdate desc",
        "CreationDate": "2018-04-23 03:38:48",
        "validated": false,
        "QueryBody_Original": "SELECT \n  datediff(d,q.creationdate,getdate()) as [DaysSinceAsked],\n  a.id as [Post Link],\n  q.viewcount as [QViews],\n  q.score as [QueScore],\n  q.owneruserid as [User Link],\n  datediff(d,q.lastactivitydate,getdate()) as [DaysSinceActive],\n  datediff(d,a.creationdate,getdate()) as [DaysSinceAnswered],\n  a.score as [AnsScore]\n  \nfrom \n  posts q join posts a\n  on q.id = a.parentid\n\nwhere\n  q.closeddate is null and a.closeddate is null\n  and q.deletiondate is null and a.deletiondate is null\n  and q.posttypeid=1 and a.posttypeid=2\n  and q.acceptedanswerid is null\n  and q.answercount = 1\n  and a.score > 0\n  and a.owneruserid in (##UserID##)\n  \norder by \n  a.score+q.score  desc,\n  q.creationdate desc"
    },
    {
        "QuerySetId": 843492,
        "Title": "how many times have I said \"pivot table\"?",
        "Description": null,
        "QueryBody": "SELECT  \n'Pivot Table comments' as pType,\nuserid as [User Link], \ncount(id) as numMentions \nfrom comments\nwhere userid in(##UserID##)\nand text like '%pivot table%' COLLATE SQL_Latin1_General_CP1_CI_AS \ngroup by userid\n\nunion\n\nSELECT \n'Pivot Table posts' as pType,\nowneruserid as [User Link], \ncount(id) as numMentions \nfrom posts\nwhere owneruserid in(##UserID##)\nand body like '%pivot table%' COLLATE SQL_Latin1_General_CP1_CI_AS \ngroup by owneruserid",
        "CreationDate": "2018-04-23 11:30:01",
        "validated": false,
        "QueryBody_Original": "SELECT  \n'Pivot Table comments' as pType,\nuserid as [User Link], \ncount(id) as numMentions \nfrom comments\nwhere userid in(##UserID##)\nand text like '%pivot table%' COLLATE SQL_Latin1_General_CP1_CI_AS \ngroup by userid\n\nunion\n\nSELECT \n'Pivot Table posts' as pType,\nowneruserid as [User Link], \ncount(id) as numMentions \nfrom posts\nwhere owneruserid in(##UserID##)\nand body like '%pivot table%' COLLATE SQL_Latin1_General_CP1_CI_AS \ngroup by owneruserid"
    },
    {
        "QuerySetId": 843709,
        "Title": "Total posted and accepted answers by Year",
        "Description": null,
        "QueryBody": "DECLARE  @UserId int = ##UserId##\n\nSELECT --TOP 20 \nYear(a.CreationDate) AS[Year],\n    COUNT(*) AS [Number of Answers],\n    (SELECT\n    COUNT(*) AS [Number of Answers] \nFROM Posts aa\njoin posts as qq on aa.parentid = qq.id\nINNER JOIN\n    Users ON Users.Id = aa.OwnerUserId\nWHERE \n    (aa.OwnerUserId = @UserId\n    and aa.posttypeid = 2\n    and qq.acceptedanswerid = aa.id)\n    AND Year(aa.CreationDate) = Year(a.CreationDate) \n    ) AS [Number of Accepted Answers]\nFROM Posts a\nINNER JOIN\n    Users ON Users.Id = a.OwnerUserId\nWHERE \n    a.OwnerUserId = @UserId\n    GROUP BY Year(a.CreationDate) \n    ORDER BY Year(a.CreationDate) DESC",
        "CreationDate": "2018-04-23 21:16:53",
        "validated": false,
        "QueryBody_Original": "DECLARE  @UserId int = ##UserId##\n\nSELECT --TOP 20 \nYear(a.CreationDate) AS[Year],\n    COUNT(*) AS [Number of Answers],\n    (SELECT\n    COUNT(*) AS [Number of Answers] \nFROM Posts aa\njoin posts as qq on aa.parentid = qq.id\nINNER JOIN\n    Users ON Users.Id = aa.OwnerUserId\nWHERE \n    (aa.OwnerUserId = @UserId\n    and aa.posttypeid = 2\n    and qq.acceptedanswerid = aa.id)\n    AND Year(aa.CreationDate) = Year(a.CreationDate) \n    ) AS [Number of Accepted Answers]\nFROM Posts a\nINNER JOIN\n    Users ON Users.Id = a.OwnerUserId\nWHERE \n    a.OwnerUserId = @UserId\n    GROUP BY Year(a.CreationDate) \n    ORDER BY Year(a.CreationDate) DESC"
    },
    {
        "QuerySetId": 843975,
        "Title": "Time Interval Between Question + Answer",
        "Description": null,
        "QueryBody": "SELECT  q.Id, \n       min(datediff(minute, q.CreationDate, a.CreationDate)) as [TimeInterval] \n       from Posts q \n  inner join Posts a on a.ParentId=q.Id and a.Id = q.AcceptedAnswerId\n  where q.Id > ##minId## \ngroup by q.Id\norder by q.Id asc",
        "CreationDate": "2018-04-24 19:02:26",
        "validated": false,
        "QueryBody_Original": "SELECT  q.Id, \n       min(datediff(minute, q.CreationDate, a.CreationDate)) as [TimeInterval] \n       from Posts q \n  inner join Posts a on a.ParentId=q.Id and a.Id = q.AcceptedAnswerId\n  where q.Id > ##minId## \ngroup by q.Id\norder by q.Id asc"
    },
    {
        "QuerySetId": 844691,
        "Title": "Posts that can earn you \"Necromancer\"",
        "Description": "Returns a list of questions for a given user that have 4 upvotes and are at least 60 days old, meaning the next upvote on any of the posts will earn the user a Necromancer badge.\r\n",
        "QueryBody": "DECLARE  @userId int = ##userId##\n\nselect\n    p.ParentId as [Post Link]\n   ,datediff(day, parent.CreationDate, p.CreationDate) as [Days after Ask for Answer]\n   ,count(*) as voteCount\nfrom\n    Posts p         \n    inner join Votes v\n        on v.PostId = p.Id\n        and v.VoteTypeId = 2\n     inner join Posts parent\n        on parent.Id = p.ParentId\nwhere\n    p.OwnerUserId = @userId\n    and datediff(day, parent.CreationDate, p.CreationDate) >= 60\ngroup by\n    p.ParentId\n   ,p.Id\n   ,datediff(day, parent.CreationDate, p.CreationDate)\nhaving\n    count(*) <= 3\norder by\n    datediff(day, parent.CreationDate, p.CreationDate) desc",
        "CreationDate": "2018-12-12 08:22:20",
        "validated": false,
        "QueryBody_Original": "DECLARE  @userId int = ##userId##\n\nselect\n    p.ParentId as [Post Link]\n   ,datediff(day, parent.CreationDate, p.CreationDate) as [Days after Ask for Answer]\n   ,count(*) as voteCount\nfrom\n    Posts p         \n    inner join Votes v\n        on v.PostId = p.Id\n        and v.VoteTypeId = 2\n     inner join Posts parent\n        on parent.Id = p.ParentId\nwhere\n    p.OwnerUserId = @userId\n    and datediff(day, parent.CreationDate, p.CreationDate) >= 60\ngroup by\n    p.ParentId\n   ,p.Id\n   ,datediff(day, parent.CreationDate, p.CreationDate)\nhaving\n    count(*) <= 3\norder by\n    datediff(day, parent.CreationDate, p.CreationDate) desc"
    },
    {
        "QuerySetId": 844845,
        "Title": "Average question score by account age (separated by question year)",
        "Description": null,
        "QueryBody": "SELECT  Age, [2009], [2010], [2011], [2012],\n            [2013], [2014], [2015], [2016],\n            [2017], [2018]\nFROM\n\n(\nSELECT DATEDIFF(MONTH, u.CreationDate, p.CreationDate) AS 'Age',\n  CAST(p.Score AS FLOAT) AS 'Score',\n  YEAR(p.CreationDate) AS 'Year_'\n  FROM Posts AS p\n  INNER JOIN Users AS u ON p.OwnerUserId = u.Id\n  WHERE p.PostTypeId = 1 -- Questions\n    AND DATEDIFF(MONTH, u.CreationDate, p.CreationDate) >= 0\n    -- negative numbers are possible following an account merge\n  ) AS temp\n  PIVOT (AVG(Score)\n  FOR Year_ IN ([2009], [2010], [2011], [2012],\n                [2013], [2014], [2015], [2016],\n                [2017], [2018])\n  ) AS temp2\nORDER BY Age",
        "CreationDate": "2018-04-26 09:59:00",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 845560,
        "Title": "Search for comments by a user with particular text",
        "Description": null,
        "QueryBody": "SELECT  Id AS [Comment Link], Score, Text \n  FROM Comments \n WHERE UPPER(Text) LIKE UPPER('%##CommentText##%')\n   AND UserId = ##userId##\n ORDER BY Score DESC",
        "CreationDate": "2018-04-28 00:38:48",
        "validated": false,
        "QueryBody_Original": "SELECT  Id AS [Comment Link], Score, Text \n  FROM Comments \n WHERE UPPER(Text) LIKE UPPER('%##CommentText##%')\n   AND UserId = ##userId##\n ORDER BY Score DESC"
    },
    {
        "QuerySetId": 845876,
        "Title": "average first score if body does NOT contains \"downvote\" ",
        "Description": null,
        "QueryBody": "SELECT  sum(p.Score) as total, count(p.Score) as num_questions, (sum(p.Score)*1.0)\/count(p.Score) as ave\nFROM POSTS p\nLEFT JOIN USERS u\nON p.OwnerUserId = u.Id\nLEFT JOIN (\n    SELECT u.Id as u_id, min(p.ID) as min_pid\n    FROM POSTS p\n    LEFT JOIN USERS u\n    ON p.OwnerUserId = u.Id\n    GROUP BY u.Id) as mp\nON mp.u_id = u.Id AND mp.min_pid = p.Id\nWHERE p.PostTypeId = 1 \n    AND p.DeletionDate is NULL\n    AND p.Body NOT LIKE '%downvote%' \n    AND p.Id > ##cutoff:int##",
        "CreationDate": "2018-11-08 21:46:35",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 845971,
        "Title": "average first score if body contains \" downvot\" ",
        "Description": null,
        "QueryBody": "SELECT  sum(p.Score) as total, count(p.Score) as num_questions, (sum(p.Score)*1.0)\/count(p.Score) as ave\nFROM POSTS p\nLEFT JOIN USERS u\nON p.OwnerUserId = u.Id\nLEFT JOIN (\n    SELECT u.Id as u_id, min(p.ID) as min_pid\n    FROM POSTS p\n    LEFT JOIN USERS u\n    ON p.OwnerUserId = u.Id\n    GROUP BY u.Id) as mp\nON mp.u_id = u.Id AND mp.min_pid = p.Id\nWHERE p.PostTypeId = 1 AND p.Body NOT LIKE '% downvot%' AND p.Id > ##cutoff:int##",
        "CreationDate": "2018-04-30 11:47:06",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 846602,
        "Title": "AVERAGE SCORE OF ANSWERS BY Specified-vs-All-Users BY LOCAL TIME OF DAY (with Graph)",
        "Description": "Average Score of Answers posted by \"specified user(s) compared to all users\", grouped by time of day (hour) in specified Local Time Zone (adjusted for DST based on North American DST rules). DST start\/stop currently HARD-CODED to only work for Mar-2017 to Nov-2018. Upon request I can adjust the code to auto-calculate timezone and Daylight Savings for \"any\" date.",
        "QueryBody": "SELECT \n  datepart(hh,creationdate) as hr,\n  \n  sum(case when owneruserid=##UserID## then 1 else 0 end) as [numQ me],\n  sum(case when owneruserid=##UserID## then score else 0 end) as [sumScore me],\n  cast(cast(sum(case when owneruserid=##UserID## then 1 else 0 end) as decimal)\n    \/sum(case when owneruserid=##UserID## then score else 0 end) as decimal(5,1)) as [My Avg Score],\n  \n  cast(cast(sum(score) as decimal)\n    \/count(id) as decimal(5,1)) as [All Avg Score]\n\nfrom\n  posts\n\nwhere\n  owneruserid = ##UserID##\n  and year(creationdate)>=2018\n  and posttypeid=2  --answers\n  and closeddate is null --not closed\n\ngroup by\n  datepart(hh,creationdate) \n\norder by\n  datepart(hh,creationdate) \n\n\n\n\n\n--UserID:Enter Numeric User ID to query:",
        "CreationDate": "2018-05-02 03:12:58",
        "validated": false,
        "QueryBody_Original": "SELECT \n  datepart(hh,creationdate) as hr,\n  \n  sum(case when owneruserid=##UserID## then 1 else 0 end) as [numQ me],\n  sum(case when owneruserid=##UserID## then score else 0 end) as [sumScore me],\n  cast(cast(sum(case when owneruserid=##UserID## then 1 else 0 end) as decimal)\n    \/sum(case when owneruserid=##UserID## then score else 0 end) as decimal(5,1)) as [My Avg Score],\n  \n  cast(cast(sum(score) as decimal)\n    \/count(id) as decimal(5,1)) as [All Avg Score]\n\nfrom\n  posts\n\nwhere\n  owneruserid = ##UserID##\n  and year(creationdate)>=2018\n  and posttypeid=2  --answers\n  and closeddate is null --not closed\n\ngroup by\n  datepart(hh,creationdate) \n\norder by\n  datepart(hh,creationdate) \n\n\n\n\n\n--UserID:Enter Numeric User ID to query:"
    },
    {
        "QuerySetId": 846606,
        "Title": "COUNT Q+A's FOR USER BY MONTH",
        "Description": "Count all Questions and Answers posted by one or more specified users, grouped chronologically by month (excluding closed questions)",
        "QueryBody": "SELECT  * from posts where posttypeid=2 and acceptedanswerid is not null\n\n\n\n\n\n--SELECT case when getdate() between '2018-11-04' and 2 then 'a' else 'b' end\n\nSELECT year(creationdate), month(creationdate), count(id)\nfrom posts where owneruserid=8112776 group by year(creationdate), month(creationdate) order by year(creationdate), month(creationdate)",
        "CreationDate": "2018-05-02 03:17:33",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 846623,
        "Title": "COUNT OF Q+A's BY ANYONE BY TIME OF DAY (with Graph)  [Local time zone w\/ DST] ",
        "Description": "Count (with Graph tab) of Questions & Answers posted by anyone, grouped by time of day (hour) in specified Local Time Zone (adjusted for DST based on North American DST rules).  \r\n\r\nDST start\/stop currently HARD-CODED to only work for Mar-2017 to Nov-2018.  \r\nUpon request I'll adjust the code to auto-calculate Daylight Savings for \"any\" date.",
        "QueryBody": "SELECT \n  datepart(hh,dateadd(hh,case when creationdate \n    between '2017-11-05 02:00' and '2018-03-11 02:00' \n    then -8 else -7 end,creationdate)) as [Hour (PST)], --adjusted for DST & PST\n  count(id) as [numQ all]\n\nfrom\n  posts\n\nwhere\n  creationdate between '2017-03-12 02:00' and '2018-11-04 02:00' --if changing this, also need to change DST calc\n  and posttypeid in (1,2)  --answers\n  and closeddate is null --not closed\n\ngroup by\n  datepart(hh,dateadd(hh,case when creationdate \n    between '2017-11-05 02:00' and '2018-03-11 02:00' \n    then -8 else -7 end,creationdate))\n\norder by\n  datepart(hh,dateadd(hh,case when creationdate \n    between '2017-11-05 02:00' and '2018-03-11 02:00' \n    then -8 else -7 end,creationdate))\n\n\n--UserID:Enter Numeric User ID to query:",
        "CreationDate": "2018-05-02 03:58:10",
        "validated": false,
        "QueryBody_Original": "SELECT \n  datepart(hh,dateadd(hh,case when creationdate \n    between '2017-11-05 02:00' and '2018-03-11 02:00' \n    then -8 else -7 end,creationdate)) as [Hour (PST)], --adjusted for DST & PST\n  count(id) as [numQ all]\n\nfrom\n  posts\n\nwhere\n  creationdate between '2017-03-12 02:00' and '2018-11-04 02:00' --if changing this, also need to change DST calc\n  and posttypeid in (1,2)  --answers\n  and closeddate is null --not closed\n\ngroup by\n  datepart(hh,dateadd(hh,case when creationdate \n    between '2017-11-05 02:00' and '2018-03-11 02:00' \n    then -8 else -7 end,creationdate))\n\norder by\n  datepart(hh,dateadd(hh,case when creationdate \n    between '2017-11-05 02:00' and '2018-03-11 02:00' \n    then -8 else -7 end,creationdate))\n\n\n--UserID:Enter Numeric User ID to query:"
    },
    {
        "QuerySetId": 846753,
        "Title": "Is exist none user question or answer ?",
        "Description": null,
        "QueryBody": "SELECT  * from PostTypes\n-- Result: \n-- 1 Question\n-- 2 Answer\n-- 3 Wiki\n-- 4 TagWikiExcerpt\n-- 5 TagWiki\n-- 6 ModeratorNomination\n-- 7 WikiPlaceholder\n-- 8 PrivilegeWiki\n\nSELECT Top 10 * from Posts\nWhere (\n        PostTypeId = 1 --question type\n     or PostTypeId = 2 --answer type\n     )\n    and OwnerUserId is null\norder by CreationDate Desc",
        "CreationDate": "2018-05-02 13:20:23",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 846910,
        "Title": "Posts with most comments in past x days",
        "Description": null,
        "QueryBody": "SELECT  TOP 100\nposts.id [Post Link],\nposts.id,\n(\n  SELECT COUNT(*) \n  FROM comments \n  WHERE posts.id = comments.postid\n) AS comments_count\nFROM posts\nWHERE posts.CreationDate > DATEADD(day, -##DaysAgo:int?30##, GETDATE())\nORDER BY comments_count DESC",
        "CreationDate": "2020-09-04 23:11:48",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 846946,
        "Title": "List all votes on a given post",
        "Description": null,
        "QueryBody": "SELECT  T.Name, COUNT(*)\nFROM Votes V, VoteTypes T\nWHERE PostId = ##PostId:int?366891## AND V.VoteTypeId = T.Id\nGROUP BY T.Name\n-- PostId: The ID of the post \"This can be a question as well as an answer\":",
        "CreationDate": "2018-05-04 18:55:16",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 849052,
        "Title": "Create a temporary table for the LOG(n!), large and fast",
        "Description": "For values larger than 100000, the Stirling-formula is enough precise: LOG(SQRT(2*3.14*@value)) + (LOG(@value) - 1) * @value",
        "QueryBody": "DECLARE  @LogFact TABLE (\n  N INT,\n  LogFact FLOAT\n);\n\nDECLARE @n INT = 0;\n\n--SELECT * FROM @LogFact;\nSELECT @n;",
        "CreationDate": "2018-05-07 21:33:26",
        "validated": false,
        "QueryBody_Original": "DECLARE  @LogFact TABLE (\n  N INT,\n  LogFact FLOAT\n);\n\nDECLARE @n INT = 0;\n\n--SELECT * FROM @LogFact;\nSELECT @n;"
    },
    {
        "QuerySetId": 849501,
        "Title": "Solving the (UN)(RE)SOLVED title issue!",
        "Description": null,
        "QueryBody": "SELECT  p.Id as [Post Link], p.CreationDate, p.LastActivityDate, p.AcceptedAnswerId, p. ClosedDate\nFROM Posts p\nWHERE p.LastActivityDate > ##LastActivityDate:string?2018-07-05##\nAND upper(p.Title) LIKE '%SOLVED%'\nORDER BY p.LastActivityDate DESC",
        "CreationDate": "2018-07-08 18:43:29",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 849545,
        "Title": "Questions I have answered, sorted by question view count",
        "Description": null,
        "QueryBody": "DECLARE  @UserId int = ##UserId##\n\nselect someQuestion.Id as [Post Link],\nsomeQuestion.ViewCount,\nsomeQuestion.CommentCount as comms,\nsomeQuestion.AnswerCount,\nsomeQuestion.FavoriteCount as favs,\nsomeQuestion.Score as QuetionScore,\nyourAnswer.Score as YourScore,\nsomeQuestion.Tags\nfrom Posts yourAnswer \njoin Posts someQuestion\non yourAnswer.ParentID=someQuestion.Id \nwhere yourAnswer.OwnerUserId=@UserId\norder by ViewCount desc",
        "CreationDate": "2018-05-08 22:25:08",
        "validated": false,
        "QueryBody_Original": "DECLARE  @UserId int = ##UserId##\n\nselect someQuestion.Id as [Post Link],\nsomeQuestion.ViewCount,\nsomeQuestion.CommentCount as comms,\nsomeQuestion.AnswerCount,\nsomeQuestion.FavoriteCount as favs,\nsomeQuestion.Score as QuetionScore,\nyourAnswer.Score as YourScore,\nsomeQuestion.Tags\nfrom Posts yourAnswer \njoin Posts someQuestion\non yourAnswer.ParentID=someQuestion.Id \nwhere yourAnswer.OwnerUserId=@UserId\norder by ViewCount desc"
    },
    {
        "QuerySetId": 850097,
        "Title": "All my posts with Github Lines (convert to tagged repo)",
        "Description": null,
        "QueryBody": "SELECT  q.Id as [Post Link], a.Body\nFROM Posts q\nJOIN Posts a ON a.ParentId = q.Id\nWHERE a.OwnerUserId = ##UserId##",
        "CreationDate": "2018-05-10 06:27:33",
        "validated": false,
        "QueryBody_Original": "SELECT  q.Id as [Post Link], a.Body\nFROM Posts q\nJOIN Posts a ON a.ParentId = q.Id\nWHERE a.OwnerUserId = ##UserId##"
    },
    {
        "QuerySetId": 851378,
        "Title": "Get posts count time series by the tag",
        "Description": null,
        "QueryBody": "DECLARE  @TagName nvarchar (250) = '%<css>%'\n\nSELECT \n  DATEFROMPARTS(YEAR(P.CreationDate), MONTH(P.CreationDate), 1) AS PostMonth\n  , COUNT(*) AS TagCount\nFROM Posts AS P\nWHERE PostTypeId = 1  -- \ud835\udff7\u2000:\u2000\ud835\ude80\ud835\ude9e\ud835\ude8e\ud835\ude9c\ud835\ude9d\ud835\ude92\ud835\ude98\ud835\ude97\n  AND P.Tags LIKE @TagName\nGROUP BY YEAR(P.CreationDate), MONTH(P.CreationDate)\nORDER BY PostMonth;",
        "CreationDate": "2018-05-16 12:16:03",
        "validated": false,
        "QueryBody_Original": "DECLARE  @TagName nvarchar (250) = '%<css>%'\n\nSELECT \n  DATEFROMPARTS(YEAR(P.CreationDate), MONTH(P.CreationDate), 1) AS PostMonth\n  , COUNT(*) AS TagCount\nFROM Posts AS P\nWHERE PostTypeId = 1  -- \ud835\udff7\u2000:\u2000\ud835\ude80\ud835\ude9e\ud835\ude8e\ud835\ude9c\ud835\ude9d\ud835\ude92\ud835\ude98\ud835\ude97\n  AND P.Tags LIKE @TagName\nGROUP BY YEAR(P.CreationDate), MONTH(P.CreationDate)\nORDER BY PostMonth;"
    },
    {
        "QuerySetId": 851926,
        "Title": "ANSWERS BY YEAR: (Count and Avg Score for Specific User)",
        "Description": null,
        "QueryBody": "SELECT  \n  owneruserid as [User Link], \n  year(creationdate) as [Year], \n  count(*) as [numAnswers],\n  format(cast(sum(score) as decimal) \/ count(*),'0.0') as [AvgScore]\n  \nfrom \n  posts\n  \nwhere \n  posttypeid = 2\n  and owneruserid in (##UserID?22656##) --Default = Skeet\n  --and year(creationdate)=year(getdate())\n  \ngroup by \n  year(creationdate), owneruserid\n  \norder by \n  year(creationdate)\n\n\n\n--UserID:Enter one or more numeric User ID's:",
        "CreationDate": "2018-05-16 09:30:13",
        "validated": false,
        "QueryBody_Original": "SELECT  \n  owneruserid as [User Link], \n  year(creationdate) as [Year], \n  count(*) as [numAnswers],\n  format(cast(sum(score) as decimal) \/ count(*),'0.0') as [AvgScore]\n  \nfrom \n  posts\n  \nwhere \n  posttypeid = 2\n  and owneruserid in (##UserID?22656##) --Default = Skeet\n  --and year(creationdate)=year(getdate())\n  \ngroup by \n  year(creationdate), owneruserid\n  \norder by \n  year(creationdate)\n\n\n\n--UserID:Enter one or more numeric User ID's:"
    },
    {
        "QuerySetId": 852009,
        "Title": "NUMBER OF POSTS BY YEAR & BY HOUR OF DAY (for later Pivot) FOR SPECIFIC USER",
        "Description": null,
        "QueryBody": "SELECT  \n  year(creationdate) as [year], \n  datepart(hh,creationdate) as [hour],\n  count(*) as [numposts]\nfrom \n  posts\nwhere \n  owneruserid in (##UserID?22656##)\ngroup by\n  year(creationdate), \n  datepart(hh,creationdate)\norder by\n  year(creationdate), \n  datepart(hh,creationdate)",
        "CreationDate": "2018-05-15 16:20:24",
        "validated": false,
        "QueryBody_Original": "SELECT  \n  year(creationdate) as [year], \n  datepart(hh,creationdate) as [hour],\n  count(*) as [numposts]\nfrom \n  posts\nwhere \n  owneruserid in (##UserID?22656##)\ngroup by\n  year(creationdate), \n  datepart(hh,creationdate)\norder by\n  year(creationdate), \n  datepart(hh,creationdate)"
    },
    {
        "QuerySetId": 852224,
        "Title": "Dump paginated SEDE data in bulk form",
        "Description": "Faster\/easier data dump than using the API is pulling \"all\" of something.  This example of \"all votes on any of Skeet's answers, ever\"    here, 8 runs, <2mins to Excel.  API = 4000 calls, custom code, hours + possible bans, etc.",
        "QueryBody": "WITH out votes are ignored\n\n\nWITH PaginatedOutput AS\n(\nselect \n  ROW_NUMBER() OVER(ORDER BY p.id, v.id) AS RowNum,\n  p.id as AnswerID,\n  p.creationdate as CreationDate,\n  v.id as VoteID,\n  v.creationdate as UpVoteDate\n\nfrom \n  posts p left join votes v \n  on p.id = v.postid\n  where votetypeid = 2 and posttypeid=2\n  and owneruserid = 22656 \n)\n\nselect * \n  from PaginatedOutput\n where RowNum between (##PageNum:int?1## - 1) * ##PageSize:int?49000## + 1 \n                  and ##PageNum:int?1## * ##PageSize:int?49000##\n \norder by AnswerID, VoteID\n\n-- PageNum: Enter page number:\"Q: Why was 6 afraid of 7? (Hover 'lower' for answer.)\"\n-- PageSize: How many result records per page?\"A: Because 7-8-9!  (Joke from a 5 year old)\"",
        "CreationDate": "2018-05-16 17:24:57",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 852236,
        "Title": "ACTIVE & NEW USER COUNTS (BY YEAR)",
        "Description": "Counts of actives users and new users, by year.  In this case an \"Active User\" is one with \"any post\" during the calendar year. Comments, edits, etc, NOT included but posts marked closed, wiki, etc, ARE.  \"New Users\" are based on the year that the account was created on this site.",
        "QueryBody": "SELECT  \n  year(creationdate) as [Year],\n  count(distinct owneruserid) as [Active Users]\ninto #activeUsers from posts\ngroup by year(creationdate)\n\nSELECT \n  year(creationdate) as [Year],\n  count(id) as [New Users]\ninto #newUsers from users\ngroup by year(creationdate)\n\nSELECT \n  a.[Year],\n  a.[Active Users],\n  n.[New Users]\nfrom #activeUsers a \njoin #newUsers n on a.[Year] = n.[Year]\norder by [Year]",
        "CreationDate": "2018-05-16 11:01:59",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 852261,
        "Title": "User using ionic on cordova",
        "Description": null,
        "QueryBody": "DECLARE  @total float\nSELECT @total = Sum(Cast(ViewCount as bigint)) FROM Posts WHERE PostTypeId = 1\n\nSELECT \n    Tags.Tagname AS Tag, \n    Count(*) AS Questions, \n    Sum(Cast(Posts.ViewCount as bigint)) AS Views,\n    str(100 * Sum(Cast(Posts.ViewCount as bigint)) \/ @total,6,2) AS percentOfSite,\n    Sum(Posts.Score) AS Score,\n    Sum(Posts.AnswerCount) AS Answers,\n    Sum(Cast(Posts.ViewCount as bigint)) \/ Count(*) AS AvgViews,\n    str(Sum(Posts.Score) \/ Cast(Count(*) AS Float),6,2) AS AvgScore,\n    str(Sum(Posts.AnswerCount) \/ Cast(Count(*) AS Float),6,2) AS AvgAnswers\n  FROM Posts \n  JOIN PostTags ON Posts.Id = PostTags.PostId\n  JOIN Tags ON PostTags.TagId = Tags.Id\n  WHERE Posts.PostTypeId = 1 \n  GROUP BY Tags.Tagname\n  HAVING Tags.Tagname = 'ionic'\n\n  ORDER BY Questions DESC",
        "CreationDate": "2018-05-16 12:55:43",
        "validated": false,
        "QueryBody_Original": "DECLARE  @total float\nSELECT @total = Sum(Cast(ViewCount as bigint)) FROM Posts WHERE PostTypeId = 1\n\nSELECT \n    Tags.Tagname AS Tag, \n    Count(*) AS Questions, \n    Sum(Cast(Posts.ViewCount as bigint)) AS Views,\n    str(100 * Sum(Cast(Posts.ViewCount as bigint)) \/ @total,6,2) AS percentOfSite,\n    Sum(Posts.Score) AS Score,\n    Sum(Posts.AnswerCount) AS Answers,\n    Sum(Cast(Posts.ViewCount as bigint)) \/ Count(*) AS AvgViews,\n    str(Sum(Posts.Score) \/ Cast(Count(*) AS Float),6,2) AS AvgScore,\n    str(Sum(Posts.AnswerCount) \/ Cast(Count(*) AS Float),6,2) AS AvgAnswers\n  FROM Posts \n  JOIN PostTags ON Posts.Id = PostTags.PostId\n  JOIN Tags ON PostTags.TagId = Tags.Id\n  WHERE Posts.PostTypeId = 1 \n  GROUP BY Tags.Tagname\n  HAVING Tags.Tagname = 'ionic'\n\n  ORDER BY Questions DESC"
    },
    {
        "QuerySetId": 852322,
        "Title": "HUH? Looks like S.O. had a pretty busy morning on October 11, 2016... (see graph)",
        "Description": null,
        "QueryBody": "SELECT  cast(creationdate as date) as [Date], count(id) as [NewUsers\/Day]\nfrom users\ngroup by cast(creationdate as date)\norder by cast(creationdate as date)\n  \n--TAB #2\nSELECT \n  min(creationdate) as [Date From],\n  max(creationdate) as [Date To],\n  count(id) as [NewUsers]\nfrom \n  users\nwhere\n  creationdate between '2016-10-11 08:30' and '2016-10-11 11:30'\n  and displayname like 'user%'\ngroup by \n  cast(creationdate as date)\nhaving \n  count(id)>10000\norder by\n  cast(creationdate as date)\n  \n--TAB #3 (detail)\nSELECT *\nfrom users\nwhere creationdate between '2016-10-11 08:30' and '2016-10-11 11:30'\n  and displayname like 'user%'\n  \n\n--no insight on Google: https:\/\/www.google.com\/search?q=\"stack+overflow\"+october+11%2C+2016\n--thanks for the big-ass-tangent, after assuming my query was wrong!",
        "CreationDate": "2018-05-16 14:48:47",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 852327,
        "Title": "Searching comments on two keywords inclusive",
        "Description": null,
        "QueryBody": "SELECT   top  ##NumberOfComments##  \nc.CreationDate, c.Text, c.Id as [Comment Link], c.PostId as [Post Link]\nfrom Comments c\nwhere Text like '%##keyword1##%'\nand Text like '%##keyword2##%'",
        "CreationDate": "2018-05-16 14:49:08",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 853143,
        "Title": "Most Popular Questions asked by the Most Popular Answerers of the most Popular Questions",
        "Description": null,
        "QueryBody": "SELECT  TOP 1000\n  UserQuestions.id as [Post Link],\n  MAX(UserQuestions.Score)\nFROM Posts\nLEFT JOIN Posts as Answers \n  on Posts.id = Answers.ParentId \nLEFT JOIN Users\n  on Users.id = Answers.OwnerUserId\nLEFT JOIN Posts as UserQuestions\n  on Posts.OwnerUserId = Answers.OwnerUserId\nWHERE\n  Posts.Tags like CONCAT('%<', ##Tag:string?node.js##, '>%')\n  and Posts.PostTypeId = 1 and Answers.PostTypeId = 2\n  and UserQuestions.PostTypeId = 1\n  and UserQuestions.Tags like CONCAT('%<', ##Tag:string?node.js##, '>%')\n  and UserQuestions.OwnerUserId = Users.id\n  and UserQuestions.CreationDate > cast(##CreationDateAfter:string?2000-01-01## as datetime)\n  and LOWER(Users.Location) LIKE CONCAT(##Location:string?berlin##, '%')\nGROUP BY UserQuestions.id",
        "CreationDate": "2018-05-30 18:15:41",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 853923,
        "Title": " Total upvotes per day",
        "Description": null,
        "QueryBody": "DECLARE  @startDate date = '##startDate##';\nDECLARE @endDate date = '##endDate##';\n\nselect\n  cast( CreationDate as date),\n  TotalUpVotes = count(*)\nfrom\n  Votes\nwhere\n  VoteTypeId = 2 and\n  cast( CreationDate as date) between @startDate and @endDate\ngroup by cast ( CreationDate as date )\norder by cast ( CreationDate as date )",
        "CreationDate": "2018-05-20 04:34:03",
        "validated": false,
        "QueryBody_Original": "DECLARE  @startDate date = '##startDate##';\nDECLARE @endDate date = '##endDate##';\n\nselect\n  cast( CreationDate as date),\n  TotalUpVotes = count(*)\nfrom\n  Votes\nwhere\n  VoteTypeId = 2 and\n  cast( CreationDate as date) between @startDate and @endDate\ngroup by cast ( CreationDate as date )\norder by cast ( CreationDate as date )"
    },
    {
        "QuerySetId": 854060,
        "Title": "All answers posted, from largest to smallest",
        "Description": null,
        "QueryBody": "SELECT  id as [Post Link], ViewCount, creationdate, score from\nposts where posttypeid = 2 and owneruserid = ##userid##\n\nORDER by ViewCount desc;",
        "CreationDate": "2020-06-27 21:44:49",
        "validated": false,
        "QueryBody_Original": "SELECT  id as [Post Link], ViewCount, creationdate, score from\nposts where posttypeid = 2 and owneruserid = ##userid##\n\nORDER by ViewCount desc;"
    },
    {
        "QuerySetId": 856897,
        "Title": "under construction - qid's for q & a's",
        "Description": null,
        "QueryBody": "SELECT  \n id as question_id,\n 'Q' as [type]\ninto #qids from posts\nwhere owneruserid=(##userid##)\n  and posttypeid=1\n\n\n\n\n\nSELECT * from #qids\n\n\n\n\n--UserID:Enter one or more numeric User ID's:",
        "CreationDate": "2018-05-29 04:59:06",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 856903,
        "Title": "under construction - qid for comments on answers",
        "Description": null,
        "QueryBody": "SELECT  \n  userid,\n  c.postid as [postid],\n  p.posttypeid as [posttypeid],\n  count(c.id) as [#comments]\n  into #commentsByUserPostid\nfrom\n  comments c join posts p\n  on c.postid=p.id\nwhere userid is not null \nand userid=(##userid##)\ngroup by [postid],[posttypeid], userid\n\n\nSELECT * from #commentsByUserPostid\n\/*\nSELECT \n  userid,\n  q.id as question_id,\n  'commented on question' as [action]   --1056 comments on q's?\nfrom \n  #commentsByUserPostid c join posts q\n  on c.postid = q.id\n  where c.posttypeid = 1 and userid like (##UserID##)\n\n\/*\nSELECT \n  userid,\n  q.id as question_id,\n  'commented on answer' as [action]\nfrom \n  #commentsByUserPostid c join posts q\n  on c.postid = q.id\n  where c.posttypeid = 2 and userid like (##UserID##)\n*\/\n--SELECT posttypeid,",
        "CreationDate": "2018-05-29 16:54:56",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 856964,
        "Title": "DO YOU GIVE WHAT YOU GET?",
        "Description": "Comparison of (% of votes that are upvotes) for VOTES CAST versus VOTES RECEIVED for the specific user(s).",
        "QueryBody": "SELECT  \n  a.owneruserid as [User Link],\n  sum(case when v.votetypeid=2 then 1 else 0 end) as [UpVotes],\n  sum(case when v.votetypeid=3 then 1 else 0 end) as [DownVotes]\nfrom \n  posts a left outer join votes v\n  on v.postid = a.id\nwhere a.owneruserid in (##UserID##)\n  and v.votetypeid in (2,3)\n  and a.posttypeid=2\ngroup by\n  a.owneruserid",
        "CreationDate": "2018-05-29 12:15:17",
        "validated": false,
        "QueryBody_Original": "SELECT  \n  a.owneruserid as [User Link],\n  sum(case when v.votetypeid=2 then 1 else 0 end) as [UpVotes],\n  sum(case when v.votetypeid=3 then 1 else 0 end) as [DownVotes]\nfrom \n  posts a left outer join votes v\n  on v.postid = a.id\nwhere a.owneruserid in (##UserID##)\n  and v.votetypeid in (2,3)\n  and a.posttypeid=2\ngroup by\n  a.owneruserid"
    },
    {
        "QuerySetId": 857771,
        "Title": "Tag badge owners, in increasing order of rep",
        "Description": null,
        "QueryBody": "SELECT  U.Id as [User Link], U.Reputation\nfrom Users U\ninner join Badges B on B.UserId = U.Id\nwhere B.Class = ##BadgeClass?3##\n  and B.TagBased = 1\n  and B.Name = '##Tag?haskell##'\norder by U.Reputation",
        "CreationDate": "2018-05-31 19:34:58",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 858100,
        "Title": "DAILY QUESTION AND ANSWER POST COUNT",
        "Description": "Posts within last 6 months, grouped by date created UTC, split into: questions, answers, other",
        "QueryBody": "SELECT  \n  cast(creationdate as date) as [date],\n  sum(case when posttypeid = 1 then 1 else 0 end ) as Questions,\n  sum(case when posttypeid = 2 then 1 else 0 end ) as Answers,\n  sum(case when posttypeid not in (1,2) then 1 else 0 end ) as Other,\n  count(*) as [TOTAL]\ninto #temp\nfrom posts\nwhere year(creationdate) = year(getdate())\ngroup by cast(creationdate as date)\norder by cast(creationdate as date)\n\n\n--Tab #1: Daily\nSELECT * from #temp\n\n--Tab #2: Daily Average\nSELECT \n  avg(questions) as [Avg# Questions],\n  avg(answers) as [Avg# Answers],\n  avg(other) as [Avg# Other]\nfrom #temp\n\n\n---don't look at the graph, lol",
        "CreationDate": "2018-06-01 14:09:11",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 859378,
        "Title": "Search comments by any keyword by date",
        "Description": null,
        "QueryBody": "SELECT    TOP ##numberofcomments## c.creationdate, \n         c.text, \n         c.id     AS [Comment Link], \n         c.postid AS [Post Link] \nFROM     comments c \nWHERE    text LIKE '%##keyword1##%' \nAND      len(c.text) <= 25\nORDER BY c.creationdate ASC",
        "CreationDate": "2019-08-21 15:20:45",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 861526,
        "Title": "Top VBA & Excel answer'ers (last 10 days)",
        "Description": null,
        "QueryBody": "SELECT  \n  --cast(a.creationdate as date) as [Date],\n  a.owneruserid as [UserID],\n  count(a.id) as [Answers],\n  sum(a.score) as [Score],\n  RANK() OVER   \n    ( --PARTITION BY cast(a.creationdate as date) \n      ORDER BY sum(a.score) desc --count(a.id) desc\n    ) AS Rank\n\ninto #temp\nfrom posts a join posts q\n  on q.id = a.parentid\n\nwhere   \n  a.deletiondate is null\n  and a.closeddate is null\n  and a.posttypeid=2\n  and a.owneruserid is not null\n  and a.creationdate >= dateadd(d,-10,(SELECT max(creationdate) from posts))\n  and ( q.tags like '%vba>%' or q.tags like '%excel%')\n  \ngroup by \n--  cast(a.creationdate as date),\n  a.owneruserid\n\n\n  SELECT [UserID] as [User Link],[Rank],[Answers],[Score]\n  from #temp --where rank <=5\n  order by rank desc",
        "CreationDate": "2018-06-12 03:38:28",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 861892,
        "Title": "Quoted part-questions with one-word Yes\/No answers",
        "Description": null,
        "QueryBody": "SELECT  Id AS [Post Link]\nFROM Posts\nWHERE (Body LIKE '%<\/blockquote>%<p>No.<\/p>%'\nOR Body LIKE '%<\/blockquote>%<p>Yes.<\/p>%')\nAND OwnerUserId = ##UserId##\nORDER BY Len(Body)",
        "CreationDate": "2018-06-13 16:00:13",
        "validated": false,
        "QueryBody_Original": "SELECT  Id AS [Post Link]\nFROM Posts\nWHERE (Body LIKE '%<\/blockquote>%<p>No.<\/p>%'\nOR Body LIKE '%<\/blockquote>%<p>Yes.<\/p>%')\nAND OwnerUserId = ##UserId##\nORDER BY Len(Body)"
    },
    {
        "QuerySetId": 862491,
        "Title": "Duplicate link score of answers for a specific user",
        "Description": null,
        "QueryBody": "SELECT  PL.RelatedPostId as [Post Link], count(*) as LinkScore\nfrom PostLinks PL\ninner join Posts PS on PS.Id = PL.PostId\ninner join Posts PT on PT.ParentId = PL.RelatedPostID\nwhere PL.LinkTypeId = 3\n  and PT.OwnerUserId = ##UserId?2751851##\ngroup by PL.RelatedPostId\norder by LinkScore desc",
        "CreationDate": "2018-06-14 11:38:39",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 862516,
        "Title": "T-SQL example: find url w\/ specific extension within a string",
        "Description": "Finds a URL in a string based on the extension...  Find the extension first (ie, 'GIF'), and then look in reverse for the prefix (ie, 'HTTP')... This way it will skip any prefixes from previous URL's in the string.",
        "QueryBody": "DECLARE  @body varchar(8000) = 'blah http:\/\/dhdkhjd\/abcd.gif blahl blah alhlshlhskhd';\nDECLARE @strStart varchar(100) = 'http';\nDECLARE @strEnd varchar(100) = '.gif';\n\n\n\n--select charindex(reverse(@strStart),reverse(left(@body,charindex(@strEnd,@body)+len(@strStart)-1)))+len(@strStart)-1\n\nselect \n--charindex(@strEnd,@body)+len(@strStart)-1 --end\n\ncharindex(@strEnd,@body)+len(@strStart)\n  -(charindex(reverse(@strStart),reverse(left(@body,charindex(@strEnd,@body)+len(@strStart)-1)))+len(@strStart)-1)\n\n--charindex(reverse(@strStart),reverse(left(@body,charindex(@strEnd,@body)+len(@strStart)-1)))+len(@strStart)-1\n\n\n\n--substring(@body,charindex(@strStart,@body),charindex(reverse(@strStart),reverse(left(@body,charindex(@strEnd,@body)+len(@strStart)-1)))+len(@strStart)-1)",
        "CreationDate": "2018-06-14 12:50:14",
        "validated": false,
        "QueryBody_Original": "DECLARE  @body varchar(8000) = 'blah http:\/\/dhdkhjd\/abcd.gif blahl blah alhlshlhskhd';\nDECLARE @strStart varchar(100) = 'http';\nDECLARE @strEnd varchar(100) = '.gif';\n\n\n\n--select charindex(reverse(@strStart),reverse(left(@body,charindex(@strEnd,@body)+len(@strStart)-1)))+len(@strStart)-1\n\nselect \n--charindex(@strEnd,@body)+len(@strStart)-1 --end\n\ncharindex(@strEnd,@body)+len(@strStart)\n  -(charindex(reverse(@strStart),reverse(left(@body,charindex(@strEnd,@body)+len(@strStart)-1)))+len(@strStart)-1)\n\n--charindex(reverse(@strStart),reverse(left(@body,charindex(@strEnd,@body)+len(@strStart)-1)))+len(@strStart)-1\n\n\n\n--substring(@body,charindex(@strStart,@body),charindex(reverse(@strStart),reverse(left(@body,charindex(@strEnd,@body)+len(@strStart)-1)))+len(@strStart)-1)"
    },
    {
        "QuerySetId": 862601,
        "Title": "GENERATE HTML PAGE SHOWING (mostly) ANIMATED GIFS posted in specified # of days",
        "Description": "Creates HTML to paste into blank .html file showing .GIF images (mostly animated GIFs) linked to Q&A posts within \"the past number of days specified\".  Looks for the first occurrence of `.gif` in the post body and searches backwards for `http`...  \r\n\r\nINSTRUCTIONS:   \r\n(1) Run this query, specifying \"number of days back\" (before today) to include in results ...  \r\n(2) Click DOWNLOAD CSV and then SAVE the file ...  \r\n(3) Change file extension from .CSV to .HTML ...  \r\n(4) Double-click file to open in browser.   \r\n\r\nVery Buggy.  Far from perfect.  (Just for fun!)  Max ~180 gifs",
        "QueryBody": "DECLARE  @stStart varchar(100) = 'http';\nDECLARE @stEnd   varchar(100) = '.gif';\n\nselect \n  substring(body, charindex(@stEnd,body)+len(@stStart)\n    -(charindex(reverse(@stStart),reverse(left(body,charindex(@stEnd,body)+len(@stStart)-1)))+len(@stStart)-1),\n    charindex(reverse(@stStart),reverse(left(body,charindex(@stEnd,body)+len(@stStart)-1)))+len(@stStart)-1 )\n    as [GIF URL],\n\n  case \n    when posttypeid = 2 \n    then 'Answer' \n    else 'Question' \n    end as [Post Type],\n  id as [Post Link], \n  creationdate as [Post Date]\n  \nfrom \n  posts\n  \nwhere\n  --owneruserid = 8112776 \n  creationdate >= dateadd(d,-30,getdate())\n  and\n  body like '%' + @stStart + '%' + @stEnd + '%' COLLATE SQL_Latin1_General_CP1_CI_AS  --case insensitive\n\norder by \n  creationdate desc",
        "CreationDate": "2018-06-14 13:59:22",
        "validated": false,
        "QueryBody_Original": "DECLARE  @stStart varchar(100) = 'http';\nDECLARE @stEnd   varchar(100) = '.gif';\n\nselect \n  substring(body, charindex(@stEnd,body)+len(@stStart)\n    -(charindex(reverse(@stStart),reverse(left(body,charindex(@stEnd,body)+len(@stStart)-1)))+len(@stStart)-1),\n    charindex(reverse(@stStart),reverse(left(body,charindex(@stEnd,body)+len(@stStart)-1)))+len(@stStart)-1 )\n    as [GIF URL],\n\n  case \n    when posttypeid = 2 \n    then 'Answer' \n    else 'Question' \n    end as [Post Type],\n  id as [Post Link], \n  creationdate as [Post Date]\n  \nfrom \n  posts\n  \nwhere\n  --owneruserid = 8112776 \n  creationdate >= dateadd(d,-30,getdate())\n  and\n  body like '%' + @stStart + '%' + @stEnd + '%' COLLATE SQL_Latin1_General_CP1_CI_AS  --case insensitive\n\norder by \n  creationdate desc"
    },
    {
        "QuerySetId": 863199,
        "Title": "PEOPLE REACHED v.2 (approximately accurate?!)",
        "Description": "\"Impact\" from profile page, broken down to post-level detail - showing which posts were or were not included in the \"People Reached\" metric. All Q&A's included are listed for specified user except deleted.",
        "QueryBody": "SELECT  \n  creationdate,\n  id,\n  parentid,\n  score\ninto #eligibleAnswers from posts\nwhere\n  owneruserid = ##UserID##\n  and posttypeid = 2\n  and deletiondate is null\n  and score > 0 \norder by creationdate\n-----------------------------314 answers returned\n\nSELECT \n  a.creationdate,\n  a.id,\n  a.parentid,\n  a.score,\n  q.id as [Post Link],\n  case when a.id = q.acceptedanswerid then 1 else 0 end as [1of4:IsAccepted],\n  case when a.score >= 5 then 1 else 0 end as [2of4:ScoreMin5]\n  \nfrom\n  #eligibleAnswers a left outer join posts q\n  on a.parentid = q.id\nwhere q.posttypeid = 1\n-----------------------------314 answers returned",
        "CreationDate": "2018-06-15 08:23:45",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 863277,
        "Title": "Get all answers by a deleted user, together with questions",
        "Description": null,
        "QueryBody": "SELECT  a.CreationDate, a.Id, b.Id as [Post Link], b.Title, b.Body as Question, a.Body, a.Score as Answer FROM Posts a\nINNER JOIN Posts b\nON a.ParentId=b.Id\nWHERE a.OwnerDisplayName=##Name:string##\nORDER BY a.CreationDate ASC",
        "CreationDate": "2018-06-16 00:06:12",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 863357,
        "Title": "Occurrences of a tag, per date (month, year)",
        "Description": null,
        "QueryBody": "SELECT  \n  sub.YMDate, \n  sub.Occurrences \nFROM (\n  SELECT DATEPART(Year, CreationDate) Year, DATEPART(Month, CreationDate) Month, \n    CAST(\n      CAST(DATEPART(Year, CreationDate) AS varchar) + \n      '-' + \n      CAST(DATEPART(Month, CreationDate) AS varchar) + \n      '-1' AS DATETIME) YMDate, \n     COUNT(Id) [Occurrences]\n  FROM \n    Posts \n  WHERE \n    PostTypeId = 1 \n    AND Tags LIKE '%' + ##tag:string?math## + '%'\n  GROUP BY \n    DATEPART(Year, CreationDate), DATEPART(Month, CreationDate)\n   ) sub\nORDER BY\n  sub.YMDate",
        "CreationDate": "2018-06-16 00:51:24",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 863480,
        "Title": "Users who favorited posts answered by an user",
        "Description": null,
        "QueryBody": "SELECT  P.Id as [Post Link], UV.Id as [User Link]\nfrom Votes V\ninner join Posts P on P.ParentId = V.PostId\ninner join Users UV on UV.Id = V.UserId\ninner join Users UA on UA.Id = P.OwnerUserId\nwhere UA.Id = ##UserId##\n  and P.PostTypeId = 2\n  and V.VoteTypeId = 5\norder by P.Id, UV.DisplayName\n-- order by case when ##SortByPosts?0## = 1 then P.Title else UV.DisplayName end",
        "CreationDate": "2018-06-16 18:21:12",
        "validated": false,
        "QueryBody_Original": "SELECT  P.Id as [Post Link], UV.Id as [User Link]\nfrom Votes V\ninner join Posts P on P.ParentId = V.PostId\ninner join Users UV on UV.Id = V.UserId\ninner join Users UA on UA.Id = P.OwnerUserId\nwhere UA.Id = ##UserId##\n  and P.PostTypeId = 2\n  and V.VoteTypeId = 5\norder by P.Id, UV.DisplayName\n-- order by case when ##SortByPosts?0## = 1 then P.Title else UV.DisplayName end"
    },
    {
        "QuerySetId": 864220,
        "Title": "List of all users who downvoted you",
        "Description": null,
        "QueryBody": "SELECT  DisplayName as [User], Reputation\nFROM Users u, Votes v , Posts p\nWHERE u.Id=v.UserID\nAND v.PostId=p.Id\nAND p.OwnerUserId=##UserId##\nAND BountyAmount=0",
        "CreationDate": "2018-06-19 04:09:41",
        "validated": false,
        "QueryBody_Original": "SELECT  DisplayName as [User], Reputation\nFROM Users u, Votes v , Posts p\nWHERE u.Id=v.UserID\nAND v.PostId=p.Id\nAND p.OwnerUserId=##UserId##\nAND BountyAmount=0"
    },
    {
        "QuerySetId": 864363,
        "Title": "What are my most-viewed answers",
        "Description": null,
        "QueryBody": "SELECT  Top 100 questions.Id As [Post Link], questions.ViewCount\nFrom posts As questions\nLEFT JOIN posts As answers ON answers.ParentId = questions.Id\nWHERE questions.OwnerUserId = ##UserId## OR answers.OwnerUserID = ##UserId##\nORDER BY questions.ViewCount DESC",
        "CreationDate": "2018-06-19 12:44:34",
        "validated": false,
        "QueryBody_Original": "SELECT  Top 100 questions.Id As [Post Link], questions.ViewCount\nFrom posts As questions\nLEFT JOIN posts As answers ON answers.ParentId = questions.Id\nWHERE questions.OwnerUserId = ##UserId## OR answers.OwnerUserID = ##UserId##\nORDER BY questions.ViewCount DESC"
    },
    {
        "QuerySetId": 864653,
        "Title": "Users with highest badgesCount \/ rep ratio",
        "Description": null,
        "QueryBody": "SELECT  TOP 10 UserId AS [User Link],\n      (SELECT Reputation FROM Users WHERE Id=UserId) AS Reputation,\n      COUNT(*) AS [Total Badges],\n      cast(Count(*) as float)\/(SELECT Reputation FROM Users WHERE Id=UserId) As Ratio\n    FROM Badges\n    WHERE (SELECT Reputation FROM Users WHERE Id=UserId) >= ##MinScore:int##\n    GROUP BY UserId\n    ORDER BY Ratio DESC",
        "CreationDate": "2018-06-20 00:32:01",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 864654,
        "Title": "Users with highest badgesCount \/ rep ratio who didn't spend rep on bounties",
        "Description": null,
        "QueryBody": "SELECT  TOP 10 UserId AS [User Link],\n      (SELECT Reputation FROM Users WHERE Id=UserId) AS Reputation,\n      COUNT(*) AS [Total Badges],\n      cast(Count(*) as float)\/(SELECT Reputation FROM Users WHERE Id=UserId) As Ratio\n    FROM Badges\n    WHERE ((SELECT Reputation FROM Users WHERE Id=UserId) >= ##MinScore:int##)\n    AND\n    ((SELECT SUM(BountyAmount) FROM Votes WHERE Votes.UserId = Badges.UserId) is null)\n    GROUP BY UserId\n    ORDER BY Ratio DESC",
        "CreationDate": "2018-06-20 00:59:18",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 864771,
        "Title": "Search comments by any keyword",
        "Description": null,
        "QueryBody": "SELECT    TOP ##numberofcomments## c.text, \n         c.id                     AS [Comment Link], \n         creationdate \nFROM     comments c \nWHERE    c.text LIKE '%##keyword1##%' \nAND      len(c.text) <= 25 \nORDER BY creationdate desc",
        "CreationDate": "2019-12-12 11:29:53",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 866374,
        "Title": "Select questions of a given age, with no answer and a descent score",
        "Description": null,
        "QueryBody": "SELECT \n  p.id as [Post Link],\n  title,\n  p.tags as Tags,\n  p.ViewCount as \"Views\", \n  p.score as \"Score\", \n  p.AnswerCount as \"Answers\", \n  DATEDIFF(day,p.CreationDate,getdate()) as \"Age (days)\",\n  p.AcceptedAnswerId as \"Answer Accepted?\"\n\nfrom posts p\n\nwhere\n\n  p.AnswerCount = 0 and\n  DATEDIFF(day,p.CreationDate,getdate()) < ##maxage:int?120## and\n  DATEDIFF(day,p.CreationDate,getdate()) > ##minage:int?20## and\n  p.score > ##minscore:int?5## \n  \n\norder by p.score desc, p.viewcount desc;",
        "CreationDate": "2018-06-23 21:50:59",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 866550,
        "Title": "Users by average score per post type",
        "Description": null,
        "QueryBody": "SELECT  TOP 1000\n  RANK() OVER (ORDER BY AVG(CAST(Score AS FLOAT) \/ DATEDIFF(DAY, CreationDate, GETDATE())) DESC) AS 'Rank',\n  OwnerUserId AS [User Link],\n  ROUND(AVG(CAST(Score AS FLOAT) \/ DATEDIFF(DAY, CreationDate, GETDATE())), 2) AS 'Average score per day',\n  COUNT(*) AS '# of posts'\n  FROM Posts\n  WHERE PostTypeId = ##PostTypeId:int?1##\n    AND DATEDIFF(DAY, CreationDate, GETDATE()) > 0\n  GROUP BY OwnerUserId\n  ORDER BY AVG(CAST(Score AS FLOAT) \/ DATEDIFF(DAY, CreationDate, GETDATE())) DESC",
        "CreationDate": "2018-06-24 21:46:33",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 866560,
        "Title": "Comments on a given post",
        "Description": null,
        "QueryBody": "SELECT  c.Id AS [Comment Link], c.text, c.CreationDate, c.UserId as [User Link], c.PostId as [Post Link]\nFROM Comments c\nWHERE c.PostId=##postid##\nORDER BY CreationDate",
        "CreationDate": "2018-06-24 23:40:02",
        "validated": false,
        "QueryBody_Original": "SELECT  c.Id AS [Comment Link], c.text, c.CreationDate, c.UserId as [User Link], c.PostId as [Post Link]\nFROM Comments c\nWHERE c.PostId=##postid##\nORDER BY CreationDate"
    },
    {
        "QuerySetId": 866638,
        "Title": "TAG BADGES: Which ones are close, which are up next, and what you need for GOLD tag badge",
        "Description": null,
        "QueryBody": "SELECT \n  t.tagname    as [Tag], \n  count(a.id)  as [nAnswers],\n  sum(a.score) as [tScore]\ninto #temp\nfrom posts a\n  left outer join posttags pt on a.parentid = pt.postid\n  join tags t on pt.tagid = t.id\nwhere \n  a.posttypeid = 2\n  and a.owneruserid = ##UserID##\n  and a.deletiondate is null \n  and a.communityowneddate is null\ngroup by t.tagname\nhaving count(a.id) >= 5 and sum(a.score) >= 25 --min 25% to Bronze Level\norder by count(a.id) + sum(a.score) desc\n\n\nSELECT \n  tag,\n  nanswers,\n  tscore,\n  \n  case \n    when tscore >= 1000 and nanswers >= 200 then 'Gold'\n    when tscore >= 400 and nanswers >= 80 then 'Silver'\n    when tscore >= 100 and nanswers >= 20 then 'Bronze'\n    else ''\n  end as [Badge (lastSunday)]\nfrom #temp",
        "CreationDate": "2018-06-25 10:49:50",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 866738,
        "Title": "my answers not tagged vba that should be",
        "Description": null,
        "QueryBody": "SELECT  a.parentid as [Post Link], q.tags, a.score\nfrom posts q left outer join posts a\non q.id = a.parentid\nwhere a.owneruserid = ##UserID##\nand q.tags like '%<excel-vba>%'  --could also look for <excel> and\/or the word 'code' in the body, etc\nand not q.tags like '%<vba>%'\norder by a.score desc",
        "CreationDate": "2018-06-25 15:25:40",
        "validated": false,
        "QueryBody_Original": "SELECT  a.parentid as [Post Link], q.tags, a.score\nfrom posts q left outer join posts a\non q.id = a.parentid\nwhere a.owneruserid = ##UserID##\nand q.tags like '%<excel-vba>%'  --could also look for <excel> and\/or the word 'code' in the body, etc\nand not q.tags like '%<vba>%'\norder by a.score desc"
    },
    {
        "QuerySetId": 866756,
        "Title": "User answers sorted by quality",
        "Description": null,
        "QueryBody": "SELECT  TOP 34100 \n    Q.Id AS [Post Link], A.CreationDate, A.Score, Q.ViewCount,\n    COALESCE(CAST(A.Score AS FLOAT)\/NULLIF(Q.ViewCount, 0), 0) AS Traffic\nFROM Posts Q\nJOIN Posts A ON A.ParentId = Q.Id\nWHERE A.PostTypeId = 2 AND A.OwnerUserId = ##UserId##\nORDER BY A.Score DESC",
        "CreationDate": "2018-06-25 17:26:31",
        "validated": false,
        "QueryBody_Original": "SELECT  TOP 34100 \n    Q.Id AS [Post Link], A.CreationDate, A.Score, Q.ViewCount,\n    COALESCE(CAST(A.Score AS FLOAT)\/NULLIF(Q.ViewCount, 0), 0) AS Traffic\nFROM Posts Q\nJOIN Posts A ON A.ParentId = Q.Id\nWHERE A.PostTypeId = 2 AND A.OwnerUserId = ##UserId##\nORDER BY A.Score DESC"
    },
    {
        "QuerySetId": 866776,
        "Title": "Count of unique users who ever touched a VBA question or answer",
        "Description": "Including ask, answer, last editor for Q or A, comment on Q or A, all time, all tags that include 'VBA'",
        "QueryBody": "SELECT  count(*)\nfrom posts\nwhere tags like '%<excel-vba>%'\nand tags not like '%<excel-vba>%'*\/\n\nSELECT tagname, [count] from tags where tagname like '%vba%' order by [count] desc\n\n\n--so users 9011314\n--unique users who touched any vba question ever 68804\n\/*\nSELECT distinct owneruserid as id\ninto #temp\nfrom posts\nwhere tags like '%vba%'\n\nSELECT count(id) from #temp*\/",
        "CreationDate": "2018-06-25 17:04:22",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 866803,
        "Title": "User questions sorted by quality",
        "Description": null,
        "QueryBody": "SELECT  Id AS [Post Link], CreationDate, Score, ViewCount, cast(Score as float)\/ViewCount as Quality\nFROM Posts\nWHERE Id IN (\n        SELECT ParentId\n        FROM Posts\n        WHERE PostTypeId = 1\n            AND OwnerUserId = ##UserId##\n        )\nORDER BY Quality DESC;",
        "CreationDate": "2018-06-25 16:51:06",
        "validated": false,
        "QueryBody_Original": "SELECT  Id AS [Post Link], CreationDate, Score, ViewCount, cast(Score as float)\/ViewCount as Quality\nFROM Posts\nWHERE Id IN (\n        SELECT ParentId\n        FROM Posts\n        WHERE PostTypeId = 1\n            AND OwnerUserId = ##UserId##\n        )\nORDER BY Quality DESC;"
    },
    {
        "QuerySetId": 866925,
        "Title": "Number of users interested in either of the two tags and in both of them",
        "Description": null,
        "QueryBody": "SELECT  count(*)\nfrom (\nSELECT count(*) as Nq, OwnerUserId from\nPosts\njoin PostTags on Posts.Id = PostTags.PostId\njoin Tags on PostTags.TagId = Tags.Id\nwhere Tags.TagName = 'excel-vba'\ngroup by OwnerUserId\n) as ExcelVba\njoin Users on ExcelVba.OwnerUserId = Users.Id\nwhere ExcelVba.Nq >= 5\n\nSELECT count(*)\nfrom (\nSELECT count(*) as Nq, OwnerUserId from\nPosts\njoin PostTags on Posts.Id = PostTags.PostId\njoin Tags on PostTags.TagId = Tags.Id\nwhere Tags.TagName = 'word-vba'\ngroup by OwnerUserId\n) as ExcelVba\njoin Users on ExcelVba.OwnerUserId = Users.Id\nwhere ExcelVba.Nq >= 5",
        "CreationDate": "2018-06-26 00:49:39",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 867116,
        "Title": "Posts counting for Copy Editor badge",
        "Description": null,
        "QueryBody": "SELECT  DISTINCT(p.Id) AS [Post Link]\n  FROM Users AS u\n  INNER JOIN PostHistory AS h ON u.Id = h.UserId\n  INNER JOIN Posts AS p ON p.Id = h.PostId\n  WHERE u.AccountId = ##AccountId:int##\n    AND h.PostHistoryTypeId IN (4, 5) -- Edit Title, Edit Body\n    \n    AND (p.OwnerUserId IS NULL OR\n         p.OwnerUserId != u.Id OR\n         p.PostTypeId NOT IN (1, 2))\n    -- exclude own questions and answers",
        "CreationDate": "2018-06-26 12:38:46",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 867169,
        "Title": "what percentage of users have reached 10K Reputation?",
        "Description": null,
        "QueryBody": "SELECT  \n  format(\n    cast(sum(case when reputation >##RepCriteria:int?10000## then 1 else 0 end ) as decimal)\n      \/ count(*)\n      , '00.000%') as [percent]\nfrom users \n\n--RepCriteria:Enter the minimum reputation to find out what % of users have reached it",
        "CreationDate": "2018-06-26 14:50:35",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 867588,
        "Title": "Get the median question score for a tag",
        "Description": null,
        "QueryBody": "WITH -sq\/\nSELECT ((\n  SELECT TOP 1 Score\n  FROM (\n    SELECT TOP 50 PERCENT Score\n    FROM Posts p\n    WHERE\n      p.PostTypeId = 2 AND\n      Score IS NOT NULL\n    ORDER BY Score\n    ) AS A\n  ORDER BY Score DESC) + \n  (\n  SELECT TOP 1 Score\n    FROM (\n      SELECT TOP 50 PERCENT Score\n      FROM Posts p\n      WHERE \n        p.PostTypeId = 2 AND\n        Score IS NOT NULL\n      ORDER BY Score DESC\n    ) AS A\n  ORDER BY Score Asc)) \/ 2;",
        "CreationDate": "2018-12-20 14:44:55",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 867798,
        "Title": "my answers not tagged <excel> THAT SHOULD BE",
        "Description": null,
        "QueryBody": "SELECT  a.parentid as [Post Link], q.tags, a.score\nfrom posts q left outer join posts a\n  on q.id = a.parentid\nwhere a.owneruserid = ##UserID##\n  and q.tags like '%excel%' and not q.tags like '%<excel>%'  --contains an excel-related tag but not the <excel> tag\norder by a.score desc",
        "CreationDate": "2018-06-27 20:19:22",
        "validated": false,
        "QueryBody_Original": "SELECT  a.parentid as [Post Link], q.tags, a.score\nfrom posts q left outer join posts a\n  on q.id = a.parentid\nwhere a.owneruserid = ##UserID##\n  and q.tags like '%excel%' and not q.tags like '%<excel>%'  --contains an excel-related tag but not the <excel> tag\norder by a.score desc"
    },
    {
        "QuerySetId": 867826,
        "Title": "How many access tag removals have I done?",
        "Description": null,
        "QueryBody": "SELECT  COUNT(*) \nFROM PostHistory po \nINNER JOIN PostHistory pe ON po.PostId=pe.PostID \nWHERE po.PostHistoryTypeId = 3 AND pe.PostHistoryTypeId=6 \nAND po.Text LIKE '%<access>%' AND pe.Text NOT LIKE '%<access%>'\nAND pe.CreationDate > '2018-05-01' AND pe.CreationDate < '2018-06-01'\nAND pe.UserId = ##UserId##",
        "CreationDate": "2018-06-27 23:23:16",
        "validated": false,
        "QueryBody_Original": "SELECT  COUNT(*) \nFROM PostHistory po \nINNER JOIN PostHistory pe ON po.PostId=pe.PostID \nWHERE po.PostHistoryTypeId = 3 AND pe.PostHistoryTypeId=6 \nAND po.Text LIKE '%<access>%' AND pe.Text NOT LIKE '%<access%>'\nAND pe.CreationDate > '2018-05-01' AND pe.CreationDate < '2018-06-01'\nAND pe.UserId = ##UserId##"
    },
    {
        "QuerySetId": 869143,
        "Title": "Answers for a certain tag (by year)",
        "Description": null,
        "QueryBody": "SELECT \n    a.Id AS [Post Link],\n    a.Id,\n    q.Title,\n    a.CreationDate,\n    a.Score,\n    q.ViewCount AS [Views],\n    CASE WHEN a.Id = q.AcceptedAnswerId THEN 1 ELSE 0 END AS Accepted,\n    q.Tags\n FROM Posts a\n LEFT JOIN Posts q ON q.Id = a.ParentId\nWHERE a.PostTypeId = 2 -- Answer\n  AND a.OwnerUserId = ##UserId##\n  AND q.Tags like '%<##Tag##>%'\n  AND Year(a.CreationDate) = ##Year##\nORDER BY a.CreationDate DESC",
        "CreationDate": "2018-07-02 03:27:39",
        "validated": false,
        "QueryBody_Original": "SELECT \n    a.Id AS [Post Link],\n    a.Id,\n    q.Title,\n    a.CreationDate,\n    a.Score,\n    q.ViewCount AS [Views],\n    CASE WHEN a.Id = q.AcceptedAnswerId THEN 1 ELSE 0 END AS Accepted,\n    q.Tags\n FROM Posts a\n LEFT JOIN Posts q ON q.Id = a.ParentId\nWHERE a.PostTypeId = 2 -- Answer\n  AND a.OwnerUserId = ##UserId##\n  AND q.Tags like '%<##Tag##>%'\n  AND Year(a.CreationDate) = ##Year##\nORDER BY a.CreationDate DESC"
    },
    {
        "QuerySetId": 869410,
        "Title": "Most common letters used in posts",
        "Description": "absolutely useless, more of an experiment",
        "QueryBody": "SELECT \n  owneruserid,\n  sum(len(body)-len(replace(lower(body),'a',''))) as [a]\n  \nfrom posts\nwhere owneruserid in (##UserID##)\ngroup by owneruserid",
        "CreationDate": "2018-07-02 16:53:39",
        "validated": false,
        "QueryBody_Original": "SELECT \n  owneruserid,\n  sum(len(body)-len(replace(lower(body),'a',''))) as [a]\n  \nfrom posts\nwhere owneruserid in (##UserID##)\ngroup by owneruserid"
    },
    {
        "QuerySetId": 869431,
        "Title": "Numbers most used in posts",
        "Description": "totally useless. more of an experiment.",
        "QueryBody": "SELECT \n  owneruserid as [User Link],\n  owneruserid,\n  sum(len(body)) as totalLen,\n  sum(len(body)-len(replace(lower(body),'1',''))) as [1],\n  sum(len(body)-len(replace(lower(body),'2',''))) as [2],\n  sum(len(body)-len(replace(lower(body),'3',''))) as [3],\n  sum(len(body)-len(replace(lower(body),'4',''))) as [4],\n  sum(len(body)-len(replace(lower(body),'5',''))) as [5],\n  sum(len(body)-len(replace(lower(body),'6',''))) as [6],\n  sum(len(body)-len(replace(lower(body),'7',''))) as [7],\n  sum(len(body)-len(replace(lower(body),'8',''))) as [8],\n  sum(len(body)-len(replace(lower(body),'9',''))) as [9],\n  sum(len(body)-len(replace(lower(body),'0',''))) as [0]\n\nfrom posts\nwhere owneruserid in (##UserID##)\ngroup by owneruserid",
        "CreationDate": "2018-07-02 17:45:48",
        "validated": false,
        "QueryBody_Original": "SELECT \n  owneruserid as [User Link],\n  owneruserid,\n  sum(len(body)) as totalLen,\n  sum(len(body)-len(replace(lower(body),'1',''))) as [1],\n  sum(len(body)-len(replace(lower(body),'2',''))) as [2],\n  sum(len(body)-len(replace(lower(body),'3',''))) as [3],\n  sum(len(body)-len(replace(lower(body),'4',''))) as [4],\n  sum(len(body)-len(replace(lower(body),'5',''))) as [5],\n  sum(len(body)-len(replace(lower(body),'6',''))) as [6],\n  sum(len(body)-len(replace(lower(body),'7',''))) as [7],\n  sum(len(body)-len(replace(lower(body),'8',''))) as [8],\n  sum(len(body)-len(replace(lower(body),'9',''))) as [9],\n  sum(len(body)-len(replace(lower(body),'0',''))) as [0]\n\nfrom posts\nwhere owneruserid in (##UserID##)\ngroup by owneruserid"
    },
    {
        "QuerySetId": 869433,
        "Title": "Post with Close Votes by given user",
        "Description": null,
        "QueryBody": "SELECT  PostId as [Post Link] FROM PostHistory WHERE PostHistoryTypeId = 10 AND Text LIKE '%\"Id\":' + CAST(##UserId## AS nvarchar) + ',%'",
        "CreationDate": "2018-07-02 17:48:09",
        "validated": false,
        "QueryBody_Original": "SELECT  PostId as [Post Link] FROM PostHistory WHERE PostHistoryTypeId = 10 AND Text LIKE '%\"Id\":' + CAST(##UserId## AS nvarchar) + ',%'"
    },
    {
        "QuerySetId": 869793,
        "Title": "Top Total Score From Comments",
        "Description": null,
        "QueryBody": "SELECT  \nuserid as [User Link],\nsum(score) as [Total Score],\ncount(*) as [#Comments]\nfrom comments\nwhere userid in (##UserID##)\ngroup by userid\norder by sum(score) desc",
        "CreationDate": "2018-07-03 07:37:32",
        "validated": false,
        "QueryBody_Original": "SELECT  \nuserid as [User Link],\nsum(score) as [Total Score],\ncount(*) as [#Comments]\nfrom comments\nwhere userid in (##UserID##)\ngroup by userid\norder by sum(score) desc"
    },
    {
        "QuerySetId": 869875,
        "Title": "ALL COMMENT \"@MENTIONS\" By Specific User (IN & OUT)",
        "Description": "messy.",
        "QueryBody": "SELECT \n  substring(text,charindex('@',text) , \n    iif( charindex(' ',text, charindex('@',text))-charindex('@',text) <= 0 ,\n    len(text)-charindex('@',text) ,\n    charindex(' ',text, charindex('@',text))-charindex('@',text)  ) ) as [Mention]\ninto #temp\nfrom comments \nwhere \n  text like '%@%' and userid = ##UserID##\n\n\n\n\nSELECT \n  'ashleedawg > ' as [from User],replace(replace(Mention,',',''),'''s','') as [to user], \n  count(*) as [count]\nfrom #temp \nwhere len(Mention)>2\ngroup by replace(replace(Mention,',',''),'''s','')\norder by count(*) desc",
        "CreationDate": "2018-07-03 16:15:37",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 870300,
        "Title": "LLIST ALL ANSWERS FOR SPECIFIED USER",
        "Description": "Also cleans unneeded characters ",
        "QueryBody": "SELECT    \n  id as [Post Link],\n  format(creationdate ,'yyyy-MM-dd') as [Answered],\n  score as [Score], \n  replace(replace(replace(replace(replace(replace(replace(\n      body,'\"',''),char(13),''),char(10),''),'<p>',''),'<\/p>',''),'  ',' '),'  ',' ') as [Body]\nfrom posts\nwhere \n  owneruserid = ##UserID##\n  and posttypeid=2\norder by creationdate desc\n\n\n--UserID:Enter a numeric User ID:",
        "CreationDate": "2018-07-05 21:31:49",
        "validated": false,
        "QueryBody_Original": "SELECT    \n  id as [Post Link],\n  format(creationdate ,'yyyy-MM-dd') as [Answered],\n  score as [Score], \n  replace(replace(replace(replace(replace(replace(replace(\n      body,'\"',''),char(13),''),char(10),''),'<p>',''),'<\/p>',''),'  ',' '),'  ',' ') as [Body]\nfrom posts\nwhere \n  owneruserid = ##UserID##\n  and posttypeid=2\norder by creationdate desc\n\n\n--UserID:Enter a numeric User ID:"
    },
    {
        "QuerySetId": 870602,
        "Title": "My Activity in Sri Lankan time",
        "Description": null,
        "QueryBody": "SELECT \n datepart(hour,creationdate)+5.30 AS hour,\n count(CASE WHEN posttypeid = 1 THEN 1 END) AS questions,\n count(CASE WHEN posttypeid = 2 THEN 1 END) AS answers\nFROM posts\nWHERE\n  posttypeid IN (1,2) AND\n  OwnerUserId=##UserID##\nGROUP BY datepart(hour,creationdate)+5.30\nORDER BY hour",
        "CreationDate": "2018-07-05 14:13:49",
        "validated": false,
        "QueryBody_Original": "SELECT \n datepart(hour,creationdate)+5.30 AS hour,\n count(CASE WHEN posttypeid = 1 THEN 1 END) AS questions,\n count(CASE WHEN posttypeid = 2 THEN 1 END) AS answers\nFROM posts\nWHERE\n  posttypeid IN (1,2) AND\n  OwnerUserId=##UserID##\nGROUP BY datepart(hour,creationdate)+5.30\nORDER BY hour"
    },
    {
        "QuerySetId": 870668,
        "Title": "Cumulative Historical User Count (Monthly)",
        "Description": "Run query and then click the GRAPH tab, or link to graph directly: \r\n https:\/\/data.stackexchange.com\/stackoverflow\/query\/870668#graph  \r\n",
        "QueryBody": "SELECT  \n  eomonth(creationdate) as [Month], \n  sum(count(id)) over (order by eomonth(creationdate)) as [Total#Users]\ninto #usersMonthly from users\ngroup by eomonth(creationdate)\n\nSELECT \n  eomonth(creationdate) as [Month], \n  sum(count(id)) over (order by eomonth(creationdate)) as [Total#Posts],\n  sum(sum(score)) over (order by eomonth(creationdate)) as [TotalScore]  \ninto #postsMonthly from posts\ngroup by eomonth(creationdate)\n\nSELECT\n  u.[Month] as [Month],\n  [Total#Users],\n  [Total#Posts],\n  round(1.0*[Total#Posts]\/[Total#Users],1) as [Posts\/User],\n  TotalScore, --<<<<\n  round(1.0*TotalScore\/[Total#Posts],1) as AvgScore --*cumulative* average score\nfrom #usersMonthly p join #postsMonthly u on p.[Month] = u.[Month]\norder by u.[Month]",
        "CreationDate": "2018-07-23 23:48:36",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 870820,
        "Title": "Top Viewed Posts Since Last Year",
        "Description": null,
        "QueryBody": "SELECT  TOP 10 Title, ViewCount, Score, Tags, CommentCount\nFROM Posts\nWHERE CreationDate > DATEADD(year, -1, GETDATE())\nORDER BY ViewCount DESC",
        "CreationDate": "2018-07-05 22:56:02",
        "validated": false,
        "QueryBody_Original": "SELECT  TOP 10 Title, ViewCount, Score, Tags, CommentCount\nFROM Posts\nWHERE CreationDate > DATEADD(year, -1, GETDATE())\nORDER BY ViewCount DESC"
    },
    {
        "QuerySetId": 870830,
        "Title": "answers with code that aren't tagged that way - for specific user(s)",
        "Description": null,
        "QueryBody": "SELECT \n  a.id as [Post Link],\n  --a.creationdate,\n  q.tags,\n  a.score,\n  --q.viewcount,\n  replace(a.body,char(10),'') as [Body]\n  from posts a left outer join posts q\n  on a.parentid = q.id\nwhere a.owneruserid in (##UserID##)\n  and a.posttypeid=2\n  and  ( a.body like '%Sub %' or  a.body like '%Function %' )\n  --and  ( a.body like '%vba%'COLLATE SQL_Latin1_General_CP1_CI_AS  or q.body like '%vba%' COLLATE SQL_Latin1_General_CP1_CI_AS ) \n  --and ( a.body like '%<code>%' or q.body like '%<code>%' )\n  and not q.tags like '%vba%'\norder by a.score desc",
        "CreationDate": "2018-07-06 00:31:07",
        "validated": false,
        "QueryBody_Original": "SELECT \n  a.id as [Post Link],\n  --a.creationdate,\n  q.tags,\n  a.score,\n  --q.viewcount,\n  replace(a.body,char(10),'') as [Body]\n  from posts a left outer join posts q\n  on a.parentid = q.id\nwhere a.owneruserid in (##UserID##)\n  and a.posttypeid=2\n  and  ( a.body like '%Sub %' or  a.body like '%Function %' )\n  --and  ( a.body like '%vba%'COLLATE SQL_Latin1_General_CP1_CI_AS  or q.body like '%vba%' COLLATE SQL_Latin1_General_CP1_CI_AS ) \n  --and ( a.body like '%<code>%' or q.body like '%<code>%' )\n  and not q.tags like '%vba%'\norder by a.score desc"
    },
    {
        "QuerySetId": 871417,
        "Title": "Users who have Answered the MOST DUPLICATE QUESTIONS",
        "Description": "Count of ANSWERS TO DUPLICATE QUESTIONS by user.  (Limited to users with at least 50 answers to questions currently marked as duplicate.)\r\n\r\nUser level detail: https:\/\/data.stackexchange.com\/stackoverflow\/query\/871421",
        "QueryBody": "SELECT  postid\ninto #dupes \nfrom PostLinks \nwhere linktypeid=3  --656,000 duplicates\n\nSELECT owneruserid, count(*) as [#DupesAnswered]\ninto #dupeAnswers \nfrom posts p inner join #dupes d\non p.parentid = d.postid\nwhere posttypeid=2 and owneruserid is not null\ngroup by owneruserid\nhaving count(*)>50\n\nSELECT owneruserid as [User Link], [#DupesAnswered] \nfrom #dupeAnswers \norder by [#DupesAnswered] desc",
        "CreationDate": "2018-07-07 16:38:02",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 871726,
        "Title": "BOUNTY HUNTER's LEDGER: Bounty Paid or Collected (for specified user)",
        "Description": "FAQ: https:\/\/stackoverflow.com\/help\/bounty",
        "QueryBody": "SELECT  \n  'Bounty earned' as [Type],\n  p.owneruserid,\n  v.postid, \n  votetypeid, \n  bountyamount as rep, \n  v.creationdate\nfrom votes v left outer join posts p\n  on v.postid= p.id\nwhere p.owneruserid=##UserID##  \nand votetypeid in (8,9)\n  and bountyamount is not null\n\/*\nSELECT \n  'Bounty awarded to others' as [Type],\n  userid,\n  creationdate\n  postid,\n  0 - bountyamount as rep\nfrom votes\nwhere votetypeid=9 \n  and userid = ##UserID##\n  and bountyamount is not null",
        "CreationDate": "2018-07-09 10:09:46",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 871733,
        "Title": "WHO'S YOUR BIGGEST FAN? (Who's \u2606favourite'd your posts the most?) \u2764 ",
        "Description": "(includes fav's on your questions) and (fav's on questions after you answered them) including you fav'ing your own posts.  \r\n\r\nQUERY HAS 2 TABS:  \r\n  Tab#1 = Summary,  \r\n  Tab#2 = Detail,   \r\n  Tab#3 + CHART = Fav's by month\/year,  \r\n  Tab#4 = Fav's by Type  \r\n",
        "QueryBody": "SELECT  \n  case when p.owneruserid=v.userid then 'You fav''d your own Q' else\n    'User fav''d your question' end as [Type],\n  v.creationdate,\n  p.owneruserid,\n  v.userid,\n  v.postid\nfrom votes v left outer join posts p\n  on v.postid=p.id \nwhere p.owneruserid=##UserID##  \nand votetypeid=5\n\nunion\n\nSELECT \n  case when p.owneruserid=v.userid then 'You fav''d Q you answered' else\n     'User fav''d Q you answered' end as [Type],\n  v.creationdate,\n  p.owneruserid,\n  v.userid,\n  v.postid\nfrom votes v left outer join posts p\n  on v.postid= p.parentid\nwhere p.owneruserid=##UserID##  \nand votetypeid=5\n\norder by v.creationdate",
        "CreationDate": "2018-07-09 10:29:26",
        "validated": false,
        "QueryBody_Original": "SELECT  \n  case when p.owneruserid=v.userid then 'You fav''d your own Q' else\n    'User fav''d your question' end as [Type],\n  v.creationdate,\n  p.owneruserid,\n  v.userid,\n  v.postid\nfrom votes v left outer join posts p\n  on v.postid=p.id \nwhere p.owneruserid=##UserID##  \nand votetypeid=5\n\nunion\n\nSELECT \n  case when p.owneruserid=v.userid then 'You fav''d Q you answered' else\n     'User fav''d Q you answered' end as [Type],\n  v.creationdate,\n  p.owneruserid,\n  v.userid,\n  v.postid\nfrom votes v left outer join posts p\n  on v.postid= p.parentid\nwhere p.owneruserid=##UserID##  \nand votetypeid=5\n\norder by v.creationdate"
    },
    {
        "QuerySetId": 871882,
        "Title": "ratio of up vs down votes received",
        "Description": null,
        "QueryBody": "SELECT  \nowneruserid,\nsum(case when votetypeid=2 then 1 else 0 end) as UpVotes,\nsum(case when votetypeid=3 then 1 else 0 end) as DownVotes\ninto #temp \nfrom votes v join posts p \non p.id = v.postid\nwhere votetypeid in (2,3) and v.creationdate >= dateadd(d,-30,getdate())\ngroup by owneruserid\n\nSELECT \n  owneruserid ,\n  UpVotes,\n  DownVotes,\n  upvotes\/(upvotes+downvotes) as [UpVotePercent]\ninto #temp2 from #temp\norder by  upvotes\/(upvotes+downvotes) \n\n\nSELECT \navg([UpVotePercent])\nfrom #temp2\n\n\nSELECT owneruserid  --as [User Link], * \nfrom #temp2",
        "CreationDate": "2018-07-09 17:25:42",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 872506,
        "Title": "Comments within 24 hours by high-rep users",
        "Description": null,
        "QueryBody": "SELECT  Cast(c.CreationDate As Date) As Days, Count(c.Id) As CountOfComments\nFROM Comments c\nINNER JOIN Users u ON c.UserId = u.Id\nWHERE u.Reputation > ##HighRepBorder:int##\nAND EXISTS (SELECT 1 FROM Posts p WHERE DATEDIFF(hh, p.CreationDate, c.CreationDate) < 24 And p.Id = c.PostId)\nGROUP BY Cast(c.CreationDate As Date)\nORDER BY Cast(c.CreationDate As Date)",
        "CreationDate": "2018-07-11 00:03:55",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 872523,
        "Title": "\"Your Activity Summary\" LAST FEW WEEK'S DASHBOARD for specified user",
        "Description": "[Questions], [Answers], [Comments], [Mentions], [Upvotes], [Downvotes], [Favorite], [Close], [Edit], [Badges] grouped by Week.  Enter your numeric User ID and how many weeks back you want to report.  (Go back as many weeks as you want; it only increases query runtime.)",
        "QueryBody": "SELECT  \n  Format(min(creationdate),'MMM dd')+' - '+Format(max(creationdate),'MMM dd') as Period,\n  datepart(ww,creationdate) AS WeekNumber,\n  count(*) as posts,\n  sum(case when posttypeid=1 then 1 else 0 end) as Questions,\n  sum(case when posttypeid=2 then 2 else 0 end) as Answers\n\nfrom posts\nwhere owneruserid=##UserID##\n  and creationdate >= dateadd(d,-28,( SELECT max(creationdate) from comments ) ) \ngroup by datepart(ww,creationdate)\n\n\/*\nSELECT \nProductName,\nWeekNumber,\nsum(sale)\nfrom\n(\n    SELECT \n    ProductName,\n    DATEDIFF(week, '2011-05-30', date) AS WeekNumber,\n    sale\n    FROM table\n)\nGROUP BY\nProductName,\nWeekNumber",
        "CreationDate": "2018-07-11 02:42:09",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 872578,
        "Title": "RARE GOLD: Gold Tag-Badges that have only been awarded ONCE",
        "Description": null,
        "QueryBody": "SELECT  name as tagname\ninto #singles from badges\nwhere tagbased='true' and class=1\ngroup by name, tagbased, class\nhaving count(*)=1\n\nSELECT userid,\n  userid as [User Link],\n  name as [Tag Badge],\n  format(date,'yyyy-MM-dd') as Awarded\ninto #badgeWinner from badges\nwhere name in ( SELECT * from #singles )\n  and tagbased='true' and class=1\n\nSELECT distinct ST2.userid as [User Link], \n    substring(\n        (\n        SELECT ';'+[Tag Badge] AS [text()]\n            From #badgeWinner ST1\n            Where ST1.userid = ST2.userid\n            order by ST1.userid\n            For XML PATH ('')\n        ), 2, 1000) [Tag Names]\nFrom #badgeWinner ST2",
        "CreationDate": "2018-07-11 06:18:33",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 872618,
        "Title": "...WEBSITE URL's of Users who've answered >100 questions in a specified tag (or partial tag)",
        "Description": null,
        "QueryBody": "SELECT  \n  a.owneruserid,\n  count(a.id) as [VBAAnswerCount]\nfrom posts q left outer join posts a on q.id = a.parentid\nwhere q.tags like '%vba>%'\ngroup by a.owneruserid\nhaving  count(a.id)  >100\norder by count(a.id) desc\n\n\/*\nSELECT  \n  id as [User Link],\n  websiteurl,\n  format(creationdate,'yyyy-MM-dd') as JoinDate,\n  format(lastaccessdate,'yyyy-MM-dd') as Activity,\n  location,\n  reputation,\n  views,\n  upvotes,\n  downvotes\nfrom users\nwhere websiteurl is not null and websiteurl <> ''",
        "CreationDate": "2018-07-11 09:54:02",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 872626,
        "Title": "(under construction) Users in a major Canadian city",
        "Description": "the 'cities' portion of the WHERE clause includes two-thirds of Canada, based on population",
        "QueryBody": "SELECT  'abcdefghijkl' where 'abcdefghijkl' like '%def%'\n\n\/*\n\nSELECT \n  [TagAnswerCount],\n  id as [User Link],\n  websiteurl,\n  format(creationdate,'yyyy-MM-dd') as JoinDate,\n  format(lastaccessdate,'yyyy-MM-dd') as Activity,\n  location,\n  reputation,\n  views,\n  upvotes,\n  downvotes\nfrom users \nwhere location like",
        "CreationDate": "2018-07-11 11:06:54",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 872818,
        "Title": "Questions with accepted answer by programming language ",
        "Description": null,
        "QueryBody": "DECLARE  @js_accepted int = 0\n\nselect @js_accepted = count(*) from Posts\nwhere Posts.Tags like '%<javascript>%' and AcceptedAnswerId > 0\n\n\nselect @js_accepted",
        "CreationDate": "2018-07-11 18:21:35",
        "validated": false,
        "QueryBody_Original": "DECLARE  @js_accepted int = 0\n\nselect @js_accepted = count(*) from Posts\nwhere Posts.Tags like '%<javascript>%' and AcceptedAnswerId > 0\n\n\nselect @js_accepted"
    },
    {
        "QuerySetId": 873031,
        "Title": "Comment count for high-rep users by day",
        "Description": null,
        "QueryBody": "SELECT  YEAR(c.CreationDate)*100 + MONTH(c.CreationDate)*100\/12 As YearMonth, Count(c.Id) As CountOfComments\nFROM Comments c\nINNER JOIN Users u ON c.UserId = u.Id\nWHERE u.Reputation > ##HighRepBorder:int##\nGROUP BY YEAR(c.CreationDate)*100 + MONTH(c.CreationDate)*100\/12\nORDER BY YEAR(c.CreationDate)*100 + MONTH(c.CreationDate)*100\/12",
        "CreationDate": "2018-07-16 21:50:02",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 873039,
        "Title": "Case-insensitive LIKE search in comments only",
        "Description": null,
        "QueryBody": "SELECT  top(##MaxCount:int?500##) id [Comment Link], [text]\n  from comments\n  where [text] collate SQL_Latin1_General_CP1_CI_AS\n     like '##Like?%readprotected%##%' collate SQL_Latin1_General_CP1_CI_AS\n  order by score desc",
        "CreationDate": "2018-07-12 02:50:49",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 873077,
        "Title": "SPAMMIES: 1000 User Profiles that are OBVIOUSLY SPAM",
        "Description": "A simple queried list of obvious spammers:  List of user profiles with lengthy descriptions, inactive since shortly after creation (which was not recently), with very-low-rep (usually 1), Sorted by \"NUMBER OF HTTP LINKS FOUND IN BIO\".   \r\n\r\nDisclaimer: I haven't put a ton of time into this. Like anything it can only be improved, and it isn't exactly \"machine learning\"... I haven't looked through all these links manually but a random sampling make me very confident these could all be safely deleted, nobody would miss them (likely not even the OP would notice)\r\n\r\n",
        "QueryBody": "SELECT \n'site:\/\/u\/'+cast(id as varchar(12))+'|'+displayname as [UserLink],\n  --id,\n  datediff(MM,creationdate,getdate()) as 'Profile age months',\n  datediff(MM,lastaccessdate,getdate()) as 'Access age months',\n  reputation,\n  len(aboutme) as LenAboutMe, \n  (len(aboutme)-len(replace(aboutme,'http','')))\/4 as [#Links in Bio]\nfrom users\nwhere lastaccessdate>'2014-01-01' \n  and reputation <=20  --under 20 rep\n  and len(aboutme)>=1000 --length\n  and (len(aboutme)-len(replace(aboutme,'http','')))\/4 > 5 --links\norder by len(aboutme) desc\n\n\n\n\/*\n\nSELECT\n'site:\/\/u\/'+cast(id as varchar(12))+'|'+displayname as [UserLink],\n  --id,\n  creationdate,\n  lastaccessdate,\n  reputation,\n  len(aboutme) as LenAboutMe\nfrom users\nwhere lastaccessdate>'2014-01-01'\norder by len(aboutme) desc",
        "CreationDate": "2018-07-12 05:17:26",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 873250,
        "Title": "All gold tag badges - users with dupehammer",
        "Description": null,
        "QueryBody": "SELECT \nUserId AS [User Link]\nFROM Badges\nWHERE Class = 1 AND TagBased = 'true' AND Name = ##Tag:string##\nORDER BY UserId",
        "CreationDate": "2018-08-08 12:44:18",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 873264,
        "Title": "Top Users by Country and tag with SO User Link",
        "Description": null,
        "QueryBody": "WITH  SO Profile Link\n-- Adapted from samliew (http:\/\/stackoverflow.com\/users\/584192\/samuel-liew)\n\nSELECT\n    ROW_NUMBER() OVER(ORDER BY Reputation DESC) AS [#], \n    u.Id AS [User ID], \n    u.Reputation,\n    u.ID [User],\n    count(p.id)\nFROM\n    Users u\ninner join posts p on p.ownerUserid = u.id\ninner join posttags pt on pt.postid = p.id\ninner join tags t on t.id = pt.tagid\nWHERE\n    LOWER(Location) LIKE LOWER('%##countryname##%')\n    and t.tagname='##tagname##'\ngroup by u.reputation, u.id\nORDER BY\n    Reputation DESC;",
        "CreationDate": "2018-07-12 16:20:11",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 873481,
        "Title": "Demo: Why does 'comments.text' have to use 'BigInt'?",
        "Description": null,
        "QueryBody": "SELECT  sum(len(body)) as lenBody from posts \n     ---43,016,689,192  nvarchar(max)\n     \n     \n--SELECT sum(len(text)) as commentLen from comments \n     ---\"Arithmetic overflow error converting expression to data type int.\"\n\n\nSELECT sum(cast(len(text) as bigint)) as commentLen from comments \n     ---9,711,438,180   nvarchar(600)\n\n\nSELECT sum(len(userdisplayname)) as nameLen from comments \n     ---7,616,503       nvarchar(30)\n     \n     \nSELECT sum(cast(len(body) as bigint)) as lenBody from posts \n     ---43,016,689,192  nvarchar(max)",
        "CreationDate": "2018-07-12 22:29:03",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 873488,
        "Title": "Questions closed rank: compliments of @rene",
        "Description": null,
        "QueryBody": "WITH  closevoters_rank as\n(\nselect row_number() over(order by count(*) desc) [row]\n     , userid\n     , count(*) as cnt\nfrom \n(\nselect json_value(text, concat('$.Voters[', keys.value, '].Id')) userid\n      , postid\nfrom posthistory\ncross apply string_split('0,1,2,3,4',',') keys\nwhere posthistorytypeid = 10 -- close\n) closevoters\nwhere userid is not null\nand userid > 0\ngroup by userid\n)\n\nselect ' '\n     , row\n     , 'site:\/\/users\/' + userid + '|' + u.displayname [close voter]\n     , cnt [#posts closed]\nfrom closevoters_rank\ninner join users u on u.id = userid\nwhere userid = ##userid:string##\nunion\nselect '.'\n     , row\n     , 'site:\/\/users\/' + userid + '|' + u.displayname\n     , cnt\nfrom closevoters_rank\ninner join users u on u.id = userid\norder by 1, 2",
        "CreationDate": "2018-07-12 23:31:17",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 874017,
        "Title": "Get Questions Closed as Dup of Particular Question",
        "Description": null,
        "QueryBody": "SELECT  DISTINCT *\nFROM (\n  SELECT r.CreationDate, p.PostId AS [Post Link], r.Score, r.AnswerCount, r.Tags\n  FROM PostLinks p\n       JOIN Posts q ON q.Id = RelatedPostId\n       JOIN Posts r ON r.Id = p.PostId\n  WHERE LinkTypeId = 3\n    AND RelatedPostId = ##QuestionId##\n) d",
        "CreationDate": "2018-07-16 06:06:45",
        "validated": false,
        "QueryBody_Original": "SELECT  DISTINCT *\nFROM (\n  SELECT r.CreationDate, p.PostId AS [Post Link], r.Score, r.AnswerCount, r.Tags\n  FROM PostLinks p\n       JOIN Posts q ON q.Id = RelatedPostId\n       JOIN Posts r ON r.Id = p.PostId\n  WHERE LinkTypeId = 3\n    AND RelatedPostId = ##QuestionId##\n) d"
    },
    {
        "QuerySetId": 874840,
        "Title": "Find all answers by user to questions with specific tag",
        "Description": null,
        "QueryBody": "SELECT \n  a.parentid AS [Post Link], q.tags, a.score\nFROM posts q LEFT OUTER JOIN posts a\n  ON q.id = a.parentid\nWHERE a.owneruserid = ##UserID##\n  AND q.tags LIKE '%<##TagName##>%'\nORDER BY\n  a.score DESC",
        "CreationDate": "2018-07-16 18:20:14",
        "validated": false,
        "QueryBody_Original": "SELECT \n  a.parentid AS [Post Link], q.tags, a.score\nFROM posts q LEFT OUTER JOIN posts a\n  ON q.id = a.parentid\nWHERE a.owneruserid = ##UserID##\n  AND q.tags LIKE '%<##TagName##>%'\nORDER BY\n  a.score DESC"
    },
    {
        "QuerySetId": 875019,
        "Title": "compare compound tag cleanup vs. score",
        "Description": "(approx how many points towards each tag badge - as of last Sunday's data update) .... See TAB#2 or totals.",
        "QueryBody": "SELECT \n  q.id as qID,\n  --'site:\/\/u\/'+cast(q.owneruserid as varchar)+'|'+left(displayname,20) as [Asked by],\n  a.id as [Post Link],\n  --a.owneruserid as aUserID,\n  format(a.creationdate,'yyyy-MM-dd') as Answered,\n  case when q.tags like '%<excel>%' then a.score else 0 end as [excel],\n  case when q.tags like '%<vba>%' then a.score else 0 end as [vba],\n  q.viewcount as qViews,\n  a.score as aScore,\n  q.Tags\ninto #temp\nfrom posts q left outer join posts a \n  on q.id = a.parentid\n--left outer join users u on u.id = q.owneruserid\nwhere \n  a.owneruserid in (##UserID##)\n  and (q.tags like '%excel%' or q.tags like '%vba>%')\n\nSELECT * from #temp\n\n--TAB#2 : Totals\nSELECT\n  sum(excel) as [excel],\n  sum(vba) as [vba],\n  sum(qViews) as [qViews],\n  count(*) as [Count]\nfrom #temp",
        "CreationDate": "2018-07-17 07:01:00",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 875206,
        "Title": "What percentage of users have I exceeded with reputation?",
        "Description": null,
        "QueryBody": "DECLARE  @myRep int = ( select reputation from users where id=##UserID## )\n\nselect\n  sum(case when reputation < @myRep then 1 else 0 end) as aLowerScore,\n  sum(case when reputation > @myRep then 1 else 0 end) as aHigherScore\ninto #userList from users \n\nselect \n@myRep as [Reputation], \naLowerScore, \naHigherScore,   \nformat((aLowerScore*1.0) \/(aLowerScore+aHigherScore),'0.00%') as HigherThan\nfrom  #userList",
        "CreationDate": "2018-07-18 02:00:46",
        "validated": false,
        "QueryBody_Original": "DECLARE  @myRep int = ( select reputation from users where id=##UserID## )\n\nselect\n  sum(case when reputation < @myRep then 1 else 0 end) as aLowerScore,\n  sum(case when reputation > @myRep then 1 else 0 end) as aHigherScore\ninto #userList from users \n\nselect \n@myRep as [Reputation], \naLowerScore, \naHigherScore,   \nformat((aLowerScore*1.0) \/(aLowerScore+aHigherScore),'0.00%') as HigherThan\nfrom  #userList"
    },
    {
        "QuerySetId": 876984,
        "Title": "PEOPLE REACHED 3: revamp (under construction?)",
        "Description": null,
        "QueryBody": "DECLARE  @dt1 varchar(25) = convert(varchar,getdate(),21)\n\nselect   -----------------------------> (list eligible answers)\n  creationdate,\n  id,\n  parentid,\n  score\ninto #eligibleAnswers from posts\nwhere\n  owneruserid = ##UserID## --my posts\n  and posttypeid = 2       --answers only\n  and score > 0            --positive score\n\nDECLARE @dt2 varchar(25) = convert(varchar,getdate(),21)\n\n\n\nselect id, postid, votetypeid \ninto #votes from votes\nwhere postid in (select id from #eligibleAnswers)\n and votetypeid in (2,3)\n\nselect * from #votes\nDECLARE @dt3 varchar(25) = convert(varchar,getdate(),21)\n\nprint '1-2: '+format(datediff(ms,@dt1,@dt2),'0ms')\nprint '2-3: '+format(datediff(ms,@dt2,@dt3),'0ms')",
        "CreationDate": "2018-07-20 15:56:10",
        "validated": false,
        "QueryBody_Original": "DECLARE  @dt1 varchar(25) = convert(varchar,getdate(),21)\n\nselect   -----------------------------> (list eligible answers)\n  creationdate,\n  id,\n  parentid,\n  score\ninto #eligibleAnswers from posts\nwhere\n  owneruserid = ##UserID## --my posts\n  and posttypeid = 2       --answers only\n  and score > 0            --positive score\n\nDECLARE @dt2 varchar(25) = convert(varchar,getdate(),21)\n\n\n\nselect id, postid, votetypeid \ninto #votes from votes\nwhere postid in (select id from #eligibleAnswers)\n and votetypeid in (2,3)\n\nselect * from #votes\nDECLARE @dt3 varchar(25) = convert(varchar,getdate(),21)\n\nprint '1-2: '+format(datediff(ms,@dt1,@dt2),'0ms')\nprint '2-3: '+format(datediff(ms,@dt2,@dt3),'0ms')"
    },
    {
        "QuerySetId": 877181,
        "Title": "Google mentions in a user's comments",
        "Description": "easier to read in a spreadsheet via the 'DOWNLOAD CSV' button",
        "QueryBody": "SELECT \n  format(creationdate,'yyyy-MM-dd') as [Posted],\n  text as [Comment Text],\n  'site:\/\/posts\/comments\/'+cast(id as varchar)+'|'+cast(id as varchar) as [Comment ID + Link]\nfrom comments\nwhere \n  userid=##UserID##\n  and text like '%google%' collate SQL_Latin1_General_CP1_CI_AS  --case insensitive\norder by \n  creationdate desc\n\n\n\n\n--UserID:Enter a numeric User ID:",
        "CreationDate": "2018-07-21 05:57:54",
        "validated": false,
        "QueryBody_Original": "SELECT \n  format(creationdate,'yyyy-MM-dd') as [Posted],\n  text as [Comment Text],\n  'site:\/\/posts\/comments\/'+cast(id as varchar)+'|'+cast(id as varchar) as [Comment ID + Link]\nfrom comments\nwhere \n  userid=##UserID##\n  and text like '%google%' collate SQL_Latin1_General_CP1_CI_AS  --case insensitive\norder by \n  creationdate desc\n\n\n\n\n--UserID:Enter a numeric User ID:"
    },
    {
        "QuerySetId": 877536,
        "Title": "other answers on questions I've answered",
        "Description": null,
        "QueryBody": "SELECT  \n  parentid as qID,\n  id as aID,\n  owneruserid,\n  creationdate,\n  score,\n  RANK ( ) OVER ( partition by parentid order by score desc ) as Rank\ninto #temp from posts\nwhere \n  parentid in (SELECT distinct parentid from posts \n               where owneruserid=##UserID## and posttypeid=2 and closeddate is null and score>0)\n  and posttypeid=2 and closeddate is null\n  and score>0\norder by \n  parentid,\n  case when owneruserid=##UserID## then 0 else 1 end,\n  score desc\n\nSELECT \n  qID, aID as [Post Link], a.owneruserid as [User Link], a.creationdate, a.score, a.rank, q.answercount, q.viewcount\nfrom #temp a left outer join posts q on a.qID = q.ID\nwhere a.rank=1 and a.owneruserid<>##UserID##",
        "CreationDate": "2018-07-28 17:25:42",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 877695,
        "Title": "What effect do post notices have on answer voting?",
        "Description": "https:\/\/meta.stackexchange.com\/questions\/278800\/what-effect-do-post-notices-have-on-answer-voting",
        "QueryBody": "SELECT  pn.postid\n     , sum(case \n           when v.votetypeid = 2 \n            and v.creationdate < pn.creationdate  \n           then 1 \n           else 0\n           end ) [upvotes before notice]\n     , sum(case \n           when v.votetypeid = 2 \n            and v.creationdate >= pn.creationdate  \n           then 1 \n           else 0\n           end ) [upvotes after notice]\nfrom postnotices pn\ninner join  postnoticetypes pnt on pnt.id = pn.postnoticetypeid\nleft outer join votes v on v.postid = pn.postid\nwhere postnoticetypeid in (1,3)\nand v.votetypeid in (2,3)\ngroup by pn.postid\n\nSELECT *\nfrom postnoticetypes",
        "CreationDate": "2018-07-22 18:06:34",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 877938,
        "Title": "Number of daily first posts last week",
        "Description": null,
        "QueryBody": "SELECT  count(*)\/##NumDays:int?7## as numberOfDailyFirstPostsLastWeek\nFROM\n(\n  SELECT u.id\n  FROM users as u\n  INNER JOIN (\n    SELECT *\n    FROM posts\n    WHERE creationdate >= dateadd(day,datediff(day,##NumDays:int?7##+1,GETDATE()),0)\n      AND creationdate < dateadd(day,datediff(day,1,GETDATE()),0)\n  ) as p\n    ON p.owneruserid = u.id\n  GROUP BY u.id\n) alias",
        "CreationDate": "2018-07-23 11:31:17",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 878370,
        "Title": "Historical USER COUNTS and POST COUNTS (yearly cumulative totals)",
        "Description": "More detail is in the monthly version: https:\/\/data.stackexchange.com\/stackoverflow\/query\/edit\/870668#resultSets",
        "QueryBody": "SELECT \n  year(creationdate) as [Year],\n  sum(count(id)) over (order by year(creationdate) rows unbounded preceding) as [Total#Users]\ninto #usersYearly from users\ngroup by \n  year(creationdate)\n\nSELECT\n  year(creationdate) as [Year],\n  sum(count(id)) over (order by year(creationdate) rows unbounded preceding) as [Total#Posts]\ninto #postsYearly from posts \ngroup by year(creationdate)\n\nSELECT\n  u.[Year],\n  [Total#Users],\n  [Total#Posts]\nfrom #postsYearly p join #usersYearly u on p.[Year] = u.[Year]\norder by u.[Year]",
        "CreationDate": "2018-07-24 03:37:38",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 878561,
        "Title": "Traffic from various locations in India",
        "Description": "\r\nLooking at traffic from active users from various locations in india to stackoverflow",
        "QueryBody": "SELECT  Location, count(id) as #Users\nFROM Users\nwhere lower(Location) like lower('%Colombia%')\nand LastAccessDate >= '20150101 00:00:00.000'\nand LastAccessDate > 2018\ngroup by Location\nORDER BY #Users DESC\n\n\n\/*\nSELECT TOP 50 Id, LastAccessDate\nfrom Users\nwhere LastAccessDate >= '20180101 00:00:00.000'\n*\/",
        "CreationDate": "2018-09-20 17:33:26",
        "validated": false,
        "QueryBody_Original": "SELECT  Location, count(id) as #Users\nFROM Users\nwhere lower(Location) like lower('%Colombia%')\nand LastAccessDate >= '20150101 00:00:00.000'\nand LastAccessDate > 2018\ngroup by Location\nORDER BY #Users DESC\n\n\n\/*\nSELECT TOP 50 Id, LastAccessDate\nfrom Users\nwhere LastAccessDate >= '20180101 00:00:00.000'\n*\/"
    },
    {
        "QuerySetId": 878562,
        "Title": "Traffic in India from active Stackoverflow users",
        "Description": null,
        "QueryBody": "SELECT  Location, count(id) as #Users\nFROM Users\nwhere Location like '%India%'\nand LastAccessDate > '20180101 00:00:00.000'\ngroup by Location\nORDER BY #Users DESC\n\n\n\n\/*\nSELECT TOP 50 Id, LastAccessDate\nfrom Users\nwhere LastAccessDate >= '20180101 00:00:00.000'\n*\/",
        "CreationDate": "2018-07-24 10:21:37",
        "validated": false,
        "QueryBody_Original": "SELECT  Location, count(id) as #Users\nFROM Users\nwhere Location like '%India%'\nand LastAccessDate > '20180101 00:00:00.000'\ngroup by Location\nORDER BY #Users DESC\n\n\n\n\/*\nSELECT TOP 50 Id, LastAccessDate\nfrom Users\nwhere LastAccessDate >= '20180101 00:00:00.000'\n*\/"
    },
    {
        "QuerySetId": 879245,
        "Title": "Percent of questions with ACCEPTED ANWERS, month-over-month",
        "Description": null,
        "QueryBody": "SELECT  \n  count(*) --as [Qs with Accepted] \nfrom posts \nwhere CommunityOwnedDate is not null \/*\n  acceptedanswer is not null\n  and posttypeid=1\n  and closeddate is null\n  and creationdate<dateadd(d,-30,getdate())",
        "CreationDate": "2018-07-25 20:40:49",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 879547,
        "Title": "Should we be notified if an answer to a question we asked has a higher score than the accepted answe",
        "Description": "https:\/\/meta.stackoverflow.com\/questions\/371621\/should-we-be-notified-if-an-answer-to-a-question-we-asked-has-a-higher-score-tha",
        "QueryBody": "SELECT  q.id\nfrom posts q\ninner join posts acc on acc.id = q.acceptedanswerid\nleft outer join posts a on a.parentid = q.id and a.id <> acc.id\nwhere q.posttypeid = 1\nand q.acceptedanswerid is not null\nand q.owneruserid = ##userid:int?160527##\ngroup by q.id\nhaving min(acc.score) < max(a.score)",
        "CreationDate": "2018-07-26 20:14:06",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 880238,
        "Title": "Average time to first answer",
        "Description": null,
        "QueryBody": "SELECT  count(DATEDIFF(MINUTE, q.CreationDate, a.CreationDate))\n  AS 'Time (hours)'\n  FROM Posts AS q\n  INNER JOIN Posts AS a\n    ON a.ParentId = q.Id\n  LEFT OUTER JOIN Posts AS a2 -- earlier answer, should not exist\n    ON a.ParentId = a2.ParentId\n   AND a.CreationDate > a2.CreationDate\n  WHERE a2.Id IS NULL\n    AND a.CreationDate >= q.CreationDate -- negative values happen after question merges\n    AND q.CreationDate BETWEEN ##dateFrom:string?2018-01-01## AND ##dateTill:string?2018-07-01##",
        "CreationDate": "2018-07-29 15:09:24",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 880443,
        "Title": "My comments with their scores",
        "Description": "My comments with at least one upvote, in order with most upvoted-comments first.",
        "QueryBody": "SELECT  postID [Post Link], Score, Text\nFROM \n    Comments\nWHERE UserId = ##UserId##\nAND Score >= 0\nORDER BY Score Desc",
        "CreationDate": "2018-07-29 10:12:03",
        "validated": false,
        "QueryBody_Original": "SELECT  postID [Post Link], Score, Text\nFROM \n    Comments\nWHERE UserId = ##UserId##\nAND Score >= 0\nORDER BY Score Desc"
    },
    {
        "QuerySetId": 880513,
        "Title": "LIST OF ALL AVAILABLE BADGES (and which ones you have) - also \"Official\" SQL",
        "Description": "See notes in SQL...  Also: https:\/\/meta.stackexchange.com\/questions\/76606\/actual-badge-queries-used-by-stackexchange-for-use-on-sede\/",
        "QueryBody": "SELECT \n  lower(name) as [TagName], \n  lower(name) as [Badge Name], \n  case when tagbased='true' then 'Tag Based' else cast(count(*) as varchar(10)) end as [Awarded], \n  format(max([date]),'yyyy-MMM') as [Last Awarded],\n  class,\n  \n  case when sum(case when userid=##UserID## then 1 else 0 end )>0 \n     then case when min(class)=1 then 'Gold'\n               when min(class)=2 then 'Silver'\n               when min(class)=3 then 'Bronze' \n               else '-nope-' end \n          else ' ' end as [U Got It?] \nfrom badges\nwhere (tagbased='false' or userid=##UserID##)\ngroup by name, tagbased,class\norder by count(*) desc\n\n\n--UserID: Enter a numeric User ID:\"You can find your user id within the URL for your user profile.\"",
        "CreationDate": "2018-07-29 16:57:55",
        "validated": false,
        "QueryBody_Original": "SELECT \n  lower(name) as [TagName], \n  lower(name) as [Badge Name], \n  case when tagbased='true' then 'Tag Based' else cast(count(*) as varchar(10)) end as [Awarded], \n  format(max([date]),'yyyy-MMM') as [Last Awarded],\n  class,\n  \n  case when sum(case when userid=##UserID## then 1 else 0 end )>0 \n     then case when min(class)=1 then 'Gold'\n               when min(class)=2 then 'Silver'\n               when min(class)=3 then 'Bronze' \n               else '-nope-' end \n          else ' ' end as [U Got It?] \nfrom badges\nwhere (tagbased='false' or userid=##UserID##)\ngroup by name, tagbased,class\norder by count(*) desc\n\n\n--UserID: Enter a numeric User ID:\"You can find your user id within the URL for your user profile.\""
    },
    {
        "QuerySetId": 880560,
        "Title": "which days are more common for 'homework' or 'assignment' questions?",
        "Description": null,
        "QueryBody": "SELECT  \n  format(creationdate,'ddd') as [Weekday],\n  sum(case when charindex('assignment',body)>0 then 1 else 0 end ) as [Assignment],\n  sum(case when charindex('homework',body)>0 then 1 else 0 end )as [Homework],\n  sum(1) as [Posts]\ninto #temp from posts\nwhere posttypeid=1 and creationdate >=dateadd(d,-180,getdate())\ngroup by format(creationdate,'ddd')\n\nSELECT \n  *,\n  format(1.0*([Assignment]+[Homework])\/[Posts],'0.0%') as [%]\nfrom #temp\norder by 1.0*([Assignment]+[Homework])\/[Posts] desc",
        "CreationDate": "2018-07-29 22:53:51",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 880687,
        "Title": "who do i bump into the most?",
        "Description": "users posts comments edits...",
        "QueryBody": "DECLARE  @UserName nvarchar(50) = (select displayname from users where id=##UserID##)\nDECLARE @userDate date = (select creationdate from users where id=##UserID##)\nprint @UserName\n\nselect userid, postid, count(*) as [Mentions]\ninto #mentions from comments\nwhere text like '%' + @UserName + '%'\n  and creationdate>=@userDate\ngroup by userid, postid\n\nselect \n  c.userid, \n  count(postid) as [Count]\nfrom comments c\nwhere postid in (select distinct postid from comments where userid=##UserID##)\n  and c.userid <>##UserID##\n  and not c.userid is null\n  and c.creationdate>=@userDate\ngroup by c.userid\norder by count(postid) desc\n\n  \n\n\n\n\n\/*\nselect \n  id as pID\nfrom Posts\nwhere owneruserid",
        "CreationDate": "2018-07-30 08:05:45",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 880741,
        "Title": "rep from bounty for user",
        "Description": null,
        "QueryBody": "SELECT  v.creationdate, v.bountyamount from votes v right join posts p on v.postid =p.id\nwhere votetypeid in (8,9) and owneruserid = ##UserID##",
        "CreationDate": "2018-07-30 12:58:04",
        "validated": false,
        "QueryBody_Original": "SELECT  v.creationdate, v.bountyamount from votes v right join posts p on v.postid =p.id\nwhere votetypeid in (8,9) and owneruserid = ##UserID##"
    },
    {
        "QuerySetId": 881065,
        "Title": "How much work did you put in, and for what result?",
        "Description": "...not too sure how to RANK this. What criteria classifies \"more work\"....",
        "QueryBody": "SELECT  \n  p.id as aID,\n  format(p.creationdate,'yyyy-MM-dd') as Answered,\n  p.Score,\n  count(h.id) as [#Edits]\ninto #answers from posts p left join posthistory h on p.id=h.postid\nwhere p.owneruserid=##UserID##  and h.userid=##UserID##\n  and p.posttypeid=2\n  and p.closeddate is null \ngroup by p.id, p.creationdate, p.score\n\nSELECT \n  a.id as aID, \n  q.viewcount as Views,\n  len(a.body) as Length,\n  (len(a.body)-len(replace(a.body,'imgur.com','')))\/7 as Images\ninto #stuff from posts a left join posts q on a.parentid=q.id\nwhere a.id in (SELECT distinct aID from #answers)\n\nSELECT \n  Answered, a.aID as [Post Link], score, [#Edits], \n  [Images], Length, Views\nfrom #answers a left join #stuff s on a.aID=s.aID\norder by answered desc",
        "CreationDate": "2018-07-31 13:28:58",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 881067,
        "Title": "ALL EDITS for specific user",
        "Description": null,
        "QueryBody": "SELECT \n  RevisionGUID, --grouped on edits that have more than one [action]\n  postid,\n  name,\n  \n  h.creationdate as [EditDate],\n  Comment\ninto #edits from PostHistory h \n  left join PostHistoryTypes t on h.posthistorytypeid = t.id\n  left join posts p on h.postid=p.id\n  where userid=##UserID## and owneruserid=##UserID##  \n\nSELECT distinct PostID,EditDate,RevisionGUID,Comment,  \n    substring ( (\n                SELECT ', '+name  as [text()]\n                from #edits t1\n                where t1.name =t2.name \n                order by t1.name\n                for xml path ('')\n              ), 2, 1000) [Actions]\nfrom #edits t2 \norder by EditDate desc",
        "CreationDate": "2018-07-31 07:05:21",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 881139,
        "Title": "Total time spent editing your answers (kinda)",
        "Description": "Like many of my queries, this is approximate, and unofficial.  This gets a list of edited questions, and a list of revisions, and totals the duration between where the time is less than 60 minutes since the previous edit (or original post time)",
        "QueryBody": "SELECT \n  p.creationdate as Answered,\n  p.id as aID,\n  h.creationdate as Edited,\n  case when p.creationdate=h.creationdate \n    then null\n    else cast(datediff(s,LAG(h.creationdate, 1,0) \n      over ( partition by p.id ORDER BY h.creationdate), h.creationdate)\/60.0 as int) \n    end as minsLater\ninto #answers \nfrom posts p left join posthistory h on p.id=h.postid\nwhere p.owneruserid=##UserID##  and h.userid=##UserID##\n  and p.posttypeid=2\n  and p.closeddate is null and not lasteditdate is null\norder by p.id, h.creationdate\n\n\n\nSELECT   --TAB#1\n  Answered,\n  aID as [Post Link],\n  count(*) as [#Edits],\n  sum(minsLater) as [Edit Time (mins)]\nfrom #answers\nwhere minsLater<=60\ngroup by Answered, aID\n\n\nSELECT * from #answers  --TAB#2",
        "CreationDate": "2018-07-31 14:34:19",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 881890,
        "Title": "Attention Given to Questions, BY TAG ",
        "Description": "Average number of answers & comments, Average Score, and % that have Accepted Answer. Includes tags with min 10 posts\/day. Set timeframe at bottom.",
        "QueryBody": "SELECT \n  t.tagname,\n  sum(1) as [Count],\n  sum(case when AcceptedAnswerId is null then 0 else 1 end) as [HasAccepted],\n  sum(answercount) as Answers,\n  sum(commentcount) as Comments,\n  sum(Score) as tscore\ninto #temp from posts p join posttags pt on p.id=pt.postid join tags t on pt.tagid=t.id\nwhere p.posttypeid=1\n  and p.creationdate >= dateadd(d,-30,getdate())\ngroup by t.tagname\nhaving sum(1) > 1000\n\nSELECT \n [TagName],\n [Count],\n [HasAccepted],\n format(1.0*HasAccepted\/[Count],'0.0%') as [HasAccepted%],\n rank() over( order by 1.0*HasAccepted\/[Count] desc) as aRANK,\n Answers,\n format(1.0*Answers\/[Count],'0.0') as [Avg#Answers],\n Comments,\n format(1.0*Comments\/[Count],'0.0') as [Avg#Comments],\n format(1.0*tScore\/[Count],'0.0') as [Score]\nfrom #temp\n--order by \n\nSELECT * from #temp",
        "CreationDate": "2018-08-01 19:56:24",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 881931,
        "Title": "Distribution of posts by time of day",
        "Description": null,
        "QueryBody": "DECLARE  @UserId int = ##UserId##;\n\nWITH \npost AS(SELECT DATEPART(HH, CreationDate) AS Hour, Score AS Score \n        FROM Posts WHERE OwnerUserId = @UserId  and score < 4 )\n --   , data AS(SELECT Hour, Id, COUNT(*) AS Num FROM post GROUP BY Id, Hour)\n --   , \n --   totals AS(SELECT COUNT(*) AS Num, PostTypeId AS Id \n --   FROM Posts \n --   --WHERE OwnerUserId = @UserId\n --   GROUP BY PostTypeId)\n select hour, count(Score) as num_answers, avg(Score) as mean_score\n from post group by hour order by hour\n--SELECT Hour, PostTypes.Name, data.Num -- * 1. \/ totals.Num\n--  AS Activity \n--FROM data JOIN totals \n--ON data.Id = totals.Id JOIN PostTypes ON data.Id = PostTypes.Id \n--WHERE totals.Num > 100001 ORDER BY PostTypes.Id, Hour;",
        "CreationDate": "2019-09-14 19:11:14",
        "validated": false,
        "QueryBody_Original": "DECLARE  @UserId int = ##UserId##;\n\nWITH \npost AS(SELECT DATEPART(HH, CreationDate) AS Hour, Score AS Score \n        FROM Posts WHERE OwnerUserId = @UserId  and score < 4 )\n --   , data AS(SELECT Hour, Id, COUNT(*) AS Num FROM post GROUP BY Id, Hour)\n --   , \n --   totals AS(SELECT COUNT(*) AS Num, PostTypeId AS Id \n --   FROM Posts \n --   --WHERE OwnerUserId = @UserId\n --   GROUP BY PostTypeId)\n select hour, count(Score) as num_answers, avg(Score) as mean_score\n from post group by hour order by hour\n--SELECT Hour, PostTypes.Name, data.Num -- * 1. \/ totals.Num\n--  AS Activity \n--FROM data JOIN totals \n--ON data.Id = totals.Id JOIN PostTypes ON data.Id = PostTypes.Id \n--WHERE totals.Num > 100001 ORDER BY PostTypes.Id, Hour;"
    },
    {
        "QuerySetId": 882245,
        "Title": "reopened questions and their current status",
        "Description": null,
        "QueryBody": "SELECT  postid, max(creationdate) as lastReOpenDate, count(*) as [#Reopens]\ninto #reopened \nfrom posthistory \nwhere posthistorytypeid =11 --reopened\ngroup by postid\n\nSELECT \n  'site:\/\/q\/'+cast(postid as nvarchar)+'|'+title  as [Link to Question],\n  p.Score,\n  format(p.lastEditDate,'yyyy-MM-dd') as [Last Edit],\n  [#Reopens],\n  format(r.lastReOpenDate,'yyyy-MM-dd') as [Last Reopen],\n  format(p.closedDate,'yyyy-MM-dd') as [Closed] \nfrom #reopened r\nleft join posts p on r.postid=p.id\nwhere posttypeid=1",
        "CreationDate": "2018-08-02 15:52:36",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 882431,
        "Title": "How quickly users make their second post",
        "Description": "This identifies how many users post a second question within the first, third, and seventh day of making their first post, limited to the last year.",
        "QueryBody": "SELECT \n  count(distinct case when [Date Diff] < 24 then OwnerUserId end) as [First Day Multiposters],\n  count(distinct case when [Date Diff] < 72 then OwnerUserId end) as [First 3 Days Multiposters],\n  count(distinct case when [Date Diff] < 168 then OwnerUserId end) as [First Week Multiposters],\n  count(OwnerUserId) as [Total Contributors]\nfrom (\n  SELECT\n    OwnerUserId,\n    [1],\n    [2],\n    datediff(hour, [1], [2]) as [Date Diff]\n  from (\n    SELECT -- number the user's posts\n      ROW_NUMBER() over(partition by OwnerUserId order by CreationDate asc) as [PostNumber],\n      CreationDate,\n      OwnerUserId\n      from Posts\n      where OwnerUserId > 0\n  ) p\n  pivot (\n    min(CreationDate)\n    for PostNumber in ([1], [2])\n  ) as pvt\n) as p\n  where [1] >= dateadd(year, -1, getdate())",
        "CreationDate": "2018-08-03 00:55:15",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 882551,
        "Title": "your answers sorted by score",
        "Description": null,
        "QueryBody": "DECLARE  @answerCount int = (select count(*) from posts where owneruserid=##UserID## and posttypeid=2)\n\nselect\n  Score,\n  count(*) as [#],\n  format(1.0*count(*)\/@answerCount, '0%') as [%]\nfrom Posts\nwhere owneruserid=##UserID##\nand posttypeid=2\ngroup by score\norder by score desc",
        "CreationDate": "2018-08-03 10:15:31",
        "validated": false,
        "QueryBody_Original": "DECLARE  @answerCount int = (select count(*) from posts where owneruserid=##UserID## and posttypeid=2)\n\nselect\n  Score,\n  count(*) as [#],\n  format(1.0*count(*)\/@answerCount, '0%') as [%]\nfrom Posts\nwhere owneruserid=##UserID##\nand posttypeid=2\ngroup by score\norder by score desc"
    },
    {
        "QuerySetId": 882556,
        "Title": "Reputation Gained until a Certain Date",
        "Description": null,
        "QueryBody": "SELECT  \n\n-- Total Reputation from Post Upvotes at any given Day\nSUM((CASE \n  WHEN (p.PostTypeId = 1 AND v.VoteTypeId = 2 AND (p.CommunityOwnedDate > v.CreationDate OR p.CommunityOwnedDate IS NULL)) THEN 5 \n  WHEN (p.PostTypeId = 2 AND v.VoteTypeId = 2 AND (p.CommunityOwnedDate > v.CreationDate OR p.CommunityOwnedDate IS NULL)) THEN 10 \n  WHEN (v.VoteTypeId = 3 AND (p.CommunityOwnedDate > v.CreationDate OR p.CommunityOwnedDate IS NULL)) THEN -2\n  ELSE 0 \nEND)) AS ReputationFromVotes,\nv.CreationDate AS VoteDate\n\n\nFROM Posts AS p \nINNER JOIN Votes AS v ON v.PostId = p.Id\n\nWHERE p.OwnerUserId =  ##UserId##\n\nGROUP BY v.CreationDate",
        "CreationDate": "2018-08-03 10:47:37",
        "validated": false,
        "QueryBody_Original": "SELECT  \n\n-- Total Reputation from Post Upvotes at any given Day\nSUM((CASE \n  WHEN (p.PostTypeId = 1 AND v.VoteTypeId = 2 AND (p.CommunityOwnedDate > v.CreationDate OR p.CommunityOwnedDate IS NULL)) THEN 5 \n  WHEN (p.PostTypeId = 2 AND v.VoteTypeId = 2 AND (p.CommunityOwnedDate > v.CreationDate OR p.CommunityOwnedDate IS NULL)) THEN 10 \n  WHEN (v.VoteTypeId = 3 AND (p.CommunityOwnedDate > v.CreationDate OR p.CommunityOwnedDate IS NULL)) THEN -2\n  ELSE 0 \nEND)) AS ReputationFromVotes,\nv.CreationDate AS VoteDate\n\n\nFROM Posts AS p \nINNER JOIN Votes AS v ON v.PostId = p.Id\n\nWHERE p.OwnerUserId =  ##UserId##\n\nGROUP BY v.CreationDate"
    },
    {
        "QuerySetId": 882833,
        "Title": "(under const) How long would it take you to catch up to Jon Skeet?",
        "Description": null,
        "QueryBody": "DECLARE  @skeetrep int = (select reputation from users where id=22656)\nselect id as [User Link],\n  format(creationdate,'MMM d, yyyy') as [User Since],\n  format(1.0*datediff(MM,creationdate,getdate())\/12,'0.0') as [Years Ago],\n  format(Reputation,'#,##0') as Reputation,\n  format(1.0*Reputation\/datediff(d,creationdate,getdate()),'0') as [Avg Rep\/Day Max=200],\n  format(@skeetRep-Reputation,'#,##0') as [Rep Difference],\n  \n -- ' (1.0*@skeetRep-Reputation)\/(200-Reputation\/datediff(d,creationdate,getdate()))\n  \n  format( (1.0*@skeetRep-Reputation)\/(200-Reputation\/datediff(d,creationdate,getdate())),'#,##0') as DaysToCatchUp,\n  format(round((@skeetRep-Reputation)\/200\/365,1),'0') as YearsToCatchUp\nfrom users\n\nwhere id in (##UserID##,22656)\norder by case when id=22656 then 0 else 1 end",
        "CreationDate": "2018-08-04 19:00:44",
        "validated": false,
        "QueryBody_Original": "DECLARE  @skeetrep int = (select reputation from users where id=22656)\nselect id as [User Link],\n  format(creationdate,'MMM d, yyyy') as [User Since],\n  format(1.0*datediff(MM,creationdate,getdate())\/12,'0.0') as [Years Ago],\n  format(Reputation,'#,##0') as Reputation,\n  format(1.0*Reputation\/datediff(d,creationdate,getdate()),'0') as [Avg Rep\/Day Max=200],\n  format(@skeetRep-Reputation,'#,##0') as [Rep Difference],\n  \n -- ' (1.0*@skeetRep-Reputation)\/(200-Reputation\/datediff(d,creationdate,getdate()))\n  \n  format( (1.0*@skeetRep-Reputation)\/(200-Reputation\/datediff(d,creationdate,getdate())),'#,##0') as DaysToCatchUp,\n  format(round((@skeetRep-Reputation)\/200\/365,1),'0') as YearsToCatchUp\nfrom users\n\nwhere id in (##UserID##,22656)\norder by case when id=22656 then 0 else 1 end"
    },
    {
        "QuerySetId": 882910,
        "Title": "All my posts with scores",
        "Description": null,
        "QueryBody": "SELECT  Id AS [Post Link], Score\nFROM Posts\nWHERE (OwnerUserId = ##uid##)\nORDER BY Id",
        "CreationDate": "2018-08-04 12:57:55",
        "validated": false,
        "QueryBody_Original": "SELECT  Id AS [Post Link], Score\nFROM Posts\nWHERE (OwnerUserId = ##uid##)\nORDER BY Id"
    },
    {
        "QuerySetId": 882912,
        "Title": "All my questions with scores",
        "Description": null,
        "QueryBody": "SELECT  Id AS [Post Link], Score\nFROM Posts\nWHERE (OwnerUserId = ##uid##) AND (PostTypeId=1)\nORDER BY Id",
        "CreationDate": "2018-08-04 13:03:37",
        "validated": false,
        "QueryBody_Original": "SELECT  Id AS [Post Link], Score\nFROM Posts\nWHERE (OwnerUserId = ##uid##) AND (PostTypeId=1)\nORDER BY Id"
    },
    {
        "QuerySetId": 882913,
        "Title": "All my answers with scores",
        "Description": null,
        "QueryBody": "SELECT  Id AS [Post Link], Score\nFROM Posts\nWHERE (OwnerUserId = ##uid##) AND (PostTypeId=2)\nORDER BY Id",
        "CreationDate": "2018-08-04 13:06:38",
        "validated": false,
        "QueryBody_Original": "SELECT  Id AS [Post Link], Score\nFROM Posts\nWHERE (OwnerUserId = ##uid##) AND (PostTypeId=2)\nORDER BY Id"
    },
    {
        "QuerySetId": 882940,
        "Title": "All-time Question Stats (overall+detail) edits\/closes\/reopens\/deletions",
        "Description": null,
        "QueryBody": "SELECT  PostId, min(Creationdate) as FirstClose                 -- reopened(11) =43929   -- closed(10) =766214 \ninto #FirstClose from PostHistory \nwhere PostHistoryTypeId = 10\ngroup by postid\n\nSELECT PostId, max(Creationdate) as LastReopen\ninto #LastReopen from PostHistory \nwhere PostHistoryTypeId = 11\ngroup by postid\n\nSELECT PostId, min(Creationdate) as FirstEdit, max(Creationdate) as LastEdit \ninto #edits from PostHistory \nwhere PostHistoryTypeId in (4,5,6,24)\ngroup by postid\n\nSELECT c.PostId, FirstClose, LastEdit, FirstEdit, LastReopen\nfrom #FirstClose c left outer join #lastReopen r on c.postid=r.postid left outer join #edits e on c.postid=e.postid",
        "CreationDate": "2018-08-04 15:32:37",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 883167,
        "Title": "average all users reputation earned per day",
        "Description": null,
        "QueryBody": "DECLARE  @t bigint =(select sum(convert(bigint,datediff(d,creationdate,getdate()))) from users) \nprint 'Total # Days: ' + format(@t,'#,##0')\nDECLARE @r bigint = (select sum(convert(bigint,reputation)) from users)\nprint 'Total Repuation: ' + format(@r,'#,##0')\nprint 'Avg Rep\/Day: ' + format(1.0*@r\/@t,'0.00')",
        "CreationDate": "2018-08-05 14:38:41",
        "validated": false,
        "QueryBody_Original": "DECLARE  @t bigint =(select sum(convert(bigint,datediff(d,creationdate,getdate()))) from users) \nprint 'Total # Days: ' + format(@t,'#,##0')\nDECLARE @r bigint = (select sum(convert(bigint,reputation)) from users)\nprint 'Total Repuation: ' + format(@r,'#,##0')\nprint 'Avg Rep\/Day: ' + format(1.0*@r\/@t,'0.00')"
    },
    {
        "QuerySetId": 883194,
        "Title": "Answers per Day (with Graph)",
        "Description": null,
        "QueryBody": "SELECT  cast(creationdate as date) as [Date], count(*) as [Answers]\nfrom posts\nwhere posttypeid=2 and owneruserid=##UserID##\ngroup by cast(creationdate as date) \norder by cast(creationdate as date) desc",
        "CreationDate": "2018-08-05 16:20:51",
        "validated": false,
        "QueryBody_Original": "SELECT  cast(creationdate as date) as [Date], count(*) as [Answers]\nfrom posts\nwhere posttypeid=2 and owneruserid=##UserID##\ngroup by cast(creationdate as date) \norder by cast(creationdate as date) desc"
    },
    {
        "QuerySetId": 883200,
        "Title": "How many comments have you made on someone else specific's posts?",
        "Description": "Other user defaults to Jon Skeet.",
        "QueryBody": "SELECT  \n p.owneruserid as [User Link],\n c.postid as [Post Link],\n p.Score,\n p.creationdate as [Posted],\n c.creationdate as [Commented],\n c.Score,\n c.id as [Comment Link]\nfrom comments c right outer join posts p on c.postid = p.id\nwhere c.userid = ##UserID## and p.owneruserid = ##OtherUserID:int?22656##\n\n--UserID: Enter your numeric User ID:\"You can find your numeric UserID within the URL for your site profile.\"\n--OtherUserID: Enter someone else's numeric User ID:\"You can find a numeric UserID within the URL for user's site profile.\"",
        "CreationDate": "2018-08-05 16:55:31",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 883201,
        "Title": "How many comments have you made on someone else's posts?",
        "Description": "Other user defaults to Jon Skeet.",
        "QueryBody": "SELECT  \n p.owneruserid as [User Link],\n c.postid as [Post Link],\n p.Score,\n p.creationdate as [Posted],\n c.creationdate as [Commented],\n c.Score,\n c.id as [Comment Link]\nfrom posts p left outer join comments c on c.postid = p.id\nwhere c.userid = ##UserID## and p.owneruserid = ##OtherUserID:int?22656##\n\n--UserID: Enter your numeric User ID:\"You can find your numeric UserID within the URL for your site profile.\"\n--OtherUserID: Enter someone else's numeric User ID:\"You can find a numeric UserID within the URL for user's site profile.\"",
        "CreationDate": "2018-08-05 16:58:22",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 884250,
        "Title": "Badges History (Skeet or anyone)",
        "Description": null,
        "QueryBody": "SELECT  \n  --userid as [User Link], \n  eomonth([Date]) as [Date],\n  count(*) as [# of Badges]\nfrom badges\nwhere userid = ##UserID:int?22656##\ngroup by eomonth([Date]), userid\norder by eomonth([Date])\n\n\n\n\n--UserID: Enter a numeric User ID: (Default=Jon Skeet)",
        "CreationDate": "2018-08-08 06:31:07",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 884251,
        "Title": "Badges History by Year, with Graph (Skeet or anyone)",
        "Description": null,
        "QueryBody": "SELECT  \n  year([Date]) as [Date],\n  count(*) as [# of Badges]\nfrom badges\nwhere userid = ##UserID:int?22656##\ngroup by year([Date]), userid\norder by year([Date])",
        "CreationDate": "2018-08-08 06:32:57",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 884311,
        "Title": "posts per tag, monthly historical  (also t-sql example: full outer join)",
        "Description": "Full Outer Join = include all rows from both tables even if there is no match (note the bottom query's SELECT and ORDER BY lines)",
        "QueryBody": "SELECT  eomonth(p.creationdate) as [Month],\n       t.TagName as TagName,\n       count(p.id) as [#Questions]\ninto #tQs from posts p left outer join posttags pt \non p.id=pt.postid join tags t on pt.tagid=t.id --questions\nwhere p.posttypeid in(1)                       --questions\ngroup by eomonth(p.creationdate), t.tagname\nhaving count(p.id)>100\n\nSELECT eomonth(p.creationdate) as [Month],\n       t.TagName as TagName,\n       count(p.id) as [#Answers]\ninto #tAs from posts p left outer join posttags pt \non p.parentid=pt.postid join tags t on pt.tagid=t.id --answers\nwhere p.posttypeid=2                       --answers\ngroup by eomonth(p.creationdate), t.tagname\nhaving count(p.id)>100\n\n\nSELECT q.*, a.* \nfrom #tQs q full outer join #tAs a on q.[month]=a.[month] and q.tagname=a.tagname",
        "CreationDate": "2018-08-08 14:40:45",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 884343,
        "Title": "Posts by Tag by Month",
        "Description": null,
        "QueryBody": "DECLARE  @minDate datetime = (select min(mindate) from #temp)\n--DECLARE @maxDate datetime = (select max(maxdate) from #temp)\n\/*\nselect \n  format([Month],'yyyy-MM') as [Month],\n  [TagName],\n  --[#Posts],\n  round((1.0*[#Posts])\/(1.0*datediff(minute,@minDate,@maxDate)\/60),2) as [PPH]\nfrom #temp\norder by format([Month],'yyyy-MM'),[TagName]\n*\/\nselect * from #temp",
        "CreationDate": "2018-08-08 13:58:31",
        "validated": false,
        "QueryBody_Original": "DECLARE  @minDate datetime = (select min(mindate) from #temp)\n--DECLARE @maxDate datetime = (select max(maxdate) from #temp)\n\/*\nselect \n  format([Month],'yyyy-MM') as [Month],\n  [TagName],\n  --[#Posts],\n  round((1.0*[#Posts])\/(1.0*datediff(minute,@minDate,@maxDate)\/60),2) as [PPH]\nfrom #temp\norder by format([Month],'yyyy-MM'),[TagName]\n*\/\nselect * from #temp"
    },
    {
        "QuerySetId": 884411,
        "Title": "Questions marked as duplicate without solved(WIP: Not Complete)",
        "Description": null,
        "QueryBody": "DECLARE  @UserId int = ##UserId##\n\n\/*SELECT * FROM POSTS PS WHERE PS.ID IN \n(\n  SELECT SUBSTRING(PH.Text,24,CHARINDEX(PH.Text, ']'))\n    FROM Posts P\n      INNER JOIN PostHistory PH\n        ON P.Id=PH.PostId \n          AND PH.PostHistoryTypeId =10\n          AND PH.Comment=1 \n    WHERE P.ClosedDate IS NOT NULL\n)\n   *\/\n\nSELECT SUBSTRING(PH.Text,CHARINDEX('[',PH.Text),CHARINDEX(']',PH.Text))\n    FROM Posts P\n      INNER JOIN PostHistory PH\n        ON P.Id=PH.PostId \n          AND PH.PostHistoryTypeId =10\n          AND PH.Comment=1 \n    WHERE P.ClosedDate IS NOT NULL",
        "CreationDate": "2018-08-08 16:26:45",
        "validated": false,
        "QueryBody_Original": "DECLARE  @UserId int = ##UserId##\n\n\/*SELECT * FROM POSTS PS WHERE PS.ID IN \n(\n  SELECT SUBSTRING(PH.Text,24,CHARINDEX(PH.Text, ']'))\n    FROM Posts P\n      INNER JOIN PostHistory PH\n        ON P.Id=PH.PostId \n          AND PH.PostHistoryTypeId =10\n          AND PH.Comment=1 \n    WHERE P.ClosedDate IS NOT NULL\n)\n   *\/\n\nSELECT SUBSTRING(PH.Text,CHARINDEX('[',PH.Text),CHARINDEX(']',PH.Text))\n    FROM Posts P\n      INNER JOIN PostHistory PH\n        ON P.Id=PH.PostId \n          AND PH.PostHistoryTypeId =10\n          AND PH.Comment=1 \n    WHERE P.ClosedDate IS NOT NULL"
    },
    {
        "QuerySetId": 884682,
        "Title": "View comments sorted by score",
        "Description": null,
        "QueryBody": "SELECT  * --count(score)\nFROM Comments \nWHERE Userid = ##UserId## --2727437\n  AND Score > 0\nORDER BY Score Desc",
        "CreationDate": "2018-08-08 23:55:24",
        "validated": false,
        "QueryBody_Original": "SELECT  * --count(score)\nFROM Comments \nWHERE Userid = ##UserId## --2727437\n  AND Score > 0\nORDER BY Score Desc"
    },
    {
        "QuerySetId": 884698,
        "Title": "\"New Year's Babies\": First new user each New Year's Day (Midnight UTC)",
        "Description": null,
        "QueryBody": "SELECT  \n  year(creationdate) as [Year],\n  min(u.creationdate) as [New Year's Baby]\ninto #temp from users u\nwhere creationdate>='2008-08-01'\ngroup by year(creationdate)\norder by year(creationdate)\n\nSELECT \n  t.[Year],\n  u.id as [User Link],\n  u.Reputation,\n  u.creationdate as [Join Date],\n  u.lastaccessdate as [Last Access],\n  Location\nfrom #temp t left join users u on t.[New Year's Baby]=u.creationdate\norder by  t.[Year]",
        "CreationDate": "2018-08-09 01:42:52",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 884709,
        "Title": "all users annually: year joined compared to years active",
        "Description": "another \"user retention\" query. This one compares join dates to actual years active (as opposed to number of years on Pivot Query #884564)",
        "QueryBody": "SELECT  distinct \n  p.owneruserid as userID,\n  u.creationdate as YearJoined,\n  year(p.creationdate) as YearPosted\ninto #temp\nfrom posts p right outer join users u on p.owneruserid = u.id\n\nSELECT count(*) from #temp",
        "CreationDate": "2018-08-09 02:33:29",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 884776,
        "Title": "Recent bounties with a given tag",
        "Description": null,
        "QueryBody": "SELECT  TOP ##number?100##\n  --number: Number of questions to query:\n  p.Id AS [Post Link],\n  p.Score AS 'Score',\n  p.AnswerCount AS 'Answers',\n  bs.BountyAmount AS 'Amount',\n  p.Tags,  \n  convert(varchar(10), bs.CreationDate, 120) AS 'Bounty Start'\nFROM Posts p\nINNER JOIN Votes bs\n    ON p.Id = bs.PostId\n    AND bs.VoteTypeId = 8  -- BountyStart\n    AND p.Tags LIKE '%<##Tagname##>%'\nORDER BY bs.CreationDate DESC",
        "CreationDate": "2018-08-09 13:06:20",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 885471,
        "Title": "Badges awarded to users on the day they joined",
        "Description": "Badges awarded to users on the day they joined the site, not counting badges for taking the [tour] or completing their bio.  Badge info: https:\/\/stackoverflow.com\/help\/badges",
        "QueryBody": "SELECT  \n  id as userid, \n  reputation,\n  cast(creationdate as date) as joindate\ninto #joindates from users \n\nSELECT \n  j.userid,\n  j.joindate,\n  j.reputation,\n  name,\n  [date] as BadgeDate,\n  tagbased,\n  class\ninto #b from badges b  right outer join #joindates j \non ( j.userid=b.userid and j.joindate=cast(b.[date] as date) )\nwhere name is not null\n\nSELECT \n  name as Badge, \n  count(*) as [Badges Awarded on 1st Day]\nfrom #b\ngroup by name\norder by count(*) desc\n\nSELECT * from #b",
        "CreationDate": "2018-08-10 16:08:40",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 885596,
        "Title": "So do you have your answer on dba.SE?",
        "Description": null,
        "QueryBody": "SELECT  TOP 100\n       row_number() OVER (ORDER BY c.CreationDate DESC) AS [Nr]\n     , p.Id AS [Post Link]\n     , c.Text\n     , c.CreationDate AS c_date\n     , c.Score AS c_score\n     , 'site:\/\/questions\/' + CAST(p.Id AS nvarchar) + '#' + CAST(p.AcceptedAnswerId AS nvarchar) AS [Accepted Answer]\n     , (SELECT count(*)\n        FROM   Comments AS c1\n        WHERE  c1.PostId = c.PostId\n        AND    c1.CreationDate > c.CreationDate) AS later_comments\nFROM   Comments AS c\nJOIN   Posts As p ON p.Id = c.PostId\nWHERE  c.Text LIKE '%' + ##SearchQuery:string?o you have%answer## + '%'\nAND    c.UserId = ##UserId:int?3684##  -- My dba.SE userID as default\nORDER  BY c.CreationDate DESC;",
        "CreationDate": "2018-08-10 21:53:56",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 885621,
        "Title": "User Streaks on Site ",
        "Description": "ordered by longest streak.  Streak = 2 more more consecutive \"actions\" with a a maximum gap of [specified number of hours].  \"Actions\" = post, comment, edit, favourite, SuggEdit vote.  Detail on MESSAGES tab.  Uses a T-SQL CURSOR.",
        "QueryBody": "SELECT  distinct \n  creationdate\nfrom posthistory\nwhere userid = ##UserID##\norder by creationdate\n\/*SELECT distinct \n  pt.name as PostType,\n  p.creationdate\ninto #p from posts p join  posttypes pt on p.posttypeid = pt.id\nwhere owneruserid=##UserID##\n\nSELECT  * from #p\norder by creationdate",
        "CreationDate": "2018-08-10 23:39:06",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 885688,
        "Title": "new users who never came back after their first question",
        "Description": "questions with no answers, score 1 or less,  last activity date is within 7 days of join date, at least 6 months before today",
        "QueryBody": "SELECT \n  id as userid,\n  creationdate as joindate,\n  datediff(d,creationdate,LastAccessDate) as lastactivity_dayslater,\n  reputation\ninto #users from users\nwhere datediff(d,creationdate,LastAccessDate)<7 --lasted less than a week\n  and creationdate <=dateadd(d,-180,getdate())\n  and reputation between 1 and 20\n\nSELECT\n  id as postid,\n  score,\n  answercount,\n  owneruserid\ninto #posts from posts\nwhere owneruserid in (SELECT userid from #users)\n  and posttypeid=1\n\nSELECT \n  owneruserid as [User Link], \n  Score, \n  AnswerCount,\n  count(*) as [Count]\ninto #onepost from #posts \ngroup by owneruserid, score, answercount\nhaving count(*) = 1\n\nSELECT \n  *\nfrom #onepost \nwhere \n  answercount=0 and score <2",
        "CreationDate": "2018-08-11 14:23:36",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 885725,
        "Title": "Q's & A's by time of day (UTC)",
        "Description": "Q's & A's by time of day (UTC)",
        "QueryBody": "SELECT  datepart(weekday,creationdate) as DOW, --format(creationdate,'dddd') as DOW,\ncount(*) as [count]\nfrom posts\ngroup by datepart(weekday,creationdate)\n\n\/*\nSELECT \n  format(creationdate,'HH:00') as [Time],\n  case when posttypeid=2 then 'Answer' else 'Question' end as [Type],\n  count(*) as [Count]\nfrom posts\nwhere creationdate >=dateadd(d,-90,getdate()) and posttypeid in (1,2)\ngroup by \n  posttypeid, format(creationdate,'HH:00'), \n  case when posttypeid=2 then 'Answer' else 'Question' end\norder by format(creationdate,'HH:00'), posttypeid",
        "CreationDate": "2018-08-12 01:00:14",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 885874,
        "Title": "Tag wikis created by a deleted user",
        "Description": null,
        "QueryBody": "SELECT  concat(\n          'site:\/\/tags\/',\n          t.tagname,\n          '\/info|', \n          t.tagname, \n          ' ',  \n          case when p.posttypeid = 4 then 'excerpt' else 'wiki' end\n          ) [Tag Link]\n     , p.Body\nFrom Posts p\ninner join tags t on (t.wikipostid = p.id or t.excerptpostid = p.id)\nWhere (OwnerDisplayName='user' + Convert(nvarchar(20), ##UserId##)) AND\n  ((PostTypeId = 3) OR (PostTypeId=4))",
        "CreationDate": "2018-08-13 10:16:31",
        "validated": false,
        "QueryBody_Original": "SELECT  concat(\n          'site:\/\/tags\/',\n          t.tagname,\n          '\/info|', \n          t.tagname, \n          ' ',  \n          case when p.posttypeid = 4 then 'excerpt' else 'wiki' end\n          ) [Tag Link]\n     , p.Body\nFrom Posts p\ninner join tags t on (t.wikipostid = p.id or t.excerptpostid = p.id)\nWhere (OwnerDisplayName='user' + Convert(nvarchar(20), ##UserId##)) AND\n  ((PostTypeId = 3) OR (PostTypeId=4))"
    },
    {
        "QuerySetId": 885875,
        "Title": "Suggested edits by a deleted user",
        "Description": null,
        "QueryBody": "SELECT  PostId AS [Post Link] \nFROM PostHistory\nWHERE (PostHistoryTypeId = 24) AND (UserDisplayName='user' + Convert(nvarchar(20), ##UserId##))",
        "CreationDate": "2018-08-12 13:48:21",
        "validated": false,
        "QueryBody_Original": "SELECT  PostId AS [Post Link] \nFROM PostHistory\nWHERE (PostHistoryTypeId = 24) AND (UserDisplayName='user' + Convert(nvarchar(20), ##UserId##))"
    },
    {
        "QuerySetId": 885879,
        "Title": "Questions where YOUR ANSWER WAS ACCEPTED, but you [possibly] DIDN'T UPVOTE THE O.P.",
        "Description": "Why not return the favour to the OP and upvote the question, since they accepted your answer?",
        "QueryBody": "SELECT \n  q.id as [Post Link], \n  format(a.creationdate,'MMM d yyyy') as [Date],\n  q.score as [Question score],\n  a.score as [Answer score],\n  q.viewcount as Views\nfrom posts q left join posts a on q.id=a.parentid\nwhere \n  a.posttypeid=2 --answers \n  and a.owneruserid=##UserID## --by specified user\n  and a.owneruserid <> q.owneruserid --not answered by me\n  and q.AcceptedAnswerId = a.id  --mine is accepted\n  and q.score <=0 --question score less than 1\norder by q.viewcount desc",
        "CreationDate": "2018-08-12 16:04:42",
        "validated": false,
        "QueryBody_Original": "SELECT \n  q.id as [Post Link], \n  format(a.creationdate,'MMM d yyyy') as [Date],\n  q.score as [Question score],\n  a.score as [Answer score],\n  q.viewcount as Views\nfrom posts q left join posts a on q.id=a.parentid\nwhere \n  a.posttypeid=2 --answers \n  and a.owneruserid=##UserID## --by specified user\n  and a.owneruserid <> q.owneruserid --not answered by me\n  and q.AcceptedAnswerId = a.id  --mine is accepted\n  and q.score <=0 --question score less than 1\norder by q.viewcount desc"
    },
    {
        "QuerySetId": 885881,
        "Title": "Your ACCEPTED ANSWERS that are [possibly] NOT UPVOTED BY THE O.P.",
        "Description": "...maybe you should give the OP a friendly reminder that it's customary to upvote answers that are helpful. (Maybe they don't realize they can both accept AND vote on the same answer?)",
        "QueryBody": "SELECT \n  q.id as [Post Link], \n  format(a.creationdate,'MMM d yyyy') as [Date],\n  q.score as [Question score],\n  a.score as [Answer score],\n  q.viewcount as Views\nfrom posts q left join posts a on q.id=a.parentid\nwhere \n  a.posttypeid=2 --answers \n  and a.owneruserid=##UserID## --by specified user\n  and a.owneruserid <> q.owneruserid --not answered by me\n  and q.AcceptedAnswerId = a.id  --mine is accepted\n  and a.score <=0 --question score less than 1\norder by q.viewcount desc",
        "CreationDate": "2018-08-12 16:07:03",
        "validated": false,
        "QueryBody_Original": "SELECT \n  q.id as [Post Link], \n  format(a.creationdate,'MMM d yyyy') as [Date],\n  q.score as [Question score],\n  a.score as [Answer score],\n  q.viewcount as Views\nfrom posts q left join posts a on q.id=a.parentid\nwhere \n  a.posttypeid=2 --answers \n  and a.owneruserid=##UserID## --by specified user\n  and a.owneruserid <> q.owneruserid --not answered by me\n  and q.AcceptedAnswerId = a.id  --mine is accepted\n  and a.score <=0 --question score less than 1\norder by q.viewcount desc"
    },
    {
        "QuerySetId": 885882,
        "Title": "Tag-info edits by a deleted user",
        "Description": null,
        "QueryBody": "SELECT  concat(\n          'site:\/\/tags\/',\n          t.tagname,\n          '\/info|', \n          t.tagname, \n          ' ',  \n          case when p.posttypeid = 4 then 'excerpt' else 'wiki' end\n          ) [Tag Link]\n     , p.body\nFROM PostHistory h \nJOIN Posts p ON h.PostId=p.Id\ninner join tags t on (t.wikipostid = p.id or t.excerptpostid = p.id)\nWHERE (p.PostTypeId in (4,5)) \nAND (h.PostHistoryTypeId in (2,5)) \nAND (h.UserDisplayName='user' + Convert(nvarchar(20), ##UserId##))",
        "CreationDate": "2018-08-12 23:02:44",
        "validated": false,
        "QueryBody_Original": "SELECT  concat(\n          'site:\/\/tags\/',\n          t.tagname,\n          '\/info|', \n          t.tagname, \n          ' ',  \n          case when p.posttypeid = 4 then 'excerpt' else 'wiki' end\n          ) [Tag Link]\n     , p.body\nFROM PostHistory h \nJOIN Posts p ON h.PostId=p.Id\ninner join tags t on (t.wikipostid = p.id or t.excerptpostid = p.id)\nWHERE (p.PostTypeId in (4,5)) \nAND (h.PostHistoryTypeId in (2,5)) \nAND (h.UserDisplayName='user' + Convert(nvarchar(20), ##UserId##))"
    },
    {
        "QuerySetId": 885883,
        "Title": "experiment: display a monthly calendar",
        "Description": "experiment: draw current month's calendar using box drawing characters",
        "QueryBody": "DECLARE  @startdate date = getdate()\nDECLARE @dt date  --= datefromparts(year(@startdate),month(@startdate),1)\nDECLARE @position smallint = 0\nDECLARE @st nvarchar(max) = N''\nDECLARE @anotherweek bit = 'true'\n\nprint replicate(' ',20)+format(@startdate,'MMMM yyyy')\n\n--while @anotherweek='true'\n\n\n\n\n\n \/* \u2554\u2550\u2566\u2557   \u2554\u2557 \u2554\u2566\u2550\u2557\n    \u2551 \u2551\u2551   \u2551\u2551 \u2560\u256c\u2550\u255d\n    \u2560\u2550\u256c\u2563 \u2554\u2550\u256c\u2563 \u2551\u2551 \n    \u255a\u2550\u2569\u255d \u255a\u2550\u2569\u255d \u255a\u255d   *\/\n\nprint @st",
        "CreationDate": "2018-08-12 17:34:02",
        "validated": false,
        "QueryBody_Original": "DECLARE  @startdate date = getdate()\nDECLARE @dt date  --= datefromparts(year(@startdate),month(@startdate),1)\nDECLARE @position smallint = 0\nDECLARE @st nvarchar(max) = N''\nDECLARE @anotherweek bit = 'true'\n\nprint replicate(' ',20)+format(@startdate,'MMMM yyyy')\n\n--while @anotherweek='true'\n\n\n\n\n\n \/* \u2554\u2550\u2566\u2557   \u2554\u2557 \u2554\u2566\u2550\u2557\n    \u2551 \u2551\u2551   \u2551\u2551 \u2560\u256c\u2550\u255d\n    \u2560\u2550\u256c\u2563 \u2554\u2550\u256c\u2563 \u2551\u2551 \n    \u255a\u2550\u2569\u255d \u255a\u2550\u2569\u255d \u255a\u255d   *\/\n\nprint @st"
    },
    {
        "QuerySetId": 886646,
        "Title": "Posts by tag per month",
        "Description": null,
        "QueryBody": "DECLARE  @nm nvarchar (35) = ##entername##\n\nSELECT \n    CAST(YEAR(Posts.CreationDate) AS VARCHAR(4)),\n    COUNT(0)\nFROM Tags\n    INNER JOIN PostTags ON PostTags.TagId = Tags.id\n    INNER JOIN Posts ON Posts.Id = PostTags.PostId\nWHERE \n    Tags.TagName = 'powerbi'\nGROUP BY \n  CAST(YEAR(Posts.CreationDate) AS VARCHAR(4))\nORDER BY \n    1",
        "CreationDate": "2018-08-15 17:22:16",
        "validated": false,
        "QueryBody_Original": "DECLARE  @nm nvarchar (35) = ##entername##\n\nSELECT \n    CAST(YEAR(Posts.CreationDate) AS VARCHAR(4)),\n    COUNT(0)\nFROM Tags\n    INNER JOIN PostTags ON PostTags.TagId = Tags.id\n    INNER JOIN Posts ON Posts.Id = PostTags.PostId\nWHERE \n    Tags.TagName = 'powerbi'\nGROUP BY \n  CAST(YEAR(Posts.CreationDate) AS VARCHAR(4))\nORDER BY \n    1"
    },
    {
        "QuerySetId": 886658,
        "Title": "(unders construction) experimenting with posthistory re: gold badge'd users power-close",
        "Description": null,
        "QueryBody": "WITH  gold tag badges\n\nselect userid, count(*) as [GoldTagBadges]\ninto #goldUsers from badges \nwhere class=1 and tagbased='true'   -- and (name like '%excel%' or name like '%vba%') and userid = ##UserID##\ngroup by userid\norder by count(*) desc\n\n\nselect\n  userid as [User Link],\n  count(text) as [PowerCloses]\nfrom posthistory \nwhere PostHistoryTypeId=10 --closed\n  and userid <> -1\n  --and userid in ( select userid from #goldUsers )\n  and text like '{\"Voters%' and userid=4039065\ngroup by userid\n\n\n\n\n\n--\/\/data.stackexchange.com\/stackoverflow\/query\/886660\/count-of-gold-tag-badges-awarded-by-tag",
        "CreationDate": "2018-08-14 15:35:12",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 886660,
        "Title": "count of gold tag badges awarded, by tag",
        "Description": null,
        "QueryBody": "SELECT  \n  rank() over (order by count(*) desc) as [Rank],\n  name as [TagName], \n  count(*) as [Awarded]\ninto #goldTagBadges from badges \nwhere \n  class=1 \n  and tagbased='true'\ngroup by name\norder by count(*) desc\n\nSELECT * \nfrom #goldTagBadges\n--where tagname in ('vba','excel','excel-vba','kotlin','sql')\norder by rank",
        "CreationDate": "2018-08-14 14:50:47",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 887210,
        "Title": "WHICH TAGS you talk about the most (by wordcount in comments) - multi user prompt, all tags",
        "Description": "(UNFINISHED) so far it's only looking at Tags for questions that you have COMMENTED on (either the question's or answer's comment)",
        "QueryBody": "SELECT  \n  UserId,\n  postid,\n  count(*) as [#Comments],\n  sum(len(text)-len(replace(text,' ',''))) as [#Words],\n  format(1.0*sum(len(text)  -len(replace(text,' ','')))\/count(*),'0.0') as [Words\/Comment]\ninto #comments from comments\nwhere userid in(##UserID##)\ngroup by userid, postid\n\nSELECT\n  c.userid,c.postid,[#comments],[#Words],[Words\/Comment],\n  count(distinct userid) as [cnt], --pt.*,\n  a.parentid\nfrom #comments c \nleft outer join posttags pt on c.postid=pt.postid\nleft outer join posts a     on c.postid=a.id\ngroup by c.userid,c.postid,[#comments],[#Words],[Words\/Comment], a.parentid\n\n\/*\nSELECT \n  UserId,\n  [#Comments],\n  [Words\/Comment]\nfrom #comments c \n--order by [Words\/Comment]\n\n\n--UserID: Enter one or more numeric User ID's:\"Multiple ID's should be comma sepasrated.\"",
        "CreationDate": "2018-08-15 19:27:44",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 887385,
        "Title": "Other users who frequent the SAME TAGS that you do",
        "Description": "See TAB#2 for your \"top tags\" as used for this query.   (\"Actions\" = posts or comments on questions or answers related to the tag)",
        "QueryBody": "DECLARE  @startDate datetime = dateadd(d,-7,getdate())\n\n\nselect\n  p.id,\n  p.parentid,\n  isnull(p.parentid,p.id),\n  tagname\nfrom posts p \n  left join comments c on c.postid=p.id \n  left join posttags pt on isnull(p.parentid,p.id)=pt.postid\n  left join tags t on pt.tagid=t.id\nwhere \n  p.owneruserid in (##UserID##)\n  and p.creationdate>=@startDate ----<<<< 7 days\n\/*\n\n\nselect \n  p.owneruserid as userid, \n  p.id,\n  p.parentid,\n  pt.tagid,\n  tagname\nfrom posts p left join posttags pt on isnull(parentid,id)=pt.postid left join tags t on pt.tagid=t.id\nwhere \n  p.owneruserid in (##UserID##)\n  and p.creationdate>=@startDate)\n\n\n\n\/*\nunion all\n\nselect \n  userid, \n  count(*) as [#comments]\ninto #comments from comments \nwhere \n  userid in (##UserID##)\n  and creationdate>=@startDate\ngroup by userid",
        "CreationDate": "2018-08-16 13:46:56",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 887885,
        "Title": "Top viewed questions by tag within a timeframe",
        "Description": null,
        "QueryBody": "DECLARE  @Tag VARCHAR(25) = '##Tag##'\nDECLARE @Period INT = '##Period##'\n\nSELECT TOP 100 Q.Id AS [Post Link], \n    Q.Tags, Q.AnswerCount, Q.ViewCount\nFROM Posts AS Q\nINNER JOIN PostTags AS P ON P.PostId = Q.Id\nINNER JOIN Tags AS T ON T.Id = P.TagId\nWHERE T.TagName = @Tag AND\n      (Q.CreationDate BETWEEN DATEADD(MONTH, -@Period, GETDATE()) AND GETDATE())\nORDER BY Q.ViewCount DESC",
        "CreationDate": "2020-06-09 17:31:18",
        "validated": false,
        "QueryBody_Original": "DECLARE  @Tag VARCHAR(25) = '##Tag##'\nDECLARE @Period INT = '##Period##'\n\nSELECT TOP 100 Q.Id AS [Post Link], \n    Q.Tags, Q.AnswerCount, Q.ViewCount\nFROM Posts AS Q\nINNER JOIN PostTags AS P ON P.PostId = Q.Id\nINNER JOIN Tags AS T ON T.Id = P.TagId\nWHERE T.TagName = @Tag AND\n      (Q.CreationDate BETWEEN DATEADD(MONTH, -@Period, GETDATE()) AND GETDATE())\nORDER BY Q.ViewCount DESC"
    },
    {
        "QuerySetId": 887917,
        "Title": "Qui\u00e9n pregunta m\u00e1s, por a\u00f1os",
        "Description": null,
        "QueryBody": "SELECT  TOP 10 MAX(Users.DisplayName), Users.Id, COUNT(Posts.Id)\nFROM Users LEFT JOIN Posts ON Users.Id = Posts.OwnerUserId\nWHERE Posts.PostTypeId = 1\nand YEAR(Posts.CreationDate)=##Parameter:int?2018##\nGROUP BY Users.Id\nORDER BY COUNT(Posts.Id) DESC;",
        "CreationDate": "2018-08-17 18:30:04",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 887932,
        "Title": "Most popular questions for a tag",
        "Description": null,
        "QueryBody": "DECLARE  @Tag NVARCHAR(200) = ##Tag:string##\n\nSELECT TOP 20\n    'https:\/\/stackoverflow.com\/questions\/' + CAST(Posts.Id as varchar(10)) AS Url\n    , Posts.Title\n    , Posts.ViewCount\n    , Posts.Tags\n    , Posts.Score\n    , Posts.AnswerCount\nFROM Tags\n    INNER JOIN PostTags ON PostTags.TagId = Tags.id\n    INNER JOIN Posts ON Posts.Id = PostTags.PostId\nWHERE\n    PostTypeId = 1\n    AND TagName = @Tag\nORDER BY ViewCount DESC",
        "CreationDate": "2018-12-02 22:09:05",
        "validated": false,
        "QueryBody_Original": "DECLARE  @Tag NVARCHAR(200) = ##Tag:string##\n\nSELECT TOP 20\n    'https:\/\/stackoverflow.com\/questions\/' + CAST(Posts.Id as varchar(10)) AS Url\n    , Posts.Title\n    , Posts.ViewCount\n    , Posts.Tags\n    , Posts.Score\n    , Posts.AnswerCount\nFROM Tags\n    INNER JOIN PostTags ON PostTags.TagId = Tags.id\n    INNER JOIN Posts ON Posts.Id = PostTags.PostId\nWHERE\n    PostTypeId = 1\n    AND TagName = @Tag\nORDER BY ViewCount DESC"
    },
    {
        "QuerySetId": 888286,
        "Title": "Edits by a specific user per day",
        "Description": null,
        "QueryBody": "SELECT \n  CAST(CreationDate as Date),\n  COUNT(Id)\n  FROM PostHistory WHERE ((PostHistoryTypeId in (4,5,6)) AND (UserId=##userid##))\nGROUP BY CAST(CreationDate as Date)\nORDER BY CAST(CreationDate as Date) DESC",
        "CreationDate": "2018-08-19 00:27:30",
        "validated": false,
        "QueryBody_Original": "SELECT \n  CAST(CreationDate as Date),\n  COUNT(Id)\n  FROM PostHistory WHERE ((PostHistoryTypeId in (4,5,6)) AND (UserId=##userid##))\nGROUP BY CAST(CreationDate as Date)\nORDER BY CAST(CreationDate as Date) DESC"
    },
    {
        "QuerySetId": 888317,
        "Title": "Most edits per day ",
        "Description": null,
        "QueryBody": "SELECT  TOP ##num?250##\n  UserId AS [User Link], \n  CAST(CreationDate as Date),\n  COUNT(Id) AS editcount\n  FROM PostHistory WHERE ((PostHistoryTypeId in (4,5,6)))\nGROUP BY UserId, CAST(CreationDate as Date)\nORDER BY editcount DESC",
        "CreationDate": "2018-08-19 07:48:49",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 888419,
        "Title": "Top editors in a given period (excluding edits on user's own posts)",
        "Description": null,
        "QueryBody": "SELECT  TOP (##num?100##)\n  ph.UserId AS [User Link],\n  COUNT(DISTINCT RevisionGUID) AS [Count]\n--Count(Id) would count several times if body\/tags\/title are edited in the same edit\nFROM\n  PostHistory ph JOIN Posts p ON ph.PostId=p.Id\nWHERE\n  ph.PostHistoryTypeId IN (4, 5, 6) -- edit title\/body\/tags\n  AND (ph.CreationDate >= '##Date1?2018-01-01##') AND (ph.CreationDate <= '##Date2?2018-12-31##')\n  AND (p.OwnerUserId<>ph.UserId)\nGROUP BY\n  ph.UserId\nORDER BY\n  [Count] DESC",
        "CreationDate": "2018-08-19 17:28:13",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 888420,
        "Title": "Top editors in a given period (excluding title\/tag-only edits)",
        "Description": null,
        "QueryBody": "SELECT  TOP (##num?100##)\n  ph.UserId AS [User Link],\n  COUNT(DISTINCT RevisionGUID) AS [Count] \n--Count(Id) would count several times if body\/tags\/title are edited in the same edit\nFROM\n  PostHistory ph\nWHERE\n  ph.PostHistoryTypeId=5 \n-- only body edits \n  AND (ph.CreationDate >= '##Date1?2018-01-01##') AND (ph.CreationDate <= '##Date2?2018-12-31##')\nGROUP BY\n  ph.UserId\nORDER BY\n  [Count] DESC",
        "CreationDate": "2018-08-19 17:35:57",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 888470,
        "Title": "Can we export timeline statistics of a post into a csv file?",
        "Description": "https:\/\/meta.stackoverflow.com\/questions\/372771\/can-we-export-timeline-statistics-of-a-post-into-a-csv-file\/372772#372772",
        "QueryBody": "SELECT  creationdate\n     , [type]\n     , [typeid] as [History, vote or post typeid]\n     , name\nfrom\n(\n-- all posthistory events\nSELECT creationdate\n     , 'hist' [type]\n     , posthistorytypeid as typeid\n     , name\nfrom posthistory\ninner join posthistorytypes pht on pht.id = posthistorytypeid\nwhere postid = ##postid?5963269##\nunion \n-- all votes\nSELECT creationdate\n     , 'votes' \n     , votetypeid\n     , name\nfrom votes\ninner join votetypes vt on vt.id = votetypeid\nwhere postid = ##postid?5963269##\nunion \n-- all answers (for questions)\nSELECT creationdate\n     , 'answer'\n     , posttypeid\n     , 'answer added'\nfrom posts\nwhere parentid = ##postid?5963269##\n) data\norder by creationdate desc",
        "CreationDate": "2018-08-19 20:48:24",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 888514,
        "Title": "t-sql try catch error_line etc",
        "Description": "t-sql example error handling",
        "QueryBody": "SELECT   \n        ERROR_NUMBER() AS ErrorNumber,  \n        ERROR_SEVERITY() AS ErrorSeverity,  \n        ERROR_STATE() AS ErrorState,  \n        ERROR_PROCEDURE() AS ErrorProcedure,  \n        ERROR_LINE() AS ErrorLine,  \n        ERROR_MESSAGE() AS ErrorMessage;  \nEND CATCH;  \nGO",
        "CreationDate": "2018-08-20 08:30:27",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 889289,
        "Title": "Calculate distance between 2 sets of geographic coordinates",
        "Description": "Calculates the distance between two sets of geographic (map) coordinates (Lat\/Lon in decimal format).",
        "QueryBody": "DECLARE  @lat1 float = 50.666 DECLARE @lon1 float = -130.490 \n--DECLARE @lat2 float = 53.338 DECLARE @lon2 float = -133.002 \nDECLARE @lat2 float = 49 DECLARE @lon2 float = -125 \n\nDECLARE @R float = 6371e3; --metres\nDECLARE @\u03c61 float = radians(@lat1);\nDECLARE @\u03c62 float = radians(@lat2);\nDECLARE @\u0394\u03c6 float = radians(@lat2-@lat1);\nDECLARE @\u0394\u03bb float = radians(@lon2-@lon1);\n\n\nDECLARE @a float = sin(@\u0394\u03c6\/2) * sin(@\u0394\u03c6\/2) +\n                   cos(@\u03c61) * cos(@\u03c62) *\n                   sin(@\u0394\u03bb\/2) * sin(@\u0394\u03bb\/2);\nDECLARE @c float = 2 * atn2(sqrt(@a), sqrt(1-@a));\n\nDECLARE @d float = @R * @c;\n\nprint @d\/1000 --km",
        "CreationDate": "2018-08-22 02:07:24",
        "validated": false,
        "QueryBody_Original": "DECLARE  @lat1 float = 50.666 DECLARE @lon1 float = -130.490 \n--DECLARE @lat2 float = 53.338 DECLARE @lon2 float = -133.002 \nDECLARE @lat2 float = 49 DECLARE @lon2 float = -125 \n\nDECLARE @R float = 6371e3; --metres\nDECLARE @\u03c61 float = radians(@lat1);\nDECLARE @\u03c62 float = radians(@lat2);\nDECLARE @\u0394\u03c6 float = radians(@lat2-@lat1);\nDECLARE @\u0394\u03bb float = radians(@lon2-@lon1);\n\n\nDECLARE @a float = sin(@\u0394\u03c6\/2) * sin(@\u0394\u03c6\/2) +\n                   cos(@\u03c61) * cos(@\u03c62) *\n                   sin(@\u0394\u03bb\/2) * sin(@\u0394\u03bb\/2);\nDECLARE @c float = 2 * atn2(sqrt(@a), sqrt(1-@a));\n\nDECLARE @d float = @R * @c;\n\nprint @d\/1000 --km"
    },
    {
        "QuerySetId": 889422,
        "Title": "HIghest voted VBA answers in the last 10 days (that aren't mine)",
        "Description": null,
        "QueryBody": "SELECT  \n  datediff(d,a.creationdate,getdate()) as [Answer Age (Days)],\n  a.id as [Post Link],\n  q.Tags,\n  a.score as aScore,\n  q.score as qScore\nfrom posts q left outer join posts a on q.id=a.parentid\nwhere \n  q.tags like '%vba>%' \n  and a.creationdate >=dateadd(d,-10,getdate())\n  and a.owneruserid not like ##UserID##\n  and a.score>1 and q.score >0\norder by a.score desc, q.score desc\n\n--UserID:Numeric user id to *exclude* from results:",
        "CreationDate": "2018-08-22 15:38:42",
        "validated": false,
        "QueryBody_Original": "SELECT  \n  datediff(d,a.creationdate,getdate()) as [Answer Age (Days)],\n  a.id as [Post Link],\n  q.Tags,\n  a.score as aScore,\n  q.score as qScore\nfrom posts q left outer join posts a on q.id=a.parentid\nwhere \n  q.tags like '%vba>%' \n  and a.creationdate >=dateadd(d,-10,getdate())\n  and a.owneruserid not like ##UserID##\n  and a.score>1 and q.score >0\norder by a.score desc, q.score desc\n\n--UserID:Numeric user id to *exclude* from results:"
    },
    {
        "QuerySetId": 889444,
        "Title": "Top users based on score from answers",
        "Description": null,
        "QueryBody": "SELECT  top ##num?100## u.Id as [User Link], sum(p.Score) as [Answer score] from Users u\ninner join Posts p\non p.OwnerUserId = u.Id\nwhere p.PostTypeId = 2\ngroup by u.Id\norder by [Answer score] desc",
        "CreationDate": "2018-08-22 16:52:26",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 890114,
        "Title": "Recent mod actions on questions",
        "Description": null,
        "QueryBody": "SELECT  TOP(##num?100##)\n    ph.CreationDate,\n  ph.PostHistoryTypeId,\n  ph.UserId AS [User Link],\n  ph.UserDisplayName,\n  p.Id AS [Post Link],\n  concat('site:\/\/posts\/',\n          p.Id,\n          '\/revisions'\n          ) [Revisions Link]\nFROM PostHistory ph INNER JOIN Posts p\n  ON ph.PostId=p.Id\n  AND ph.PostHistoryTypeId IN (14,15,16,37,38,53)\n  AND p.PostTypeId=1\nORDER BY ph.CreationDate DESC\n\n--14 = Post Locked - post locked by moderator\n--15 = Post Unlocked - post unlocked by moderator\n--16 = Community Owned - post now community owned\n--QUESTION can only be made CW by a moderator (so I look only at question; PostTypeId=1)\n--37 = Post merge source\n--38 = Post merge destination\n--53 = removed from HNQ",
        "CreationDate": "2020-07-07 20:18:49",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 890150,
        "Title": "Recent posts by a MathOverflow moderators",
        "Description": null,
        "QueryBody": "SELECT  TOP ##num?100##\n  u.Id AS [User Link], u.LastAccessDate, p.CreationDate, p.Id AS [Post Link]\nFROM Users u INNER JOIN Posts p ON p.OwnerUserId=u.Id\nWHERE u.Id IN (2,3,66,121,1409,2000,2962)\nORDER BY p.CreationDate DESC",
        "CreationDate": "2018-08-24 13:37:38",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 890151,
        "Title": "Recent posts by MathOverflow moderators",
        "Description": null,
        "QueryBody": "SELECT  TOP ##num?100##\n  u.Id AS [User Link], u.LastAccessDate, p.CreationDate, p.Id AS [Post Link]\nFROM Users u INNER JOIN Posts p ON p.OwnerUserId=u.Id\nWHERE u.Id IN (2,3,66,121,1409,2000,2926)\nORDER BY p.CreationDate DESC",
        "CreationDate": "2018-08-24 13:40:54",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 890154,
        "Title": "Recent comments by Mathematics moderators",
        "Description": null,
        "QueryBody": "SELECT  TOP ##num?100##\n  u.Id AS [User Link], u.LastAccessDate, c.CreationDate, c.Id AS [Comment Link]\nFROM Users u INNER JOIN Comments c ON c.UserId=u.Id\nWHERE u.Id IN (622,9754,12952,13854,21674,23350,44121,59234,83702,85306)\nORDER BY c.CreationDate DESC",
        "CreationDate": "2018-08-24 13:48:36",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 890267,
        "Title": "Best commenters by average comment score",
        "Description": "Users ranked by average comment score.\r\n",
        "QueryBody": "SELECT  TOP ##MaxResults:int?25##\n  UserId AS [User Link],\n  SUM(Score) AS Score,\n  COUNT(Score) AS Comments,\n  ROUND(AVG(CAST(Score AS FLOAT)), 3) AS AvgScore,\n  ROUND(STDEV(Score), 3) AS StdDev,\n  MAX(Score) AS TopScore,\n  ROUND((SUM(Score) - MAX(Score))\/(Count(Score) - 1.0), 3) AS AvgScoreWOTop\nFROM\n  Comments\nINNER JOIN\n  Users ON Users.Id = UserId\nWHERE\n  UserId = 479156 AND Score < 20\nGROUP BY\n  UserId, Users.Reputation\nHAVING\n  COUNT(Score) >= ##MinComments:int?20##\nORDER BY\n  AvgScore DESC",
        "CreationDate": "2018-08-24 19:58:12",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 890618,
        "Title": "Review Time Stats by Queue and Weekday since Date",
        "Description": null,
        "QueryBody": "SELECT  DATEPART(weekday, DeletionDate) AS weekdayno,\n  DATENAME(weekday, DeletionDate) AS Weekday,\n  Round(DATEDIFF(second, CreationDate, DeletionDate) \/ 3600.0, 4) AS Duration\nINTO #ReviewTimes\nFROM ReviewTasks\nWHERE ReviewTaskTypeId = ##ReviewTaskType:int?2##\n   AND DeletionDate > DATETIMEFROMPARTS(##year:int?2018##, ##month:int?1##, ##day:int?1##, 0, 0, 0, 0);\n   \nSELECT Weekday\n  ,Round(STDEV(Duration), 4) AS [StDev]\n  ,Round(VAR(Duration), 4) AS [Variance] \n  ,Round(AVG(Duration), 4) AS [Average]\n  ,Count(Duration) AS TotalTasks\nFROM #ReviewTimes\nGROUP BY Weekday, weekdayno\nORDER BY weekdayno ;",
        "CreationDate": "2018-08-25 22:16:25",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 890797,
        "Title": "People you attracted into the system",
        "Description": "People who 1) started with a question 2) you answered his question 3) he accepted it 4) has now at least one accepted answer",
        "QueryBody": "WITH  FirstPosts AS (\n  SELECT OwnerUserId, MIN(Id) AS FirstPostId\n  FROM Posts\n  GROUP BY OwnerUserId\n)\nSELECT\n  Q.OwnerUserId AS [User Link],\n  Q.Id AS [Post Link]\nFROM Posts Q, Posts A\nWHERE\n  Q.AcceptedAnswerId = A.Id\n  AND\n  A.OwnerUserId = ##UserId:int##\n  AND\n  Q.OwnerUserId IN (\n    SELECT Posts.OwnerUserId\n    FROM Posts, FirstPosts\n    WHERE\n      FirstPosts.FirstPostId = Posts.Id\n      AND\n      Posts.PostTypeId = 1\n  )\n  AND\n  Q.OwnerUserId IN (\n    SELECT A.OwnerUserId\n    FROM Posts Q, Posts A\n    WHERE Q.AcceptedAnswerId = A.Id\n  )\nORDER BY Q.OwnerUserId",
        "CreationDate": "2018-08-26 17:47:20",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 891003,
        "Title": "Top voted questions without my answer",
        "Description": null,
        "QueryBody": "SELECT  TOP(##num?100##)\n  q.Id AS [Post Link]\n  , q.Score\n  , q.OwnerUserId AS [User Link]\n  , q.Tags\n  FROM Posts q\n  inner join posttags pt on pt.postid = q.id\n  inner join tags t on t.id = pt.tagid\n  left outer join posts a on a.parentid = q.id \n                         and a.OwnerUserId=##userid##\n  WHERE tagname = ##tagname:string## -- full table can on tags instaead of posts\n  AND a.id is null -- don't have aswers\nORDER BY Score DESC",
        "CreationDate": "2018-08-27 16:45:33",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 891004,
        "Title": "Question in a given tag with my answer",
        "Description": null,
        "QueryBody": "SELECT  q.Id AS [Post Link], q.Score\n  FROM Posts q INNER JOIN Posts a ON a.ParentId=q.Id \n  WHERE (a.OwnerUserId=##userid##) AND (q.Tags LIKE '%<##tagname##>%')\n  ORDER BY q.Score DESC",
        "CreationDate": "2018-08-27 14:32:35",
        "validated": false,
        "QueryBody_Original": "SELECT  q.Id AS [Post Link], q.Score\n  FROM Posts q INNER JOIN Posts a ON a.ParentId=q.Id \n  WHERE (a.OwnerUserId=##userid##) AND (q.Tags LIKE '%<##tagname##>%')\n  ORDER BY q.Score DESC"
    },
    {
        "QuerySetId": 891027,
        "Title": "User with number and score for questions and answer",
        "Description": null,
        "QueryBody": "SELECT  TOP ##num?100## \n  u.Id as [User Link], \n  sum(CASE WHEN p.PostTypeId = 1 THEN p.Score ELSE 0 END) as [Question score],\n  sum(CASE WHEN p.PostTypeId = 1 THEN 1 ELSE 0 END) as [Question count],\n  sum(CASE WHEN p.PostTypeId = 2 THEN p.Score ELSE 0 END) as [Answer score],\n  sum(CASE WHEN p.PostTypeId = 2 THEN 1 ELSE 0 END) as [Answer count]\nFROM Users u INNER JOIN Posts p ON p.OwnerUserId = u.Id\nGROUP BY u.Id\nORDER BY [Question score] DESC",
        "CreationDate": "2018-08-27 16:20:36",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 891028,
        "Title": "Top user with no answers",
        "Description": null,
        "QueryBody": "WITH  users_cte AS\n(\nSELECT\n  u.Id AS UserId, \n  sum(CASE WHEN p.PostTypeId = 1 THEN p.Score ELSE 0 END) as QScore,\n  sum(CASE WHEN p.PostTypeId = 1 THEN 1 ELSE 0 END) as QCount,\n  sum(CASE WHEN p.PostTypeId = 2 THEN p.Score ELSE 0 END) as AScore,\n  sum(CASE WHEN p.PostTypeId = 2 THEN 1 ELSE 0 END) as ACount\nFROM Users u INNER JOIN Posts p ON p.OwnerUserId = u.Id\nGROUP BY u.Id\n)\n\nSELECT TOP ##num?100##\n  UserId as [User Link],\n  QScore as [Question score],\n  QCount as [Question count],\n  AScore as [Answer score],\n  ACount as [Answer count]\nFROM users_cte\nWHERE ACount=0  \nORDER By QScore DESC",
        "CreationDate": "2018-08-27 16:28:00",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 891029,
        "Title": "Top users with zero score from answers",
        "Description": null,
        "QueryBody": "WITH  users_cte AS\n(\nSELECT\n  p.OwnerUserId as UserId,\n  sum(CASE WHEN p.PostTypeId = 1 THEN p.Score ELSE 0 END) as QScore,\n  sum(CASE WHEN p.PostTypeId = 1 THEN 1 ELSE 0 END) as QCount,\n  sum(CASE WHEN p.PostTypeId = 2 THEN p.Score ELSE 0 END) as AScore,\n  sum(CASE WHEN p.PostTypeId = 2 THEN 1 ELSE 0 END) as ACount\nFROM Posts p\nGROUP BY p.OwnerUserId\n)\n\nSELECT TOP ##num?100##\n  UserId as [User Link],\n  QScore as [Question score],\n  QCount as [Question count],\n  AScore as [Answer score],\n  ACount as [Answer count]\nFROM users_cte\nWHERE AScore=0  \nORDER By QScore DESC",
        "CreationDate": "2018-08-27 18:26:37",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 891053,
        "Title": "Top users with no answer scores",
        "Description": null,
        "QueryBody": "SELECT  top ##num?100## p.OwnerUserId as [User Link], \nsum(p.Score*(1 - abs(sign(p.PostTypeId - 1)))) as [Question score], \nsum(p.Score*(1- abs(sign(p.PostTypeId - 2)))) as [Answer score]\nfrom  Posts p \ngroup by p.OwnerUserId\nhaving sum(p.Score*(1- abs(sign(p.PostTypeId - 2)))) < 10000\norder by [Question score] desc",
        "CreationDate": "2018-08-31 19:29:02",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 891712,
        "Title": "My edits on my own posts when there's edits by others before",
        "Description": null,
        "QueryBody": "SELECT  MAX(r.CreationDate) AS d,\n'site:\/\/posts\/' + CAST(r.PostId AS nvarchar) + '\/revisions|' + \nSTRING_AGG(r.Comment, ' ; ') AS c,\nISNULL(MAX(p.Title), MAX(q.Title)) AS t\nFROM PostHistory as r \nJOIN Posts as p ON r.PostId = p.Id \nLEFT JOIN Posts as q ON p.ParentId = q.Id\nJOIN Users AS m ON m.AccountId = ##MyAccountId?2410379##\nWHERE m.Id = p.OwnerUserId AND m.ID = r.UserId \nAND r.PostHistoryTypeId IN (4,5,6,7,8,9)\nAND EXISTS(SELECT o.Id FROM PostHistory AS o \nWHERE r.PostId = o.PostId AND o.PostHistoryTypeId IN (4,5,6,7,8,9)\nAND m.Id <> o.UserId AND o.CreationDate < r.CreationDate)\nGROUP BY r.PostId\nORDER BY MAX(r.CreationDate) DESC;",
        "CreationDate": "2018-10-18 23:17:06",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 892066,
        "Title": "almost-closed questions for specific tag",
        "Description": "questions with 4 close votes that include the tag specified (default: VBA questions)",
        "QueryBody": "SELECT \n  v.postid as [Post Link],\n  count(v.id) as [#CloseVotes], \n  format(min(v.creationdate),'yyyy-MMM-dd') as [FirstCloseVote]\nfrom votes v left outer join posts p on v.postid=p.id\nwhere \n  votetypeid=6 \n  and  posttypeid=1\n  and p.tags like '%'+##tagg:string?vba>##+'%'\n  and closeddate is null\n  and not body like '%<\/code>%'\n  \ngroup by v.postid\nhaving count(v.id)>=3\norder by min(v.creationdate) \n\n--tagg:Enter a whole or partial tag to search for:",
        "CreationDate": "2018-11-18 01:21:41",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 892077,
        "Title": "Subquery: All tables that contain specified typeId field",
        "Description": "subquery of query# 892009",
        "QueryBody": "SELECT  \n  distinct table_name as \"Tables with ##colName##\"  \nfrom information_schema.columns\nwhere \n  column_name like '%'+##colName:string?VoteTypeID##+'%' \n  collate SQL_Latin1_General_CP1_CI_AS\n\n\n--colName:Enter the field name you want to locate within tables:",
        "CreationDate": "2018-08-29 15:23:22",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 893422,
        "Title": "Comments of a specific user on my answers",
        "Description": null,
        "QueryBody": "SELECT  c.Id As [Comment Link], p.Id As [Post Link]\nFROM Posts p\nINNER JOIN Comments c On p.Id = c.PostId\nWHERE c.UserId = ##CommentUser:Int##\nAND p.OwnerUserId = ##UserID##\nAND p.PostTypeId = 2 --Answer",
        "CreationDate": "2018-08-31 21:24:25",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 893644,
        "Title": "Users with the most upvoted posts",
        "Description": "Number of answers that have at least 1 upvote. Includes answers to VBA and Excel questions (which can be changed with the prompts below the query.)  Date range can be specified.",
        "QueryBody": "SELECT  \n   a.owneruserid,\n   a.id as [aID],\n   count(*) as [cnt]\n\ninto #temp from posts q left outer join posts a on q.id=a.parentid left outer join votes v on v.postid=a.id join users u on a.owneruserid=u.id\nwhere votetypeid=2\n  and a.creationdate >= dateadd(d,0-##DaysBack:int?365##,getdate())\n  and ( \n    q.tags like '%' + ##tag1:string?vba>## + '%'\n    or q.tags like '%' + ##tag2:string?excel## + '%'\n    )\ngroup by    a.owneruserid,  a.id\n\n\n\nSELECT * from #temp\n\n--DaysBack: how many days back to include\n--tag1:full or partial tag #1\n--tag2:OR full or partial tag #2\n--MinVotes:minimum number of votes users answers have received",
        "CreationDate": "2018-09-02 11:33:21",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 893705,
        "Title": "Get all of my Votes",
        "Description": null,
        "QueryBody": "SELECT  v.votetypeid\n     , count(*)\n    FROM Votes v\n    WHERE v.UserId = ##UserID##\n    group by v.votetypeid",
        "CreationDate": "2018-09-02 20:11:31",
        "validated": false,
        "QueryBody_Original": "SELECT  v.votetypeid\n     , count(*)\n    FROM Votes v\n    WHERE v.UserId = ##UserID##\n    group by v.votetypeid"
    },
    {
        "QuerySetId": 893823,
        "Title": "average score on comments by month for specified user",
        "Description": null,
        "QueryBody": "SELECT  \n  eomonth(creationdate) as [Month],\n  count(*) as [#Comments],\n  round(avg(1.0*score),2) as [Avg Score]\nfrom comments\nwhere userid=##UserID##\ngroup by eomonth(creationdate)\norder by eomonth(creationdate) desc\n\n--UserID:Enter a numeric User ID:\"You can find your UserID within the URL for the profile link.\"",
        "CreationDate": "2018-09-03 09:57:58",
        "validated": false,
        "QueryBody_Original": "SELECT  \n  eomonth(creationdate) as [Month],\n  count(*) as [#Comments],\n  round(avg(1.0*score),2) as [Avg Score]\nfrom comments\nwhere userid=##UserID##\ngroup by eomonth(creationdate)\norder by eomonth(creationdate) desc\n\n--UserID:Enter a numeric User ID:\"You can find your UserID within the URL for the profile link.\""
    },
    {
        "QuerySetId": 893835,
        "Title": "vote split by month for specified user",
        "Description": "comparison of upvotes to downvotes on answers posted by the specified user.  \"all-time up to last month\"",
        "QueryBody": "SELECT  \n  eomonth(a.creationdate) as [Month],\n  sum(case when votetypeid=2 then 1 else 0 end) as Upvotes,\n  sum(case when votetypeid=3 then 1 else 0 end) as Downvotes\nfrom posts a left outer join votes v on v.postid=a.id join users u on a.owneruserid=u.id\nwhere \n  votetypeid in (2,3)\n  and a.owneruserid=##UserID##\n  and a.creationdate<datefromparts(year(getdate()),month(getdate()),1)\ngroup by eomonth(a.creationdate)\nhaving count(*) > 10 \norder by eomonth(a.creationdate)\n\n--UserID:Enter a numeric User ID:\"You can find your user id within the URL for your site profile.\"",
        "CreationDate": "2018-09-03 10:33:48",
        "validated": false,
        "QueryBody_Original": "SELECT  \n  eomonth(a.creationdate) as [Month],\n  sum(case when votetypeid=2 then 1 else 0 end) as Upvotes,\n  sum(case when votetypeid=3 then 1 else 0 end) as Downvotes\nfrom posts a left outer join votes v on v.postid=a.id join users u on a.owneruserid=u.id\nwhere \n  votetypeid in (2,3)\n  and a.owneruserid=##UserID##\n  and a.creationdate<datefromparts(year(getdate()),month(getdate()),1)\ngroup by eomonth(a.creationdate)\nhaving count(*) > 10 \norder by eomonth(a.creationdate)\n\n--UserID:Enter a numeric User ID:\"You can find your user id within the URL for your site profile.\""
    },
    {
        "QuerySetId": 894211,
        "Title": "what % of questions are from newbs",
        "Description": null,
        "QueryBody": "SELECT  \n  q.id as qID,\n  reputation,\n  sum( case when reputation<10 then 1 else 0 end ) as under10rep,\n  sum( case when reputation<100 then 1 else 0 end ) as under100rep,\n  sum( case when reputation<500 then 1 else 0 end ) as under500rep,\n  count(*) as allQs \ninto #temp from posts q join users u on q.owneruserid=u.id\nwhere \n  q.creationdate >=dateadd(d,-30,getdate())\n  and q.posttypeid=1\ngroup by q.id , reputation\n  \n\n\nSELECT \n  format(1.0*sum(under10rep)\/sum(allQs),'0%') as [%newbs<10rep],\n  format(1.0*sum(under100rep)\/sum(allQs),'0%') as [%newbs<100rep],\n  format(1.0*sum(under500rep)\/sum(allQs),'0%') as [%newbs<500rep]\nfrom #temp\n\n--SELECT * from #temp",
        "CreationDate": "2018-09-04 11:38:30",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 894350,
        "Title": "Swift StackOverflow users in Cracow",
        "Description": null,
        "QueryBody": "DECLARE  @tagName nvarchar(35) = 'swift'\n\nSELECT\n    DisplayName AS [Display Name],\n    Users.Id AS [User Link],\n    Reputation\nFROM Tags\n    INNER JOIN PostTags ON PostTags.TagId = Tags.id\n    INNER JOIN Posts ON Posts.ParentId = PostTags.PostId\n    INNER JOIN Users ON Posts.OwnerUserId = Users.Id                \n    INNER JOIN Votes ON Votes.PostId = Posts.Id\nWHERE LOWER(Location) LIKE '%krak%' \nAND Tags.TagName = @tagName \nAND Reputation > 10\nGROUP BY DisplayName, Users.Id, Reputation\nORDER BY Reputation DESC;",
        "CreationDate": "2018-09-04 18:02:23",
        "validated": false,
        "QueryBody_Original": "DECLARE  @tagName nvarchar(35) = 'swift'\n\nSELECT\n    DisplayName AS [Display Name],\n    Users.Id AS [User Link],\n    Reputation\nFROM Tags\n    INNER JOIN PostTags ON PostTags.TagId = Tags.id\n    INNER JOIN Posts ON Posts.ParentId = PostTags.PostId\n    INNER JOIN Users ON Posts.OwnerUserId = Users.Id                \n    INNER JOIN Votes ON Votes.PostId = Posts.Id\nWHERE LOWER(Location) LIKE '%krak%' \nAND Tags.TagName = @tagName \nAND Reputation > 10\nGROUP BY DisplayName, Users.Id, Reputation\nORDER BY Reputation DESC;"
    },
    {
        "QuerySetId": 894371,
        "Title": "Answers with highest score in a given tag",
        "Description": null,
        "QueryBody": "SELECT  TOP(##num?200##)\n  a.Id AS [Post Link], a.Score, a.OwnerUserId as [User Link]\nFROM Posts a JOIN Posts q ON a.ParentId=q.Id\nWHERE (a.PostTypeId=2) AND (q.PostTypeId=1)\n  AND (q.Tags LIKE '%<##Tagname##>%')\nORDER BY Score DESC",
        "CreationDate": "2018-09-04 19:02:56",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 894382,
        "Title": "Answers with lowest score in a given tag",
        "Description": null,
        "QueryBody": "SELECT  TOP(##num?200##)\n  a.Id AS [Post Link], a.Score, a.OwnerUserId as [User Link]\nFROM Posts a JOIN Posts q ON a.ParentId=q.Id\nWHERE (a.PostTypeId=2) AND (q.PostTypeId=1)\n  AND (q.Tags LIKE '%<##Tagname##>%')\nORDER BY Score ASC",
        "CreationDate": "2018-09-04 19:03:35",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 894725,
        "Title": "Questions with answers by 2 specific people",
        "Description": null,
        "QueryBody": "SELECT  p1.ParentId as [Post Link]\nFROM\n(SELECT ParentId, Id FROM Posts\nWHERE PostTypeId = 2\nAND OwnerUserId = ##UserId1##) as p1\nINNER JOIN\n(SELECT ParentId, Id FROM Posts\nWHERE PostTypeId = 2\nAND OwnerUserId = ##UserId2##) as p2\n\nON p1.ParentId = p2.ParentId",
        "CreationDate": "2018-09-05 21:11:51",
        "validated": false,
        "QueryBody_Original": "SELECT  p1.ParentId as [Post Link]\nFROM\n(SELECT ParentId, Id FROM Posts\nWHERE PostTypeId = 2\nAND OwnerUserId = ##UserId1##) as p1\nINNER JOIN\n(SELECT ParentId, Id FROM Posts\nWHERE PostTypeId = 2\nAND OwnerUserId = ##UserId2##) as p2\n\nON p1.ParentId = p2.ParentId"
    },
    {
        "QuerySetId": 894796,
        "Title": "avg tag scores last few weeks",
        "Description": "currently set to Excel\/VBA tags.  Tag can be specified; defaults to VBA",
        "QueryBody": "SELECT \n  --datepart(ww,creationdate) as [Week#],\n  cast(max(creationdate) as date) as [Week End],\n  TagName,\n  count(*) as [#Posts],\n  format(1.0*sum(score)\/count(*),'0.0') as [AvgScore]\n  \nfrom posts p \n  left outer join posttags pt \n    on (case when p.parentid is null then p.id else p.parentid end)=pt.postid\n  left outer join tags t\n    on t.id=pt.tagid\nwhere\n  posttypeid in (1,2)\n  and creationdate>=dateadd(MM,-3,getdate())\n  and tagname=##searchtag:string?vba>##\ngroup by \n  tagname, \n  --eomonth(creationdate), \n  datepart(ww,creationdate)\norder by tagname,datepart(ww,creationdate)",
        "CreationDate": "2018-09-06 03:26:30",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 895345,
        "Title": "How many answers have I downvoted?",
        "Description": null,
        "QueryBody": "SELECT  COUNT(Downvotes) As 'Downvotes'\nFROM Users\nJOIN Votes ON Votes.UserId = Users.Id\nJOIN VoteTypes ON VoteTypes.Id = Votes.VoteTypeId\nWHERE Users.Id=##UserId:int## AND Votes.VoteTypeId = 3 --AND PostTypes.Id = 2",
        "CreationDate": "2018-09-07 19:45:23",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 895406,
        "Title": "Answers with microsoft.com links with lang tags like 'en-us'",
        "Description": null,
        "QueryBody": "DECLARE  @year int = 2018\n\nselect\n  @year as [year],\n  count(*) as [#posts]\nfrom posts\nwhere\n  body like '%microsoft.com\/__-__\/%'     --ofice.com  microsoft.com\n  and year(creationdate)=2018\n  and closeddate is null\n  and posttypeid in (1,2)\n\n\n--https:\/\/en.wikipedia.org\/wiki\/Language_localisation#Language_tags_and_codes\n--https:\/\/www.andiamo.co.uk\/resources\/iso-language-codes\n\n--2018: 65887  witho",
        "CreationDate": "2018-09-07 20:35:27",
        "validated": false,
        "QueryBody_Original": "DECLARE  @year int = 2018\n\nselect\n  @year as [year],\n  count(*) as [#posts]\nfrom posts\nwhere\n  body like '%microsoft.com\/__-__\/%'     --ofice.com  microsoft.com\n  and year(creationdate)=2018\n  and closeddate is null\n  and posttypeid in (1,2)\n\n\n--https:\/\/en.wikipedia.org\/wiki\/Language_localisation#Language_tags_and_codes\n--https:\/\/www.andiamo.co.uk\/resources\/iso-language-codes\n\n--2018: 65887  witho"
    },
    {
        "QuerySetId": 895586,
        "Title": "views of answers with MS Links",
        "Description": null,
        "QueryBody": "SELECT  \n  parentid,\n  year(creationdate) as [year],\n  viewcount,\n  body\ninto #temp from posts \nwhere \n  closeddate is null\n  and posttypeid=2\n  and creationdate > '2018-01-01'\n  and body like '%microsoft.com\/__-__\/%'\nSELECT \n  [year],\n  count (*) as [answers w\/ MS Link],\n  sum(p.viewcount) as views\nfrom #temp t join posts p on p.id=t.parentid\ngroup by [year]",
        "CreationDate": "2018-09-08 12:59:16",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 896400,
        "Title": "Comments to a specific user (@MENTIONS)",
        "Description": "(DETAIL ON 2nd TAB) \r\n . . . .  \r\nCount of comments where a specific user is @mentioned. matches first 4 characters of name with spaces removed. (a match of only 3 is needed in comments, so @ash still pings me)",
        "QueryBody": "DECLARE  @username nvarchar(50)= ( select displayname from users where id=##UserID## )\nprint 'Comments to '+@username\n\/*\nselect \n  userid as [from], \n  count(*) as \"#Mentions of ##UserID##\"\nfrom comments\nwhere left(text,5)= '@'+left(replace(@username,' ',''),4)\n--and creationdate >='2018-9-1'    \ngroup by userid\norder by count(*) desc\n*\/\nselect \n  left(text,charindex(' ',text)-1) as [to],\n  count(*) as \"#Mentions by ##UserID##\"\nfrom comments\nwhere userid=##UserID##\nand left(text,1)='@'\ngroup by left(text,charindex(' ',text)-1) \norder by count(*) desc",
        "CreationDate": "2018-09-10 14:20:13",
        "validated": false,
        "QueryBody_Original": "DECLARE  @username nvarchar(50)= ( select displayname from users where id=##UserID## )\nprint 'Comments to '+@username\n\/*\nselect \n  userid as [from], \n  count(*) as \"#Mentions of ##UserID##\"\nfrom comments\nwhere left(text,5)= '@'+left(replace(@username,' ',''),4)\n--and creationdate >='2018-9-1'    \ngroup by userid\norder by count(*) desc\n*\/\nselect \n  left(text,charindex(' ',text)-1) as [to],\n  count(*) as \"#Mentions by ##UserID##\"\nfrom comments\nwhere userid=##UserID##\nand left(text,1)='@'\ngroup by left(text,charindex(' ',text)-1) \norder by count(*) desc"
    },
    {
        "QuerySetId": 896432,
        "Title": "most common nonalphanumeric first letters of usernames",
        "Description": null,
        "QueryBody": "SELECT  \nlower(left(displayname,1)) a , count(*) b\ninto #x from users\nwhere left(displayname,4)<>'user'\ngroup by lower(left(displayname,1))\n\nSELECT \n  a as [1st Letter],\n  unicode(a) as [unicode #],\n  b as [Count]\nfrom #x\nwhere \n  not (unicode(a) between unicode('a') and unicode('z'))\n  and not (unicode(a) between unicode('0') and unicode('9'))\norder by b desc\n\n\n--...is often  \"anything\" over 160",
        "CreationDate": "2018-09-10 15:16:11",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 896733,
        "Title": "\"Welcoming\" comments + \"Where are those newbies now?\" (under construction)",
        "Description": "current reputation of reps who have has \"welcome\" or \"see the [tour]\" comments",
        "QueryBody": "SELECT  \n  userid as [User Link],\n  *\ninto #comments from comments\nwhere \n  text like '%first badge%'\n  and year(creationdate)>=2017\n  and userid=##UserID## --     <<temp\n\n\nSELECT \n  convert(varchar,datediff(d,u.creationdate,getdate()))+' days ago' as [User Joined],\n  convert(varchar,datediff(d,p.creationdate,getdate()))+' days ago' as [Question Date],\n  u.reputation as [Current User Rep],\n  convert(varchar,datediff(d,c.creationdate,getdate()))+' days ago' as [Commented],\n  c.userid as [comment by],\n  text \nfrom #comments c\n  left outer join posts p on p.id=c.postid \n  left outer join users u on u.id=p.owneruserid",
        "CreationDate": "2018-09-11 09:11:58",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 896914,
        "Title": "All answers by a given user",
        "Description": null,
        "QueryBody": "SELECT  Id as [Post Link], CreationDate, Title, Body from Posts where (OwnerUserid=##id##) and (PostTypeId=2)",
        "CreationDate": "2018-09-11 17:22:14",
        "validated": false,
        "QueryBody_Original": "SELECT  Id as [Post Link], CreationDate, Title, Body from Posts where (OwnerUserid=##id##) and (PostTypeId=2)"
    },
    {
        "QuerySetId": 896981,
        "Title": " What's my Pundit badge progress?",
        "Description": "How many of my comments have scores of 5 and higher, thus qualifying for the Pundit badge? ",
        "QueryBody": "DECLARE  @UserId INT = ##UserId##;\n\nSELECT Score, Text, PostId AS [Post Link]\nFROM Comments\nWHERE UserId = @UserId\nORDER BY Score DESC, Text ASC;",
        "CreationDate": "2018-09-11 20:04:21",
        "validated": false,
        "QueryBody_Original": "DECLARE  @UserId INT = ##UserId##;\n\nSELECT Score, Text, PostId AS [Post Link]\nFROM Comments\nWHERE UserId = @UserId\nORDER BY Score DESC, Text ASC;"
    },
    {
        "QuerySetId": 897003,
        "Title": "Number of upvotes and downvotes by a given user",
        "Description": null,
        "QueryBody": "SELECT \n  Id AS [User Link],\n  UpVotes, Downvotes\nFROM Users\nWHERE id=##id##",
        "CreationDate": "2018-09-11 20:36:03",
        "validated": false,
        "QueryBody_Original": "SELECT \n  Id AS [User Link],\n  UpVotes, Downvotes\nFROM Users\nWHERE id=##id##"
    },
    {
        "QuerySetId": 897272,
        "Title": "Select Post History by List of Ids",
        "Description": null,
        "QueryBody": "SELECT  Id, PostHistoryTypeId, CreationDate, UserId  \nFROM PostHistory\nWHERE PostId  IN (##IdPostList##)\nORDER BY PostId, CreationDate",
        "CreationDate": "2018-09-12 18:51:31",
        "validated": false,
        "QueryBody_Original": "SELECT  Id, PostHistoryTypeId, CreationDate, UserId  \nFROM PostHistory\nWHERE PostId  IN (##IdPostList##)\nORDER BY PostId, CreationDate"
    },
    {
        "QuerySetId": 897274,
        "Title": " Select Post History by List of Ids",
        "Description": null,
        "QueryBody": "SELECT  Id, PostHistoryTypeId, PostId, RevisionGUID,  CreationDate, UserId, UserDisplayName \nFROM PostHistory\nWHERE PostId  IN (##IdPostList##)\nORDER BY PostId, CreationDate",
        "CreationDate": "2018-09-12 18:42:29",
        "validated": false,
        "QueryBody_Original": "SELECT  Id, PostHistoryTypeId, PostId, RevisionGUID,  CreationDate, UserId, UserDisplayName \nFROM PostHistory\nWHERE PostId  IN (##IdPostList##)\nORDER BY PostId, CreationDate"
    },
    {
        "QuerySetId": 897442,
        "Title": "Top Answerers for Tag: score = sum of scores",
        "Description": null,
        "QueryBody": "WITH \n--   score = sum of scores for all questions for ##TagName##\n\n-- TagName: Which tag to list Top Answerers for (string)\n\nSELECT TOP 20\n    P.OwnerUserId AS [User Link],\n    SUM(P.Score) AS TotalScore,\n    COUNT(*) AS '# Answers'\nFROM Posts P\n    INNER JOIN PostTags PT on PT.PostId = P.ParentId\n    INNER JOIN Users U ON P.OwnerUserId = U.Id\n    INNER JOIN Tags T on T.Id = PT.TagId\nWHERE\n    T.TagName = '##TagName##' AND\n    P.OwnerUserId IS NOT null\n    \nGROUP BY P.OwnerUserId\nORDER BY TotalScore DESC",
        "CreationDate": "2018-09-13 07:50:40",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 897472,
        "Title": "Top Answerers for Tag: score = number of answers with score >= x",
        "Description": null,
        "QueryBody": "DECLARE  @LowerBound int = ##LowerBound:int##\n\nSELECT TOP 20\n    P.OwnerUserId as [User Link],\n    SUM(\n      CASE WHEN P.Score < @LowerBound THEN 0 ELSE 1 END      \n    ) AS 'TotalScore',\n    COUNT(*) AS '#Answers'\nFROM Posts P\n    INNER JOIN PostTags PT on PT.PostId = P.ParentId\n    INNER JOIN Tags T on T.Id = PT.TagId\nWHERE\n    T.TagName = '##TagName##' AND\n    P.OwnerUserId IS NOT null\n    \nGROUP BY P.OwnerUserId\nORDER BY 'TotalScore' DESC",
        "CreationDate": "2018-09-13 07:56:01",
        "validated": false,
        "QueryBody_Original": "DECLARE  @LowerBound int = ##LowerBound:int##\n\nSELECT TOP 20\n    P.OwnerUserId as [User Link],\n    SUM(\n      CASE WHEN P.Score < @LowerBound THEN 0 ELSE 1 END      \n    ) AS 'TotalScore',\n    COUNT(*) AS '#Answers'\nFROM Posts P\n    INNER JOIN PostTags PT on PT.PostId = P.ParentId\n    INNER JOIN Tags T on T.Id = PT.TagId\nWHERE\n    T.TagName = '##TagName##' AND\n    P.OwnerUserId IS NOT null\n    \nGROUP BY P.OwnerUserId\nORDER BY 'TotalScore' DESC"
    },
    {
        "QuerySetId": 897473,
        "Title": "Top Answerers for Tag: score = sum of scores with a cap score per answer",
        "Description": null,
        "QueryBody": "DECLARE  @Cap int = ##Cap:int##\n\nSELECT TOP 200\n    P.OwnerUserId AS [User Link],\n    SUM(\n      CASE WHEN P.Score < @Cap THEN P.Score ELSE @Cap END\n    ) AS TotalScore,\n    COUNT(*) AS '#Answers'\nFROM Posts P\n    INNER JOIN PostTags PT on PT.PostId = P.ParentId\n    INNER JOIN Tags T on T.Id = PT.TagId\nWHERE\n    T.TagName = '##TagName##' AND\n    P.OwnerUserId IS NOT null\n    \nGROUP BY P.OwnerUserId\nORDER BY TotalScore DESC",
        "CreationDate": "2018-09-13 16:40:15",
        "validated": false,
        "QueryBody_Original": "DECLARE  @Cap int = ##Cap:int##\n\nSELECT TOP 200\n    P.OwnerUserId AS [User Link],\n    SUM(\n      CASE WHEN P.Score < @Cap THEN P.Score ELSE @Cap END\n    ) AS TotalScore,\n    COUNT(*) AS '#Answers'\nFROM Posts P\n    INNER JOIN PostTags PT on PT.PostId = P.ParentId\n    INNER JOIN Tags T on T.Id = PT.TagId\nWHERE\n    T.TagName = '##TagName##' AND\n    P.OwnerUserId IS NOT null\n    \nGROUP BY P.OwnerUserId\nORDER BY TotalScore DESC"
    },
    {
        "QuerySetId": 897475,
        "Title": "Top Answerers for Tag: score = weighted sum of #accepted + #votes",
        "Description": null,
        "QueryBody": "DECLARE  @AcceptWeight float = ##AcceptWeight:float##\nDECLARE @ScoreWeight float = ##ScoreWeight:float##\n\nSELECT TOP 20\n    P.OwnerUserId as [User Link],\n    @AcceptWeight * SUM(\n      CASE WHEN Q.AcceptedAnswerId = P.Id THEN 1 ELSE 0 END      \n      ) + @ScoreWeight * SUM(P.Score) AS 'TotalScore',\n    COUNT(*) AS '#Answers'\nFROM Posts P\n    INNER JOIN Posts Q ON Q.Id = P.ParentId\n    INNER JOIN PostTags PT ON PT.PostId = Q.Id\n    INNER JOIN Tags T ON T.Id = PT.TagId\nWHERE\n    T.TagName = '##TagName##' AND\n    P.OwnerUserId IS NOT null\n    \nGROUP BY P.OwnerUserId\nORDER BY 'TotalScore' DESC",
        "CreationDate": "2018-09-13 08:27:00",
        "validated": false,
        "QueryBody_Original": "DECLARE  @AcceptWeight float = ##AcceptWeight:float##\nDECLARE @ScoreWeight float = ##ScoreWeight:float##\n\nSELECT TOP 20\n    P.OwnerUserId as [User Link],\n    @AcceptWeight * SUM(\n      CASE WHEN Q.AcceptedAnswerId = P.Id THEN 1 ELSE 0 END      \n      ) + @ScoreWeight * SUM(P.Score) AS 'TotalScore',\n    COUNT(*) AS '#Answers'\nFROM Posts P\n    INNER JOIN Posts Q ON Q.Id = P.ParentId\n    INNER JOIN PostTags PT ON PT.PostId = Q.Id\n    INNER JOIN Tags T ON T.Id = PT.TagId\nWHERE\n    T.TagName = '##TagName##' AND\n    P.OwnerUserId IS NOT null\n    \nGROUP BY P.OwnerUserId\nORDER BY 'TotalScore' DESC"
    },
    {
        "QuerySetId": 897481,
        "Title": "Top Answerers for Tag: score = sum of answer scores\/viewCount",
        "Description": null,
        "QueryBody": "WITH \n--   score = sum of scores for all answers for ##TagName##\n\n-- TagName: Which tag to list Top Answerers for (string)\n\nSELECT --TOP 20\n    P.OwnerUserId AS [User Link],\n    SUM(1000*P.Score\/Q.ViewCount) AS TotalScore,\n    SUM(P.Score) AS TotalVotes,\n    SUM(Q.ViewCount) AS TotalViews,\n    COUNT(*) AS '#Answers'\nFROM Posts P\n    INNER JOIN Posts Q ON Q.Id = P.ParentId\n    INNER JOIN PostTags PT on PT.PostId = P.ParentId\n    INNER JOIN Tags T on T.Id = PT.TagId\nWHERE\n    T.TagName = '##TagName##' AND\n    P.OwnerUserId IS NOT null\n    \nGROUP BY P.OwnerUserId\nORDER BY TotalScore DESC",
        "CreationDate": "2018-09-13 09:13:21",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 898254,
        "Title": "Find best badge for each user for a tag",
        "Description": null,
        "QueryBody": "WITH  a badge for a certain tag\n\n-- TagName: Which tag to find badge owners for (string)\n\nSELECT\n    U.Id AS [User Link],\n    MIN(B.Class) AS 'Top Badge'\nFROM Users U\n   INNER JOIN Badges B ON B.UserId = U.Id\nWHERE B.Name = '##TagName##'\nGROUP BY U.Id\nORDER BY 'Top Badge'",
        "CreationDate": "2018-09-15 01:50:59",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 898502,
        "Title": "Badge count across the network to match what is in your flair",
        "Description": "Only take into account sites you have > 200 reputation and leave out site meta's ",
        "QueryBody": "DECLARE  @sql nvarchar(max)\n\nselect @sql = string_agg(concat(N'\nselect *\nfrom ', convert(nvarchar(max),quotename(name)), N'.dbo.badges\ninner join users u on b.userid = u.id\nwhere u.accountid = 4485506 \n'),N' union all ')\nfrom sys.databases\nwhere database_id > 5\n\nprint @sql",
        "CreationDate": "2018-09-15 13:04:48",
        "validated": false,
        "QueryBody_Original": "DECLARE  @sql nvarchar(max)\n\nselect @sql = string_agg(concat(N'\nselect *\nfrom ', convert(nvarchar(max),quotename(name)), N'.dbo.badges\ninner join users u on b.userid = u.id\nwhere u.accountid = 4485506 \n'),N' union all ')\nfrom sys.databases\nwhere database_id > 5\n\nprint @sql"
    },
    {
        "QuerySetId": 898644,
        "Title": "Avg Question & Answer Scores by month for specific tag",
        "Description": "Average question & answer scores for specific tag, for specified number of months back. (Defaults to VBA)  Click \"Graph\" tab to see graph.",
        "QueryBody": "DECLARE  @startDate date = dateadd(d,0-##Daysback:int?30##,getdate())\n\n\/*select \n  eomonth(a.creationdate) as [Date],\n  count(*) as [#Answers],\n  sum(a.score) as [aScore]\ninto #a from posts a left join posts q on q.id=a.parentid\nwhere \n  q.tags like '%vba>%'\n  and a.posttypeid=2\n  and a.creationdate >= @startDate\ngroup by eomonth(a.creationdate)\n*\/\n\nselect \n  eomonth(creationdate) as [Date],\n  count(*) as [#Questions],\n  sum(score) as [qScore]\nfrom posts \nwhere \n  tags like '%vba>%'\n  and posttypeid=1\n  and creationdate >= @startDate\ngroup by eomonth(creationdate)\n\n\n\n\n--DaysBack:Number of \"days back\" (before today) to include in report:",
        "CreationDate": "2018-09-16 06:15:19",
        "validated": false,
        "QueryBody_Original": "DECLARE  @startDate date = dateadd(d,0-##Daysback:int?30##,getdate())\n\n\/*select \n  eomonth(a.creationdate) as [Date],\n  count(*) as [#Answers],\n  sum(a.score) as [aScore]\ninto #a from posts a left join posts q on q.id=a.parentid\nwhere \n  q.tags like '%vba>%'\n  and a.posttypeid=2\n  and a.creationdate >= @startDate\ngroup by eomonth(a.creationdate)\n*\/\n\nselect \n  eomonth(creationdate) as [Date],\n  count(*) as [#Questions],\n  sum(score) as [qScore]\nfrom posts \nwhere \n  tags like '%vba>%'\n  and posttypeid=1\n  and creationdate >= @startDate\ngroup by eomonth(creationdate)\n\n\n\n\n--DaysBack:Number of \"days back\" (before today) to include in report:"
    },
    {
        "QuerySetId": 898645,
        "Title": "score & count by tag, month & posttype",
        "Description": null,
        "QueryBody": "SELECT  \n  id,tagname,count\nfrom tags\nwhere count>1000\norder by [count] desc\n\n\/*\nSELECT\n  tagid,\n  posttypeid,\n  sum(score) as [sumScore],\n  count(*)\nfrom posts p left join posttags t on (p.id=t.postid or p.parentid=t.postid)\nwhere creationdate>=dateadd(d,-10,getdate())\ngroup by tagid, posttypeid\n\n\/*\n\n\n\nSELECT *\nfrom posttags \nwhere postid=30162707\n\n\n--all tags\n--by month\n--by type 1,2\n--#posts and sum score",
        "CreationDate": "2018-09-16 06:49:30",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 898852,
        "Title": "Answers for the top 50 questions for a given tag ",
        "Description": null,
        "QueryBody": "SELECT  Id, AcceptedAnswerId from Posts where Tags like '%<java>%' and CreationDate\n--between '2017-01-01' and '2017-02-02'\n--and AcceptedAnswerId is not null\n\n\nSELECT TOP 100 ParentId, Body, OwnerUserId, PostTypeId, Score,AnswerCount from Posts where ParentId in\n(SELECT TOP 50 Id from Posts where Tags like '%<history>%'\nand AcceptedAnswerId is not null order by Score)\norder by Score desc",
        "CreationDate": "2020-01-02 15:51:31",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 899123,
        "Title": "Longest time when an accepted answer is posted",
        "Description": "Number of days between the question is asked and the accepted answer is posted.",
        "QueryBody": "SELECT  AVG(cast(a.creationdate - q.creationdate as float)) as Days from Posts q \n--join posts a on a.id = q.acceptedanswerid\n\nSELECT\nAVG(cast(q.creationdate - p.creationdate as float)) as AverageDays\nfrom\n  Posts p\n  inner join PostTags pt on pt.PostId = p.Id\n  inner join dbo.Tags t on t.Id = pt.TagId\njoin posts q on q.id = p.acceptedanswerId\nwhere\n  t.TagName = '##tag##'",
        "CreationDate": "2018-10-17 05:06:59",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 899278,
        "Title": "best time for user to answer",
        "Description": null,
        "QueryBody": "SELECT \n  owneruserid,\n  format(creationdate,'HH')+':00' as [Time],\n  count(*) as [#Posts],\n  round(1.0*sum(score)\/count(*),5) as [Avg Score]\nfrom posts\nwhere owneruserid in(##UserID##)\ngroup by owneruserid,format(creationdate,'HH')+':00'\norder by format(creationdate,'HH')+':00'  --1.0*sum(score)\/count(*) desc",
        "CreationDate": "2018-09-18 08:51:37",
        "validated": false,
        "QueryBody_Original": "SELECT \n  owneruserid,\n  format(creationdate,'HH')+':00' as [Time],\n  count(*) as [#Posts],\n  round(1.0*sum(score)\/count(*),5) as [Avg Score]\nfrom posts\nwhere owneruserid in(##UserID##)\ngroup by owneruserid,format(creationdate,'HH')+':00'\norder by format(creationdate,'HH')+':00'  --1.0*sum(score)\/count(*) desc"
    },
    {
        "QuerySetId": 900481,
        "Title": "Find all comments by user",
        "Description": null,
        "QueryBody": "DECLARE  @MyUserID INT = ##UserID:int##\n\nSELECT\n    PostId AS [Post Link],\n    Score AS [Score],\n    Id AS [Comment Link],\n    CreationDate AS [Creation Date]\nFROM\n    Comments    \nWHERE\n    UserId = @MyUserID\nORDER BY\n    Score\nDESC",
        "CreationDate": "2018-09-20 21:25:14",
        "validated": false,
        "QueryBody_Original": "DECLARE  @MyUserID INT = ##UserID:int##\n\nSELECT\n    PostId AS [Post Link],\n    Score AS [Score],\n    Id AS [Comment Link],\n    CreationDate AS [Creation Date]\nFROM\n    Comments    \nWHERE\n    UserId = @MyUserID\nORDER BY\n    Score\nDESC"
    },
    {
        "QuerySetId": 901225,
        "Title": "ranked #posts per hour, by tag, last 6 month",
        "Description": "minimum 0.5 posts per hour",
        "QueryBody": "SELECT  \n  eomonth(creationdate) as [Month], \n  TagName,\n  datediff(n,min(creationdate),max(creationdate)) as [#Minutes],\n  count(p.id) as [#Posts],\n  (1.0*count(p.id)\/\n  (datediff(n,min(creationdate),max(creationdate))\/60)\n  ) as [Posts\/Hr]\ninto #temp from posttags pt \n  left outer join posts p on pt.postid=p.id\n  join tags t on pt.tagid=t.id\nwhere creationdate>='2018-8-1' and closeddate is null\ngroup by \n  eomonth(creationdate),\n  tagname\nhaving count(p.id)>=30 --at least 1q per day (30\/month)\n\n--SELECT * from #temp \n\nSELECT\n  rank() over (partition by [Month] order by [Posts\/Hr] desc) as Ran,\n  *\nfrom #temp\norder by [Month], [Posts\/Hr] desc",
        "CreationDate": "2018-09-23 12:53:43",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 902535,
        "Title": "Users that missed their Yearling badges",
        "Description": null,
        "QueryBody": "SELECT  id\n     , datediff(yy,creationdate, getdate()) as [years]\n     , cnt\nfrom users \ninner join ( SELECT userid, count(*) cnt\nfrom badges\nwhere name ='Yearling'\ngroup by userid\n) yb on yb.userid = id\nwhere cnt < datediff(yy,creationdate, getdate())\n\n\nSELECT userid, count(*) cnt\nfrom badges\nwhere name ='Yearling'\ngroup by userid",
        "CreationDate": "2018-09-26 14:37:48",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 903254,
        "Title": "My Most Upvoted Comments From Last Week (including comment text)",
        "Description": "My comments with at least one upvote, in order with most upvoted-comments first.",
        "QueryBody": "SELECT  \n  postID [Post Link]\n  , Text\n  , CreationDate [Date]\n  , Score\nFROM \n  Comments\nWHERE \n  UserId = ##UserId##\n  AND Score > 0\n  AND DATEDIFF(dd, CreationDate, GETDATE()) <= 14\nORDER BY \n  Score Desc\n  , CreationDate Desc",
        "CreationDate": "2018-11-08 01:40:00",
        "validated": false,
        "QueryBody_Original": "SELECT  \n  postID [Post Link]\n  , Text\n  , CreationDate [Date]\n  , Score\nFROM \n  Comments\nWHERE \n  UserId = ##UserId##\n  AND Score > 0\n  AND DATEDIFF(dd, CreationDate, GETDATE()) <= 14\nORDER BY \n  Score Desc\n  , CreationDate Desc"
    },
    {
        "QuerySetId": 903830,
        "Title": "Stackoverflow Users in your city",
        "Description": null,
        "QueryBody": "SELECT \n  ROW_NUMBER() OVER(ORDER BY Reputation DESC) AS Rank,\n  Id AS [User Link],\n  Reputation,\n  Views,\n  Upvotes,\n  Downvotes,\n  WebsiteUrl,\n  Location\nFROM\n  Users\nWHERE\n  lower(Location) LIKE lower(##City:string##)\n  AND Reputation > 1\nORDER BY\n  Reputation DESC",
        "CreationDate": "2018-09-28 16:20:48",
        "validated": false,
        "QueryBody_Original": "SELECT \n  ROW_NUMBER() OVER(ORDER BY Reputation DESC) AS Rank,\n  Id AS [User Link],\n  Reputation,\n  Views,\n  Upvotes,\n  Downvotes,\n  WebsiteUrl,\n  Location\nFROM\n  Users\nWHERE\n  lower(Location) LIKE lower(##City:string##)\n  AND Reputation > 1\nORDER BY\n  Reputation DESC"
    },
    {
        "QuerySetId": 904454,
        "Title": "Users in intervals under 100 rep",
        "Description": null,
        "QueryBody": "SELECT  COUNT(*) as \"Count\", \n    COUNT(*) * 100.0 \/ sum(count(*)) over() as \"Percentage\",\n    min(reputation) as \"Rep\" \nFROM users WHERE reputation < 100\nGROUP BY [reputation] \/ ##INTERVAL##\nORDER BY min(reputation) ASC",
        "CreationDate": "2018-09-29 20:54:58",
        "validated": false,
        "QueryBody_Original": "SELECT  COUNT(*) as \"Count\", \n    COUNT(*) * 100.0 \/ sum(count(*)) over() as \"Percentage\",\n    min(reputation) as \"Rep\" \nFROM users WHERE reputation < 100\nGROUP BY [reputation] \/ ##INTERVAL##\nORDER BY min(reputation) ASC"
    },
    {
        "QuerySetId": 905155,
        "Title": "Open vs Closed Q's: Avg Score for Questions on specified Tag, monthly (with chart)",
        "Description": "Click the GRAPH tab to view the chart. (Query #905162 is similar but only includes questions by specified user)",
        "QueryBody": "SELECT  \n  eomonth(creationdate) as [Month End],\n  round(1.0*sum(case when closeddate is null then score else 0 end)\/\n          sum(case when closeddate is null then 1 else 0 end),3) as [Avg Score: Open Qs],\n  round(1.0*sum(case when closeddate is not null then score else 0 end)\/\n          sum(case when closeddate is not null then 1 else 0 end),3) as [Avg Score: Closed Qs],\n  round(1.0*sum(score)\/count(*),3) as [Avg Score: All Qs]\nfrom posts\nwhere \n  posttypeid=1\n  and tags like '%'+##tag:string?<vba>##+'%' \n  and creationdate>=dateadd(d,0-##daysBack:int?365##,getdate())\ngroup by eomonth(creationdate)\norder by eomonth(creationdate)\n\n\n--tag:Enter a partial or complete tag name:\n--daysBack:Number of days back  (before today) :",
        "CreationDate": "2018-10-01 13:25:42",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 905162,
        "Title": "Open vs Closed Q's: Avg Score for Questions on specified Tag, monthly FOR SPECIFIC USER (w\/Chart)",
        "Description": "Score of questions (not answers!) answered by specified user for specified tag & timeframe. Click the GRAPH tab to view the chart.  Query #905155 is similar but without user criteria. Query #905168 is the same except to tag criteria.",
        "QueryBody": "SELECT  parentid as qID \ninto #answeredByUser from posts \nwhere posttypeid=2 and owneruserid=##UserID##\n\nSELECT \n  eomonth(creationdate) as [Month End],\n  round(1.0*sum(case when closeddate is null then score else 0 end)\/\n  sum(case when closeddate is null then 1 else 0 end),3) as [Avg Score - Still Open],\n  round(1.0*sum(score)\/count(*),3) as [Avg Score - All]\nfrom posts\nwhere \n  posttypeid=1\n  and tags like '%'+##tag:string?<vba>##+'%' \n  and creationdate>=dateadd(d,0-##daysBack:int?365##,getdate())\n  and id in ( SELECT qID from #answeredByUser )\ngroup by eomonth(creationdate)\norder by eomonth(creationdate)\n\n--UserID:Enter a numeric User ID:\"Includes only questions answered by specified user\"\n--tag:Enter a partial or complete tag name:\n--daysBack:Number of days back  (before today) :",
        "CreationDate": "2018-10-01 13:24:47",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 906486,
        "Title": "Top Rated Comments for specified tag",
        "Description": null,
        "QueryBody": "SELECT  \n  case when a.parentid is null then q.id else a.parentid end as qID\ninto #Qs from posts q left outer join posts a on q.id=a.parentid\nwhere q.tags like '%' + ##tagName:string?vba>## + '%'  --> intentially included for vba tag\nand q.CommunityOwnedDate is null \n\nSELECT \n  format(creationdate,'MMM d, yyyy') as [Date],\n  userid as [User Link],\n  Score,\n  postid as [Post Link],\n  id as [Comment Link]\nfrom comments\nwhere postid in ( SELECT qID from #Qs )\n  and score>5\n--where userid = ##UserID##\norder by score desc\n\n\n--tagName:Enter a partial or complete tag name:\n--UserID:Enter a numeric User ID:",
        "CreationDate": "2018-10-03 15:35:40",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 906711,
        "Title": "web scraping vs screen scraping",
        "Description": "query #906780 is better",
        "QueryBody": "SELECT \n  year(creationdate) as [year],\n  tagname,\n  count(*) as [cnt]\ninto #tmp from posts p \n  left outer join posttags pt on p.id=pt.postid\n  left outer join tags t on pt.tagid=t.id\nwhere posttypeid=1 \nand tagname in  ('screen-scraping','web-scraping')\ngroup by year(creationdate),tagname\norder by year(creationdate),tagname\n\n\nSELECT [year],tagname,case when [year]=2018 then cnt \/275*365.0 else cnt end as [c]\nfrom #tmp\norder by [year],tagname",
        "CreationDate": "2018-10-03 23:20:56",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 907543,
        "Title": "Questions with a question mark in the title",
        "Description": null,
        "QueryBody": "WITH  question marks in the title are more likely to be answered\n--https:\/\/medium.freecodecamp.org\/always-end-your-questions-WITH-a-stack-overflow-bigquery-and-other-stories-2470ebcda7f\n\nselect \n  q.id as qID,\n  cast(q.creationdate as date) as qDate,\n  case when q.title like '%?%' then 'hasQMark' else 'noQMark' end as QMark,\n  q.score as qScore,\n  a.id as aID,\n  cast(a.creationdate as date) as aDate,\n  a.score as aScore\ninto #q from posts q left join posts a on q.id=a.parentid\nwhere\n  q.creationdate between '2018-09-27' and '2018-09-28'\n  and q.posttypeid=1\n  and q.closeddate is null\n\n\nselect * from #q order by qID\n\n\nselect\n  QMark,\n  count(distinct qID) as [# Questions],\n  count(distinct aID) as [# Answers]\nfrom #q\ngroup by QMark",
        "CreationDate": "2018-10-05 07:21:07",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 908112,
        "Title": "questions by hour for specified tag",
        "Description": null,
        "QueryBody": "SELECT \n  format(creationdate,'yyyy-MM-dd HH')+':00' as dth,\n  count(*) as cnt\nfrom posts\nwhere \n  tags like '%<'+##tagName:string?vba##+'>%'\n  and posttypeid=1\n  and closeddate is null\n  and creationdate >=dateadd(d,0-##daysBack:int?60##,getdate())\n  group by format(creationdate,'yyyy-MM-dd HH')+':00' \norder by format(creationdate,'yyyy-MM-dd HH')+':00'  --format(creationdate,'ddd yyyy-MM-dd HH')+':00' \n--tagName:Enter a complete tag name to uery questions:\n--daysBack:Enter numbder of 'days before today' to include:",
        "CreationDate": "2018-10-06 08:57:30",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 908195,
        "Title": "search posts through revision history",
        "Description": null,
        "QueryBody": "SELECT  DISTINCT Posts.ID As [Post Link]\nFrom Posts INNER JOIN PostHistory ON Posts.Id=PostHistory.PostId\nWhere \nPosts.OwnerUserId = ##UserID## AND PostHistory.Text like '%##Text##%'",
        "CreationDate": "2018-10-06 16:39:04",
        "validated": false,
        "QueryBody_Original": "SELECT  DISTINCT Posts.ID As [Post Link]\nFrom Posts INNER JOIN PostHistory ON Posts.Id=PostHistory.PostId\nWhere \nPosts.OwnerUserId = ##UserID## AND PostHistory.Text like '%##Text##%'"
    },
    {
        "QuerySetId": 908367,
        "Title": "number of votes per answer by tag",
        "Description": null,
        "QueryBody": "SELECT \n  a.id as aID,\n  t.tagname,\n  a.score\ninto #answertags from posts a \n  left outer join posttags pt on pt.postid=a.parentid \n  left outer join tags t on t.id=pt.tagid\nwhere a.posttypeid=2\n  and a.owneruserid in (##UserID##)\n\n\nSELECT \n  postid as aID,\n  count(*) as [#Votes]\ninto #answersvotes from votes\nwhere\n  votetypeid in (2,3)\n  and postid in ( SELECT distinct aID from #answertags )\ngroup by postid  \n  \nSELECT\n  t.aID as aID,\n  TagName,\n  isnull([#Votes],0) as [#Votes]\ninto #answers from #answertags t left outer join #answersvotes v on t.aID=v.aID\n\nSELECT              --(TAB#2)\n  aID as [Post Link],\n  TagName,\n  [#Votes]\nfrom #answers order by aID",
        "CreationDate": "2018-10-07 10:15:52",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 909010,
        "Title": "Number of tags on a post and how that affects post performance",
        "Description": null,
        "QueryBody": "WITH  1?)\n\n\nselect\n  p.id,\n  Score,\n  viewcount as [#Views],\n  answercount as [#Answers],\n  count(TagName) as [#Tags]\nfrom posts p left outer join posttags pt on p.id=pt.postid left outer join tags t on pt.tagid=t.id\nwhere \n  posttypeid=1\n  and creationdate>='2018-10-1'\ngroup by p.id, score, viewcount, answercount\n\n--group by \n--  case when posttypeid=1 then 'Question' else 'Answer' end,\n--  TagName",
        "CreationDate": "2018-10-09 16:52:24",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 909035,
        "Title": "Find Stack Overflow Users In Your City (with user-links, case-insensitive, number reputation)",
        "Description": "A simply query to find users in your city or country. Added user links to the original version.\r\n",
        "QueryBody": "WITH  user-links)\n-- A simply query to find users in your city or country. Added user links.\n\nselect Id [User Link],  ROW_NUMBER() OVER (ORDER BY Reputation DESC) AS ID, Reputation, DisplayName, Location\nfrom Users\nwhere lower(Location) like lower('%##Location##%')\norder by Reputation desc",
        "CreationDate": "2018-10-09 18:09:42",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 909238,
        "Title": "Select Body from Posts limit where id = 10;",
        "Description": null,
        "QueryBody": "SELECT  Body from Posts limit where id = 10;",
        "CreationDate": "2018-10-10 02:16:14",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 909952,
        "Title": "Most common duplicate targets for a tag",
        "Description": "Tag filtering is only used for the duplicate target post, not the child post.",
        "QueryBody": "SELECT  top ##TopItems##\n  parentPost.Id [Post Link],\n  count(childPost.Id) [Dupe Links]\nfrom Posts childPost\ninner join PostLinks childPL on \n  childPost.Id = childPL.PostId and \n  childPL.LinkTypeId = 3\ninner join Posts parentPost on childPL.RelatedPostId = parentPost.Id\ninner join PostTags parentPostTags on parentPost.Id = parentPostTags.PostId\ninner join Tags parentTag on \n  parentPostTags.TagId = parentTag.Id and\n  parentTag.TagName = '##TargetTag##'\nwhere childPost.PostTypeId = 1\ngroup by parentPost.Id\norder by [Dupe Links] desc",
        "CreationDate": "2019-07-07 13:06:02",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 910061,
        "Title": "List of all users who downvoted your posts",
        "Description": null,
        "QueryBody": "SELECT  u.Id as [User Link], v.VoteTypeId,\nReputation, p.Id AS [Post Link], p.Score, p.Id, v.PostId\nFROM Users u, Votes v, Posts p\nWHERE u.Id=v.UserID\nAND v.PostId=p.Id\nAND p.OwnerUserId=##UserId##\nAND VoteTypeId != 5",
        "CreationDate": "2020-11-08 10:28:38",
        "validated": false,
        "QueryBody_Original": "SELECT  u.Id as [User Link], v.VoteTypeId,\nReputation, p.Id AS [Post Link], p.Score, p.Id, v.PostId\nFROM Users u, Votes v, Posts p\nWHERE u.Id=v.UserID\nAND v.PostId=p.Id\nAND p.OwnerUserId=##UserId##\nAND VoteTypeId != 5"
    },
    {
        "QuerySetId": 910452,
        "Title": "Questions by a given user with unaccepted answers",
        "Description": null,
        "QueryBody": "SELECT \n  questions.Id AS [Post Link],\n  questions.CreationDate,\n  COUNT(*) AS AnswerCount\nFROM Posts questions\nJOIN Posts answers on answers.ParentId = questions.Id\nWHERE questions.OwnerUserId = ##UserId##\n  AND questions.PostTypeId = 1 --Questions\n  AND questions.AcceptedAnswerId IS NULL\nGROUP BY questions.Id, questions.CreationDate\nORDER BY questions.CreationDate DESC",
        "CreationDate": "2018-10-14 01:47:25",
        "validated": false,
        "QueryBody_Original": "SELECT \n  questions.Id AS [Post Link],\n  questions.CreationDate,\n  COUNT(*) AS AnswerCount\nFROM Posts questions\nJOIN Posts answers on answers.ParentId = questions.Id\nWHERE questions.OwnerUserId = ##UserId##\n  AND questions.PostTypeId = 1 --Questions\n  AND questions.AcceptedAnswerId IS NULL\nGROUP BY questions.Id, questions.CreationDate\nORDER BY questions.CreationDate DESC"
    },
    {
        "QuerySetId": 910611,
        "Title": "Favorites that you haven't posted in",
        "Description": null,
        "QueryBody": "SELECT \n  votes.PostId AS [Post Link],\n  votes.CreationDate,\n  COUNT(*) AS 'AnswerNo'\nFROM Votes votes\nJOIN Posts questions ON votes.PostId = questions.Id\nJOIN Posts answers ON votes.PostId = answers.ParentId\nWHERE votes.VoteTypeId = 5 --Favorite\n  AND votes.UserId = ##UserId##\nGROUP BY votes.PostId, votes.CreationDate\nHAVING SUM(CASE WHEN \n    (answers.OwnerUserId = ##UserId## OR questions.OwnerUserId = ##UserId##) \n    THEN 1 ELSE 0 END) = 0\nORDER BY votes.CreationDate DESC",
        "CreationDate": "2018-10-14 23:52:09",
        "validated": false,
        "QueryBody_Original": "SELECT \n  votes.PostId AS [Post Link],\n  votes.CreationDate,\n  COUNT(*) AS 'AnswerNo'\nFROM Votes votes\nJOIN Posts questions ON votes.PostId = questions.Id\nJOIN Posts answers ON votes.PostId = answers.ParentId\nWHERE votes.VoteTypeId = 5 --Favorite\n  AND votes.UserId = ##UserId##\nGROUP BY votes.PostId, votes.CreationDate\nHAVING SUM(CASE WHEN \n    (answers.OwnerUserId = ##UserId## OR questions.OwnerUserId = ##UserId##) \n    THEN 1 ELSE 0 END) = 0\nORDER BY votes.CreationDate DESC"
    },
    {
        "QuerySetId": 910668,
        "Title": "Deleted users by last post created?",
        "Description": null,
        "QueryBody": "SELECT  Id,OwnerDisplayName,CreationDate From Posts \n---Where OwnerUserId Is Null And Count(\n---Order By OwnerDisplayName, CreationDate\n\nSELECT P.OwnerDisplayName,P.CreationDate\nFROM Posts as P\nINNER JOIN\n    (SELECT OwnerDisplayName, \n            MAX(CreationDate) AS MaxCreationDate\n    FROM Posts\n    WHERE OwnerUserId Is NUll\n    GROUP BY OwnerDisplayName \n    HAVING COUNT(*)>1) GP\nON P.OwnerDisplayName = GP.OwnerDisplayName \nAND P.CreationDate = GP.MaxCreationDate\nOrder By CreationDate",
        "CreationDate": "2018-10-15 06:14:42",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 911064,
        "Title": "Find the longest-living answer on the Overlapping Polyglots challenge",
        "Description": null,
        "QueryBody": "DECLARE  @answerType tinyint;\nSELECT TOP 1 @answerType = Id FROM PostTypes WHERE Name = 'Answer';\nSELECT Id as [Post Link],\n       OwnerUserId as [User Link],\n       Score,\n       CreationDate, DATEDIFF(HOUR, Posts.CreationDate,\n       LEAD(Posts.CreationDate, 1, GETDATE())\n    OVER (PARTITION BY ParentId, PostTypeId ORDER BY CreationDate))\n    AS SurvivalTime\n  FROM Posts\n  WHERE PostTypeId = @answerType\n    AND ParentId = 171884\n  ORDER BY CreationDate ;",
        "CreationDate": "2018-10-20 14:00:31",
        "validated": false,
        "QueryBody_Original": "DECLARE  @answerType tinyint;\nSELECT TOP 1 @answerType = Id FROM PostTypes WHERE Name = 'Answer';\nSELECT Id as [Post Link],\n       OwnerUserId as [User Link],\n       Score,\n       CreationDate, DATEDIFF(HOUR, Posts.CreationDate,\n       LEAD(Posts.CreationDate, 1, GETDATE())\n    OVER (PARTITION BY ParentId, PostTypeId ORDER BY CreationDate))\n    AS SurvivalTime\n  FROM Posts\n  WHERE PostTypeId = @answerType\n    AND ParentId = 171884\n  ORDER BY CreationDate ;"
    },
    {
        "QuerySetId": 911195,
        "Title": "IGNORED QUESTIONS for specific tag",
        "Description": null,
        "QueryBody": "SELECT \n  format(q.creationdate,'yyyy-MM-dd') as [Asked],\n  q.id as [Post Link],\n  answercount as Answers,\n  count(v.id) as Votes,\n  commentcount as Comments,\n  count(pn.id) as Notices,\n  viewcount as Views,\n  Tags\nfrom posts q \n  left outer join votes v on v.postid=q.id\n  left outer join postnotices pn on pn.postid=q.id\nwhere \n  posttypeid=1 \n  and commentcount=0 \n  and answercount=0 \n  and closeddate is not null\n  and tags like '%'+##tagName:string?excel##+'%'\ngroup by\n  q.creationdate,\n  q.id,\n  tags,\n  commentcount,\n  answercount,\n  viewcount\nhaving \n  count(v.id)=0\norder by \n  q.creationdate asc\n\n--tagName:Enter a partial or complete tag:",
        "CreationDate": "2018-10-16 04:58:16",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 913031,
        "Title": "Users by approximate meta reputation",
        "Description": null,
        "QueryBody": "SELECT  top ##number:int?100##\n  u.Id as [User Link],\n  SUM(CASE\n    WHEN v.VoteTypeId = 1 THEN 15\n    WHEN v.VoteTypeId = 2 AND p.PostTypeId = 1 THEN 5\n    WHEN v.VoteTypeId = 2 AND p.PostTypeId = 2 THEN 10\n    WHEN v.VoteTypeId = 3 THEN -2\n  END) AS Reputation\nFROM Posts p\n  INNER JOIN Votes v ON p.Id = v.PostId\n  INNER JOIN Users u ON p.OwnerUserId = u.Id\nWHERE v.VoteTypeId IN (1,2,3) -- accepts,ups,downs\nGROUP BY u.Id\nORDER BY REPUTATION desc",
        "CreationDate": "2019-09-05 22:04:52",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 913828,
        "Title": "How many users have reputation that exceeds X?",
        "Description": null,
        "QueryBody": "SELECT  count(*) from Users where Reputation > ##ReputationThreshold:int?250000##",
        "CreationDate": "2018-10-20 09:11:48",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 914223,
        "Title": "user's top 10 longest post",
        "Description": null,
        "QueryBody": "SELECT  top ##Top:int?10## id, len(body) as [Length], id as [Post Link]\nfrom posts\nwhere owneruserid=##UserID##\norder by len(body) desc\n\n--Top:Top How Many?\n--userID:Numeric User ID:",
        "CreationDate": "2018-10-21 20:28:32",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 914347,
        "Title": "What posts have I edited that were not mine?",
        "Description": "Searches for all edits made on others' posts. Ordered by post score.",
        "QueryBody": "DECLARE  @UserId int = ##UserId##\n\nSELECT COUNT(p.Id)\n    FROM Posts p \n    JOIN PostHistory h ON p.Id = h.PostId\n    WHERE p.OwnerUserId != @UserId AND h.UserId = @UserId\n    AND p.CreationDate >= '2018-01-01' AND p.CreationDate <= '2019-01-01'",
        "CreationDate": "2019-01-18 03:24:40",
        "validated": false,
        "QueryBody_Original": "DECLARE  @UserId int = ##UserId##\n\nSELECT COUNT(p.Id)\n    FROM Posts p \n    JOIN PostHistory h ON p.Id = h.PostId\n    WHERE p.OwnerUserId != @UserId AND h.UserId = @UserId\n    AND p.CreationDate >= '2018-01-01' AND p.CreationDate <= '2019-01-01'"
    },
    {
        "QuerySetId": 914886,
        "Title": "Percentage of questions in given tags per month",
        "Description": null,
        "QueryBody": "WITH  pcnt as\n(\nselect eomonth(p.creationdate) [date]\n     , count(p.id) as [count]\nfrom posts p\nwhere p.PostTypeId=1\ngroup by eomonth(p.creationdate)\n)\n, tagsel as \n(\nselect distinct creationdate, p.id\nfrom posts p\ninner join posttags pt on pt.postid = p.id\ninner join tags t on t.id = pt.tagid\ninner join string_split(##tags:string?phsics,c++##,',')\n         on value = t.tagname\nwhere p.creationdate between ##date1:string?2008-01-01##\n                         and ##date2:string?2019-01-01##\n)\n, tagstats as\n(\n  select eomonth(creationdate) [date]\n       , count(id) [tagcount]\n  from tagsel\n  group by eomonth(creationdate)  \n)\n\nselect pcnt.[date]\n     , convert(decimal, tagcount) * 100 \/ [count] [perc]\nfrom tagstats\ninner join pcnt on pcnt.[date] = tagstats.[date]\norder by pcnt.[date]",
        "CreationDate": "2018-11-16 05:00:25",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 915292,
        "Title": "How often does a user Accept Answers to their Questions",
        "Description": "Calculate how often a user actually Accepts answers to their Questions (including their own answers)",
        "QueryBody": "DECLARE  @username AS NVARCHAR(60) = ##DisplayName:string?_##;\nDECLARE @userid AS INT = ##UserId:int?0##;\n\nSELECT    users.id                      AS [User Link], \n          users.id                      AS [User ID], \n          COUNT(quest.id)               AS [Total Questions], \n          COUNT(quest.acceptedanswerid) AS [Accepted Answers], \n          CONCAT( \n          CASE COUNT(quest.id) \n                    WHEN 0 THEN 0 \n                    ELSE COUNT(quest.acceptedanswerid) * 100\/COUNT(quest.id) \n          END,\n          ' %') AS [% Accepted] \nFROM      users \nLEFT JOIN posts quest \nON        quest.owneruserid = users.id \nAND       quest.posttypeid = 1 \nWHERE     users.displayname = @username\nOR        users.id = @userid\nGROUP BY  users.id\nORDER BY  users.id",
        "CreationDate": "2018-10-25 13:20:54",
        "validated": false,
        "QueryBody_Original": "DECLARE  @username AS NVARCHAR(60) = ##DisplayName:string?_##;\nDECLARE @userid AS INT = ##UserId:int?0##;\n\nSELECT    users.id                      AS [User Link], \n          users.id                      AS [User ID], \n          COUNT(quest.id)               AS [Total Questions], \n          COUNT(quest.acceptedanswerid) AS [Accepted Answers], \n          CONCAT( \n          CASE COUNT(quest.id) \n                    WHEN 0 THEN 0 \n                    ELSE COUNT(quest.acceptedanswerid) * 100\/COUNT(quest.id) \n          END,\n          ' %') AS [% Accepted] \nFROM      users \nLEFT JOIN posts quest \nON        quest.owneruserid = users.id \nAND       quest.posttypeid = 1 \nWHERE     users.displayname = @username\nOR        users.id = @userid\nGROUP BY  users.id\nORDER BY  users.id"
    },
    {
        "QuerySetId": 919048,
        "Title": "Posts which contained the text in some revision",
        "Description": null,
        "QueryBody": "SELECT  DISTINCT TOP ##num## \n  p.Id AS [Post Link], p.CreationDate,\n  url = 'site:\/\/posts\/' + CAST(p.Id AS varchar)+'\/revisions'\nFROM Posts p JOIN PostHistory ph ON (ph.PostId=p.Id)\nWHERE (ph.Text LIKE '%##keyword##%')\nORDER BY p.CreationDate DESC",
        "CreationDate": "2018-10-31 22:45:28",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 919049,
        "Title": "Posts which contain given word",
        "Description": null,
        "QueryBody": "SELECT  TOP ##num##\n  Id As [Post Link], CreationDate\nFROM Posts\nWHERE (Body LIKE '%##keyword##%')\nORDER BY CreationDate DESC",
        "CreationDate": "2018-10-31 22:51:39",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 919052,
        "Title": "Users with Max Reputation by N  number of posts",
        "Description": null,
        "QueryBody": "SELECT  TOP ##maxRows:INT?100##\n            'site:\/\/u\/' + CAST(u.Id AS NVARCHAR) + '|' + u.DisplayName  AS [User]\n            , u.Reputation\n            , COUNT (p.Id)  AS [Post Count]\nFROM        Users u\nLEFT JOIN   Posts p         ON (p.OwnerUserId = u.Id  AND  p.PostTypeId IN (1, 2) )  -- Q & A only\nWHERE       u.Reputation > 15  -- Speed things up by culling low-rep users\nGROUP BY    u.Id\n            , u.DisplayName\n            , u.Reputation\nHAVING      COUNT (p.Id) <= ##maxPosts:INT?10##\nORDER BY    u.Reputation DESC\n            , [Post Count]\n            , u.DisplayName",
        "CreationDate": "2018-11-02 00:27:55",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 920180,
        "Title": "Do Commas in question Titles indicate worse questions?",
        "Description": "...or whatever string you specify\r\n\r\n(Half finished but its all the data you need to find the answer)",
        "QueryBody": "SELECT \n  sum(case when title like '%,%' then score else 0 end) as scoreWithCommas,\n  sum(case when title like '%,%' then 1 else 0 end) as countWithCommas,\n  sum(score) as scoreAllQuestions,\n  sum(1) as countAllQuestions\ninto #temp from posts\nwhere \n  posttypeid=1 \n  and closeddate is null\n  and creationdate >= '2017-1-1'\n\nSELECT\n  round(1.0*scoreAllQuestions\/countAllQuestions,3) as ScoreAll,\n  round((1.0*scoreAllQuestions-scoreWithCommas)\/(1.0*countAllQuestions-countWithCommas),3) as ScoreNoCommas,\n  round(1.0*scoreWithCommas\/countWithCommas,3) as ScoreWithCommas,\n  \n  format(((1.0*scoreAllQuestions-scoreWithCommas)\/(1.0*countAllQuestions-countWithCommas))\n  \/ (1.0*scoreAllQuestions\/countAllQuestions)-1,'+0.00%;-0.00%;0%') as ScoreImprovementWithoutCommas\nfrom #temp\n\nSELECT * from #temp",
        "CreationDate": "2018-11-03 13:13:25",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 920218,
        "Title": "Posts containing one of the given words (ordered by LastActivityDate)",
        "Description": null,
        "QueryBody": "SELECT  distinct TOP 100 \n       Id As [Post Link]\n     , CreationDate\n     , LastActivityDate\n     , Body\nFROM Posts \ncross join string_split(##words:string?e,a##, ',')\nWHERE body like concat('%', value ,'%')\nORDER BY LastActivityDate DESC",
        "CreationDate": "2018-11-04 17:06:42",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 920313,
        "Title": "Posts containing a given text",
        "Description": null,
        "QueryBody": "SELECT  TOP ##num##\n  Id As [Post Link], OwnerUserId AS [User Link], CreationDate, LastActivityDate,  Score, ViewCount, Body\n  FROM Posts WHERE (Body LIKE '%##text##%') \n  ORDER BY CreationDate DESC",
        "CreationDate": "2018-11-04 04:21:45",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 924312,
        "Title": "TAG BADGES only awarded to ONE USER",
        "Description": null,
        "QueryBody": "SELECT \n  name as [Tag Badge],\n  min([Date]) as [Date Awarded],\n  userid,\n  min(class) as class\ninto #b from badges\nwhere tagbased='true'\ngroup by name, userid\nhaving count(*)=1\n\nSELECT \n  format([Date Awarded],'yyyy-MMM-d ddd'),\n  case class when 1 then 'gold' when 2 then 'silver' else 'bronze' end as [Type],\n  [Tag Badge] as TagName,\n  t.[count] as [Total Posts in Tag],\n  userid as [User Link],\n  format(reputation,'#,##0') as Reputation,\n  year(u.creationdate) as [Joined],\n  Location\nfrom #b b left join users u on b.userid=u.id left join tags t on t.tagname=b.[Tag Badge]\norder by class desc, [Date Awarded] desc",
        "CreationDate": "2018-11-08 19:07:44",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 924332,
        "Title": "ONLY USER to win Bronze+Silver+Gold in a TAG BADGE",
        "Description": null,
        "QueryBody": "SELECT \n  name as [tagbadge],\n  userid,\n  count(*) as [won]\ninto #won from badges\nwhere tagbased = 'true'\ngroup by name, userid\nhaving count(*)=3\n\nSELECT \n  name as [tagbadge],\n  count(*) as [totalwon]\ninto #total from badges\nwhere tagbased = 'true'\n  and name in ( SELECT tagbadge from #won )\ngroup by name\n  \nSELECT \n  w.tagbadge as [TagName],\n  w.userid as [User Link],\n  w.won as [# Won],\n  t.totalwon as [Total # Won],\n  tg.[count] as [Total # Posts in Tag]\nfrom #won w left join #total t on w.tagbadge=t.tagbadge left join tags tg on tg.tagname=w.tagbadge\nwhere t.totalwon < 6\norder by tg.[count] asc",
        "CreationDate": "2018-11-08 19:18:18",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 924848,
        "Title": "Suggested Edit Review Stats (your approval rate)",
        "Description": null,
        "QueryBody": "DECLARE  @UserId int = ##UserId##\nselect \ntotal,\napproved,\nrejected,\nround(cast(approved*100 as float)\/total ,1) ApprovedPercentage,\nround(cast(rejected*100 as float)\/total ,1) RejectedPercentage\nfrom (\nselect\ncount(Id) total,\ncount(ApprovalDate) approved,\ncount(RejectionDate) rejected\nfrom SuggestedEdits where OwnerUserId=@UserId\n) as grouped;",
        "CreationDate": "2018-11-09 23:51:16",
        "validated": false,
        "QueryBody_Original": "DECLARE  @UserId int = ##UserId##\nselect \ntotal,\napproved,\nrejected,\nround(cast(approved*100 as float)\/total ,1) ApprovedPercentage,\nround(cast(rejected*100 as float)\/total ,1) RejectedPercentage\nfrom (\nselect\ncount(Id) total,\ncount(ApprovalDate) approved,\ncount(RejectionDate) rejected\nfrom SuggestedEdits where OwnerUserId=@UserId\n) as grouped;"
    },
    {
        "QuerySetId": 925422,
        "Title": "Comments containing one of given keywords",
        "Description": null,
        "QueryBody": "SELECT  DISTINCT TOP ##num## Id As [Comment Link], text, UserId AS [User Link], CreationDate\n  FROM Comments\ncross join string_split(##words:string?e,a##, ',')\nWHERE text like concat('%', value ,'%')\nORDER BY CreationDate DESC",
        "CreationDate": "2018-11-11 14:24:53",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 925428,
        "Title": "Posts containing some of the given texts in revision history",
        "Description": null,
        "QueryBody": "SELECT  DISTINCT TOP ##num?100## p.Id AS [Post Link], \n  p.OwnerUserId AS [User Link], p.CreationDate, p.LastActivityDate, p.Score,\n  url = 'site:\/\/posts\/' + CAST(p.Id AS varchar)+'\/revisions'\n  FROM Posts p JOIN PostHistory ph ON (ph.PostId=p.Id)\n  cross join string_split(##words:string?e,a##, ',')\n  WHERE text like concat('%', value ,'%')\n  ORDER BY p.CreationDate DESC",
        "CreationDate": "2018-11-11 14:56:13",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 925568,
        "Title": "Top 5000 viewed Posts tagged with R",
        "Description": null,
        "QueryBody": "DECLARE  @Tag VARCHAR(25) = '##Tag##'\n\nSELECT TOP 5000\nQuestions.Id \nAS [Post Link], OwnerUserId\n\n\nFROM Posts AS Questions\n    INNER JOIN PostTags \n    ON PostTags.PostId = Questions.Id\n    INNER JOIN Tags\n    ON Tags.Id = PostTags.TagId\n    \nWHERE Tags.TagName = @Tag\n\nORDER BY ViewCount DESC",
        "CreationDate": "2018-11-12 01:43:57",
        "validated": false,
        "QueryBody_Original": "DECLARE  @Tag VARCHAR(25) = '##Tag##'\n\nSELECT TOP 5000\nQuestions.Id \nAS [Post Link], OwnerUserId\n\n\nFROM Posts AS Questions\n    INNER JOIN PostTags \n    ON PostTags.PostId = Questions.Id\n    INNER JOIN Tags\n    ON Tags.Id = PostTags.TagId\n    \nWHERE Tags.TagName = @Tag\n\nORDER BY ViewCount DESC"
    },
    {
        "QuerySetId": 928347,
        "Title": "all posts for specific tag to specific topic (in title-\/tag-\/body-content)",
        "Description": null,
        "QueryBody": "SELECT  Id, replace(\n         replace(\n            replace(\n              title,\n              char(10) + char(13), '<br \/>'), \n            char(10) , '<br \/>'),\n         char(13) , '<br \/>') as [title]\n     , tags\n     , ViewCount\n     , FavoriteCount\n     , CreationDate\n     , Score\n     , replace(\n         replace(\n            replace(\n              body,\n              char(10) + char(13), '<br \/>'), \n            char(10) , '<br \/>'),\n         char(13) , '<br \/>') as [body]\nFROM Posts \nWHERE PostTypeId = 1\nAND Tags LIKE '%<' + ##tagname:string## + '>%' \nAND (Title LIKE '%' + ##topic:string## + '%' OR Tags LIKE '%<' + ##topic:string## + '>%' OR Body LIKE '%' + ##topic:string## + '%') \nAND CreationDate >= ##sinceYear:string##\nORDER BY ViewCount DESC",
        "CreationDate": "2018-11-16 13:52:41",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 929777,
        "Title": "When were my posts downvoted?",
        "Description": null,
        "QueryBody": "DECLARE  @UserId int = ##UserId##\n\nSELECT p.Id AS [Post Link], v.CreationDate AS 'Downvote Date'\nFROM Posts p \nINNER JOIN Votes v ON v.PostId = p.Id\nWHERE p.OwnerUserId = @UserId AND v.VoteTypeId = 3\nGROUP BY p.Id, p.Body, v.CreationDate\nORDER BY v.CreationDate DESC",
        "CreationDate": "2018-11-19 20:49:16",
        "validated": false,
        "QueryBody_Original": "DECLARE  @UserId int = ##UserId##\n\nSELECT p.Id AS [Post Link], v.CreationDate AS 'Downvote Date'\nFROM Posts p \nINNER JOIN Votes v ON v.PostId = p.Id\nWHERE p.OwnerUserId = @UserId AND v.VoteTypeId = 3\nGROUP BY p.Id, p.Body, v.CreationDate\nORDER BY v.CreationDate DESC"
    },
    {
        "QuerySetId": 929801,
        "Title": "Cryptography related questions (tag list based on related tags)",
        "Description": null,
        "QueryBody": "SELECT  COUNT(Id) From Posts\nWHERE Posts.Tags LIKE '%<' + ##tagname:string## + '>%'",
        "CreationDate": "2018-11-19 22:11:12",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 931328,
        "Title": "select * from users ",
        "Description": null,
        "QueryBody": "WITH  Israel in their location\n\nselect * from Users",
        "CreationDate": "2018-11-22 22:36:26",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 931395,
        "Title": "Tag badge progress graph - number of a user's answers in a tag over time",
        "Description": null,
        "QueryBody": "WITH  DatesOfChanges(Id,ChangeDate) AS (\n\nSELECT\nquestions.Id,\nCASE WHEN answers.CreationDate > MIN(ph.CreationDate) \n     THEN answers.CreationDate\n     ELSE MIN(ph.CreationDate) \n     END AS ChangeDate\nFROM Posts answers\nJOIN Posts questions ON questions.Id = answers.ParentId\nJOIN PostHistory ph ON ph.PostId = questions.Id\nWHERE answers.OwnerUserId = ##UserId##\n  AND questions.Tags LIKE '%<'+##Tag##+'>%'\n  AND ph.Text LIKE '%<'+##Tag##+'>%'\n  AND ph.PostHistoryTypeId IN (3,6) --initial tags, edit tags\n  AND ##DummyDate:string? ## = ##DummyDate:string? ##\nGROUP BY questions.Id, questions.CreationDate, answers.CreationDate\n\n)\n\nSELECT \n  ChangeDate,\n  ROW_NUMBER() OVER (ORDER BY ChangeDate) AS Number\nFROM DatesOfChanges\nORDER BY ChangeDate",
        "CreationDate": "2018-11-23 01:07:41",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 934102,
        "Title": "cryptography posts for specific langauge\/tag",
        "Description": null,
        "QueryBody": "SELECT  Posts.Id, replace(\n         replace(\n            replace(\n              title,\n              char(10) + char(13), '<br \/>'), \n            char(10) , '<br \/>'),\n         char(13) , '<br \/>') as [Title]\n     , Tags\n     , ViewCount\n     , AnswerCount\n     , CommentCount\n     , FavoriteCount\n     , CreationDate\n     , Score\n     , replace(\n         replace(\n            replace(\n              body,\n              char(10) + char(13), '<br \/>'), \n            char(10) , '<br \/>'),\n         char(13) , '<br \/>') as [Body] from Posts \njoin PostTags on PostTags.PostId=Posts.Id\njoin Tags on Tags.Id = PostTags.TagId \nwhere PostTypeId = 1 and (Tags.TagName LIKE\n'cryptography' AND Posts.Tags LIKE '%<' + ##tag:string## + '>%')\nOrder by Posts.Id",
        "CreationDate": "2018-11-26 19:37:22",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 936724,
        "Title": "Last site access for given users",
        "Description": null,
        "QueryBody": "SELECT \n  u.Id AS [User Link], u.LastAccessDate\nFROM Users u\nWHERE u.Id IN (##list##)",
        "CreationDate": "2018-11-29 23:54:07",
        "validated": false,
        "QueryBody_Original": "SELECT \n  u.Id AS [User Link], u.LastAccessDate\nFROM Users u\nWHERE u.Id IN (##list##)"
    },
    {
        "QuerySetId": 937884,
        "Title": "Posts by (author) voted to close by (close-voter)",
        "Description": null,
        "QueryBody": "SELECT  PostId as [Post Link], phist.Text, phist.Comment\nFROM PostHistory phist\nJOIN Posts p on phist.PostId = p.Id\nWHERE phist.PostHistoryTypeId = 10  -- 10 = Closed\n  AND p.OwnerUserId = ##AuthorId##\n  AND phist.Text LIKE '%\"Id\":' + CAST(##CloseVoterId## AS nvarchar) + ',%'\n\n-- Comment values:\n-- 101 = duplicate\n-- 102 = OT learning materials\n-- 103 = unclear what you're asking\n-- 104 = too broad\n-- 105 = primarily opinion-based",
        "CreationDate": "2018-11-30 06:57:36",
        "validated": false,
        "QueryBody_Original": "SELECT  PostId as [Post Link], phist.Text, phist.Comment\nFROM PostHistory phist\nJOIN Posts p on phist.PostId = p.Id\nWHERE phist.PostHistoryTypeId = 10  -- 10 = Closed\n  AND p.OwnerUserId = ##AuthorId##\n  AND phist.Text LIKE '%\"Id\":' + CAST(##CloseVoterId## AS nvarchar) + ',%'\n\n-- Comment values:\n-- 101 = duplicate\n-- 102 = OT learning materials\n-- 103 = unclear what you're asking\n-- 104 = too broad\n-- 105 = primarily opinion-based"
    },
    {
        "QuerySetId": 938233,
        "Title": "Number of posts by a specific user depending on hour in a day",
        "Description": null,
        "QueryBody": "DECLARE  @Frequency int = ##Frequency:int?3##\nDECLARE @UserId int = ##UserId:int##\n\n;WITH tmp AS\n(SELECT Id,\n  Period = CASE @Frequency\n    WHEN 1 THEN DATEPART(\"hour\", CreationDate)\n    WHEN 2 THEN DATEPART(\"weekday\", CreationDate)\n    WHEN 3 THEN ROUND((CAST(DATEPART(\"weekday\", CreationDate) AS numeric) \n    + CAST(DATEPART(\"hour\", CreationDate) AS numeric) \/ 24), 2) END\nFROM Posts\nWHERE OwnerUserId = @UserId)\nSELECT Period, COUNT(*) AS number,\nROUND((COUNT(*)*100.0\/(SELECT COUNT(*) FROM tmp)),2) AS percentage\nFROM tmp\nGROUP BY Period\nORDER BY Period",
        "CreationDate": "2018-11-30 20:44:55",
        "validated": false,
        "QueryBody_Original": "DECLARE  @Frequency int = ##Frequency:int?3##\nDECLARE @UserId int = ##UserId:int##\n\n;WITH tmp AS\n(SELECT Id,\n  Period = CASE @Frequency\n    WHEN 1 THEN DATEPART(\"hour\", CreationDate)\n    WHEN 2 THEN DATEPART(\"weekday\", CreationDate)\n    WHEN 3 THEN ROUND((CAST(DATEPART(\"weekday\", CreationDate) AS numeric) \n    + CAST(DATEPART(\"hour\", CreationDate) AS numeric) \/ 24), 2) END\nFROM Posts\nWHERE OwnerUserId = @UserId)\nSELECT Period, COUNT(*) AS number,\nROUND((COUNT(*)*100.0\/(SELECT COUNT(*) FROM tmp)),2) AS percentage\nFROM tmp\nGROUP BY Period\nORDER BY Period"
    },
    {
        "QuerySetId": 938602,
        "Title": "Post with given word in some of the past revision but not in the current ones",
        "Description": null,
        "QueryBody": "SELECT  DISTINCT TOP ##num?100##  \n  p.Id AS [Post Link], p.OwnerUserId AS [User Link], p.LastActivityDate, p.CreationDate,\n  url = 'site:\/\/posts\/' + CAST(p.Id AS varchar)+'\/revisions'\n  FROM Posts p JOIN PostHistory ph ON (ph.PostId=p.Id)\n  WHERE (ph.Text LIKE '%##word?Chebychev##%') AND NOT(p.Body LIKE '%##word##%')\n  ORDER BY p.LastActivityDate DESC",
        "CreationDate": "2018-12-01 12:52:10",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 938603,
        "Title": "Posts with given word in some of the past revision but not in the current one",
        "Description": null,
        "QueryBody": "SELECT  DISTINCT TOP ##num?100##  \n  p.Id AS [Post Link], p.OwnerUserId AS [User Link], p.LastActivityDate, p.CreationDate,\n  url = 'site:\/\/posts\/' + CAST(p.Id AS varchar)+'\/revisions'\nFROM Posts p JOIN PostHistory ph ON (ph.PostId=p.Id)\nWHERE (ph.Text LIKE '%##word?Chebychev##%') AND NOT(p.Body LIKE '%##word##%')\nORDER BY p.LastActivityDate DESC",
        "CreationDate": "2018-12-01 12:53:32",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 941270,
        "Title": "count question posts for tag",
        "Description": null,
        "QueryBody": "SELECT  DISTINCT COUNT(Posts.Id) from Posts \njoin PostTags on PostTags.PostId=Posts.Id\njoin Tags on Tags.Id = PostTags.TagId \nwhere PostTypeId = 1 and (Tags.TagName LIKE ##tag:string##)",
        "CreationDate": "2018-12-06 14:49:29",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 941417,
        "Title": "Count number of answer posted in a given year from a user",
        "Description": null,
        "QueryBody": "DECLARE  @UserId int = ##UserId##\n\nSELECT COUNT(*) FROM Posts WHERE OwnerUserId = @UserId AND CreationDate >= '2018\/01\/01'",
        "CreationDate": "2018-12-06 17:51:51",
        "validated": false,
        "QueryBody_Original": "DECLARE  @UserId int = ##UserId##\n\nSELECT COUNT(*) FROM Posts WHERE OwnerUserId = @UserId AND CreationDate >= '2018\/01\/01'"
    },
    {
        "QuerySetId": 941966,
        "Title": "Number of answers per question per time",
        "Description": null,
        "QueryBody": "DECLARE  @days INT=##nbDays##\n\nSELECT\n  DATEADD(DAY,0,DATEDIFF(DAY,0,q.CreationDate)\/@days*@days) AS FullDate,\n  ROUND(CAST(SUM(q.AnswerCount) AS REAL) \/ CAST(COUNT(*) AS REAL), 2) AS 'Answers per questions'\nFROM\n  Posts q\nWHERE\n  q.PostTypeId=1 -- questions\n  and q.AnswerCount >= ##minAnswers##\nGROUP BY (DATEDIFF(DAY,0,q.CreationDate)\/@days*@days)\nORDER BY FullDate DESC",
        "CreationDate": "2018-12-07 16:00:32",
        "validated": false,
        "QueryBody_Original": "DECLARE  @days INT=##nbDays##\n\nSELECT\n  DATEADD(DAY,0,DATEDIFF(DAY,0,q.CreationDate)\/@days*@days) AS FullDate,\n  ROUND(CAST(SUM(q.AnswerCount) AS REAL) \/ CAST(COUNT(*) AS REAL), 2) AS 'Answers per questions'\nFROM\n  Posts q\nWHERE\n  q.PostTypeId=1 -- questions\n  and q.AnswerCount >= ##minAnswers##\nGROUP BY (DATEDIFF(DAY,0,q.CreationDate)\/@days*@days)\nORDER BY FullDate DESC"
    },
    {
        "QuerySetId": 941983,
        "Title": "Number of questions with a minimal number of answers on a N days period",
        "Description": null,
        "QueryBody": "DECLARE  @days INT=##nbDays##\n\n-- Query\nSELECT\n  DATEADD(DAY,0,DATEDIFF(DAY,0,q.CreationDate)\/@days*@days) AS FullDate,\n  CAST(COUNT(*) AS REAL) AS '#Questions'\nFROM\n  Posts q\nWHERE\n  q.PostTypeId=1 -- questions\n  and q.AnswerCount >= ##minAnswers##\nGROUP BY (DATEDIFF(DAY,0,q.CreationDate)\/@days*@days)\nORDER BY FullDate DESC",
        "CreationDate": "2018-12-07 15:44:20",
        "validated": false,
        "QueryBody_Original": "DECLARE  @days INT=##nbDays##\n\n-- Query\nSELECT\n  DATEADD(DAY,0,DATEDIFF(DAY,0,q.CreationDate)\/@days*@days) AS FullDate,\n  CAST(COUNT(*) AS REAL) AS '#Questions'\nFROM\n  Posts q\nWHERE\n  q.PostTypeId=1 -- questions\n  and q.AnswerCount >= ##minAnswers##\nGROUP BY (DATEDIFF(DAY,0,q.CreationDate)\/@days*@days)\nORDER BY FullDate DESC"
    },
    {
        "QuerySetId": 942009,
        "Title": "Number of answers per question within a certain number of days",
        "Description": null,
        "QueryBody": "DECLARE  @periodNDays INT = ##periodNDays##\nDECLARE @maxDaysToAnswer INT = ##maxDaysToAnswer##\n\nSELECT\n  DATEADD(DAY,0,(DATEDIFF(DAY,0,q.CreationDate)\/@periodNDays*@periodNDays)) AS 'Date',\n  SUM(1)\nFROM\n  Posts a \n  inner join Posts q ON q.Id=a.ParentId\nWHERE \n  a.PostTypeId = 2 -- answers\n  and q.PostTypeId = 1 -- questions\n  and DATEDIFF(day,q.CreationDate,a.CreationDate)<@maxDaysToAnswer\nGROUP BY (DATEDIFF(DAY,0,q.CreationDate)\/@periodNDays*@periodNDays)\nORDER BY 'Date' DESC",
        "CreationDate": "2018-12-07 16:39:37",
        "validated": false,
        "QueryBody_Original": "DECLARE  @periodNDays INT = ##periodNDays##\nDECLARE @maxDaysToAnswer INT = ##maxDaysToAnswer##\n\nSELECT\n  DATEADD(DAY,0,(DATEDIFF(DAY,0,q.CreationDate)\/@periodNDays*@periodNDays)) AS 'Date',\n  SUM(1)\nFROM\n  Posts a \n  inner join Posts q ON q.Id=a.ParentId\nWHERE \n  a.PostTypeId = 2 -- answers\n  and q.PostTypeId = 1 -- questions\n  and DATEDIFF(day,q.CreationDate,a.CreationDate)<@maxDaysToAnswer\nGROUP BY (DATEDIFF(DAY,0,q.CreationDate)\/@periodNDays*@periodNDays)\nORDER BY 'Date' DESC"
    },
    {
        "QuerySetId": 942359,
        "Title": "Of questions that have upvoted answers, how many have accepted answers?",
        "Description": null,
        "QueryBody": "SELECT \na.Id AS \"Answer ID\",\np.Id AS \"Question ID\",\np.Title AS \"Title\"\nFROM Posts p\nJOIN Posts a ON p.Id = a.ParentId\nWHERE p.PostTypeId = 1 -- question\nAND a.OwnerUserId = ##UserId:int##\nAND a.Score >= ##MinAnswerScore:int##\nAND a.Id <> p.AcceptedAnswerId",
        "CreationDate": "2018-12-08 05:13:56",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 942474,
        "Title": "Questions of a deleted user",
        "Description": null,
        "QueryBody": "SELECT  Id As [Post Link], CreationDate, Score, AnswerCount, ViewCount, Tags, Title\nFROM Posts\nWHERE (OwnerDisplayName='user' + Convert(nvarchar(20), ##UserId##))\nAND (PostTypeId=1)",
        "CreationDate": "2020-01-14 16:21:49",
        "validated": false,
        "QueryBody_Original": "SELECT  Id As [Post Link], CreationDate, Score, AnswerCount, ViewCount, Tags, Title\nFROM Posts\nWHERE (OwnerDisplayName='user' + Convert(nvarchar(20), ##UserId##))\nAND (PostTypeId=1)"
    },
    {
        "QuerySetId": 942476,
        "Title": "Questions of a deleted user with a given tag",
        "Description": null,
        "QueryBody": "SELECT  Id As [Post Link], CreationDate, Score, ViewCount, Tags, Title\nFROM Posts\nWHERE (OwnerDisplayName='user' + Convert(nvarchar(20), ##UserId##))\nAND (PostTypeId=1) AND (Tags LIKE '%<##Tagname##>%')",
        "CreationDate": "2020-02-03 18:45:35",
        "validated": false,
        "QueryBody_Original": "SELECT  Id As [Post Link], CreationDate, Score, ViewCount, Tags, Title\nFROM Posts\nWHERE (OwnerDisplayName='user' + Convert(nvarchar(20), ##UserId##))\nAND (PostTypeId=1) AND (Tags LIKE '%<##Tagname##>%')"
    },
    {
        "QuerySetId": 942627,
        "Title": "Longest time between edit suggestion and approval",
        "Description": null,
        "QueryBody": "SELECT  TOP(##num?500##)\nId AS [Suggested Edit Link],\nPostId AS [Post Link],\nOwnerUserId AS [User Link],\nCreationDate, ApprovalDate,\nDATEDIFF(month, CreationDate, ApprovalDate) AS Months,\nDATEDIFF(day, CreationDate, ApprovalDate) AS Days,\nDATEDIFF(hour, CreationDate, ApprovalDate) AS Hours,\nDATEDIFF(minute, CreationDate, ApprovalDate) AS Minutes\nFROM SuggestedEdits\nWHERE (ApprovalDate IS NOT NULL)\nORDER BY DATEDIFF(minute, CreationDate, ApprovalDate) DESC",
        "CreationDate": "2020-11-08 14:55:25",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 942645,
        "Title": "Longest time between edit suggestion and approval (only posts)",
        "Description": null,
        "QueryBody": "SELECT  TOP(##num##)\ns.Id AS [Suggested Edit Link],\ns.PostId AS [Post Link],\ns.OwnerUserId AS [User Link],\ns.CreationDate, s.ApprovalDate,\nDATEDIFF(month, s.CreationDate, s.ApprovalDate) AS Months,\nDATEDIFF(day, s.CreationDate, s.ApprovalDate) AS Days,\nDATEDIFF(hour, s.CreationDate, s.ApprovalDate) AS Hours,\nDATEDIFF(minute, s.CreationDate, s.ApprovalDate) AS Minutes\nFROM SuggestedEdits s JOIN posts p ON s.PostId=p.Id\nWHERE (s.ApprovalDate IS NOT NULL) AND (p.PostTypeId IN (1,2))\nORDER BY DATEDIFF(minute, s.CreationDate, s.ApprovalDate) DESC",
        "CreationDate": "2018-12-08 18:34:14",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 942737,
        "Title": "How many answers were accepted at least N days after the question was posted?",
        "Description": null,
        "QueryBody": "DECLARE  @MinNumDays int = ##MinNumDays##\n\nSELECT \n  COUNT(*) AS \"# questions\",\n  SUM(CASE WHEN DATEDIFF(day, q.CreationDate, ph.CreationDate) >= @MinNumDays THEN 1 ELSE 0 END) AS \"# marked as dup >= N days later\",\n  @MinNumDays AS \"N (days)\",\n  CAST( SUM(CASE WHEN DATEDIFF(day, q.CreationDate, ph.CreationDate) >= @MinNumDays THEN 1 ELSE 0 END)*1.0\/count(*) AS DECIMAL(3,2)) AS fraction\nFROM Posts q\n  JOIN PostHistory ph on ph.PostId = q.Id \n  JOIN CloseReasonTypes cr on ph.PostId = q.Id \nWHERE q.PostTypeId = 1 -- question\n  AND ph.PostHistoryTypeId = 10 -- closed\n  AND ph.comment = 101 -- as duplicate\nGROUP BY q.PostTypeId",
        "CreationDate": "2018-12-09 01:04:49",
        "validated": false,
        "QueryBody_Original": "DECLARE  @MinNumDays int = ##MinNumDays##\n\nSELECT \n  COUNT(*) AS \"# questions\",\n  SUM(CASE WHEN DATEDIFF(day, q.CreationDate, ph.CreationDate) >= @MinNumDays THEN 1 ELSE 0 END) AS \"# marked as dup >= N days later\",\n  @MinNumDays AS \"N (days)\",\n  CAST( SUM(CASE WHEN DATEDIFF(day, q.CreationDate, ph.CreationDate) >= @MinNumDays THEN 1 ELSE 0 END)*1.0\/count(*) AS DECIMAL(3,2)) AS fraction\nFROM Posts q\n  JOIN PostHistory ph on ph.PostId = q.Id \n  JOIN CloseReasonTypes cr on ph.PostId = q.Id \nWHERE q.PostTypeId = 1 -- question\n  AND ph.PostHistoryTypeId = 10 -- closed\n  AND ph.comment = 101 -- as duplicate\nGROUP BY q.PostTypeId"
    },
    {
        "QuerySetId": 942910,
        "Title": "How many questions are closed as duplicate?",
        "Description": null,
        "QueryBody": "DECLARE  @MinNumDays int = ##MinNumDays##\n\nSELECT \n  COUNT(*) AS \"# dup questions\",\n  SUM(CASE WHEN DATEDIFF(day, q.CreationDate, ph.CreationDate) >= @MinNumDays THEN 1 ELSE 0 END) AS \"# marked as dup >= N days later\",\n  @MinNumDays AS \"N (days)\",\n  CAST( SUM(CASE WHEN DATEDIFF(day, q.CreationDate, ph.CreationDate) >= @MinNumDays THEN 1 ELSE 0 END)*1.0\/count(*) AS DECIMAL(4,3)) AS fraction\nFROM Posts q\n  JOIN PostHistory ph on ph.PostId = q.Id \nWHERE q.PostTypeId = 1 -- question\n  AND ph.PostHistoryTypeId = 10 -- closed\n  AND (ph.comment = 101 OR ph.comment = 1) -- as duplicate\nGROUP BY q.PostTypeId",
        "CreationDate": "2018-12-09 01:45:04",
        "validated": false,
        "QueryBody_Original": "DECLARE  @MinNumDays int = ##MinNumDays##\n\nSELECT \n  COUNT(*) AS \"# dup questions\",\n  SUM(CASE WHEN DATEDIFF(day, q.CreationDate, ph.CreationDate) >= @MinNumDays THEN 1 ELSE 0 END) AS \"# marked as dup >= N days later\",\n  @MinNumDays AS \"N (days)\",\n  CAST( SUM(CASE WHEN DATEDIFF(day, q.CreationDate, ph.CreationDate) >= @MinNumDays THEN 1 ELSE 0 END)*1.0\/count(*) AS DECIMAL(4,3)) AS fraction\nFROM Posts q\n  JOIN PostHistory ph on ph.PostId = q.Id \nWHERE q.PostTypeId = 1 -- question\n  AND ph.PostHistoryTypeId = 10 -- closed\n  AND (ph.comment = 101 OR ph.comment = 1) -- as duplicate\nGROUP BY q.PostTypeId"
    },
    {
        "QuerySetId": 943230,
        "Title": "Delete my old \"Accept an answer\" comments",
        "Description": "search for questions where I've prompted the OP to accept an answer, and they have, but my comment is still out there.\r\n\"If any of the answers solved your problem, please...\"",
        "QueryBody": "SELECT  c.PostId as [Post Link], c.CreationDate, c.Text\nFROM Comments c\nINNER JOIN Posts p\n  ON c.PostId = p.Id\nWHERE c.Text LIKE '%solved your problem%'\n  AND c.UserId = ##UserId:Int?117549##\n  AND p.AcceptedANswerId IS NOT NULL\nORDER BY c.CreationDate DESC",
        "CreationDate": "2018-12-09 20:20:40",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 943452,
        "Title": "Find answers by a given user",
        "Description": null,
        "QueryBody": "SELECT \n  a.Id AS \"Answer ID\",\n  q.Id AS \"Question ID\",\n  q.Title AS \"Title\"\nFROM Posts q\n  JOIN Posts a ON q.Id = a.ParentId\nWHERE q.PostTypeId = 1 -- question\n  AND a.OwnerUserId = ##UserId:int##\n  AND a.Score >= ##MinAnswerScore:int##\n  AND q.AcceptedAnswerId IS NOT NULL\n  AND a.Id = q.AcceptedAnswerId\nORDER BY q.Id DESC",
        "CreationDate": "2018-12-10 05:24:56",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 943454,
        "Title": "Find answers by a given user to closed questions",
        "Description": null,
        "QueryBody": "SELECT  \n  a.ParentId AS \"Question ID\", \n  a.Id AS \"Answer ID\",\n  q.ClosedDate AS \"Closed Date\",\n  ph.Comment AS \"Closed Reason\",\n  q.Id AS [Post Link]\nFROM Posts a\n  JOIN Posts q ON a.ParentId = q.Id\n  JOIN PostHistory ph on ph.PostId = q.Id \nWHERE a.PostTypeId = 2 -- answer\n  AND a.OwnerUserId = ##UserId:int##\n  AND ph.PostHistoryTypeId = 10 -- closed\nORDER BY q.ClosedDate DESC",
        "CreationDate": "2019-10-20 05:52:39",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 944595,
        "Title": "Reputation change in recent time on a given website",
        "Description": null,
        "QueryBody": "DECLARE  @uid INT = ##UserId:INT##\nDECLARE @sDate DATE = CAST(##iniDate:STRING## AS DATE)\n\n-- starting: https:\/\/data.stackexchange.com\/stackoverflow\/query\/203302\/user-reputation-history?uid=447356#graph\n\n-- Received upvotes on questions\n--SELECT\n--  v.CreationDate,\n--  sum(count(*)*5)\n--FROM\n--  Votes v\n--  INNER JOIN Posts p ON p.Id = v.PostId\n--WHERE\n--  p.PostTypeId = 1 -- question\n--  AND p.OwnerUserId = @uid\n--  AND v.VoteTypeId = 2 -- upvote\n  --AND v.CreationDate > @sDate\n--GROUP BY v.CreationDate\n--ORDER BY v.CreationDate\n\nSELECT \n  v.CreationDate, \n  sum(count(*)*5) OVER (ORDER BY v.CreationDate) AS score\nFROM \n  Posts p \n  INNER JOIN Votes v ON v.PostId = p.Id\nWHERE \n  v.VoteTypeId = 2 --UpVote\n  and p.PostTypeId = 1 -- Q\n  and p.OwnerUserId = @uid\nGROUP BY v.CreationDate",
        "CreationDate": "2018-12-12 01:37:37",
        "validated": false,
        "QueryBody_Original": "DECLARE  @uid INT = ##UserId:INT##\nDECLARE @sDate DATE = CAST(##iniDate:STRING## AS DATE)\n\n-- starting: https:\/\/data.stackexchange.com\/stackoverflow\/query\/203302\/user-reputation-history?uid=447356#graph\n\n-- Received upvotes on questions\n--SELECT\n--  v.CreationDate,\n--  sum(count(*)*5)\n--FROM\n--  Votes v\n--  INNER JOIN Posts p ON p.Id = v.PostId\n--WHERE\n--  p.PostTypeId = 1 -- question\n--  AND p.OwnerUserId = @uid\n--  AND v.VoteTypeId = 2 -- upvote\n  --AND v.CreationDate > @sDate\n--GROUP BY v.CreationDate\n--ORDER BY v.CreationDate\n\nSELECT \n  v.CreationDate, \n  sum(count(*)*5) OVER (ORDER BY v.CreationDate) AS score\nFROM \n  Posts p \n  INNER JOIN Votes v ON v.PostId = p.Id\nWHERE \n  v.VoteTypeId = 2 --UpVote\n  and p.PostTypeId = 1 -- Q\n  and p.OwnerUserId = @uid\nGROUP BY v.CreationDate"
    },
    {
        "QuerySetId": 944899,
        "Title": "List top stacks for a given user",
        "Description": null,
        "QueryBody": "DECLARE  @uid INT = ##UserId:INT##\n\nDECLARE @auid INT = (SELECT AccountId FROM Users WHERE Id=@uid)\n\nSELECT \n db.name\nFROM \n  sys.databases db",
        "CreationDate": "2018-12-12 16:03:45",
        "validated": false,
        "QueryBody_Original": "DECLARE  @uid INT = ##UserId:INT##\n\nDECLARE @auid INT = (SELECT AccountId FROM Users WHERE Id=@uid)\n\nSELECT \n db.name\nFROM \n  sys.databases db"
    },
    {
        "QuerySetId": 944932,
        "Title": "Get user reputation on a given site",
        "Description": null,
        "QueryBody": "SELECT \n  Reputation\nFROM \n  ##Site##..[Users]\nWHERE\n  AccountId = ##aUId##",
        "CreationDate": "2018-12-12 17:23:56",
        "validated": false,
        "QueryBody_Original": "SELECT \n  Reputation\nFROM \n  ##Site##..[Users]\nWHERE\n  AccountId = ##aUId##"
    },
    {
        "QuerySetId": 945116,
        "Title": "Questions which are duplicates of closed questions",
        "Description": null,
        "QueryBody": "SELECT  TOP ##num##\n  pl.PostId AS [Post Link],\n  pl.RelatedPostId AS [Post Link]\nFROM PostLinks pl JOIN Posts p ON  (pl.RelatedPostId=p.Id)\nWHERE (p.ClosedDate IS NOT NULL) AND (pl.LinkTypeId=3)\nAND (p.Id NOT IN (SELECT pl2.PostId FROM PostLinks pl2 WHERE pl2.LinkTypeId = 3))\nORDER BY pl.PostId DESC",
        "CreationDate": "2018-12-12 23:48:39",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 945895,
        "Title": "Top users by tags per location",
        "Description": null,
        "QueryBody": "DECLARE  @tag_id int = (select id from tags where tagname = LOWER('##TagName##'));\n\nselect top (##Limit##)\n  rank() over (order by sum(answers.score) desc) \"Rank\",\n  u1.id \"User Link\",\n  sum(answers.score) as \"Score\"\nfrom users u1\njoin posts answers on (u1.id = answers.owneruserid)\njoin posts parent on (answers.parentid = parent.id)\njoin posttags on (parent.id = posttags.postid)\nwhere posttags.tagid = @tag_id\nand LOWER(Location) LIKE LOWER('%##Location##%')\n--and answers.posttypeid = 2  -- answers only\ngroup by u1.id\norder by sum(answers.score) desc;",
        "CreationDate": "2019-02-27 21:52:42",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 945982,
        "Title": "Tag names \/ wikis \/ excerpts containing certain words",
        "Description": null,
        "QueryBody": "SELECT  t.TagName, 'Tag', ''\n  FROM Tags AS t\n  WHERE t.TagName LIKE '%' + ##query:string## + '%' collate sql_latin1_general_cp1_ci_ai\n  \nUNION ALL\n\nSELECT t.TagName, 'Excerpt', p.Body\n  FROM Tags AS t\n  INNER JOIN Posts AS p\n    ON p.Id = t.ExcerptPostId\n  WHERE p.Body LIKE '%' + ##query:string## + '%' collate sql_latin1_general_cp1_ci_ai\n  \nUNION ALL\n\nSELECT t.TagName, 'Wiki', p.Body\n  FROM Tags AS t\n  INNER JOIN Posts AS p\n    ON p.Id = t.WikiPostId\n  WHERE p.Body LIKE '%' + ##query:string## + '%' collate sql_latin1_general_cp1_ci_ai",
        "CreationDate": "2018-12-14 02:53:31",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 946086,
        "Title": "Average number of answers depending on day (or time) when bounty was started",
        "Description": null,
        "QueryBody": "DECLARE  @Frequency int = ##Frequency:int?2##\n\n;WITH tmp AS\n(SELECT p.AnswerCount AS ACount,\n    Period = CASE @Frequency\n    WHEN 1 THEN DATEPART(\"hour\", bs.CreationDate)\n    WHEN 2 THEN DATEPART(\"weekday\", bs.CreationDate)\n    WHEN 3 THEN ROUND((CAST(DATEPART(\"weekday\", bs.CreationDate) AS numeric)\n    + CAST(DATEPART(\"hour\", bs.CreationDate) AS numeric) \/ 24), 2) END\nFROM Posts p INNER JOIN Votes bs\n    ON p.Id = bs.PostId\n    AND bs.VoteTypeId = 8  -- BountyStart\n)\nSELECT Period, AVG(cast(ACount as decimal))\nFROM tmp\nGROUP BY Period\nORDER BY Period",
        "CreationDate": "2018-12-14 12:33:53",
        "validated": false,
        "QueryBody_Original": "DECLARE  @Frequency int = ##Frequency:int?2##\n\n;WITH tmp AS\n(SELECT p.AnswerCount AS ACount,\n    Period = CASE @Frequency\n    WHEN 1 THEN DATEPART(\"hour\", bs.CreationDate)\n    WHEN 2 THEN DATEPART(\"weekday\", bs.CreationDate)\n    WHEN 3 THEN ROUND((CAST(DATEPART(\"weekday\", bs.CreationDate) AS numeric)\n    + CAST(DATEPART(\"hour\", bs.CreationDate) AS numeric) \/ 24), 2) END\nFROM Posts p INNER JOIN Votes bs\n    ON p.Id = bs.PostId\n    AND bs.VoteTypeId = 8  -- BountyStart\n)\nSELECT Period, AVG(cast(ACount as decimal))\nFROM tmp\nGROUP BY Period\nORDER BY Period"
    },
    {
        "QuerySetId": 946093,
        "Title": "Number of bounties with accepted answer depending on the day (time) when bounty started",
        "Description": null,
        "QueryBody": "DECLARE  @Frequency int = ##Frequency:int?2##\n\n;WITH tmp AS\n(SELECT p.Id, p.AcceptedAnswerId AS Acc,\n    Period = CASE @Frequency\n    WHEN 1 THEN DATEPART(\"hour\", bs.CreationDate)\n    WHEN 2 THEN DATEPART(\"weekday\", bs.CreationDate)\n    WHEN 3 THEN ROUND((CAST(DATEPART(\"weekday\", bs.CreationDate) AS numeric)\n    + CAST(DATEPART(\"hour\", bs.CreationDate) AS numeric) \/ 24), 2) END\nFROM Posts p INNER JOIN Votes bs\n    ON p.Id = bs.PostId\n    AND bs.VoteTypeId = 8  -- BountyStart\n)\nSELECT Period, COUNT(*), COUNT(Acc), \n  ROUND((COUNT(Acc))*100.0\/(COUNT(*)),2) AS percentage\nFROM tmp\nGROUP BY Period\nORDER BY Period",
        "CreationDate": "2018-12-14 12:51:57",
        "validated": false,
        "QueryBody_Original": "DECLARE  @Frequency int = ##Frequency:int?2##\n\n;WITH tmp AS\n(SELECT p.Id, p.AcceptedAnswerId AS Acc,\n    Period = CASE @Frequency\n    WHEN 1 THEN DATEPART(\"hour\", bs.CreationDate)\n    WHEN 2 THEN DATEPART(\"weekday\", bs.CreationDate)\n    WHEN 3 THEN ROUND((CAST(DATEPART(\"weekday\", bs.CreationDate) AS numeric)\n    + CAST(DATEPART(\"hour\", bs.CreationDate) AS numeric) \/ 24), 2) END\nFROM Posts p INNER JOIN Votes bs\n    ON p.Id = bs.PostId\n    AND bs.VoteTypeId = 8  -- BountyStart\n)\nSELECT Period, COUNT(*), COUNT(Acc), \n  ROUND((COUNT(Acc))*100.0\/(COUNT(*)),2) AS percentage\nFROM tmp\nGROUP BY Period\nORDER BY Period"
    },
    {
        "QuerySetId": 946095,
        "Title": "Percentage of bounties with accepted answer depending on the day (time) when bounty started",
        "Description": null,
        "QueryBody": "DECLARE  @Frequency int = ##Frequency:int?2##\n\n;WITH tmp AS\n(SELECT p.Id, p.AcceptedAnswerId AS Acc,\n    Period = CASE @Frequency\n    WHEN 1 THEN DATEPART(\"hour\", bs.CreationDate)\n    WHEN 2 THEN DATEPART(\"weekday\", bs.CreationDate)\n    WHEN 3 THEN ROUND((CAST(DATEPART(\"weekday\", bs.CreationDate) AS numeric)\n    + CAST(DATEPART(\"hour\", bs.CreationDate) AS numeric) \/ 24), 2) END\nFROM Posts p INNER JOIN Votes bs\n    ON p.Id = bs.PostId\n    AND bs.VoteTypeId = 8  -- BountyStart\n)\nSELECT Period, ROUND((COUNT(Acc))*100.0\/(COUNT(*)),2) AS percentage\nFROM tmp\nGROUP BY Period\nORDER BY Period",
        "CreationDate": "2018-12-14 12:52:31",
        "validated": false,
        "QueryBody_Original": "DECLARE  @Frequency int = ##Frequency:int?2##\n\n;WITH tmp AS\n(SELECT p.Id, p.AcceptedAnswerId AS Acc,\n    Period = CASE @Frequency\n    WHEN 1 THEN DATEPART(\"hour\", bs.CreationDate)\n    WHEN 2 THEN DATEPART(\"weekday\", bs.CreationDate)\n    WHEN 3 THEN ROUND((CAST(DATEPART(\"weekday\", bs.CreationDate) AS numeric)\n    + CAST(DATEPART(\"hour\", bs.CreationDate) AS numeric) \/ 24), 2) END\nFROM Posts p INNER JOIN Votes bs\n    ON p.Id = bs.PostId\n    AND bs.VoteTypeId = 8  -- BountyStart\n)\nSELECT Period, ROUND((COUNT(Acc))*100.0\/(COUNT(*)),2) AS percentage\nFROM tmp\nGROUP BY Period\nORDER BY Period"
    },
    {
        "QuerySetId": 946519,
        "Title": "Questions where answer was accepted before a bounty was started",
        "Description": null,
        "QueryBody": "SELECT  TOP(##num##)\n  p.Id AS [Post Link], p.AcceptedAnswerId, bs.CreationDate, ac.CreationDate, p.CreationDate,\n  url = 'site:\/\/posts\/' + CAST(p.Id AS varchar)+'\/revisions',\n  url = 'site:\/\/posts\/' + CAST(p.Id AS varchar)+'\/timeline'\nFROM Posts p INNER JOIN Votes bs\nON (p.Id = bs.PostId AND bs.VoteTypeId = 8)\nLEFT JOIN Votes ac ON (p.AcceptedAnswerId = ac.PostId and ac.VoteTypeId = 1)\nWHERE (p.PostTypeId=1) AND (p.AcceptedAnswerId IS NOT NULL) AND (ac.CreationDate < bs.CreationDate)\nORDER BY p.CreationDate DESC",
        "CreationDate": "2018-12-15 01:43:16",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 946815,
        "Title": "Find duplicated questions which user has answered",
        "Description": null,
        "QueryBody": "SELECT  p.parentid,\n       p.id AS [Post Link],\n       p.title,\n       pp.title\nFROM posts p\nJOIN posts pp ON p.parentid = pp.id\nJOIN posthistory ph ON ph.postid = pp.id\nWHERE p.posttypeid = 2 -- answer\nAND p.owneruserid = ##userid##\n  AND ph.posthistorytypeid = 10 -- closed\nAND ph.comment = 101 -- as duplicate\nAND pp.closeddate IS NOT NULL",
        "CreationDate": "2018-12-15 19:03:05",
        "validated": false,
        "QueryBody_Original": "SELECT  p.parentid,\n       p.id AS [Post Link],\n       p.title,\n       pp.title\nFROM posts p\nJOIN posts pp ON p.parentid = pp.id\nJOIN posthistory ph ON ph.postid = pp.id\nWHERE p.posttypeid = 2 -- answer\nAND p.owneruserid = ##userid##\n  AND ph.posthistorytypeid = 10 -- closed\nAND ph.comment = 101 -- as duplicate\nAND pp.closeddate IS NOT NULL"
    },
    {
        "QuerySetId": 947125,
        "Title": "Users who made the most recent posts",
        "Description": null,
        "QueryBody": "WITH  too many results)\n;WITH recent_cte AS\n(\nSELECT\n  OwnerUserId AS uid,\n  MAX(Id) AS MaxId\nFROM Posts\nWHERE (CreationDate>='##datemin?2018-01-01##')\nGROUP BY OwnerUserId\n)\n\nSELECT\n  uid AS [User Link], p.CreationDate, MaxId [Post Link], p.Score\nFROM recent_cte inner JOIN Posts p ON MaxId = p.Id\nORDER BY p.CreationDate DESC",
        "CreationDate": "2018-12-16 14:29:06",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 947359,
        "Title": "Questions with a single specified tag",
        "Description": null,
        "QueryBody": "SELECT  Id AS [Post Link], Score, CreationDate\n  FROM Posts\n  WHERE Tags = '<' + ##tagName:string## + '>'\n  ORDER BY CreationDate DESC",
        "CreationDate": "2018-12-17 01:33:37",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 947404,
        "Title": "Find answers with a given user's comments",
        "Description": null,
        "QueryBody": "SELECT  \nc.Id AS \"Comment ID\",\nc.CreationDate AS \"Comment Date\", \nu.Id AS \"User ID\", \nu.DisplayName AS \"User Name\", \na.Id AS \"Answer ID\", \nq.Id AS \"Question ID\", \nq.Title AS \"Question Title\"\nFROM Posts a\nJOIN Posts q ON q.Id = a.ParentId\nJOIN Comments c ON c.PostId = a.Id\nJOIN Users u ON u.Id = a.OwnerUserId\nWHERE c.UserId = ##UserId:int##\nAND a.OwnerUserId <> ##UserId:int##",
        "CreationDate": "2018-12-17 06:35:11",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 947406,
        "Title": "Who commented on a given user's answers",
        "Description": null,
        "QueryBody": "SELECT \n  u.Id AS \"Commenter ID\",\n  u.DisplayName AS \"Name\",\n  u.Reputation AS \"Reputation\",\n  c.CreationDate AS \"Comment Date\", \n  q.Id AS \"Question ID\", \n  q.CreationDate AS \"Question Date\", \n  q.Title AS \"Title\"\nFROM Posts a\n  JOIN Posts q ON a.ParentId = q.Id\n  JOIN Comments c ON c.PostId = a.Id\n  JOIN Users u ON u.Id = c.UserId\nWHERE a.PostTypeId = 2 -- answer\n  AND a.OwnerUserId = ##UserId:int##\n  AND u.Id <> ##UserId:int##",
        "CreationDate": "2018-12-17 06:39:32",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 947866,
        "Title": "Amount of bronze\/silver\/tag badge users by reputation",
        "Description": null,
        "QueryBody": "DECLARE  @Reputation as table\n( num int );\n\nWITH    q AS\n        (\n        SELECT  1 AS num\n        UNION ALL\n        SELECT  num + 1\n        FROM    q\n        WHERE   num < 10\n        )\nSELECT  *\nFROM    q",
        "CreationDate": "2018-12-17 19:51:47",
        "validated": false,
        "QueryBody_Original": "DECLARE  @Reputation as table\n( num int );\n\nWITH    q AS\n        (\n        SELECT  1 AS num\n        UNION ALL\n        SELECT  num + 1\n        FROM    q\n        WHERE   num < 10\n        )\nSELECT  *\nFROM    q"
    },
    {
        "QuerySetId": 949736,
        "Title": "Get links to answers by a given user",
        "Description": null,
        "QueryBody": "SELECT  \n  q.Id AS [Post Link], \n  a.Id AS \"Answer ID\", \n  q.CreationDate AS \"Question Date\", \n  a.CreationDate AS \"Answer Date\", \n  q.ViewCount AS \"Views\",\n  a.Score AS \"Score\",\n  q.ClosedDate AS \"Question Closed Date\",\n  q.OwnerUserId AS \"Questioner ID\",\n  u.DisplayName AS \"Questioner Name\",\n  u.Reputation AS \"Reputation\",\n  q.Title AS \"Question Title\"\nFROM Posts a\n  JOIN Posts q ON a.ParentId = q.Id\n  JOIN Users u ON q.OwnerUserId = u.Id\nWHERE a.OwnerUserId = ##UserId:int##\nORDER BY a.CreationDate DESC",
        "CreationDate": "2018-12-19 07:52:01",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 949853,
        "Title": "Prefix +<prefix> in a phone number beginning with 0 string SQL",
        "Description": null,
        "QueryBody": "DECLARE  @full_prefixes AS table(\n  [id] int,\n  [zoneid] tinyint,\n  [description] varchar(100),\n  [countryCode] varchar(2)\n);\n\n\/* Fork of my own code as Anon and ullas' code *\/\nDECLARE @phone_nums AS table(\n  [phone_number] varchar(20)\n);\n\nDECLARE @prefixes AS table(\n  [id] smallint,\n  [prefix] varchar(5)\n);",
        "CreationDate": "2018-12-20 15:09:56",
        "validated": false,
        "QueryBody_Original": "DECLARE  @full_prefixes AS table(\n  [id] int,\n  [zoneid] tinyint,\n  [description] varchar(100),\n  [countryCode] varchar(2)\n);\n\n\/* Fork of my own code as Anon and ullas' code *\/\nDECLARE @phone_nums AS table(\n  [phone_number] varchar(20)\n);\n\nDECLARE @prefixes AS table(\n  [id] smallint,\n  [prefix] varchar(5)\n);"
    },
    {
        "QuerySetId": 949919,
        "Title": "Progress for tag badge for a given user",
        "Description": null,
        "QueryBody": "DECLARE  @uid INT = ##uid:INT##\nDECLARE @tname NVARCHAR(35) = '##tagname##'\n\nSELECT\n  u.Id as [User Link],\n  sum(CASE v.VoteTypeId \n          WHEN 2 THEN 1\n          WHEN 3 THEN -1\n          END) AS Score,\n  t.TagName\nFROM\n  Users u\n  inner join Posts a ON a.OwnerUserId=u.Id\n  inner join Posts q ON q.Id=a.ParentId\n  inner join PostTags pt ON pt.PostId=q.Id\n  inner join Votes v ON v.PostId=a.Id\n  inner join Tags t ON t.Id=pt.TagId\nWHERE\n  u.Id = @uid\n  and q.PostTypeId=1 -- questions\n  and a.PostTypeId=2 -- answers\n  and t.TagName = @tname\nGROUP BY\n  u.Id, t.TagName\nORDER BY\n  Score DESC",
        "CreationDate": "2018-12-19 17:04:15",
        "validated": false,
        "QueryBody_Original": "DECLARE  @uid INT = ##uid:INT##\nDECLARE @tname NVARCHAR(35) = '##tagname##'\n\nSELECT\n  u.Id as [User Link],\n  sum(CASE v.VoteTypeId \n          WHEN 2 THEN 1\n          WHEN 3 THEN -1\n          END) AS Score,\n  t.TagName\nFROM\n  Users u\n  inner join Posts a ON a.OwnerUserId=u.Id\n  inner join Posts q ON q.Id=a.ParentId\n  inner join PostTags pt ON pt.PostId=q.Id\n  inner join Votes v ON v.PostId=a.Id\n  inner join Tags t ON t.Id=pt.TagId\nWHERE\n  u.Id = @uid\n  and q.PostTypeId=1 -- questions\n  and a.PostTypeId=2 -- answers\n  and t.TagName = @tname\nGROUP BY\n  u.Id, t.TagName\nORDER BY\n  Score DESC"
    },
    {
        "QuerySetId": 949936,
        "Title": "Top scores for a given tag",
        "Description": null,
        "QueryBody": "DECLARE  @tname NVARCHAR(35) = '##tagname##'\n\nSELECT TOP 100\n  u.Id as [User Link],\n  sum(CASE v.VoteTypeId \n          WHEN 2 THEN 1\n          WHEN 3 THEN -1\n          END) AS Score,\n  t.TagName\nFROM\n  Users u\n  inner join Posts a ON a.OwnerUserId=u.Id\n  inner join Posts q ON q.Id=a.ParentId\n  inner join PostTags pt ON pt.PostId=q.Id\n  inner join Votes v ON v.PostId=a.Id\n  inner join Tags t ON t.Id=pt.TagId\nWHERE\n  q.PostTypeId=1 -- questions\n  and a.PostTypeId=2 -- answers\n  and t.TagName = @tname\nGROUP BY\n  u.Id, t.TagName\nORDER BY\n  Score DESC",
        "CreationDate": "2018-12-19 17:09:04",
        "validated": false,
        "QueryBody_Original": "DECLARE  @tname NVARCHAR(35) = '##tagname##'\n\nSELECT TOP 100\n  u.Id as [User Link],\n  sum(CASE v.VoteTypeId \n          WHEN 2 THEN 1\n          WHEN 3 THEN -1\n          END) AS Score,\n  t.TagName\nFROM\n  Users u\n  inner join Posts a ON a.OwnerUserId=u.Id\n  inner join Posts q ON q.Id=a.ParentId\n  inner join PostTags pt ON pt.PostId=q.Id\n  inner join Votes v ON v.PostId=a.Id\n  inner join Tags t ON t.Id=pt.TagId\nWHERE\n  q.PostTypeId=1 -- questions\n  and a.PostTypeId=2 -- answers\n  and t.TagName = @tname\nGROUP BY\n  u.Id, t.TagName\nORDER BY\n  Score DESC"
    },
    {
        "QuerySetId": 949952,
        "Title": "List of pending query with indication of user's score for it",
        "Description": "This lists the tag synonyms suggestion that are still opened, but only shows the one where the given user can vote (needs a score of 5 on it).",
        "QueryBody": "DECLARE  @user INT = ##uid:INT##\n\n\nSELECT\n  *\nFROM\n(SELECT \n  st.TagName as stTagName,\n  tt.TagName as ttTagName,\n  ts.CreationDate,\n  ts.OwnerUserId AS [User Link],\n  sum(CASE v.VoteTypeId \n          WHEN 2 THEN 1\n          WHEN 3 THEN -1\n          END) as Score\nFROM \n  TagSynonyms ts\n  inner join Tags st ON ts.SourceTagName=st.TagName\n  inner join Tags tt ON ts.TargetTagName=tt.TagName\n  inner join PostTags pt ON pt.TagId = tt.Id\n  inner join Posts q ON q.Id=pt.PostId\n  inner join Posts a ON a.ParentId=q.Id\n  inner join Votes v ON v.PostId=a.Id\nWHERE\n  ts.ApprovalDate is NULL\n  and q.PostTypeId=1 -- question\n  and a.PostTypeId=2 -- answer\n  and a.OwnerUserId=@user\nGROUP BY\n  tt.TagName, st.TagName, ts.CreationDate, ts.OwnerUserId\n) list\nWHERE \n  Score>4\nORDER BY \n  Score DESC",
        "CreationDate": "2018-12-19 17:41:32",
        "validated": false,
        "QueryBody_Original": "DECLARE  @user INT = ##uid:INT##\n\n\nSELECT\n  *\nFROM\n(SELECT \n  st.TagName as stTagName,\n  tt.TagName as ttTagName,\n  ts.CreationDate,\n  ts.OwnerUserId AS [User Link],\n  sum(CASE v.VoteTypeId \n          WHEN 2 THEN 1\n          WHEN 3 THEN -1\n          END) as Score\nFROM \n  TagSynonyms ts\n  inner join Tags st ON ts.SourceTagName=st.TagName\n  inner join Tags tt ON ts.TargetTagName=tt.TagName\n  inner join PostTags pt ON pt.TagId = tt.Id\n  inner join Posts q ON q.Id=pt.PostId\n  inner join Posts a ON a.ParentId=q.Id\n  inner join Votes v ON v.PostId=a.Id\nWHERE\n  ts.ApprovalDate is NULL\n  and q.PostTypeId=1 -- question\n  and a.PostTypeId=2 -- answer\n  and a.OwnerUserId=@user\nGROUP BY\n  tt.TagName, st.TagName, ts.CreationDate, ts.OwnerUserId\n) list\nWHERE \n  Score>4\nORDER BY \n  Score DESC"
    },
    {
        "QuerySetId": 950043,
        "Title": "how many novice programmers use stack overflow",
        "Description": null,
        "QueryBody": "WITH  Israel in their location\n\nselect * from Users",
        "CreationDate": "2018-12-19 20:20:57",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 951197,
        "Title": "Recent questions from given users",
        "Description": null,
        "QueryBody": "SELECT  TOP (##num##) \np.Id AS [Post Link], u.Id as [User Link], p.Score, p.CreationDate, p.ViewCount, p. Tags \nFROM Users u INNER JOIN Posts p ON p.OwnerUserId=u.Id\nWHERE u.Id IN (##list##) AND p.PostTypeId=1\nORDER BY p.Id DESC",
        "CreationDate": "2018-12-20 23:32:16",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 952177,
        "Title": "My comments on posts edited by owner after comment (\"It's-a me!\" hat)",
        "Description": "https:\/\/winterbash2018.stackexchange.com\/itsa-me",
        "QueryBody": "SELECT \n  Comment.Id as [Comment Link],\n  max(Comment.Score) as [Score],\n  max(Post.Id) as [Post Link],\n  max(Type.Name) as [Type],\n  max(Post.OwnerUserId) as [User Link],\n  max(Post.CreationDate) as [Posted],\n  max(Comment.CreationDate) as [Commented],\n  min(Edit.CreationDate) as [Edited]\nfrom\n  Comments as Comment\n  join Posts as Post on Post.Id = Comment.PostId\n  join PostHistory as Edit on Edit.PostId = Post.Id\n  left join PostTypes as Type on Type.Id = Post.PostTypeId\nwhere\n  Comment.UserId = ##UserId:int##\n  and Post.OwnerUserId != ##UserId:int##\n  and Edit.CreationDate > Comment.CreationDate\n  and Edit.UserId = Post.OwnerUserId\n  and Edit.PostHistoryTypeId in (4, 5, 6)  -- it's an edit\ngroup by\n  Comment.Id\norder by\n  Comment.Id",
        "CreationDate": "2018-12-23 21:44:18",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 952262,
        "Title": "Most upvoted qs in last year",
        "Description": null,
        "QueryBody": "SELECT  TOP 50 Posts.Id [Post Link], COUNT(Votes.Id) FROM Posts\nJOIN Votes ON Posts.Id = Votes.PostId\nWHERE Posts.PostTypeId = 1\nAND Votes.VoteTypeId = 2\nAND Votes.CreationDate > DATEADD(year,-1,GETDATE())\nGROUP BY Posts.Id, Votes.PostId\nORDER BY COUNT(Votes.Id) DESC",
        "CreationDate": "2018-12-23 23:46:02",
        "validated": false,
        "QueryBody_Original": "SELECT  TOP 50 Posts.Id [Post Link], COUNT(Votes.Id) FROM Posts\nJOIN Votes ON Posts.Id = Votes.PostId\nWHERE Posts.PostTypeId = 1\nAND Votes.VoteTypeId = 2\nAND Votes.CreationDate > DATEADD(year,-1,GETDATE())\nGROUP BY Posts.Id, Votes.PostId\nORDER BY COUNT(Votes.Id) DESC"
    },
    {
        "QuerySetId": 952269,
        "Title": "Most upvoted questions in last year",
        "Description": null,
        "QueryBody": "SELECT  TOP 50 Posts.Id [Post Link], COUNT(Votes.Id) FROM Posts\nJOIN Votes ON Posts.Id = Votes.PostId\nWHERE Posts.PostTypeId = 1\nAND Votes.VoteTypeId = 2\nAND Votes.CreationDate > DATEADD(year,-1,GETDATE())\nAND Posts.CreationDate < DATEADD(year,-1,GETDATE())\nAND Posts.CreationDate > DATEADD(year,-2,GETDATE())\nGROUP BY Posts.Id, Votes.PostId\nORDER BY COUNT(Votes.Id) DESC",
        "CreationDate": "2018-12-24 00:19:02",
        "validated": false,
        "QueryBody_Original": "SELECT  TOP 50 Posts.Id [Post Link], COUNT(Votes.Id) FROM Posts\nJOIN Votes ON Posts.Id = Votes.PostId\nWHERE Posts.PostTypeId = 1\nAND Votes.VoteTypeId = 2\nAND Votes.CreationDate > DATEADD(year,-1,GETDATE())\nAND Posts.CreationDate < DATEADD(year,-1,GETDATE())\nAND Posts.CreationDate > DATEADD(year,-2,GETDATE())\nGROUP BY Posts.Id, Votes.PostId\nORDER BY COUNT(Votes.Id) DESC"
    },
    {
        "QuerySetId": 952458,
        "Title": "Questions that could have a chance of It's A Me hat",
        "Description": null,
        "QueryBody": "WITH  no answers and 6 comments, a chance to get It's A Me hat\n\nselect TOP 50\n  p.Id as [Post Link]\n  FROM Posts p\n  WHERE \n  p.PostTypeId = 1 AND \n  p.score >= 0 AND\n  p.closeddate is null AND\n  ISNULL(p.AnswerCount,0) = 0 AND\n  ISNULL(p.CommentCount,0) = 6\n  order by p.score desc",
        "CreationDate": "2018-12-24 08:30:43",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 955831,
        "Title": "Votes on older posts by month",
        "Description": null,
        "QueryBody": "SELECT  DATEFROMPARTS(Year, Month, 1), 100 * ROUND(Votes * 1.0 \/ Answers, 2) as Perf\n  FROM (\n    SELECT *,\n      (SELECT COUNT(*) FROM Posts as AllPosts\n        WHERE \n        AllPosts.OwnerUserId = ##UserId## And\n        AllPosts.CreationDate <= DATEFROMPARTS(Year, Month, 1)\n      ) AS Answers\n      FROM (\n        SELECT DATEPART(YYYY, Votes.CreationDate) AS Year, \n          DATEPART(MM, Votes.CreationDate) AS Month, \n          count(*) AS Votes\n          FROM Votes\n            INNER JOIN Posts on Votes.PostId = Posts.Id\n          WHERE Posts.OwnerUserId = ##UserId##\n            AND DATEDIFF(DD, Posts.CreationDate, Votes.CreationDate) > 30\n          GROUP BY DATEPART(YYYY, Votes.CreationDate), DATEPART(MM, Votes.CreationDate)\n      ) as Raw\n  ) as Raw\nORDER BY Year, Month",
        "CreationDate": "2019-05-08 23:57:58",
        "validated": false,
        "QueryBody_Original": "SELECT  DATEFROMPARTS(Year, Month, 1), 100 * ROUND(Votes * 1.0 \/ Answers, 2) as Perf\n  FROM (\n    SELECT *,\n      (SELECT COUNT(*) FROM Posts as AllPosts\n        WHERE \n        AllPosts.OwnerUserId = ##UserId## And\n        AllPosts.CreationDate <= DATEFROMPARTS(Year, Month, 1)\n      ) AS Answers\n      FROM (\n        SELECT DATEPART(YYYY, Votes.CreationDate) AS Year, \n          DATEPART(MM, Votes.CreationDate) AS Month, \n          count(*) AS Votes\n          FROM Votes\n            INNER JOIN Posts on Votes.PostId = Posts.Id\n          WHERE Posts.OwnerUserId = ##UserId##\n            AND DATEDIFF(DD, Posts.CreationDate, Votes.CreationDate) > 30\n          GROUP BY DATEPART(YYYY, Votes.CreationDate), DATEPART(MM, Votes.CreationDate)\n      ) as Raw\n  ) as Raw\nORDER BY Year, Month"
    },
    {
        "QuerySetId": 956707,
        "Title": "Who else has answered the same questions as this user?",
        "Description": null,
        "QueryBody": "SELECT \n  u.Id AS \"Other User ID\",\n  u.DisplayName AS \"Name\",\n  u.Reputation AS \"Reputation\",\n  q.Id AS \"Question ID\", \n  q.Title AS \"Title\"\nFROM Posts a\n  JOIN Posts q ON a.ParentId = q.Id\n  JOIN Posts s ON s.ParentId = q.Id\n  JOIN Users u ON u.Id = s.OwnerUserId\nWHERE a.PostTypeId = 2 -- answer\n  AND a.OwnerUserId = ##UserId:int##\n  AND s.OwnerUserId <> ##UserId:int##",
        "CreationDate": "2018-12-31 21:49:14",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 957163,
        "Title": "Find related tags to a given input tag.",
        "Description": null,
        "QueryBody": "SELECT  \n  Tags.TagName AS [Tag Name], \n  COUNT(*) AS [Number of associated posts]\nFROM PostTags\n  INNER JOIN Tags\n    ON Tags.Id = PostTags.TagId\nWHERE \n  PostTags.PostId IN \n  (\n    --Gets all the PostIds that have this tag\n    SELECT DISTINCT PostId\n    FROM PostTags\n      INNER JOIN Tags\n        ON Tags.Id = PostTags.TagId\n    WHERE Tags.TagName = ##TagName:string##\n  )\n  AND Tags.TagName <> ##TagName:string##\nGROUP BY Tags.TagName\nORDER BY COUNT(*) DESC",
        "CreationDate": "2019-01-01 12:56:45",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 957949,
        "Title": "Badges that less than 1% of users have that you don't have",
        "Description": null,
        "QueryBody": "DECLARE  @usrid int = ##UserId##\n\nselect \"Badge Name\", \"Percent\" from\n(\n  select x.m AS \"Badge Name\", (convert(decimal,x.n)\/y.n)*100 AS \"Percent\" from \n  (\n \n    SELECT COUNT(UserID) AS n, Name AS m FROM Badges \n        WHERE TagBased = 0 AND\n        UserID <> @usrid GROUP BY Name\n\n  ) x join\n  (\n  \n    SELECT DISTINCT COUNT(AccountId) AS n FROM Users\n\n  ) y on 1=1 \n) AS Foo\n\nwhere Foo.\"Percent\" < 1 ORDER BY \"Percent\" ASC",
        "CreationDate": "2019-01-07 17:32:28",
        "validated": false,
        "QueryBody_Original": "DECLARE  @usrid int = ##UserId##\n\nselect \"Badge Name\", \"Percent\" from\n(\n  select x.m AS \"Badge Name\", (convert(decimal,x.n)\/y.n)*100 AS \"Percent\" from \n  (\n \n    SELECT COUNT(UserID) AS n, Name AS m FROM Badges \n        WHERE TagBased = 0 AND\n        UserID <> @usrid GROUP BY Name\n\n  ) x join\n  (\n  \n    SELECT DISTINCT COUNT(AccountId) AS n FROM Users\n\n  ) y on 1=1 \n) AS Foo\n\nwhere Foo.\"Percent\" < 1 ORDER BY \"Percent\" ASC"
    },
    {
        "QuerySetId": 958118,
        "Title": "Get the date of the nth day of week in a given year and month",
        "Description": null,
        "QueryBody": "DECLARE  @ datetime='2019',@m int=3,@w char(2)='saturday',@p int=2\n\nSELECT dateadd(wk,datediff(d,x,dateadd(m,@m-1,@)-1)\/7,x)+@p*7FROM(SELECT\ncharindex(@w,' tuwethfrsasu')\/2x)x",
        "CreationDate": "2019-01-03 18:40:30",
        "validated": false,
        "QueryBody_Original": "DECLARE  @ datetime='2019',@m int=3,@w char(2)='saturday',@p int=2\n\nSELECT dateadd(wk,datediff(d,x,dateadd(m,@m-1,@)-1)\/7,x)+@p*7FROM(SELECT\ncharindex(@w,' tuwethfrsasu')\/2x)x"
    },
    {
        "QuerySetId": 958539,
        "Title": "tag answerer greater than score",
        "Description": null,
        "QueryBody": "DECLARE  @TagName NVARCHAR(25) = '##TagName##';\nDECLARE @MinimumScore INT = ##MinimumScore##;\n\n\nSELECT\n    ROW_NUMBER() OVER(ORDER BY SUM(a.Score) DESC) AS Pos, \n--    a.OwnerUserId AS [User Link],\n    a.OwnerUserId AS UserId,\n    SUM(a.Score) AS Score\nFROM Posts a, Posts q\nINNER JOIN PostTags qt\n    ON q.Id = qt.PostId\nINNER JOIN Tags t\n    ON t.Id = qt.TagId\nWHERE\n    a.ParentId = q.Id\n    AND a.PostTypeId = 2\n    AND a.CommunityOwnedDate IS NULL\n    AND t.TagName LIKE @TagName\nGROUP BY\n    a.OwnerUserId\n    HAVING SUM(a.Score) >= @MinimumScore",
        "CreationDate": "2019-01-04 21:42:54",
        "validated": false,
        "QueryBody_Original": "DECLARE  @TagName NVARCHAR(25) = '##TagName##';\nDECLARE @MinimumScore INT = ##MinimumScore##;\n\n\nSELECT\n    ROW_NUMBER() OVER(ORDER BY SUM(a.Score) DESC) AS Pos, \n--    a.OwnerUserId AS [User Link],\n    a.OwnerUserId AS UserId,\n    SUM(a.Score) AS Score\nFROM Posts a, Posts q\nINNER JOIN PostTags qt\n    ON q.Id = qt.PostId\nINNER JOIN Tags t\n    ON t.Id = qt.TagId\nWHERE\n    a.ParentId = q.Id\n    AND a.PostTypeId = 2\n    AND a.CommunityOwnedDate IS NULL\n    AND t.TagName LIKE @TagName\nGROUP BY\n    a.OwnerUserId\n    HAVING SUM(a.Score) >= @MinimumScore"
    },
    {
        "QuerySetId": 958633,
        "Title": "City and Language - Brains",
        "Description": null,
        "QueryBody": "SELECT \n    ROW_NUMBER() OVER(ORDER BY Reputation DESC) AS [#], \n    u.Id AS [User Link], \n    u.Reputation,\n    count(p.id)\nFROM\n    Users u\ninner join posts p on p.ownerUserid = u.id\ninner join posttags pt on pt.postid = p.id\ninner join tags t on t.id = pt.tagid\nWHERE\n    upper(u.location) like upper('%' + ##YourLocation:string## + '%')\n    and t.tagname='##tagname##'\ngroup by u.reputation, u.id\nORDER BY\n    Reputation DESC;",
        "CreationDate": "2019-01-04 19:28:26",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 959607,
        "Title": "Find the number of up votes and down votes user received on their question and answer.",
        "Description": null,
        "QueryBody": "SELECT \n    SUM(CASE WHEN VoteTypeId = 2 THEN 1 ELSE 0 END) AS [Up Votes],\n    SUM(CASE WHEN VoteTypeId = 3 THEN 1 ELSE 0 END) AS [Down Votes],\n    (CAST(SUM(CASE WHEN VoteTypeId = 2 THEN 1 ELSE 0 END) AS float) \/ CAST(SUM(CASE WHEN VoteTypeId = 3 THEN 1 ELSE 0 END) AS float)) AS [Up Votes to Down Votes]\nfrom\n    Votes v inner join Posts p on v.PostId=p.Id\nwhere\n    p.OwnerUserId=##UserId##",
        "CreationDate": "2019-01-07 14:15:26",
        "validated": false,
        "QueryBody_Original": "SELECT \n    SUM(CASE WHEN VoteTypeId = 2 THEN 1 ELSE 0 END) AS [Up Votes],\n    SUM(CASE WHEN VoteTypeId = 3 THEN 1 ELSE 0 END) AS [Down Votes],\n    (CAST(SUM(CASE WHEN VoteTypeId = 2 THEN 1 ELSE 0 END) AS float) \/ CAST(SUM(CASE WHEN VoteTypeId = 3 THEN 1 ELSE 0 END) AS float)) AS [Up Votes to Down Votes]\nfrom\n    Votes v inner join Posts p on v.PostId=p.Id\nwhere\n    p.OwnerUserId=##UserId##"
    },
    {
        "QuerySetId": 959847,
        "Title": "Tag-info edits by a given user",
        "Description": null,
        "QueryBody": "SELECT  concat(\n          'site:\/\/tags\/',\n          t.tagname,\n          '\/info|', \n          t.tagname, \n          ' ',  \n          case when p.posttypeid = 4 then 'excerpt' else 'wiki' end\n          ) [Tag Link]\n     , p.body, h.comment, h.CreationDate\nFROM PostHistory h \nJOIN Posts p ON h.PostId=p.Id\ninner join tags t on (t.wikipostid = p.id or t.excerptpostid = p.id)\nWHERE (p.PostTypeId in (4,5)) \nAND (h.PostHistoryTypeId in (2,5)) \nAND (h.UserId=##UserId##)\nORDER BY h.Id DESC",
        "CreationDate": "2019-01-08 01:52:01",
        "validated": false,
        "QueryBody_Original": "SELECT  concat(\n          'site:\/\/tags\/',\n          t.tagname,\n          '\/info|', \n          t.tagname, \n          ' ',  \n          case when p.posttypeid = 4 then 'excerpt' else 'wiki' end\n          ) [Tag Link]\n     , p.body, h.comment, h.CreationDate\nFROM PostHistory h \nJOIN Posts p ON h.PostId=p.Id\ninner join tags t on (t.wikipostid = p.id or t.excerptpostid = p.id)\nWHERE (p.PostTypeId in (4,5)) \nAND (h.PostHistoryTypeId in (2,5)) \nAND (h.UserId=##UserId##)\nORDER BY h.Id DESC"
    },
    {
        "QuerySetId": 960269,
        "Title": "Questions with best answer created within 3 month range",
        "Description": null,
        "QueryBody": "DECLARE  @From_Date DATETIME = convert(DATETIME, '##StartDate?2013\/01\/01##')\nDECLARE @To_Date DATETIME = dateadd(mm, 3, @From_Date)\n\nPRINT 'from ' + format(@From_Date, 'D') + ' to ' + format(@To_Date, 'D')\n\nSELECT TOP 40 Posts.id AS [Post Link],\n\tPosts.CreationDate,\n\tPosts.Score AS [Question Score],\n\tmax(Answer.Score) AS [max Answer Score],\n\tPosts.ViewCount,\n\tPosts.FavoriteCount\nFROM Posts\nINNER JOIN users\n\tON Posts.OwnerUserId = users.id\nLEFT JOIN Posts AS Answer\n\tON Answer.parentid = Posts.id\n\t\tAND Answer.posttypeid = 2\nWHERE Posts.ClosedDate IS NULL\n\tAND Posts.posttypeid = 1\n    AND Posts.Tags = 'Python'\n\tAND Posts.CreationDate BETWEEN @From_Date\n\t\tAND @To_Date\nGROUP BY Posts.Id,\n\tPosts.CreationDate,\n\tPosts.Score,\n\tPosts.ViewCount,\n\tPosts.FavoriteCount\nORDER BY max(Answer.Score)  DESC",
        "CreationDate": "2019-03-06 02:34:24",
        "validated": false,
        "QueryBody_Original": "DECLARE  @From_Date DATETIME = convert(DATETIME, '##StartDate?2013\/01\/01##')\nDECLARE @To_Date DATETIME = dateadd(mm, 3, @From_Date)\n\nPRINT 'from ' + format(@From_Date, 'D') + ' to ' + format(@To_Date, 'D')\n\nSELECT TOP 40 Posts.id AS [Post Link],\n\tPosts.CreationDate,\n\tPosts.Score AS [Question Score],\n\tmax(Answer.Score) AS [max Answer Score],\n\tPosts.ViewCount,\n\tPosts.FavoriteCount\nFROM Posts\nINNER JOIN users\n\tON Posts.OwnerUserId = users.id\nLEFT JOIN Posts AS Answer\n\tON Answer.parentid = Posts.id\n\t\tAND Answer.posttypeid = 2\nWHERE Posts.ClosedDate IS NULL\n\tAND Posts.posttypeid = 1\n    AND Posts.Tags = 'Python'\n\tAND Posts.CreationDate BETWEEN @From_Date\n\t\tAND @To_Date\nGROUP BY Posts.Id,\n\tPosts.CreationDate,\n\tPosts.Score,\n\tPosts.ViewCount,\n\tPosts.FavoriteCount\nORDER BY max(Answer.Score)  DESC"
    },
    {
        "QuerySetId": 960637,
        "Title": "Top 10 answers for year-in-review",
        "Description": null,
        "QueryBody": "SELECT  top ##n?10##\n       Id as [Post Link], \n       Score\nfrom Posts p\nwhere year(CreationDate) = ##year?2018##\n      and p.PostTypeId = 2\norder by Score desc",
        "CreationDate": "2019-01-10 01:20:19",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 961740,
        "Title": "How many consecutive descending numbers in my number?",
        "Description": null,
        "QueryBody": "DECLARE  @ varchar(max) = '2019';\n       \nWITH C as\n(\n  SELECT\n\tleft(@,row_number()over(order by 1\/0))+0t,\n\t@+null z,\n\t0i\n  FROM\n    spt_values\n  UNION ALL\n  SELECT\n    t-1,\n\tconcat(z,t),\n\ti+1\n  FROM C\n  WHERE i<9\n)\nSELECT max(i)\nFROM C\nWHERE z=@",
        "CreationDate": "2019-01-14 13:59:26",
        "validated": false,
        "QueryBody_Original": "DECLARE  @ varchar(max) = '2019';\n       \nWITH C as\n(\n  SELECT\n\tleft(@,row_number()over(order by 1\/0))+0t,\n\t@+null z,\n\t0i\n  FROM\n    spt_values\n  UNION ALL\n  SELECT\n    t-1,\n\tconcat(z,t),\n\ti+1\n  FROM C\n  WHERE i<9\n)\nSELECT max(i)\nFROM C\nWHERE z=@"
    },
    {
        "QuerySetId": 962775,
        "Title": "User with highest amount of offered bounties",
        "Description": null,
        "QueryBody": "SELECT \n  TOP(##num##)\n  Users.Id [User Link],\n  Users.DisplayName,\n  Users.Reputation,\n  (SELECT SUM(BountyAmount) FROM Votes WHERE Votes.UserId = Users.Id) as TotalBountiesAwarded,\n  url = 'site:\/\/users\/' + CAST(Users.Id AS varchar) + '?tab=bounties'\nFROM Users\nWHERE\n  (SELECT SUM(BountyAmount) FROM Votes WHERE Votes.UserId = Users.Id) > 0 -- ensure a bounty has been awarded\n  -- exclude Community and sin binned users\n  -- minimum amount here to qualify for this?\n  AND Users.Reputation > ##min## \nORDER BY \n  TotalBountiesAwarded DESC",
        "CreationDate": "2020-04-22 03:28:42",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 962946,
        "Title": "User with highest amount of offered bounties on questions by others",
        "Description": null,
        "QueryBody": "SELECT \n  TOP(##num?100##)\n  Users.Id [User Link],\n  Users.DisplayName,\n  Users.Reputation,\n  (SELECT SUM(BountyAmount) FROM Votes INNER JOIN Posts ON Votes.PostId=Posts.Id WHERE (Votes.UserId = Users.Id) AND (Votes.UserId<>Posts.OwnerUserId)) as TotalBountiesOthers,  \n  (SELECT SUM(BountyAmount) FROM Votes WHERE Votes.UserId = Users.Id) as TotalBountiesAwarded,\n  url = 'site:\/\/users\/' + CAST(Users.Id AS varchar) + '?tab=bounties'\nFROM Users\nWHERE Users.Reputation > ##min?50##\nORDER BY\n  TotalBountiesOthers DESC",
        "CreationDate": "2019-01-14 14:14:18",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 967346,
        "Title": "Frontend frameworks questions per week",
        "Description": null,
        "QueryBody": "SELECT \n    TagName,\n    MIN(Posts.CreationDate) 'start',\n    COUNT(*) \/ 7.0 as 'weeklyDayAverage'\nFROM\n    Tags\n    INNER JOIN PostTags ON PostTags.TagId = Tags.id\n    INNER JOIN Posts ON Posts.Id = PostTags.PostId\nWHERE\n    Tags.TagName in ('reactjs', 'angular', 'vue.js')\n    and year(Posts.CreationDate) = 2018\nGROUP BY\n    TagName,\n    DATEPART(week, Posts.CreationDate),\n    DATEPART(year, Posts.CreationDate)\nORDER BY\n    MIN(Posts.CreationDate)",
        "CreationDate": "2019-01-17 02:01:13",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 967437,
        "Title": "Posts by (now) deleted users ",
        "Description": null,
        "QueryBody": "SELECT  Top(##num##)\n  Id AS [Post Link], Title, Score, CreationDate OwnerDisplayName\nFROM Posts\nWHERE OwnerUserId IS NULL\nORDER BY CreationDate",
        "CreationDate": "2019-01-17 04:42:44",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 968116,
        "Title": "All users having specific badge",
        "Description": null,
        "QueryBody": "SELECT \n    ROW_NUMBER() OVER(ORDER BY Badges.Date ASC) AS [#],\n    Users.Id AS [User Link],\n    Reputation\nFROM\n    Users, Badges\nWHERE Users.Id = Badges.UserId\n  AND Badges.Class = ##BadgeClass##\n  AND Badges.TagBased = 1\n  AND LOWER(Badges.name) = LOWER('##TagName##')\nORDER BY Badges.Date ASC;",
        "CreationDate": "2019-01-18 19:26:56",
        "validated": false,
        "QueryBody_Original": "SELECT \n    ROW_NUMBER() OVER(ORDER BY Badges.Date ASC) AS [#],\n    Users.Id AS [User Link],\n    Reputation\nFROM\n    Users, Badges\nWHERE Users.Id = Badges.UserId\n  AND Badges.Class = ##BadgeClass##\n  AND Badges.TagBased = 1\n  AND LOWER(Badges.name) = LOWER('##TagName##')\nORDER BY Badges.Date ASC;"
    },
    {
        "QuerySetId": 969144,
        "Title": "Sasha Chernykh all data download",
        "Description": null,
        "QueryBody": "DECLARE  @UserId int = 199934\n\nSELECT Posts.Body\nFROM Posts\nWHERE Posts.OwnerUserId = @UserId",
        "CreationDate": "2019-01-21 21:11:28",
        "validated": false,
        "QueryBody_Original": "DECLARE  @UserId int = 199934\n\nSELECT Posts.Body\nFROM Posts\nWHERE Posts.OwnerUserId = @UserId"
    },
    {
        "QuerySetId": 969932,
        "Title": "Most recent comments on questions in a given tag",
        "Description": null,
        "QueryBody": "SELECT  TOP ##num?500##\n  c.userId AS [User Link], c.CreationDate, c.Id AS [Comment Link], c.PostId AS [Post Link], c.text\nFROM (Comments c JOIN Posts p ON c.PostId=p.Id) \nWHERE (p.PostTypeId=1) and (p.Tags Like '%<##tagName?gn.general-topology##>%') \nORDER BY CreationDate DESC",
        "CreationDate": "2019-01-23 16:50:25",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 969934,
        "Title": "Most recent comments on answers in a given tag",
        "Description": null,
        "QueryBody": "SELECT  TOP ##num?500##\n  c.userId AS [User Link], c.CreationDate, c.Id AS [Comment Link], c.PostId AS [Post Link], c.text\nFROM Comments c JOIN Posts p ON c.PostId=p.Id JOIN Posts q ON p.ParentId=q.Id\nWHERE (p.PostTypeId=2) and (q.Tags Like '%<##tagName?gn.general-topology##>%')\nORDER BY CreationDate DESC",
        "CreationDate": "2019-01-23 16:53:34",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 970136,
        "Title": "Percentage of closed question per tag (among the posts that were not deleted)",
        "Description": null,
        "QueryBody": "WITH  closed_cte as \n(SELECT t.TagName AS tag, COUNT(q.Id) AS totalcount, COUNT(q.ClosedDate) AS closedcount,\n  ROUND(COUNT(q.ClosedDate)*100.0\/COUNT(q.Id),2) AS percentage\nFROM Posts q\n  INNER JOIN PostTags pt ON q.Id = pt.PostId\n  INNER JOIN Tags t ON pt.TagId = t.Id\nWHERE q.PostTypeId=1\nGROUP BY t.TagName\n)\n\nSELECT tag, totalcount, closedcount, percentage\nFROM closed_cte\nWHERE totalcount>=##num?5000##\nORDER BY percentage DESC",
        "CreationDate": "2019-01-24 01:55:57",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 970420,
        "Title": "intel tags: all posts from current time period",
        "Description": null,
        "QueryBody": "DECLARE  @timeperiod varchar(50);\n\nWITH IntelTags AS (\n    SELECT Id, TagName, Count\n    FROM Tags\n    WHERE Tags.TagName LIKE 'intel-%' OR Tags.TagName = 'intel'\n  ),\n  IntelPostIds AS (\n    SELECT DISTINCT PostTags.PostId\n    FROM PostTags\n    INNER JOIN IntelTags\n      ON IntelTags.Id = PostTags.TagId\n  )\n  \nSELECT Id as [Post Link], Body, Tags, CreationDate, Score, ViewCount\nFROM Posts\nINNER JOIN IntelPostIds\n  ON IntelPostIds.PostId = Posts.Id \nWHERE\n  YEAR(CreationDate) = YEAR(getdate()) AND\n  MONTH(CreationDate) <= 3 * ((MONTH(getdate()) + 2) \/ 3) AND\n  3 * ((MONTH(getdate()) + 2) \/ 3 - 1) + 1 <= MONTH(CreationDate)\n  ORDER BY ViewCount DESC;",
        "CreationDate": "2019-01-24 17:31:00",
        "validated": false,
        "QueryBody_Original": "DECLARE  @timeperiod varchar(50);\n\nWITH IntelTags AS (\n    SELECT Id, TagName, Count\n    FROM Tags\n    WHERE Tags.TagName LIKE 'intel-%' OR Tags.TagName = 'intel'\n  ),\n  IntelPostIds AS (\n    SELECT DISTINCT PostTags.PostId\n    FROM PostTags\n    INNER JOIN IntelTags\n      ON IntelTags.Id = PostTags.TagId\n  )\n  \nSELECT Id as [Post Link], Body, Tags, CreationDate, Score, ViewCount\nFROM Posts\nINNER JOIN IntelPostIds\n  ON IntelPostIds.PostId = Posts.Id \nWHERE\n  YEAR(CreationDate) = YEAR(getdate()) AND\n  MONTH(CreationDate) <= 3 * ((MONTH(getdate()) + 2) \/ 3) AND\n  3 * ((MONTH(getdate()) + 2) \/ 3 - 1) + 1 <= MONTH(CreationDate)\n  ORDER BY ViewCount DESC;"
    },
    {
        "QuerySetId": 970964,
        "Title": "Get the number of edits that each badge level contributes",
        "Description": null,
        "QueryBody": "SELECT  COUNT(*) FROM PostHistory;\n*\/\n\n\n\/* Get total count of edits only considering 4,5,6 *\/\n\nSELECT COUNT(*) FROM PostHistory WHERE \nPostHistoryTypeId in (4,5,6);",
        "CreationDate": "2019-01-25 15:25:49",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 971006,
        "Title": "Get the Edits from Different Badge Types",
        "Description": null,
        "QueryBody": "SELECT  COUNT(*) FROM PostHistory;\n*\/\n\n\n\/* Get total count of edits only considering 4,5,6: 31255138 *\/\n\/*\nSELECT COUNT(*) FROM PostHistory WHERE \nPostHistoryTypeId in (4,5,6);\n*\/\n\n\/* Get total number of edits attributble to the different \nbadge types only considering edits in 4,5 and 6... NBNB! You\nMUST post process these numbers as the gold and silver users\nwould have obtained the badges lower than their current badge and\nso posts from these users are double counted. Subtract these values from\nthe lower groups to get the true counts*\/\nSELECT COUNT(p.Id), b.Name FROM PostHistory as p\nINNER JOIN Badges as b ON (\n   p.UserId = b.UserId AND\n   b.Name in ('Editor', 'Strunk & White', 'Copy Editor') AND\n   p.PostHistoryTypeId in (4,5,6)\n) GROUP BY b.Name;",
        "CreationDate": "2019-01-25 15:31:24",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 971056,
        "Title": "List of Most reputed users in a given location - Case Sensitive",
        "Description": "Gets a list of most reputed users from a given location.",
        "QueryBody": "SELECT \n    Top ##Top##\n    ROW_NUMBER() OVER(ORDER BY Reputation DESC) AS [#], \n    Id AS [User Link], \n    Reputation,\n    Location,\n    CreationDate,\n    LastAccessDate,\n    UpVotes,\n    DownVotes\nFROM Users\nWHERE location like '%##Location##%'\nORDER BY Reputation DESC",
        "CreationDate": "2020-02-19 12:11:26",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 971838,
        "Title": "Compare Size and Growth Trends for StackOverflow Tags",
        "Description": null,
        "QueryBody": "DECLARE  @TimeAgo datetime = DATEADD(month, -24, GETDATE())\n\nSELECT tagname, COUNT(*) AS Posts\nFROM Tags\n    INNER JOIN PostTags ON PostTags.TagId = Tags.id\n    INNER JOIN Posts ON Posts.ParentId = PostTags.PostId\nwhere posts.creationdate > @TimeAgo\ngroup by tagname\norder by Posts Desc;",
        "CreationDate": "2019-01-27 22:33:13",
        "validated": false,
        "QueryBody_Original": "DECLARE  @TimeAgo datetime = DATEADD(month, -24, GETDATE())\n\nSELECT tagname, COUNT(*) AS Posts\nFROM Tags\n    INNER JOIN PostTags ON PostTags.TagId = Tags.id\n    INNER JOIN Posts ON Posts.ParentId = PostTags.PostId\nwhere posts.creationdate > @TimeAgo\ngroup by tagname\norder by Posts Desc;"
    },
    {
        "QuerySetId": 972836,
        "Title": "Time to first Action for each question",
        "Description": null,
        "QueryBody": "SELECT  * FROM Posts where Tags like '%bigcommerce%'\n--AND CreationDate between '2014-11-01' and '2014-11-15'\n\n\nSELECT * FROM Users where Id = 6801657",
        "CreationDate": "2019-01-29 09:06:49",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 972954,
        "Title": "Posts containing string1 but not string2",
        "Description": null,
        "QueryBody": "SELECT  TOP ##num##\n  Id As [Post Link], OwnerUserId AS [User Link], CreationDate, LastActivityDate,  Score, ViewCount, Body\n  FROM Posts WHERE (Body LIKE '%##string1##%') \n    AND NOT(Body LIKE '%##string2##%')     \n  ORDER BY CreationDate DESC",
        "CreationDate": "2019-01-29 10:16:31",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 974497,
        "Title": "User, Badge, Count, Where Badge = INPUT",
        "Description": null,
        "QueryBody": "SELECT  TOP 1000  u.DisplayName, b.Name, Count(*) as awarded\nFrom Users u INNER JOIN Badges b on u.ID = b.UserID\nWhere b.Name = ##BadgeName:String##\n-- BadgeName:Name of the badge \"Case Sensitive\"\nGroup By u.DisplayName, b.Name\nOrder By Awarded desc",
        "CreationDate": "2019-02-01 00:25:17",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 974510,
        "Title": "Number of total users in the database",
        "Description": null,
        "QueryBody": "SELECT  Users.DisplayName AS 'User', Posts.PostTypeID from Users\ninner join Posts on Users.ID = Posts.OwnerUserID\ninner join PostTypes on Posts.PostTypeID = PostTypes.ID\nWhere Users.DisplayName = 'Mat Mannion'\nAnd PostTypes.Name = 'Question'\n\n\nSELECT * from PostTypes \nwhere Name = 'Question'",
        "CreationDate": "2019-01-31 21:47:00",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 976394,
        "Title": "Most gold, silver, bronze badges",
        "Description": null,
        "QueryBody": "SELECT  TOP(##num?200##)\n  RANK() OVER(\n            ORDER BY \n            sum(case when class = 1 then 1 else 0 end) DESC,\n            sum(case when class = 2 then 1 else 0 end) DESC,\n            sum(case when class = 3 then 1 else 0 end) DESC,\n            count(Id) DESC\n          ),\n  UserId AS [User Link],\n  sum(case when class = 1 then 1 else 0 end) AS gold,\n  sum(case when class = 2 then 1 else 0 end) AS silver,\n  sum(case when class = 3 then 1 else 0 end) AS bronze,\n  count(Id) AS total\nFROM Badges\nGROUP BY UserId\nORDER BY gold DESC, silver DESC, bronze DESC, total DESC",
        "CreationDate": "2019-07-30 20:58:11",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 977999,
        "Title": "Recent comments on answers to my questions",
        "Description": null,
        "QueryBody": "SELECT  TOP ##num?100##\n  c.Id AS [Comment Link], c.UserId AS [User Link], c.CreationDate, a.Id as [Post Link], c.Text\nFROM (Posts q JOIN Posts a ON q.Id=a.ParentId) JOIN Comments c ON c.PostId=a.Id\nWHERE q.OwnerUserId = ##userid##\nORDER BY c.CreationDate DESC",
        "CreationDate": "2019-02-08 14:44:09",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 980159,
        "Title": "Distribution of users' up\/down cast votes",
        "Description": null,
        "QueryBody": "WITH  total cast votes > 100\n\nSELECT\nId as [User Link],\nUpVotes+DownVotes as TotalVotes,\nUpVotes,\nDownVotes,\nround ( 100*UpVotes \/ ( UpVotes + DownVotes + 0.1 ), 0) AS 'UpVotes [%]'\nFROM Users U\n\nWhere UpVotes + DownVotes > 100\n \nORDER BY\n  'UpVotes [%]' ASC",
        "CreationDate": "2019-03-02 20:22:33",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 981332,
        "Title": "Question statistics for a single user",
        "Description": null,
        "QueryBody": "SELECT  'Questions', COUNT(*)\n  FROM Posts\n  WHERE OwnerUserId = ##UserId:int##\n    AND PostTypeId = 1 -- Questions\nUNION ALL\nSELECT 'Questions without accepted answer', COUNT(*)\n  FROM Posts\n  WHERE OwnerUserId = ##UserId:int##\n    AND PostTypeId = 1 -- Questions\n    AND AcceptedAnswerId IS NULL\nUNION ALL\nSELECT 'Unanswered questions', COUNT(*)\n  FROM Posts\n  WHERE OwnerUserId = ##UserId:int##\n    AND PostTypeId = 1 -- Questions\n    AND AnswerCount = 0\n\nUNION ALL\nSELECT 'Resolved questions', COUNT(*)\n  FROM Posts\n  WHERE OwnerUserId = ##UserId:int##\n    AND PostTypeId = 1 -- Questions\n    AND AcceptedAnswerId > 0",
        "CreationDate": "2019-02-12 13:41:47",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 983514,
        "Title": "Unanswered questions with answers in comments (per tag)",
        "Description": "Returns a list of questions with no answers (not closed and not locked), in which OP uses 'keywords' in comments like 'solved', 'worked' and 'ended up'. Some false positives are discarded as well.\r\n\r\nIf query runs out of memory, go back to revision 1235856 (from March 5th, 2019) and it should work as a simplified version (query with less keywords, not case insensitive, without removal of false positives). ",
        "QueryBody": "DECLARE  @tag nvarchar(35) = ##tag:string##;\n \n\nSELECT p.Id AS [Post Link]\nFROM Posts p\nINNER JOIN Comments c ON c.PostId = p.Id\nINNER JOIN PostTags pt ON pt.PostId = p.Id\nINNER JOIN Tags t ON t.Id = pt.TagId\nWHERE p.PostTypeId = 1 -- questions\n      AND p.AnswerCount = 0 -- unanswered questions.\n      AND p.ClosedDate IS NULL -- not closed.\n      AND NOT EXISTS -- not locked\n       (\n        SELECT *\n        FROM PostHistory ph\n        WHERE ph.PostId = p.Id\n        AND ph.PostHistoryTypeId = 14\n       ) -- not locked.\n      AND p.OwnerUserId = c.UserId -- comments from OP.\n      AND (c.Text LIKE '%solved%' -- keyword 1\n           OR c.Text LIKE '%worked%') -- keyword 2\n      AND t.TagName IN (@tag) -- questions with specific tags.\n      -- tag:Tag name:\nORDER BY p.CreationDate ASC;",
        "CreationDate": "2019-02-15 20:19:06",
        "validated": false,
        "QueryBody_Original": "DECLARE  @tag nvarchar(35) = ##tag:string##;\n \n\nSELECT p.Id AS [Post Link]\nFROM Posts p\nINNER JOIN Comments c ON c.PostId = p.Id\nINNER JOIN PostTags pt ON pt.PostId = p.Id\nINNER JOIN Tags t ON t.Id = pt.TagId\nWHERE p.PostTypeId = 1 -- questions\n      AND p.AnswerCount = 0 -- unanswered questions.\n      AND p.ClosedDate IS NULL -- not closed.\n      AND NOT EXISTS -- not locked\n       (\n        SELECT *\n        FROM PostHistory ph\n        WHERE ph.PostId = p.Id\n        AND ph.PostHistoryTypeId = 14\n       ) -- not locked.\n      AND p.OwnerUserId = c.UserId -- comments from OP.\n      AND (c.Text LIKE '%solved%' -- keyword 1\n           OR c.Text LIKE '%worked%') -- keyword 2\n      AND t.TagName IN (@tag) -- questions with specific tags.\n      -- tag:Tag name:\nORDER BY p.CreationDate ASC;"
    },
    {
        "QuerySetId": 984306,
        "Title": "Count duplicate questions grouped by tag",
        "Description": null,
        "QueryBody": "WITH  \nTaggedQuestions AS (\n  SELECT PostTags.* from PostTags \n  INNER JOIN Tags ON Tags.Id = PostTags.TagId\n  WHERE Tags.TagName = ##Tag:string##\n),\nRelatedQuestions AS (\n  SELECT PostTags.* FROM PostTags\n  INNER JOIN TaggedQuestions ON PostTags.PostId = TaggedQuestions.PostId\n)\n\nSELECT * FROM (\nSELECT t.TagName,\n(\nSELECT Round(COUNT(*)*100.0\/t.Count, 2)\n  FROM PostLinks pl\n  INNER JOIN RelatedQuestions rq ON rq.PostId = pl.PostId\n  WHERE pl.LinkTypeId = 3 AND rq.TagId = t.Id\n) percentage\nFROM Tags t \n) a\nWHERE percentage > ##MinimumPercentage:float?2.0##\nORDER BY percentage DESC",
        "CreationDate": "2019-02-14 20:56:35",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 985262,
        "Title": "Latest Java questions and answers",
        "Description": null,
        "QueryBody": "SELECT  Id from Posts where Tags like '%<java>%' and Score>0 and AcceptedAnswerId in\n--(SELECT Id from Posts where Body like '%<code>%' and PostTypeId=2 and Score>0)\n\n--p1.Id, p1.Title, p2.Body\nSELECT  p1.Id, p1.Title, p2.Body, p1.Tags from Posts as p1, Posts as p2 \nwhere p1.AcceptedAnswerId=p2.Id and\np1.Tags like '%<java>%' and p1.Score>0 and \np2.Score>0 and p2.PostTypeId=2 and p2.Body like '%<code>%'\n--order by p1.Id asc",
        "CreationDate": "2020-02-08 15:51:56",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 993921,
        "Title": "Number of posts per year scoring more or less then a threshold",
        "Description": "Input: threshold; post type.",
        "QueryBody": "DECLARE  @ThresholdScore int = ##ThresholdScore##;\nDECLARE @PostTypeId int = ##PostTypeId##;\n\nWITH sqx_cte (q_year, more_less, q_count)\nAS (\n  SELECT\n      YEAR(p.CreationDate) AS q_year\n    , CASE WHEN p.Score >= @ThresholdScore THEN 'M' ELSE 'L' END more_less\n    , COUNT(1) AS q_count\n  FROM\n      Posts p\n  WHERE\n      p.PostTypeId = @PostTypeId\n  GROUP BY\n      YEAR(p.CreationDate)\n    , CASE WHEN p.Score >= @ThresholdScore THEN 'M' ELSE 'L' END\n)\nSELECT\n    *\nFROM\n    sqx_cte\nORDER BY\n    q_year\n  , more_less",
        "CreationDate": "2019-03-11 14:30:00",
        "validated": false,
        "QueryBody_Original": "DECLARE  @ThresholdScore int = ##ThresholdScore##;\nDECLARE @PostTypeId int = ##PostTypeId##;\n\nWITH sqx_cte (q_year, more_less, q_count)\nAS (\n  SELECT\n      YEAR(p.CreationDate) AS q_year\n    , CASE WHEN p.Score >= @ThresholdScore THEN 'M' ELSE 'L' END more_less\n    , COUNT(1) AS q_count\n  FROM\n      Posts p\n  WHERE\n      p.PostTypeId = @PostTypeId\n  GROUP BY\n      YEAR(p.CreationDate)\n    , CASE WHEN p.Score >= @ThresholdScore THEN 'M' ELSE 'L' END\n)\nSELECT\n    *\nFROM\n    sqx_cte\nORDER BY\n    q_year\n  , more_less"
    },
    {
        "QuerySetId": 994945,
        "Title": "RLA-RegDiscontinuity: all users with 5 downvotes in a week",
        "Description": null,
        "QueryBody": "WITH  exactly 5 downvotes \n*\/ \nselect u.id, u.displayname, u.reputation, v.weekno, count(v.id) as downvotes, \n min(v.creationdate) as fromdate, max(v.creationdate) as todate\nfrom users u, \nposts p, \n(select id, datediff(week, '2019-01-01', creationdate) as weekno, \ncreationdate, postid\nfrom votes \nwhere creationdate >= '2019-01-01'\nand votetypeid = 3 --downvotes only\n) v\n\nwhere u.id = p.owneruserid \nand p.id = v.postid\n--and v.votetypeid = 3 --downvotes only\nand p.owneruserid = 2901002 --specific user only\nand p.posttypeid = 2 --answers only\ngroup by u.id, u.displayname, u.reputation, v.weekno\n--having count(v.id) = 5\norder by u.id, u.reputation, v.weekno\n;",
        "CreationDate": "2019-03-02 02:35:56",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 995111,
        "Title": "Top downvoters with downvote percentage",
        "Description": null,
        "QueryBody": "DECLARE  @MinVotes int = ##MinVotes##\nDECLARE @MaxReputation int = ##MaxReputation##\n\nSELECT\n    ROW_NUMBER() OVER(ORDER BY u.Upvotes DESC) AS rnum\n  , u.Id\n  , u.Reputation\n  , u.CreationDate\n  , u.DisplayName\n  , u.LastAccessDate\n  , u.UpVotes\n  , u.Downvotes\n  , CONVERT(\n        decimal(10,2)\n      , CONVERT(\n            decimal(10,2)\n          , u.Downvotes\n        ) \/\n        CONVERT(\n            decimal(10,2)\n          , u.Upvotes+u.Downvotes\n        ) * 100\n    ) AS pct_d\nFROM\n    Users u\nWHERE\n    u.Downvotes >= @MinVotes\nAND u.Reputation <= @MaxReputation\nORDER BY\n    u.Upvotes DESC",
        "CreationDate": "2020-03-06 18:07:40",
        "validated": false,
        "QueryBody_Original": "DECLARE  @MinVotes int = ##MinVotes##\nDECLARE @MaxReputation int = ##MaxReputation##\n\nSELECT\n    ROW_NUMBER() OVER(ORDER BY u.Upvotes DESC) AS rnum\n  , u.Id\n  , u.Reputation\n  , u.CreationDate\n  , u.DisplayName\n  , u.LastAccessDate\n  , u.UpVotes\n  , u.Downvotes\n  , CONVERT(\n        decimal(10,2)\n      , CONVERT(\n            decimal(10,2)\n          , u.Downvotes\n        ) \/\n        CONVERT(\n            decimal(10,2)\n          , u.Upvotes+u.Downvotes\n        ) * 100\n    ) AS pct_d\nFROM\n    Users u\nWHERE\n    u.Downvotes >= @MinVotes\nAND u.Reputation <= @MaxReputation\nORDER BY\n    u.Upvotes DESC"
    },
    {
        "QuerySetId": 996407,
        "Title": "List users who favorited a question (and their info)",
        "Description": "Default question:  \r\n\"How can I can I setup auto-login, AND make it public knowledge that I do stuff like that with my logins?\"  (https:\/\/superuser.com\/q\/44106)",
        "QueryBody": "SELECT  \n  userid As [User Link], \n  format(b.creationdate,'MMM d, yyyy') As [\ud83d\udcc5 \u2b50], \n  format(lastaccessdate,'MMM d, yyyy') as [\ud83d\udcc5 \ud83c\udfc3],\n  reputation as [\ud83c\udfc6],\n  location as [\ud83c\udf0e  \ud83d\udccc],\n  websiteurl as [\ud83c\udfe0  \ud83d\udcbb] \nFROM votes b left join users u on userid=u.id\nWHERE b.votetypeid = 5 \n  AND postid = ##PostID?15617512##\n  ORDER BY isnull(len(location),0)+isnull(len(websiteurl),0) DESC, REPUTATION\n\n\n\n-- PostID: Enter a question's Post ID:\n--                                    ...sry, needed to extend my break \ud83d\ude1c",
        "CreationDate": "2019-10-13 17:07:35",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 997123,
        "Title": "All users with selected rep",
        "Description": null,
        "QueryBody": "SELECT  * FROM Users\nWHERE Reputation >= ##Reputation:Int##\nORDER BY Reputation desc;",
        "CreationDate": "2019-03-05 01:16:05",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 1000318,
        "Title": "Answers and Views by User and Tag Between Two Dates",
        "Description": null,
        "QueryBody": "SELECT  COUNT(Answers.Id) AS [Answer Count], \nSUM(Answers.Score) AS [Total Score],\nSUM(Questions.ViewCount) AS Views,\nMIN(Answers.CreationDate) AS OldestAnswer,\nMAX(Answers.CreationDate) AS NewestAnswer\n\nFROM Posts as Answers, Posts as Questions\n\nWHERE Questions.Id = Answers.ParentId\nAND Answers.OwnerUserId = ##UserId## \nAND Questions.Tags like ##Tag:string?%amazon-web-services%##\nAND Answers.CreationDate >= ##StartDate:string?2019-01-01##\nAND Answers.CreationDate <= ##EndDate:string?2020-01-01##",
        "CreationDate": "2019-12-17 21:29:15",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 1000899,
        "Title": "Distribution of users by their question\/answer ratio",
        "Description": null,
        "QueryBody": "WITH  Raw AS (\n  SELECT\n    OwnerUserId AS UserId,\n    COUNT(CASE WHEN PostTypeId = 2 THEN 1 ELSE NULL END) AS Answers,\n    COUNT(*) AS Posts\n  FROM Posts\n  WHERE PostTypeId IN (1,2)\n  GROUP BY OwnerUserId\n),\nRaw2 AS (\n  SELECT\n    UserId,\n    CASE\n      WHEN Answers < Posts THEN\n        CAST(1.0 * ##Segments:int?10## * Answers \/ Posts AS INTEGER)\n      ELSE\n        ##Segments## - 1\n    END AS AnswerRatio\n  FROM Raw\n  WHERE Posts > ##MinPosts:int?10##\n)\nSELECT\n  AnswerRatio,\n  COUNT(*) AS Count\nFROM Raw2\nGROUP BY AnswerRatio\nORDER BY AnswerRatio",
        "CreationDate": "2019-03-07 22:57:08",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 1002402,
        "Title": "Answers to subsequently closed questions",
        "Description": null,
        "QueryBody": "WITH  InterestingAnswers AS (\n  SELECT a.Id AS AnswerId, a.ParentId AS QuestionId\n  FROM Posts AS a\n  WHERE PostTypeId = 2 -- Answers only\n    AND a.OwnerUserId = ##userId:int##\n    AND (SELECT q.ClosedDate FROM Posts AS q WHERE q.Id = a.ParentId) > a.CreationDate\n)\n\nSELECT Count(QuestionId) FROM InterestingAnswers;",
        "CreationDate": "2019-03-10 18:07:40",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 1004934,
        "Title": "The (Easy) Road to Code",
        "Description": null,
        "QueryBody": "DECLARE  @n INT=6,@ INT=-1\n\nSELECT replicate('\u00a0',@n-y*@)+z+iif(y%2=0,z,'\u00a0\u00a0')+z \nFROM(SELECT top(@n)row_number()over(order by @)y,'\u00a0'+substring('\\|\/',@+2,1)z\nFROM spt_values)x",
        "CreationDate": "2019-03-14 17:14:26",
        "validated": false,
        "QueryBody_Original": "DECLARE  @n INT=6,@ INT=-1\n\nSELECT replicate('\u00a0',@n-y*@)+z+iif(y%2=0,z,'\u00a0\u00a0')+z \nFROM(SELECT top(@n)row_number()over(order by @)y,'\u00a0'+substring('\\|\/',@+2,1)z\nFROM spt_values)x"
    },
    {
        "QuerySetId": 1009857,
        "Title": "It's a yearly task, alright",
        "Description": null,
        "QueryBody": "DECLARE  @ datetime=33\n\n-1PRINT format(@,'d\\'+left(substring('s\\tn\\dr\\d',day(@)%20*3-2,3)+'t\\h',3)+' MMMM')",
        "CreationDate": "2019-03-19 12:00:56",
        "validated": false,
        "QueryBody_Original": "DECLARE  @ datetime=33\n\n-1PRINT format(@,'d\\'+left(substring('s\\tn\\dr\\d',day(@)%20*3-2,3)+'t\\h',3)+' MMMM')"
    },
    {
        "QuerySetId": 1012198,
        "Title": "Would this string work as string?",
        "Description": null,
        "QueryBody": "DECLARE  @y char='G'\n\n,@ char(91)='';WITH C as(SELECT 7a,'5558587763633333030112255'z,ascii(@y)x\nUNION ALL\nSELECT a+left(z,1)\/3*13+left(z,1)%3-14,stuff(z,1,1,''),(x+14)%26+65FROM\nC WHERE''<z)SELECT\na FROM c",
        "CreationDate": "2019-03-20 22:48:05",
        "validated": false,
        "QueryBody_Original": "DECLARE  @y char='G'\n\n,@ char(91)='';WITH C as(SELECT 7a,'5558587763633333030112255'z,ascii(@y)x\nUNION ALL\nSELECT a+left(z,1)\/3*13+left(z,1)%3-14,stuff(z,1,1,''),(x+14)%26+65FROM\nC WHERE''<z)SELECT\na FROM c"
    },
    {
        "QuerySetId": 1012361,
        "Title": "Make a Bowl of Alphabet Soup",
        "Description": null,
        "QueryBody": "DECLARE  @ char='B'\n,@x char(91)=replicate(replicate('\u00a0',12)+char(13),7);WITH\nC as(SELECT 6a,'5558587763633333030112255'z,ascii(@)x\nUNION ALL\nSELECT a+left(z,1)\/3*13+left(z,1)%3-14,stuff(z,1,1,''),(x+14)%26+65FROM\nC WHERE''<z)SELECT @x=stuff(@x,a,1,char(x))FROM C\nPRINT @x",
        "CreationDate": "2019-03-20 18:18:18",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 1012801,
        "Title": "Getting number of upvotes and downvotes for each tag for a user, along with ratio",
        "Description": "number of upvotes and downvotes i have for each tag, questions and answers combined",
        "QueryBody": "DECLARE  @userid int = ##userid:int##\n\nselect a.tagname as \"Tagname\", a.upvotes  as \"Upvotes\", b.downvotes as \"Downvotes\"\n\nfrom\n\n(SELECT tagname, COUNT(*) as upvotes\nFROM Tags\nJOIN PostTags on posttags.tagid = tags.id\nJOIN Posts on Posts.parentid = posttags.postid or posts.id = posttags.postid\nJOIN Votes on votes.postid = posts.id and votes.votetypeid=2\nwhere posts.owneruserid = @userid\nGROUP BY tagname) as a\n--ORDER BY upvotes desc\n\nJOIN\n\n(SELECT tagname, COUNT(*) as downvotes\nFROM Tags\nJOIN PostTags on posttags.tagid = tags.id\nJOIN Posts on Posts.parentid = posttags.postid or posts.id = posttags.postid\nJOIN Votes on votes.postid = posts.id and votes.votetypeid=3\nwhere posts.owneruserid = @userid\nGROUP BY tagname) as b\n\non a.tagname = b.tagname\n\nORDER BY Upvotes desc;",
        "CreationDate": "2019-03-21 14:18:09",
        "validated": false,
        "QueryBody_Original": "DECLARE  @userid int = ##userid:int##\n\nselect a.tagname as \"Tagname\", a.upvotes  as \"Upvotes\", b.downvotes as \"Downvotes\"\n\nfrom\n\n(SELECT tagname, COUNT(*) as upvotes\nFROM Tags\nJOIN PostTags on posttags.tagid = tags.id\nJOIN Posts on Posts.parentid = posttags.postid or posts.id = posttags.postid\nJOIN Votes on votes.postid = posts.id and votes.votetypeid=2\nwhere posts.owneruserid = @userid\nGROUP BY tagname) as a\n--ORDER BY upvotes desc\n\nJOIN\n\n(SELECT tagname, COUNT(*) as downvotes\nFROM Tags\nJOIN PostTags on posttags.tagid = tags.id\nJOIN Posts on Posts.parentid = posttags.postid or posts.id = posttags.postid\nJOIN Votes on votes.postid = posts.id and votes.votetypeid=3\nwhere posts.owneruserid = @userid\nGROUP BY tagname) as b\n\non a.tagname = b.tagname\n\nORDER BY Upvotes desc;"
    },
    {
        "QuerySetId": 1013069,
        "Title": "Accepted answer percentage over time",
        "Description": "accepted answers, total answers, and their ratio: for each month; tabulated over time",
        "QueryBody": "DECLARE  @UserId int = ##UserId:int?5026##\n\nSELECT\n  Month as 'Month',\n  SUM(A.AC) as 'AC',\n  SUM(B.TOTAL) as 'Total', \n  ROUND(CAST(SUM(A.AC) AS float) \/ SUM(B.TOTAL) * 100, 2)  as 'AC %age'\n  \nFROM\n  (SELECT\n    DATEFROMPARTS(\n      DATEPART(yyyy, q.CreationDate),\n      DATEPART(mm, q.CreationDate),\n    1) AS 'Month',\n    COUNT(*) as 'AC'\n    FROM Posts q\n      JOIN Posts a\n      ON q.AcceptedAnswerId = a.Id\n    WHERE a.OwnerUserId = @UserId\n    GROUP BY DATEFROMPARTS(\n      DATEPART(yyyy, q.CreationDate),\n      DATEPART(mm, q.CreationDate),\n    1)) as A\n\n  JOIN\n\n  (SELECT COUNT(*) as 'TOTAL'\n    FROM Posts\n    WHERE OwnerUserId = @UserId AND PostTypeId = 2) as B\n\n  ON 1=1\n\n  GROUP BY Month\n  ORDER BY 'AC %age' DESC;",
        "CreationDate": "2019-03-22 17:13:16",
        "validated": false,
        "QueryBody_Original": "DECLARE  @UserId int = ##UserId:int?5026##\n\nSELECT\n  Month as 'Month',\n  SUM(A.AC) as 'AC',\n  SUM(B.TOTAL) as 'Total', \n  ROUND(CAST(SUM(A.AC) AS float) \/ SUM(B.TOTAL) * 100, 2)  as 'AC %age'\n  \nFROM\n  (SELECT\n    DATEFROMPARTS(\n      DATEPART(yyyy, q.CreationDate),\n      DATEPART(mm, q.CreationDate),\n    1) AS 'Month',\n    COUNT(*) as 'AC'\n    FROM Posts q\n      JOIN Posts a\n      ON q.AcceptedAnswerId = a.Id\n    WHERE a.OwnerUserId = @UserId\n    GROUP BY DATEFROMPARTS(\n      DATEPART(yyyy, q.CreationDate),\n      DATEPART(mm, q.CreationDate),\n    1)) as A\n\n  JOIN\n\n  (SELECT COUNT(*) as 'TOTAL'\n    FROM Posts\n    WHERE OwnerUserId = @UserId AND PostTypeId = 2) as B\n\n  ON 1=1\n\n  GROUP BY Month\n  ORDER BY 'AC %age' DESC;"
    },
    {
        "QuerySetId": 1013086,
        "Title": "Votes \/ posts ration per month",
        "Description": null,
        "QueryBody": "SELECT  Year = DATEADD(MONTH, DATEDIFF(MONTH, 0, CreationDate), 0), \n  Votes = SUM(CASE WHEN VoteTypeId = 2 THEN 1 ELSE -1 END), \n  Posts = (SELECT COUNT(id) \n           FROM Posts\n           WHERE CreationDate >= Convert(datetime, '2011-07-01' )\n           GROUP BY DATEADD(MONTH, DATEDIFF(MONTH, 0, CreationDate), 0))\nFROM PostFeedback\ngroup by DATEADD(MONTH, DATEDIFF(MONTH, 0, CreationDate), 0)\norder by DATEADD(MONTH, DATEDIFF(MONTH, 0, CreationDate), 0)*\/\n\nSELECT * from Posts;\n\nSELECT * from Votes;",
        "CreationDate": "2019-03-21 23:17:15",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 1013178,
        "Title": "Number of users which asked a second question after their first one was closed",
        "Description": "https:\/\/chat.stackexchange.com\/transcript\/message\/49597785#49597785",
        "QueryBody": "DECLARE  @UserId int = ##userid:int?5026##\n\n-- for each user, select their first two posts\nSELECT TOP 100\n T1.Id, postid  \nFROM \n  Users as T1\n    INNER JOIN \n  (SELECT TOP 500 p.Id as postid\n    FROM Posts p\n    WHERE p.PostTypeId = 1\n    ORDER BY p.CreationDate) as T2\n  ON T1.Id = postid\nORDER BY T1.Id",
        "CreationDate": "2019-03-24 23:01:09",
        "validated": false,
        "QueryBody_Original": "DECLARE  @UserId int = ##userid:int?5026##\n\n-- for each user, select their first two posts\nSELECT TOP 100\n T1.Id, postid  \nFROM \n  Users as T1\n    INNER JOIN \n  (SELECT TOP 500 p.Id as postid\n    FROM Posts p\n    WHERE p.PostTypeId = 1\n    ORDER BY p.CreationDate) as T2\n  ON T1.Id = postid\nORDER BY T1.Id"
    },
    {
        "QuerySetId": 1013246,
        "Title": "Questions removed from HNQ by mods",
        "Description": null,
        "QueryBody": "SELECT  TOP(##num?100##)\n    ph.CreationDate,\n  ph.PostHistoryTypeId,\n  p.Tags AS [Tags],\n  p.Id AS [Post Link],\n  concat('site:\/\/posts\/',\n          p.Id,\n          '\/revisions'\n          ) [Revisions Link]\nFROM PostHistory ph INNER JOIN Posts p\n  ON ph.PostId=p.Id\n  AND ph.PostHistoryTypeId=52\n  AND p.PostTypeId=1\nORDER BY ph.CreationDate DESC",
        "CreationDate": "2019-04-03 22:27:48",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 1013443,
        "Title": "Number of answers by a user in a timeframe",
        "Description": null,
        "QueryBody": "SELECT  Top 10\n  Id as [Post Link],\n  CreationDate\nFROM Posts\nWHERE\n  OwnerUserId = ##UserId:int?4945## AND\n  PostTypeId = 2 AND\n  CreationDate BETWEEN '2018-04-01 00:00:00' AND '2019-04-01 00:00:00'",
        "CreationDate": "2019-03-31 23:44:25",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 1013461,
        "Title": "Question titles from a given list",
        "Description": null,
        "QueryBody": "SELECT  Id, Title\nFROM Posts\nWHERE Id in (##list?2693323,2739982,2620409##)",
        "CreationDate": "2019-03-22 18:27:04",
        "validated": false,
        "QueryBody_Original": "SELECT  Id, Title\nFROM Posts\nWHERE Id in (##list?2693323,2739982,2620409##)"
    },
    {
        "QuerySetId": 1013692,
        "Title": "Questions (id, title) of a given user",
        "Description": null,
        "QueryBody": "SELECT \n  Id AS [Post Link], Title, CreationDate, Score\nFROM Posts\nWHERE OwnerUserId=##user?36688##\n  AND PostTypeId=1\nORDER BY CreationDate DESC",
        "CreationDate": "2019-03-23 05:56:41",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 1015343,
        "Title": "Find answers in date range",
        "Description": null,
        "QueryBody": "DECLARE  @userid int = ##userid##\nDECLARE @startDate datetime = '##startDate##'\nDECLARE @endDate datetime = '##endDate##'\n\n-- select * from users where id=@userid\n\nselect \n--t.tagname, count(*)\na.CreationDate,\nq.Title,\nq.Tags,\ncase when q.AcceptedAnswerId = a.Id Then 1 else 0 end as AcceptedAnswer,\nq.AcceptedAnswerId,\na.Id\nfrom Posts a\ninner join Posts q on a.ParentId=q.Id\ninner join PostTypes pt on pt.id=a.posttypeid\n--inner join PostTags ptags on q.id=ptags.postid\n--inner join Tags t on ptags.TagId=t.id\nwhere a.OwnerUserId=@userid\nand pt.Name='Answer'\nand a.CreationDate > @startDate\nand a.CreationDate <= @endDate\n--group by t.tagname",
        "CreationDate": "2019-11-12 19:55:43",
        "validated": false,
        "QueryBody_Original": "DECLARE  @userid int = ##userid##\nDECLARE @startDate datetime = '##startDate##'\nDECLARE @endDate datetime = '##endDate##'\n\n-- select * from users where id=@userid\n\nselect \n--t.tagname, count(*)\na.CreationDate,\nq.Title,\nq.Tags,\ncase when q.AcceptedAnswerId = a.Id Then 1 else 0 end as AcceptedAnswer,\nq.AcceptedAnswerId,\na.Id\nfrom Posts a\ninner join Posts q on a.ParentId=q.Id\ninner join PostTypes pt on pt.id=a.posttypeid\n--inner join PostTags ptags on q.id=ptags.postid\n--inner join Tags t on ptags.TagId=t.id\nwhere a.OwnerUserId=@userid\nand pt.Name='Answer'\nand a.CreationDate > @startDate\nand a.CreationDate <= @endDate\n--group by t.tagname"
    },
    {
        "QuerySetId": 1017345,
        "Title": "This is just a random query ...",
        "Description": null,
        "QueryBody": "SELECT  RAND(##seed:int##)",
        "CreationDate": "2019-03-27 19:36:56",
        "validated": false,
        "QueryBody_Original": "SELECT  RAND(##seed:int##)"
    },
    {
        "QuerySetId": 1020859,
        "Title": "Most common tags without an excerpt or wiki",
        "Description": null,
        "QueryBody": "SELECT  TOP 100\n  Tags.TagName,\n  Tags.Id,\n  Tags.Count,\n  Excerpt.Body AS Excerpt,\n  Wiki.Body AS Wiki,\n  'https:\/\/data.stackexchange.com\/stackoverflow\/query\/1235123?TagPattern='\n    + Tags.TagName + '|Hunt!'\n    AS [Hunt for it on the network!]\nFROM Tags\nLEFT JOIN Posts Wiki ON Tags.WikiPostId = Wiki.Id\nLEFT JOIN Posts Excerpt ON Tags.ExcerptPostId = Excerpt.Id\nWHERE (\n    ##ShowMissingExcerpts:int?1## = 1\n    AND (\n      Tags.ExcerptPostId IS NULL\n      OR\n      Excerpt.Body = ''\n    )\n  )\n  OR (\n    ##ShowMissingWikis:int?1## = 1\n    AND (\n      Tags.WikiPostId IS NULL\n      OR\n      Wiki.Body = ''\n    )\n  )\nORDER BY Tags.Count DESC, Tags.Id",
        "CreationDate": "2020-05-06 12:36:30",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 1021028,
        "Title": "User X's comments on User Y's posts",
        "Description": null,
        "QueryBody": "SELECT  C.CreationDate, C.Text, P.Id as [Post Link]\nFROM Comments C\nINNER JOIN Posts P ON C.PostId = P.Id\nWHERE \n  C.UserId = ##UserIdX##\n  AND P.OwnerUserId = ##UserIDY##\nORDER BY C.CreationDate ASC",
        "CreationDate": "2019-04-01 16:11:21",
        "validated": false,
        "QueryBody_Original": "SELECT  C.CreationDate, C.Text, P.Id as [Post Link]\nFROM Comments C\nINNER JOIN Posts P ON C.PostId = P.Id\nWHERE \n  C.UserId = ##UserIdX##\n  AND P.OwnerUserId = ##UserIDY##\nORDER BY C.CreationDate ASC"
    },
    {
        "QuerySetId": 1021063,
        "Title": "Users with at least one post in a reputation bracket",
        "Description": null,
        "QueryBody": "DECLARE  @Repmin int = ##Repmin##\nDECLARE @Repmax int = ##Repmax##\n\nselect \n  'site:\/\/users\/' + CAST(u.id as nvarchar) + '|' + CAST(u.displayname as nvarchar) AS [User], \n  sum(p.score) as 'Total Score', u.reputation, u.lastaccessdate\/*,\n  count(p.id) *\/\nfrom users u, posts p\nwhere u.reputation >= @Repmin and\n  u.reputation <=@Repmax and\n  u.id = p.owneruserid and\n  p.posttypeid = 1 and\n  DATEDIFF (day,u.lastaccessdate, getdate()) > 365\ngroup by u.reputation, u.id, u.displayname, u.lastaccessdate\nhaving count(p.id) = 1 and sum(p.score) <=1\norder by u.lastaccessdate desc",
        "CreationDate": "2019-05-02 08:23:10",
        "validated": false,
        "QueryBody_Original": "DECLARE  @Repmin int = ##Repmin##\nDECLARE @Repmax int = ##Repmax##\n\nselect \n  'site:\/\/users\/' + CAST(u.id as nvarchar) + '|' + CAST(u.displayname as nvarchar) AS [User], \n  sum(p.score) as 'Total Score', u.reputation, u.lastaccessdate\/*,\n  count(p.id) *\/\nfrom users u, posts p\nwhere u.reputation >= @Repmin and\n  u.reputation <=@Repmax and\n  u.id = p.owneruserid and\n  p.posttypeid = 1 and\n  DATEDIFF (day,u.lastaccessdate, getdate()) > 365\ngroup by u.reputation, u.id, u.displayname, u.lastaccessdate\nhaving count(p.id) = 1 and sum(p.score) <=1\norder by u.lastaccessdate desc"
    },
    {
        "QuerySetId": 1021311,
        "Title": "My comments matching a pattern",
        "Description": null,
        "QueryBody": "SELECT  c.Score as cs,\nISNULL(p.Tags, q.Tags) AS qg,\nISNULL(p.Title, q.Title) AS qt,\nc.Id AS \"Comment Link\",\nc.CreationDate AS cd,\nc.Text AS ct\nFROM Comments AS c \nLEFT JOIN Posts AS p ON c.PostId = p.Id\nLEFT JOIN Posts AS q ON p.ParentId = q.Id\nLEFT JOIN Users AS m ON m.AccountId = ##GlobalAccountId?1192385##\nWHERE c.UserId = m.Id AND\nc.Text LIKE ##Pat:string?%smbc%##\nORDER BY c.CreationDate DESC;",
        "CreationDate": "2019-04-01 23:45:31",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 1021492,
        "Title": "Numbers of downvotes on posts by a specific user",
        "Description": null,
        "QueryBody": "SELECT  p.Id AS [Post Link], COUNT(v.Id)\nFROM Votes v JOIN Posts p ON v.PostId=p.Id\nWHERE (p.OwnerUserId=##id?210401##) AND (v.VoteTypeId=3)\nGROUP BY p.Id\nORDER BY p.Id ASC\n--VoteTypeId=3 downvotes\n--VoteTypeId=2 upvotes",
        "CreationDate": "2019-04-02 09:39:33",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 1021496,
        "Title": "Scores of posts by a specific user",
        "Description": null,
        "QueryBody": "SELECT \n  Id AS [Post Link], Score\nFROM Posts\nWHERE OwnerUserId=##id?210401##\nORDER BY Id ASC",
        "CreationDate": "2019-04-02 09:43:15",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 1021499,
        "Title": "Scores of answers by a specific user",
        "Description": null,
        "QueryBody": "SELECT \n  a.Id AS [Post Link], q.Title, a.Score\nFROM Posts a JOIN Posts q ON a.ParentId=q.Id\nWHERE a.OwnerUserId=##id?210401## AND a.PostTypeId=2\nORDER BY a.Id ASC",
        "CreationDate": "2019-04-02 09:45:27",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 1022027,
        "Title": "Reputation earned for an answer",
        "Description": null,
        "QueryBody": "SELECT   \nsum(case when v.VoteTypeId = 2 then 10 else -2 end) as [Reputation Earned]\nfrom \n  votes v \ninner join \n  Posts p \non v.PostId=p.id \nwhere \n  p.OwnerUserId=##UserId## and p.id=##PostId##\n  and v.VoteTypeId in (2,3)",
        "CreationDate": "2019-04-02 21:33:07",
        "validated": false,
        "QueryBody_Original": "SELECT   \nsum(case when v.VoteTypeId = 2 then 10 else -2 end) as [Reputation Earned]\nfrom \n  votes v \ninner join \n  Posts p \non v.PostId=p.id \nwhere \n  p.OwnerUserId=##UserId## and p.id=##PostId##\n  and v.VoteTypeId in (2,3)"
    },
    {
        "QuerySetId": 1022858,
        "Title": "Upvote\/Downvote ratio for the users over a rep limit",
        "Description": null,
        "QueryBody": "WITH  Raw AS (\n  SELECT\n    Posts.OwnerUserId AS UserId,\n    MIN(Users.Reputation) AS Reputation,\n    COUNT(CASE WHEN Votes.VoteTypeId = 2 THEN 1 ELSE NULL END) AS UpVotes,\n    COUNT(*) AS AllVotes\n  FROM Users, Posts, Votes\n  WHERE\n    Users.Reputation >= ##MinRep:int?3000##\n    AND\n    Votes.PostId = Posts.Id\n    AND\n    Posts.PostTypeId = 2\n    AND\n    Posts.OwnerUserId = Users.Id\n    AND\n    Votes.VoteTypeId IN (2,3)\n  GROUP BY Posts.OwnerUserId\n)\nSELECT\n  UserId AS [User Link],\n  UserId,\n  Reputation,\n  UpVotes,\n  AllVotes - UpVotes AS DownVotes,\n  100.0 * UpVotes \/ AllVotes AS UpVotePct\nFROM Raw\nORDER BY UpVotePct DESC, UserId",
        "CreationDate": "2019-04-16 07:26:37",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 1022862,
        "Title": "Posts user has upvoted between 3 and 6 months ago.",
        "Description": null,
        "QueryBody": "SELECT  P.id as [Post Link], Tags\nfrom posts P\ninner join Votes V on P.id = V.PostId\nwhere voteTypeId = 2 --upvote\n  and V.userId = ##userid:int##\n  and V.creationDate between DATEADD(m, -6, getdate()) and DATEADD(m, -3, getdate())",
        "CreationDate": "2019-04-03 18:21:40",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 1022932,
        "Title": "Last X Hot Network Questions with tag information",
        "Description": null,
        "QueryBody": "SELECT  TOP(##num?100##)\n    ph.CreationDate,\n  ph.PostHistoryTypeId,\n  p.Tags AS [Tags],\n  p.Id AS [Post Link],\n  concat('site:\/\/posts\/',\n          p.Id,\n          '\/revisions'\n          ) [Revisions Link]\nFROM PostHistory ph INNER JOIN Posts p\n  ON ph.PostId=p.Id\n  AND ph.PostHistoryTypeId=52\n  AND p.PostTypeId=1\nORDER BY ph.CreationDate DESC",
        "CreationDate": "2019-05-05 22:10:41",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 1023253,
        "Title": "R Questions with no answers and no comments",
        "Description": null,
        "QueryBody": "WITH  no answers and no comments\n\nselect TOP 30\n  p.Id as [Post Link],\n  p.score,\n  creationdate\n  FROM Posts p\n    INNER JOIN PostTags pt ON p.Id = pt.PostId\n    INNER JOIN Tags t ON pt.TagId = t.Id\n  WHERE \n  p.PostTypeId = 1 AND \n  p.score >= 2 AND\n  p.closeddate is null AND\n  ISNULL(p.AnswerCount,0) = 0 AND\n  ISNULL(p.CommentCount,0) = 0 AND\n  t.TagName = 'r'\n  and deletiondate is null\n  --and creationdate > getdate()-7\n  order by \n  creationdate desc\n  --p.score desc",
        "CreationDate": "2019-04-04 11:50:10",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 1023254,
        "Title": "R questions with no answers, no comments and score >= 2",
        "Description": null,
        "QueryBody": "WITH  no answers and no comments\n\nselect TOP 30\n  p.Id as [Post Link],\n  p.score,\n  p.creationdate\nFROM \n  Posts p\n    INNER JOIN PostTags pt ON p.Id = pt.PostId\n    INNER JOIN Tags t ON pt.TagId = t.Id\nWHERE \n  p.PostTypeId = 1 AND \n  p.score >= ##MinScore:int?2## AND\n  p.closeddate is null AND\n  ISNULL(p.AnswerCount,0) = 0 AND\n  ISNULL(p.CommentCount,0) = 0 AND\n  t.TagName = 'r'\n  and p.deletiondate is null\n  and creationdate > getdate()- ##MaxDaysAgo:int?14##\nORDER BY\n  p.creationdate desc\n  --p.score desc",
        "CreationDate": "2019-04-14 08:57:12",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 1023329,
        "Title": "choose a badge and see who has it",
        "Description": null,
        "QueryBody": "SELECT  TOP ##limit:int?50##\n--  u.Id AS \"[User ID]\"\n  u.DisplayName AS \"[User Link]\"\n--  'site:\/\/users\/' + CAST(u.Id AS NVARCHAR) + '|' + u.DisplayName\nFROM Badges b\nJOIN Users u ON b.UserId = u.Id\nWHERE b.Name = ##badge##",
        "CreationDate": "2019-04-09 19:04:14",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 1024081,
        "Title": "Tag coming with these tags most commonly together",
        "Description": null,
        "QueryBody": "SELECT  TagB.TagName AS [TagName], COUNT(*) AS Count\nFROM Tags TagA, PostTags PTA, PostTags PTB, Tags TagB\nWHERE\n  TagA.TagName = ##TagName:string##\n  AND\n  TagA.Id = PTA.TagId\n  AND\n  PTA.PostId = PTB.PostId\n  AND\n  PTB.TagId != PTA.TagId\n  AND\n  PTB.TagId = TagB.Id\nGROUP BY TagB.TagName\nORDER BY Count DESC, TagB.TagName",
        "CreationDate": "2019-04-05 21:09:04",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 1024211,
        "Title": "You get the most rep by answering questions tagged with...",
        "Description": null,
        "QueryBody": "WITH  VoteRep AS (\n  SELECT 1 AS VoteTypeId, 15 AS Rep\n  UNION\n  SELECT 2, 10\n  UNION\n  SELECT 3, -2\n)\nSELECT *\nFROM Posts Q, Posts A, PostTags, Votes, VoteRep\nWHERE\n  A.OwnerUserId = ##AccountId:int?1783163##\n  AND\n  A.ParentId = Q.Id\n  AND\n  PostTags.PostId = Q.Id\n  AND\n  Votes.PostId = A.Id\n  AND\n  Votes.VoteTypeId = VoteRep.VoteTypeId",
        "CreationDate": "2019-04-06 03:48:31",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 1024790,
        "Title": "Average answer score by the rep of the OP",
        "Description": null,
        "QueryBody": "WITH  Raw AS (\n  SELECT\n    FLOOR(\n      POWER(##LogBase:float?1.2##,\n        FLOOR(\n          LOG(0.1 * Users.Reputation) \/ LOG(##LogBase##)\n        )\n      )\n    ) AS Rep,\n    Posts.Score AS Score\n  FROM Posts, Users\n  WHERE\n    Posts.OwnerUserId = Users.Id\n    AND\n    Posts.PostTypeId = 2\n)\nSELECT\n  10 * Rep,\n  AVG(1.0 * Score) AS AvgScore\nFROM Raw\nWHERE (##MaxRep:int?10000## = 0) OR (Rep <= ##MaxRep##)\nGROUP BY Rep\nORDER BY Rep",
        "CreationDate": "2019-04-07 19:22:31",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 1025874,
        "Title": "Questions containing \"String\" that I've answered",
        "Description": null,
        "QueryBody": "SELECT      q.Id AS [Post Link],\n           q.Score,\n           q.Tags,\n           q.Creationdate\nFROM       Posts a\nINNER JOIN Posts q\nON         q.Id = a.ParentId\nWHERE      a.PostTypeId = 2 -- answer\nAND        a.OwnerUserId =##UserId:int##\nAND        LOWER(q.Body) LIKE N'%' + LOWER(##SearchStr:string##) + '%'",
        "CreationDate": "2019-04-09 17:35:55",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 1025875,
        "Title": "Questions with a given string that a given user answered",
        "Description": null,
        "QueryBody": "SELECT  q.id as [Post Link],q.score as [Question Score],q.ViewCount,q.Tags,a.score as [Answer Score]\nfrom posts q inner join posts a on a.parentid = q.id\nwhere a.owneruserid = ##UserID:int##\nand (q.body like '%' + ##SearchString:string## + '%'\n or q.title like '%' + ##SearchString:string## + '%')",
        "CreationDate": "2019-04-09 08:51:50",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 1027019,
        "Title": "Posts that have a linked duplicate but are not closed",
        "Description": null,
        "QueryBody": "SELECT  \np.id as PostId, p.id as [Post Link], p.creationdate -- for the url\nfrom posts p \njoin postlinks pl on p.id = pl.postid\nwhere  p.posttypeid = 1 -- Question post\nand pl.linktypeid = 3 -- duplicate\n)\n\nexcept -- exclude posts that have been closed\n(\nSELECT p.id as PostId, p.id as [Post Link], p.creationdate -- for the url\nfrom posts p \njoin posthistory ph on p.id = ph.postid\nwhere ph.posthistorytypeid = 10 --post was merged\n\n)",
        "CreationDate": "2019-04-11 02:10:21",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 1027088,
        "Title": "Preguntas con un tag semana a semana",
        "Description": null,
        "QueryBody": "DECLARE  @tag0 nvarchar(25) = ##tag0:string?python##\nDECLARE @weeks int         = ##weeks:int?52##\nDECLARE @aSunday DATE = '2000-01-02'\n\nSELECT\n  dateadd(week, datediff(week, @aSunday, q.CreationDate), @aSunday) week,\n  t.TagName,\n  count(*)\nFROM PostTags pt\nJOIN Posts q ON q.Id=pt.PostId\nJOIN Tags t ON t.Id=pt.TagId\nWHERE\n  TagName IN (@tag0) AND\n  q.CreationDate < dateadd(week, datediff(week, @aSunday, getdate()), @aSunday) AND\n  q.creationdate between Dateadd(ww, -@weeks, getdate()) AND Dateadd(ww, -1, getdate())\nGROUP BY dateadd(week, datediff(week, @aSunday, q.CreationDate), @aSunday), TagName\nORDER BY dateadd(week, datediff(week, @aSunday, q.CreationDate), @aSunday)",
        "CreationDate": "2019-04-11 00:04:02",
        "validated": false,
        "QueryBody_Original": "DECLARE  @tag0 nvarchar(25) = ##tag0:string?python##\nDECLARE @weeks int         = ##weeks:int?52##\nDECLARE @aSunday DATE = '2000-01-02'\n\nSELECT\n  dateadd(week, datediff(week, @aSunday, q.CreationDate), @aSunday) week,\n  t.TagName,\n  count(*)\nFROM PostTags pt\nJOIN Posts q ON q.Id=pt.PostId\nJOIN Tags t ON t.Id=pt.TagId\nWHERE\n  TagName IN (@tag0) AND\n  q.CreationDate < dateadd(week, datediff(week, @aSunday, getdate()), @aSunday) AND\n  q.creationdate between Dateadd(ww, -@weeks, getdate()) AND Dateadd(ww, -1, getdate())\nGROUP BY dateadd(week, datediff(week, @aSunday, q.CreationDate), @aSunday), TagName\nORDER BY dateadd(week, datediff(week, @aSunday, q.CreationDate), @aSunday)"
    },
    {
        "QuerySetId": 1027117,
        "Title": "Cloud Database Tag Counts and Running Totals",
        "Description": null,
        "QueryBody": "SELECT  Tags.TagName as TagName\n    , CONVERT(VARCHAR(7), Posts.CreationDate, 126) as Month \n    , COUNT(*) as TagCount\n    , SUM(COUNT(*)) OVER (PARTITION BY Tags.TagName ORDER BY CONVERT(VARCHAR(7), Posts.CreationDate, 126)) as RunningTagCount\n  FROM\n    Posts\n    JOIN PostTags ON PostTags.PostId = Posts.Id\n    JOIN Tags ON Tags.Id = PostTags.TagId \n  WHERE\n    Tags.TagName IN (\n      'google-cloud-sql',\n      'amazon-rds',\n      'azure-sql-database'\n    )\n    AND Posts.CreationDate < DATEADD(month, DATEDIFF(month, 0, GETDATE()), 0)\n  GROUP BY\n    TagName,\n    CONVERT(VARCHAR(7), Posts.CreationDate, 126)\n  ORDER BY Month ASC, TagCount desc",
        "CreationDate": "2019-06-05 20:08:27",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 1028325,
        "Title": "Get activity timestamps for a user",
        "Description": null,
        "QueryBody": "WITH  alldata AS (\n  SELECT creationdate, ROW_NUMBER() OVER (ORDER BY creationdate) AS row\n  FROM (\n    SELECT creationdate\n    FROM comments\n    WHERE userid = ##UserId##\n    UNION ALL\n    SELECT creationdate\n    FROM posthistory\n    WHERE userid = ##UserId##\n    UNION ALL\n    SELECT creationdate\n    FROM votes\n    WHERE userid = ##UserId##\n  ) T\n)\nSELECT creationdate\nFROM alldata\nWHERE row >= ##StartRow:INT?1##\nAND row <= ##EndRow:INT?50000##\nORDER BY creationdate DESC",
        "CreationDate": "2019-04-12 12:38:38",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 1030012,
        "Title": "Database integration test: list of votes created before their post",
        "Description": "Looks this inconsistency is the result of question merges",
        "QueryBody": "DECLARE  @a INT;\n\nSELECT @a=5;\n\nSELECT @a;",
        "CreationDate": "2019-04-15 03:41:29",
        "validated": false,
        "QueryBody_Original": "DECLARE  @a INT;\n\nSELECT @a=5;\n\nSELECT @a;"
    },
    {
        "QuerySetId": 1030068,
        "Title": "Count of posts by age in days",
        "Description": null,
        "QueryBody": "DECLARE  @LastVote DATETIME;\n\nSELECT @LastVote = CreationDate\nFROM Votes\nWHERE Id=(\n  SELECT MAX(Id) FROM Votes\n);\n\nWITH PostAge AS (\n  SELECT\n    Id,\n    DATEDIFF(day, CreationDate, @LastVote) AS Age\n  FROM Posts\n  WHERE PostTypeId = ##PostTypeId:int?2##\n),\nPostsByAge AS (\n  SELECT Age, COUNT(*) AS Count\n  FROM PostAge\n  GROUP BY Age\n)\nSELECT\n  Age,\n  Count,\n  SUM(Count) OVER (ORDER BY Age DESC ROWS UNBOUNDED PRECEDING) AS RollingCount\nFROM PostsByAge\nORDER BY Age;",
        "CreationDate": "2019-04-15 06:49:54",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 1030184,
        "Title": "All questions with exactly two specified tags",
        "Description": null,
        "QueryBody": "SELECT  Id AS [Post Link], CreationDate, Score, Tags\n  FROM Posts\n  WHERE Tags IN ('<' + ##tag1:string## + '><' + ##tag2:string## + '>',\n                 '<' + ##tag2:string## + '><' + ##tag1:string## + '>')\n  ORDER BY CreationDate DESC",
        "CreationDate": "2019-04-15 11:28:09",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 1030539,
        "Title": "Post time distribution of a user",
        "Description": null,
        "QueryBody": "SELECT \n  ROW_NUMBER() OVER (ORDER BY DATEPART(hour, CreationDate)) AS Number,\n  DATEPART(hour, CreationDate) AS Hour\nFROM Posts\nWHERE OwnerUserId = ##UserId##\nORDER BY DATEPART(hour, CreationDate)",
        "CreationDate": "2019-04-15 18:19:14",
        "validated": false,
        "QueryBody_Original": "SELECT \n  ROW_NUMBER() OVER (ORDER BY DATEPART(hour, CreationDate)) AS Number,\n  DATEPART(hour, CreationDate) AS Hour\nFROM Posts\nWHERE OwnerUserId = ##UserId##\nORDER BY DATEPART(hour, CreationDate)"
    },
    {
        "QuerySetId": 1031123,
        "Title": " All unanswered questions with exactly two specified tags",
        "Description": null,
        "QueryBody": "SELECT  Id AS [Post Link], CreationDate, Score, Tags\n  FROM Posts\n  WHERE Tags IN ('<' + ##tag1:string## + '><' + ##tag2:string## + '>',\n                 '<' + ##tag2:string## + '><' + ##tag1:string## + '>')\n    AND AnswerCount = 0\n  ORDER BY CreationDate DESC",
        "CreationDate": "2019-04-16 16:12:18",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 1031193,
        "Title": "Print me a Tower Block",
        "Description": null,
        "QueryBody": "DECLARE  @ INT=3\n\n,@h varchar(max)=REPLICATE('~',27)SELECT @h+='\n: '+a+IIF(n>@*5-6,IIF(n%5=0,'_______ ','I     I '),t)+a+':'FROM(SELECT\nIIF(n%5%4=0,t,': ### : ')a,*FROM(SELECT': : : : 't,number n,*FROM\nspt_values)x)y\nWHERE type='P'and n<@*5WHILE @>=0SELECT\n@h=SPACE(3-@)+')'+REPLICATE('V ',9+@)+'V(\n'+@h,@-=1PRINT'   '+REPLICATE('=',21)+'\n'+@h",
        "CreationDate": "2019-04-16 18:55:58",
        "validated": false,
        "QueryBody_Original": "DECLARE  @ INT=3\n\n,@h varchar(max)=REPLICATE('~',27)SELECT @h+='\n: '+a+IIF(n>@*5-6,IIF(n%5=0,'_______ ','I     I '),t)+a+':'FROM(SELECT\nIIF(n%5%4=0,t,': ### : ')a,*FROM(SELECT': : : : 't,number n,*FROM\nspt_values)x)y\nWHERE type='P'and n<@*5WHILE @>=0SELECT\n@h=SPACE(3-@)+')'+REPLICATE('V ',9+@)+'V(\n'+@h,@-=1PRINT'   '+REPLICATE('=',21)+'\n'+@h"
    },
    {
        "QuerySetId": 1031316,
        "Title": "Count of answers of the site by day",
        "Description": null,
        "QueryBody": "DECLARE  @SiteStart DATETIME;\nSELECT @SiteStart = CreationDate\nFROM Posts\nWHERE Id = (SELECT MIN(Id) FROM Posts);\n\nSELECT\n  DATEDIFF(day, @SiteStart, CreationDate) AS Age,\n  COUNT(*) AS Count\nFROM Posts\nWHERE\n  PostTypeId = 2\n  AND\n  Id IN (SELECT PostId FROM Votes WHERE VoteTypeId = 2)\nGROUP BY DATEDIFF(day, @SiteStart, CreationDate)\nORDER BY Age",
        "CreationDate": "2019-04-16 21:48:00",
        "validated": false,
        "QueryBody_Original": "DECLARE  @SiteStart DATETIME;\nSELECT @SiteStart = CreationDate\nFROM Posts\nWHERE Id = (SELECT MIN(Id) FROM Posts);\n\nSELECT\n  DATEDIFF(day, @SiteStart, CreationDate) AS Age,\n  COUNT(*) AS Count\nFROM Posts\nWHERE\n  PostTypeId = 2\n  AND\n  Id IN (SELECT PostId FROM Votes WHERE VoteTypeId = 2)\nGROUP BY DATEDIFF(day, @SiteStart, CreationDate)\nORDER BY Age"
    },
    {
        "QuerySetId": 1032497,
        "Title": "Top tags and their top users",
        "Description": null,
        "QueryBody": "SELECT  TagName, [Count], OwnerUserId AS [User Link], Score\nFROM\n(SELECT t.TagName, t.[Count], a.OwnerUserId, SUM(a.Score) AS Score,\n  RANK() OVER (PARTITION BY t.TagName ORDER BY SUM(a.Score) DESC) AS Rank\n  FROM Posts AS a\n  INNER JOIN Posts AS q ON a.ParentId = q.Id\n  INNER JOIN PostTags AS pt ON q.Id = pt.PostId\n  INNER JOIN Tags AS t ON t.Id = pt.TagId\n  WHERE a.PostTypeId = 2 -- Answers\n    AND a.CommunityOwnedDate IS NULL -- exclude Community Wiki posts\n    AND t.Id IN (SELECT TOP ##topTags:int?100## Id FROM Tags ORDER BY [Count] DESC)\n    GROUP BY t.TagName, t.[Count], a.OwnerUserId) AS temp\nWHERE Rank = 1\nORDER BY [Count] DESC",
        "CreationDate": "2019-04-18 19:40:15",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 1032545,
        "Title": "Things you have to learn",
        "Description": null,
        "QueryBody": "WITH  PostMonth AS (\n  SELECT DATEFROMPARTS(\n    DATEPART(yyyy, CreationDate),\n    DATEPART(mm, CreationDate),\n    1) AS Month,\n    COUNT(*) AS Count\n  FROM Posts\n  WHERE\n    PostTypeId = 1\n  GROUP BY DATEFROMPARTS(\n    DATEPART(yyyy, CreationDate),\n    DATEPART(mm, CreationDate),\n    1)\n),\nTopTags AS (\n  SELECT Id FROM Tags WHERE Count>##MinTagCount:int?10##\n)\nSELECT\n  DATEFROMPARTS(\n    DATEPART(yyyy, Posts.CreationDate),\n    DATEPART(mm, Posts.CreationDate),\n    1) AS Month,\n  PostTags.TagId,\n  COUNT(*) AS Count\nFROM Posts, PostTags, TopTags\nWHERE\n  PostTags.TagId = TopTags.Id\n  AND\n  Posts.Id = PostTags.PostId\nGROUP BY\n    DATEFROMPARTS(\n    DATEPART(yyyy, Posts.CreationDate),\n    DATEPART(mm, Posts.CreationDate),\n    1),\n  PostTags.TagId\nORDER BY Month, PostTags.TagId",
        "CreationDate": "2019-04-18 23:55:07",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 1033398,
        "Title": "Finding specific users by their location and a tag score",
        "Description": "http:\/\/meta.stackexchange.com\/questions\/193641\/finding-specific-users-by-their-location-and-a-tag-score",
        "QueryBody": "SELECT  TOP(300) ROW_NUMBER() OVER(ORDER BY SUM(score) DESC) AS Position , u.id as [User Link]\n     , sum(score) as totalscore\nfrom posts p\ninner join posttags pt on pt.postid = p.id \n                       or pt.postid = p.parentid\ninner join tags t on t.id = pt.tagid\ninner join users u on u.id = p.owneruserid\nwhere tagname = ##tag1:string## collate SQL_Latin1_General_CP1_CI_AI \nand location like '%'+ ##location:string## + '%'  collate SQL_Latin1_General_CP1_CI_AI \ngroup by u.id\norder by sum(score) desc",
        "CreationDate": "2019-09-10 11:27:37",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 1033454,
        "Title": "Badge Samaritan - necromancer - answers that need 1 upvote ",
        "Description": "https:\/\/stackoverflow.com\/help\/badges\/17\/necromancer \"Answer a question more than 60 days later with score of 5 or more. This badge can be awarded multiple times.\"",
        "QueryBody": "DECLARE  @userId int = ##userId##\n\nSELECT TOP 2000\n  a.Id AS [Post Link],\n  a.Score,\n  a.CreationDate\nFROM\n  Posts AS a\nINNER JOIN\n  Posts AS q\nON\n  a.ParentId = q.Id\nINNER JOIN\n  PostHistory AS ph\nON\n  ph.PostId = q.Id\nWHERE\n      ph.PostHistoryTypeId != 14\n  and DATEDIFF(DAY, q.CreationDate, a.CreationDate) > 60\n  and (a.Score >= 3)\n  and (a.Score < 5)\n  and a.OwnerUserId = @userId\nGROUP BY\n  a.Id, a.Score, a.CreationDate\nORDER BY\n  a.CreationDate DESC",
        "CreationDate": "2019-06-15 08:22:08",
        "validated": false,
        "QueryBody_Original": "DECLARE  @userId int = ##userId##\n\nSELECT TOP 2000\n  a.Id AS [Post Link],\n  a.Score,\n  a.CreationDate\nFROM\n  Posts AS a\nINNER JOIN\n  Posts AS q\nON\n  a.ParentId = q.Id\nINNER JOIN\n  PostHistory AS ph\nON\n  ph.PostId = q.Id\nWHERE\n      ph.PostHistoryTypeId != 14\n  and DATEDIFF(DAY, q.CreationDate, a.CreationDate) > 60\n  and (a.Score >= 3)\n  and (a.Score < 5)\n  and a.OwnerUserId = @userId\nGROUP BY\n  a.Id, a.Score, a.CreationDate\nORDER BY\n  a.CreationDate DESC"
    },
    {
        "QuerySetId": 1034744,
        "Title": "find the up and down vote history of a specific post",
        "Description": null,
        "QueryBody": "SELECT  creationdate\n     , case votetypeid\n       when 1 then 'accept'\n       when 2 then 'up'\n       when 3 then 'down'\n       end vote\n      , postid as [Post Link]\nfrom votes\nwhere votetypeid in (1,2,3)\nand postid = ##postid:int?104612##",
        "CreationDate": "2019-04-21 10:57:10",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 1035689,
        "Title": "Find answers by a given user (with links)",
        "Description": null,
        "QueryBody": "SELECT  \n  q.Id AS \"Q ID\", \n  a.Id AS \"A ID\", \n  q.CreationDate AS \"Q Date\", \n  a.CreationDate AS \"A Date\", \n  q.Score AS \"Q Score\",\n  a.Score AS \"A Score\",\n  q.ClosedDate AS \"Question Closed Date\",\n  q.Id AS [Post Link]\nFROM Posts a\n  JOIN Posts q ON a.ParentId = q.Id\n  JOIN Users u ON q.OwnerUserId = u.Id\nWHERE a.OwnerUserId = ##UserId:int##\nORDER BY a.Score DESC",
        "CreationDate": "2019-04-22 06:39:35",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 1037022,
        "Title": "Count of questions with tag over time",
        "Description": null,
        "QueryBody": "DECLARE  @tag0 nvarchar(25) = ##tag0:string?bigcommerce##\nDECLARE @tag1 nvarchar(25) = ##tag1:string?shopify##\nDECLARE @tag2 nvarchar(25) = ##tag2:string?magneto2##\n\nSELECT \n  DATEADD(week, DATEDIFF(day, '20000109', CreationDate) \/ 7, '20000109') AS [WEEK]\n  , Tags.TagName, COUNT(DISTINCT Posts.Id) as Posts, SUM(Posts.AnswerCount) as Answers, SUM(Posts.CommentCount) as Comments\nFROM Posts\nINNER JOIN PostTags ON PostTags.PostId = Posts.Id\nINNER JOIN Tags ON PostTags.TagId = Tags.Id\nWHERE Tags.TagName in (@tag0,@tag1,@tag2) AND PostTypeId = 1 AND CreationDate > '2013-01-06'\nGROUP BY  DATEADD(week, DATEDIFF(day, '20000109', CreationDate) \/ 7, '20000109'), Tags.TagName\nORDER BY [WEEK] DESC",
        "CreationDate": "2019-04-24 07:36:43",
        "validated": false,
        "QueryBody_Original": "DECLARE  @tag0 nvarchar(25) = ##tag0:string?bigcommerce##\nDECLARE @tag1 nvarchar(25) = ##tag1:string?shopify##\nDECLARE @tag2 nvarchar(25) = ##tag2:string?magneto2##\n\nSELECT \n  DATEADD(week, DATEDIFF(day, '20000109', CreationDate) \/ 7, '20000109') AS [WEEK]\n  , Tags.TagName, COUNT(DISTINCT Posts.Id) as Posts, SUM(Posts.AnswerCount) as Answers, SUM(Posts.CommentCount) as Comments\nFROM Posts\nINNER JOIN PostTags ON PostTags.PostId = Posts.Id\nINNER JOIN Tags ON PostTags.TagId = Tags.Id\nWHERE Tags.TagName in (@tag0,@tag1,@tag2) AND PostTypeId = 1 AND CreationDate > '2013-01-06'\nGROUP BY  DATEADD(week, DATEDIFF(day, '20000109', CreationDate) \/ 7, '20000109'), Tags.TagName\nORDER BY [WEEK] DESC"
    },
    {
        "QuerySetId": 1037569,
        "Title": "Zero scored question with no actual answer",
        "Description": "Questions having zero score or less, zero answers",
        "QueryBody": "WITH  low answered question percenatge.\nFor example: for 1 year old question input 1, for 2 input 2..\n*\/\nselect\n  Id as [Post Link],\n  Score as 'Votes',\n  CreationDate as 'Posted',\n  LastActivityDate as 'Last Active',\n  ViewCount as 'Views',\n  CommentCount as 'Comments'\nfrom\n  Posts\nwhere\n  PostTypeId = 1 and\n  AcceptedAnswerId is null and\n  ClosedDate is null and\n  AnswerCount = 0 and\n  CreationDate < DATEADD(Year, -##Year##, getdate()) and\n  Score <= 0\norder by CreationDate asc",
        "CreationDate": "2019-04-25 17:36:13",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 1037597,
        "Title": "Score per answer (ranking; non-CW)",
        "Description": null,
        "QueryBody": "SELECT  rank() over (order by R.Ratio desc) as Rank, R.Id as [User Link], R.Ratio\nfrom (\n  SELECT U.Id, cast(sum(A.Score) as real) \/ count(A.Score) as Ratio\n  from Posts A\n  inner join Users U on U.Id = A.OwnerUserId\n  where A.PostTypeId = 2\n    and A.CommunityOwnedDate is null\n  group by U.Id\n  having count(A.Id) >= ##MinimumAnswerCount?400##\n  ) R\norder by R.Ratio desc",
        "CreationDate": "2019-04-25 05:12:37",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 1037812,
        "Title": "What questions are marked as favorite by a user?",
        "Description": null,
        "QueryBody": "SELECT  posts.OwnerUserId as [User Link], posts.id as [Post Link]\nfrom posts\n  join votes on posts.id = votes.postid\nwhere\n  votes.votetypeid = 5 and\n  posts.PostTypeId  = 1 and\n  votes.UserId = ##UserId##",
        "CreationDate": "2019-04-25 14:46:07",
        "validated": false,
        "QueryBody_Original": "SELECT  posts.OwnerUserId as [User Link], posts.id as [Post Link]\nfrom posts\n  join votes on posts.id = votes.postid\nwhere\n  votes.votetypeid = 5 and\n  posts.PostTypeId  = 1 and\n  votes.UserId = ##UserId##"
    },
    {
        "QuerySetId": 1038039,
        "Title": "Old questions with a specific tag",
        "Description": "Brings up those open question with no accepted answer of a certain time old with a tag.",
        "QueryBody": "SELECT \n  q.Id as [Post Link],\n  q.Score as 'Votes',\n  q.CreationDate as 'Posted',\n  q.LastActivityDate as 'Last Active',\n  q.ViewCount as 'Views',\n  q.CommentCount as 'Comments'\nfrom\n  Posts q \njoin Posts a on a.ParentId = q.Id\nwhere\n  q.PostTypeId = 1 and\n  q.AcceptedAnswerId is null and\n  q.ClosedDate is null and\n  q.CreationDate < DATEADD(Month, -##Month:int?24##, getdate()) and\n  q.Tags like '%##Tag?freya##%'\ngroup by \n  q.Id,q.Score,q.CreationDate,q.LastActivityDate,q.ViewCount,q.CommentCount\nhaving \n  max(a.Score) = 0\norder by q.CreationDate asc",
        "CreationDate": "2019-04-27 17:19:39",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 1038199,
        "Title": "Age-weighed score per answer (ranking; non-CW)",
        "Description": null,
        "QueryBody": "SELECT  top ##RankedUsers?1000##\n  rank() over (order by R.Ratio desc) as Rank, R.Id as [User Link], R.Ratio\nfrom (\nSELECT U.Id, 100 * sum(0.5 + cast(A.Score as real) * exp(-cast(datediff(day, A.CreationDate, getdate() ) as real) \/ 365.25)) \/ count(A.Score) as Ratio\n  from Posts A\n  inner join Users U on U.Id = A.OwnerUserId\n  where A.PostTypeId = 2\n    and A.CommunityOwnedDate is null\n  group by U.Id\n  having count(A.Id) >= ##MinimumAnswerCount?400##\n  ) R\norder by R.Ratio desc",
        "CreationDate": "2019-04-26 05:51:13",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 1038510,
        "Title": "Edits by a given user with edit summary containing given work",
        "Description": null,
        "QueryBody": "SELECT  PostId as [Post Link], Comment, UserId as [User Link], CreationDate,\n  url = 'site:\/\/posts\/' + CAST(PostId AS varchar)+'\/revisions'\nFrom PostHistory\nWhere UserId=##id##\nOrder By CreationDate",
        "CreationDate": "2019-05-25 20:39:23",
        "validated": false,
        "QueryBody_Original": "SELECT  PostId as [Post Link], Comment, UserId as [User Link], CreationDate,\n  url = 'site:\/\/posts\/' + CAST(PostId AS varchar)+'\/revisions'\nFrom PostHistory\nWhere UserId=##id##\nOrder By CreationDate"
    },
    {
        "QuerySetId": 1038901,
        "Title": "Poor, closed questions with at least one answer having a score greater than a threshold",
        "Description": null,
        "QueryBody": "SELECT  DISTINCT a.Id as [Post Link], b.score as \"Answer Score\"\nFROM \n  Posts a\n    JOIN\n  Posts b\n  ON\n    a.Id = b.ParentId AND\n      a.Score <= ##MaximumQuestionScore?2## AND\n      b.Score >= ##MinimumAnswerScore?4## AND\n      a.ClosedDate IS NOT NULL\nORDER BY\n  b.score DESC",
        "CreationDate": "2019-04-27 19:56:58",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 1038930,
        "Title": "Recently deleted questions (with tags)",
        "Description": null,
        "QueryBody": "SELECT  TOP ##number?100##\n  url = 'site:\/\/q\/' + CAST(Id AS varchar),\n  DeletionDate, Score, Tags\nFROM Posts\nWHERE (PostTypeId = 1) and (Deletiondate IS NOT NULL)\nORDER BY DeletionDate DESC\n\n-- number: Enter how many questions to show",
        "CreationDate": "2019-04-27 22:06:17",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 1039362,
        "Title": "answers that should have votes",
        "Description": "answers by specified user(s) that \"should\" have votes",
        "QueryBody": "SELECT  \n  RANK ( ) OVER (\n    partition by a.owneruserid \n    ORDER BY \n      case when a.acceptedanswerid is null then 0 else 1 end desc,\n      round(q.ViewCount\/100,0) desc,\n      round(len(a.body)\/100,0) desc \n      ) as rnk,\n  a.owneruserid as [User Link],\n  a.id as [Post Link],\n  case when a.acceptedanswerid is null then 0 else 1 end as accepted, \n  format(a.creationdate,'yyyy-MM-dd') as answered,\n  len(a.body) as length,\n  q.ViewCount as Views,\n  a.score as [A Score],\n  q.score as [Q Score]\ninto #tmp\nfrom posts a left join posts q on q.id=a.parentid\nwhere a.posttypeid=2\nand a.owneruserid in ( ##UserID## )\nand a.score <=0\n\nSELECT * from #tmp where rnk <= 21\norder by rnk, views desc, [User Link]\n\n--UserID: Enter one or more (comma separated) numeric UserID's:",
        "CreationDate": "2019-07-16 13:10:27",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 1039856,
        "Title": "The easy way to code-golf ascii art!",
        "Description": null,
        "QueryBody": "DECLARE  @h varchar(max)='qwertyuiopasdfg1234567813219'\n    DECLARE @ varchar(max)='\n    ***** * ***\n    *   * * *\n    *   * * *\n    ***** * ***'\n    \n    WHILE @ like'%*'SELECT @=left(@,charindex('*',@)-1)+left(@h+'.',1)+stuff(@,1,charindex('*',@),''),@h=substring(@h,2,999)PRINT\n    concat(@,'\n    '+@h)",
        "CreationDate": "2019-04-30 16:35:06",
        "validated": false,
        "QueryBody_Original": "DECLARE  @h varchar(max)='qwertyuiopasdfg1234567813219'\n    DECLARE @ varchar(max)='\n    ***** * ***\n    *   * * *\n    *   * * *\n    ***** * ***'\n    \n    WHILE @ like'%*'SELECT @=left(@,charindex('*',@)-1)+left(@h+'.',1)+stuff(@,1,charindex('*',@),''),@h=substring(@h,2,999)PRINT\n    concat(@,'\n    '+@h)"
    },
    {
        "QuerySetId": 1039868,
        "Title": "Get All Answers Of Question",
        "Description": null,
        "QueryBody": "DECLARE  @QuestionId int = ##QuestionId##\n\nSELECT *\nFROM Posts a\nJOIN Posts q ON a.ParentID = q.Id\nWHERE q.id = @QuestionId",
        "CreationDate": "2019-04-29 20:21:46",
        "validated": false,
        "QueryBody_Original": "DECLARE  @QuestionId int = ##QuestionId##\n\nSELECT *\nFROM Posts a\nJOIN Posts q ON a.ParentID = q.Id\nWHERE q.id = @QuestionId"
    },
    {
        "QuerySetId": 1040036,
        "Title": "Users with the highest total comment score",
        "Description": null,
        "QueryBody": "SELECT  TOP(##num##)\n  SUM(Score), UserId AS [User Link], UserDisplayName\nFROM Comments\nGROUP BY UserId, UserDisplayName\nORDER BY SUM(Score) DESC",
        "CreationDate": "2019-04-30 03:43:47",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 1040223,
        "Title": "Fastest Guns in the West",
        "Description": "Users with fastest response time",
        "QueryBody": "WITH in x minutes\n-- p2: At least x qualifying answers\n\nSELECT a.OwnerUserId AS [User Link]\n     , CAST(DATEADD(SECOND, AVG(DATEDIFF(SECOND, q.CreationDate, a.CreationDate)), 0) AS TIME)\n     , COUNT(*)\n\nFROM       Posts AS a\nINNER JOIN Posts AS q ON a.ParentId = q.Id\nWHERE a.PostTypeId = 2\nAND a.OwnerUserId IS NOT NULL\nAND (\n    q.OwnerUserId IS NULL OR\n    q.OwnerUserId <> a.OwnerUserId\n)\nAND a.CreationDate >= q.CreationDate\nAND a.CreationDate <= DATEADD(MINUTE, ##p1:int?60##, q.CreationDate)\nGROUP BY a.OwnerUserId\nHAVING COUNT(*) > ##p2:int?100##\nORDER BY 2",
        "CreationDate": "2019-04-30 14:00:22",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 1040392,
        "Title": "How the question ratio of the lower and higher-rep users changed with the years",
        "Description": null,
        "QueryBody": "WITH  Raw AS (\n  SELECT\n    FLOOR(LOG(Users.Reputation)\/LOG(##LogBase:float?5##)) AS LogRep,\n    DATEPART(yyyy, Posts.CreationDate) AS [Year],\n    Posts.PostTypeId\n  FROM Posts, Users\n  WHERE\n    Posts.OwnerUserId = Users.Id\n    AND\n    Posts.PostTypeId IN (1, 2)\n    AND\n    Users.Id >= 1\n)\nSELECT\n  DATEFROMPARTS([Year], 1, 1) AS [Year],\n  'Rep between ' + CAST(FLOOR(POWER(##LogBase##, LogRep)) AS VARCHAR(MAX))\n    + '-' + CAST(FLOOR(POWER(##LogBase##, LogRep+1)-1) AS VARCHAR(MAX)) AS Rep,\n  100.0 * COUNT(CASE WHEN PostTypeId = 1 THEN 1 ELSE NULL END)\n    \/ COUNT(*) AS QuestionPct\nFROM Raw\nGROUP BY Raw.[Year], Raw.LogRep\nORDER BY Raw.[Year] DESC, Raw.LogRep",
        "CreationDate": "2019-04-30 22:55:41",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 1040562,
        "Title": "Hot network questions in a given tag",
        "Description": null,
        "QueryBody": "SELECT  TOP(##num?100##)\n  p.Id AS [Post Link], p.OwnerUserId as [User Link], ph.CreationDate, p.Score, p.AnswerCount, p.Tags\nFROM Posts p JOIN PostHistory ph ON p.Id=ph.PostId\nWHERE (ph.PostHistoryTypeId=52) and (p.Tags LIKE '%<##tagName##>%')\nORDER BY ph.CreationDate DESC",
        "CreationDate": "2019-05-01 15:22:04",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 1040570,
        "Title": "Questions with highest number of bounties",
        "Description": null,
        "QueryBody": "SELECT  Top(##num?500##)\n  COUNT(v.BountyAmount), p.Id AS [Post Link], p.ViewCount\nFROM Posts p JOIN Votes v ON v.PostId=p.Id\nWHERE v.VotetypeId=8\nGROUP BY p.Id, p.ViewCount\nORDER BY COUNT(v.BountyAmount) DESC",
        "CreationDate": "2019-05-01 15:50:10",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 1041819,
        "Title": "Flask Questions, Answered and Unanswered",
        "Description": null,
        "QueryBody": "WITH  Flask tag: 30115 *\/\nSELECT COUNT(Id) FROM Posts WHERE Tags LIKE '%flask%';\n\n\n\/* Number of questions WITH accepted answer WITH Flask tag *\/\nSELECT COUNT(Id) FROM Posts WHERE Tags LIKE '%flask%' and AcceptedAnswerId IS NULL;\n\n\n\/* Number of questions WITHout accepted answer WITH Flask tag *\/\nSELECT COUNT(Id) FROM Posts WHERE Tags LIKE '%flask%' and AcceptedAnswerId IS NOT NULL;",
        "CreationDate": "2019-05-04 21:50:39",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 1041828,
        "Title": " Who Favorited My Question?",
        "Description": null,
        "QueryBody": "SELECT  votes.userid as [User Link], posts.id as [Post Link] \nfrom votes\n  join posts on posts.id = votes.postid \nwhere\n  votetypeid=5 and\n  posts.PostTypeId = 1 and\n  posts.OwnerUserId = ##UserId## and\n  posts.Id= ##PostId##",
        "CreationDate": "2019-05-04 22:30:00",
        "validated": false,
        "QueryBody_Original": "SELECT  votes.userid as [User Link], posts.id as [Post Link] \nfrom votes\n  join posts on posts.id = votes.postid \nwhere\n  votetypeid=5 and\n  posts.PostTypeId = 1 and\n  posts.OwnerUserId = ##UserId## and\n  posts.Id= ##PostId##"
    },
    {
        "QuerySetId": 1042043,
        "Title": "Pending suggested edits on a single site",
        "Description": null,
        "QueryBody": "SELECT  'site:\/\/suggested-edits\/' + CAST(se.id AS NVARCHAR),\n       se.OwnerUserId AS [User Link],\n       se.CreationDate,\n       se.PostId AS [Post Link]\n  FROM SuggestedEdits AS se\n  WHERE se.OwnerUserId = ##UserId:int##\n    AND se.ApprovalDate IS NULL\n    AND se.RejectionDate IS NULL\n  ORDER BY se.CreationDate DESC",
        "CreationDate": "2019-05-05 13:21:30",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 1042589,
        "Title": "Users with more than one Suffrage badge",
        "Description": null,
        "QueryBody": "SELECT  userid as [User Link], [Suffrage]\nfrom(SELECT userid, [Suffrage] \nfrom (\n    SELECT id, userid, name from badges where tagbased = 0\n  ) as data\n  pivot \n  (count(data.id)\n    for name in ([Suffrage]\n    ) \n  ) pvt\n  where [Suffrage] > 1\n) main \ninner join users u on u.id = main.userid -- for reputation\norder by displayname",
        "CreationDate": "2019-05-07 10:22:45",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 1043118,
        "Title": "dates for getting edits and votes badges",
        "Description": null,
        "QueryBody": "SELECT  b.UserId, b.Name, b.Date as DateofBadge\nINTO #civic\nFROM Badges b\nWHERE \n    b.Name = 'Civic Duty'\n    \nSELECT b.UserId, b.Name, b.Date as DateofBadge\nINTO #electorate\nFROM Badges b\nWHERE\n    b.Name = 'Electorate'\n\n\nSELECT b.UserId, b.Name, b.Date as DateofBadge\nINTO #strunk\nFROM Badges b\nWHERE \n    b.Name = 'Strunk & White'\n\nSELECT b.UserId, b.Name, b.Date as DateofBadge\nINTO #copy\nFROM Badges b\nWHERE \n    b.Name = 'Copy Editor'\n\nSELECT #strunk.UserId, #strunk.DateofBadge as StrunkWhite, #copy.DateofBadge as CopyEditor\nFROM #strunk\nFULL OUTER JOIN #copy ON #strunk.UserId=#copy.UserId\nORDER BY #strunk.UserId;",
        "CreationDate": "2019-05-08 12:41:23",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 1044392,
        "Title": "How the expected score of the answers decrease with time",
        "Description": null,
        "QueryBody": "WITH  Raw AS (\n  SELECT\n    A.Id,\n    A.Score,\n    DATEDIFF(s, Q.CreationDate, A.CreationDate) AS Seconds\n  FROM Posts Q, Posts A\n  WHERE\n    A.ParentId = Q.Id\n    AND\n    A.CreationDate > Q.CreationDate\n    AND\n    Q.OwnerUserId != A.OwnerUserId\n    AND\n    Q.Id NOT IN (\n      SELECT PostId\n      FROM PostHistory\n      WHERE PostHistoryTypeId = 18\n    )\n),\nRaw2 AS (\n  SELECT\n    Id,\n    Score,\n    Seconds\n  FROM Raw\n  WHERE Seconds > 0\n),\nRaw3 AS (\n  SELECT\n    Id,\n    Score,\n    FLOOR(LOG(Seconds)\/LOG(##LogBase:float?2##)) AS LogSeconds\n  FROM Raw2\n),\nRaw4 AS (\n  SELECT\n    LogSeconds,\n    PERCENTILE_CONT(0.5) WITHIN GROUP(ORDER BY Score)\n      OVER (PARTITION BY LogSeconds) AS MedianScore\n  FROM Raw3\n)\nSELECT DISTINCT LogSeconds, MedianScore\nFROM Raw4\nORDER BY LogSeconds",
        "CreationDate": "2019-05-09 03:25:15",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 1044466,
        "Title": "Number of review tasks per day",
        "Description": null,
        "QueryBody": "SELECT  CreationDate,\n  [1] AS [Suggested Edits],\n  [2] AS [Close Votes],\n  [3] AS [Low Quality Posts],\n  [4] AS [First Posts],\n  [5] AS [Late Answers],\n  [6] AS [Reopen Votes]\nFROM (SELECT Id, ReviewTaskTypeId, CreationDate FROM ReviewTasks) AS temp\nPIVOT (COUNT(Id) FOR ReviewTaskTypeId IN ([1], [2], [3], [4], [5], [6])) AS pvt\nORDER BY CreationDate DESC",
        "CreationDate": "2019-05-09 11:40:03",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 1046179,
        "Title": "who linked to my posts? (user construction)",
        "Description": null,
        "QueryBody": "SELECT  \n  lnk.creationdate as DateLinked,\n  postid as linkin, \n  \n  relatedpostid as [Post Link],\n   p2.creationdate as origPostDate,\n   p2.owneruserid as [User Link],\n  \n  postid as [Post Link],\n  p1.creationdate as destPostDate,\n   p1.owneruserid as [User Link]\n   \n   \n   \nfrom postlinks lnk\n  left join posts p2 on lnk.relatedpostid=p2.id\n  left join posts p1 on lnk.postid=p1.id\nwhere \n  linktypeid=1 \n  and p2.owneruserid=##UserID##",
        "CreationDate": "2019-05-10 22:38:47",
        "validated": false,
        "QueryBody_Original": "SELECT  \n  lnk.creationdate as DateLinked,\n  postid as linkin, \n  \n  relatedpostid as [Post Link],\n   p2.creationdate as origPostDate,\n   p2.owneruserid as [User Link],\n  \n  postid as [Post Link],\n  p1.creationdate as destPostDate,\n   p1.owneruserid as [User Link]\n   \n   \n   \nfrom postlinks lnk\n  left join posts p2 on lnk.relatedpostid=p2.id\n  left join posts p1 on lnk.postid=p1.id\nwhere \n  linktypeid=1 \n  and p2.owneruserid=##UserID##"
    },
    {
        "QuerySetId": 1051641,
        "Title": "Breakdown of questions by score (in a given tag)",
        "Description": null,
        "QueryBody": "SELECT \n  COUNT(Id), Score\n FROM Posts\n WHERE PostTypeId=1 AND OwnerUserId=##uid## AND Tags LIKE '%<##tagName##>%'\n GROUP BY Score\n ORDER BY Score DESC",
        "CreationDate": "2019-05-15 07:25:23",
        "validated": false,
        "QueryBody_Original": "SELECT \n  COUNT(Id), Score\n FROM Posts\n WHERE PostTypeId=1 AND OwnerUserId=##uid## AND Tags LIKE '%<##tagName##>%'\n GROUP BY Score\n ORDER BY Score DESC"
    },
    {
        "QuerySetId": 1051642,
        "Title": "Breakdown of answers by score (in a given tag)",
        "Description": null,
        "QueryBody": "SELECT \n  COUNT(a.Id), a.Score\nFROM Posts a JOIN Posts q ON a.ParentId=q.Id\nWHERE a.OwnerUserId=##uid## and q.Tags LIKE '%<##tagName##>%'\nGROUP BY a.Score  \nORDER BY a.SCORE DESC",
        "CreationDate": "2019-05-15 07:28:49",
        "validated": false,
        "QueryBody_Original": "SELECT \n  COUNT(a.Id), a.Score\nFROM Posts a JOIN Posts q ON a.ParentId=q.Id\nWHERE a.OwnerUserId=##uid## and q.Tags LIKE '%<##tagName##>%'\nGROUP BY a.Score  \nORDER BY a.SCORE DESC"
    },
    {
        "QuerySetId": 1051996,
        "Title": "Breakdown of answers by score",
        "Description": null,
        "QueryBody": "SELECT \n  Score, COUNT(Id)\n FROM Posts\n WHERE PostTypeId=2 AND OwnerUserId=##uid?28111##\n GROUP BY Score\n ORDER BY Score DESC",
        "CreationDate": "2019-05-15 19:43:28",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 1052336,
        "Title": "Top users in given tag (including deleted users)",
        "Description": null,
        "QueryBody": "SELECT  TOP ##num?100##\n  OwnerUserId AS [User Link], OwnerDisplayName , SUM(Score), COUNT(Id)\nFROM Posts\nWHERE Tags LIKE '%<##tagName##>%'\nGROUP BY OwnerUserId, OwnerDisplayName\nORDER BY SUM(Score) DESC",
        "CreationDate": "2019-05-16 19:30:38",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 1052337,
        "Title": "Top answerers in the given tag (including deleted users)",
        "Description": null,
        "QueryBody": "SELECT  TOP ##num?100##\n  a.OwnerUserId AS [User Link], a.OwnerDisplayName , SUM(a.Score) AS [Total Score], COUNT(a.Id) AS [Num Answers]\nFROM Posts a JOIN Posts q ON a.ParentId=q.Id\nWHERE a.PostTypeId=2 AND q.Tags LIKE '%<##tagName##>%'\nGROUP BY a.OwnerUserId, a.OwnerDisplayName\nORDER BY SUM(a.Score) DESC",
        "CreationDate": "2019-12-19 11:26:48",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 1052339,
        "Title": "Top answerers in the given tag (including deleted users, only non-CW)",
        "Description": null,
        "QueryBody": "SELECT  TOP ##num?100##\n  a.OwnerUserId AS [User Link], a.OwnerDisplayName , SUM(a.Score) AS [Total Score], COUNT(a.Id) AS [Num Answers]\nFROM Posts a JOIN Posts q ON a.ParentId=q.Id\nWHERE a.PostTypeId=2 AND q.Tags LIKE '%<##tagName##>%' AND a.CommunityOwnedDate IS NULL\nGROUP BY a.OwnerUserId, a.OwnerDisplayName\nORDER BY SUM(a.Score) DESC",
        "CreationDate": "2019-12-19 11:25:45",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 1052578,
        "Title": "extracts colors mentioned in Q & A's",
        "Description": "color test",
        "QueryBody": "DECLARE  @pat varchar(99) = '%#[A-Fa-f0-9][A-Fa-f0-9][A-Fa-f0-9][A-Fa-f0-9][A-Fa-f0-9][A-Fa-f0-9]%'; --[\\; \\,''\\\"\\>]\nselect TOP 10000\n  id,\n  lower(substring(body,patindex(@pat,body),7)) as hex\ninto #temp\nfrom posts\nwhere \n  posttypeid in (1,2)\n  and deletiondate is null\n  and body like @pat;\n\nselect \n  hex, \n  count(id) as cnt \nfrom #temp \ngroup by hex\norder by count(id) desc",
        "CreationDate": "2019-05-17 09:28:20",
        "validated": false,
        "QueryBody_Original": "DECLARE  @pat varchar(99) = '%#[A-Fa-f0-9][A-Fa-f0-9][A-Fa-f0-9][A-Fa-f0-9][A-Fa-f0-9][A-Fa-f0-9]%'; --[\\; \\,''\\\"\\>]\nselect TOP 10000\n  id,\n  lower(substring(body,patindex(@pat,body),7)) as hex\ninto #temp\nfrom posts\nwhere \n  posttypeid in (1,2)\n  and deletiondate is null\n  and body like @pat;\n\nselect \n  hex, \n  count(id) as cnt \nfrom #temp \ngroup by hex\norder by count(id) desc"
    },
    {
        "QuerySetId": 1052871,
        "Title": "Current close vote review tasks by state",
        "Description": null,
        "QueryBody": "SELECT  count(*) 'Review tasks', \n       Name\nfrom ReviewTasks\n     join ReviewTaskStates rts on ReviewTaskStateId = rts.Id\nwhere ReviewTaskTypeId = 2\ngroup by Name",
        "CreationDate": "2019-05-18 02:30:42",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 1053106,
        "Title": "Add lock reasons to Data Explorer",
        "Description": "https:\/\/meta.stackexchange.com\/questions\/263921\/add-lock-reasons-to-data-explorer",
        "QueryBody": "SELECT   \n       pnt.name\n     , phl.creationdate\n     , pn.postid as [Post Link]\nfrom postnotices pn\ninner join postnoticetypes pnt on pnt.id = pn.postnoticetypeid\ninner join posthistory phl on phl.postid = pn.postid\n-- exclude posts that are no longer locked\nleft outer join posthistory phu on phu.postid = pn.postid \n                          and phu.posthistorytypeid = 15 -- unlock\n                          and phu.id > phl.id -- later\nwhere pnt.classid <> 2 -- bounty\nand phl.posthistorytypeid = 14 -- locked\nand phu.id is null\n\nSELECT *\nfrom postnoticetypes",
        "CreationDate": "2019-05-18 12:40:41",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 1053784,
        "Title": "Distribution of the number of review actions on close review tasks that were invalidated",
        "Description": null,
        "QueryBody": "DECLARE  @epoch as datetime = DATEADD(WEEK, - ##Weeks:int?52## - 1, CURRENT_TIMESTAMP);\n\nselect coalesce(total, 0) as '# Of Review Actions', \n       count(t.Id) as 'Count', \n       count(t.Id) * 100.0 \/ sum(count(*)) over () as 'Percent'\nfrom ReviewTasks t\nleft outer join (\n  select count(r.ReviewTaskId) as total, r.ReviewTaskId \n  from ReviewTaskResults r group by r.ReviewTaskId\n) \n  as counts\n  on t.Id = counts.ReviewTaskId \nwhere t.ReviewTaskTypeId = 2 -- Close\nand t.ReviewTaskStateId = 3 -- Invalid\nand t.CreationDate > @epoch\ngroup by total\norder by '# Of Review Actions';",
        "CreationDate": "2019-05-21 14:30:40",
        "validated": false,
        "QueryBody_Original": "DECLARE  @epoch as datetime = DATEADD(WEEK, - ##Weeks:int?52## - 1, CURRENT_TIMESTAMP);\n\nselect coalesce(total, 0) as '# Of Review Actions', \n       count(t.Id) as 'Count', \n       count(t.Id) * 100.0 \/ sum(count(*)) over () as 'Percent'\nfrom ReviewTasks t\nleft outer join (\n  select count(r.ReviewTaskId) as total, r.ReviewTaskId \n  from ReviewTaskResults r group by r.ReviewTaskId\n) \n  as counts\n  on t.Id = counts.ReviewTaskId \nwhere t.ReviewTaskTypeId = 2 -- Close\nand t.ReviewTaskStateId = 3 -- Invalid\nand t.CreationDate > @epoch\ngroup by total\norder by '# Of Review Actions';"
    },
    {
        "QuerySetId": 1054195,
        "Title": "listar as questoes com uma determinada palavra no titulo",
        "Description": null,
        "QueryBody": "DECLARE  @keyword nvarchar(35) = ##keyword:string##\n\nselect count(*)\nfrom Posts p \nWHERE p.PostTypeId = 2 \nAND p.Score < 0",
        "CreationDate": "2019-05-22 03:05:31",
        "validated": false,
        "QueryBody_Original": "DECLARE  @keyword nvarchar(35) = ##keyword:string##\n\nselect count(*)\nfrom Posts p \nWHERE p.PostTypeId = 2 \nAND p.Score < 0"
    },
    {
        "QuerySetId": 1054703,
        "Title": "Votes and Answers by Tag",
        "Description": null,
        "QueryBody": "DECLARE  @UserId int = ##UserId?47188##;\n\nSELECT \n    TagName,\n    Sum(Case when VoteTypeId = 3 then 0 when VoteTypeId = 2 then 1 else 0 end) AS Upvotes,\n    Sum(Case when VoteTypeId = 3 then 1 when VoteTypeId = 2 then 0 else 0 end) AS Downvotes,\n    Sum(Case when VoteTypeId = 3 then -1 when VoteTypeId = 2 then 1 else 0 end) AS Score, \n    Count(DISTINCT Posts.Id) AS Answers\nFROM Tags\n    INNER JOIN PostTags ON PostTags.TagId = Tags.id\n    INNER JOIN Posts ON Posts.ParentId = PostTags.PostId\n    INNER JOIN Votes ON Votes.PostId = Posts.Id\nWHERE \n    Posts.OwnerUserId = @UserId\n    AND Posts.CommunityOwnedDate IS NULL\nGROUP BY TagName \nORDER BY Score desc",
        "CreationDate": "2019-08-21 20:54:50",
        "validated": false,
        "QueryBody_Original": "DECLARE  @UserId int = ##UserId?47188##;\n\nSELECT \n    TagName,\n    Sum(Case when VoteTypeId = 3 then 0 when VoteTypeId = 2 then 1 else 0 end) AS Upvotes,\n    Sum(Case when VoteTypeId = 3 then 1 when VoteTypeId = 2 then 0 else 0 end) AS Downvotes,\n    Sum(Case when VoteTypeId = 3 then -1 when VoteTypeId = 2 then 1 else 0 end) AS Score, \n    Count(DISTINCT Posts.Id) AS Answers\nFROM Tags\n    INNER JOIN PostTags ON PostTags.TagId = Tags.id\n    INNER JOIN Posts ON Posts.ParentId = PostTags.PostId\n    INNER JOIN Votes ON Votes.PostId = Posts.Id\nWHERE \n    Posts.OwnerUserId = @UserId\n    AND Posts.CommunityOwnedDate IS NULL\nGROUP BY TagName \nORDER BY Score desc"
    },
    {
        "QuerySetId": 1054710,
        "Title": "Popular Tags over Time (By Questions)",
        "Description": null,
        "QueryBody": "SELECT  \n       num.TagName as Tag,\n       row_number() over (order by rate.Rate desc) as Rank,\n       row_number() over (order by num.Num desc) as TotalRank,\n       rate.Rate as 'Questions over Timeframe',\n       num.Num as QuestionsTotal\n\nfrom\n\n(SELECT count(PostId) as Rate, TagName\nfrom\n  Tags, PostTags, Posts\nwhere Tags.Id = PostTags.TagId and Posts.Id = PostId\nand Posts.CreationDate > ##Startdate:string?2019-01-01##\nand Posts.CreationDate < ##Enddate:string?2019-02-01##\n--and Not(ClosedDate = Null)\ngroup by TagName) as rate\n\nINNER JOIN\n\n(SELECT count(PostId) as Num, TagName\nfrom\n  Tags, PostTags, Posts\nwhere Tags.Id = PostTags.TagId and Posts.Id = PostId\ngroup by TagName\nhaving count(PostId) > 800)\nas num ON rate.TagName = num.TagName\norder by rate.rate desc\n;",
        "CreationDate": "2019-05-22 19:14:47",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 1054762,
        "Title": "User Rank and Hoarded Rep",
        "Description": null,
        "QueryBody": "DECLARE  @MinRep int = 1;\n\nSelect Top 1000\n  p.Id as [User Link], \n  p.Ranking, \n  substring(cast(Cast(Ranking as Decimal)\/Count*100.00 as varchar), 1,6) + '%' as Percentile,\n  Reputation,\n  substring(cast(Cast(Reputation as Decimal)\/Sum*100.00 as varchar), 1,6) + '%' as 'Hoarded rep'\nFrom\n  (Select \n    Id, \n    ROW_NUMBER() OVER(ORDER BY Reputation DESC) as Ranking,\n    Reputation\n  From Users\n  Where Reputation > @MinRep\n  ) as p,\n  (SELECT Count = COUNT(*)\n  FROM Users\n  Where Reputation > @MinRep\n  ) as Counts,\n  (Select Sum = Sum(Reputation)\n  From Users\n  Where Reputation > @MinRep\n  ) as Rep\n\n--Where p.Id = ##UserId?47188##\norder by ranking asc",
        "CreationDate": "2019-06-03 21:43:48",
        "validated": false,
        "QueryBody_Original": "DECLARE  @MinRep int = 1;\n\nSelect Top 1000\n  p.Id as [User Link], \n  p.Ranking, \n  substring(cast(Cast(Ranking as Decimal)\/Count*100.00 as varchar), 1,6) + '%' as Percentile,\n  Reputation,\n  substring(cast(Cast(Reputation as Decimal)\/Sum*100.00 as varchar), 1,6) + '%' as 'Hoarded rep'\nFrom\n  (Select \n    Id, \n    ROW_NUMBER() OVER(ORDER BY Reputation DESC) as Ranking,\n    Reputation\n  From Users\n  Where Reputation > @MinRep\n  ) as p,\n  (SELECT Count = COUNT(*)\n  FROM Users\n  Where Reputation > @MinRep\n  ) as Counts,\n  (Select Sum = Sum(Reputation)\n  From Users\n  Where Reputation > @MinRep\n  ) as Rep\n\n--Where p.Id = ##UserId?47188##\norder by ranking asc"
    },
    {
        "QuerySetId": 1055143,
        "Title": "Which questions have I answered more than once?",
        "Description": null,
        "QueryBody": "DECLARE  @UserId int = ##UserId##;\n\nSELECT\n  A.Id [Post Link],\n  DateAdd(hour, -7, A.CreationDate) CreationDate,\n  A.Score\nFROM\n  Posts Q\n  INNER JOIN dbo.Posts A\n     ON Q.Id = A.ParentId\nWHERE\n  Q.PostTypeId = 1\n  AND A.PostTypeId = 2\n  AND A.OwnerUserId = @UserId\n  AND EXISTS (\n    SELECT *\n    FROM\n      Posts D\n    WHERE\n      D.ParentId = Q.Id\n      AND D.OwnerUserId = @UserId\n      AND A.Id != D.Id\n  )\nORDER BY\n  Q.Id,\n  A.CreationDate;",
        "CreationDate": "2019-05-24 03:47:41",
        "validated": false,
        "QueryBody_Original": "DECLARE  @UserId int = ##UserId##;\n\nSELECT\n  A.Id [Post Link],\n  DateAdd(hour, -7, A.CreationDate) CreationDate,\n  A.Score\nFROM\n  Posts Q\n  INNER JOIN dbo.Posts A\n     ON Q.Id = A.ParentId\nWHERE\n  Q.PostTypeId = 1\n  AND A.PostTypeId = 2\n  AND A.OwnerUserId = @UserId\n  AND EXISTS (\n    SELECT *\n    FROM\n      Posts D\n    WHERE\n      D.ParentId = Q.Id\n      AND D.OwnerUserId = @UserId\n      AND A.Id != D.Id\n  )\nORDER BY\n  Q.Id,\n  A.CreationDate;"
    },
    {
        "QuerySetId": 1056811,
        "Title": "Count of users by posts",
        "Description": null,
        "QueryBody": "WITH  Raw AS (\n  SELECT PostTypeId, OwnerUserId AS UserId, COUNT(*) AS PostCount\n  FROM Posts\n  WHERE PostTypeId <= 2\n  GROUP BY PostTypeId, OwnerUserId\n),\nRaw2 AS (\n  SELECT PostTypeId, PostCount, COUNT(*) AS UserCount\n  FROM Raw\n  GROUP BY PostTypeId, PostCount\n)\nSELECT Raw2.PostCount, PostTypes.Name, Raw2.UserCount\nFROM Raw2, PostTypes\nWHERE\n  Raw2.PostTypeId = PostTypes.Id\n  AND\n  Raw2.PostCount < ##MaxPostCount:int?30##\nORDER BY Raw2.PostCount, Raw2.PostTypeId;",
        "CreationDate": "2019-05-28 13:39:18",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 1058887,
        "Title": "Suspicious question deletions from the last week",
        "Description": "Lists the questions deleted in the last week, ordered by the sum of their score + the sum of the score of their positively scored answers. On the top of the list might be unfair question deletions! Citing the relevant directive: *\"Before voting to delete, please check whether there are any good answers; [...] We don't like to lose great answers!\"*",
        "QueryBody": "DECLARE  @From DATETIME;\nSELECT @From = DATEADD(d, -7, MAX(CreationDate)) FROM Votes;\n\nSELECT @From;",
        "CreationDate": "2019-05-31 00:51:05",
        "validated": false,
        "QueryBody_Original": "DECLARE  @From DATETIME;\nSELECT @From = DATEADD(d, -7, MAX(CreationDate)) FROM Votes;\n\nSELECT @From;"
    },
    {
        "QuerySetId": 1059022,
        "Title": "Select the number of questions for a given tag name",
        "Description": null,
        "QueryBody": "SELECT \n   count\nfrom\n   tags\nwhere\n   tagName = ##tagname:string##\n;\n\n--\n-- The count in tags for a given tagId\n-- seems to correspond to the following query:\n--\n-- SELECT\n--    count(*)\n-- from\n--    postTags\n-- where\n--    tagId = ...\n--",
        "CreationDate": "2019-05-31 11:39:53",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 1059656,
        "Title": "Average post length by rep, date",
        "Description": null,
        "QueryBody": "SELECT \n  Count(*) AS [Answer count],\n  \/*Count(Len(p.Body)) AS [LongAns],*\/\n  Min(Len(p.Body)) AS [Min],\n  Avg(Len(p.Body)) AS [Average],\n  Max(Len(p.Body)) AS [Max],\n  MONTH(p.CreationDate) AS [Month],\n  YEAR(p.CreationDate) AS [Year]\n  \nFROM Users u, Posts p\nWHERE p.OwnerUserId = u.Id\n  AND p.PostTypeId = 2\n  AND p.CreationDate BETWEEN ##StartDate:string## AND ##EndDate:string##\n  AND u.Reputation > ##MaxReputation:int##\n  \/*AND LEN(p.body) > ##AnswerLength:int##*\/\n \nGROUP BY MONTH(p.CreationDate), YEAR(p.CreationDate)\nORDER BY [year], [month]\n\n-- StartDate: Starting date, YYYY-MM-DD\n-- EndDate: Ending date, YYYY-MM-DD\n-- MaxReputation: Show results for users with reputation above this value\n\/*-- AnswerLength: Show # of answers with more characters than*\/",
        "CreationDate": "2019-06-15 00:08:41",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 1060857,
        "Title": "Username of a given user",
        "Description": null,
        "QueryBody": "SELECT  Displayname\nFROM Users\nWHERE Id=##num##",
        "CreationDate": "2019-06-04 19:53:10",
        "validated": false,
        "QueryBody_Original": "SELECT  Displayname\nFROM Users\nWHERE Id=##num##"
    },
    {
        "QuerySetId": 1061941,
        "Title": "Constituent Badges for Election 7",
        "Description": null,
        "QueryBody": "SELECT \n  Id as BadgeId,\n  UserId,\n  DATEDIFF(second, {d '1970-01-01'}, Date) as Timestamp\nFROM Badges\nWHERE Name = 'Constituent'\nAND Date BETWEEN ##DayBefore## AND ##DayAfter##",
        "CreationDate": "2020-05-05 16:44:02",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 1061942,
        "Title": "Questions protected by a user",
        "Description": null,
        "QueryBody": "SELECT  PostId AS [Post Link], CreationDate AS [Protection date]\n  FROM PostHistory\n  WHERE PostHistoryTypeId = 19 -- Question Protected\n    AND UserId = ##UserId:int##\n  ORDER BY CreationDate DESC",
        "CreationDate": "2019-06-07 18:26:49",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 1062129,
        "Title": "Top answerers in a recent week with 3+ answers per day on average",
        "Description": null,
        "QueryBody": "DECLARE  @PeriodDays AS int = ##PeriodDays:int?7##;\n\nSELECT TOP 500\n  u.Id AS [User Link],\n  COUNT(*) AS AnswerCount,\n  SUM(Score) AS TotalScore,\n  AVG(Score) AS AverageScore,\n  u.Reputation\n  \nFROM Posts AS p JOIN Users AS u\n  ON p.OwnerUserId = u.Id\n\nWHERE PostTypeId = 2\n  AND p.CreationDate >= DATEADD(DAY, -3 * @PeriodDays, GETDATE())\n  AND p.CreationDate < DATEADD(DAY, -2 * @PeriodDays, GETDATE())\n\nGROUP BY u.Id, u.Reputation\nHAVING COUNT(*) >= @PeriodDays * 3\nORDER BY AnswerCount DESC",
        "CreationDate": "2019-06-08 15:05:42",
        "validated": false,
        "QueryBody_Original": "DECLARE  @PeriodDays AS int = ##PeriodDays:int?7##;\n\nSELECT TOP 500\n  u.Id AS [User Link],\n  COUNT(*) AS AnswerCount,\n  SUM(Score) AS TotalScore,\n  AVG(Score) AS AverageScore,\n  u.Reputation\n  \nFROM Posts AS p JOIN Users AS u\n  ON p.OwnerUserId = u.Id\n\nWHERE PostTypeId = 2\n  AND p.CreationDate >= DATEADD(DAY, -3 * @PeriodDays, GETDATE())\n  AND p.CreationDate < DATEADD(DAY, -2 * @PeriodDays, GETDATE())\n\nGROUP BY u.Id, u.Reputation\nHAVING COUNT(*) >= @PeriodDays * 3\nORDER BY AnswerCount DESC"
    },
    {
        "QuerySetId": 1062304,
        "Title": "Number of comments by a specific user depending on hour in a day",
        "Description": null,
        "QueryBody": "DECLARE  @Frequency int = ##Frequency:int?3##\nDECLARE @UserId int = ##UserId:int##\n\n;WITH tmp AS\n(SELECT Id,\n  Period = CASE @Frequency\n    WHEN 1 THEN DATEPART(\"hour\", CreationDate)\n    WHEN 2 THEN DATEPART(\"weekday\", CreationDate)\n    WHEN 3 THEN ROUND((CAST(DATEPART(\"weekday\", CreationDate) AS numeric)\n    + CAST(DATEPART(\"hour\", CreationDate) AS numeric) \/ 24), 2) END\nFROM Comments\nWHERE UserId = @UserId)\nSELECT Period, COUNT(*) AS number,\nROUND((COUNT(*)*100.0\/(SELECT COUNT(*) FROM tmp)),2) AS percentage\nFROM tmp\nGROUP BY Period\nORDER BY Period",
        "CreationDate": "2019-06-09 15:08:09",
        "validated": false,
        "QueryBody_Original": "DECLARE  @Frequency int = ##Frequency:int?3##\nDECLARE @UserId int = ##UserId:int##\n\n;WITH tmp AS\n(SELECT Id,\n  Period = CASE @Frequency\n    WHEN 1 THEN DATEPART(\"hour\", CreationDate)\n    WHEN 2 THEN DATEPART(\"weekday\", CreationDate)\n    WHEN 3 THEN ROUND((CAST(DATEPART(\"weekday\", CreationDate) AS numeric)\n    + CAST(DATEPART(\"hour\", CreationDate) AS numeric) \/ 24), 2) END\nFROM Comments\nWHERE UserId = @UserId)\nSELECT Period, COUNT(*) AS number,\nROUND((COUNT(*)*100.0\/(SELECT COUNT(*) FROM tmp)),2) AS percentage\nFROM tmp\nGROUP BY Period\nORDER BY Period"
    },
    {
        "QuerySetId": 1063394,
        "Title": " Select the number of questions for a given tag name",
        "Description": null,
        "QueryBody": "SELECT \n   count\nfrom\n   tags\nwhere\n   tagName = ##tagname:string##\n;",
        "CreationDate": "2019-06-11 12:22:25",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 1064392,
        "Title": "Score and posts per tag",
        "Description": null,
        "QueryBody": "SELECT  t.TagName, SUM(a.Score) AS Score\n  FROM Posts AS q\n  INNER JOIN Posts AS a\n    ON a.ParentId = q.Id\n  INNER JOIN PostTags AS pt\n    ON q.Id = pt.PostId\n  INNER JOIN Tags AS t\n    ON t.Id = pt.TagId\n  WHERE a.OwnerUserId = ##UserId:int##\n    AND a.CommunityOwnedDate IS NULL -- exclude Community Wikis\n  GROUP BY t.TagName\n  ORDER BY SUM(a.Score) DESC",
        "CreationDate": "2019-06-13 13:16:48",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 1064545,
        "Title": "How many lights are on?",
        "Description": null,
        "QueryBody": "DECLARE  @ varchar(max)= 'v>v<^^<v<<^<^><<>^^>>><v>vv^v>v^><><<^>><<<vvv^vvv>v>>v><vv^^<<>vv^^>v^<>>^^<^^>^^v<^>^<vvv^v^v><^<<v<<>><<>v>>^><^>^^<>>>>vv>^<<^<<><vvv<v^>>vvv>v^>>><<v^>^^^^v>>^>^v>v<vv^<>^<<v>vv>><^^<^><vv^^v<v<v^^^>v<^vv^v<><vv^^^>v^>v>vv<<^><v<^v><<v^^v>>v<vv<><^^^v<^v><><<^^<>^>><^^^>vv^<>>>>^<^<<<<>>>v<<v<v<vv><<vv<vv<^v^^^>>vv<>v>><<<v^>vv><v<<<v<<>^vvv^<v^v>^^v^v><<v^>>>v<v<v^>>>v><>>>^<><<<<>vv>v><v>v><^v<>v>>>vv<<>^>^>v<^><^<^vv^><^^>v<^^v>v^v<^^^^vv<>v<>><v^^><>v<<<>v^<v^^><>^<>^<>><>^^<>^v><>>><v<^^>>v>^^^<v';\n\nWITH C as(SELECT 0 a,b=1UNION ALL SELECT\na+POWER(CHARINDEX(SUBSTRING(@,b,1),'> <v')-2,15),b+1FROM\nC WHERE b<=LEN(@))SELECT top\n1sum(sum(1-1\/b)%2)over()FROM c\nGROUP BY a OPTION(MAXRECURSION 0)",
        "CreationDate": "2019-06-13 18:21:24",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 1066221,
        "Title": "Questions post by users in the given list",
        "Description": null,
        "QueryBody": "SELECT  Id AS [Post Link], OwnerDisplayName, CreationDate, Score, Tags\nFROM Posts\nWHERE PostTypeId=1 AND OwnerDisplayName IN (##list##)\nORDER BY Id DESC",
        "CreationDate": "2019-06-16 09:43:44",
        "validated": false,
        "QueryBody_Original": "SELECT  Id AS [Post Link], OwnerDisplayName, CreationDate, Score, Tags\nFROM Posts\nWHERE PostTypeId=1 AND OwnerDisplayName IN (##list##)\nORDER BY Id DESC"
    },
    {
        "QuerySetId": 1066222,
        "Title": "Questions posted by users from the given list",
        "Description": null,
        "QueryBody": "SELECT  Id AS [Post Link], \n  concat('site:\/\/posts\/',\n          Id,\n          '\/revisions'\n          ) [Revisions Link],\n  OwnerDisplayName, CreationDate, Score, Tags\nFROM Posts\nWHERE PostTypeId=1 AND OwnerDisplayName IN (##list##)\nORDER BY Id DESC",
        "CreationDate": "2019-06-16 10:23:06",
        "validated": false,
        "QueryBody_Original": "SELECT  Id AS [Post Link], \n  concat('site:\/\/posts\/',\n          Id,\n          '\/revisions'\n          ) [Revisions Link],\n  OwnerDisplayName, CreationDate, Score, Tags\nFROM Posts\nWHERE PostTypeId=1 AND OwnerDisplayName IN (##list##)\nORDER BY Id DESC"
    },
    {
        "QuerySetId": 1066280,
        "Title": "Answers posted by users from a given list",
        "Description": null,
        "QueryBody": "SELECT  Id AS [Post Link], \n  OwnerDisplayName, CreationDate, Score\nFROM Posts\nWHERE PostTypeId=2 AND OwnerDisplayName IN (##list##)\nORDER BY Id DESC",
        "CreationDate": "2019-06-16 13:50:28",
        "validated": false,
        "QueryBody_Original": "SELECT  Id AS [Post Link], \n  OwnerDisplayName, CreationDate, Score\nFROM Posts\nWHERE PostTypeId=2 AND OwnerDisplayName IN (##list##)\nORDER BY Id DESC"
    },
    {
        "QuerySetId": 1066458,
        "Title": "How many users have never voted",
        "Description": null,
        "QueryBody": "SELECT  count(*)\n--from users\n--where id not in (SELECT id from votes)\n\nWITH \"VOTE-CTE\" AS \n    (\n    SELECT id FROM users\n    EXCEPT\n    SELECT userID FROM votes  \n    )\nSELECT COUNT(*)\nFROM \"VOTE-CTE\"",
        "CreationDate": "2019-06-16 23:18:50",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 1066802,
        "Title": "Edits by a given user with edit summary containing given word",
        "Description": null,
        "QueryBody": "SELECT  DISTINCT PostId as [Post Link], Comment, UserId as [User Link], CreationDate,\n  url = 'site:\/\/posts\/' + CAST(PostId AS varchar)+'\/revisions'\nFrom PostHistory\nWhere Comment Like '%##keyword##%'\n  and UserId=##id##\nOrder By CreationDate",
        "CreationDate": "2019-06-17 19:05:01",
        "validated": false,
        "QueryBody_Original": "SELECT  DISTINCT PostId as [Post Link], Comment, UserId as [User Link], CreationDate,\n  url = 'site:\/\/posts\/' + CAST(PostId AS varchar)+'\/revisions'\nFrom PostHistory\nWhere Comment Like '%##keyword##%'\n  and UserId=##id##\nOrder By CreationDate"
    },
    {
        "QuerySetId": 1066851,
        "Title": "Answers containing a macro defined in the question",
        "Description": null,
        "QueryBody": "DECLARE MathOperator{##text##}%')\n    OR (c.Text LIKE '%\\def{##text##}%'))\n  AND ((p.Body LIKE '%\\newcommand{\\##text##}%')\n    OR (p.Body LIKE '%\\newcommand\\##text##%')\n    OR (p.Body LIKE '%\\newcommand{##text##}%')\n    OR (p.Body LIKE '%\\renewcommand{\\##text##}%')\n    OR (p.Body LIKE '%\\renewcommand\\##text##%')\n    OR (p.Body LIKE '%\\renewcommand{##text##}%')\n    OR (p.Body LIKE '%\\DECLAREMathOperator{\\##text##}%')\n    OR (p.Body LIKE '%\\DECLAREMathOperator{##text##}%')\n    OR (p.Body LIKE '%\\DECLAREMathOperator\\##text##%')\n    OR (p.Body LIKE '%\\def\\##text##%'))\nORDER BY c.CreationDate DESC",
        "CreationDate": "2019-06-17 20:39:20",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 1067324,
        "Title": "Select users who registered before a given date",
        "Description": null,
        "QueryBody": "SELECT  TOP 100 Id as [User Link],\n       Reputation,\n       CreationDate as [Account creation on],\n       LastAccessDate as [Last login on]\n       FROM Users\n       WHERE CreationDate < ##CreationDate:string##\n             AND Reputation > ##Reputation:int##\n       ORDER BY CreationDate DESC",
        "CreationDate": "2019-06-18 20:21:52",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 1067346,
        "Title": "Accepted answers to questions old more than a period",
        "Description": null,
        "QueryBody": "SELECT  TOP ##ResultCount:int##\n       q.Id as [Post Link],\n       q.Score as [Question scored],\n       u.Id as [User Link],\n       q.CreationDate as [Asked on],\n       a.Id as [Post Link],\n       a.Score as [Answer scored],\n       a.CreationDate as [Answered on],\n       au.Id as [User Link]\n       FROM Posts q\n       JOIN Posts a ON q.AcceptedAnswerId = a.Id\n       JOIN Users u ON q.OwnerUserId = u.Id\n       JOIN Users au ON a.OwnerUserId = au.Id\n       WHERE q.PostTypeId = 1\n             AND DATEDIFF(month, q.CreationDate, a.CreationDate) >= 6\n             ORDER BY q.Id DESC",
        "CreationDate": "2019-06-18 21:32:43",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 1068155,
        "Title": "The oldest questions on the site",
        "Description": null,
        "QueryBody": "SELECT  TOP(##num?100##)\n  Id, Id AS [Post Link], CreationDate, OwnerUserId AS [User Link], Score, ViewCount\nFROM Posts\nWHERE PostTypeId=1\nORDER BY CreationDate ASC",
        "CreationDate": "2019-06-20 20:29:41",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 1069043,
        "Title": "HNQs posted by deleted users from a given list",
        "Description": null,
        "QueryBody": "SELECT  p.Id AS [Post Link], \n  concat('site:\/\/posts\/',\n          p.Id,\n          '\/revisions'\n          ) [Revisions Link],\n  p.OwnerDisplayName, p.CreationDate, p.Score, p.Tags\nFROM Posts p JOIN PostHistory h ON p.Id=h.PostId\nWHERE h.PostHistoryTypeId=52 AND p.PostTypeId=1 \n  AND p.OwnerDisplayName IN (##list##)\nORDER BY p.Id DESC\n---52 = Question became hot network question",
        "CreationDate": "2019-06-24 12:16:49",
        "validated": false,
        "QueryBody_Original": "SELECT  p.Id AS [Post Link], \n  concat('site:\/\/posts\/',\n          p.Id,\n          '\/revisions'\n          ) [Revisions Link],\n  p.OwnerDisplayName, p.CreationDate, p.Score, p.Tags\nFROM Posts p JOIN PostHistory h ON p.Id=h.PostId\nWHERE h.PostHistoryTypeId=52 AND p.PostTypeId=1 \n  AND p.OwnerDisplayName IN (##list##)\nORDER BY p.Id DESC\n---52 = Question became hot network question"
    },
    {
        "QuerySetId": 1069071,
        "Title": "Most badges compared to reputation",
        "Description": null,
        "QueryBody": "DECLARE  @GoldWeight   INT = 3\nDECLARE @SilverWeight INT = 2\nDECLARE @BronzeWeight INT = 1\n\nDECLARE @GoldClass   INT = 1\nDECLARE @SilverClass INT = 2\nDECLARE @BronzeClass INT = 3\n\nSELECT TOP 1000 *\n      --u.Id\n    --, COUNT(*)\nFROM Users u\n  INNER JOIN Badges b ON u.Id = b.UserId\nWHERE u.Id = 8574934\n--GROUP BY u.Id\n--ORDER BY (Reputation\/XXX)",
        "CreationDate": "2019-06-24 13:58:28",
        "validated": false,
        "QueryBody_Original": "DECLARE  @GoldWeight   INT = 3\nDECLARE @SilverWeight INT = 2\nDECLARE @BronzeWeight INT = 1\n\nDECLARE @GoldClass   INT = 1\nDECLARE @SilverClass INT = 2\nDECLARE @BronzeClass INT = 3\n\nSELECT TOP 1000 *\n      --u.Id\n    --, COUNT(*)\nFROM Users u\n  INNER JOIN Badges b ON u.Id = b.UserId\nWHERE u.Id = 8574934\n--GROUP BY u.Id\n--ORDER BY (Reputation\/XXX)"
    },
    {
        "QuerySetId": 1069081,
        "Title": "Comments on questions in a given tag",
        "Description": null,
        "QueryBody": "SELECT  TOP(##num?500##)\nc.Id AS [Comment Link], c.UserId AS [User Link], c.CreationDate, c.Text, q.Id AS [Post Link]\nFROM Comments c JOIN Posts q ON c.Postid=q.Id\nWHERE q.Tags LIKE '%<##tagName##>%'\nORDER BY c.Id DESC",
        "CreationDate": "2019-06-24 14:42:02",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 1069098,
        "Title": "Comments on answers in a given tag",
        "Description": null,
        "QueryBody": "SELECT  TOP(##num?500##)\nc.Id AS [Comment Link], c.UserId AS [User Link], c.CreationDate, c.Text, a.Id AS [Post Link]\nFROM Comments c JOIN Posts a ON c.Postid=a.Id JOIN Posts q ON a.ParentId=q.Id\nWHERE q.Tags LIKE '%<##tagName##>%'\nORDER BY c.Id DESC",
        "CreationDate": "2019-06-24 15:11:42",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 1069126,
        "Title": "Top badge holders compared to reputation",
        "Description": "Find users with the highest badge score compared to reputation. Badge score is calculated as:\r\n\r\nScore = gold weight * no. gold badges + silver weight * no. silver badges + bronze weight + no. bronze badges",
        "QueryBody": "DECLARE  @MinimumReputation INT = 3000\n\n-- Config:\n\nDECLARE @GoldWeight   INT = 3\nDECLARE @SilverWeight INT = 2\nDECLARE @BronzeWeight INT = 1\n\nDECLARE @GoldClass   INT = 1\nDECLARE @SilverClass INT = 2\nDECLARE @BronzeClass INT = 3\n\n-- Query:\n\nSELECT TOP 1000\n      u.Id\n    , u.Reputation\n    , CAST(SUM(\n           CASE b.Class\n             WHEN @GoldClass   THEN 1\n             WHEN @SilverClass THEN 0\n             WHEN @BronzeClass THEN 0\n             ELSE 0\n           END\n           )\/CAST(u.Reputation AS DECIMAL(10, 2)) AS DECIMAL(5, 5)) AS 'RATIO'\n    , SUM(CASE b.Class WHEN @GoldClass   THEN 1 ELSE 0 END) AS 'Gold badges'\nFROM Users u\n  INNER JOIN Badges b ON u.Id = b.UserId\nWHERE u.Reputation <> 1\n  AND @MinimumReputation <= u.Reputation\nGROUP BY u.Id, u.Reputation\nORDER BY RATIO DESC",
        "CreationDate": "2019-08-26 16:55:54",
        "validated": false,
        "QueryBody_Original": "DECLARE  @MinimumReputation INT = 3000\n\n-- Config:\n\nDECLARE @GoldWeight   INT = 3\nDECLARE @SilverWeight INT = 2\nDECLARE @BronzeWeight INT = 1\n\nDECLARE @GoldClass   INT = 1\nDECLARE @SilverClass INT = 2\nDECLARE @BronzeClass INT = 3\n\n-- Query:\n\nSELECT TOP 1000\n      u.Id\n    , u.Reputation\n    , CAST(SUM(\n           CASE b.Class\n             WHEN @GoldClass   THEN 1\n             WHEN @SilverClass THEN 0\n             WHEN @BronzeClass THEN 0\n             ELSE 0\n           END\n           )\/CAST(u.Reputation AS DECIMAL(10, 2)) AS DECIMAL(5, 5)) AS 'RATIO'\n    , SUM(CASE b.Class WHEN @GoldClass   THEN 1 ELSE 0 END) AS 'Gold badges'\nFROM Users u\n  INNER JOIN Badges b ON u.Id = b.UserId\nWHERE u.Reputation <> 1\n  AND @MinimumReputation <= u.Reputation\nGROUP BY u.Id, u.Reputation\nORDER BY RATIO DESC"
    },
    {
        "QuerySetId": 1069630,
        "Title": "Inactive users with the most reputation",
        "Description": null,
        "QueryBody": "SELECT  TOP 100 Id AS [User Link], Reputation, LastAccessDate\n  FROM Users\n  WHERE LastAccessDate <= ##lastAccessDate:string?2019-01-01##\n  ORDER BY Reputation DESC\n  \n-- lastAccessDate: last access date in yyyy-MM-dd format, e.g. 2019-01-01",
        "CreationDate": "2019-06-25 12:47:29",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 1069887,
        "Title": "Number of up- and downvotes for a single post",
        "Description": null,
        "QueryBody": "SELECT  SUM(CASE VoteTypeId WHEN 2 THEN 1 ELSE 0 END) AS 'Upvotes',\n       SUM(CASE VoteTypeId WHEN 3 THEN 1 ELSE 0 END) AS 'Downvotes'\n  FROM Votes\n  WHERE PostId = ##postID:int##",
        "CreationDate": "2019-06-25 22:19:48",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 1070416,
        "Title": "Posts containing snippets (by tag)",
        "Description": null,
        "QueryBody": "SELECT  p.Id AS [Post Link],\n  CASE p.PostTypeId WHEN 1 THEN 'Question' ELSE 'Answer' END AS 'Type',\n  p.CreationDate, p.Score\n  FROM Posts AS p\n  LEFT OUTER JOIN Posts AS q\n    ON p.ParentId = q.Id\n  INNER JOIN PostTags AS pt\n    ON pt.PostId = COALESCE(q.Id, p.Id)\n  INNER JOIN Tags AS t\n    ON pt.TagId = t.Id\n  WHERE t.TagName = ##tagName:string##\n    AND p.CreationDate >= '2019-06-01'\n    AND p.Body LIKE '%<div class=\"snippet\"%'",
        "CreationDate": "2019-06-26 18:43:30",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 1071715,
        "Title": "Top scoring comments for a user (and whether user owned a Q or A on that thread)",
        "Description": null,
        "QueryBody": "SELECT  TOP 2200\n            c.Id As [Comment Link]\n            , c.Score\n            , c.PostId As [Post Link]\n            , c.Text\n            , c.CreationDate\n            , [Posts on that Q&A] = (\n                SELECT  COUNT (p.Id)\n                FROM    Posts p\n                WHERE   p.OwnerUserId = ##UserId##\n                AND (\n                        p.Id = c.PostId\n                        OR\n                        p.ParentId = c.PostId\n                        OR\n                        p.ParentId = (SELECT o.ParentId  FROM Posts o  WHERE o.Id = c.PostId)\n                )\n            )\nFROM        Comments c\nWHERE       c.UserId = ##UserId##\nORDER BY    c.Score DESC, c.PostId, c.CreationDate",
        "CreationDate": "2019-06-29 03:38:56",
        "validated": false,
        "QueryBody_Original": "SELECT  TOP 2200\n            c.Id As [Comment Link]\n            , c.Score\n            , c.PostId As [Post Link]\n            , c.Text\n            , c.CreationDate\n            , [Posts on that Q&A] = (\n                SELECT  COUNT (p.Id)\n                FROM    Posts p\n                WHERE   p.OwnerUserId = ##UserId##\n                AND (\n                        p.Id = c.PostId\n                        OR\n                        p.ParentId = c.PostId\n                        OR\n                        p.ParentId = (SELECT o.ParentId  FROM Posts o  WHERE o.Id = c.PostId)\n                )\n            )\nFROM        Comments c\nWHERE       c.UserId = ##UserId##\nORDER BY    c.Score DESC, c.PostId, c.CreationDate"
    },
    {
        "QuerySetId": 1071909,
        "Title": "Posts containing the given word",
        "Description": null,
        "QueryBody": "SELECT  DISTINCT TOP ##num?100## \n  p.Id AS [Post Link], p.OwnerUserId AS [User Link], p.LastActivityDate, p.CreationDate,\n  url = 'site:\/\/posts\/' + CAST(p.Id AS varchar)+'\/revisions'\nFROM Posts p JOIN PostHistory ph ON (ph.PostId=p.Id)\nWHERE (p.Body LIKE '%##word?\\let##%')\nORDER BY p.LastActivityDate DESC",
        "CreationDate": "2019-06-30 08:40:51",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 1073711,
        "Title": "SELECT * Tags where TagName = 'kotlin' OR TagName = 'kotlin-*'",
        "Description": null,
        "QueryBody": "SELECT  Tags.TagName, Tags.Count from Tags where TagName like 'kotlin-%' or TagName = 'kotlin'  or \nTagName = 'Go' or\nTagName Like 'Go-&' or\nTagName = 'Rust' or\nTagName Like 'Rust-%' or\nTagName = 'Nim' or \nTagName Like 'Nim-%'\n\n\nSELECT top(10) * FROM Posts where Tags like '%kotlin%'",
        "CreationDate": "2019-07-04 15:39:30",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 1073733,
        "Title": "List of Users in a given location and keyword contained in \"about me\"",
        "Description": "This query lists all users in a given location and keyword sorted by reputation.\r\n\r\nEnter \"Germany\" or \"Deutschland\" in the location field.\r\nEnter \"Java\" in the keyword field.\r\n\r\nPress \"Run Query\" \r\n\r\ncredits to https:\/\/data.stackexchange.com\/meta.stackexchange\/query\/3631\/list-of-users-in-a-given-location\r\n",
        "QueryBody": "DECLARE  @location varchar = ##location##\nselect  Id as [User Link], location, WebsiteUrl, reputation\nfrom users \nwhere lower(location) like lower('%##location##%')\nand lower(AboutMe) like lower('%##keyword##%')\norder by reputation desc",
        "CreationDate": "2019-07-04 15:16:28",
        "validated": false,
        "QueryBody_Original": "DECLARE  @location varchar = ##location##\nselect  Id as [User Link], location, WebsiteUrl, reputation\nfrom users \nwhere lower(location) like lower('%##location##%')\nand lower(AboutMe) like lower('%##keyword##%')\norder by reputation desc"
    },
    {
        "QuerySetId": 1073932,
        "Title": "10 Random User IDs with Reputation Threshold",
        "Description": null,
        "QueryBody": "DECLARE  @rep int = ##Reputation##\n\nSELECT TOP 10 Id\nFROM Users\nWHERE Reputation >= @rep\nORDER By NEWID()",
        "CreationDate": "2019-07-05 07:59:08",
        "validated": false,
        "QueryBody_Original": "DECLARE  @rep int = ##Reputation##\n\nSELECT TOP 10 Id\nFROM Users\nWHERE Reputation >= @rep\nORDER By NEWID()"
    },
    {
        "QuerySetId": 1074352,
        "Title": "Find comments with specified text by specified user",
        "Description": null,
        "QueryBody": "SELECT  \n  c.Id AS \"Comment ID\",\n  c.CreationDate AS \"Comment Date\", \n  u.Id AS \"User ID\", \n  u.DisplayName AS \"User Name\", \n  c.PostId AS [Post Link]\nFROM Comments c\n  JOIN Users u ON u.Id = c.UserId\nWHERE c.Text LIKE '%##SpecifiedText##%'\nAND c.UserId = ##UserId:int##",
        "CreationDate": "2019-07-06 21:53:40",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 1074444,
        "Title": "Comments by a specific users containing a given word",
        "Description": null,
        "QueryBody": "SELECT  Id AS [Comment Link], text, UserId AS [User Link], CreationDate\nFROM Comments\nWHERE (Text LIKE '%##Word##%') AND (UserID=##userid##)\nORDER BY CreationDate",
        "CreationDate": "2019-07-07 09:25:35",
        "validated": false,
        "QueryBody_Original": "SELECT  Id AS [Comment Link], text, UserId AS [User Link], CreationDate\nFROM Comments\nWHERE (Text LIKE '%##Word##%') AND (UserID=##userid##)\nORDER BY CreationDate"
    },
    {
        "QuerySetId": 1075209,
        "Title": "Questions which were in HNQ",
        "Description": null,
        "QueryBody": "SELECT  TOP(##num?500##) p.Id AS [Post Link],\n  concat('site:\/\/posts\/',\n          p.Id,\n          '\/revisions'\n          ) [Revisions Link],\n  p.OwnerUserId AS [User Link], p.Score, p.CreationDate, p.ViewCount, p.AnswerCount, p. Tags\nFROM PostHistory ph INNER JOIN Posts p ON ph.PostId=p.Id\nWHERE ph.PostHistoryTypeId=52\nORDER BY p.Id DESC",
        "CreationDate": "2019-07-09 08:32:01",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 1075210,
        "Title": "Questions which were in HNQ between two dates",
        "Description": null,
        "QueryBody": "SELECT  TOP(##num?500##) p.Id AS [Post Link],\n  concat('site:\/\/posts\/',\n          p.Id,\n          '\/revisions'\n          ) [Revisions Link],\n  p.OwnerUserId AS [User Link], p.Score, p.CreationDate, p.ViewCount, p.AnswerCount, p. Tags\nFROM PostHistory ph INNER JOIN Posts p ON ph.PostId=p.Id\nWHERE ph.PostHistoryTypeId=52\n  AND p.CreationDate >= '##Date1?2019-01-01##' AND p.CreationDate <= '##Date2?2020-01-01##'\nORDER BY p.Id DESC",
        "CreationDate": "2019-07-09 08:35:16",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 1075231,
        "Title": "Top users by average score in a given tag",
        "Description": null,
        "QueryBody": "SELECT  TOP ##num?100##\na.OwnerUserId AS [User Link], a.OwnerDisplayName, AVG(CAST(a.Score AS decimal)) AS [Average Score], SUM(a.Score) AS [Total Score], COUNT(a.Id) AS [Num Answers]\nFROM Posts a JOIN Posts q ON a.ParentId=q.Id\nWHERE a.PostTypeId=2 AND q.Tags LIKE '%<##tagName##>%'\nGROUP BY a.OwnerUserId, a.OwnerDisplayName\nHAVING COUNT(a.Score)>=##min?5##\nORDER BY AVG(a.Score) DESC",
        "CreationDate": "2019-12-19 11:38:25",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 1075232,
        "Title": "Top users by average score in a given tag (non-CW posts)",
        "Description": null,
        "QueryBody": "SELECT  TOP ##num?100##\na.OwnerUserId AS [User Link], a.OwnerDisplayName, AVG(CAST(a.Score AS decimal)) AS [Average Score], SUM(a.Score) AS [Total Score], COUNT(a.Id) AS [Num Answers]\nFROM Posts a JOIN Posts q ON a.ParentId=q.Id\nWHERE a.PostTypeId=2 AND q.Tags LIKE '%<##tagName##>%' AND a.CommunityOwnedDate IS NULL\nGROUP BY a.OwnerUserId, a.OwnerDisplayName\nHAVING COUNT(a.Score)>=##min?5##\nORDER BY AVG(a.Score) DESC",
        "CreationDate": "2019-12-19 11:41:09",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 1076334,
        "Title": "Total score for questions in a given tag (including CW posts)",
        "Description": null,
        "QueryBody": "SELECT  TOP ##num?100##\nOwnerUserId AS [User Link], OwnerDisplayName, SUM(Score), COUNT(Score), AVG(Score)\nFROM Posts\nWHERE PostTypeId=1 AND Tags LIKE '%<##tagName##>%'\nGROUP BY OwnerUserId, OwnerDisplayName\nORDER BY SUM(Score) DESC",
        "CreationDate": "2019-07-12 16:03:26",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 1076336,
        "Title": "Total score for answers in a given tag (including CW posts)",
        "Description": null,
        "QueryBody": "SELECT  TOP ##num?100##\na.OwnerUserId AS [User Link], a.OwnerDisplayName, SUM(a.Score), COUNT(a.Score), AVG(a.Score)\nFROM Posts a JOIN Posts q ON a.ParentId=q.Id\nWHERE a.PostTypeId=2 AND q.Tags LIKE '%<##tagName##>%'\nGROUP BY a.OwnerUserId, a.OwnerDisplayName\nORDER BY SUM(a.Score) DESC",
        "CreationDate": "2019-07-12 16:06:45",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 1076586,
        "Title": "Longest posts for user ",
        "Description": null,
        "QueryBody": "SELECT  TOP ##COUNT?10##\nId as [Post Link], LEN(Body) AS [Body length], \n    CASE PostTypeId \n        WHEN 1 THEN 'Question' \n        WHEN 2 THEN 'Answer' \n    END \n    AS [Post type]\nFROM Posts\nWHERE (PostTypeId = 1 OR PostTypeId = 2) \nORDER BY LEN(Body) DESC",
        "CreationDate": "2020-05-27 21:42:48",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 1076648,
        "Title": "List of my bounties including the bounty comment",
        "Description": null,
        "QueryBody": "SELECT  pn.PostId AS [Post Link], pn.Body, *\nFROM PostHistory ph \nJOIN PostNotices pn ON ph.Comment=pn.Id\nWHERE ph.PostHistoryTypeId=33\n  AND pn.OwnerUserId=##userid##\n--33 = Post notice added - comment contains foreign key to PostNotices\n\nSELECT TOP 100 * FROM Votes WHERE VoteTypeId = 9 AND BountyAmount > 0\nSELECT TOP 100 * FROM PostHistoryTypes \n\n\n-- Vote Type 9 BountyClose",
        "CreationDate": "2019-07-14 21:35:27",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 1076845,
        "Title": "Comments From One User To Another",
        "Description": null,
        "QueryBody": "SELECT  c.CreationDate as [Comment Date], p.Id AS [Post Link], c.Score, c.Text AS Comment FROM Posts p\nINNER JOIN Comments c\nON c.PostId=p.Id\nWHERE p.OwnerUserID=##UserId## AND c.UserId=##CommenterId:int##\nORDER BY c.Score DESC",
        "CreationDate": "2019-07-15 06:58:04",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 1077810,
        "Title": "Tag counts over the years",
        "Description": null,
        "QueryBody": "DECLARE  @Tag varchar(35) = ##Tag##\n\nSELECT --TOP 1\n  datepart(yyyy, CreationDate) as CreationYear,\n  COUNT(*) as TagCount\nFROM\n  Tags\n  JOIN PostTags on Tags.Id = PostTags.TagId\n  JOIN Posts on Posts.Id = PostTags.PostId\nWHERE\n  TagName IN (@Tag)\nGROUP BY\n  datepart(yyyy, CreationDate)\nORDER BY\n  datepart(yyyy, CreationDate)",
        "CreationDate": "2019-07-18 05:26:40",
        "validated": false,
        "QueryBody_Original": "DECLARE  @Tag varchar(35) = ##Tag##\n\nSELECT --TOP 1\n  datepart(yyyy, CreationDate) as CreationYear,\n  COUNT(*) as TagCount\nFROM\n  Tags\n  JOIN PostTags on Tags.Id = PostTags.TagId\n  JOIN Posts on Posts.Id = PostTags.PostId\nWHERE\n  TagName IN (@Tag)\nGROUP BY\n  datepart(yyyy, CreationDate)\nORDER BY\n  datepart(yyyy, CreationDate)"
    },
    {
        "QuerySetId": 1077812,
        "Title": "Tag counts over the months",
        "Description": null,
        "QueryBody": "DECLARE  @Tag varchar(35) = ##Tag##\n\nSELECT --TOP 1\n  format(CreationDate,'yyyy.MM') AS CreationMonth,\n  COUNT(*) as TagCount\nFROM\n  Tags\n  JOIN PostTags on Tags.Id = PostTags.TagId\n  JOIN Posts on Posts.Id = PostTags.PostId\nWHERE\n  TagName IN (@Tag)\nGROUP BY\n  format(CreationDate,'yyyy.MM')\nORDER BY\n  format(CreationDate,'yyyy.MM')",
        "CreationDate": "2019-07-18 05:34:58",
        "validated": false,
        "QueryBody_Original": "DECLARE  @Tag varchar(35) = ##Tag##\n\nSELECT --TOP 1\n  format(CreationDate,'yyyy.MM') AS CreationMonth,\n  COUNT(*) as TagCount\nFROM\n  Tags\n  JOIN PostTags on Tags.Id = PostTags.TagId\n  JOIN Posts on Posts.Id = PostTags.PostId\nWHERE\n  TagName IN (@Tag)\nGROUP BY\n  format(CreationDate,'yyyy.MM')\nORDER BY\n  format(CreationDate,'yyyy.MM')"
    },
    {
        "QuerySetId": 1079359,
        "Title": "Percentage of good votes (up, accept, fav), accumulative",
        "Description": null,
        "QueryBody": "DECLARE  @cutoff datetime = ##cutoff:string##\n\nselect (1.0*(\nselect count(*) from Votes where CreationDate < @cutoff and\n(VoteTypeId <= 2 or VoteTypeId = 5)\n))\/(1.0*(\nselect count(*) from Votes where CreationDate < @cutoff and\n(VoteTypeId != 8 and VoteTypeId != 9)\n))*100",
        "CreationDate": "2019-07-23 04:57:54",
        "validated": false,
        "QueryBody_Original": "DECLARE  @cutoff datetime = ##cutoff:string##\n\nselect (1.0*(\nselect count(*) from Votes where CreationDate < @cutoff and\n(VoteTypeId <= 2 or VoteTypeId = 5)\n))\/(1.0*(\nselect count(*) from Votes where CreationDate < @cutoff and\n(VoteTypeId != 8 and VoteTypeId != 9)\n))*100"
    },
    {
        "QuerySetId": 1079366,
        "Title": "Percentage of good votes (up, accept, fav), by year",
        "Description": null,
        "QueryBody": "DECLARE  @startdt datetime = '##year:int##-01-01'\nDECLARE @enddt datetime = dateadd(year, 1, @startdt)\n\nselect (1.0*(\nselect count(*) from Votes where CreationDate >= @startdt and\nCreationDate < @enddt and \n(VoteTypeId <= 2 or VoteTypeId = 5)\n))\/(1.0*(\nselect count(*) from Votes where CreationDate >= @startdt and\nCreationDate < @enddt and\n(VoteTypeId != 8 and VoteTypeId != 9)\n))*100",
        "CreationDate": "2019-07-23 05:00:40",
        "validated": false,
        "QueryBody_Original": "DECLARE  @startdt datetime = '##year:int##-01-01'\nDECLARE @enddt datetime = dateadd(year, 1, @startdt)\n\nselect (1.0*(\nselect count(*) from Votes where CreationDate >= @startdt and\nCreationDate < @enddt and \n(VoteTypeId <= 2 or VoteTypeId = 5)\n))\/(1.0*(\nselect count(*) from Votes where CreationDate >= @startdt and\nCreationDate < @enddt and\n(VoteTypeId != 8 and VoteTypeId != 9)\n))*100"
    },
    {
        "QuerySetId": 1079369,
        "Title": "Percentage of bad votes, by year",
        "Description": null,
        "QueryBody": "DECLARE  @startdt datetime = '##year:int##-01-01'\nDECLARE @enddt datetime = dateadd(year, 1, @startdt)\n\nselect (1.0*(\nselect count(*) from Votes where CreationDate >= @startdt and\nCreationDate < @enddt and \n(VoteTypeId = 3 or \nVoteTypeId = 4 or\nVoteTypeId = 6 or\nVoteTypeId = 7 or\n(VoteTypeId > 9 and VoteTypeId < 16)\n)\n))\/(1.0*(\nselect count(*) from Votes where CreationDate >= @startdt and\nCreationDate < @enddt and\n(VoteTypeId != 8 and VoteTypeId != 9)\n))*100",
        "CreationDate": "2019-07-23 05:22:50",
        "validated": false,
        "QueryBody_Original": "DECLARE  @startdt datetime = '##year:int##-01-01'\nDECLARE @enddt datetime = dateadd(year, 1, @startdt)\n\nselect (1.0*(\nselect count(*) from Votes where CreationDate >= @startdt and\nCreationDate < @enddt and \n(VoteTypeId = 3 or \nVoteTypeId = 4 or\nVoteTypeId = 6 or\nVoteTypeId = 7 or\n(VoteTypeId > 9 and VoteTypeId < 16)\n)\n))\/(1.0*(\nselect count(*) from Votes where CreationDate >= @startdt and\nCreationDate < @enddt and\n(VoteTypeId != 8 and VoteTypeId != 9)\n))*100"
    },
    {
        "QuerySetId": 1079640,
        "Title": "Find newest comment by a user",
        "Description": null,
        "QueryBody": "DECLARE  @UserId int = ##UserId##\n\nSELECT TOP 5\nPostId AS [Post Link],\nCreationDate\nFROM\n    Comments\nWHERE \n    UserId = @UserId\nORDER BY \n    CreationDate DESC",
        "CreationDate": "2019-07-23 16:45:47",
        "validated": false,
        "QueryBody_Original": "DECLARE  @UserId int = ##UserId##\n\nSELECT TOP 5\nPostId AS [Post Link],\nCreationDate\nFROM\n    Comments\nWHERE \n    UserId = @UserId\nORDER BY \n    CreationDate DESC"
    },
    {
        "QuerySetId": 1080177,
        "Title": "Why is my Archaeologist progress off?",
        "Description": null,
        "QueryBody": "SELECT  DISTINCT(p.Id) AS [Post Link]\n  FROM Users AS u\n  INNER JOIN PostHistory AS h ON u.Id = h.UserId  \n  INNER JOIN Posts AS p ON p.Id = h.PostId\n  OUTER APPLY (\n    SELECT MAX(CreationDate) AS PreviousEditDate\n      FROM PostHistory\n      WHERE PostId = h.PostId\n        AND PostHistoryTypeId IN (1, 2, 3, 4, 5, 6) -- all edits count\n        AND CreationDate < h.CreationDate\n  ) AS oa\n  WHERE u.AccountId = ##AccountId:int##\n    AND h.PostHistoryTypeId IN (4, 5) -- Edit Title, Edit Body\n    AND h.CreationDate >= DATEADD(DAY, 180, oa.PreviousEditDate)\n    AND p.PostTypeId IN (1, 2)\n    -- tag wikis\/excerpts do not count\n    AND (p.OwnerUserId IS NULL OR p.OwnerUserId != u.Id)\n    -- exclude own questions and answers",
        "CreationDate": "2019-07-24 13:30:30",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 1080259,
        "Title": "Posts inactive for over 6 months: Useful for Archaeologist badge progress",
        "Description": null,
        "QueryBody": "SELECT  TOP(50) \n  --'stackoverflow.com\/questions\/'+p.Id+'\/slug' AS URL,\n  p.Id, p.Id as [Post Link], p.Score, p.Tags, p.CreationDate\nFROM \n  Posts p\nWHERE \n  p.LastEditDate < DATEADD(month, -6, p.LastActivityDate) AND\n  p.ParentId IS NULL AND\n  NOT EXISTS (\n    SELECT * FROM Posts c\n    WHERE c.ParentId = p.Id AND \n    (\n          c.LastEditDate >= DATEADD(month, -6, CURRENT_TIMESTAMP)\n       OR c.LastActivityDate >= DATEADD(month, -6, CURRENT_TIMESTAMP)\n       OR c.OwnerUserId = ##UserId##\n    ) \n  ) \n\nORDER BY -- p.Score DESC\np.CreationDate DESC",
        "CreationDate": "2019-09-15 19:12:30",
        "validated": false,
        "QueryBody_Original": "SELECT  TOP(50) \n  --'stackoverflow.com\/questions\/'+p.Id+'\/slug' AS URL,\n  p.Id, p.Id as [Post Link], p.Score, p.Tags, p.CreationDate\nFROM \n  Posts p\nWHERE \n  p.LastEditDate < DATEADD(month, -6, p.LastActivityDate) AND\n  p.ParentId IS NULL AND\n  NOT EXISTS (\n    SELECT * FROM Posts c\n    WHERE c.ParentId = p.Id AND \n    (\n          c.LastEditDate >= DATEADD(month, -6, CURRENT_TIMESTAMP)\n       OR c.LastActivityDate >= DATEADD(month, -6, CURRENT_TIMESTAMP)\n       OR c.OwnerUserId = ##UserId##\n    ) \n  ) \n\nORDER BY -- p.Score DESC\np.CreationDate DESC"
    },
    {
        "QuerySetId": 1082040,
        "Title": "Low view questions in a tag",
        "Description": null,
        "QueryBody": "SELECT  q.Id as [Post Link], CreationDate, ViewCount, Tags, ClosedDate\nFROM Posts AS q\nINNER JOIN  PostTags pt ON q.Id = pt.PostId\nINNER JOIN  Tags t ON t.Id = pt.TagId\nWHERE q.ViewCount <= ##Views:int## \n  AND q.CreationDate < DATEADD(month,-3,GETDATE())\n  AND t.TagName = ##Tag:string##\nORDER BY CreationDate DESC",
        "CreationDate": "2019-07-29 01:54:26",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 1082182,
        "Title": "Distribution of question & answers scores",
        "Description": null,
        "QueryBody": "SELECT  Score,\n  SUM(CASE PostTypeId WHEN 1 THEN 1 ELSE 0 END) AS 'Questions',\n  SUM(CASE PostTypeId WHEN 2 THEN 1 ELSE 0 END) AS 'Answers'\n  FROM Posts\n  WHERE OwnerUserId = ##UserId:int##\n  GROUP BY Score\n  ORDER BY Score",
        "CreationDate": "2019-07-29 13:55:50",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 1082307,
        "Title": "select \u00a0distinct u.Id , Reputation, DisplayName, WebsiteUrl, AboutMe, Views from Users u inner join ",
        "Description": null,
        "QueryBody": "SELECT  \u00a0distinct u.Id , Reputation, DisplayName, WebsiteUrl, AboutMe, Views from Users u inner join Comments c on c.UserId = u.Id where u.Location like '%new york%'",
        "CreationDate": "2019-07-29 17:03:00",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 1082492,
        "Title": "All My Answers Sorted by Votes",
        "Description": null,
        "QueryBody": "DECLARE  @UserId int = ##UserId##\n\nSELECT COUNT(*) AS UpVotes, p2.title\nFROM Posts p\n    INNER JOIN Votes v ON v.PostId = p.Id\n    INNER JOIN Posts p2 ON p2.Id = p.ParentId AND p2.PostTypeId = 1\nWHERE \n    p.OwnerUserId = @UserId\n    AND p.PostTypeId = 2\n    AND v.VoteTypeId = 2\nGROUP BY p2.Title\nORDER BY UpVotes DESC",
        "CreationDate": "2019-07-29 23:04:21",
        "validated": false,
        "QueryBody_Original": "DECLARE  @UserId int = ##UserId##\n\nSELECT COUNT(*) AS UpVotes, p2.title\nFROM Posts p\n    INNER JOIN Votes v ON v.PostId = p.Id\n    INNER JOIN Posts p2 ON p2.Id = p.ParentId AND p2.PostTypeId = 1\nWHERE \n    p.OwnerUserId = @UserId\n    AND p.PostTypeId = 2\n    AND v.VoteTypeId = 2\nGROUP BY p2.Title\nORDER BY UpVotes DESC"
    },
    {
        "QuerySetId": 1083002,
        "Title": "Most gold, silver, bronze tag badges",
        "Description": null,
        "QueryBody": "WITH  badges_cte as\n(SELECT TOP(##num?200##)\n  b.UserId AS uid,\n  sum(case when b.class = 1 then 1 else 0 end) AS gold,\n  sum(case when b.class = 2 then 1 else 0 end) AS silver,\n  sum(case when b.class = 3 then 1 else 0 end) AS bronze,\n  count(b.Id) AS total\nFROM Badges b INNER JOIN tags t ON t.tagname=b.name\nGROUP BY b.UserId\n)\n\nSELECT\n  RANK() OVER(ORDER BY gold DESC, silver DESC, bronze DESC, total DESC),\n  uid AS [User Link], gold, silver, bronze, total\nFROM badges_cte  \nORDER BY gold DESC, silver DESC, bronze DESC, total DESC",
        "CreationDate": "2019-07-30 14:42:24",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 1085091,
        "Title": "Search Body for a Keyword",
        "Description": "https:\/\/meta.stackexchange.com\/questions\/197440\/search-body-for-a-keyword",
        "QueryBody": "SELECT  p.id as [Post Link]\nfrom posts p\ninner join posttags pt on pt.postid = coalesce(p.parentid, p.id)\ninner join tags t on t.id = pt.tagid\nwhere t.tagname = ##tagname:string##\nand p.owneruserid = ##userid:int##\nand p.posttypeid in (1,2)\nand body like '%##word##%' collate sql_latin1_general_cp1_ci_ai",
        "CreationDate": "2019-08-02 00:25:09",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 1085093,
        "Title": "User List: Top N - Italy - with false positive exclusions",
        "Description": null,
        "QueryBody": "SELECT \n    Top ##Top##\n    ROW_NUMBER() OVER(ORDER BY Reputation DESC) AS [#], \n    Id AS [User Link], \n    Reputation,\n    Location,\n    --CreationDate,\n    LastAccessDate,\n    UpVotes,\n    DownVotes\n    \nFROM\n    Users\n    \nWHERE \n              (\n              lower(Location) LIKE '%cagliari%'\n              OR lower(Location) LIKE '%cagliari%'\n               )\n   \n               -- exclusions\n               and not\n               (\n               lower(Location) LIKE '%mit%'\n     \n               )\n                   \n   and LEN(Location) > 1 \n   --and Reputation > 1\n    \n    -- Temporarily sort by location to more easily pick out false positive entries\n    -- ORDER BY Location ASC;",
        "CreationDate": "2019-08-02 00:21:15",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 1085129,
        "Title": "Posts linking to a tag",
        "Description": null,
        "QueryBody": "SELECT  DISTINCT(p.Id) AS [Post Link]\n  FROM Posts AS p\n  INNER JOIN PostHistory AS h\n    ON p.Id = h.PostId\n  WHERE h.PostHistoryTypeId IN (2, 5) -- Initial Body, Edited Body\n    AND p.CreationDate BETWEEN ##fromDate:string## AND ##tillDate:string##\n    AND h.Text LIKE '%[tag:' + ##tagName:string## + ']%'",
        "CreationDate": "2019-08-02 10:49:58",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 1085240,
        "Title": "Average well-received questions per day",
        "Description": null,
        "QueryBody": "WITH  Raw AS (\n  SELECT\n    DATEFROMPARTS(\n      DATEPART(yyyy, CreationDate),\n      DATEPART(mm, CreationDate),\n      DATEPART(d, CreationDate)\n    ) as Day,\n    COUNT(*) AS Count\n  FROM Posts\n  WHERE\n    PostTypeId = 1\n    AND\n    Score > 0\n    AND\n    ClosedDate IS NULL\n  GROUP BY\n    DATEFROMPARTS(\n      DATEPART(yyyy, CreationDate),\n      DATEPART(mm, CreationDate),\n      DATEPART(d, CreationDate)\n    )\n)\nSELECT\n  A.Day,\n  SUM(1.0 * (##Smoothing## - ABS(DATEDIFF(day, A.Day, B.Day))) * B.Count)\n  \/\n  SUM(1.0 * (##Smoothing## - ABS(DATEDIFF(day, A.Day, B.Day)))) AS Count,\n  10.0 AS GraduationRequirement\nFROM Raw A, Raw B\nWHERE\n  DATEDIFF(day, A.Day, B.Day) BETWEEN -##Smoothing:int?45## AND ##Smoothing##\nGROUP BY A.Day\nORDER BY A.Day DESC",
        "CreationDate": "2019-08-02 17:50:25",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 1086286,
        "Title": "Order search results by votes (not by score!)",
        "Description": "https:\/\/meta.stackoverflow.com\/questions\/388169",
        "QueryBody": "SELECT  \n       postid as [Post Link]\n     , sum(case when votetypeid = 2 then 1 else 0 end) upvotes\n     , sum(case when votetypeid = 3 then 1 else 0 end) downvotes\n     , min(p.score) score\nfrom votes v\ninner join posts p on p.id = v.postid\nwhere votetypeid in (2, 3) -- upmod, downmod\nand posttypeid in (1, 2) -- Q, A\nand ('##userid?674039##' = 'none' or owneruserid = ##userid?674039##)\ngroup by postid\norder by (SELECT max(val) \n          from ( SELECT sum(case when votetypeid = 2 then 1 else 0 end) val\n                union\n                SELECT sum(case when votetypeid = 3 then 1 else 0 end)\n          ) alldata\n         ) desc",
        "CreationDate": "2019-08-09 19:42:03",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 1086493,
        "Title": "All comments by a given user",
        "Description": null,
        "QueryBody": "SELECT \n  Id, PostId AS [Post Link], Text, Score, CreationDate, UserId AS [User Link]\nFROM Comments\nWHERE UserId=##uid?2129##\nORDER BY CreationDate DESC",
        "CreationDate": "2019-08-07 15:24:38",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 1088462,
        "Title": "What is my accepted answer percentage rate?",
        "Description": "What is my accepted answer percentage rate\r\nOn avg how often are answers I give, accepted.\r\n\r\n----\r\n\r\nOriginal source: https:\/\/data.stackexchange.com\/stackoverflow\/query\/949\/what-is-my-accepted-answer-percentage-rate",
        "QueryBody": "DECLARE  @UserId int = ##UserId##\n\nSELECT \n    (CAST(Count(a.Id) AS float) \/ (SELECT Count(*) FROM Posts WHERE OwnerUserId = @UserId AND PostTypeId = 2) * 100) AS AcceptedPercentage\nFROM\n    Posts q\n  INNER JOIN\n    Posts a ON q.AcceptedAnswerId = a.Id\nWHERE\n    a.OwnerUserId = @UserId\n  AND\n    a.PostTypeId = 2",
        "CreationDate": "2019-08-09 02:15:34",
        "validated": false,
        "QueryBody_Original": "DECLARE  @UserId int = ##UserId##\n\nSELECT \n    (CAST(Count(a.Id) AS float) \/ (SELECT Count(*) FROM Posts WHERE OwnerUserId = @UserId AND PostTypeId = 2) * 100) AS AcceptedPercentage\nFROM\n    Posts q\n  INNER JOIN\n    Posts a ON q.AcceptedAnswerId = a.Id\nWHERE\n    a.OwnerUserId = @UserId\n  AND\n    a.PostTypeId = 2"
    },
    {
        "QuerySetId": 1090523,
        "Title": "SO tagged and tag views (count)",
        "Description": null,
        "QueryBody": "DECLARE  @total float\nSELECT @total = Sum(Cast(ViewCount as bigint)) FROM Posts WHERE PostTypeId = 1\n\nSELECT \n    Count(*) AS Questions, \n    Sum(Cast(Posts.ViewCount as bigint)) AS Views,\n    Sum(Posts.AnswerCount) AS Answers\nFROM Posts \n  JOIN PostTags ON Posts.Id = PostTags.PostId\n  JOIN Tags ON PostTags.TagId = Tags.Id\nWHERE \n  Posts.PostTypeId = 1\n  AND CreationDate > '2019-12-31'\n  AND (TagName like 'azure%')",
        "CreationDate": "2020-01-29 12:24:33",
        "validated": false,
        "QueryBody_Original": "DECLARE  @total float\nSELECT @total = Sum(Cast(ViewCount as bigint)) FROM Posts WHERE PostTypeId = 1\n\nSELECT \n    Count(*) AS Questions, \n    Sum(Cast(Posts.ViewCount as bigint)) AS Views,\n    Sum(Posts.AnswerCount) AS Answers\nFROM Posts \n  JOIN PostTags ON Posts.Id = PostTags.PostId\n  JOIN Tags ON PostTags.TagId = Tags.Id\nWHERE \n  Posts.PostTypeId = 1\n  AND CreationDate > '2019-12-31'\n  AND (TagName like 'azure%')"
    },
    {
        "QuerySetId": 1090620,
        "Title": "Telephone number in spoken words",
        "Description": null,
        "QueryBody": "DECLARE  @ varchar(99)='1234567899888'\n\nWHILE''<left(@,1)SELECT @=stuff(@,1,iif(p<4,p,2),'')+\niif(p=1,' ',iif(p=3,' triple ',' double '))+trim(substring('oh  one  two  threefour five six  seveneightnine',left(@,1)*5,5))\nFROM(SELECT~-patindex('%[^'+left(@,1)+']%',@+'^')p)z\nPRINT @",
        "CreationDate": "2019-08-14 17:46:20",
        "validated": false,
        "QueryBody_Original": "DECLARE  @ varchar(99)='1234567899888'\n\nWHILE''<left(@,1)SELECT @=stuff(@,1,iif(p<4,p,2),'')+\niif(p=1,' ',iif(p=3,' triple ',' double '))+trim(substring('oh  one  two  threefour five six  seveneightnine',left(@,1)*5,5))\nFROM(SELECT~-patindex('%[^'+left(@,1)+']%',@+'^')p)z\nPRINT @"
    },
    {
        "QuerySetId": 1091080,
        "Title": "Number of active users in a set of tags month wise",
        "Description": "A user is considered \"active\" if they have > \"threshhold\" posts in the given set of tags, where \"threshhold\" is a parameter that can be set by modifying the textbox below.",
        "QueryBody": "SELECT  [Month], \n       sum(1) ActiveUsers\n   \nfrom\n(\n\nSELECT Z.[Month], count(Z.ouid) cnt, Z.ouid as [User Link] \nfrom(\nSELECT CAST(\n      cast(DATEPART(YYYY, Y.CreationDate) as varchar) + '-' + cast(DATEPART(MM, Y.CreationDate) as varchar) + '-01'\n      as datetime) [Month], ouid\n     \n  from (\n   SELECT p1.creationdate  CreationDate ,p1.owneruserid  ouid from posts p1\n      inner join posts p2  on p1.parentid=p2.id \n      where p1.posttypeid=2 and \n      (p2.tags LIKE '%matlab%')  \ngroup by p1.owneruserid, p1.creationdate\n  ) Y group by ouid, CreationDate\n  \n) Z group by Z.ouid,Z.[Month]\n\n) as X where X.cnt>##Threshhold?2##\ngroup by [Month]\norder by [Month] asc",
        "CreationDate": "2019-08-19 16:25:26",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 1092482,
        "Title": "Questions answered by a user before they were closed",
        "Description": null,
        "QueryBody": "SELECT  a.Id AS [Post Link], a.Score, a.CreationDate,\n  CASE WHEN a.Score < 1            THEN 'Score too low'\n       WHEN e.CreationDate IS NULL THEN 'No edit within 12 hours'\n                                   ELSE 'Question closed'\n  END AS 'Why no Illuminator'\n  FROM Posts AS q\n  INNER JOIN Posts AS a\n    ON a.ParentId = q.Id\n   AND a.CreationDate < q.ClosedDate\n  OUTER APPLY (\n    SELECT TOP 1 CreationDate\n      FROM PostHistory AS h\n      WHERE h.PostId = q.Id\n        AND h.PostHistoryTypeId IN (4, 5) -- Edit Title, Edit Body\n        AND h.CreationDate BETWEEN DATEADD(HOUR, -12, a.CreationDate)\n                          AND DATEADD(HOUR, 12, a.CreationDate)\n        AND h.UserId = a.OwnerUserId\n  ) e\n  WHERE a.OwnerUserId = ##UserId:int##\n  ORDER BY a.CreationDate DESC",
        "CreationDate": "2019-08-18 11:18:43",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 1092756,
        "Title": "My position amongst spanish users",
        "Description": null,
        "QueryBody": "SELECT  seqnum as 'Position'\nFROM (SELECT ROW_NUMBER() OVER (ORDER BY Reputation DESC) AS seqnum, \n             Id AS [UserId], \n             Reputation\n      FROM Users\n      WHERE LOWER(Location) LIKE '%spain%'\n     ) u\nWHERE UserId = 826194\n\n\nSELECT COUNT(*) as 'Users from Spain:'\nFROM\n    Users\nWHERE\n    LOWER(Location) LIKE '%spain%'",
        "CreationDate": "2019-08-18 13:50:59",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 1092955,
        "Title": "Top users by query and tag",
        "Description": "Top users by query and tag",
        "QueryBody": "DECLARE  @limit int = ##Limit##;\nDECLARE @tag_id int = (select id from tags where tagname = '##TagName##');\n\n--select rank() over (order by score desc) \"Rank\", * from (\nselect top (@limit)\n  rank() over (order by sum(answers.score) desc) \"Rank\",\n  users.id \"User Link\"\n  ,sum(answers.score) as \"Score\"\nfrom users\njoin posts answers on (users.id = answers.owneruserid)\njoin posts parent on (answers.parentid = parent.id)\njoin posttags on (parent.id = posttags.postid)\nwhere posttags.tagid = @tag_id\nand answers.posttypeid = 2  and LOWER(Location) LIKE LOWER('%##CountryName##%')\ngroup by users.id\norder by sum(answers.score) desc\n;",
        "CreationDate": "2019-08-19 06:07:47",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 1093386,
        "Title": "respostas postadas, quantos por cento n\u00e3o possuem nenhum upvote?",
        "Description": null,
        "QueryBody": "SELECT  count(V.PostId) from Votes as V\ninner join Posts as P\non P.Id = V.PostId \nwhere P.PostTypeId = 2 and V.VoteTypeId = 2 and P.Id = 4*\/\n\nSELECT V.PostId from Votes as V\ninner join Posts as P\non P.Id = V.PostId \nwhere P.PostTypeId = 2 and V.VoteTypeId = 2 \norder by 1",
        "CreationDate": "2019-08-19 23:48:11",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 1094081,
        "Title": "Unresolved questions with answers by user",
        "Description": null,
        "QueryBody": "WITH  answers by user\n\nselect\n    count(P.Id) as \"Questions\",\n    count(P2.Id) as \"Unresolved\",\n    10000 * count(P2.Id) \/ count(P.Id) \/ 100.0 as \"Percent\",\n    min(U.DisplayName) as \"Who\",\n    min(U.Reputation) as \"Rep\",\n    year(min(U.CreationDate)) as \"Joined\",\n    year(min(U.LastAccessDate)) as \"Last Seen\"\nfrom Posts P\n    left join Users U on P.OwnerUserId = U.Id\n    left join Posts P2 on P.Id = P2.Id and P2.AcceptedAnswerId is null\n    where P.AnswerCount > 0 \n    group by U.Id\n    order by \"Unresolved\" desc, \"Percent\" desc",
        "CreationDate": "2019-08-21 00:53:15",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 1094273,
        "Title": "Usuarios que preguntan mucho y aceptan poco",
        "Description": null,
        "QueryBody": "DECLARE  @MIN_UNACCEPTED_Q int = ##MinNumUnacceptedQuestions?10##\n\nselect U.id as [User Link],\n       U.DisplayName,\n       count(case when P.AcceptedAnswerId is null then 1 else null end) as PreguntasSinAceptar,\n       count(case when P.AcceptedAnswerId is not null then 1 else null end) as PreguntasAceptadas,\n       U.LastAccessDate as UltimoAcceso\n  from Users U\n  inner join Posts P\n        on U.id = P.OwnerUserId\n  where P.PostTypeId = 1 \n        and P.AnswerCount > 0 \n  group by U.id,\n           U.DisplayName,\n           U.LastAccessDate\n  having count(case when P.AcceptedAnswerId is null then 1 else null end) >= @MIN_UNACCEPTED_Q\n         and count(case when P.AcceptedAnswerId is not null then 1 else null end) =0\n  order by 3 desc;",
        "CreationDate": "2019-08-21 10:09:24",
        "validated": false,
        "QueryBody_Original": "DECLARE  @MIN_UNACCEPTED_Q int = ##MinNumUnacceptedQuestions?10##\n\nselect U.id as [User Link],\n       U.DisplayName,\n       count(case when P.AcceptedAnswerId is null then 1 else null end) as PreguntasSinAceptar,\n       count(case when P.AcceptedAnswerId is not null then 1 else null end) as PreguntasAceptadas,\n       U.LastAccessDate as UltimoAcceso\n  from Users U\n  inner join Posts P\n        on U.id = P.OwnerUserId\n  where P.PostTypeId = 1 \n        and P.AnswerCount > 0 \n  group by U.id,\n           U.DisplayName,\n           U.LastAccessDate\n  having count(case when P.AcceptedAnswerId is null then 1 else null end) >= @MIN_UNACCEPTED_Q\n         and count(case when P.AcceptedAnswerId is not null then 1 else null end) =0\n  order by 3 desc;"
    },
    {
        "QuerySetId": 1094325,
        "Title": "Edits to specific user's posts by a specific user",
        "Description": null,
        "QueryBody": "SELECT  P.Id AS [Post Link] \nFROM Posts P\nJOIN PostHistory H on H.PostID = P.Id\n-- PostOwnerId: The UserId of the user that owns the post\n-- EditUserId: The UserId of the user that made the edit.\nWhere  H.PostHistoryTypeId = 5 and H.UserId = ##EditUserId## and P.OwnerUserId = ##PostOwnerId## \nORDER BY H.CreationDate ASC",
        "CreationDate": "2019-08-21 12:51:48",
        "validated": false,
        "QueryBody_Original": "SELECT  P.Id AS [Post Link] \nFROM Posts P\nJOIN PostHistory H on H.PostID = P.Id\n-- PostOwnerId: The UserId of the user that owns the post\n-- EditUserId: The UserId of the user that made the edit.\nWhere  H.PostHistoryTypeId = 5 and H.UserId = ##EditUserId## and P.OwnerUserId = ##PostOwnerId## \nORDER BY H.CreationDate ASC"
    },
    {
        "QuerySetId": 1094673,
        "Title": "Search my own answer posts...",
        "Description": "This query returns the linked list of your answers partially matching the entered body text. Search is not case sensitive. The UserID parameter is your user ID (by default prefilled with your user ID) and the PostText is the text which you want to search for.",
        "QueryBody": "DECLARE  @MyUserID INT = ##UserID:int##\n\nSELECT\n    Id AS [Post Link],\n    Score AS [Score],\n    CreationDate AS [Creation Date]\nFROM\n    Posts    \nWHERE\n    OwnerUserId = @MyUserID AND\n    PostTypeId IN (2, 3)\nORDER BY\n    CreationDate\nDESC",
        "CreationDate": "2019-08-22 10:45:41",
        "validated": false,
        "QueryBody_Original": "DECLARE  @MyUserID INT = ##UserID:int##\n\nSELECT\n    Id AS [Post Link],\n    Score AS [Score],\n    CreationDate AS [Creation Date]\nFROM\n    Posts    \nWHERE\n    OwnerUserId = @MyUserID AND\n    PostTypeId IN (2, 3)\nORDER BY\n    CreationDate\nDESC"
    },
    {
        "QuerySetId": 1094683,
        "Title": "Posts containing the given macro with no macro definition",
        "Description": null,
        "QueryBody": "DECLARE MathOperator%') \n    AND NOT(Body LIKE '%\\def%') \n  ORDER BY CreationDate DESC",
        "CreationDate": "2019-10-05 12:43:29",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 1094694,
        "Title": "Last posts made by a given user",
        "Description": "Show the last 5 posts of a user",
        "QueryBody": "DECLARE  @user INT = ##uid:INT##\n\nSELECT TOP 5\n  p.CreationDate AS 'Date',\n  p.Id as [Post Link]\nFROM \n  Posts p\n  WHERE p.OwnerUserId = @user\n  ORDER BY 'Date' DESC",
        "CreationDate": "2019-08-22 12:06:07",
        "validated": false,
        "QueryBody_Original": "DECLARE  @user INT = ##uid:INT##\n\nSELECT TOP 5\n  p.CreationDate AS 'Date',\n  p.Id as [Post Link]\nFROM \n  Posts p\n  WHERE p.OwnerUserId = @user\n  ORDER BY 'Date' DESC"
    },
    {
        "QuerySetId": 1094703,
        "Title": "Has a user voted to something in the last N months?",
        "Description": null,
        "QueryBody": "DECLARE  @user INT = ##uid:INT##\nDECLARE @N INT = ##NbMonth:INT##\n-- \n\nIF ( (SELECT TOP 1 DATEDIFF(MONTH,GETDATE(),v.CreationDate) AS 'Date'\n      FROM Votes v WHERE v.UserId = @user ORDER BY 'Date' DESC) < -@N)\n    SELECT 'No';\nELSE\n    SELECT 'Yes';",
        "CreationDate": "2019-08-22 13:31:46",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 1095149,
        "Title": "Vote trends on my posts",
        "Description": null,
        "QueryBody": "SELECT  round(year(p.CreationDate), 0) year, \n       Name,\n       1.0*count(distinct v.Id)\/count(distinct p.Id) \"votes per post\"\n       \nfrom Votes v\n     join Posts p on PostId = p.Id\n     join VoteTypes vt on vt.Id = VoteTypeId\nwhere OwnerUserId = ##user?1438##\n      and Name like '%Mod'\n      and Name = 'DownMod'\ngroup by year(p.CreationDate), Name\norder by year(p.CreationDate), Name",
        "CreationDate": "2019-08-23 09:03:48",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 1095193,
        "Title": "Highest voted comment vs. answer score 2D histogram",
        "Description": null,
        "QueryBody": "SELECT  sel.Idx - (sel.Idx \/ ##N##) * ##N## as [Answer Score], sel.Idx \/ ##N## as [Comment Score], Count(sel.Idx) as [Occurence]\nFROM \n(SELECT sel.AScore * ##N## + sel.CScore as [Idx]\nFROM\n(SELECT IIF(a.Score < ##N##, a.Score, ##N##) as [AScore], IIF(c.Score < ##N##, c.Score, ##N##) as [CScore]\nFROM Posts a\nINNER JOIN\n( SELECT c.PostId, MAX(c.Score) as [Score] -- PostId and highest voted comment score\n  FROM Comments c\n  WHERE c.Score > 0\n  GROUP BY c.PostId) c\nON a.Id = c.PostId\nWHERE a.PostTypeId = 2 -- answers\nAND a.Score >= 0) sel) sel\nGROUP BY sel.Idx\nORDER BY sel.Idx",
        "CreationDate": "2019-08-23 13:24:33",
        "validated": false,
        "QueryBody_Original": "SELECT  sel.Idx - (sel.Idx \/ ##N##) * ##N## as [Answer Score], sel.Idx \/ ##N## as [Comment Score], Count(sel.Idx) as [Occurence]\nFROM \n(SELECT sel.AScore * ##N## + sel.CScore as [Idx]\nFROM\n(SELECT IIF(a.Score < ##N##, a.Score, ##N##) as [AScore], IIF(c.Score < ##N##, c.Score, ##N##) as [CScore]\nFROM Posts a\nINNER JOIN\n( SELECT c.PostId, MAX(c.Score) as [Score] -- PostId and highest voted comment score\n  FROM Comments c\n  WHERE c.Score > 0\n  GROUP BY c.PostId) c\nON a.Id = c.PostId\nWHERE a.PostTypeId = 2 -- answers\nAND a.Score >= 0) sel) sel\nGROUP BY sel.Idx\nORDER BY sel.Idx"
    },
    {
        "QuerySetId": 1095336,
        "Title": "Sites by relative meta activity (compared to the main)",
        "Description": "Compares the SE sites to their metas - shows the percentage of the users having a post on the meta site, compared to the percentage of the users having a post on the main. Counts only the users over the RepLimit. You can set this RepLimit to 1.",
        "QueryBody": "DECLARE  dbcursor CURSOR FOR\nWITH Raw AS (\n  SELECT name\n  FROM sysdatabases\n  WHERE name NOT IN ('master', 'tempdb', 'model' ,'msdb', 'Data.StackExchange')\n)\nSELECT Main.name AS MainDb, Meta.name AS MetaDb\nFROM Raw Main, Raw Meta\nWHERE\n  Main.name + '.Meta' = Meta.name;\n\nDECLARE @MainDb VARCHAR(MAX);\nDECLARE @MetaDb VARCHAR(MAX);\nDECLARE @Query VARCHAR(MAX);\n\nOPEN dbcursor;\nFETCH NEXT FROM dbcursor INTO @MainDb, @MetaDb;\n\nWHILE @@FETCH_STATUS = 0\nBEGIN\n  PRINT @MainDb + @MetaDb;\n  SELECT @Query = '\n    SELECT (SELECT COUNT(DISTINCT OwnerUserId)\n      FROM [' + @MainDb + '].dbo.Posts) AS MainUserCount,\n      (SELECT COUNT(DISTINCT OwnerUserId)\n      FROM [' + @MetaDb + '].dbo.Posts) AS MetaUserCount\n  ';\n  FETCH NEXT FROM dbcursor INTO @MainDb, @MetaDb;\nEND;",
        "CreationDate": "2019-08-23 15:46:09",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 1097209,
        "Title": "Comments by a user containing a certain word",
        "Description": null,
        "QueryBody": "SELECT  PostId AS [Post Link], CreationDate, Text\n  FROM Comments\n  WHERE UserId = ##UserId:int##\n    AND Text COLLATE SQL_Latin1_General_CP1_CI_AS\n             LIKE '%' + ##query:string## + '%' \n  ORDER BY CreationDate",
        "CreationDate": "2019-08-27 17:16:39",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 1097512,
        "Title": "Highly Voted Questions with an Image",
        "Description": null,
        "QueryBody": "SELECT  TOP 50 p.Score, p.Id AS [Post Link],\n       p.CreationDate, p.LastActivityDate\nFROM   Posts p\nWHERE  1=1\n\n       -- Only needed on Stack Overflow\n       AND p.CreationDate >= DATEADD(DAY, -28, GETDATE())\n       \n       AND p.Body LIKE '%<img src%'\n\nORDER BY p.Score DESC",
        "CreationDate": "2019-08-28 17:25:15",
        "validated": false,
        "QueryBody_Original": "SELECT  TOP 50 p.Score, p.Id AS [Post Link],\n       p.CreationDate, p.LastActivityDate\nFROM   Posts p\nWHERE  1=1\n\n       -- Only needed on Stack Overflow\n       AND p.CreationDate >= DATEADD(DAY, -28, GETDATE())\n       \n       AND p.Body LIKE '%<img src%'\n\nORDER BY p.Score DESC"
    },
    {
        "QuerySetId": 1099063,
        "Title": "Rep:Answer ratio for users with rep between x,y",
        "Description": null,
        "QueryBody": "SELECT  Top ##top## Posts.Id,Posts.AnswerCount,Users.Reputation From Posts,Users \nWhere Users.Id = Posts.Id AND Users.Reputation > ##x## AND Users.Reputation < ##y##",
        "CreationDate": "2019-09-02 20:07:13",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 1100166,
        "Title": "Track Voting Activity by Time Window (Obfuscated) :-(",
        "Description": null,
        "QueryBody": "DECLARE  @UserId int = ##UserId##;\n\nWITH VotesDispersion AS (\n    -- DATEPART(hour, Votes.CreationDate) -> always 0\n    SELECT OwnerUserId, DATEPART(hour, Votes.CreationDate) AS Hour\n    FROM Posts\n    INNER JOIN Votes ON Votes.PostId = Posts.Id AND VoteTypeId = 2\n    WHERE OwnerUserId = @UserId OR @UserId = 0\n)\nSELECT OwnerUserId, Hour, COUNT(*) as VoteCount\nFROM VotesDispersion\nGROUP BY OwnerUserId, Hour\nORDER BY OwnerUserId, Hour\n;",
        "CreationDate": "2019-09-04 23:01:40",
        "validated": false,
        "QueryBody_Original": "DECLARE  @UserId int = ##UserId##;\n\nWITH VotesDispersion AS (\n    -- DATEPART(hour, Votes.CreationDate) -> always 0\n    SELECT OwnerUserId, DATEPART(hour, Votes.CreationDate) AS Hour\n    FROM Posts\n    INNER JOIN Votes ON Votes.PostId = Posts.Id AND VoteTypeId = 2\n    WHERE OwnerUserId = @UserId OR @UserId = 0\n)\nSELECT OwnerUserId, Hour, COUNT(*) as VoteCount\nFROM VotesDispersion\nGROUP BY OwnerUserId, Hour\nORDER BY OwnerUserId, Hour\n;"
    },
    {
        "QuerySetId": 1100649,
        "Title": "Answer score histogram before, is, after the accepted answer",
        "Description": null,
        "QueryBody": "WITH  Raw AS (\n  SELECT\n    SIGN(A.Id - Q.AcceptedAnswerId) AS BeforeAfter,\n    A.Score,\n    COUNT(*) AS Count\n  FROM Posts Q, Posts A\n  WHERE\n    A.ParentId = Q.Id\n    AND\n    A.Score >= ##MinScore:int?-10##\n    AND\n    A.Score <= ##MaxScore:int?10##\n  GROUP BY SIGN(A.Id - Q.AcceptedAnswerId), A.Score\n)\nSELECT\n  Score,\n  CASE\n    WHEN BeforeAfter IS NULL THEN 'NoAccepted'\n    WHEN BeforeAfter = -1 THEN 'BeforeAccepted'\n    WHEN BeforeAfter = 0 THEN 'IsAccepted'\n    ELSE 'AfterAccepted'\n  END AS [When],\n  Count\nFROM Raw\nORDER BY Score, BeforeAfter",
        "CreationDate": "2019-09-05 20:55:22",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 1101160,
        "Title": "Has the most questions with only very few accept vote",
        "Description": null,
        "QueryBody": "SELECT  TOP 100\n  OwnerUserId AS [User Link],\n  COUNT(*) - COUNT(AcceptedAnswerId) AS HasNoAccept,\n  COUNT(AcceptedAnswerId) AS HasAccepted\nFROM Posts\nWHERE\n  PostTypeId = 1\n  AND\n  OwnerUserId > 0\n  AND\n  CommunityOwnedDate IS NULL\n  AND\n  AnswerCount > 0\nGROUP BY OwnerUserId\nHAVING COUNT(*) > ##MaxAcceptRatio:int?10## * COUNT(AcceptedAnswerId)\nORDER BY HasNoAccept DESC, OwnerUserId",
        "CreationDate": "2019-09-07 01:39:10",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 1102439,
        "Title": "questions with tags SQL and javascript that have code snippets",
        "Description": null,
        "QueryBody": "DECLARE  @STARTDATE DATETIME = '2016-01-01'\nDECLARE @ENDDATE DATETIME = '2016-07-31'\n\nSELECT cast(Id as varchar(20))+'<postid>'+Body  FROM \n  Posts AS Question \n  where    \n  Question.Tags LIKE '%javascript%' AND\n  Question.Body LIKE '%<code>%' and \n  posttypeid = 1 \n  --and datepart(year,creationdate) = 2009\n  and question.creationdate BETWEEN @STARTDATE AND @ENDDATE\n  and AcceptedAnswerId  is not null and Score > 0\n  --and id = 405336\n  order by Id asc",
        "CreationDate": "2019-10-15 05:25:35",
        "validated": false,
        "QueryBody_Original": "DECLARE  @STARTDATE DATETIME = '2016-01-01'\nDECLARE @ENDDATE DATETIME = '2016-07-31'\n\nSELECT cast(Id as varchar(20))+'<postid>'+Body  FROM \n  Posts AS Question \n  where    \n  Question.Tags LIKE '%javascript%' AND\n  Question.Body LIKE '%<code>%' and \n  posttypeid = 1 \n  --and datepart(year,creationdate) = 2009\n  and question.creationdate BETWEEN @STARTDATE AND @ENDDATE\n  and AcceptedAnswerId  is not null and Score > 0\n  --and id = 405336\n  order by Id asc"
    },
    {
        "QuerySetId": 1102644,
        "Title": "Tag Activity By Month - questions, answers, comments, votes",
        "Description": "Summarize activity for a given list of tags by month for the previous X number of days.\r\n\r\nActivity includes questions, answers, comments, votes and a total of all of them.",
        "QueryBody": "DECLARE  @Tags varchar(max) = '##Tags##'\nDECLARE @Days int = ##Days##\n\nSELECT TOP 100\n    Tags.TagName,\n    Convert(date, Posts.CreationDate) CreationDate,\n    -- COUNT(*) AS Posts\n    Posts.Id,\n    Comments.Id\nFROM Tags\n    INNER JOIN PostTags ON PostTags.TagId = Tags.id\n    INNER JOIN Posts ON Posts.ParentId = PostTags.PostId\n    LEFT JOIN Comments ON Comments.PostId = Posts.Id\n    INNER JOIN (\n      SELECT Value TagName\n      FROM STRING_SPLIT(@Tags, ',')) MyTags ON MyTags.TagName = Tags.TagName\nWHERE \nPosts.CreationDate >= Convert(datetime, Convert(date, GETDATE())) - @Days\n-- GROUP BY Tags.TagName, Convert(date, Posts.CreationDate)\nORDER BY Convert(date, Posts.CreationDate), Tags.TagName;",
        "CreationDate": "2019-09-10 04:17:18",
        "validated": false,
        "QueryBody_Original": "DECLARE  @Tags varchar(max) = '##Tags##'\nDECLARE @Days int = ##Days##\n\nSELECT TOP 100\n    Tags.TagName,\n    Convert(date, Posts.CreationDate) CreationDate,\n    -- COUNT(*) AS Posts\n    Posts.Id,\n    Comments.Id\nFROM Tags\n    INNER JOIN PostTags ON PostTags.TagId = Tags.id\n    INNER JOIN Posts ON Posts.ParentId = PostTags.PostId\n    LEFT JOIN Comments ON Comments.PostId = Posts.Id\n    INNER JOIN (\n      SELECT Value TagName\n      FROM STRING_SPLIT(@Tags, ',')) MyTags ON MyTags.TagName = Tags.TagName\nWHERE \nPosts.CreationDate >= Convert(datetime, Convert(date, GETDATE())) - @Days\n-- GROUP BY Tags.TagName, Convert(date, Posts.CreationDate)\nORDER BY Convert(date, Posts.CreationDate), Tags.TagName;"
    },
    {
        "QuerySetId": 1102653,
        "Title": "Questions removed from HNQ by mods - with time of entering end removal",
        "Description": null,
        "QueryBody": "SELECT  TOP(##num?100##)\n  ph.CreationDate,\n  ph.PostHistoryTypeId,\n  ph2.CreationDate,\n  ph2.PostHistoryTypeId,\n  DATEDIFF(hour, ph.CreationDate, ph2.CreationDate) AS Hours,\n  DATEDIFF(minute, ph.CreationDate, ph2.CreationDate) AS Minutes,\n  DATEDIFF(second, ph.CreationDate, ph2.CreationDate) AS Seconds,\n  ph2.UserId AS [User Link],\n  p.Id AS [Post Link],\n  concat('site:\/\/posts\/',\n          p.Id,\n          '\/revisions'\n          ) [Revisions Link]\nFROM PostHistory ph INNER JOIN Posts p\n  ON ph.PostId=p.Id  AND ph.PostHistoryTypeId=52 AND p.PostTypeId=1\n  INNER JOIN PostHistory ph2 \n  ON ph2.PostId=p.Id  AND ph2.PostHistoryTypeId=53 AND p.PostTypeId=1\nORDER BY ph.CreationDate DESC",
        "CreationDate": "2019-09-10 05:06:56",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 1102897,
        "Title": "Initial title for the questions that entered HNQ",
        "Description": null,
        "QueryBody": "SELECT  TOP(##num?100##)\n  ph2.Text AS [Initial Title],\n  p.Id AS [Post Link],\n  concat('site:\/\/posts\/',\n          p.Id,\n          '\/revisions'\n          ) [Revisions Link]\nFROM PostHistory ph INNER JOIN Posts p\n  ON ph.PostId=p.Id  AND ph.PostHistoryTypeId=52 AND p.PostTypeId=1\n  INNER JOIN PostHistory ph2\n  ON ph2.PostId=p.Id  AND ph2.PostHistoryTypeId=1 AND p.PostTypeId=1\nORDER BY ph.CreationDate DESC",
        "CreationDate": "2019-09-10 18:58:11",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 1102898,
        "Title": "Initial title for the questions that were removed from HNQ",
        "Description": null,
        "QueryBody": "SELECT  TOP(##num?100##)\n  ph2.Text AS [Initial Title],\n  p.Id AS [Post Link],\n  concat('site:\/\/posts\/',\n          p.Id,\n          '\/revisions'\n          ) [Revisions Link]\nFROM PostHistory ph INNER JOIN Posts p\n  ON ph.PostId=p.Id  AND ph.PostHistoryTypeId=53 AND p.PostTypeId=1\n  INNER JOIN PostHistory ph2\n  ON ph2.PostId=p.Id  AND ph2.PostHistoryTypeId=1 AND p.PostTypeId=1\nORDER BY ph.CreationDate DESC",
        "CreationDate": "2019-09-10 18:58:47",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 1103328,
        "Title": "Former contributors inactive since date",
        "Description": null,
        "QueryBody": "SELECT \n  Users.Id as [User Link],\n  Users.LastAccessDate as [Last Seen],\n  max(Posts.CreationDate) as [Last Post],\n  Users.Reputation as [Rep],\n  sum(case Posts.PostTypeId when 1 then 1 else 0 end) as [Questions], \n  sum(case Posts.PostTypeId when 2 then 1 else 0 end) as [Answers], \n  count(Posts.Id) as [Total],\n  sum(case Posts.PostTypeId when 1 then Posts.Score else 0 end) as [QScore], \n  sum(case Posts.PostTypeId when 2 then Posts.Score else 0 end) as [AScore], \n  sum(Posts.Score) as [Total Score]\nfrom Users\njoin Posts on Posts.OwnerUserId = Users.Id\ngroup by Users.Id, Users.LastAccessDate, Users.Reputation\nhaving Users.LastAccessDate < ##LastSeenBefore:string?2018-05-02##\norder by [Rep] desc",
        "CreationDate": "2019-09-11 17:13:33",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 1104158,
        "Title": "Posts containing the given text (with link to revisions)",
        "Description": null,
        "QueryBody": "SELECT  TOP ##num##\n  Id As [Post Link], \n  concat('site:\/\/posts\/',\n        Id,\n        '\/revisions'\n        ) [Revisions Link],\n  OwnerUserId AS [User Link], CreationDate, LastActivityDate,  Score, ViewCount, Body\n  FROM Posts WHERE (Body LIKE '%##text##%') \n  ORDER BY CreationDate DESC",
        "CreationDate": "2019-09-12 16:59:48",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 1105162,
        "Title": "Movies & TV Self Answers",
        "Description": null,
        "QueryBody": "SELECT  TOP 1000 question.Id as [Post Link], \n       question.CreationDate,\n       count(selfAnswer.Id) as [Count]\nfrom posts as question\n    inner join posts as selfAnswer\n        on  selfAnswer.owneruserid = question.owneruserid\n        and selfAnswer.parentid = question.id\n        inner join Users as users on users.Id = question.owneruserid\nwhere question.posttypeid = 1\nand selfAnswer.posttypeid = 2\nand question.owneruserid=##UserId?1190##\n--and question.CommunityOwnedDate is null\ngroup by question.Id, \n         question.CreationDate\nhaving count(distinct selfAnswer.id) > 0\norder by \n        [Count] DESC,\n        question.CreationDate DESC",
        "CreationDate": "2019-09-13 08:47:59",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 1105365,
        "Title": "Generic Query for Trending Multiple Tags",
        "Description": "This query is somewhat generic so that I can see trending for multiple tags.  In this example I'm comparing different JavaScript Frameworks\/Libraries, but these Tag names can be easily changed to any tag names you want.\r\n\r\nFor a visual comparison, in the result click \"Graph\" tab.  Very cool feature.\r\n\r\nI tried to make this a fast a possible by reviewing the execution plan.  This probably can be made even faster, but happy with it now.",
        "QueryBody": "DECLARE  @StartDate DATETIME = '2012-1-1'\n        ,@EndDate DATETIME = DATEADD(month, DATEDIFF(month, 0, GETDATE()), 0) -- First Day Of current Month\n\n--\nSELECT RoundToMonth, TagName, TagCount\nFROM \n(\n  SELECT  \n    DATEADD(Month, DATEDIFF(MONTH, 0, CreationDate), 0) RoundToMonth\n    , COUNT(PostTags.TagID) TagCount\n    , TagID\n  FROM PostTags\n  LEFT JOIN Posts ON\n    PostTags.PostId = Posts.Id\n  WHERE \n    PostTags.TagID IN (SELECT Id FROM #MyTags)\n    AND CreationDate > @StartDate\n    AND CreationDate < @EndDate\n  GROUP BY\n    DATEADD(Month, DATEDIFF(MONTH, 0, CreationDate), 0)\n    , PostTags.TagID\n)TagCountPerMonth\nLEFT JOIN Tags ON\n  TagCountPerMonth.TagId = Tags.Id\nORDER BY RoundToMonth DESC, TagName ASC",
        "CreationDate": "2019-09-25 16:21:15",
        "validated": false,
        "QueryBody_Original": "DECLARE  @StartDate DATETIME = '2012-1-1'\n        ,@EndDate DATETIME = DATEADD(month, DATEDIFF(month, 0, GETDATE()), 0) -- First Day Of current Month\n\n--\nSELECT RoundToMonth, TagName, TagCount\nFROM \n(\n  SELECT  \n    DATEADD(Month, DATEDIFF(MONTH, 0, CreationDate), 0) RoundToMonth\n    , COUNT(PostTags.TagID) TagCount\n    , TagID\n  FROM PostTags\n  LEFT JOIN Posts ON\n    PostTags.PostId = Posts.Id\n  WHERE \n    PostTags.TagID IN (SELECT Id FROM #MyTags)\n    AND CreationDate > @StartDate\n    AND CreationDate < @EndDate\n  GROUP BY\n    DATEADD(Month, DATEDIFF(MONTH, 0, CreationDate), 0)\n    , PostTags.TagID\n)TagCountPerMonth\nLEFT JOIN Tags ON\n  TagCountPerMonth.TagId = Tags.Id\nORDER BY RoundToMonth DESC, TagName ASC"
    },
    {
        "QuerySetId": 1106675,
        "Title": "To whom do I answer?",
        "Description": null,
        "QueryBody": "SELECT  \n  Questions.OwnerUserId as [User Link],\n  Answers.Score as A_score,\n  Questions.Score as Q_score,\n  Questions.Id as [Post Link],\n  Questions.Tags as [Tags]\nFROM\n  Posts as Questions,\n  Posts as Answers \nWHERE\n  Questions.PostTypeId  = 1 AND\n  Answers.PostTypeId  = 2 AND\n  Answers.ParentId = Questions.Id AND\n  Answers.OwnerUserId = ##UserId1##",
        "CreationDate": "2019-09-15 19:59:49",
        "validated": false,
        "QueryBody_Original": "SELECT  \n  Questions.OwnerUserId as [User Link],\n  Answers.Score as A_score,\n  Questions.Score as Q_score,\n  Questions.Id as [Post Link],\n  Questions.Tags as [Tags]\nFROM\n  Posts as Questions,\n  Posts as Answers \nWHERE\n  Questions.PostTypeId  = 1 AND\n  Answers.PostTypeId  = 2 AND\n  Answers.ParentId = Questions.Id AND\n  Answers.OwnerUserId = ##UserId1##"
    },
    {
        "QuerySetId": 1106681,
        "Title": "To whom do I answer on average?",
        "Description": null,
        "QueryBody": "SELECT  \n  COUNT(1) as nbe_answers,\n  Questions.OwnerUserId as [User Link],\n  AVG(Answers.Score) as A_score,\n  AVG(Questions.Score) as Q_score\nFROM\n  Posts as Questions,\n  Posts as Answers \nWHERE\n  Questions.PostTypeId  = 1 AND\n  Answers.PostTypeId  = 2 AND\n  Answers.ParentId = Questions.Id AND\n  Answers.OwnerUserId = ##UserId1## \nGROUP BY\n  Questions.OwnerUserId\nORDER BY\n  nbe_answers DESC",
        "CreationDate": "2019-09-15 20:02:45",
        "validated": false,
        "QueryBody_Original": "SELECT  \n  COUNT(1) as nbe_answers,\n  Questions.OwnerUserId as [User Link],\n  AVG(Answers.Score) as A_score,\n  AVG(Questions.Score) as Q_score\nFROM\n  Posts as Questions,\n  Posts as Answers \nWHERE\n  Questions.PostTypeId  = 1 AND\n  Answers.PostTypeId  = 2 AND\n  Answers.ParentId = Questions.Id AND\n  Answers.OwnerUserId = ##UserId1## \nGROUP BY\n  Questions.OwnerUserId\nORDER BY\n  nbe_answers DESC"
    },
    {
        "QuerySetId": 1110377,
        "Title": "Highest Reputation by Country - NGQ",
        "Description": null,
        "QueryBody": "SELECT \n    ROW_NUMBER() OVER(ORDER BY Reputation DESC) AS [#], \n    Id AS [User Link], \n    Reputation,\n    location\nFROM\n    Users \nWHERE\n    LOWER(Location) LIKE LOWER('%##CountryName##%')\n    AND Reputation > ##Reputation##\nORDER BY\n    Reputation DESC;",
        "CreationDate": "2019-09-19 04:46:19",
        "validated": false,
        "QueryBody_Original": "SELECT \n    ROW_NUMBER() OVER(ORDER BY Reputation DESC) AS [#], \n    Id AS [User Link], \n    Reputation,\n    location\nFROM\n    Users \nWHERE\n    LOWER(Location) LIKE LOWER('%##CountryName##%')\n    AND Reputation > ##Reputation##\nORDER BY\n    Reputation DESC;"
    },
    {
        "QuerySetId": 1110766,
        "Title": "User with highest number of comments",
        "Description": null,
        "QueryBody": "SELECT  TOP(##num##)\n  COUNT(a.Id), a.PostId, b.Score, b.Title\nFROM Comments a inner join Posts b on b.Id = a.PostId where a.creationdate >= '8\/1\/2018'\nGROUP BY a.PostId, b.Score, b.Title\nORDER BY COUNT(a.Id) DESC",
        "CreationDate": "2019-09-19 18:06:08",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 1110781,
        "Title": "Posts with highest number of comments",
        "Description": null,
        "QueryBody": "SELECT  TOP(##num##)\n  COUNT(a.Id), a.PostId AS [Post Link], b.Score\nFROM Comments a inner join Posts b ON b.Id = a.PostId \nWHERE a.creationdate >= '8\/1\/2010'\nGROUP BY a.PostId, b.Score\nORDER BY COUNT(a.Id) DESC",
        "CreationDate": "2019-09-19 18:10:05",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 1110875,
        "Title": "How many answers did I submit on different days?",
        "Description": null,
        "QueryBody": "DECLARE  @UserId int = ##UserId##\n \nSELECT\nCONVERT(DATE, MIN(CreationDate), 240) AS Ans_Date,\nCOUNT(*) AS Answers\nFROM Posts\nWHERE Posts.PostTypeId = 2 AND Posts.OwnerUserId = @UserId AND CreationDate > DATEADD(month,-4,GETDATE())\nGROUP BY CAST(Posts.CreationDate AS DATE)",
        "CreationDate": "2020-10-19 18:00:59",
        "validated": false,
        "QueryBody_Original": "DECLARE  @UserId int = ##UserId##\n \nSELECT\nCONVERT(DATE, MIN(CreationDate), 240) AS Ans_Date,\nCOUNT(*) AS Answers\nFROM Posts\nWHERE Posts.PostTypeId = 2 AND Posts.OwnerUserId = @UserId AND CreationDate > DATEADD(month,-4,GETDATE())\nGROUP BY CAST(Posts.CreationDate AS DATE)"
    },
    {
        "QuerySetId": 1111754,
        "Title": "Vanity: Which users earned a particular tag-based badge sooner than me?",
        "Description": null,
        "QueryBody": "DECLARE  @BadgeName nvarchar(255) = '##BadgeName##'\nDECLARE @BadgeType int = ##BadgeType## -- 1: Gold, 2: Silver, 3: Bronze\nDECLARE @UserId int = ##UserId##\n\nSELECT\nUsers.DisplayName,\nUsers.Id,\nDATEDIFF(day, Users.CreationDate, Badges.Date) AS Days\nFROM Badges\n  INNER JOIN Users ON Users.Id = Badges.UserId\nWHERE\n  Badges.Class = @BadgeType\n  AND Badges.TagBased = 1 -- for true\n  AND Badges.Name = @BadgeName\n  AND DATEDIFF(day, Users.CreationDate, Badges.Date) <=\n    (SELECT DATEDIFF(day, Users.CreationDate, Badges.Date)\n    FROM Badges\n      INNER JOIN Users ON Users.Id = Badges.UserId\n    WHERE\n      Badges.Class = @BadgeType\n      AND Badges.TagBased = 1 -- for true\n      AND Badges.Name = @BadgeName\n      AND Badges.UserId = @UserId)\nORDER BY Days Asc",
        "CreationDate": "2019-09-21 09:30:56",
        "validated": false,
        "QueryBody_Original": "DECLARE  @BadgeName nvarchar(255) = '##BadgeName##'\nDECLARE @BadgeType int = ##BadgeType## -- 1: Gold, 2: Silver, 3: Bronze\nDECLARE @UserId int = ##UserId##\n\nSELECT\nUsers.DisplayName,\nUsers.Id,\nDATEDIFF(day, Users.CreationDate, Badges.Date) AS Days\nFROM Badges\n  INNER JOIN Users ON Users.Id = Badges.UserId\nWHERE\n  Badges.Class = @BadgeType\n  AND Badges.TagBased = 1 -- for true\n  AND Badges.Name = @BadgeName\n  AND DATEDIFF(day, Users.CreationDate, Badges.Date) <=\n    (SELECT DATEDIFF(day, Users.CreationDate, Badges.Date)\n    FROM Badges\n      INNER JOIN Users ON Users.Id = Badges.UserId\n    WHERE\n      Badges.Class = @BadgeType\n      AND Badges.TagBased = 1 -- for true\n      AND Badges.Name = @BadgeName\n      AND Badges.UserId = @UserId)\nORDER BY Days Asc"
    },
    {
        "QuerySetId": 1112323,
        "Title": "Score per answer for users with at least 10 answers in the past 30 days in a tag.",
        "Description": null,
        "QueryBody": "DECLARE  @TagName nvarchar(255) = '##TagName##'\n\nSELECT Posts.OwnerUserId AS [User Link],\n       SUM(Score) AS Score,\n       COUNT(*) AS Answers,\n       ROUND(1.0 * SUM(Score)\/COUNT(*), 2) AS ScorePerAnswer\nFROM Posts\nWHERE Posts.ParentId IN\n    (SELECT Posts.Id\n     FROM Posts\n     INNER JOIN PostTags ON PostTags.PostId = Posts.Id\n     INNER JOIN Tags ON Tags.Id = PostTags.TagId\n     WHERE Tags.TagName = @TagName)\n  AND Posts.CreationDate >= DATEADD(DAY, -30, GETDATE())\n  AND Posts.CreationDate <= GETDATE()\nGROUP BY Posts.OwnerUserId\nHAVING COUNT(*) > 10\nORDER BY ScorePerAnswer DESC",
        "CreationDate": "2019-09-24 07:05:01",
        "validated": false,
        "QueryBody_Original": "DECLARE  @TagName nvarchar(255) = '##TagName##'\n\nSELECT Posts.OwnerUserId AS [User Link],\n       SUM(Score) AS Score,\n       COUNT(*) AS Answers,\n       ROUND(1.0 * SUM(Score)\/COUNT(*), 2) AS ScorePerAnswer\nFROM Posts\nWHERE Posts.ParentId IN\n    (SELECT Posts.Id\n     FROM Posts\n     INNER JOIN PostTags ON PostTags.PostId = Posts.Id\n     INNER JOIN Tags ON Tags.Id = PostTags.TagId\n     WHERE Tags.TagName = @TagName)\n  AND Posts.CreationDate >= DATEADD(DAY, -30, GETDATE())\n  AND Posts.CreationDate <= GETDATE()\nGROUP BY Posts.OwnerUserId\nHAVING COUNT(*) > 10\nORDER BY ScorePerAnswer DESC"
    },
    {
        "QuerySetId": 1113061,
        "Title": "Search for questions by query and user location",
        "Description": null,
        "QueryBody": "SELECT      q.Id AS [Post Link],\n           q.Score,\n           q.Tags,\n           q.Creationdate\nFROM       Posts q\nINNER JOIN Users u\nON         q.OwnerUserId = u.Id\nWHERE      LOWER(u.Location) LIKE N'%' + LOWER(##Location:string##) + '%'\nAND        LOWER(q.Tags) LIKE '%itext%' \nAND        q.PostTypeId = 1 -- Questions",
        "CreationDate": "2019-10-23 17:09:50",
        "validated": false,
        "QueryBody_Original": "SELECT      q.Id AS [Post Link],\n           q.Score,\n           q.Tags,\n           q.Creationdate\nFROM       Posts q\nINNER JOIN Users u\nON         q.OwnerUserId = u.Id\nWHERE      LOWER(u.Location) LIKE N'%' + LOWER(##Location:string##) + '%'\nAND        LOWER(q.Tags) LIKE '%itext%' \nAND        q.PostTypeId = 1 -- Questions"
    },
    {
        "QuerySetId": 1114074,
        "Title": "Get Users link with Search bio's keywords ",
        "Description": null,
        "QueryBody": "SELECT  Id AS [User Link], AboutMe\nFROM Users\nWHERE AboutMe collate SQL_Latin1_General_CP1_CS_AS LIKE '%' + ##query1:string## + '%'\nOR AboutMe collate SQL_Latin1_General_CP1_CS_AS LIKE '%' + ##query2:string## + '%'\nORDER BY [DisplayName]",
        "CreationDate": "2019-09-25 10:47:02",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 1114078,
        "Title": "Get Users list whose bio's contains given keywords",
        "Description": null,
        "QueryBody": "SELECT  Id AS [User Link], AboutMe\nFROM Users\nWHERE AboutMe collate SQL_Latin1_General_CP1_CS_AS LIKE '%' + ##query1:string## + '%'\nOR AboutMe collate SQL_Latin1_General_CP1_CS_AS LIKE '%' + ##query2:string## + '%'\nORDER BY [DisplayName]",
        "CreationDate": "2019-09-25 10:54:38",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 1115600,
        "Title": "Show all posts based on User ID",
        "Description": null,
        "QueryBody": "SELECT  * FROM Posts\nWHERE OwnerUserId = ##userid##",
        "CreationDate": "2019-09-27 01:53:13",
        "validated": false,
        "QueryBody_Original": "SELECT  * FROM Posts\nWHERE OwnerUserId = ##userid##"
    },
    {
        "QuerySetId": 1115605,
        "Title": "Get Users with a specific rep value",
        "Description": null,
        "QueryBody": "SELECT  Id AS [User Link] from users where reputation = ##Reputation:int##",
        "CreationDate": "2020-08-09 21:27:46",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 1115648,
        "Title": "Top 1000 users (with at least 25 answers) based on score per answer",
        "Description": null,
        "QueryBody": "WITH  at least 25 answers) based on score per answer\n-- Not counting answers WITH less than or equal to 1 vote\n\nSELECT TOP 1000 Posts.OwnerUserId AS [User Link],\n           SUM(Posts.Score) AS Total_Score,\n           COUNT(*) AS Answer_Number,\n           ROUND((1.0 * SUM(Posts.Score)\/COUNT(*)), 3) AS Mean_Score\nFROM Posts\nWHERE Posts.PostTypeId = 2\n  AND Posts.Score > 1\nGROUP BY OwnerUserId\nHAVING COUNT(*) > 25\nORDER BY Mean_Score DESC",
        "CreationDate": "2019-09-27 08:28:10",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 1115656,
        "Title": "Questions with highest bounty amount in past 30 days",
        "Description": null,
        "QueryBody": "WITH  highest bounty amount in past 30 days\n\nSELECT TOP 1000 Posts.Id AS [Post Link],\n           Votes.BountyAmount,\n           Posts.Tags\nFROM Posts\nINNER JOIN Votes ON Votes.PostId = Posts.Id\nWHERE Posts.PostTypeId = 1\n  AND Posts.CreationDate >= DATEADD(DAY, -30, GETDATE())\n  AND Posts.CreationDate <= GETDATE()\n  AND Votes.VoteTypeId = 8 -- BountyStart\nORDER BY Votes.BountyAmount DESC",
        "CreationDate": "2019-09-27 08:37:35",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 1117282,
        "Title": "Comments belonging to deleted Users",
        "Description": null,
        "QueryBody": "SELECT  Posts.Id AS [Post Link], Posts.Id, Comments.Id AS [Comment Link]\nFROM Posts INNER JOIN Comments ON Posts.Id=Comments.PostId LEFT JOIN Users on Users.Id=Comments.UserId\nWHERE Posts.Id=##PostId## AND Users.Id IS NULL",
        "CreationDate": "2019-09-30 04:44:54",
        "validated": false,
        "QueryBody_Original": "SELECT  Posts.Id AS [Post Link], Posts.Id, Comments.Id AS [Comment Link]\nFROM Posts INNER JOIN Comments ON Posts.Id=Comments.PostId LEFT JOIN Users on Users.Id=Comments.UserId\nWHERE Posts.Id=##PostId## AND Users.Id IS NULL"
    },
    {
        "QuerySetId": 1117390,
        "Title": "Top 100 Users of Rust",
        "Description": null,
        "QueryBody": "DECLARE  @limit int = 100;\nDECLARE @tag_id int = (select id from tags where tagname = 'python-asyncio');\n\n--select rank() over (order by score desc) \"Rank\", * from (\nselect top (@limit)\n  rank() over (order by sum(answers.score) desc) \"Rank\",\n  users.id \"User Link\"\n  ,sum(answers.score) as \"Score\"\nfrom users\njoin posts answers on (users.id = answers.owneruserid)\njoin posts parent on (answers.parentid = parent.id)\njoin posttags on (parent.id = posttags.postid)\nwhere posttags.tagid = @tag_id\nand answers.posttypeid = 2  -- answers only\ngroup by users.id\norder by sum(answers.score) desc\n;",
        "CreationDate": "2020-06-03 13:18:24",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 1117715,
        "Title": "Comment replies under posts by a deleted user",
        "Description": null,
        "QueryBody": "SELECT  c.Id As [Comment Link], c.Text\nFROM Comments c JOIN Posts p ON p.Id=c.PostId\nWHERE (p.OwnerDisplayName='user' + Convert(nvarchar(20), ##UserId##)) \nAND (c.Text LIKE '%@%')",
        "CreationDate": "2019-09-30 20:44:18",
        "validated": false,
        "QueryBody_Original": "SELECT  c.Id As [Comment Link], c.Text\nFROM Comments c JOIN Posts p ON p.Id=c.PostId\nWHERE (p.OwnerDisplayName='user' + Convert(nvarchar(20), ##UserId##)) \nAND (c.Text LIKE '%@%')"
    },
    {
        "QuerySetId": 1117716,
        "Title": "Possible comment replies to a deleted user",
        "Description": null,
        "QueryBody": "SELECT  DISTINCT c2.Id AS [Comment Link], c2.Text \nFROM Comments c1 JOIN Comments c2 ON (c1.PostId=c2.PostId) \n  AND (c1.UserDisplayName='user' + Convert(nvarchar(20), ##UserId##)) AND (c1.CreationDate<c2.CreationDate)\nWHERE (c2.Text LIKE '%@%')",
        "CreationDate": "2019-09-30 20:55:37",
        "validated": false,
        "QueryBody_Original": "SELECT  DISTINCT c2.Id AS [Comment Link], c2.Text \nFROM Comments c1 JOIN Comments c2 ON (c1.PostId=c2.PostId) \n  AND (c1.UserDisplayName='user' + Convert(nvarchar(20), ##UserId##)) AND (c1.CreationDate<c2.CreationDate)\nWHERE (c2.Text LIKE '%@%')"
    },
    {
        "QuerySetId": 1117718,
        "Title": "Users who accepted my answers",
        "Description": null,
        "QueryBody": "DECLARE  @UserId int = ##UserId##;\n\nWITH Q AS\n  (SELECT *\n   FROM Posts\n   WHERE AcceptedAnswerId IS NOT NULL\n     AND OwnerUserId IS NOT NULL\n     AND OwnerUserId <> @UserId)\nSELECT Q.OwnerUserId AS [User Link],\n       COUNT(*) AS Num\nFROM Posts\nINNER JOIN Q ON Q.Id = Posts.ParentId\nWHERE Posts.OwnerUserId = @UserId\nGROUP BY Q.OwnerUserId\nHAVING COUNT(*) > 1\nORDER BY Num DESC",
        "CreationDate": "2019-09-30 22:38:40",
        "validated": false,
        "QueryBody_Original": "DECLARE  @UserId int = ##UserId##;\n\nWITH Q AS\n  (SELECT *\n   FROM Posts\n   WHERE AcceptedAnswerId IS NOT NULL\n     AND OwnerUserId IS NOT NULL\n     AND OwnerUserId <> @UserId)\nSELECT Q.OwnerUserId AS [User Link],\n       COUNT(*) AS Num\nFROM Posts\nINNER JOIN Q ON Q.Id = Posts.ParentId\nWHERE Posts.OwnerUserId = @UserId\nGROUP BY Q.OwnerUserId\nHAVING COUNT(*) > 1\nORDER BY Num DESC"
    },
    {
        "QuerySetId": 1117764,
        "Title": "Which of my comments have zero score and can be potentially removed",
        "Description": null,
        "QueryBody": "DECLARE  @UserId int = ##UserId##;\n\nSELECT\nId AS [Comment Link],\nCreationDate\nFROM Comments\nWHERE UserId = @UserId\nAND Score = 0\nORDER BY CreationDate DESC",
        "CreationDate": "2019-09-30 23:19:52",
        "validated": false,
        "QueryBody_Original": "DECLARE  @UserId int = ##UserId##;\n\nSELECT\nId AS [Comment Link],\nCreationDate\nFROM Comments\nWHERE UserId = @UserId\nAND Score = 0\nORDER BY CreationDate DESC"
    },
    {
        "QuerySetId": 1118810,
        "Title": "6 month old first questions",
        "Description": "Returns each user's first question, with the most recent posts first.",
        "QueryBody": "WITH  MidResults AS (\n    SELECT Id, \n           OwnerUserId, \n           CreationDate, \n           Score,\n           ClosedDate,\n           ROW_NUMBER() OVER(PARTITION BY OwnerUserId \n                                 ORDER BY CreationDate ASC) AS rank\n      FROM Posts\n      WHERE Posts.PostTypeId = 1 -- questions\n      )\nSELECT TOP ##number?200##\n  Id AS [Post Link],\n  OwnerUserId AS [User Link],\n  CreationDate,\n  Score,\n  CASE WHEN ClosedDate IS NOT NULL THEN 'Closed' ELSE NULL END\nFROM MidResults\nWHERE MidResults.rank = 1 and CreationDate < DATEADD(month, -6, GETDATE())\nORDER BY CreationDate DESC",
        "CreationDate": "2019-10-02 08:32:15",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 1119325,
        "Title": "How many of my answers were accepted on different days",
        "Description": null,
        "QueryBody": "DECLARE  @UserId int = ##UserId##;\n\nSELECT Votes.CreationDate,\n       COUNT(*) AS Num\nFROM Posts\nINNER JOIN Votes ON Votes.PostId = Posts.Id\nWHERE Posts.OwnerUserId = @UserId\n  AND Votes.VoteTypeId = 1\nGROUP BY Votes.CreationDate\nORDER BY Votes.CreationDate ASC",
        "CreationDate": "2019-10-03 03:51:04",
        "validated": false,
        "QueryBody_Original": "DECLARE  @UserId int = ##UserId##;\n\nSELECT Votes.CreationDate,\n       COUNT(*) AS Num\nFROM Posts\nINNER JOIN Votes ON Votes.PostId = Posts.Id\nWHERE Posts.OwnerUserId = @UserId\n  AND Votes.VoteTypeId = 1\nGROUP BY Votes.CreationDate\nORDER BY Votes.CreationDate ASC"
    },
    {
        "QuerySetId": 1120678,
        "Title": "Unanswered questions older than 30 days with score greater than 4",
        "Description": null,
        "QueryBody": "DECLARE  @TagName nvarchar(255) = '##TagName##'\nSELECT -- TOP 5\nPosts.CreationDate,\n               Posts.Id AS [Post Link],\n               Posts.OwnerUserId AS [User Link],\n               Posts.Score\nFROM Posts\nINNER JOIN PostTags ON PostTags.PostId = Posts.Id\nINNER JOIN Tags ON Tags.Id = PostTags.TagId\nWHERE Posts.PostTypeId = 1\n  AND Posts.ClosedDate IS NULL\n  AND Posts.CreationDate < DATEADD(DAY, -30, GETDATE())\n  AND Posts.Score > 4\n  AND Posts.Id NOT IN\n    (SELECT DISTINCT ParentId\n     FROM Posts\n     WHERE ParentId IS NOT NULL)\n  AND Tags.TagName = @TagName\nORDER BY Posts.Score DESC",
        "CreationDate": "2019-10-05 01:16:52",
        "validated": false,
        "QueryBody_Original": "DECLARE  @TagName nvarchar(255) = '##TagName##'\nSELECT -- TOP 5\nPosts.CreationDate,\n               Posts.Id AS [Post Link],\n               Posts.OwnerUserId AS [User Link],\n               Posts.Score\nFROM Posts\nINNER JOIN PostTags ON PostTags.PostId = Posts.Id\nINNER JOIN Tags ON Tags.Id = PostTags.TagId\nWHERE Posts.PostTypeId = 1\n  AND Posts.ClosedDate IS NULL\n  AND Posts.CreationDate < DATEADD(DAY, -30, GETDATE())\n  AND Posts.Score > 4\n  AND Posts.Id NOT IN\n    (SELECT DISTINCT ParentId\n     FROM Posts\n     WHERE ParentId IS NOT NULL)\n  AND Tags.TagName = @TagName\nORDER BY Posts.Score DESC"
    },
    {
        "QuerySetId": 1120720,
        "Title": "Questions per month for a specific tag",
        "Description": null,
        "QueryBody": "DECLARE  @TagName nvarchar(255) = '##TagName##'\nSELECT DATEADD(MONTH, DATEDIFF(MONTH, 0, MIN(CreationDate)), 0) AS YearMon,\n       COUNT(*) AS Num\nFROM Posts\nINNER JOIN PostTags ON PostTags.PostId = Posts.Id\nINNER JOIN Tags ON Tags.Id = PostTags.TagId\nWHERE Posts.PostTypeId = 1\n  AND Tags.TagName = @TagName\nGROUP BY YEAR(CreationDate),\n         MONTH(CreationDate)\nORDER BY YearMon ASC",
        "CreationDate": "2019-10-05 03:37:11",
        "validated": false,
        "QueryBody_Original": "DECLARE  @TagName nvarchar(255) = '##TagName##'\nSELECT DATEADD(MONTH, DATEDIFF(MONTH, 0, MIN(CreationDate)), 0) AS YearMon,\n       COUNT(*) AS Num\nFROM Posts\nINNER JOIN PostTags ON PostTags.PostId = Posts.Id\nINNER JOIN Tags ON Tags.Id = PostTags.TagId\nWHERE Posts.PostTypeId = 1\n  AND Tags.TagName = @TagName\nGROUP BY YEAR(CreationDate),\n         MONTH(CreationDate)\nORDER BY YearMon ASC"
    },
    {
        "QuerySetId": 1121616,
        "Title": "Comparison of # of posts per period",
        "Description": null,
        "QueryBody": "DECLARE  @BeginOfThisWeek AS DATETIME2 = '2019-10-06';\nDECLARE @BeginOfSecondWeek AS DATETIME2 = '2019-09-29';\nDECLARE @BeginOfFirstWeek AS DATETIME2 = '2019-09-22';\n\nSELECT (\n  SELECT COUNT(*) FROM Posts\n    WHERE PostTypeId = 1 -- Questions\n      AND CreationDate BETWEEN @BeginOfFirstWeek AND @BeginOfSecondWeek\n), (\n  SELECT COUNT(*) FROM Posts\n    WHERE PostTypeId = 1 -- Questions\n      AND CreationDate BETWEEN @BeginOfSecondWeek AND @BeginOfThisWeek\n);",
        "CreationDate": "2019-10-07 13:54:25",
        "validated": false,
        "QueryBody_Original": "DECLARE  @BeginOfThisWeek AS DATETIME2 = '2019-10-06';\nDECLARE @BeginOfSecondWeek AS DATETIME2 = '2019-09-29';\nDECLARE @BeginOfFirstWeek AS DATETIME2 = '2019-09-22';\n\nSELECT (\n  SELECT COUNT(*) FROM Posts\n    WHERE PostTypeId = 1 -- Questions\n      AND CreationDate BETWEEN @BeginOfFirstWeek AND @BeginOfSecondWeek\n), (\n  SELECT COUNT(*) FROM Posts\n    WHERE PostTypeId = 1 -- Questions\n      AND CreationDate BETWEEN @BeginOfSecondWeek AND @BeginOfThisWeek\n);"
    },
    {
        "QuerySetId": 1121965,
        "Title": "Questions with No accepted answer where I have the highest score",
        "Description": null,
        "QueryBody": "WITH  No accepted answer where I have the highest score\n-- \nSELECT q.Id as [Post Link]\nFROM Posts a\nINNER JOIN Posts q ON q.ID = a.ParentID\nWHERE a.OwnerUserID = ##UserID##\nAND (SELECT MAX(p.Score) FROM Posts p WHERE p.ParentID=q.ID AND p.ID<>a.ID) < a.Score\nORDER BY q.ViewCount DESC",
        "CreationDate": "2019-10-13 01:47:47",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 1123693,
        "Title": "Posts with links to other SE sites",
        "Description": null,
        "QueryBody": "DECLARE  @sitename NVARCHAR(255) = 'math.stackexchange.com'\nDECLARE @sitelink NVARCHAR(255) = '<a href=\"https:\/\/' + @sitename + '\/' \n;\nWITH const AS (SELECT\n  @sitelink AS sitelink\n),\nCensoredPosts AS (\n  SELECT Id, REPLACE(Body, sitelink, '<censored xxx=\"') AS Body\n  FROM Posts, const\n)\nSELECT TOP 10000 Id AS [Post Link]\nFROM CensoredPosts\nWHERE Body LIKE '%<a href=\"%'\n  AND (Body LIKE '%.stackexchange.com\/%'\n    OR Body LIKE '%[\/.]stackoverflow.com\/%'\n    OR Body LIKE '%[\/.]superuser.com\/%'\n    OR Body LIKE '%[\/.]serverfault.com\/%'\n    OR Body LIKE '%[\/.]mathoverflow.net\/%'\n    OR Body LIKE '%[\/.]askubuntu.com\/%'\n    OR Body LIKE '%[\/.]stackapps.com\/%'\n  )",
        "CreationDate": "2019-10-11 00:02:20",
        "validated": false,
        "QueryBody_Original": "DECLARE  @sitename NVARCHAR(255) = 'math.stackexchange.com'\nDECLARE @sitelink NVARCHAR(255) = '<a href=\"https:\/\/' + @sitename + '\/' \n;\nWITH const AS (SELECT\n  @sitelink AS sitelink\n),\nCensoredPosts AS (\n  SELECT Id, REPLACE(Body, sitelink, '<censored xxx=\"') AS Body\n  FROM Posts, const\n)\nSELECT TOP 10000 Id AS [Post Link]\nFROM CensoredPosts\nWHERE Body LIKE '%<a href=\"%'\n  AND (Body LIKE '%.stackexchange.com\/%'\n    OR Body LIKE '%[\/.]stackoverflow.com\/%'\n    OR Body LIKE '%[\/.]superuser.com\/%'\n    OR Body LIKE '%[\/.]serverfault.com\/%'\n    OR Body LIKE '%[\/.]mathoverflow.net\/%'\n    OR Body LIKE '%[\/.]askubuntu.com\/%'\n    OR Body LIKE '%[\/.]stackapps.com\/%'\n  )"
    },
    {
        "QuerySetId": 1123697,
        "Title": "Good questions in given tags",
        "Description": null,
        "QueryBody": "DECLARE  @TagName nvarchar(255) = '##TagName##'\nSELECT TOP 100 Posts.Id AS [Post Link],\n           Tags.TagName\nFROM Posts\nINNER JOIN PostTags ON PostTags.PostId = Posts.Id\nINNER JOIN Tags ON Tags.Id = PostTags.TagId\nWHERE Tags.TagName IN\n    (SELECT *\n     FROM STRING_SPLIT(@TagName, ';'))\n  AND Posts.PostTypeId = 1\n  AND Posts.Score > -1\n  AND Posts.AcceptedAnswerId IS NOT NULL\nORDER BY Posts.CreationDate DESC",
        "CreationDate": "2019-10-10 23:20:14",
        "validated": false,
        "QueryBody_Original": "DECLARE  @TagName nvarchar(255) = '##TagName##'\nSELECT TOP 100 Posts.Id AS [Post Link],\n           Tags.TagName\nFROM Posts\nINNER JOIN PostTags ON PostTags.PostId = Posts.Id\nINNER JOIN Tags ON Tags.Id = PostTags.TagId\nWHERE Tags.TagName IN\n    (SELECT *\n     FROM STRING_SPLIT(@TagName, ';'))\n  AND Posts.PostTypeId = 1\n  AND Posts.Score > -1\n  AND Posts.AcceptedAnswerId IS NOT NULL\nORDER BY Posts.CreationDate DESC"
    },
    {
        "QuerySetId": 1123854,
        "Title": "Search for users based off GitHub username",
        "Description": "no description",
        "QueryBody": "SELECT  u.Id as [User Link]\nFROM Users u\nWHERE AboutMe LIKE '%' + ##userName:string## + '%'\nORDER BY CreationDate DESC",
        "CreationDate": "2019-10-11 05:46:55",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 1124230,
        "Title": "User-specific gendered comment count on SU",
        "Description": null,
        "QueryBody": "DECLARE  @gendered_comments AS Int\nDECLARE @total_comments AS Int\n\nSELECT @total_comments = COUNT(*) FROM #coms\nSELECT c.Id AS [Comment Link], c.CreationDate FROM #coms c\nWHERE \n   c.Text LIKE '%[^a-zA-Z0-9][Hh]e[^a-zA-Z0-9]%' OR\n   c.Text LIKE '%[^a-zA-Z0-9][Hh]im[^a-zA-Z0-9]%' OR\n   c.Text LIKE '%[^a-zA-Z0-9][Hh]is[^a-zA-Z0-9]%' OR\n   c.Text LIKE '%[^a-zA-Z0-9][Ss]he[^a-zA-Z0-9]%' OR\n   c.Text LIKE '%[^a-zA-Z0-9][Hh]er[^a-zA-Z0-9]%'\nORDER BY c.CreationDate ASC\n\n\/* forked from here \nhttps:\/\/data.stackexchange.com\/stackoverflow\/query\/1124222\/user-specific-gendered-comment-count \n*\/",
        "CreationDate": "2019-10-11 23:18:18",
        "validated": false,
        "QueryBody_Original": "DECLARE  @gendered_comments AS Int\nDECLARE @total_comments AS Int\n\nSELECT @total_comments = COUNT(*) FROM #coms\nSELECT c.Id AS [Comment Link], c.CreationDate FROM #coms c\nWHERE \n   c.Text LIKE '%[^a-zA-Z0-9][Hh]e[^a-zA-Z0-9]%' OR\n   c.Text LIKE '%[^a-zA-Z0-9][Hh]im[^a-zA-Z0-9]%' OR\n   c.Text LIKE '%[^a-zA-Z0-9][Hh]is[^a-zA-Z0-9]%' OR\n   c.Text LIKE '%[^a-zA-Z0-9][Ss]he[^a-zA-Z0-9]%' OR\n   c.Text LIKE '%[^a-zA-Z0-9][Hh]er[^a-zA-Z0-9]%'\nORDER BY c.CreationDate ASC\n\n\/* forked from here \nhttps:\/\/data.stackexchange.com\/stackoverflow\/query\/1124222\/user-specific-gendered-comment-count \n*\/"
    },
    {
        "QuerySetId": 1124400,
        "Title": "Number of questions\/answers\/comments per day for the past 6 months",
        "Description": null,
        "QueryBody": "SELECT   c.Id id,\n        c.Text comment,\n        DATEADD(day,0,DATEDIFF(day,0,c.CreationDate)) comment_date\ninto    #coms\nfrom    Comments c \nwhere   c.CreationDate >= DATEADD(MONTH, -6, GETDATE())\n\nSELECT  comment_date,\n        count(id) total\nfrom    #coms\ngroup by comment_date\norder by comment_date",
        "CreationDate": "2019-10-16 00:13:28",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 1125332,
        "Title": "Top 5 tags with most questions by month since beginning",
        "Description": null,
        "QueryBody": "WITH  most questions by month since beginning\nWITH Tmp AS\n  (SELECT DENSE_RANK() OVER (PARTITION BY YEAR(Posts.CreationDate),\n                                          MONTH(Posts.CreationDate)\n                             ORDER BY COUNT(*) DESC) AS SN,\n                            YEAR(CreationDate) AS Yr,\n                            MONTH(CreationDate) AS Mnth,\n                            COUNT(*) AS Num,\n                            Tags.TagName\n   FROM Posts\n   INNER JOIN PostTags ON PostTags.PostId = Posts.Id\n   INNER JOIN Tags ON Tags.Id = PostTags.TagId\n   WHERE Posts.PostTypeId = 1\n   GROUP BY Tags.TagName,\n            YEAR(CreationDate),\n            MONTH(CreationDate)\n   HAVING COUNT(*) > 100)\nSELECT *\nFROM Tmp\nWHERE SN <= 5\nORDER BY Yr,\n         Mnth ASC",
        "CreationDate": "2019-10-14 20:55:48",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 1126570,
        "Title": "Ratio of users who have at least one question upvote",
        "Description": null,
        "QueryBody": "DECLARE  @population int = (select count(*) from Users)\n\nselect count(distinct OwnerUserId) \"Users gaining reputation\",\n       @population \"Total users\",\n       100.0*count(distinct OwnerUserId)\/@population \"% who gain\"\nfrom Posts q\n     join Votes v on PostId = q.Id\nwhere PostTypeId = 1\n      and VoteTypeId = 2",
        "CreationDate": "2019-10-22 08:36:29",
        "validated": false,
        "QueryBody_Original": "DECLARE  @population int = (select count(*) from Users)\n\nselect count(distinct OwnerUserId) \"Users gaining reputation\",\n       @population \"Total users\",\n       100.0*count(distinct OwnerUserId)\/@population \"% who gain\"\nfrom Posts q\n     join Votes v on PostId = q.Id\nwhere PostTypeId = 1\n      and VoteTypeId = 2"
    },
    {
        "QuerySetId": 1127285,
        "Title": "Post by a User > Containing a string",
        "Description": null,
        "QueryBody": "SELECT  Score, Id as [Post Link], CreationDate\nFROM Posts\nWHERE Posts.OwnerUserId = ##UserID:string##\nAND Body LIKE '%' + ##Contains:string## + '%'\nORDER BY CreationDate DESC",
        "CreationDate": "2019-10-18 06:13:37",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 1127673,
        "Title": "Vote by Type by Day",
        "Description": null,
        "QueryBody": "SELECT \n  format(vote.CreationDate, 'yyyy-MM-dd') as Date,\n  vote_type.Name as VoteType,\n  COUNT(*) as VoteCount\nfrom\n  Votes vote\njoin\n  VoteTypes vote_type\n  on vote_type.Id = vote.VoteTypeId\nwhere\n  vote.PostId = ##PostId:int?334248##\n  and (vote_type.Name = 'UpMod' or vote_type.Name = 'DownMod')\ngroup by\n  vote.CreationDate,\n  vote_type.Name\norder by\n  vote.CreationDate asc",
        "CreationDate": "2019-10-18 19:46:06",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 1127857,
        "Title": "My total answers and accepted answers",
        "Description": null,
        "QueryBody": "DECLARE  @UserId int = ##UserId##\n\nSELECT \n      Count(a.Id) AS accepted, (SELECT Count(*) FROM Posts WHERE OwnerUserId = @UserId AND PostTypeId = 2) AS total\nFROM\n    Posts q\n  INNER JOIN\n    Posts a ON q.AcceptedAnswerId = a.Id\nWHERE\n    a.OwnerUserId = @UserId\n  AND\n    a.PostTypeId = 2",
        "CreationDate": "2019-10-19 07:49:00",
        "validated": false,
        "QueryBody_Original": "DECLARE  @UserId int = ##UserId##\n\nSELECT \n      Count(a.Id) AS accepted, (SELECT Count(*) FROM Posts WHERE OwnerUserId = @UserId AND PostTypeId = 2) AS total\nFROM\n    Posts q\n  INNER JOIN\n    Posts a ON q.AcceptedAnswerId = a.Id\nWHERE\n    a.OwnerUserId = @UserId\n  AND\n    a.PostTypeId = 2"
    },
    {
        "QuerySetId": 1130503,
        "Title": "Rep Earned after Change in the weight of Question Upvote",
        "Description": "This is just an estimation and doesn't take rep cap into account.",
        "QueryBody": "SELECT \n  QuestionUpVotes = count(*)*5\nfrom\n  Votes v\ninner join posts p on p.Id = v.PostId \n  where p.PostTypeId = 1 and\n  v.VoteTypeId = 2 and p.OwnerUserId = ##UserId##",
        "CreationDate": "2019-11-14 09:48:03",
        "validated": false,
        "QueryBody_Original": "SELECT \n  QuestionUpVotes = count(*)*5\nfrom\n  Votes v\ninner join posts p on p.Id = v.PostId \n  where p.PostTypeId = 1 and\n  v.VoteTypeId = 2 and p.OwnerUserId = ##UserId##"
    },
    {
        "QuerySetId": 1132061,
        "Title": "Avg score by month for tag",
        "Description": null,
        "QueryBody": "SELECT  p.id as [Post Link]\n     , p.Score\n     , t.tagname\n     , tv.value\n     , p.CreationDate\nfrom posts p\ninner join posts q \n        on q.id = coalesce(p.parentid, p.id) -- only questions have tags\ninner join posttags pt on pt.postid = q.id\ninner join tags t on t.id = pt.tagid\ncross join string_split(##tags:string?powerbi,dax##, ',') tv\nwhere t.tagname = tv.value\nand p.owneruserid = ##userid?1903793##\nand p.posttypeid in (2)\norder by CreationDate desc",
        "CreationDate": "2019-10-24 11:42:01",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 1134830,
        "Title": "Number of users which made their last post in a given month (only users with at least 10 posts)",
        "Description": null,
        "QueryBody": "WITH  last_cte as\n(\nSELECT\n    OwnerUserId,\n    Max(Id) AS MaxId,\n    Count(Id) AS num\nFROM Posts\nGROUP BY OwnerUserId\n), dates_cte as\n(\nSELECT\n  p.OwnerUserId AS odn, p.Id AS pid, p.CreationDate AS CDate\n  FROM Posts p INNER JOIN last_cte l ON p.Id=maxid\n  WHERE l.num>=##min?10##\n)\n\nSELECT eomonth(CDate),\n  COUNT(odn)\nFROM dates_cte\nGROUP BY eomonth(CDate)\nORDER BY eomonth(CDate)",
        "CreationDate": "2019-10-26 10:33:25",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 1134844,
        "Title": "Get the Most Number of Questions from Tags",
        "Description": null,
        "QueryBody": "SELECT  TOP 200 p.Title,\n               p.Id as [Post Link],\n               p.Tags,\n               p.CreationDate\nFROM   posts p\nCROSS APPLY (\n       SELECT t.TagName TagSpecific1\n       FROM tags t\n       INNER JOIN posttags pt on pt.tagid = t.id\n       WHERE pt.postid = p.id\n       AND t.TagName like 'scala'\n) t_specific_1\nCROSS APPLY (\n       SELECT t.TagName TagSpecific2\n       FROM tags t\n       INNER JOIN posttags pt on pt.tagid = t.id\n       WHERE pt.postid = p.id\n       AND t.TagName like 'actor'\n) t_specific_2\nWHERE  1 = 1\nAND    p.DeletionDate is NULL\nAND    p.Body is NOT NULL\nORDER  BY p.CreationDate DESC\n;",
        "CreationDate": "2019-10-29 03:16:37",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 1135951,
        "Title": "qpd for different sites before and after",
        "Description": "with credits to glorfindel for a decent chunk of the code https:\/\/data.stackexchange.com\/stackoverflow\/revision\/520226\/657753\/#graph\r\nan attempt to compare questions per day (and therefore general site activity) before and after the recent meta uproar",
        "QueryBody": "DECLARE  @StartDate datetime = '2019-08-01';\nDECLARE @EndDate datetime = '2019-09-01';\nDECLARE @StartDate2 datetime = '2019-9-27';--date of monica's firing\nDECLARE @EndDate2 datetime = '2019-10-27';\n\nSELECT \n  dateadd(day, datediff(day, 0, creationdate), 0),\n  count(*)\n  FROM posts\n  WHERE posttypeid = 2\n    AND creationdate BETWEEN @StartDate AND @EndDate\n  GROUP BY dateadd(day, datediff(day, 0, creationdate), 0)\nUNION \nSELECT\n  dateadd(day, datediff(day, 0, creationdate), 0),\n  count(*)\n  FROM posts\n  WHERE posttypeid = 2\n    AND creationdate BETWEEN @StartDate2 AND @EndDate2\n  GROUP BY dateadd(day, datediff(day, 0, creationdate), 0)\n  ORDER BY dateadd(day, datediff(day, 0, creationdate), 0)",
        "CreationDate": "2019-10-28 04:39:53",
        "validated": false,
        "QueryBody_Original": "DECLARE  @StartDate datetime = '2019-08-01';\nDECLARE @EndDate datetime = '2019-09-01';\nDECLARE @StartDate2 datetime = '2019-9-27';--date of monica's firing\nDECLARE @EndDate2 datetime = '2019-10-27';\n\nSELECT \n  dateadd(day, datediff(day, 0, creationdate), 0),\n  count(*)\n  FROM posts\n  WHERE posttypeid = 2\n    AND creationdate BETWEEN @StartDate AND @EndDate\n  GROUP BY dateadd(day, datediff(day, 0, creationdate), 0)\nUNION \nSELECT\n  dateadd(day, datediff(day, 0, creationdate), 0),\n  count(*)\n  FROM posts\n  WHERE posttypeid = 2\n    AND creationdate BETWEEN @StartDate2 AND @EndDate2\n  GROUP BY dateadd(day, datediff(day, 0, creationdate), 0)\n  ORDER BY dateadd(day, datediff(day, 0, creationdate), 0)"
    },
    {
        "QuerySetId": 1137175,
        "Title": "Find Stack Overflow Users in Vologda (with user links)",
        "Description": null,
        "QueryBody": "-",
        "CreationDate": "2019-10-29 16:46:55",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 1137576,
        "Title": "Get score by post type for UserId",
        "Description": null,
        "QueryBody": "SELECT  (SELECT SUM(Score) From Posts where OwnerUserId = ##UserId## AND PostTypeId = 2) AS AnswerScore,\n(SELECT SUM(Score) From Posts where OwnerUserId = ##UserId## AND PostTypeId = 1) AS QuestionScore,\n(SELECT SUM(Score) From Comments where UserId = ##UserId##) AS CommentScore,\n(SELECT TOP(1) DisplayName From Users where Id = ##UserId##) As UserName",
        "CreationDate": "2019-10-31 18:51:03",
        "validated": false,
        "QueryBody_Original": "SELECT  (SELECT SUM(Score) From Posts where OwnerUserId = ##UserId## AND PostTypeId = 2) AS AnswerScore,\n(SELECT SUM(Score) From Posts where OwnerUserId = ##UserId## AND PostTypeId = 1) AS QuestionScore,\n(SELECT SUM(Score) From Comments where UserId = ##UserId##) AS CommentScore,\n(SELECT TOP(1) DisplayName From Users where Id = ##UserId##) As UserName"
    },
    {
        "QuerySetId": 1138354,
        "Title": "top tags associated with posts in 2017",
        "Description": null,
        "QueryBody": "SELECT  TOP 10 TagName, TagCount\n--FROM (SELECT DISTINCT b.TagName,\n--                b.Count AS TagCount\n--      FROM Posts AS a\n--      INNER JOIN Tags as b\n--      ON a.Tags LIKE '%' + '<' + b.TagName + '>' + '%'\n--      WHERE YEAR(a.CreationDate) = 2017) AS DistTags\n--ORDER BY TagCount\n\nSELECT  b.TagName,\n        b.Count AS TagCount\n      FROM Posts AS a\n      INNER JOIN Tags as b\n      --ON a.Tags LIKE '%' + '<' + b.TagName + '>' + '%'\n      ON a.Tags LIKE CONCAT('%','<',b.TagName,'>','%')\n      WHERE YEAR(a.CreationDate) = 2017\n      --ORDER BY TagCount",
        "CreationDate": "2019-10-30 22:57:21",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 1140387,
        "Title": "Number of users who were last seen in a given month (only users with 10 or more posts)",
        "Description": null,
        "QueryBody": "WITH  counts_cte as\n(\nSELECT\n  OwnerUserId AS uid,\n  Count(Id) AS num\nFROM Posts\nGROUP BY OwnerUserId\n)\n\nSELECT\n  eomonth(LastAccessDate), COUNT(u.Id)\nFROM Users u JOIN counts_cte c ON u.Id=c.uid\nWHERE c.num>=##min?10##\nGROUP BY eomonth(LastAccessDate)\nORDER BY eomonth(LastAccessDate)",
        "CreationDate": "2019-11-01 22:21:25",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 1143815,
        "Title": "Edits on a specific date",
        "Description": null,
        "QueryBody": "SELECT  PostId AS [Post Link], UserId AS [User Link], CreationDate, Comment\n  FROM PostHistory\n  WHERE PostHistoryTypeId = 5 -- Edit Body\n    AND CONVERT(DATE, CreationDate) = ##CreationDate:string##\n  ORDER BY CreationDate",
        "CreationDate": "2019-11-06 12:24:36",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 1144064,
        "Title": "Find answers with specified text by specified user",
        "Description": null,
        "QueryBody": "SELECT  \n  p.Id AS \"Answer ID\",\n  p.CreationDate AS \"Answer Date\", \n  u.Id AS \"User ID\", \n  u.DisplayName AS \"User Name\", \n  p.Id AS [Post Link]\nFROM Posts p\n  JOIN Users u ON u.Id = p.OwnerUserId\nWHERE p.Body LIKE '%##SpecifiedText##%'\nAND p.OwnerUserId = ##UserId:int##\nAND p.PostTypeId = 2",
        "CreationDate": "2019-11-06 19:28:00",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 1145387,
        "Title": "Extract accepted and most-voted answer of a question",
        "Description": null,
        "QueryBody": "SELECT  * \nFROM \n  (\n    SELECT TOP 2\n      Id, \n      Body, \n      Score, \n      DENSE_RANK() OVER(ORDER BY Score DESC) Rank \n    FROM \n      (\n        SELECT \n          a.Id, \n          a.ParentId, \n          a.Body, \n          a.Score \n        FROM Posts a \n        WHERE a.ParentId = ##QuestionId##\n      )x\n  )x \nWHERE \n  (SELECT q.AcceptedAnswerId \n   FROM Posts q \n   WHERE q.id = ##QuestionId##\n   ) = id \n   OR Rank = 1",
        "CreationDate": "2019-11-10 18:20:09",
        "validated": false,
        "QueryBody_Original": "SELECT  * \nFROM \n  (\n    SELECT TOP 2\n      Id, \n      Body, \n      Score, \n      DENSE_RANK() OVER(ORDER BY Score DESC) Rank \n    FROM \n      (\n        SELECT \n          a.Id, \n          a.ParentId, \n          a.Body, \n          a.Score \n        FROM Posts a \n        WHERE a.ParentId = ##QuestionId##\n      )x\n  )x \nWHERE \n  (SELECT q.AcceptedAnswerId \n   FROM Posts q \n   WHERE q.id = ##QuestionId##\n   ) = id \n   OR Rank = 1"
    },
    {
        "QuerySetId": 1145561,
        "Title": "close\/reopens by gold tag badge holders",
        "Description": "Is there any query that shows number of closes\/reopens by gold-badge-users for a given tag in a particular date range? E.g. in 2019 in insert-tag-here User X closed 14 questions and reopened 6, User Y closed 11 questions and reopened 1, etc.",
        "QueryBody": "SELECT  posthistorytypeid\n     , userid as [User Link]\n     ,  dupehammer\n     , count(*) cnt\nfrom\n(\nSELECT posthistorytypeid\n     , cast(json_value(text, concat('$.Voters[', idx.value, '].Id')) as int) userid\n     , json_value(text, concat('$.Voters[', idx.value, '].BindingReason.GoldTagBadge')) dupehammer\nfrom posthistory ph\ncross apply string_split('0,1,2,3,4,5,6',',') idx\nwhere posthistorytypeid in (10,11)\nand json_value(text, concat('$.Voters[', idx.value, '].Id')) is not null\nand json_value(text, concat('$.Voters[', idx.value, '].BindingReason.GoldTagBadge')) is not null\n) dupehammers\ngroup by posthistorytypeid\n     , userid\n     ,  dupehammer\norder by cnt desc",
        "CreationDate": "2019-11-09 01:15:29",
        "validated": false,
        "QueryBody_Original": "SELECT  posthistorytypeid\n     , userid as [User Link]\n     ,  dupehammer\n     , count(*) cnt\nfrom\n(\nSELECT posthistorytypeid\n     , cast(json_value(text, concat('$.Voters[', idx.value, '].Id')) as int) userid\n     , json_value(text, concat('$.Voters[', idx.value, '].BindingReason.GoldTagBadge')) dupehammer\nfrom posthistory ph\ncross apply string_split('0,1,2,3,4,5,6',',') idx\nwhere posthistorytypeid in (10,11)\nand json_value(text, concat('$.Voters[', idx.value, '].Id')) is not null\nand json_value(text, concat('$.Voters[', idx.value, '].BindingReason.GoldTagBadge')) is not null\n) dupehammers\ngroup by posthistorytypeid\n     , userid\n     ,  dupehammer\norder by cnt desc"
    },
    {
        "QuerySetId": 1146601,
        "Title": "Get Top Users for Tag",
        "Description": null,
        "QueryBody": "DECLARE  @limit int = 100;\nDECLARE @tag_id int = '##TagId##';\n-- DECLARE @tag_id int = (select id from tags where tagid = @tag_id);\n\nselect top (@limit)\n  rank() over (order by sum(answers.score) desc) \"Rank\",\n  users.id \"User Link\"\n  ,sum(answers.score) as \"Score\"\nfrom users\njoin posts answers on (users.id = answers.owneruserid)\njoin posts parent on (answers.parentid = parent.id)\njoin posttags on (parent.id = posttags.postid)\nwhere posttags.tagid = @tag_id\nand answers.posttypeid = 2  -- answers only\ngroup by users.id\norder by sum(answers.score) desc\n;",
        "CreationDate": "2020-06-19 20:04:03",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 1147509,
        "Title": "Select recent posts & answers from tag",
        "Description": null,
        "QueryBody": "DECLARE  @tag VARCHAR(10) = '<' + ##Tag:string## + '>';\nDECLARE @startdate DATETIME = '##StartDate##';\nDECLARE @enddate DATETIME = '##EndDate##';\n\n\nWITH [CTE] AS (\n  SELECT * FROM Posts WHERE CHARINDEX(@tag, Tags)>0 AND CreationDate > @startdate\n  AND CreationDate <= @enddate\n  UNION ALL\n  SELECT Posts.* FROM Posts JOIN [CTE] on Posts.ParentId = [CTE].Id\n)\n\nSELECT * FROM [CTE] ORDER BY Id\n;",
        "CreationDate": "2019-11-21 04:21:39",
        "validated": false,
        "QueryBody_Original": "DECLARE  @tag VARCHAR(10) = '<' + ##Tag:string## + '>';\nDECLARE @startdate DATETIME = '##StartDate##';\nDECLARE @enddate DATETIME = '##EndDate##';\n\n\nWITH [CTE] AS (\n  SELECT * FROM Posts WHERE CHARINDEX(@tag, Tags)>0 AND CreationDate > @startdate\n  AND CreationDate <= @enddate\n  UNION ALL\n  SELECT Posts.* FROM Posts JOIN [CTE] on Posts.ParentId = [CTE].Id\n)\n\nSELECT * FROM [CTE] ORDER BY Id\n;"
    },
    {
        "QuerySetId": 1148165,
        "Title": "Reputa\u00e7\u00e3o a ganhar durante a corre\u00e7\u00e3o de recompensa nas perguntas",
        "Description": null,
        "QueryBody": "SELECT  COUNT(1) * 5\n  FROM Posts p \n    INNER JOIN Votes v ON p.Id = v.PostId\n  WHERE p.PostTypeId = 1 -- Question\n    AND p.OwnerUserId = ##UserId##\n    AND v.VoteTypeId = 2 -- UpMod aka upvotes",
        "CreationDate": "2019-11-14 00:00:37",
        "validated": false,
        "QueryBody_Original": "SELECT  COUNT(1) * 5\n  FROM Posts p \n    INNER JOIN Votes v ON p.Id = v.PostId\n  WHERE p.PostTypeId = 1 -- Question\n    AND p.OwnerUserId = ##UserId##\n    AND v.VoteTypeId = 2 -- UpMod aka upvotes"
    },
    {
        "QuerySetId": 1148183,
        "Title": "How much rep would you have if question upvotes were +10?",
        "Description": null,
        "QueryBody": "SELECT \n  COUNT(*) AS [Total Upvotes],\n  COUNT(*)*5 AS [Old Reputation],\n  COUNT(*)*10 AS [New Reputation],\n  COUNT(*)*5 AS [Reputation Gain]  \nFROM Votes\nJOIN Posts\n  ON Posts.Id = Votes.PostId\nWHERE Votes.VoteTypeId = 2\nAND Posts.PostTypeId = 1\nAND Posts.OwnerUserId = ##UserId##",
        "CreationDate": "2019-11-14 17:26:02",
        "validated": false,
        "QueryBody_Original": "SELECT \n  COUNT(*) AS [Total Upvotes],\n  COUNT(*)*5 AS [Old Reputation],\n  COUNT(*)*10 AS [New Reputation],\n  COUNT(*)*5 AS [Reputation Gain]  \nFROM Votes\nJOIN Posts\n  ON Posts.Id = Votes.PostId\nWHERE Votes.VoteTypeId = 2\nAND Posts.PostTypeId = 1\nAND Posts.OwnerUserId = ##UserId##"
    },
    {
        "QuerySetId": 1148260,
        "Title": "Maybe earned Yearling for this year",
        "Description": null,
        "QueryBody": "SELECT  year(v.CreationDate) Year,\n       count(distinct v.Id)*10 \"Reputation gain\"\/*,\n       sum(iif(VoteTypeId = 1, 15, 0)) Accepted, -- Count both the asker and the answerer!\n       sum(iif(VoteTypeId = 2 and PostTypeId = 1, 10, 0)) \"Question upvotes\",\n       sum(iif(VoteTypeId = 2 and PostTypeId = 2, 10, 0)) \"Answer upvotes\",\n       sum(iif(VoteTypeId = 3 and PostTypeId = 1, -2, 0)) \"Question downvotes\",\n       sum(iif(VoteTypeId = 3 and PostTypeId = 2, -3, 0)) \"Answer downvotes\", -- Don't forget the vote penalty!      \n       sum(iif(VoteTypeId = 16, 2, 0)) Edits*\/\nfrom Votes v\n     join Posts p on p.Id = PostId\nwhere OwnerUserId = ##UserId?5871##\n      and VoteTypeId = 2\n\ngroup by year(v.CreationDate)",
        "CreationDate": "2019-11-14 06:51:24",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 1148781,
        "Title": "perc of rep come from asking question (upvote only)",
        "Description": "this user has 50k rep, how much rep comes from asking questions?",
        "QueryBody": "SELECT \n    --@MyAnswerUpped = COUNT(*)\n    --SELECT count(*) *10 as AnsRep, max(t1.Reputation) as TotRep ,t1.Id\n    SELECT \n        avg( nUp*10.\/Rep) as avgRepRatio,\n        min( nUp*10.\/Rep) as minRepRatio,\n        max( nUp*10.\/Rep) as maxRepRatio,\n        count(*) as nUser from\n(\nSELECT \n     sum(case when Votes.VoteTypeId is null then 0 else 1 end) as nUp, \n     max(t1.Reputation) as Rep ,\n     t1.Id as userId\nFROM Posts\n\n    INNER JOIN Votes ON Posts.Id = Votes.PostId \n                      and Votes.VoteTypeId = 2 \n                      and Posts.PostTypeId = 1\n    \n    RIGHT JOIN (\n      SELECT  Id, Reputation \n      from Users\n\n      where Reputation > 50000 and Reputation < 60000\n\n      )as t1 ON t1.Id = Posts.OwnerUserId \n\n    \ngroup by t1.Id\n    \n)as tratio",
        "CreationDate": "2019-11-15 12:46:38",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 1148831,
        "Title": "Calculate how much reputation I gained from the rep change",
        "Description": null,
        "QueryBody": "SELECT \n    SUM(CASE WHEN VoteTypeId = 2 THEN 1 ELSE 0 END) AS [Up Votes BEFORE],\n    SUM(CASE WHEN VoteTypeId = 2 THEN 1 ELSE 0 END) * 5 AS [Down Votes AFTER]\nfrom\n    Votes v inner join Posts p on v.PostId=p.Id\nwhere\n    p.OwnerUserId=##UserId##\n    \n    \n    \/* forked from: https:\/\/data.stackexchange.com\/meta.stackexchange\/query\/1148230\/calculate-how-much-reputation-i-gained-from-the-rep-change *\/",
        "CreationDate": "2019-11-15 14:10:09",
        "validated": false,
        "QueryBody_Original": "SELECT \n    SUM(CASE WHEN VoteTypeId = 2 THEN 1 ELSE 0 END) AS [Up Votes BEFORE],\n    SUM(CASE WHEN VoteTypeId = 2 THEN 1 ELSE 0 END) * 5 AS [Down Votes AFTER]\nfrom\n    Votes v inner join Posts p on v.PostId=p.Id\nwhere\n    p.OwnerUserId=##UserId##\n    \n    \n    \/* forked from: https:\/\/data.stackexchange.com\/meta.stackexchange\/query\/1148230\/calculate-how-much-reputation-i-gained-from-the-rep-change *\/"
    },
    {
        "QuerySetId": 1150488,
        "Title": "Score history graph of a post",
        "Description": "The vote timestamps are estimated by level distributing their time in the day (they are estimated to 12:00:00 if it was a single vote on that day).",
        "QueryBody": "WITH  Raw AS (\n  SELECT\n    CreationDate,\n    RANK() OVER (PARTITION BY CreationDate ORDER BY Id) AS DayNo,\n    COUNT(*) OVER (PARTITION BY CreationDate) AS DayCount,\n    VoteTypeId\n  FROM Votes\n  WHERE\n    VoteTypeId BETWEEN 2 AND 3\n    AND\n    PostId = ##PostId:int##\n)\nSELECT\n  DATEADD(s, 86400.0 \/ (DayCount + 1) * DayNo, CreationDate) AS EstCrDate,\n  SUM(5 - 2 * VoteTypeId) OVER (\n    ORDER BY CreationDate, DayNo ROWS UNBOUNDED PRECEDING\n  ) AS Score\nFROM Raw",
        "CreationDate": "2019-11-17 17:03:17",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 1157625,
        "Title": "Posts containing two given words",
        "Description": null,
        "QueryBody": "SELECT  TOP ##num?100##\n  Id As [Post Link], OwnerUserId AS [User Link], CreationDate, LastActivityDate,  Score, ViewCount, Body\n  FROM Posts WHERE \n    (Body LIKE '%##text1?cauchy##%') AND (Body Like '%##text2?swartz##%')\n  ORDER BY CreationDate DESC",
        "CreationDate": "2019-11-21 14:24:53",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 1157659,
        "Title": "Posts containing a given text (case insensitive)",
        "Description": null,
        "QueryBody": "SELECT  TOP ##num?500##\n  Id As [Post Link], OwnerUserId AS [User Link], CreationDate, LastActivityDate,  Score, ViewCount, Body\n  FROM Posts WHERE (CONCAT(LOWER(Title),' ',LOWER(Body)) LIKE '%##text##%') \n  ORDER BY CreationDate DESC",
        "CreationDate": "2019-11-24 01:39:48",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 1157688,
        "Title": "Search for string at the beginning of a word (case insensitive)",
        "Description": null,
        "QueryBody": "SELECT  TOP ##num?500##\n  Id As [Post Link], \n  url = 'site:\/\/posts\/' + CAST(Id AS varchar)+'\/revisions',\n  OwnerUserId AS [User Link], \n  CreationDate, LastActivityDate,  \n  Score, ViewCount, Body\n  FROM Posts \n  WHERE (CONCAT(LOWER(Title),' ',LOWER(Body)) LIKE '%[^a-zA-Z]##text?anali##%') \n---searching for string at the beginning of a word - not preceded by another letter\n  ORDER BY CreationDate DESC",
        "CreationDate": "2019-11-24 01:47:51",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 1158167,
        "Title": "Search for string at the end of a word (case insensitive)",
        "Description": null,
        "QueryBody": "SELECT  TOP ##num?500##\n  Id As [Post Link], \n  url = 'site:\/\/posts\/' + CAST(Id AS varchar)+'\/revisions',\n  OwnerUserId AS [User Link], CreationDate, LastActivityDate,  Score, ViewCount, Body\n  FROM Posts WHERE (CONCAT(LOWER(Title),' ',LOWER(Body)) LIKE '%##text?morophism##[^a-zA-Z]%') \n---searching for string at the end of a word - not preceded by another letter\n  ORDER BY CreationDate DESC",
        "CreationDate": "2019-11-24 01:49:49",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 1158175,
        "Title": "Posts containing a given text (case insensitive, including title)",
        "Description": null,
        "QueryBody": "SELECT  TOP ##num?500##\n  Id As [Post Link], OwnerUserId AS [User Link], CreationDate, LastActivityDate,  Score, ViewCount, Body\n  FROM Posts WHERE (CONCAT(Lower(Title),' ',LOWER(Body)) LIKE '%##text?analisi##%') \n  ORDER BY CreationDate DESC",
        "CreationDate": "2019-11-23 18:27:56",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 1158178,
        "Title": "Search for exact string (case insensitive, including title)",
        "Description": null,
        "QueryBody": "SELECT  TOP ##num?500##\n  Id As [Post Link],\n  url = 'site:\/\/posts\/' + CAST(Id AS varchar)+'\/revisions',\n  OwnerUserId AS [User Link], CreationDate, LastActivityDate,  Score, ViewCount, Body\n  FROM Posts WHERE (CONCAT(Lower(Title),' ',LOWER(Body))  LIKE '%[^a-zA-Z]##text?hausdorf##[^a-zA-Z]%')\n---searching for the exact word - not preceded-followed by another letter\n  ORDER BY CreationDate DESC",
        "CreationDate": "2019-11-23 18:37:19",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 1158894,
        "Title": "Top low-code platforms posts and votes",
        "Description": null,
        "QueryBody": "WITH  up or down or favs do I have for each low-code platform tag?\n\nSELECT --TOP 100 \n    TagName,\n    COUNT(TagName) AS CountTags\nFROM Tags\n    INNER JOIN PostTags ON PostTags.TagId = Tags.id\n    INNER JOIN Posts ON Posts.ParentId = PostTags.PostId\n    INNER JOIN Votes ON Votes.PostId = Posts.Id\n    INNER JOIN VoteTypes ON VoteTypes.Id = Votes.VoteTypeId\nWHERE\n    (TagName LIKE '%powerapps%' OR TagName LIKE '%appian%' OR\n    TagName LIKE '%google-app-maker%' OR \n    TagName LIKE '%salesforce-lightning%' OR\n    TagName LIKE '%mendix%' OR TagName LIKE '%zoho-creator%' OR\n    TagName LIKE '%kissflow%' OR TagName LIKE '%dwkit%' OR\n    TagName LIKE '%quickbase%' OR TagName = 'appsheet')\nGROUP BY TagName \nORDER BY CountTags DESC",
        "CreationDate": "2019-11-25 23:14:32",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 1159276,
        "Title": "Content removed from posts by other users",
        "Description": null,
        "QueryBody": "SELECT  p.Id AS [Post Link],\n  h2.CreationDate AS 'Removed on',\n  h2.UserId AS [User Link],\n  h2.Comment AS 'Edit summary'\n  FROM PostHistory AS h1\n  INNER JOIN Posts AS p\n    ON h1.PostId = p.Id\n  CROSS APPLY (\n    SELECT TOP 1 Text, UserId, CreationDate, Comment\n      FROM PostHistory\n      WHERE PostId = h1.PostId\n        AND PostHistoryTypeId = 5\n        AND CreationDate > h1.CreationDate\n      ORDER BY CreationDate\n  ) h2\n  WHERE h1.CreationDate >= ##dateFrom:string##\n    AND h1.Text LIKE '%' + ##query:string## + '%'\n    AND h1.PostHistoryTypeId IN (2, 5)\n    AND h2.Text NOT LIKE '%' + ##query:string## + '%'\n    AND (h2.UserId != p.OwnerUserId OR h2.UserId IS NULL)\n  ORDER BY h2.CreationDate DESC",
        "CreationDate": "2019-11-30 13:17:54",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 1160289,
        "Title": "My favorites URL on Meta",
        "Description": null,
        "QueryBody": "SELECT \n  url = 'https:\/\/physics.meta.stackexchange.com\/questions\/' + CAST(q.Id AS varchar)\nFROM Votes v INNER JOIN Posts q ON v.PostId=q.Id\nWHERE VoteTypeId=5 AND UserId=##UserId##\n--5=Favorite\nORDER BY q.Id DESC",
        "CreationDate": "2019-12-20 05:41:41",
        "validated": false,
        "QueryBody_Original": "SELECT \n  url = 'https:\/\/physics.meta.stackexchange.com\/questions\/' + CAST(q.Id AS varchar)\nFROM Votes v INNER JOIN Posts q ON v.PostId=q.Id\nWHERE VoteTypeId=5 AND UserId=##UserId##\n--5=Favorite\nORDER BY q.Id DESC"
    },
    {
        "QuerySetId": 1160376,
        "Title": "Comments replying to a user",
        "Description": null,
        "QueryBody": "SELECT  TOP ##Limit:int?50000##\n  c.Text AS [Text],\n  'site:\/\/posts\/comments\/' + CONVERT(nvarchar(20),c.Id) AS [Comment Permalink]\nFROM Comments c\nWHERE\n  LEN(Text) >= ##MinCommentLength:int?0## AND\n  LEN(Text) <= ##MaxCommentLength:int?500## + LEN('@##UsernameWithoutSpaces## ') AND\n  (\n    LOWER(Text) LIKE LOWER('@##UsernameWithoutSpaces## %')\n  ) AND\n  c.CreationDate < DATEADD(dd, -##MinCommentAgeDays:int?0##, GETDATE())\nORDER BY c.CreationDate ASC",
        "CreationDate": "2019-11-30 08:45:13",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 1160851,
        "Title": "How to receive detailed reputation from SEDE?",
        "Description": "https:\/\/meta.stackoverflow.com\/questions\/391784\/how-to-receive-detailed-reputation-from-sede",
        "QueryBody": "WITH  postvotes as\n(\nselect v.creationdate\n     , p.id postid \n     , case v.votetypeid\n       when  1 then 'accepts'\n       when 2 then 'up-votes'\n       when 3 then 'down-votes'\n       when 9 then 'bounty_recieved'\n       end  vote_type\n     , case p.posttypeid \n       when 1 then 'question'\n       when 2 then 'answer'\n       end post_type\n     , sum(case  v.votetypeid \n           when 1 then 15\n           when 2 then 10\n           when 3 then -2\n           when 9 then bountyamount\n           end\n       ) reputation_change\n       \nfrom votes v\ninner join posts p on p.id = v.postid\nwhere p.owneruserid = ##userid?1719510##\nand posttypeid in (1,2)\nand votetypeid in (1,2,3,9)\ngroup by v.creationdate, p.id, votetypeid, posttypeid\n)\n\nselect *\nfrom postvotes",
        "CreationDate": "2019-12-02 00:13:45",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 1161337,
        "Title": "Find posts by one user edited by some other user.",
        "Description": null,
        "QueryBody": "SELECT  P.Id as [Post Link]\nFROM PostHistory PH\nLEFT JOIN Posts P ON PH.PostId = P.Id\nWHERE\n  PH.UserDisplayName = ##Editor:string?community##\n  AND P.CreationDate between ##start:string?2018-01-01## and ##end:string?2018-05-02##",
        "CreationDate": "2020-05-18 04:32:49",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 1162337,
        "Title": "year by year comparison, multiple users, vba or excel questions",
        "Description": null,
        "QueryBody": "SELECT  \n  year(a.creationdate) Answered,\n  a.owneruserid [User Link],\n  count(a.id) Answers,\n  sum( case when q.tags like '%vba>%' then 1 else 0 end ) [VBA Answers]   \/*,\n  format(sum( case when q.tags like '%vba>%' then 1.0 else 0 end )\/count(a.id),'0%') [% VBA],\n  sum( case when q.tags like '%excel%' then 1 else 0 end ) [Excel Answers],\n  format(sum( case when q.tags like '%excel%' then 1.0 else 0 end )\/count(a.id),'0%') [% Excel] *\/\nfrom posts q left join posts a on q.id=a.parentid\nwhere a.owneruserid in (##UserID##)\n  and a.posttypeid=2\n  and a.closeddate is null\ngroup by year(a.creationdate), a.owneruserid\nhaving count(a.id)>1\norder by year(a.creationdate), a.owneruserid",
        "CreationDate": "2019-12-04 16:51:38",
        "validated": false,
        "QueryBody_Original": "SELECT  \n  year(a.creationdate) Answered,\n  a.owneruserid [User Link],\n  count(a.id) Answers,\n  sum( case when q.tags like '%vba>%' then 1 else 0 end ) [VBA Answers]   \/*,\n  format(sum( case when q.tags like '%vba>%' then 1.0 else 0 end )\/count(a.id),'0%') [% VBA],\n  sum( case when q.tags like '%excel%' then 1 else 0 end ) [Excel Answers],\n  format(sum( case when q.tags like '%excel%' then 1.0 else 0 end )\/count(a.id),'0%') [% Excel] *\/\nfrom posts q left join posts a on q.id=a.parentid\nwhere a.owneruserid in (##UserID##)\n  and a.posttypeid=2\n  and a.closeddate is null\ngroup by year(a.creationdate), a.owneruserid\nhaving count(a.id)>1\norder by year(a.creationdate), a.owneruserid"
    },
    {
        "QuerySetId": 1162425,
        "Title": "Percentage of closed questions per tag",
        "Description": null,
        "QueryBody": "WITH  tagstats_cte as\n(\nSELECT\nt.TagName AS TagName,\nCount(q.Id) AS QuestionCount,\nCount(q.ClosedDate) AS ClosedCount\nFROM Posts q\n  INNER JOIN PostTags pt ON q.Id = pt.PostId\n  INNER JOIN Tags t ON pt.TagId = t.Id\nWHERE (q.PostTypeId = 1)\n  AND (q.CreationDate >= '##Date1?2010-01-01##') AND (q.CreationDate <= '##Date2?2020-01-01##')\nGROUP BY t.TagName\n)\n\nSELECT\n  TagName,\n  ROUND((CAST(ClosedCount AS decimal))*100.0\/(CAST(QuestionCount AS decimal)),2) AS percentage,\n  ClosedCount, QuestionCount\nFROM tagstats_cte\nWHERE QuestionCount>=##num?1000##\nORDER BY ROUND((CAST(ClosedCount AS decimal))*100.0\/(CAST(QuestionCount AS decimal)),2) DESC",
        "CreationDate": "2019-12-05 02:13:53",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 1162838,
        "Title": "Ratio between downvoted and commented posts (including users with no comments)",
        "Description": null,
        "QueryBody": "WITH  counts_cte AS\n(\nSELECT\n  u.Id AS uid,\n  u.Downvotes AS down,\n  COUNT(DISTINCT c.PostId) AS CommentedPosts\n  FROM Users u LEFT OUTER JOIN Comments c ON c.UserId=u.Id\nWHERE u.Downvotes>##min?100##\nGROUP BY u.Id, u.Downvotes\n)\n\nSELECT\n  RANK() OVER(ORDER BY (CASE WHEN CommentedPosts=0 THEN (CAST(down as decimal)\/CAST(1+CommentedPosts as decimal)) ELSE (CAST(down as decimal)\/CAST(CommentedPosts as decimal)) END) DESC),\n  uid AS [User Link],\n  down AS [downvotes],\n  CommentedPosts,\n  CASE WHEN CommentedPosts=0 THEN (CAST(down as decimal)\/CAST(1+CommentedPosts as decimal)) ELSE (CAST(down as decimal)\/CAST(CommentedPosts as decimal)) END AS Ratio\nFROM counts_cte\nORDER BY Ratio DESC",
        "CreationDate": "2019-12-05 22:23:53",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 1163129,
        "Title": "Select all answered questions with a specific tag",
        "Description": null,
        "QueryBody": "SELECT  p.Id, p.CreationDate, p.Title, p.Body, a.Body AS \"Answer\"\nFROM Posts p\nJOIN PostTags pt ON p.Id = pt.PostId\nJOIN Tags t ON pt.TagId = t.Id\nJOIN Posts a ON p.AcceptedAnswerId = a.Id\nWHERE (t.TagName = ##TagName:string##) AND \n(p.AcceptedAnswerId IS NOT NULL) AND\n(p.CreationDate >= '##Date1?2008-01-01##') AND\n(p.CreationDate <= '##Date2?2008-12-31##')\nORDER BY p.CreationDate ASC\n-- TagName: Tag Name:\n-- Date1: Start Date:\n-- Date2: End Date:",
        "CreationDate": "2019-12-10 12:41:18",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 1163289,
        "Title": "Top Users by Tag\/Location ",
        "Description": null,
        "QueryBody": "WITH  user-links)\n-- A simply query to find users in your city or country. Added user links.\n\nselect Id [User Link], Reputation, DisplayName, Location, WebsiteURL, Location, EmailHash\nfrom Users\nwhere Location like '%##Location##%'\norder by Reputation desc",
        "CreationDate": "2020-10-05 20:06:12",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 1163326,
        "Title": "is there pointer in python",
        "Description": null,
        "QueryBody": "SELECT  top (100) * from posts A inner join PostLinks B on A.ID= b.PostID inner join Posts C on b.RelatedPostID = c.id --where b.LinkTypeID = 101\nSELECT * from CloseReasonTypes",
        "CreationDate": "2019-12-06 21:56:50",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 1164174,
        "Title": "Suggested edits where the post owner voted",
        "Description": null,
        "QueryBody": "SELECT  DISTINCT TOP(##num?500##)\n  se.Id AS [Suggested Edit Link],\n  se.PostId AS [Post Link],\n  p.OwnerUserId AS [User Link],\n  sev.UserId AS [User Link],\n  se.CreationDate, se.ApprovalDate, se.RejectionDate\nFROM SuggestedEditVotes sev INNER JOIN SuggestedEdits se ON sev.SuggestedEditId=se.Id\n  INNER JOIN Posts p ON sev.UserId=p.OwnerUserId\nORDER BY se.CreationDate DESC",
        "CreationDate": "2019-12-09 00:38:32",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 1165117,
        "Title": "Close and reopen votes by week",
        "Description": null,
        "QueryBody": "DECLARE  @start datetime = DATEADD(day, -7*52*3, GETDATE());\nDECLARE @stop  datetime = DATEADD(day, -2*7, GETDATE());\n\nSELECT\n  DATEADD(week, datediff(week, @start, CreationDate), @start) as [Week],\n  SUM(case when PostHistoryTypeId = 10 then 1 else 0 end) as [CloseVotes],\n  SUM(case when PostHistoryTypeId = 11 then 1 else 0 end) as [ReopenVotes]\nFROM\n  PostHistory \nWHERE\n  PostHistoryTypeId in (10, 11) and\n  CreationDate >= @start and CreationDate < @stop\nGROUP BY\n  dateadd(week, datediff(week, @start, CreationDate), @start)\nORDER BY\n  dateadd(week, datediff(week, @start, CreationDate), @start)",
        "CreationDate": "2020-07-06 12:49:20",
        "validated": false,
        "QueryBody_Original": "DECLARE  @start datetime = DATEADD(day, -7*52*3, GETDATE());\nDECLARE @stop  datetime = DATEADD(day, -2*7, GETDATE());\n\nSELECT\n  DATEADD(week, datediff(week, @start, CreationDate), @start) as [Week],\n  SUM(case when PostHistoryTypeId = 10 then 1 else 0 end) as [CloseVotes],\n  SUM(case when PostHistoryTypeId = 11 then 1 else 0 end) as [ReopenVotes]\nFROM\n  PostHistory \nWHERE\n  PostHistoryTypeId in (10, 11) and\n  CreationDate >= @start and CreationDate < @stop\nGROUP BY\n  dateadd(week, datediff(week, @start, CreationDate), @start)\nORDER BY\n  dateadd(week, datediff(week, @start, CreationDate), @start)"
    },
    {
        "QuerySetId": 1165722,
        "Title": "Question Count or Score growth over time by tag comparison",
        "Description": "Plots total questions over time or total score over time, comparing up to 4 tags.\r\nReference: http:\/\/meta.stackoverflow.com\/q\/260570\/331508",
        "QueryBody": "DECLARE  @ShowScore INT      = ##ShowScore:int##;\nDECLARE @Tag1 varchar(255)  = ##Tag1:string##;\n\n    SELECT      DATEADD (month, DATEDIFF (month, 0, q.CreationDate), 0)  AS [Month],\n    \n    COUNT (q.Id)                AS NumQuests\n\n    FROM        Posts           q\n    INNER JOIN  PostTags        pt\n    ON          q.Id            = pt.PostId\n    INNER JOIN  Tags            t\n    ON          t.Id            = pt.TagId\n\n    WHERE       q.PostTypeId    = 1\n    AND         q.CreationDate >= '2016-01-01 00:00:00'\n    AND         t.TagName       IN (@Tag1)\n\n    GROUP BY    DATEADD (month, DATEDIFF (month, 0, q.CreationDate), 0),\n                t.TagName",
        "CreationDate": "2020-09-03 07:37:16",
        "validated": false,
        "QueryBody_Original": "DECLARE  @ShowScore INT      = ##ShowScore:int##;\nDECLARE @Tag1 varchar(255)  = ##Tag1:string##;\n\n    SELECT      DATEADD (month, DATEDIFF (month, 0, q.CreationDate), 0)  AS [Month],\n    \n    COUNT (q.Id)                AS NumQuests\n\n    FROM        Posts           q\n    INNER JOIN  PostTags        pt\n    ON          q.Id            = pt.PostId\n    INNER JOIN  Tags            t\n    ON          t.Id            = pt.TagId\n\n    WHERE       q.PostTypeId    = 1\n    AND         q.CreationDate >= '2016-01-01 00:00:00'\n    AND         t.TagName       IN (@Tag1)\n\n    GROUP BY    DATEADD (month, DATEDIFF (month, 0, q.CreationDate), 0),\n                t.TagName"
    },
    {
        "QuerySetId": 1166079,
        "Title": "Comments qualifying for Think! hat",
        "Description": null,
        "QueryBody": "SELECT  DISTINCT(p.Id) AS [Post Link]\n  FROM Posts AS p\n  INNER JOIN Comments AS c ON c.PostId = p.Id\n  WHERE c.CreationDate >= '2019-12-07' -- start of Winter Bash\n    AND c.UserId = ##userid:int##\n    AND c.Score > 0",
        "CreationDate": "2019-12-16 06:29:28",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 1167349,
        "Title": "Duplicates for a given post",
        "Description": null,
        "QueryBody": "SELECT  PostId as [Post Link],\n  PostLinks.CreationDate,\n  ViewCount,\n  AnswerCount\nfrom PostLinks\nJOIN Posts on Posts.Id=PostLinks.PostId\nwhere RelatedPostId=##OriginalPostId##\nand LinkTypeId=3 -- duplicate\nORDER BY PostLinks.CreationDate DESC",
        "CreationDate": "2019-12-14 02:09:29",
        "validated": false,
        "QueryBody_Original": "SELECT  PostId as [Post Link],\n  PostLinks.CreationDate,\n  ViewCount,\n  AnswerCount\nfrom PostLinks\nJOIN Posts on Posts.Id=PostLinks.PostId\nwhere RelatedPostId=##OriginalPostId##\nand LinkTypeId=3 -- duplicate\nORDER BY PostLinks.CreationDate DESC"
    },
    {
        "QuerySetId": 1167513,
        "Title": "Publicity badges awarded within a given period",
        "Description": null,
        "QueryBody": "SELECT  TOP(##num?200##)\n  UserId AS [User Link],\n  sum(case when name = 'Publicist' then 1 else 0 end) AS Publicist,\n  sum(case when name = 'Booster' then 1 else 0 end) AS Booster,\n  sum(case when name = 'Announcer' then 1 else 0 end) AS Announcer,\n  sum(case when (name = 'Announcer') or (name = 'Booster') or (name = 'Publicist') then 1 else 0 end) AS total\nFROM Badges\nWHERE   Date >= '##Date1?2019-12-12##' AND Date <= '##Date2?2019-12-14##'\nGROUP BY UserId\nORDER BY Publicist DESC, Booster DESC, Announcer DESC, total DESC",
        "CreationDate": "2019-12-14 06:00:53",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 1167976,
        "Title": "Questions with answer along with tag",
        "Description": null,
        "QueryBody": "SELECT  p.Id,  p.Title, p.Score, p.ViewCount, p.AnswerCount, p.CommentCount\nFROM Posts p\nJOIN PostTags pt ON p.Id = pt.PostId\nJOIN Tags t ON pt.TagId = t.Id\nJOIN Posts a ON p.AcceptedAnswerId = a.Id\nWHERE (t.TagName = ##TagName:string##) AND \n(p.AcceptedAnswerId IS NOT NULL) AND\n(p.CreationDate >= '##Date1?2016-01-01##') AND\n(p.CreationDate <= '##Date2?2019-12-10##')\nORDER BY p.Score DESC",
        "CreationDate": "2020-03-12 17:52:02",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 1167982,
        "Title": "Number of Questions with answer along with tag",
        "Description": null,
        "QueryBody": "SELECT  Count(p.Id)\nFROM Posts p\nJOIN PostTags pt ON p.Id = pt.PostId\nJOIN Tags t ON pt.TagId = t.Id\nJOIN Posts a ON p.AcceptedAnswerId = a.Id\nWHERE (t.TagName = ##TagName:string##) AND \n(p.AcceptedAnswerId IS NOT NULL) AND\n(p.CreationDate >= '##Date1?2016-01-01##') AND\n(p.CreationDate <= '##Date2?2019-12-10##')",
        "CreationDate": "2020-03-12 18:01:41",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 1167988,
        "Title": "AVG of Questions with answer along with tag",
        "Description": null,
        "QueryBody": "SELECT  AVG(p.Score)\nFROM Posts p\nJOIN PostTags pt ON p.Id = pt.PostId\nJOIN Tags t ON pt.TagId = t.Id\nJOIN Posts a ON p.AcceptedAnswerId = a.Id\nWHERE (t.TagName = ##TagName:string##) AND \n(p.AcceptedAnswerId IS NOT NULL) AND\n(p.CreationDate >= '##Date1?2016-01-01##') AND\n(p.CreationDate <= '##Date2?2019-12-10##')",
        "CreationDate": "2020-08-15 13:37:45",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 1167993,
        "Title": "Final Query : Questions with answer along with tag Random top 500",
        "Description": null,
        "QueryBody": "SELECT  TOP(500)  p.Id, p.Title, p.Body\nFROM Posts p\nJOIN PostTags pt ON p.Id = pt.PostId\nJOIN Tags t ON pt.TagId = t.Id\nJOIN Posts a ON p.AcceptedAnswerId = a.Id\nWHERE (t.TagName = ##TagName:string##) AND\n(p.AcceptedAnswerId IS NOT NULL) AND\n(p.CreationDate >= '##Date1?2016-01-01##') AND\n(p.CreationDate <= '##Date2?2019-12-31##') AND\n(p.Score > 2) AND\n(p.AnswerCount >2)\nORDER BY RAND()",
        "CreationDate": "2020-08-15 15:19:32",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 1168816,
        "Title": "Users with most answers in a given tag (only non-CW)",
        "Description": null,
        "QueryBody": "SELECT  TOP(##num?100##)\n  a.OwnerUserId AS [User Link], a.OwnerDisplayName,\n  COUNT (a.Id) AS [Question Count],\n  SUM (a.Score) AS [Total Score]\nFROM Posts a \nINNER JOIN PostTags pt ON a.ParentId=pt.PostId\nINNER JOIN Tags t on t.id = pt.TagId\nWHERE t.tagname  = ##tagName:string?data-explorer##\n  AND (a.CommunityOwnedDate IS NULL)\nGROUP BY a.OwnerUserId, a.OwnerDisplayName\nORDER BY COUNT (a.Id) DESC",
        "CreationDate": "2019-12-17 20:07:12",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 1168818,
        "Title": "Users with most questions in a given tag",
        "Description": null,
        "QueryBody": "SELECT  TOP(##num?100##)\n  q.OwnerUserId AS [User Link], q.OwnerDisplayName,\n  COUNT (q.Id) AS [Question Count],\n  SUM (q.Score) AS [Total Score]\nFROM Posts q INNER JOIN PostTags pt ON q.Id=pt.PostId\nINNER JOIN Tags t ON t.id = pt.TagId\nWHERE t.TagName=##tagName:string?data-explorer##\nGROUP BY q.OwnerUserId, q.OwnerDisplayName\nORDER BY COUNT (q.Id) DESC",
        "CreationDate": "2019-12-17 20:04:00",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 1168820,
        "Title": "Users with most questions in a given tag (only non CW)",
        "Description": null,
        "QueryBody": "SELECT  TOP(##num?100##)\n  q.OwnerUserId AS [User Link], q.OwnerDisplayName,\n  COUNT (q.Id) AS [Question Count],\n  SUM (q.Score) AS [Total Score]\nFROM Posts q INNER JOIN PostTags pt ON q.Id=pt.PostId\nINNER JOIN Tags t ON t.id = pt.TagId\nWHERE (t.TagName=##tagName:string?data-explorer##)\n  AND (q.CommunityOwnedDate IS NULL)\nGROUP BY q.OwnerUserId, q.OwnerDisplayName\nORDER BY COUNT (q.Id) DESC",
        "CreationDate": "2019-12-17 20:02:16",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 1170765,
        "Title": "zero voted answers to total answers",
        "Description": null,
        "QueryBody": "SELECT  CAST(a.zero_voted_answers*100.0 as float)\/a.total_answers as percentage from \n(SELECT \ncount(*) as total_answers ,\ncount(CASE WHEN Score = 0 then 1 ELSE NULL END) as zero_voted_answers\nfrom posts where OwnerUserId = ##UserId## and PostTypeId = 2\n) as a",
        "CreationDate": "2019-12-21 23:58:41",
        "validated": false,
        "QueryBody_Original": "SELECT  CAST(a.zero_voted_answers*100.0 as float)\/a.total_answers as percentage from \n(SELECT \ncount(*) as total_answers ,\ncount(CASE WHEN Score = 0 then 1 ELSE NULL END) as zero_voted_answers\nfrom posts where OwnerUserId = ##UserId## and PostTypeId = 2\n) as a"
    },
    {
        "QuerySetId": 1171911,
        "Title": "This year's high-scoring questions for a tag",
        "Description": null,
        "QueryBody": "SELECT  TOP 100 p.Score, p.Id AS [Post Link], p.OwnerUserId AS [User Link], p.CreationDate\nFROM dbo.Tags t\nINNER JOIN dbo.PostTags pt ON t.Id = pt.TagId\nINNER JOIN dbo.Posts p ON pt.PostId = p.Id\nWHERE t.TagName = ##Tag:string?sql-server##\nAND p.CreationDate >= DATEADD(YY, -1, GETDATE())\nORDER BY p.Score DESC;",
        "CreationDate": "2019-12-25 18:57:57",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 1171912,
        "Title": "This year's high-scoring answers for a tag",
        "Description": null,
        "QueryBody": "SELECT  TOP 100 pA.Score, pA.Id AS [Post Link], pA.OwnerUserId AS [User Link], pA.CreationDate\nFROM dbo.Tags t\nINNER JOIN dbo.PostTags pt ON t.Id = pt.TagId\nINNER JOIN dbo.Posts p ON pt.PostId = p.Id\nINNER JOIN dbo.Posts pA ON p.Id = pA.ParentId\nWHERE t.TagName = ##Tag:string?sql-server##\nAND pA.CreationDate >= DATEADD(YY, -1, GETDATE())\nORDER BY pA.Score DESC;",
        "CreationDate": "2019-12-25 19:03:10",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 1172366,
        "Title": "Answers and the questions they go to",
        "Description": "For a given user, show the answers and also show a link to the corresponding question and display its title.\r\nOptionally limit to a date range.\r\nSort by date.",
        "QueryBody": "DECLARE  @UserId int = ##UserId##\nDECLARE @Start datetime = ##Start##\nDECLARE @Finish datetime = ##Finish##\n\nSELECT\n    Body, ParentId, Id, CreationDate\nFROM Posts\nWHERE \n    Posts.OwnerUserId = @UserId\n    AND Posts.PostTypeId = 2\n    AND CreationDate BETWEEN @Start AND @Finish\nORDER BY CreationDate ASC",
        "CreationDate": "2019-12-27 03:00:02",
        "validated": false,
        "QueryBody_Original": "DECLARE  @UserId int = ##UserId##\nDECLARE @Start datetime = ##Start##\nDECLARE @Finish datetime = ##Finish##\n\nSELECT\n    Body, ParentId, Id, CreationDate\nFROM Posts\nWHERE \n    Posts.OwnerUserId = @UserId\n    AND Posts.PostTypeId = 2\n    AND CreationDate BETWEEN @Start AND @Finish\nORDER BY CreationDate ASC"
    },
    {
        "QuerySetId": 1172809,
        "Title": "Users by number of a specific badge",
        "Description": null,
        "QueryBody": "SELECT  TOP 1000 RANK() OVER (ORDER BY COUNT(*) DESC) AS 'Rank',\n  UserId AS [User Link],\n  COUNT(*) AS 'Number of badges',\n  MIN(Date) AS 'First award',\n  MAX(Date) AS 'Last award'\n  FROM Badges\n  WHERE Name = ##BadgeName:string##\n  GROUP BY UserId\n  ORDER BY COUNT(*) DESC, MAX(Date) DESC",
        "CreationDate": "2020-01-25 01:49:30",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 1172810,
        "Title": "Potential collisions between tag badges and regular badges",
        "Description": null,
        "QueryBody": "WITH  the same name\n\nSELECT t.TagName, t.Count\n  FROM Badges AS b\n  INNER JOIN Tags AS t\n    ON LOWER(b.Name) = REPLACE(t.TagName, '-', ' ')\n  WHERE b.TagBased = 0\n  GROUP BY t.TagName, t.Count\n  ORDER BY t.Count DESC",
        "CreationDate": "2020-01-07 18:05:33",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 1173028,
        "Title": "Users with high score who have reputation 1",
        "Description": null,
        "QueryBody": "SELECT  TOP(##num?100##)\n  RANK() OVER(ORDER BY SUM(p.Score) DESC) AS Rank,\n  u.Id AS [User Link],\n  SUM(p.Score) AS [Total Score],\n  COUNT(p.Id) AS [Total Posts],\n  SUM(case when p.PostTypeId = 1 then 1 else 0 end) AS [Total Questions],\n  SUM(case when p.PostTypeId = 1 then p.Score else 0 end) AS [Question Score],\n  SUM(case when p.PostTypeId = 2 then 1 else 0 end) AS [Total Answers],\n  SUM(case when p.PostTypeId = 2 then p.Score else 0 end) AS [Answer Score],\n  u.LastAccessDate, u.Reputation\nFROM Users u INNER JOIN Posts p ON (p.OwnerUserId=u.Id) \n  and (p.CommunityOwnedDate IS NULL)\n--exclude community wiki posts\nWHERE u.Reputation=1\n--GROUP BY u.Id\nGROUP BY u.Id, u.LastAccessDate, u.Reputation\nORDER BY SUM(p.Score) DESC",
        "CreationDate": "2020-01-19 03:42:45",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 1173425,
        "Title": "How do your answers rank compared to others [to the same question]? (with Chart)",
        "Description": "aka \"How many of my answers are the TOP answer?\"  \r\n\r\n(obviously, if yours is the ONLY answer it is also the best one)",
        "QueryBody": "DECLARE  @cnt_all int = (select count(parentid) cnt_all from #answer_ranks);\n\nselect \n  a.rnk [Rank compared to other answers],\n  count(a.parentid) [# of your answers],\n  concat(cast(round(1.0*count(a.parentid)\/@cnt_all*100,1) as decimal(4,1)),'%') [Percent]\n \/* ,max(AnswerCount) [# Answers]\n  ,max(ViewCount) [# Views] *\/\nfrom #answer_ranks a\ngroup by a.rnk\norder by a.rnk\n\nselect \n  rnk [Rank],\n  count(parentid) [# Answers]  \nfrom #answer_ranks\ngroup by rnk\norder by rnk\n\n-- UserID: Enter a numeric User ID:",
        "CreationDate": "2020-01-01 14:33:26",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 1173588,
        "Title": "Comments on questions with a given tag",
        "Description": null,
        "QueryBody": "SELECT  TOP(##num?100##)\n  c.Id AS [Comment Link], c.CreationDate, c.UserId AS [User Link]\nFROM Posts q INNER JOIN PostTags pt ON q.Id=pt.PostId\nINNER JOIN Tags t ON t.id = pt.TagId\nINNER JOIN Comments c ON c.PostId=q.Id\nWHERE t.TagName=##tagName:string?data-explorer##\nORDER BY c.Id DESC",
        "CreationDate": "2020-01-02 00:32:14",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 1174279,
        "Title": "Unaccepted answers to questions by recently active users",
        "Description": null,
        "QueryBody": "SELECT  a.Id AS [Post Link], a.CreationDate, a.Score,\n  u.Id AS [User Link], u.LastAccessDate\n  FROM Posts AS a\n  INNER JOIN Posts AS q\n    ON a.ParentId = q.Id\n  INNER JOIN Users AS u\n    ON u.Id = q.OwnerUserId\n  WHERE a.OwnerUserId = ##UserId:int##\n    AND q.AcceptedAnswerId IS NULL -- no accepted answer\n    AND u.LastAccessDate >= ##LastAccessDate:string##\n  ORDER BY u.LastAccessDate DESC",
        "CreationDate": "2020-01-03 22:03:17",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 1174524,
        "Title": "Answers containing a macro (probably) defined in another answer",
        "Description": null,
        "QueryBody": "DECLARE MathOperator{\\##text##}%')\n    OR (a.Body LIKE '%\\DECLAREMathOperator\\##text##%')\n    OR (a.Body LIKE '%\\DECLAREMathOperator{##text##}%')\n    OR (a.Body LIKE '%\\def{\\##text##}%')\n    OR (a.Body LIKE '%\\def\\##text##%'))\n  AND (b.Body LIKE '%[^\\]\\##text##[^a-zA-Z]%')\n  AND ((b.Body LIKE '%newcommand%')\n--we want to catch both \\renewcommand and \\newcommand\n    OR (b.Body LIKE '%\\DECLAREMathOperator%')\n    OR (b.Body LIKE '%\\def%')\n    OR (b.Body LIKE '%\\let%'))\nORDER BY a.CreationDate DESC",
        "CreationDate": "2020-03-09 00:29:29",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 1174821,
        "Title": "Longest time for a review",
        "Description": null,
        "QueryBody": "SELECT  TOP(##num?100##)\nPostId AS [Post Link],\nurl = 'site:\/\/review\/'+ \n+CASE ##type?2## \n   WHEN 1 THEN 'suggested-edits'\n   WHEN 2 THEN 'close'\n END\n+CAST(Id AS varchar),\nCreationDate, DeletionDate,\nDATEDIFF(month, CreationDate, DeletionDate) AS Months,\nDATEDIFF(day, CreationDate, DeletionDate) AS Days,\nDATEDIFF(hour, CreationDate, DeletionDate) AS Hours,\nDATEDIFF(minute, CreationDate, DeletionDate) AS Minutes\nFROM ReviewTasks\nWHERE (DeletionDate IS NOT NULL) AND (ReviewTaskTypeId=##type##)\n---1 = Suggested Edit\n---2 = Close Votes\n---3 = Low Quality Posts\n---4 = First Post\n---5 = Late Answer\n---6 = Reopen Vote\nORDER BY DATEDIFF(minute, CreationDate, DeletionDate) DESC",
        "CreationDate": "2020-01-05 14:26:05",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 1174901,
        "Title": "Questions containing the given text (with link to revisions)",
        "Description": null,
        "QueryBody": "SELECT  TOP ##num?100##\n  Id As [Post Link], \n  concat('site:\/\/posts\/',\n        Id,\n        '\/revisions'\n        ) [Revisions Link],\n  OwnerUserId AS [User Link], CreationDate, LastActivityDate,  Score, ViewCount, Body\n  FROM Posts WHERE (PostTypeId=1) AND (Body LIKE '%##text?\\def##%') \n  ORDER BY CreationDate DESC",
        "CreationDate": "2020-01-05 22:50:44",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 1175258,
        "Title": "Question favorited by most users",
        "Description": null,
        "QueryBody": "SELECT  top ##num?10000##\n       rank() over(order by count(*) desc) AS Rank,\n       p.id as [Post Link],\n       count(*) [# favourite],\n       p.OwnerUserId AS [User Link],\n       p.OwnerDisplayName,\n       p.Score, p.ViewCount, p.Tags\nfrom posts p\ninner join votes v on v.postid = p.id\nwhere v.votetypeid = 5 -- favorite\ngroup by p.id, p.OwnerUserId, p.OwnerDisplayName, p.Score, p.ViewCount, p.Tags\norder by count(*) desc",
        "CreationDate": "2020-01-06 17:25:53",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 1175293,
        "Title": "Users with most favorites on their questions",
        "Description": null,
        "QueryBody": "SELECT  TOP ##num?500##\n  RANK() OVER(ORDER BY COUNT(*) DESC) AS Rank,\n  p.OwnerUserId AS [User Link], p.OwnerDisplayName,\n  COUNT(*) AS [# favorite]\nFROM Posts p INNER JOIN Votes v on v.PostId=p.Id  \nWHERE v.VoteTypeId = 5 -- favorite\nGROUP BY p.OwnerUserId, p.OwnerDisplayName\nORDER BY COUNT(*) DESC",
        "CreationDate": "2020-01-06 17:33:32",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 1175429,
        "Title": "Users with most badges of certain kind",
        "Description": null,
        "QueryBody": "SELECT  TOP(##num?100##)\n  RANK() OVER(ORDER BY COUNT(*) DESC) AS Rank,\n  b.UserId AS [User Link],\n  COUNT(*) AS [Count]\nFROM Badges b INNER JOIN Users u ON b.UserId=u.Id\n  WHERE (b.Name = '##name?Great Answer##')\nGROUP BY b.UserId\nORDER BY COUNT(*) DESC",
        "CreationDate": "2020-01-06 18:58:27",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 1175827,
        "Title": "Get upvoted answers where question doesn\u2019t have tag",
        "Description": null,
        "QueryBody": "DECLARE  @userId int = ##UserId:int##;\nDECLARE @tags nvarchar(max) = ##Tags:string##;\n\nSELECT a.ParentId, q.Id AS [Post Link] FROM\n    Posts q\n  inner join\n    Posts a\n  ON a.ParentId = q.Id\nWHERE\n      a.Score > 0\n  and a.OwnerUserId = @userId\n  and a.postTypeId = 2\n  and q.Tags NOT LIKE '%<' + @tags + '>%'",
        "CreationDate": "2020-01-07 15:03:12",
        "validated": false,
        "QueryBody_Original": "DECLARE  @userId int = ##UserId:int##;\nDECLARE @tags nvarchar(max) = ##Tags:string##;\n\nSELECT a.ParentId, q.Id AS [Post Link] FROM\n    Posts q\n  inner join\n    Posts a\n  ON a.ParentId = q.Id\nWHERE\n      a.Score > 0\n  and a.OwnerUserId = @userId\n  and a.postTypeId = 2\n  and q.Tags NOT LIKE '%<' + @tags + '>%'"
    },
    {
        "QuerySetId": 1176349,
        "Title": "How long did the recent review tasks (of a specific type) take?",
        "Description": null,
        "QueryBody": "SELECT  TOP(##num?100##)\nPostId AS [Post Link],\nurl = 'site:\/\/review\/'+\n+CASE ##type?2##\n   WHEN 1 THEN 'suggested-edits'\n   WHEN 2 THEN 'close'\n   WHEN 3 THEN 'low-quality-posts'\n   WHEN 4 THEN 'first-posts'\n   WHEN 5 THEN 'late-answers'\n   WHEN 6 THEN 'reopen'\n END+'\/'\n+CAST(Id AS varchar),\nCreationDate, DeletionDate,\nDATEDIFF(month, CreationDate, DeletionDate) AS Months,\nDATEDIFF(day, CreationDate, DeletionDate) AS Days,\nDATEDIFF(hour, CreationDate, DeletionDate) AS Hours,\nDATEDIFF(minute, CreationDate, DeletionDate) AS Minutes\nFROM ReviewTasks\nWHERE (DeletionDate IS NOT NULL) AND (ReviewTaskTypeId=##type##)\n---1 = Suggested Edit\n---2 = Close Votes\n---3 = Low Quality Posts\n---4 = First Post\n---5 = Late Answer\n---6 = Reopen Vote\nORDER BY Id DESC",
        "CreationDate": "2020-01-08 07:36:26",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 1176350,
        "Title": "How long did the recent review tasks take?",
        "Description": null,
        "QueryBody": "SELECT  TOP(##num?100##)\nPostId AS [Post Link],\nurl = 'site:\/\/review\/'+\n+CASE ##type?2##\n   WHEN 1 THEN 'suggested-edits'\n   WHEN 2 THEN 'close'\n   WHEN 3 THEN 'low-quality-posts'\n   WHEN 4 THEN 'first-posts'\n   WHEN 5 THEN 'late-answers'\n   WHEN 6 THEN 'reopen'\n END+'\/'\n+CAST(Id AS varchar),\nCreationDate, DeletionDate,\nDATEDIFF(month, CreationDate, DeletionDate) AS Months,\nDATEDIFF(day, CreationDate, DeletionDate) AS Days,\nDATEDIFF(hour, CreationDate, DeletionDate) AS Hours,\nDATEDIFF(minute, CreationDate, DeletionDate) AS Minutes\nFROM ReviewTasks\nWHERE (DeletionDate IS NOT NULL)\n---1 = Suggested Edit\n---2 = Close Votes\n---3 = Low Quality Posts\n---4 = First Post\n---5 = Late Answer\n---6 = Reopen Vote\nORDER BY Id DESC",
        "CreationDate": "2020-01-08 07:37:43",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 1176607,
        "Title": "Users from Sri Lanka who love Dragon Ball Z",
        "Description": null,
        "QueryBody": "SELECT \n  ROW_NUMBER() OVER(ORDER BY Reputation DESC) AS Row#,\n  Id AS [User Link],\n  Reputation\nFROM\n  Users\nWHERE\n  Location LIKE '%Denmark%' AND\n  LastAccessDate > '1-1-19'",
        "CreationDate": "2020-01-08 18:07:05",
        "validated": false,
        "QueryBody_Original": "SELECT \n  ROW_NUMBER() OVER(ORDER BY Reputation DESC) AS Row#,\n  Id AS [User Link],\n  Reputation\nFROM\n  Users\nWHERE\n  Location LIKE '%Denmark%' AND\n  LastAccessDate > '1-1-19'"
    },
    {
        "QuerySetId": 1176662,
        "Title": "Users in Artenara who answered questions about crocodiles",
        "Description": null,
        "QueryBody": "SELECT \n  ROW_NUMBER() OVER(ORDER BY COUNT(*) DESC, u.Reputation DESC) AS #,\n  u.Id AS [User Link],\n  COUNT(*) AS Answers#,\n  u.Reputation,\n  FORMAT(u.LastAccessDate, 'yyyy') AS [Last Access]\nFROM\n  (Posts AS q \n  INNER JOIN\n  Posts AS a  \n  ON q.Id = a.ParentId)\n  INNER JOIN\n  Users AS u\n  ON a.OwnerUserId = u.Id\nWHERE\n  (q.Tags LIKE '%node.js%') AND\n  u.Location LIKE '%' + ##UsersCountry:string?Denmark## + '%' AND\n  q.CreationDate >= ##QuestionsDate:string?2000-01-01## AND\n  a.CreationDate >= ##AnswersDate:string?2000-01-01## AND\n  u.LastAccessDate >= ##UsersLastAccessDate:string?2000-01-01##\nGROUP BY\n  u.Id, u.Reputation, u.LastAccessDate",
        "CreationDate": "2020-12-08 18:10:48",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 1177038,
        "Title": "Accounts Created By Year, Average Reputation, Average Up Votes, Average Down Votes",
        "Description": null,
        "QueryBody": "SELECT  convert(date, LastAccessDate) as [AccessDate], count(*) as [Number of Accounts], sum(Reputation) as [Total Reputation of Users], sum(UpVotes) as [Total Up Votes], sum(DownVotes) as [Total Down Votes]\nfrom Users\nwhere convert(date, LastAccessDate) >= convert(date, ##Start:string##) and convert(date, LastAccessDate) < convert(date, ##End:string##)\ngroup by convert(date, LastAccessDate)\norder by convert(date, LastAccessDate)",
        "CreationDate": "2020-04-09 19:46:57",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 1177637,
        "Title": "Erik Darling Design An Index Together V1",
        "Description": null,
        "QueryBody": "SELECT  PostTypeId, \n       Score \/ 100000.0 [ScoreBucket],\n       COUNT( * ) TotalPostCount, \n       COUNT( CASE WHEN LastActivityDate >= '20110101' \n                     THEN 1 \n                   ELSE NULL \n              END ) [2011PostCount],\n       COUNT( CASE WHEN LastActivityDate >= '20120101' \n                     THEN 1 \n                   ELSE NULL \n              END ) [2012PostCount],\n       COUNT( CASE WHEN LastActivityDate < '20110101' \n                     THEN 1 \n                   ELSE NULL \n              END ) [Pre2011PostCount]\n  FROM dbo.Posts\n  GROUP BY PostTypeId, Score \/ 100000.0 \n  ORDER BY PostTypeId ASC, Score \/ 100000.0 DESC\n  OPTION( USE HINT( 'FORCE_DEFAULT_CARDINALITY_ESTIMATION' ) );",
        "CreationDate": "2020-01-09 20:57:28",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 1178211,
        "Title": "Where could I see the top question-askers?",
        "Description": "https:\/\/meta.stackoverflow.com\/questions\/392825\/where-could-i-see-the-top-question-askers",
        "QueryBody": "WITH  askers as\n(\nselect \n       RANK() OVER(order by count(*) desc) [rank]\n       , concat('site:\/\/users\/', owneruserid, '|', displayname) [User name]\n       , owneruserid\n     , count(*) [Questions Asked]\nfrom posts\ninner join users on owneruserid = users.id\nwhere posttypeid = 1 -- Q\ngroup by owneruserid, displayname\n)\n\nselect rank, [User name], [questions asked]\nfrom askers\nwhere owneruserid = ##userid:int?1390192##\nunion all\nselect rank, [User name], [questions asked]\nfrom askers",
        "CreationDate": "2020-01-11 02:13:28",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 1178461,
        "Title": "How well do my lengthy, detail-rich answers perform over time?",
        "Description": null,
        "QueryBody": "SELECT \n  a.Id AS [Post Link],\n  q.Tags,\n  LEN(a.Body) AS [Length],\n  a.CreationDate AS [Posted On],\n  DATEDIFF(year, a.CreationDate, GETDATE()) AS [Age],\n  a.Score,\n  COALESCE(a.Score \/ NULLIF(DATEDIFF(year, a.CreationDate, GETDATE()), 0), a.Score) AS [Score Per Year]\nFROM\n  Posts a\nJOIN Posts q\n  ON q.Id = a.ParentId\nWHERE\n  a.OwnerUserId = ##UserId##\n  AND a.PostTypeId = 2\n  AND LEN(a.Body) >= ##MinLength?1500##\n  AND q.Tags LIKE '%html%'\nORDER BY\n  LEN(a.Body) DESC,\n  a.Score DESC,\n  [Score Per Year] DESC;",
        "CreationDate": "2020-01-11 23:36:40",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 1178730,
        "Title": "My answers for questions with specific tag",
        "Description": "For example, all my answers for question that have the tag 'javascript'",
        "QueryBody": "DECLARE  @UserId int = ##UserId##\n\nSELECT Questions.Id as [Post Link], Questions.tags\nFROM Posts as Answers INNER JOIN\n     Posts as Questions ON ANSWERS.ParentId = Questions.Id\nWHERE Answers.OwnerUserId = @UserId AND\n      Answers.PostTypeId = 2 AND Questions.tags LIKE '%%##Tag##%%'",
        "CreationDate": "2020-01-12 20:18:00",
        "validated": false,
        "QueryBody_Original": "DECLARE  @UserId int = ##UserId##\n\nSELECT Questions.Id as [Post Link], Questions.tags\nFROM Posts as Answers INNER JOIN\n     Posts as Questions ON ANSWERS.ParentId = Questions.Id\nWHERE Answers.OwnerUserId = @UserId AND\n      Answers.PostTypeId = 2 AND Questions.tags LIKE '%%##Tag##%%'"
    },
    {
        "QuerySetId": 1180077,
        "Title": "Non positive questions out of all questions in the last year",
        "Description": "\"Non positive\" - closed or downvoted or deleted",
        "QueryBody": "DECLARE  @AllQuestions int\nDECLARE @SadQuestions int\n\nSELECT @AllQuestions = COUNT(Id)\nFROM Posts\nWHERE PostTypeId = 1 AND CreationDate > DATEADD(year,-1,GETDATE())\n\nSELECT @SadQuestions = COUNT(Id)\nFROM Posts\nWHERE PostTypeId = 1 AND\n      CreationDate > DATEADD(year,-1,GETDATE()) AND\n      (\n        ClosedDate IS NOT NULL OR\n        DeletionDate IS NOT NULL OR\n        Score < 0\n      )\n\n\nSELECT @AllQuestions AS [All],\n       @SadQuestions AS [Closed or Downvote],\n       (1.0 * @SadQuestions \/ @AllQuestions) AS Rate",
        "CreationDate": "2020-01-14 18:06:09",
        "validated": false,
        "QueryBody_Original": "DECLARE  @AllQuestions int\nDECLARE @SadQuestions int\n\nSELECT @AllQuestions = COUNT(Id)\nFROM Posts\nWHERE PostTypeId = 1 AND CreationDate > DATEADD(year,-1,GETDATE())\n\nSELECT @SadQuestions = COUNT(Id)\nFROM Posts\nWHERE PostTypeId = 1 AND\n      CreationDate > DATEADD(year,-1,GETDATE()) AND\n      (\n        ClosedDate IS NOT NULL OR\n        DeletionDate IS NOT NULL OR\n        Score < 0\n      )\n\n\nSELECT @AllQuestions AS [All],\n       @SadQuestions AS [Closed or Downvote],\n       (1.0 * @SadQuestions \/ @AllQuestions) AS Rate"
    },
    {
        "QuerySetId": 1180662,
        "Title": "Answered\/Unanswered Questions for a Tag by Month",
        "Description": null,
        "QueryBody": "DECLARE  @beginDate DATETIME = '2018-01-01'\nDECLARE @endDate DATETIME = GETDATE()\n\nSELECT T.Month,\n  (T.QuestionCount - T.UnansweredCount) \/ CAST(T.QuestionCount AS DECIMAL) AS AnswerRate\nFROM\n(SELECT \n  CAST(\n    CAST(DATEPART(YEAR, CreationDate) AS NVARCHAR) + '-' + \n    CAST(DATEPART(MONTH, CreationDate) AS NVARCHAR) + '-01'\n      AS DATETIME) AS 'Month',\n  SUM(CAST (\n    CASE \n       WHEN AnswerCount = 0\n         THEN 1 \n         ELSE 0 \n       END AS INT)) AS 'UnansweredCount',\n  COUNT(*) AS 'QuestionCount'\nFROM Posts p\n  INNER JOIN PostTags pt ON p.Id = pt.PostId\n  INNER JOIN Tags t ON t.Id = pt.TagId\n  WHERE (p.PostTypeId = 1)\n  AND (p.CreationDate BETWEEN @beginDate AND @endDate)\nGROUP BY \n  DATEPART(YEAR, CreationDate), \n  DATEPART(MONTH, CreationDate)) T\nORDER BY T.Month DESC",
        "CreationDate": "2020-01-16 04:06:59",
        "validated": false,
        "QueryBody_Original": "DECLARE  @beginDate DATETIME = '2018-01-01'\nDECLARE @endDate DATETIME = GETDATE()\n\nSELECT T.Month,\n  (T.QuestionCount - T.UnansweredCount) \/ CAST(T.QuestionCount AS DECIMAL) AS AnswerRate\nFROM\n(SELECT \n  CAST(\n    CAST(DATEPART(YEAR, CreationDate) AS NVARCHAR) + '-' + \n    CAST(DATEPART(MONTH, CreationDate) AS NVARCHAR) + '-01'\n      AS DATETIME) AS 'Month',\n  SUM(CAST (\n    CASE \n       WHEN AnswerCount = 0\n         THEN 1 \n         ELSE 0 \n       END AS INT)) AS 'UnansweredCount',\n  COUNT(*) AS 'QuestionCount'\nFROM Posts p\n  INNER JOIN PostTags pt ON p.Id = pt.PostId\n  INNER JOIN Tags t ON t.Id = pt.TagId\n  WHERE (p.PostTypeId = 1)\n  AND (p.CreationDate BETWEEN @beginDate AND @endDate)\nGROUP BY \n  DATEPART(YEAR, CreationDate), \n  DATEPART(MONTH, CreationDate)) T\nORDER BY T.Month DESC"
    },
    {
        "QuerySetId": 1180682,
        "Title": "Question Answer Rates (1 Day\/7 Days\/14 Days\/Total) per Month",
        "Description": "Autocleanup causes the dip 1 year ago - so don't be too hasty about conclusions.\r\nThere are additional cleanups after 7 and 28 days apparently, although with a lesser effect.\r\n\r\nThe end time is hard-coded to 14 days ago of the current date; this is because the rates would be dropping significantly if you look at too fresh questions, this would also easily be misinterpreted with respect to current events.\r\n\r\nThere are supposedly many reasons why the answer rate goes down:\r\n\r\n* the easy questions are all asked and answered already; good new questions often are tougher\r\n* question quality is going down, answering bad questions is harder\r\n* maybe some highly active users are leaving, too - SO appears to have peaked in 2014\r\n* the community is less welcoming\/motivating than it was 10 years ago\r\n* [graph of users with 10+ answers per month](https:\/\/data.stackexchange.com\/stackoverflow\/query\/1180698\/number-of-users-that-answer-10-or-more-questions-a-month?StartTime=2000%2F01%2F01#graph)",
        "QueryBody": "DECLARE  @StartTime DATETIME = convert(DATETIME, '##StartTime?2017\/01\/01 00:00:00##')\nDECLARE @EndTime DATETIME = dateadd(day,-15,getdate())\n\nselect\n  WeekOf,  \n  sum(Answered14Days)\/cast(count(*) as decimal) as 'RateAnsweredIn14Days'\nfrom (select\n    dateadd(day, 1-datepart(weekday, CreationDate), CreationDate) as 'WeekOf',\n    cast(case when exists (select * from Posts a where\n      a.ParentId = q.Id\n      and datediff(second, q.CreationDate, a.CreationDate) < 1209600 -- 14 days\n      ) then 1 else 0 end as int) as 'Answered14Days'\n  from\n    Posts q\n  where\n    q.CreationDate > @StartTime and q.CreationDate < @EndTime\n    and q.PostTypeId = 1\n    and q.ClosedDate is null\n) t\ngroup by\n  WeekOf\norder by\n  WeekOf desc",
        "CreationDate": "2020-01-16 05:07:27",
        "validated": false,
        "QueryBody_Original": "DECLARE  @StartTime DATETIME = convert(DATETIME, '##StartTime?2017\/01\/01 00:00:00##')\nDECLARE @EndTime DATETIME = dateadd(day,-15,getdate())\n\nselect\n  WeekOf,  \n  sum(Answered14Days)\/cast(count(*) as decimal) as 'RateAnsweredIn14Days'\nfrom (select\n    dateadd(day, 1-datepart(weekday, CreationDate), CreationDate) as 'WeekOf',\n    cast(case when exists (select * from Posts a where\n      a.ParentId = q.Id\n      and datediff(second, q.CreationDate, a.CreationDate) < 1209600 -- 14 days\n      ) then 1 else 0 end as int) as 'Answered14Days'\n  from\n    Posts q\n  where\n    q.CreationDate > @StartTime and q.CreationDate < @EndTime\n    and q.PostTypeId = 1\n    and q.ClosedDate is null\n) t\ngroup by\n  WeekOf\norder by\n  WeekOf desc"
    },
    {
        "QuerySetId": 1180698,
        "Title": "Number of users that answer 10 or more questions a month",
        "Description": null,
        "QueryBody": "DECLARE  @StartTime DATETIME = convert(DATETIME, '##StartTime?2000\/01\/01 00:00:00##')\nDECLARE @EndTime DATETIME = dateadd(day,-datepart(day,getdate()),getdate())\n\nselect\n  MonthOf,\n  count(distinct OwnerUserId) as \"ActiveAnswerers\"\nfrom (select\n  MonthOf,\n  OwnerUserId,\n  count(*) as \"Cnt\"\nfrom (select\n    OwnerUserId,\n    dateadd(day, 1-datepart(day, CreationDate), convert(date,CreationDate)) as 'MonthOf'\n  from\n    Posts q\n  where\n    q.CreationDate > @StartTime and q.CreationDate < @EndTime\n    and q.PostTypeId = 2 -- answers only\n    and q.ClosedDate is null -- not closed\n) t1\ngroup by\n  MonthOf, OwnerUserId\n) t2\nwhere\n  t2.Cnt >= 10\ngroup by\n  MonthOf\norder by\n  MonthOf desc",
        "CreationDate": "2020-01-20 00:16:11",
        "validated": false,
        "QueryBody_Original": "DECLARE  @StartTime DATETIME = convert(DATETIME, '##StartTime?2000\/01\/01 00:00:00##')\nDECLARE @EndTime DATETIME = dateadd(day,-datepart(day,getdate()),getdate())\n\nselect\n  MonthOf,\n  count(distinct OwnerUserId) as \"ActiveAnswerers\"\nfrom (select\n  MonthOf,\n  OwnerUserId,\n  count(*) as \"Cnt\"\nfrom (select\n    OwnerUserId,\n    dateadd(day, 1-datepart(day, CreationDate), convert(date,CreationDate)) as 'MonthOf'\n  from\n    Posts q\n  where\n    q.CreationDate > @StartTime and q.CreationDate < @EndTime\n    and q.PostTypeId = 2 -- answers only\n    and q.ClosedDate is null -- not closed\n) t1\ngroup by\n  MonthOf, OwnerUserId\n) t2\nwhere\n  t2.Cnt >= 10\ngroup by\n  MonthOf\norder by\n  MonthOf desc"
    },
    {
        "QuerySetId": 1180980,
        "Title": "Questions and Answers per month",
        "Description": null,
        "QueryBody": "DECLARE  @start datetime = DATEADD(day, -365*10, GETDATE());\nDECLARE @stop  datetime = DATEADD(day, 0, GETDATE());\n\nSELECT\n  DATEADD(month, datediff(month, @start, CreationDate), @start) as [Month],\n  SUM(CASE WHEN PostTypeId = 1 THEN 1 ELSE 0 END) AS [Questions],\n  SUM(CASE WHEN PostTypeId = 2 THEN 1 ELSE 0 END) AS [Answers]\nFROM\n  Posts\nWHERE\n  (PostTypeId = 1 or PostTypeId = 2)\n  and CreationDate >= @start and CreationDate < @stop\n  and Score = 0\nGROUP BY\n  dateadd(month, datediff(month, @start, CreationDate), @start)\nORDER BY\n  dateadd(month, datediff(month, @start, CreationDate), @start)",
        "CreationDate": "2020-01-16 20:18:46",
        "validated": false,
        "QueryBody_Original": "DECLARE  @start datetime = DATEADD(day, -365*10, GETDATE());\nDECLARE @stop  datetime = DATEADD(day, 0, GETDATE());\n\nSELECT\n  DATEADD(month, datediff(month, @start, CreationDate), @start) as [Month],\n  SUM(CASE WHEN PostTypeId = 1 THEN 1 ELSE 0 END) AS [Questions],\n  SUM(CASE WHEN PostTypeId = 2 THEN 1 ELSE 0 END) AS [Answers]\nFROM\n  Posts\nWHERE\n  (PostTypeId = 1 or PostTypeId = 2)\n  and CreationDate >= @start and CreationDate < @stop\n  and Score = 0\nGROUP BY\n  dateadd(month, datediff(month, @start, CreationDate), @start)\nORDER BY\n  dateadd(month, datediff(month, @start, CreationDate), @start)"
    },
    {
        "QuerySetId": 1182311,
        "Title": "2D Histogram of question views vs. score",
        "Description": null,
        "QueryBody": "DECLARE  @NS int = ##S2## - ##S1## -- bins in score\nDECLARE @NV int = ##V2## \/ ##dV## -- bins in viewcounts\n\nSELECT Score, ViewCount \/ ##dV## as [Views]\nFROM Posts\nWHERE PostTypeId = 1 -- questions\n      and Score >= ##S1## and Score < ##S2##\n      and ViewCount < ##V2##",
        "CreationDate": "2020-01-18 04:06:22",
        "validated": false,
        "QueryBody_Original": "DECLARE  @NS int = ##S2## - ##S1## -- bins in score\nDECLARE @NV int = ##V2## \/ ##dV## -- bins in viewcounts\n\nSELECT Score, ViewCount \/ ##dV## as [Views]\nFROM Posts\nWHERE PostTypeId = 1 -- questions\n      and Score >= ##S1## and Score < ##S2##\n      and ViewCount < ##V2##"
    },
    {
        "QuerySetId": 1182866,
        "Title": "Users with most suggested edits",
        "Description": null,
        "QueryBody": "SELECT  TOP(##num?100##)\n  OwnerUserId AS [User Link],\n  COUNT(Id) AS Total,\n  COUNT(ApprovalDate) AS Approved,\n  COUNT(RejectionDate) AS Rejected,\n  ROUND((COUNT(ApprovalDate))*100.0\/(COUNT(Id)),2) AS PercApproved,\n  ROUND((COUNT(RejectionDate))*100.0\/(COUNT(Id)),2) AS PercRejected\nFROM SuggestedEdits\nGROUP BY OwnerUserId\nORDER BY Count(Id) DESC",
        "CreationDate": "2020-01-19 14:50:05",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 1183178,
        "Title": "Active Answerers (3+ Questions) per Week",
        "Description": "StackOverflow has fewer answering users than before. It maxed out around 2014, when exponential growth suddenly halted (either because maximum spread has been reached, or the community was overwhelmed with being able to accomodate low-quality questions and new users).",
        "QueryBody": "DECLARE  @StartTime DATETIME = convert(DATETIME, '##StartTime?2000\/01\/01 00:00:00##')\nDECLARE @EndTime DATETIME = dateadd(day,-datepart(weekday,getdate()),getdate())\n\nselect\n  WeekOf,\n  count(distinct OwnerUserId) as \"ActiveAnswerers\"\nfrom (select\n  WeekOf,\n  OwnerUserId,\n  count(*) as \"Cnt\"\nfrom (select\n    OwnerUserId,\n    dateadd(day, 1-datepart(weekday, CreationDate), convert(date,CreationDate)) as 'WeekOf'\n  from\n    Posts q\n  where\n    q.CreationDate > @StartTime and q.CreationDate < @EndTime\n    and q.PostTypeId = 2 -- answers only\n    and q.ClosedDate is null -- not closed\n) t1\ngroup by\n  WeekOf, OwnerUserId\n) t2\nwhere\n  t2.Cnt >= 3\ngroup by\n  WeekOf\norder by\n  WeekOf desc",
        "CreationDate": "2020-01-20 02:39:49",
        "validated": false,
        "QueryBody_Original": "DECLARE  @StartTime DATETIME = convert(DATETIME, '##StartTime?2000\/01\/01 00:00:00##')\nDECLARE @EndTime DATETIME = dateadd(day,-datepart(weekday,getdate()),getdate())\n\nselect\n  WeekOf,\n  count(distinct OwnerUserId) as \"ActiveAnswerers\"\nfrom (select\n  WeekOf,\n  OwnerUserId,\n  count(*) as \"Cnt\"\nfrom (select\n    OwnerUserId,\n    dateadd(day, 1-datepart(weekday, CreationDate), convert(date,CreationDate)) as 'WeekOf'\n  from\n    Posts q\n  where\n    q.CreationDate > @StartTime and q.CreationDate < @EndTime\n    and q.PostTypeId = 2 -- answers only\n    and q.ClosedDate is null -- not closed\n) t1\ngroup by\n  WeekOf, OwnerUserId\n) t2\nwhere\n  t2.Cnt >= 3\ngroup by\n  WeekOf\norder by\n  WeekOf desc"
    },
    {
        "QuerySetId": 1183179,
        "Title": "2D Histogram of question score vs. highest voted answer score",
        "Description": null,
        "QueryBody": "DECLARE  @NS int = ##S2:int?95## - ##S1:int?-5## -- number bins score\n\nSELECT sel.Idx, Count(*) as [Occurence]\nFROM\n(SELECT (q.Score - ##S1##) * @NS + (a.Score - ##S1##) as [Idx]\nFROM Posts q\nINNER JOIN\n (SELECT DISTINCT a.ParentId, MAX(a.Score) AS [Score]\n FROM Posts a\n WHERE a.PostTypeId = 2 -- answers\n and a.Score >= ##S1## and a.Score < ##S2##\n GROUP BY a.ParentId) a\nON q.Id = a.ParentId\nWHERE q.PostTypeId = 1 -- questions\nand q.ClosedDate is null -- not closed\nand q.Score >= ##S1## and q.Score < ##S2##\n) sel\nGROUP BY sel.Idx\nORDER BY sel.Idx",
        "CreationDate": "2020-01-20 03:21:48",
        "validated": false,
        "QueryBody_Original": "DECLARE  @NS int = ##S2:int?95## - ##S1:int?-5## -- number bins score\n\nSELECT sel.Idx, Count(*) as [Occurence]\nFROM\n(SELECT (q.Score - ##S1##) * @NS + (a.Score - ##S1##) as [Idx]\nFROM Posts q\nINNER JOIN\n (SELECT DISTINCT a.ParentId, MAX(a.Score) AS [Score]\n FROM Posts a\n WHERE a.PostTypeId = 2 -- answers\n and a.Score >= ##S1## and a.Score < ##S2##\n GROUP BY a.ParentId) a\nON q.Id = a.ParentId\nWHERE q.PostTypeId = 1 -- questions\nand q.ClosedDate is null -- not closed\nand q.Score >= ##S1## and q.Score < ##S2##\n) sel\nGROUP BY sel.Idx\nORDER BY sel.Idx"
    },
    {
        "QuerySetId": 1183184,
        "Title": "2D Histogram of question score vs. sum of answer scores",
        "Description": null,
        "QueryBody": "DECLARE  @NS int = ##S2:int?95## - ##S1:int?-5## -- number bins score\n\nSELECT sel.Idx, Count(*) as [Occurence]\nFROM\n(SELECT (q.Score - ##S1##) * @NS + (a.Score - ##S1##) as [Idx]\nFROM Posts q\nINNER JOIN\n (SELECT DISTINCT a.ParentId, SUM(a.Score) AS [Score]\n FROM Posts a\n WHERE a.PostTypeId = 2 -- answers\n GROUP BY a.ParentId) a\nON q.Id = a.ParentId\nWHERE q.PostTypeId = 1 -- questions\nand q.ClosedDate is null -- not closed\nand q.Score >= ##S1## and q.Score < ##S2##\nand a.Score >= ##S1## and a.Score < ##S2##\n) sel\nGROUP BY sel.Idx\nORDER BY sel.Idx",
        "CreationDate": "2020-01-20 03:26:11",
        "validated": false,
        "QueryBody_Original": "DECLARE  @NS int = ##S2:int?95## - ##S1:int?-5## -- number bins score\n\nSELECT sel.Idx, Count(*) as [Occurence]\nFROM\n(SELECT (q.Score - ##S1##) * @NS + (a.Score - ##S1##) as [Idx]\nFROM Posts q\nINNER JOIN\n (SELECT DISTINCT a.ParentId, SUM(a.Score) AS [Score]\n FROM Posts a\n WHERE a.PostTypeId = 2 -- answers\n GROUP BY a.ParentId) a\nON q.Id = a.ParentId\nWHERE q.PostTypeId = 1 -- questions\nand q.ClosedDate is null -- not closed\nand q.Score >= ##S1## and q.Score < ##S2##\nand a.Score >= ##S1## and a.Score < ##S2##\n) sel\nGROUP BY sel.Idx\nORDER BY sel.Idx"
    },
    {
        "QuerySetId": 1183846,
        "Title": "Questions\/answers with highest score from anonymous feedback",
        "Description": null,
        "QueryBody": "SELECT  TOP(##mum?500##)\n  RANK() OVER(ORDER BY SUM(Case pf.VoteTypeId When 2 Then 1 WHEN 3 Then -1 End) DESC) AS Rank,\n  pf.PostId as [Post Link],\n  SUM(Case When pf.VoteTypeId = 2 Then 1 Else NULL End) AS UpFeedback,\n  SUM(Case When pf.VoteTypeId = 3 Then 1 Else NULL End) AS DownFeedback,\n  SUM(Case pf.VoteTypeId When 2 Then 1 WHEN 3 Then -1 End) AS Score,\n  p.OwnerUserId AS [User Link], p.Score\nFROM\n  PostFeedback pf JOIN Posts p ON p.Id = pf.PostId\nWHERE p.PostTypeId=##type?1##\n--user 1 for questions, 2 for answer\nGROUP BY pf.PostId, p.OwnerUserId, p.Score\nORDER BY SUM(Case pf.VoteTypeId When 2 Then 1 WHEN 3 Then -1 End) DESC",
        "CreationDate": "2020-01-20 21:56:59",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 1183848,
        "Title": "Posts with highest score from anonymous feedback",
        "Description": null,
        "QueryBody": "SELECT  TOP(##mum?500##)\n  RANK() OVER(ORDER BY SUM(Case pf.VoteTypeId When 2 Then 1 WHEN 3 Then -1 End) DESC) AS Rank,\n  pf.PostId as [Post Link],\n  SUM(Case When pf.VoteTypeId = 2 Then 1 Else NULL End) AS UpFeedback,\n  SUM(Case When pf.VoteTypeId = 3 Then 1 Else NULL End) AS DownFeedback,\n  SUM(Case pf.VoteTypeId When 2 Then 1 WHEN 3 Then -1 End) AS Score,\n  p.OwnerUserId AS [User Link], p.Score\nFROM\n  PostFeedback pf\nJOIN Posts p ON p.Id = pf.PostId\nGROUP BY pf.PostId, p.OwnerUserId, p.Score\nORDER BY SUM(Case pf.VoteTypeId When 2 Then 1 WHEN 3 Then -1 End) DESC",
        "CreationDate": "2020-01-20 21:55:15",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 1184425,
        "Title": "Users with highest score from anonymous feedback",
        "Description": null,
        "QueryBody": "SELECT  TOP(##num?100##)\n  RANK() OVER(ORDER BY SUM(Case pf.VoteTypeId When 2 Then 1 WHEN 3 Then -1 End) DESC) AS Rank,\n  p.OwnerUserId as [User Link], p.OwnerDisplayName,\n  SUM(Case When pf.VoteTypeId = 2 Then 1 Else NULL End) AS UpFeedback,\n  SUM(Case When pf.VoteTypeId = 3 Then 1 Else NULL End) AS DownFeedback,\n  SUM(Case pf.VoteTypeId When 2 Then 1 WHEN 3 Then -1 End) AS Score,\n  SUM(p.Score) AS [Total Score],\n  SUM(Case When p.CommunityOwnedDate IS NULL Then p.Score ELSE 0 END) AS [nonCW Score]\nFROM PostFeedback pf JOIN Posts p ON p.Id = pf.PostId\nGROUP BY p.OwnerUserId, p.OwnerDisplayName\nORDER BY SUM(Case pf.VoteTypeId When 2 Then 1 WHEN 3 Then -1 End) DESC",
        "CreationDate": "2020-01-21 15:31:45",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 1184802,
        "Title": "Count of new user registrations by month",
        "Description": "It shows the stats only until the last completely dumped month to the SEDE.",
        "QueryBody": "DECLARE  @TsNow DATETIME;\n\nSELECT @TsNow = DATEFROMPARTS(\n    DATEPART(yyyy, MAX(CreationDate)),\n    DATEPART(mm, MAX(CreationDate)),\n    1) FROM Posts;\n\nPRINT @TsNow;\n\nSELECT\n  DATEFROMPARTS(\n    DATEPART(yyyy, CreationDate),\n    DATEPART(mm, CreationDate),\n    1) AS Month,\n  COUNT(*) AS Count\nFROM Users\nWHERE CreationDate < @TsNow\nGROUP BY DATEFROMPARTS(\n  DATEPART(yyyy, CreationDate),\n  DATEPART(mm, CreationDate),\n  1)\nORDER BY Month",
        "CreationDate": "2020-02-04 23:36:28",
        "validated": false,
        "QueryBody_Original": "DECLARE  @TsNow DATETIME;\n\nSELECT @TsNow = DATEFROMPARTS(\n    DATEPART(yyyy, MAX(CreationDate)),\n    DATEPART(mm, MAX(CreationDate)),\n    1) FROM Posts;\n\nPRINT @TsNow;\n\nSELECT\n  DATEFROMPARTS(\n    DATEPART(yyyy, CreationDate),\n    DATEPART(mm, CreationDate),\n    1) AS Month,\n  COUNT(*) AS Count\nFROM Users\nWHERE CreationDate < @TsNow\nGROUP BY DATEFROMPARTS(\n  DATEPART(yyyy, CreationDate),\n  DATEPART(mm, CreationDate),\n  1)\nORDER BY Month"
    },
    {
        "QuerySetId": 1187114,
        "Title": "Questions for tag and term",
        "Description": null,
        "QueryBody": "DECLARE  @tag varchar(80) = '##Tag##'\nDECLARE @userid int = '##UserId##'\n\nselect id,\n    tags from Posts p1\n   where p1.Tags like '%' + @tag + '%'\n   and p1.posttypeid = 1 \n   except\n   (select parentid,tags\n       from posts p2\n       where\n       p2.posttypeid = 2\n       and p2.owneruserid = 6309 and\n       p2.Tags like '%' + @tag + '%'\n    )",
        "CreationDate": "2020-01-26 18:14:36",
        "validated": false,
        "QueryBody_Original": "DECLARE  @tag varchar(80) = '##Tag##'\nDECLARE @userid int = '##UserId##'\n\nselect id,\n    tags from Posts p1\n   where p1.Tags like '%' + @tag + '%'\n   and p1.posttypeid = 1 \n   except\n   (select parentid,tags\n       from posts p2\n       where\n       p2.posttypeid = 2\n       and p2.owneruserid = 6309 and\n       p2.Tags like '%' + @tag + '%'\n    )"
    },
    {
        "QuerySetId": 1187269,
        "Title": "tag for which I have not posted an answer",
        "Description": null,
        "QueryBody": "DECLARE  @tag varchar(80) = '##Tag##'\nDECLARE @userid int = '##UserID##'\n\n;with\n\nqtag as (\n  select p1.id, p1.AnswerCount from Posts p1\n  where p1.Tags like '%' + @tag + '%'\n        and\n        p1.posttypeid = 1  and\n        p1.ClosedDate is null and\n        p1.FavoriteCount = 0\n),\n\nmyanswers as(\n  select p2.parentid, p2.score\n  from posts p2\n  where\n    p2.owneruserid =  @UserID  and\n    p2.communityowneddate is null and\n    p2.posttypeid = 2\n),\n\nres as (\n  select qt.id, qt.AnswerCount from qtag qt\n   left join myanswers ma on qt.id = ma.parentId\n   where ma.parentId is null\n)\n\nselect r.id as [Post Link], r.AnswerCount from res r\norder by r.AnswerCount ASC",
        "CreationDate": "2020-04-20 14:37:26",
        "validated": false,
        "QueryBody_Original": "DECLARE  @tag varchar(80) = '##Tag##'\nDECLARE @userid int = '##UserID##'\n\n;with\n\nqtag as (\n  select p1.id, p1.AnswerCount from Posts p1\n  where p1.Tags like '%' + @tag + '%'\n        and\n        p1.posttypeid = 1  and\n        p1.ClosedDate is null and\n        p1.FavoriteCount = 0\n),\n\nmyanswers as(\n  select p2.parentid, p2.score\n  from posts p2\n  where\n    p2.owneruserid =  @UserID  and\n    p2.communityowneddate is null and\n    p2.posttypeid = 2\n),\n\nres as (\n  select qt.id, qt.AnswerCount from qtag qt\n   left join myanswers ma on qt.id = ma.parentId\n   where ma.parentId is null\n)\n\nselect r.id as [Post Link], r.AnswerCount from res r\norder by r.AnswerCount ASC"
    },
    {
        "QuerySetId": 1187927,
        "Title": "2D Histogram of number of questions vs. number of answers for users",
        "Description": null,
        "QueryBody": "SELECT  Idx, Count(*) as [Occurence]\nfrom\n(SELECT nQ * ##n1:int?150## + nA as [Idx]\nfrom\n(SELECT sum(case when p.PostTypeId = 1 then 1 else 0 end) as [nQ], sum(case when p.PostTypeId = 2 then 1 else 0 end) as [nA]\nfrom Users u inner join Posts p on p.OwnerUserId = u.Id\nwhere p.ClosedDate is null -- not closed\ngroup by u.Id) sel\nwhere nQ < ##n1## and nA < ##n1##) sel\ngroup by Idx\norder by Idx",
        "CreationDate": "2020-01-28 19:26:22",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 1188354,
        "Title": "Top SO helpers under [google-maps] tag",
        "Description": null,
        "QueryBody": "DECLARE  @tagName nvarchar(35) = '##tagName##'\n\nSELECT top (##Limit##)\n    TagName,\n    SUM(case votes.votetypeid \n            WHEN 2 THEN 1  -- upvote\n            WHEN 3 THEN -1  -- downvote\n            END) as Rep,\n    COUNT(votes.postid) as answers,  \n    Users.Id as [User Link],\n    number = ROW_NUMBER() OVER (ORDER BY TagName)\nFROM Tags\n    INNER JOIN PostTags ON PostTags.TagId = Tags.id\n    INNER JOIN Posts ON Posts.ParentId = PostTags.PostId\n    INNER JOIN Users ON Posts.OwnerUserId = Users.Id                \n    INNER JOIN Votes ON Votes.PostId = Posts.Id\nWHERE Tags.TagName = @tagName\n    AND Posts.CommunityOwnedDate IS NULL\nAND Votes.CreationDate >= '##dateFrom##' AND Votes.CreationDate <= '##dateTo##'    \nGROUP BY TagName, Users.Id\nORDER BY answers DESC",
        "CreationDate": "2020-01-29 12:00:05",
        "validated": false,
        "QueryBody_Original": "DECLARE  @tagName nvarchar(35) = '##tagName##'\n\nSELECT top (##Limit##)\n    TagName,\n    SUM(case votes.votetypeid \n            WHEN 2 THEN 1  -- upvote\n            WHEN 3 THEN -1  -- downvote\n            END) as Rep,\n    COUNT(votes.postid) as answers,  \n    Users.Id as [User Link],\n    number = ROW_NUMBER() OVER (ORDER BY TagName)\nFROM Tags\n    INNER JOIN PostTags ON PostTags.TagId = Tags.id\n    INNER JOIN Posts ON Posts.ParentId = PostTags.PostId\n    INNER JOIN Users ON Posts.OwnerUserId = Users.Id                \n    INNER JOIN Votes ON Votes.PostId = Posts.Id\nWHERE Tags.TagName = @tagName\n    AND Posts.CommunityOwnedDate IS NULL\nAND Votes.CreationDate >= '##dateFrom##' AND Votes.CreationDate <= '##dateTo##'    \nGROUP BY TagName, Users.Id\nORDER BY answers DESC"
    },
    {
        "QuerySetId": 1189200,
        "Title": "Comments by a deleted user",
        "Description": null,
        "QueryBody": "SELECT \n  Id, PostId AS [Post Link], Text, Score, CreationDate, UserDisplayName\nFROM Comments\nWHERE (UserDisplayName='user' + Convert(nvarchar(20), ##UserId##))\nORDER BY CreationDate DESC",
        "CreationDate": "2020-01-30 19:32:59",
        "validated": false,
        "QueryBody_Original": "SELECT \n  Id, PostId AS [Post Link], Text, Score, CreationDate, UserDisplayName\nFROM Comments\nWHERE (UserDisplayName='user' + Convert(nvarchar(20), ##UserId##))\nORDER BY CreationDate DESC"
    },
    {
        "QuerySetId": 1189268,
        "Title": "Try to answer these questions (SO)",
        "Description": "For non-SO sites, try the more exact query here: https:\/\/data.stackexchange.com\/physics\/query\/1189284\/try-to-answer-these-questions-not-so",
        "QueryBody": "SELECT  TOP 100 PostTags.TagId, COUNT(*) AS N\nFROM Posts Q, Posts A, PostTags, Votes\nWHERE\n  A.ParentId = Q.Id\n  AND\n  Q.Id = PostTags.PostId\n  AND\n  Votes.PostId = A.Id\n  AND\n  Votes.VoteTypeId = 2\nGROUP BY PostTags.TagId\nORDER BY N DESC, TagId\n\n\/*\nWITH YourTagScores AS (\n  SELECT PostTags.TagId, COUNT(*) AS Count\n  FROM Votes, Posts Q, Posts A, Users, PostTags\n  WHERE\n    Votes.VoteTypeId = 2\n    AND\n    Votes.PostId = A.Id\n    AND\n    A.OwnerUserId = Users.Id\n    AND\n    Users.AccountId = ##AccountId:int##\n    AND\n    A.ParentId = Q.Id\n    AND\n    PostTags.PostId = Q.Id\n  GROUP BY PostTags.TagId\n), YourTagIntensity AS (\n  SELECT\n    YourTagScores.TagId,\n    1.0 * YourTagScores.Count \/ Tags.Count AS Intensity\n  FROM YourTagScores, Tags\n  WHERE\n    YourTagScores.TagId = Tags.Id\n)",
        "CreationDate": "2020-01-30 23:03:20",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 1190294,
        "Title": "Try to answer these questions, to increase your tag score",
        "Description": null,
        "QueryBody": "DECLARE  @UserID INT;\nDECLARE @TagId INT;\n\nSELECT @UserId = Id FROM Users WHERE AccountId = ##AccountId:int##;\nSELECT @TagId = Id FROM Tags WHERE TagName = ##TagName:string##;\n\nWITH TagScores AS (\n  SELECT PostTags.TagId, SUM(5 - 2 * Votes.VoteTypeId) AS Score\n  FROM Posts, Votes, PostTags\n  WHERE\n    Posts.ParentId = PostTags.PostId\n    AND\n    Votes.PostId = Posts.Id\n    AND\n    Votes.VoteTypeId BETWEEN 2 AND 3\n    AND\n    Posts.OwnerUserId = @UserId\n    AND\n    Posts.CommunityOwnedDate IS NULL\n  GROUP BY PostTags.TagId\n)\nSELECT * FROM TagScores;",
        "CreationDate": "2020-02-01 04:59:39",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 1190392,
        "Title": "Find questions containing the given tag",
        "Description": null,
        "QueryBody": "SELECT  q.Id as [Post Link], q.Tags, q.CreationDate, q.LastActivityDate\nFROM Posts q INNER JOIN PostTags pt ON q.Id=pt.PostId\nINNER JOIN Tags t ON t.id = pt.TagId\nWHERE t.TagName=##tagName:string?geometry##\nORDER BY q.CreationDate DESC\n---simply using \"q.Tags LIKE '%<##Tagname##>%'\" leads to some false positives\n---for example, searching for geometry gives also the questions tagged geometry-of-numbers",
        "CreationDate": "2020-06-25 15:30:25",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 1190898,
        "Title": "amount of posts per day",
        "Description": null,
        "QueryBody": "SELECT  \n  ROW_NUMBER() OVER (ORDER BY MIN(CreationDate)) rowNumber,\n  COUNT(*) amount,\n  CAST(MIN(CreationDate)AS DATE) date\nFROM Posts\nWHERE OwnerUserId = ##UserId##\n AND CreationDate BETWEEN '2008-08-01' and '2008-08-17'\nGROUP BY CAST(CreationDate AS DATE)\nORDER BY MIN(CreationDate)",
        "CreationDate": "2020-11-09 09:32:59",
        "validated": false,
        "QueryBody_Original": "SELECT  \n  ROW_NUMBER() OVER (ORDER BY MIN(CreationDate)) rowNumber,\n  COUNT(*) amount,\n  CAST(MIN(CreationDate)AS DATE) date\nFROM Posts\nWHERE OwnerUserId = ##UserId##\n AND CreationDate BETWEEN '2008-08-01' and '2008-08-17'\nGROUP BY CAST(CreationDate AS DATE)\nORDER BY MIN(CreationDate)"
    },
    {
        "QuerySetId": 1191925,
        "Title": "Answer of a deleted user in a given tag",
        "Description": null,
        "QueryBody": "SELECT  a.Id As [Post Link], a.CreationDate, a.Score, q.Tags, q.Title\nFROM Posts a INNER JOIN Posts q ON q.Id=a.ParentId\nWHERE (a.OwnerDisplayName='user' + Convert(nvarchar(20), ##UserId##))\nAND (q.PostTypeId=1) AND (q.Tags LIKE '%<##Tagname##>%')",
        "CreationDate": "2020-02-03 18:43:25",
        "validated": false,
        "QueryBody_Original": "SELECT  a.Id As [Post Link], a.CreationDate, a.Score, q.Tags, q.Title\nFROM Posts a INNER JOIN Posts q ON q.Id=a.ParentId\nWHERE (a.OwnerDisplayName='user' + Convert(nvarchar(20), ##UserId##))\nAND (q.PostTypeId=1) AND (q.Tags LIKE '%<##Tagname##>%')"
    },
    {
        "QuerySetId": 1192202,
        "Title": "Questions by a user per year",
        "Description": null,
        "QueryBody": "DECLARE  @UserId int = ##userid##\n\nSELECT \n    YEAR(Posts.CreationDate),\n    COUNT(*)\nFROM Posts\nWHERE \n    Posts.OwnerUserId = @UserId and Posts.PostTypeId = 1\nGROUP BY YEAR(Posts.CreationDate)\nORDER BY YEAR(Posts.CreationDate)",
        "CreationDate": "2020-02-04 04:12:25",
        "validated": false,
        "QueryBody_Original": "DECLARE  @UserId int = ##userid##\n\nSELECT \n    YEAR(Posts.CreationDate),\n    COUNT(*)\nFROM Posts\nWHERE \n    Posts.OwnerUserId = @UserId and Posts.PostTypeId = 1\nGROUP BY YEAR(Posts.CreationDate)\nORDER BY YEAR(Posts.CreationDate)"
    },
    {
        "QuerySetId": 1192581,
        "Title": "Count of the positively scored, open questions with a positively scored, accepted answer, by month",
        "Description": null,
        "QueryBody": "DECLARE  @TsNow DATETIME;\n\nSELECT @TsNow = DATEFROMPARTS(\n  DATEPART(yyyy, MAX(CreationDate)),\n  DATEPART(mm, MAX(CreationDate)),\n  1)\nFROM Posts;\n\nSELECT\n  DATEFROMPARTS(\n    DATEPART(yyyy, Q.CreationDate),\n    DATEPART(mm, Q.CreationDate),\n    1) AS Month,\n  COUNT(*) AS Count\nFROM Posts Q, Posts A\nWHERE\n  Q.AcceptedAnswerId = A.Id\n  AND\n  Q.CreationDate < @TsNow\n  AND\n  Q.ClosedDate IS NULL\n  AND\n  Q.Score > 0\n  AND\n  A.Score > 0\nGROUP BY DATEFROMPARTS(\n    DATEPART(yyyy, Q.CreationDate),\n    DATEPART(mm, Q.CreationDate),\n    1)\nORDER BY Month",
        "CreationDate": "2020-02-05 03:17:26",
        "validated": false,
        "QueryBody_Original": "DECLARE  @TsNow DATETIME;\n\nSELECT @TsNow = DATEFROMPARTS(\n  DATEPART(yyyy, MAX(CreationDate)),\n  DATEPART(mm, MAX(CreationDate)),\n  1)\nFROM Posts;\n\nSELECT\n  DATEFROMPARTS(\n    DATEPART(yyyy, Q.CreationDate),\n    DATEPART(mm, Q.CreationDate),\n    1) AS Month,\n  COUNT(*) AS Count\nFROM Posts Q, Posts A\nWHERE\n  Q.AcceptedAnswerId = A.Id\n  AND\n  Q.CreationDate < @TsNow\n  AND\n  Q.ClosedDate IS NULL\n  AND\n  Q.Score > 0\n  AND\n  A.Score > 0\nGROUP BY DATEFROMPARTS(\n    DATEPART(yyyy, Q.CreationDate),\n    DATEPART(mm, Q.CreationDate),\n    1)\nORDER BY Month"
    },
    {
        "QuerySetId": 1192611,
        "Title": "Count of the users with a positively scored post by month",
        "Description": null,
        "QueryBody": "DECLARE  @TsNow DATETIME;\n\nSELECT @TsNow = DATEFROMPARTS(\n  DATEPART(yyyy, MAX(CreationDate)),\n  DATEPART(mm, MAX(CreationDate)),\n  1)\nFROM Posts;\n\nWITH Raw AS (\n  SELECT DISTINCT\n    DATEFROMPARTS(\n      DATEPART(yyyy, CreationDate),\n      DATEPART(mm, CreationDate),\n      1) AS Month,\n    OwnerUserId AS UserId\n  FROM Posts\n  WHERE\n    CreationDate < @TsNow\n    AND\n    Score > 0\n)\nSELECT\n  Month,\n  COUNT(*) AS Count\nFROM Raw\nGROUP BY Month\nORDER BY Month",
        "CreationDate": "2020-02-05 03:14:06",
        "validated": false,
        "QueryBody_Original": "DECLARE  @TsNow DATETIME;\n\nSELECT @TsNow = DATEFROMPARTS(\n  DATEPART(yyyy, MAX(CreationDate)),\n  DATEPART(mm, MAX(CreationDate)),\n  1)\nFROM Posts;\n\nWITH Raw AS (\n  SELECT DISTINCT\n    DATEFROMPARTS(\n      DATEPART(yyyy, CreationDate),\n      DATEPART(mm, CreationDate),\n      1) AS Month,\n    OwnerUserId AS UserId\n  FROM Posts\n  WHERE\n    CreationDate < @TsNow\n    AND\n    Score > 0\n)\nSELECT\n  Month,\n  COUNT(*) AS Count\nFROM Raw\nGROUP BY Month\nORDER BY Month"
    },
    {
        "QuerySetId": 1192795,
        "Title": "Get a list of events related to a post",
        "Description": null,
        "QueryBody": "SELECT  u.DisplayName, v.CreationDate, vt.Name\nSELECT p.Title, v.CreationDate, vt.Name\nfrom Posts p \njoin Votes v on v.PostId = p.Id\n--join Users u on u.Id = v.UserId\njoin VoteTypes vt on vt.Id = v.VoteTypeId\nwhere p.Id = 13059",
        "CreationDate": "2020-02-06 15:14:07",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 1195354,
        "Title": "Top User by Tag and Country with Highlight",
        "Description": null,
        "QueryBody": "DECLARE  @user_id int = ##UserID##;\nDECLARE @limit int = ##Limit##;\nDECLARE @tag_id int = (select id from tags where tagname = '##TagName##');\n\n--select rank() over (order by score desc) \"Rank\", * from (\nselect top (@limit)\n  rank() over (order by sum(answers.score) desc) \"Rank\",\n  users.id \"User Link\"\n  ,sum(answers.score) as \"Score\"\n  ,(case when users.id = @user_id then '<<<<' else '' end)\nfrom users\njoin posts answers on (users.id = answers.owneruserid)\njoin posts parent on (answers.parentid = parent.id)\njoin posttags on (parent.id = posttags.postid)\nwhere posttags.tagid = @tag_id\n\n-- and LOWER(Location) LIKE LOWER('%##CountryName##%')\nand answers.posttypeid = 2  -- answers only\ngroup by users.id\norder by sum(answers.score) desc\n;",
        "CreationDate": "2020-05-12 20:39:31",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 1195507,
        "Title": "Questions entered in the review queue (in the date range)",
        "Description": null,
        "QueryBody": "SELECT  TOP(##num?100##)\nPostId AS [Post Link],\nurl = 'site:\/\/review\/'+\n+CASE ##type?2##\n   WHEN 1 THEN 'suggested-edits'\n   WHEN 2 THEN 'close'\n   WHEN 3 THEN 'low-quality-posts'\n   WHEN 4 THEN 'first-posts'\n   WHEN 5 THEN 'late-answers'\n   WHEN 6 THEN 'reopen'\n END+'\/'\n+CAST(Id AS varchar),\nCreationDate\n---since the table ReviewTasks contains only date, we don't get any information about hours\/minutes\nFROM ReviewTasks\nWHERE (ReviewTaskTypeId=##type##) AND (CreationDate >= '##Date1?2020-01-01##') AND (CreationDate <= '##Date2?2020-03-01##')\n---1 = Suggested Edit\n---2 = Close Votes\n---3 = Low Quality Posts\n---4 = First Post\n---5 = Late Answer\n---6 = Reopen Vote\nORDER BY Id DESC",
        "CreationDate": "2020-02-12 07:20:15",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 1195508,
        "Title": "Number of questions in a review queue per day",
        "Description": null,
        "QueryBody": "SELECT  TOP(##num?100##)\nCreationDate,\nCOUNT(PostId)\n---since the table ReviewTasks contains only date, we don't get any information about hours\/minutes\nFROM ReviewTasks\nWHERE (ReviewTaskTypeId=##type?2##) AND (CreationDate >= '##Date1?2020-01-01##') AND (CreationDate <= '##Date2?2020-03-01##')\n---1 = Suggested Edit\n---2 = Close Votes\n---3 = Low Quality Posts\n---4 = First Post\n---5 = Late Answer\n---6 = Reopen Vote\nGROUP BY CreationDate\nORDER BY CreationDate",
        "CreationDate": "2020-02-12 07:23:53",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 1195509,
        "Title": "Number of questions in a review queue per month",
        "Description": null,
        "QueryBody": "SELECT  TOP(##num?100##)\neomonth(CreationDate),\nCOUNT(PostId)\n---since the table ReviewTasks contains only date, we don't get any information about hours\/minutes\nFROM ReviewTasks\nWHERE (ReviewTaskTypeId=##type?2##)\n---1 = Suggested Edit\n---2 = Close Votes\n---3 = Low Quality Posts\n---4 = First Post\n---5 = Late Answer\n---6 = Reopen Vote\nGROUP BY eomonth(CreationDate)\nORDER BY eomonth(CreationDate)",
        "CreationDate": "2020-02-12 07:25:46",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 1195774,
        "Title": "Avid answerers of the site, monthly history",
        "Description": null,
        "QueryBody": "DECLARE  @TsNow DATETIME;\n\nSELECT @TsNow = DATEFROMPARTS(\n  DATEPART(yyyy, MAX(CreationDate)),\n  DATEPART(mm, MAX(CreationDate)),\n  1)\nFROM Posts;\n\nWITH Raw AS (\n  SELECT\n    DATEFROMPARTS(\n      DATEPART(yyyy, CreationDate),\n      DATEPART(mm, CreationDate),\n      1) AS Month,\n    OwnerUserId AS UserId,\n    CASE\n      WHEN COUNT(*) > ##MaxCountPerMonth:int?5## THEN ##MaxCountPerMonth##\n      ELSE COUNT(*)\n    END AS AnswerCount\n  FROM Posts\n  WHERE\n    PostTypeId = 2\n    AND\n    OwnerUserId > 0\n    AND\n    CreationDate < @TsNow\n  GROUP BY\n    DATEFROMPARTS(\n      DATEPART(yyyy, CreationDate),\n      DATEPART(mm, CreationDate),\n      1),\n    OwnerUserId\n)\nSELECT\n  Month,\n  AnswerCount,\n  COUNT(*) AS UserCount\nFROM Raw\nGROUP BY Month, AnswerCount\nORDER BY Month, AnswerCount",
        "CreationDate": "2020-02-12 23:13:05",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 1196230,
        "Title": "Posts containing definition of a given macro",
        "Description": null,
        "QueryBody": "DECLARE MathOperator{\\##text##}%')\n    OR (Body LIKE '%\\DECLAREMathOperator\\##text##{%')\n    OR (Body LIKE '%\\DECLAREMathOperator{##text##}%')\n    OR (Body LIKE '%\\DECLAREMathOperator*{\\##text##}%')\n    OR (Body LIKE '%\\DECLAREMathOperator*\\##text##{%')\n    OR (Body LIKE '%\\DECLAREMathOperator*{##text##}%')\n    OR (Body LIKE '%\\def{\\##text##}%')\n    OR (Body LIKE '%\\def\\##text##{%')\n    OR (Body LIKE '%\\def{##text##}%')\n    OR (Body LIKE '%\\let{\\##text##}%')\n    OR (Body LIKE '%\\let\\##text##{%')\n    OR (Body LIKE '%\\let{##text##}%'))",
        "CreationDate": "2020-02-13 20:16:44",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 1196231,
        "Title": "Posts containing definition of a given macro (only using newcommand)",
        "Description": null,
        "QueryBody": "DECLARE MathOperator, \\DECLAREMathOperator*",
        "CreationDate": "2020-02-14 01:36:23",
        "validated": false,
        "QueryBody_Original": "DECLARE MathOperator, \\DECLAREMathOperator*"
    },
    {
        "QuerySetId": 1196274,
        "Title": "These techs should you learn",
        "Description": "Estimates, which technologies will be most synergic to your most well known technologies in the next DayDelta days. Use your network-wide account id, not your site account id! The result is 10-base logarithmic!",
        "QueryBody": "DECLARE  @UserId INT;\n\nSELECT @UserId = Id FROM Users WHERE AccountId = ##AccountId:int##;\n\nWITH TagScores AS (\n  SELECT\n    PostTags.TagId,\n    COUNT(*) AS Count\n  FROM Posts, PostTags, Votes\n  WHERE\n    Posts.ParentId = PostTags.PostId\n    AND\n    Votes.PostId = Posts.Id\n    AND\n    Posts.OwnerUserId = @UserId\n    AND\n    Votes.VoteTypeId = 2\n  GROUP BY\n    PostTags.TagId\n)\nSELECT * FROM TagScores, Tags WHERE Tags.Id = TagScores.TagId",
        "CreationDate": "2020-02-13 22:52:29",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 1196607,
        "Title": "How many users does this database contain?",
        "Description": null,
        "QueryBody": "SELECT  Sum (Case When id<>'' Then 1 Else 0 End) 'Total Users' from Users",
        "CreationDate": "2020-02-17 13:05:03",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 1197677,
        "Title": "Number of unique users closing questions",
        "Description": null,
        "QueryBody": "DECLARE  @sdate nvarchar(10) = ##sd:string##\nDECLARE @edate nvarchar(10) = ##ed:string##\nDECLARE @startdate date = cast(@sdate as date)\nDECLARE @enddate date = cast(@edate as date)\n\nSELECT\n  ph.PostId, ph.CreationDate, voter_id INTO #voter_ids\nFROM PostHistory ph\nCROSS APPLY OPENJSON (ph.Text)\n  WITH (\n    voters NVARCHAR(MAX) '$.Voters' AS JSON\n  )\n  OUTER APPLY OPENJSON(voters)\n  WITH (voter_id NVARCHAR(20) '$.Id')\nWHERE ph.PostHistoryTypeId = 10 -- Close \n  AND ph.CreationDate >= @startdate AND ph.CreationDate < @enddate\n\nSELECT \n  COUNT(DISTINCT voter_id) [Num Voters] \nFROM\n  #voter_ids\nWHERE\n  voter_id != -1",
        "CreationDate": "2020-02-17 22:11:48",
        "validated": false,
        "QueryBody_Original": "DECLARE  @sdate nvarchar(10) = ##sd:string##\nDECLARE @edate nvarchar(10) = ##ed:string##\nDECLARE @startdate date = cast(@sdate as date)\nDECLARE @enddate date = cast(@edate as date)\n\nSELECT\n  ph.PostId, ph.CreationDate, voter_id INTO #voter_ids\nFROM PostHistory ph\nCROSS APPLY OPENJSON (ph.Text)\n  WITH (\n    voters NVARCHAR(MAX) '$.Voters' AS JSON\n  )\n  OUTER APPLY OPENJSON(voters)\n  WITH (voter_id NVARCHAR(20) '$.Id')\nWHERE ph.PostHistoryTypeId = 10 -- Close \n  AND ph.CreationDate >= @startdate AND ph.CreationDate < @enddate\n\nSELECT \n  COUNT(DISTINCT voter_id) [Num Voters] \nFROM\n  #voter_ids\nWHERE\n  voter_id != -1"
    },
    {
        "QuerySetId": 1199167,
        "Title": "ASCII art is ready for take-off",
        "Description": null,
        "QueryBody": "DECLARE  @ INT = 6\n\nDECLARE @n INT=0,@o varchar(max)=''z:SELECT @o+=space(@-@n)+'\/'+replicate(' ',@n*2)+' \\ \n',@n+=1IF @n<@ GOTO z\nPRINT space(@)+' |\n'+@o+stuff(replicate('*'+replicate('-',@*2+1)+'*\n',2),5+2*@,0,replicate('|'+replicate(' o',@)+' |\n',2*@))+' \/'+replicate('_',@*2-1)+'\\'",
        "CreationDate": "2020-10-16 18:57:55",
        "validated": false,
        "QueryBody_Original": "DECLARE  @ INT = 6\n\nDECLARE @n INT=0,@o varchar(max)=''z:SELECT @o+=space(@-@n)+'\/'+replicate(' ',@n*2)+' \\ \n',@n+=1IF @n<@ GOTO z\nPRINT space(@)+' |\n'+@o+stuff(replicate('*'+replicate('-',@*2+1)+'*\n',2),5+2*@,0,replicate('|'+replicate(' o',@)+' |\n',2*@))+' \/'+replicate('_',@*2-1)+'\\'"
    },
    {
        "QuerySetId": 1199249,
        "Title": "Another possible suggestable tag synonyms by you",
        "Description": null,
        "QueryBody": "DECLARE  @T BIGINT;\n\nSELECT @T = COUNT(*) FROM Posts WHERE PostTypeId = 1;\n\nWITH AB AS (\n  SELECT\n    A.TagId AS TagIdA,\n    B.TagId AS TagIdB,\n    CAST(COUNT(*) AS FLOAT) AS C\n  FROM PostTags A, PostTags B\n  WHERE\n    A.PostId = B.PostId\n    AND\n    A.TagId <> B.TagId\n  GROUP BY A.TagId, B.TagId\n),\nRaw AS (\n  SELECT\n    Id,\n    TagName,\n    CAST(Count AS FLOAT) AS C\n  FROM Tags\n  WHERE\n    Count > 0\n    AND\n    Count < @T\n)\nSELECT TOP 100\n  A.TagName,\n  A.C AS CA,\n  B.TagName,\n  B.C AS CB,\n  AB.C AS CAB,\n  --(AB.P-A.P*B.P)\/SQRT(A.P*(1-A.P)*B.P*(1-B.P)) AS Corr\n  1.0 * (AB.C * @T - 1.0*A.C*B.C) \/\n  SQRT(A.C*(@T-A.C)*B.C*(@T-B.C)) AS Corr\nFROM Raw A, Raw B, AB\nWHERE\n  A.Id = AB.TagIdA\n  AND\n  B.Id = AB.TagIdB\n  AND\n  A.C > 1000\n  AND\n  B.C > 1000\nORDER BY Corr DESC",
        "CreationDate": "2020-02-21 00:02:22",
        "validated": false,
        "QueryBody_Original": "DECLARE  @T BIGINT;\n\nSELECT @T = COUNT(*) FROM Posts WHERE PostTypeId = 1;\n\nWITH AB AS (\n  SELECT\n    A.TagId AS TagIdA,\n    B.TagId AS TagIdB,\n    CAST(COUNT(*) AS FLOAT) AS C\n  FROM PostTags A, PostTags B\n  WHERE\n    A.PostId = B.PostId\n    AND\n    A.TagId <> B.TagId\n  GROUP BY A.TagId, B.TagId\n),\nRaw AS (\n  SELECT\n    Id,\n    TagName,\n    CAST(Count AS FLOAT) AS C\n  FROM Tags\n  WHERE\n    Count > 0\n    AND\n    Count < @T\n)\nSELECT TOP 100\n  A.TagName,\n  A.C AS CA,\n  B.TagName,\n  B.C AS CB,\n  AB.C AS CAB,\n  --(AB.P-A.P*B.P)\/SQRT(A.P*(1-A.P)*B.P*(1-B.P)) AS Corr\n  1.0 * (AB.C * @T - 1.0*A.C*B.C) \/\n  SQRT(A.C*(@T-A.C)*B.C*(@T-B.C)) AS Corr\nFROM Raw A, Raw B, AB\nWHERE\n  A.Id = AB.TagIdA\n  AND\n  B.Id = AB.TagIdB\n  AND\n  A.C > 1000\n  AND\n  B.C > 1000\nORDER BY Corr DESC"
    },
    {
        "QuerySetId": 1200535,
        "Title": "By Date Number of Users who posted and who did not, reputation",
        "Description": null,
        "QueryBody": "SELECT  'No' as [Category], convert(date, u.CreationDate) as [Creation Date], count(u.Id) as [count], avg(cast(u.Reputation as float)) as [Average Reputation]\nfrom Posts p right join Users u on p.OwnerUserId = u.Id \nwhere p.ClosedDate is null and p.DeletionDate is null and p.OwnerUserId is null \ngroup by convert(date, u.CreationDate)\n)\nUNION\n(SELECT 'Yes' as [Category], convert(date, u.CreationDate) as [Creation Date], count(u.Id) as [count], avg(cast(u.Reputation as float)) as [Average Reputation]\nfrom Posts p inner join Users u on p.OwnerUserId = u.Id \nwhere p.ClosedDate is null and p.DeletionDate is null  \ngroup by convert(date, u.CreationDate)\n)",
        "CreationDate": "2020-08-17 00:46:56",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 1200937,
        "Title": "How many users does the database contain",
        "Description": null,
        "QueryBody": "SELECT  COMMENTS.UserId, COMMENTS.PostId, POST.PostId, USERS.UserId\n--FROM ((COMMENTS\n--INNER JOIN COMMENTS ON COMMENTS.UserId = USERS.UserId)\n--INNER JOIN POSTS ON Orders.ShipperID = Shippers.ShipperID);\n\n--SELECT * FROM COMMENTS\n\nSELECT Id FROM USERS\nWHERE DisplayName = 'Mat Mannion'",
        "CreationDate": "2020-02-24 13:37:52",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 1203015,
        "Title": "How many SO answers per month?",
        "Description": null,
        "QueryBody": "SELECT   \n  u.DisplayName,\n  MONTH(p.CreationDate)+YEAR(p.CreationDate)*100 as [MDATE], \n  count(u.DisplayName) as [Num]\nfrom \n  posts p,users u\nwhere \n  p.PostTypeId=2 \nand p.owneruserid in (##SOid##)\nand p.owneruserid=u.Id\nGROUP BY MONTH(p.CreationDate)+YEAR(p.CreationDate)*100, u.DisplayName\norder by Num desc\n-- SOid: StackOverflow ID",
        "CreationDate": "2020-02-26 20:31:35",
        "validated": false,
        "QueryBody_Original": "SELECT   \n  u.DisplayName,\n  MONTH(p.CreationDate)+YEAR(p.CreationDate)*100 as [MDATE], \n  count(u.DisplayName) as [Num]\nfrom \n  posts p,users u\nwhere \n  p.PostTypeId=2 \nand p.owneruserid in (##SOid##)\nand p.owneruserid=u.Id\nGROUP BY MONTH(p.CreationDate)+YEAR(p.CreationDate)*100, u.DisplayName\norder by Num desc\n-- SOid: StackOverflow ID"
    },
    {
        "QuerySetId": 1203016,
        "Title": "How many answers per month?",
        "Description": null,
        "QueryBody": "SELECT   \n  u.DisplayName,\n  MONTH(p.CreationDate)+YEAR(p.CreationDate)*100 as [MDATE], \n  count(u.DisplayName) as [Num]\nfrom \n  posts p,users u\nwhere \n  p.PostTypeId=2 \nand p.owneruserid in (##uid##)\nand p.owneruserid=u.Id\nGROUP BY MONTH(p.CreationDate)+YEAR(p.CreationDate)*100, u.DisplayName\norder by Num desc\n-- uid: User ID",
        "CreationDate": "2020-02-26 21:35:22",
        "validated": false,
        "QueryBody_Original": "SELECT   \n  u.DisplayName,\n  MONTH(p.CreationDate)+YEAR(p.CreationDate)*100 as [MDATE], \n  count(u.DisplayName) as [Num]\nfrom \n  posts p,users u\nwhere \n  p.PostTypeId=2 \nand p.owneruserid in (##uid##)\nand p.owneruserid=u.Id\nGROUP BY MONTH(p.CreationDate)+YEAR(p.CreationDate)*100, u.DisplayName\norder by Num desc\n-- uid: User ID"
    },
    {
        "QuerySetId": 1203209,
        "Title": "How many upvoted, accepted, u+a, (acc=1,up=2,acc+up=3)",
        "Description": null,
        "QueryBody": "SELECT   \n  u.DisplayName,\n  u.Id,\n  p.PostTypeId,\n  p.OwnerUserId,\n  p.AcceptedAnswerId,\n  p.Score,\n  p.ParentId,\n  p.Body,\n  p.Title,\n  aa.PostTypeId,\n  aa.AcceptedAnswerId,\n  aa.OwnerUserId,\n  aa.Title,\n  aa.Body,\n  aa.Score,\n  iif(p.score>0 ,2,0)+iif(aa.AcceptedAnswerId is not null,1,0) as [uu], \n  case \n    when aa.AcceptedAnswerId>0 and p.Score>0 then 3 \n    when aa.AcceptedAnswerId is null and p.Score>0 then 2\n    when aa.AcceptedAnswerId>0 and p.Score=0 then 1\n    else 0 \n  end as [AU]\nfrom \n  posts p,users u, posts aa\nwhere \n  p.PostTypeId=2 \nand p.owneruserid in (##SOid##)\nand p.owneruserid=u.Id\nand p.parentid=aa.id\norder by p.score desc\n-- SOid: StackOverflow ID",
        "CreationDate": "2020-02-26 21:29:24",
        "validated": false,
        "QueryBody_Original": "SELECT   \n  u.DisplayName,\n  u.Id,\n  p.PostTypeId,\n  p.OwnerUserId,\n  p.AcceptedAnswerId,\n  p.Score,\n  p.ParentId,\n  p.Body,\n  p.Title,\n  aa.PostTypeId,\n  aa.AcceptedAnswerId,\n  aa.OwnerUserId,\n  aa.Title,\n  aa.Body,\n  aa.Score,\n  iif(p.score>0 ,2,0)+iif(aa.AcceptedAnswerId is not null,1,0) as [uu], \n  case \n    when aa.AcceptedAnswerId>0 and p.Score>0 then 3 \n    when aa.AcceptedAnswerId is null and p.Score>0 then 2\n    when aa.AcceptedAnswerId>0 and p.Score=0 then 1\n    else 0 \n  end as [AU]\nfrom \n  posts p,users u, posts aa\nwhere \n  p.PostTypeId=2 \nand p.owneruserid in (##SOid##)\nand p.owneruserid=u.Id\nand p.parentid=aa.id\norder by p.score desc\n-- SOid: StackOverflow ID"
    },
    {
        "QuerySetId": 1203522,
        "Title": "See tags of my answers",
        "Description": null,
        "QueryBody": "DECLARE  @UserId int = 819887 -- ##UserId##\n\nSELECT --TOP 20 \n    TagName,\n    COUNT(*) AS UpVotes \nFROM Tags\n    INNER JOIN PostTags ON PostTags.TagId = Tags.id\n    INNER JOIN Posts ON Posts.ParentId = PostTags.PostId\n    INNER JOIN Votes ON Votes.PostId = Posts.Id and VoteTypeId = 2\nWHERE \n    Posts.OwnerUserId = @UserId\nGROUP BY TagName \nORDER BY UpVotes DESC",
        "CreationDate": "2020-02-27 03:25:30",
        "validated": false,
        "QueryBody_Original": "DECLARE  @UserId int = 819887 -- ##UserId##\n\nSELECT --TOP 20 \n    TagName,\n    COUNT(*) AS UpVotes \nFROM Tags\n    INNER JOIN PostTags ON PostTags.TagId = Tags.id\n    INNER JOIN Posts ON Posts.ParentId = PostTags.PostId\n    INNER JOIN Votes ON Votes.PostId = Posts.Id and VoteTypeId = 2\nWHERE \n    Posts.OwnerUserId = @UserId\nGROUP BY TagName \nORDER BY UpVotes DESC"
    },
    {
        "QuerySetId": 1204679,
        "Title": "Second order approximation of the ups to the most upvoted answer by tag",
        "Description": null,
        "QueryBody": "WITH  Raw AS (\n  SELECT Posts.Id AS AId, MIN(Posts.ParentId) AS QId, COUNT(*) AS Ups\n  FROM Posts, Votes\n  WHERE\n    Votes.VoteTypeId = 2\n    AND\n    Votes.PostId = Posts.Id\n  GROUP BY Posts.Id\n),\nRaw2 AS (\n  SELECT\n    QId,\n    IIF(MAX(Ups)>##MaxUps:int?10##, ##MaxUps##, MAX(Ups)) AS Ups\n  FROM Raw\n  GROUP BY QId\n),\nQTagNo AS (\n  SELECT PostId AS QId, COUNT(*) AS Count\n  FROM PostTags\n  GROUP BY PostId\n),\nRaw3 AS (\n  SELECT\n    PostTags.TagId,\n    1.0 * SUM(1.0 * Raw2.Ups \/ QTagNo.Count) \/ COUNT(*) AS TagLoved\n  FROM Raw2, PostTags, QTagNo\n  WHERE\n    Raw2.QId = PostTags.PostId\n    AND\n    Raw2.QId = QTagNo.QId\n  GROUP BY TagId\n)\nSELECT TOP 100\n  Tags.TagName, Raw3.TagLoved\nFROM Raw3, Tags\nWHERE\n  Raw3.TagId = Tags.Id\nORDER BY Raw3.TagLoved DESC, Tags.Id",
        "CreationDate": "2020-03-03 21:32:22",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 1205334,
        "Title": "Total question views by user reputation",
        "Description": null,
        "QueryBody": "DECLARE  @MaxReputation INT;\nDECLARE @TotalViews BIGINT;\nSELECT @MaxReputation = MAX(Reputation) FROM Users;\nSELECT @TotalViews = SUM(CAST(ViewCount AS BIGINT))\n  FROM Posts WHERE PostTypeId = 1;\n\nWITH ViewTotals AS (SELECT u.Reputation,\n  SUM(CAST(p.ViewCount AS BIGINT)) AS ViewCount\n  FROM Posts AS p\n  INNER JOIN Users AS u ON p.OwnerUserId = u.Id\n  WHERE p.PostTypeId = 1\n  GROUP BY u.Reputation)\nSELECT v1.Reputation * 100.0 \/ @MaxReputation,\n  SUM(v2.ViewCount) * 100.0 \/ @TotalViews\n  FROM ViewTotals AS v1\n  INNER JOIN ViewTotals AS v2\n    ON v1.Reputation >= v2.Reputation\n  GROUP BY v1.Reputation\n  ORDER BY v1.Reputation",
        "CreationDate": "2020-03-04 12:56:38",
        "validated": false,
        "QueryBody_Original": "DECLARE  @MaxReputation INT;\nDECLARE @TotalViews BIGINT;\nSELECT @MaxReputation = MAX(Reputation) FROM Users;\nSELECT @TotalViews = SUM(CAST(ViewCount AS BIGINT))\n  FROM Posts WHERE PostTypeId = 1;\n\nWITH ViewTotals AS (SELECT u.Reputation,\n  SUM(CAST(p.ViewCount AS BIGINT)) AS ViewCount\n  FROM Posts AS p\n  INNER JOIN Users AS u ON p.OwnerUserId = u.Id\n  WHERE p.PostTypeId = 1\n  GROUP BY u.Reputation)\nSELECT v1.Reputation * 100.0 \/ @MaxReputation,\n  SUM(v2.ViewCount) * 100.0 \/ @TotalViews\n  FROM ViewTotals AS v1\n  INNER JOIN ViewTotals AS v2\n    ON v1.Reputation >= v2.Reputation\n  GROUP BY v1.Reputation\n  ORDER BY v1.Reputation"
    },
    {
        "QuerySetId": 1205338,
        "Title": " Total question views by user reputation (logarithmic)",
        "Description": null,
        "QueryBody": "DECLARE  @TotalViews BIGINT;\nSELECT @TotalViews = SUM(CAST(ViewCount AS BIGINT))\n  FROM Posts WHERE PostTypeId = 1;\n\nWITH ViewTotals AS (SELECT u.Reputation,\n  SUM(CAST(p.ViewCount AS BIGINT)) AS ViewCount\n  FROM Posts AS p\n  INNER JOIN Users AS u ON p.OwnerUserId = u.Id\n  WHERE p.PostTypeId = 1\n  GROUP BY u.Reputation)\nSELECT LOG(v1.Reputation, 10),\n  SUM(v2.ViewCount) * 100.0 \/ @TotalViews\n  FROM ViewTotals AS v1\n  INNER JOIN ViewTotals AS v2\n    ON v1.Reputation >= v2.Reputation\n  GROUP BY v1.Reputation\n  ORDER BY v1.Reputation",
        "CreationDate": "2020-03-04 13:03:43",
        "validated": false,
        "QueryBody_Original": "DECLARE  @TotalViews BIGINT;\nSELECT @TotalViews = SUM(CAST(ViewCount AS BIGINT))\n  FROM Posts WHERE PostTypeId = 1;\n\nWITH ViewTotals AS (SELECT u.Reputation,\n  SUM(CAST(p.ViewCount AS BIGINT)) AS ViewCount\n  FROM Posts AS p\n  INNER JOIN Users AS u ON p.OwnerUserId = u.Id\n  WHERE p.PostTypeId = 1\n  GROUP BY u.Reputation)\nSELECT LOG(v1.Reputation, 10),\n  SUM(v2.ViewCount) * 100.0 \/ @TotalViews\n  FROM ViewTotals AS v1\n  INNER JOIN ViewTotals AS v2\n    ON v1.Reputation >= v2.Reputation\n  GROUP BY v1.Reputation\n  ORDER BY v1.Reputation"
    },
    {
        "QuerySetId": 1206178,
        "Title": "Top users by location & year",
        "Description": "List of users in 'Location', 'CreationDate' by reputation score. Forked from an original query by BoltClock.",
        "QueryBody": "SELECT \n    ROW_NUMBER() OVER(ORDER BY Reputation DESC) AS [#], \n    Id AS [User Link],\n    Location,\n    Reputation,\n    CreationDate\nFROM\n    Users\nWHERE\n    LOWER(Location) LIKE LOWER('%##Location##%')\n    AND CreationDate > DATEADD(YEAR, -CONVERT(INT, '##MemberFor##'), GetDate())\nORDER BY\n    Reputation DESC;",
        "CreationDate": "2020-03-06 11:48:00",
        "validated": false,
        "QueryBody_Original": "SELECT \n    ROW_NUMBER() OVER(ORDER BY Reputation DESC) AS [#], \n    Id AS [User Link],\n    Location,\n    Reputation,\n    CreationDate\nFROM\n    Users\nWHERE\n    LOWER(Location) LIKE LOWER('%##Location##%')\n    AND CreationDate > DATEADD(YEAR, -CONVERT(INT, '##MemberFor##'), GetDate())\nORDER BY\n    Reputation DESC;"
    },
    {
        "QuerySetId": 1206568,
        "Title": "Response Time Median To Question With Tag ",
        "Description": null,
        "QueryBody": "DECLARE  @limit int = 100;\nDECLARE @tag_name nvarchar(35) = 'snowflake-datawarehouse';\nDECLARE @tag_id int = (select id from tags where tagname = @tag_name);\nSELECT\nrank() over (order by Count(*) desc) \"Rank\",\n  users.id \"User Link\",\n    Count(*) AS AnswerCount1,\n    SUM(CommentCount) \n    \nFROM \n    Posts\n    join users on (users.id = Posts.OwnerUserid)\n    \nWHERE \nusers.id in (\n'12380703', \n'1628812',\n'4889096',\n'7334893', \n'6135306',\n'4175981', \n'6061924', \n'3441340', \n'11497902',\n'12166497',\n'12384457', \n'11831365',\n'10387435',\n'3805500',\n'2117872',\n'12607126',\n'15313872',\n'15313872', \n'10229',\n'8586770', \n'12938021')\nand Posts.CreationDate >= '2020-01-10'\nand PostTypeId = 2 --answers only\nGROUP BY \n    users.id\nORDER BY \n    AnswerCount1 DESC",
        "CreationDate": "2020-03-07 05:15:33",
        "validated": false,
        "QueryBody_Original": "DECLARE  @limit int = 100;\nDECLARE @tag_name nvarchar(35) = 'snowflake-datawarehouse';\nDECLARE @tag_id int = (select id from tags where tagname = @tag_name);\nSELECT\nrank() over (order by Count(*) desc) \"Rank\",\n  users.id \"User Link\",\n    Count(*) AS AnswerCount1,\n    SUM(CommentCount) \n    \nFROM \n    Posts\n    join users on (users.id = Posts.OwnerUserid)\n    \nWHERE \nusers.id in (\n'12380703', \n'1628812',\n'4889096',\n'7334893', \n'6135306',\n'4175981', \n'6061924', \n'3441340', \n'11497902',\n'12166497',\n'12384457', \n'11831365',\n'10387435',\n'3805500',\n'2117872',\n'12607126',\n'15313872',\n'15313872', \n'10229',\n'8586770', \n'12938021')\nand Posts.CreationDate >= '2020-01-10'\nand PostTypeId = 2 --answers only\nGROUP BY \n    users.id\nORDER BY \n    AnswerCount1 DESC"
    },
    {
        "QuerySetId": 1206641,
        "Title": "simple sample for STRING_SPLIT function comma-separated",
        "Description": null,
        "QueryBody": "DECLARE  @tags NVARCHAR(400) = 'clothing,road,,touring,bike'  \n\nSELECT value  \nFROM STRING_SPLIT(@tags, ',')",
        "CreationDate": "2020-03-07 18:00:49",
        "validated": false,
        "QueryBody_Original": "DECLARE  @tags NVARCHAR(400) = 'clothing,road,,touring,bike'  \n\nSELECT value  \nFROM STRING_SPLIT(@tags, ',')"
    },
    {
        "QuerySetId": 1206654,
        "Title": "How many users that has created exact one post?",
        "Description": null,
        "QueryBody": "DECLARE  @i int;\n\nSELECT @i = (SELECT count(*)\nfrom #tb_postcount \nwhere post_count =1)\n\nprint @i",
        "CreationDate": "2020-03-08 07:27:38",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 1206770,
        "Title": "Posts containing the given macro with no macro definition (case insensitive)",
        "Description": null,
        "QueryBody": "DECLARE MathOperator%') \n    AND NOT(Body LIKE '%\\def%') \n  ORDER BY CreationDate DESC",
        "CreationDate": "2020-03-07 17:09:25",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 1207151,
        "Title": "How many posts that high-output users created?",
        "Description": null,
        "QueryBody": "DECLARE  @i int;\n\nSELECT @i = (SELECT sum(post_count)\nfrom #tb_postcount \nwhere post_count >1)\n\nprint @i",
        "CreationDate": "2020-03-08 07:46:43",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 1207157,
        "Title": "How many users that has created more than one post?",
        "Description": null,
        "QueryBody": "DECLARE  @i int;\n\nSELECT @i = (SELECT COUNT(OwnerUserId)\nfrom #tb_postcount \nwhere post_count >1)\n\nprint @i",
        "CreationDate": "2020-03-08 07:47:42",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 1207994,
        "Title": "simple example for CROSS APPLY",
        "Description": null,
        "QueryBody": "WITH  and WITHout the last 2 lines of code\n\nselect *       \nfrom         \n(        \n values        \n ('Cesc F\u00e0bregas', cast('4 May 1987' as date), cast('28 October 2003' as date))        \n ,('Theo Walcott', cast('16 March 1989' as date), cast('19 August 2006' as date))        \n ,('Jack Wilshere', cast('1 January 1992' as date), cast('13 September 2008' as date))        \n ,('Thierry Henry', cast('17 August 1977' as date), cast('7 August 1999' as date))        \n) p (Name, DoB, Debut)        \nCROSS APPLY         \n (select p.DoB as startdate, p.Debut as enddate) as working",
        "CreationDate": "2020-03-12 09:00:17",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 1208265,
        "Title": "Tag answer vote distribution by day of month",
        "Description": "It is normalized by that not all months have 31, 30, 29th days.",
        "QueryBody": "DECLARE  @TagId INT;\n\nSELECT @TagId = Id FROM Tags WHERE TagName = ##TagName:string##;\n\nWITH Raw AS (\n  SELECT\n    DAY(Votes.CreationDate) AS DoM,\n    COUNT(*) AS Count\n  FROM Posts, Votes, PostTags\n  WHERE\n    Votes.PostId = Posts.Id\n    AND\n    Posts.ParentId = PostTags.PostId\n    AND\n    Votes.VoteTypeId BETWEEN 1 AND 2\n    AND\n    PostTags.TagId = @TagId\n  GROUP BY DAY(Votes.CreationDate)\n),\nRaw2 AS (\n  SELECT\n    DoM,\n    CASE\n      WHEN DoM = 31 THEN 12.0\/7\n      WHEN DoM = 30 THEN 12.0\/11\n      WHEN DoM = 29 THEN 12.0\/11.25\n      ELSE 1\n    END * Count AS Count\n  FROM Raw\n),\nRaw3 AS (\n  SELECT SUM(Count) AS SumCount FROM Raw2\n)\nSELECT\n  Raw2.DoM,\n  'Pct',\n  100.0 * Raw2.Count \/ Raw3.SumCount AS Pct\nFROM Raw2, Raw3\n\nUNION ALL\n\nSELECT\n  1,\n  '',\n  0\nORDER BY DoM",
        "CreationDate": "2020-03-09 18:38:24",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 1208841,
        "Title": "Top % Users for specified tag",
        "Description": "\"all time\" . . . Note that I use \"vba>\" for tag VBA to include tags like [excel-vba] but exclude tags like [navbar]",
        "QueryBody": "DECLARE  @usercount int = (\nselect count(uid) from (\nselect distinct a.owneruserid uid\nfrom posts q left join posts a on q.id=a.parentid\nwhere q.tags like '%vba>%'\nand q.posttypeid=1 and a.posttypeid=2) z\n);\n\nselect\n  rank() over ( order by sum(a.score) desc) as rank,\n  @usercount as usercount,\n  format(1 - (rank() over ( order by sum(a.score) DESC)*1.0 \/ @usercount),'0.000%') as toppct,\n  a.owneruserid as [User Link],\n  sum(a.score) as score,\n  sum(q.viewcount) as views,\n  sum(1) as cnt\nfrom posts q left join posts a on q.id=a.parentid\nwhere q.tags like '%' + ##tagname:string?vba>## + '%'\nand a.posttypeid=2\nand q.posttypeid=1\ngroup by a.owneruserid\norder by sum(a.score) desc\n\n-- tag: Enter a partial or complete tag. Consider bracing in <tag>",
        "CreationDate": "2020-03-10 12:29:31",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 1208843,
        "Title": "users who joined on\/after the date you did, ranked by reputation",
        "Description": null,
        "QueryBody": "DECLARE  @joindate datetime = \n  (select creationdate from users where id = ##UserID##);\n\nselect \n  rank() over ( order by reputation desc) as Rank,\n  id as [User Link],\n  Reputation,\n  creationdate as [Dated Joined],\n  lastaccessdate as [Last Activity],\n  UpVotes,\n  DownVotes,\n  case when id = ##UserID## then '<------' else '' end as you\nfrom users\nwhere creationdate >= @joindate\norder by reputation desc\n\n\n\n-- Enter a numeric user id:",
        "CreationDate": "2020-03-10 12:43:46",
        "validated": false,
        "QueryBody_Original": "DECLARE  @joindate datetime = \n  (select creationdate from users where id = ##UserID##);\n\nselect \n  rank() over ( order by reputation desc) as Rank,\n  id as [User Link],\n  Reputation,\n  creationdate as [Dated Joined],\n  lastaccessdate as [Last Activity],\n  UpVotes,\n  DownVotes,\n  case when id = ##UserID## then '<------' else '' end as you\nfrom users\nwhere creationdate >= @joindate\norder by reputation desc\n\n\n\n-- Enter a numeric user id:"
    },
    {
        "QuerySetId": 1209144,
        "Title": "find questions with one and only one tag",
        "Description": null,
        "QueryBody": "SELECT  postid as [Post Link]\nfrom (\n  SELECT postid\n       , min(tagid) tagid\n  From Posttags pt \n  group by postid\n  having count(*) =1 \n)  stp\ninner join tags t on t.id = stp.tagid\nwhere t.tagname = ##Tag:string?java##",
        "CreationDate": "2020-03-11 02:54:44",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 1210053,
        "Title": "Closed posts where triage said Requires Editing",
        "Description": "Find the newest Triage reviews that were completed with \"Requires Editing\", and the post is closed.",
        "QueryBody": "SELECT  top ##MaxResults:int?500##\n  rt.Id [Triage Id],\n  ('https:\/\/stackoverflow.com\/review\/triage\/' + CAST(rt.Id as varchar)) [Triage Link],\n  rt.CreationDate,\n  p.Id [Post Link]\nfrom ReviewTasks rt\ninner join ReviewTaskResults rtr on rt.CompletedByReviewTaskId = rtr.Id\ninner join Posts p on rt.PostId = p.Id\nwhere rt.ReviewTaskTypeId = 10 and --triage\n      rt.ReviewTaskStateId = 2 and --completed\n      rtr.ReviewTaskResultTypeId = 20 and -- requires editing\n      p.ClosedDate is not null\norder by rt.CreationDate desc",
        "CreationDate": "2020-03-12 18:28:33",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 1210576,
        "Title": "filter questions start with specified keywords",
        "Description": null,
        "QueryBody": "DECLARE  @QKeywords nvarchar(max) = ##searchfor:string?Context##\n\nSELECT Id AS [Post Link], Body\n  FROM Posts\n  WHERE Body collate SQL_Latin1_General_CP1_CI_AS LIKE concat('<p>', @QKeywords, '%')\n    AND PostTypeId=1",
        "CreationDate": "2020-03-14 08:18:43",
        "validated": false,
        "QueryBody_Original": "DECLARE  @QKeywords nvarchar(max) = ##searchfor:string?Context##\n\nSELECT Id AS [Post Link], Body\n  FROM Posts\n  WHERE Body collate SQL_Latin1_General_CP1_CI_AS LIKE concat('<p>', @QKeywords, '%')\n    AND PostTypeId=1"
    },
    {
        "QuerySetId": 1210581,
        "Title": "simple example for Query Parameters ##",
        "Description": null,
        "QueryBody": "DECLARE  @QKeywords nvarchar(max) = ##searchfor:string?Context##\nprint concat('<p>', @QKeywords, '%')",
        "CreationDate": "2020-03-14 08:17:09",
        "validated": false,
        "QueryBody_Original": "DECLARE  @QKeywords nvarchar(max) = ##searchfor:string?Context##\nprint concat('<p>', @QKeywords, '%')"
    },
    {
        "QuerySetId": 1210852,
        "Title": "select users from Moldova, Romania with specific reputation and tags",
        "Description": null,
        "QueryBody": "DECLARE  @Location     varchar(255)  = 'Moldova';\n\nSELECT\n            u.Id,\n            u.DisplayName,\n            u.Reputation,\n            u.Location,\n            u.WebsiteUrl,\n            u.ProfileImageUrl,\n            SUM(p.AnswerCount) as [Answers],\n            p.Tags\nFROM        Users u \nFULL OUTER JOIN Posts p ON u.Id = p.OwnerUserId\n\nWHERE       (u.location LIKE ('%' + @Location + '%') \nOR          u.location LIKE ('%Romania%'))\nAND         u.Reputation > 223\nAND         p.AnswerCount > 0\nAND         p.Tags = 'java'\nGROUP BY             \n            u.Id,\n            u.DisplayName,\n            u.Reputation,\n            u.Location,\n            u.WebsiteUrl,\n            u.ProfileImageUrl,\n            p.Tags\nORDER BY    \n            u.DisplayName,\n            u.Reputation  DESC",
        "CreationDate": "2020-03-21 23:02:08",
        "validated": false,
        "QueryBody_Original": "DECLARE  @Location     varchar(255)  = 'Moldova';\n\nSELECT\n            u.Id,\n            u.DisplayName,\n            u.Reputation,\n            u.Location,\n            u.WebsiteUrl,\n            u.ProfileImageUrl,\n            SUM(p.AnswerCount) as [Answers],\n            p.Tags\nFROM        Users u \nFULL OUTER JOIN Posts p ON u.Id = p.OwnerUserId\n\nWHERE       (u.location LIKE ('%' + @Location + '%') \nOR          u.location LIKE ('%Romania%'))\nAND         u.Reputation > 223\nAND         p.AnswerCount > 0\nAND         p.Tags = 'java'\nGROUP BY             \n            u.Id,\n            u.DisplayName,\n            u.Reputation,\n            u.Location,\n            u.WebsiteUrl,\n            u.ProfileImageUrl,\n            p.Tags\nORDER BY    \n            u.DisplayName,\n            u.Reputation  DESC"
    },
    {
        "QuerySetId": 1212028,
        "Title": "select users from specific location ",
        "Description": null,
        "QueryBody": "DECLARE  @location AS nvarchar(max) = ##location:string##;\nSELECT u.Id [User Link], u.Reputation, u.Location\nFROM Users u\nWHERE lower(u.Location) LIKE lower('%' + @location + '%')\nORDER BY 'Reputation' DESC",
        "CreationDate": "2020-03-22 01:06:07",
        "validated": false,
        "QueryBody_Original": "DECLARE  @location AS nvarchar(max) = ##location:string##;\nSELECT u.Id [User Link], u.Reputation, u.Location\nFROM Users u\nWHERE lower(u.Location) LIKE lower('%' + @location + '%')\nORDER BY 'Reputation' DESC"
    },
    {
        "QuerySetId": 1212433,
        "Title": "Number of questions by week, and Score Quality",
        "Description": null,
        "QueryBody": "SELECT  ((DATEDIFF(DAY,##StartDate:string##,P.CreationDate)) \/ 7) + 1 AS WeekNo,\n       DATEADD(DAY,((DATEDIFF(DAY,##StartDate:string##,P.CreationDate)) \/ 7)*7,##StartDate:string##) AS WeekStarting,\n       COUNT(P.Id) AS QuestionsAsked,\n       COUNT(CASE WHEN Score > 0 THEN 1 END) AS PositiveScore,\n       COUNT(CASE WHEN Score = 0 THEN 1 END) AS NeutralScore,\n       COUNT(CASE WHEN Score < 0 THEN 1 END) AS NegativeScore,\n       COUNT(ClosedDate) AS Closed\nFROM dbo.Posts P\n     JOIN dbo.PostTypes PT ON P.PostTypeId = PT.Id\nWHERE P.CreationDate >= ##StartDate:string##\n  AND P.CreationDate < ##EndDate:string##\n  AND PT.[Name] = 'Question'\nGROUP BY ((DATEDIFF(DAY,'20181202',P.CreationDate)) \/ 7)\nORDER BY ((DATEDIFF(DAY,'20181202',P.CreationDate)) \/ 7);",
        "CreationDate": "2020-03-20 13:50:20",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 1212463,
        "Title": "non-deleted posts with most spam flags",
        "Description": null,
        "QueryBody": "SELECT  TOP ##topn:int?200## p.Id as [Post Link], p.Title as [Title], \n   MIN(p.Score) AS score, COUNT(*) AS flagcount\nFROM Posts p INNER JOIN Votes v ON p.Id=v.PostId\nWHERE v.VoteTypeId IN (4, 12) AND p.PostTypeId = 2 AND DeletionDate IS NULL\nGROUP BY p.Id, p.Title\nORDER BY flagcount DESC",
        "CreationDate": "2020-05-14 21:35:58",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 1212956,
        "Title": "Search users by tag and location",
        "Description": null,
        "QueryBody": "SELECT  u.id as [User Link]\n     , sum(score) as totalscore\nfrom posts p\ninner join posttags pt on pt.postid = p.id \n                       or pt.postid = p.parentid\ninner join tags t on t.id = pt.tagid\ninner join users u on u.id = p.owneruserid\nwhere tagname = ##tag1:string## collate SQL_Latin1_General_CP1_CI_AI \nand location like '%'+ ##location:string## + '%'  collate SQL_Latin1_General_CP1_CI_AI \ngroup by u.id\norder by sum(score) desc",
        "CreationDate": "2020-10-05 19:52:29",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 1213621,
        "Title": "Top AWS Answerers in past 6 months",
        "Description": null,
        "QueryBody": "SELECT  TOP 50\n  Answerer.DisplayName,\n  COUNT(Answer.Id) AS Answers\n\nFROM Posts as Question\nJOIN Posts as Answer ON Question.Id = Answer.ParentId\nJOIN Users as Answerer ON Answer.OwnerUserId = Answerer.Id\n\nWHERE Question.PostTypeId = 1 -- Question\n  AND Answer.PostTypeId = 2 -- Answer\n  AND Question.ClosedDate IS NULL -- Exclude Closed questions\n  AND (Question.Tags LIKE '%<amazon-%' OR Question.Tags LIKE '%<aws-%')\n  AND Question.CreationDate > DATEADD(m, -6, current_timestamp)\n\nGROUP BY Answerer.DisplayName\nORDER BY COUNT(Answer.Id) Desc",
        "CreationDate": "2020-06-09 07:22:57",
        "validated": false,
        "QueryBody_Original": "SELECT  TOP 50\n  Answerer.DisplayName,\n  COUNT(Answer.Id) AS Answers\n\nFROM Posts as Question\nJOIN Posts as Answer ON Question.Id = Answer.ParentId\nJOIN Users as Answerer ON Answer.OwnerUserId = Answerer.Id\n\nWHERE Question.PostTypeId = 1 -- Question\n  AND Answer.PostTypeId = 2 -- Answer\n  AND Question.ClosedDate IS NULL -- Exclude Closed questions\n  AND (Question.Tags LIKE '%<amazon-%' OR Question.Tags LIKE '%<aws-%')\n  AND Question.CreationDate > DATEADD(m, -6, current_timestamp)\n\nGROUP BY Answerer.DisplayName\nORDER BY COUNT(Answer.Id) Desc"
    },
    {
        "QuerySetId": 1214490,
        "Title": "Enter Unabridged user's posts (non-CW)",
        "Description": "Enter A way around paging for a user's questions. Non-paged question and answers list for a user (excluding CW questions)",
        "QueryBody": "SELECT \n    p.Id as [Post Link],\n    Score,\n    p.CreationDate as [Date\/Time]\nFROM Posts p\nWHERE p.OwnerUserId = ##UserId## \nORDER BY [Date\/Time] DESC",
        "CreationDate": "2020-03-26 17:21:26",
        "validated": false,
        "QueryBody_Original": "SELECT \n    p.Id as [Post Link],\n    Score,\n    p.CreationDate as [Date\/Time]\nFROM Posts p\nWHERE p.OwnerUserId = ##UserId## \nORDER BY [Date\/Time] DESC"
    },
    {
        "QuerySetId": 1214525,
        "Title": "First 1000 users of the site",
        "Description": null,
        "QueryBody": "SELECT  TOP ##TopN:int?1000##\n  Id AS [User Link],\n  *\nFROM Users\nORDER BY Id",
        "CreationDate": "2020-03-26 18:48:44",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 1216727,
        "Title": "SO Badges Work: Count Edits Per Day For Strunk and White Users",
        "Description": null,
        "QueryBody": "DECLARE  \n    @columns NVARCHAR(MAX) = '', \n    @sql     NVARCHAR(MAX) = '';\n\nWITH edits AS (\n  SELECT ph.Id, ph.CreationDate, ph.UserId, ph.PostId\n  FROM PostHistory ph\n  INNER JOIN Posts p \n  ON (p.Id = ph.PostId AND p.OwnerUserId != ph.UserId)\n  WHERE ph.CreationDate > '2017-01-01'\n), \ndates AS (\n  SELECT ('\"'+CONVERT(varchar(25), \n          CAST(CreationDate AS DATE), 102)+'\"') as CreationDate\n  FROM edits \n  GROUP BY CAST(CreationDate AS DATE)\n)\n, users_work AS (\nSELECT TOP 5 UserId,\n       CAST(CreationDate AS DATE) as date,\n       COUNT(Id) as num_edits\nFROM edits \nGROUP BY UserId, CAST(CreationDate AS DATE)\n)\n\nSELECT TOP 5 * FROM dates\n--SELECT TOP 5 * FROM users_work\n--PIVOT ( \n  --COUNT(Id) for actions_per_day IN (dates)\n--)",
        "CreationDate": "2020-04-01 12:46:49",
        "validated": false,
        "QueryBody_Original": "DECLARE  \n    @columns NVARCHAR(MAX) = '', \n    @sql     NVARCHAR(MAX) = '';\n\nWITH edits AS (\n  SELECT ph.Id, ph.CreationDate, ph.UserId, ph.PostId\n  FROM PostHistory ph\n  INNER JOIN Posts p \n  ON (p.Id = ph.PostId AND p.OwnerUserId != ph.UserId)\n  WHERE ph.CreationDate > '2017-01-01'\n), \ndates AS (\n  SELECT ('\"'+CONVERT(varchar(25), \n          CAST(CreationDate AS DATE), 102)+'\"') as CreationDate\n  FROM edits \n  GROUP BY CAST(CreationDate AS DATE)\n)\n, users_work AS (\nSELECT TOP 5 UserId,\n       CAST(CreationDate AS DATE) as date,\n       COUNT(Id) as num_edits\nFROM edits \nGROUP BY UserId, CAST(CreationDate AS DATE)\n)\n\nSELECT TOP 5 * FROM dates\n--SELECT TOP 5 * FROM users_work\n--PIVOT ( \n  --COUNT(Id) for actions_per_day IN (dates)\n--)"
    },
    {
        "QuerySetId": 1217635,
        "Title": "Titles of Answers for a given User for a given Month",
        "Description": null,
        "QueryBody": "SELECT \n  Answer.Score,\n  Question.Title\n\nFROM Posts as Question\nJOIN Posts as Answer ON Question.Id = Answer.ParentId\n\nWHERE Question.PostTypeId = 1 -- Question\n  AND Answer.PostTypeId = 2 -- Answer\n  AND Question.ClosedDate IS NULL -- Exclude Closed questions\n  AND (Question.Tags LIKE '%<amazon-%' OR Question.Tags LIKE '%<aws-%')\n  AND Answer.OwnerUserId = ##UserId##\n  AND CONVERT(nvarchar(7), Question.CreationDate, 23) = '##Month##'",
        "CreationDate": "2020-04-02 14:17:30",
        "validated": false,
        "QueryBody_Original": "SELECT \n  Answer.Score,\n  Question.Title\n\nFROM Posts as Question\nJOIN Posts as Answer ON Question.Id = Answer.ParentId\n\nWHERE Question.PostTypeId = 1 -- Question\n  AND Answer.PostTypeId = 2 -- Answer\n  AND Question.ClosedDate IS NULL -- Exclude Closed questions\n  AND (Question.Tags LIKE '%<amazon-%' OR Question.Tags LIKE '%<aws-%')\n  AND Answer.OwnerUserId = ##UserId##\n  AND CONVERT(nvarchar(7), Question.CreationDate, 23) = '##Month##'"
    },
    {
        "QuerySetId": 1219137,
        "Title": "HNQ questions which were not removed by mods",
        "Description": null,
        "QueryBody": "SELECT  TOP(##num?500##) p.Id AS [Post Link],\n  concat('site:\/\/posts\/',\n          p.Id,\n          '\/revisions'\n          ) [Revisions Link],\n  p.OwnerUserId AS [User Link], p.Score, p.CreationDate, p.ViewCount, p.AnswerCount, p. Tags\nFROM PostHistory ph INNER JOIN Posts p ON ph.PostId=p.Id\nWHERE ph.PostHistoryTypeId=52\n  AND p.Id NOT IN(SELECT Posts.Id FROM PostHistory INNER JOIN Posts ON PostHistory.PostId=Posts.Id  AND PostHistory.PostHistoryTypeId=53 AND Posts.PostTypeId=1)\nORDER BY p.Id DESC",
        "CreationDate": "2020-04-05 17:02:55",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 1219166,
        "Title": "Downvote % to total votes",
        "Description": null,
        "QueryBody": "DECLARE  @UserId int = ##UserId##\n\nSelect UpVotes, DownVotes, round((CAST(DownVotes as float)\/(DownVotes+UpVotes))*100, 2) as 'DownVote %'\nFROM Users\nwhere Id=@UserId;",
        "CreationDate": "2020-04-05 20:25:21",
        "validated": false,
        "QueryBody_Original": "DECLARE  @UserId int = ##UserId##\n\nSelect UpVotes, DownVotes, round((CAST(DownVotes as float)\/(DownVotes+UpVotes))*100, 2) as 'DownVote %'\nFROM Users\nwhere Id=@UserId;"
    },
    {
        "QuerySetId": 1219570,
        "Title": "HNQ-ed, de-HNQ-ed and community bumped questions since the last week",
        "Description": null,
        "QueryBody": "DECLARE  @Since DATETIME;\n\nSELECT @Since = DATEADD(day, -7, MAX(CreationDate))\nFROM Posts;\n\nSELECT\n  PostHistory.PostId AS [Post Link],\n  PostHistoryTypes.Name,\n  PostHistory.CreationDate\nFROM PostHistory, PostHistoryTypes\nWHERE\n  PostHistory.PostHistoryTypeId >= 50\n  AND\n  PostHistoryTypes.Id = PostHistory.PostHistoryTypeId\n  AND\n  PostHistory.CreationDate > @Since\nORDER BY PostHistory.Id DESC;",
        "CreationDate": "2020-04-06 16:37:53",
        "validated": false,
        "QueryBody_Original": "DECLARE  @Since DATETIME;\n\nSELECT @Since = DATEADD(day, -7, MAX(CreationDate))\nFROM Posts;\n\nSELECT\n  PostHistory.PostId AS [Post Link],\n  PostHistoryTypes.Name,\n  PostHistory.CreationDate\nFROM PostHistory, PostHistoryTypes\nWHERE\n  PostHistory.PostHistoryTypeId >= 50\n  AND\n  PostHistoryTypes.Id = PostHistory.PostHistoryTypeId\n  AND\n  PostHistory.CreationDate > @Since\nORDER BY PostHistory.Id DESC;"
    },
    {
        "QuerySetId": 1220348,
        "Title": "Most viewed questions in tag, and only that tag",
        "Description": null,
        "QueryBody": "DECLARE  @Tag VARCHAR(25) = '##Tag##'\n\nSELECT DISTINCT TOP 250\nQuestions.Id \nAS [Post Link],\nQuestions.Tags,\nQuestions.AnswerCount, \nQuestions.ViewCount\n\nFROM Posts AS Questions\n    INNER JOIN PostTags \n    ON PostTags.PostId = Questions.Id\n    INNER JOIN Tags\n    ON Tags.Id = PostTags.TagId\n    \nWHERE REPLACE(SUBSTRING(Tags,0,CHARINDEX('>',Tags, 0)),'<','') = @Tag\n\nORDER BY ViewCount DESC",
        "CreationDate": "2020-04-07 02:05:04",
        "validated": false,
        "QueryBody_Original": "DECLARE  @Tag VARCHAR(25) = '##Tag##'\n\nSELECT DISTINCT TOP 250\nQuestions.Id \nAS [Post Link],\nQuestions.Tags,\nQuestions.AnswerCount, \nQuestions.ViewCount\n\nFROM Posts AS Questions\n    INNER JOIN PostTags \n    ON PostTags.PostId = Questions.Id\n    INNER JOIN Tags\n    ON Tags.Id = PostTags.TagId\n    \nWHERE REPLACE(SUBSTRING(Tags,0,CHARINDEX('>',Tags, 0)),'<','') = @Tag\n\nORDER BY ViewCount DESC"
    },
    {
        "QuerySetId": 1222991,
        "Title": "Users from Moscow with Q&A Posts with mscrm Tags",
        "Description": null,
        "QueryBody": "DECLARE  @location nvarchar(100) = '%moscow%';\n\n\n-- tags from questions\nSELECT\n  t.TagName\nFROM\n  Posts AS p\nINNER JOIN\n  Users AS u\n  ON p.OwnerUserId = u.Id\nINNER JOIN\n  PostTags AS pt\n  ON pt.PostId = p.Id\nINNER JOIN\n  Tags AS t\n  ON pt.TagId = t.Id\nWHERE\n  LOWER(u.Location) LIKE @location\n\nUNION\n\n-- tags from answers\nSELECT\n  t.TagName\nFROM\n  Posts AS p\nLEFT JOIN\n  Posts AS q\n  ON p.ParentId = q.Id\nINNER JOIN\n  Users AS u\n  ON p.OwnerUserId = u.Id\nINNER JOIN\n  PostTags AS pt\n  ON pt.PostId = q.Id\nINNER JOIN\n  Tags AS t\n  ON pt.TagId = t.Id\nWHERE\n  LOWER(u.Location) LIKE @location",
        "CreationDate": "2020-04-09 13:43:54",
        "validated": false,
        "QueryBody_Original": "DECLARE  @location nvarchar(100) = '%moscow%';\n\n\n-- tags from questions\nSELECT\n  t.TagName\nFROM\n  Posts AS p\nINNER JOIN\n  Users AS u\n  ON p.OwnerUserId = u.Id\nINNER JOIN\n  PostTags AS pt\n  ON pt.PostId = p.Id\nINNER JOIN\n  Tags AS t\n  ON pt.TagId = t.Id\nWHERE\n  LOWER(u.Location) LIKE @location\n\nUNION\n\n-- tags from answers\nSELECT\n  t.TagName\nFROM\n  Posts AS p\nLEFT JOIN\n  Posts AS q\n  ON p.ParentId = q.Id\nINNER JOIN\n  Users AS u\n  ON p.OwnerUserId = u.Id\nINNER JOIN\n  PostTags AS pt\n  ON pt.PostId = q.Id\nINNER JOIN\n  Tags AS t\n  ON pt.TagId = t.Id\nWHERE\n  LOWER(u.Location) LIKE @location"
    },
    {
        "QuerySetId": 1223342,
        "Title": "Questions and answers posted by new users",
        "Description": null,
        "QueryBody": "SELECT  u.DisplayName AS \"User\", p.PostTypeId as \"Answer Type\", q.PostTypeId as \"Question Type\", p.Id as \"Answer\", count(q.Id) as \"Questions Posted\"\nFROM Posts p JOIN Posts q ON q.OwnerUserId = p.OwnerUserId\nJOIN Users u ON p.OwnerUserId = u.Id\nJOIN Users qu ON q.OwnerUserId = qu.Id\nWHERE convert(date, u.CreationDate) >= convert(date, ##Start:string##) and convert(date, u.CreationDate) < convert(date, ##End:string##)\nAND convert(date, qu.CreationDate) >= convert(date, ##Start:string##) and convert(date, qu.CreationDate) < convert(date, ##End:string##)\nAND p.CreationDate < u.CreationDate + 7\nAND q.CreationDate < qu.CreationDate + 7\nAND p.PostTypeId = 1\nAND q.PostTypeId = 2\nGROUP BY u.DisplayName, p.Id, p.PostTypeId, q.PostTypeId",
        "CreationDate": "2020-04-09 20:33:07",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 1223619,
        "Title": "Questions which were in HNQ and have $ in the title",
        "Description": null,
        "QueryBody": "SELECT  TOP(##num?500##) p.Id AS [Post Link],\n  concat('site:\/\/posts\/',\n          p.Id,\n          '\/revisions'\n          ) [Revisions Link],\n  p.OwnerUserId AS [User Link], p.Score, p.CreationDate, p.ViewCount, p.AnswerCount, p. Tags\nFROM PostHistory ph INNER JOIN Posts p ON ph.PostId=p.Id\nWHERE ph.PostHistoryTypeId=52\n  AND p.CreationDate >= '##Date1?2019-01-01##' AND p.CreationDate <= '##Date2?2020-01-01##'\n  AND p.Title LIKE '%$%'\nORDER BY p.Id DESC",
        "CreationDate": "2020-04-10 09:05:49",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 1223771,
        "Title": "Reputated users with posts containing specific tags",
        "Description": null,
        "QueryBody": "SELECT  count(distinct u.Id)\n  \nFROM Posts p\nLEFT JOIN Users u ON p.OwnerUserId = u.Id\n\nWHERE p.PostTypeId = 1\nAND (p.tags like '%<##tag?Python##>%' OR p.tags like '%<##tag2?Flask##>%')\nAND u.Reputation >= ##rep:int##\n--AND p.CreationDate <= ##maxdate:string##\n--AND u.CreationDate <= ##maxdate:string##",
        "CreationDate": "2020-05-07 04:07:42",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 1223809,
        "Title": "Time until the first answer",
        "Description": null,
        "QueryBody": "SELECT  TOP(##num?1000##)\n  q.Id AS [Post Link],\n  MIN(a.CreationDate) AS answered\nFROM Posts q INNER JOIN Posts a ON a.ParentId=q.Id\nWHERE (q.PostTypeId=1) and (q.AnswerCount>0)\n---only question which have at least one answer\nGROUP BY q.Id\nORDER BY q.Id DESC",
        "CreationDate": "2020-04-10 18:01:08",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 1224147,
        "Title": "My Most Upvoted Comments (including comment text) - past 6 months",
        "Description": null,
        "QueryBody": "SELECT \n    postID [Post Link],\n    Score,\n    Text\nFROM \n    Comments\nWHERE\n    UserId = ##UserId##\n    AND\n    Score > 1\n    AND\n    CreationDate > DATEADD( month, -6, GETUTCDATE() )\n        \nORDER BY\n    Score DESC",
        "CreationDate": "2020-04-11 09:45:20",
        "validated": false,
        "QueryBody_Original": "SELECT \n    postID [Post Link],\n    Score,\n    Text\nFROM \n    Comments\nWHERE\n    UserId = ##UserId##\n    AND\n    Score > 1\n    AND\n    CreationDate > DATEADD( month, -6, GETUTCDATE() )\n        \nORDER BY\n    Score DESC"
    },
    {
        "QuerySetId": 1224156,
        "Title": "Positive scoring comments for a given user",
        "Description": "https:\/\/chat.stackoverflow.com\/transcript\/message\/49083575#49083575",
        "QueryBody": "SELECT  id as [Comment Link]\n     , score\n     , creationdate\n     , postid as [Post Link]\nfrom comments\nwhere userid = ##userid:int?2756409##\nand score > 5\norder by score desc",
        "CreationDate": "2020-04-12 20:26:28",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 1224412,
        "Title": "Compute all questions and answers",
        "Description": null,
        "QueryBody": "SELECT  Id, AcceptedAnswerId, Title, Body, CreationDate, Score, OwnerUserId\nFROM Posts\nWHERE PostTypeId=1\n\n\nSELECT Id, ParentId, Body, CreationDate, Score, OwnerUserId\nFROM Posts\nWHERE PostTypeId=2",
        "CreationDate": "2020-04-12 04:13:48",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 1224433,
        "Title": "Top post history by tag",
        "Description": null,
        "QueryBody": "DECLARE  @tag nvarchar (35) = '##tag##'\n\nselect p.id as postId,\n      pt.name,\n      p.title,\n      p.score as currentScore\nfrom posts p\njoin postTypes pt\non p.postTypeId = pt.id\njoin postTags ptag\non ptag.postId = p.id\njoin tags t\non ptag.tagid = t.id\nwhere t.tagName = @tag\nand p.score > 5000\norder by p.score desc, p.id",
        "CreationDate": "2020-04-12 08:13:44",
        "validated": false,
        "QueryBody_Original": "DECLARE  @tag nvarchar (35) = '##tag##'\n\nselect p.id as postId,\n      pt.name,\n      p.title,\n      p.score as currentScore\nfrom posts p\njoin postTypes pt\non p.postTypeId = pt.id\njoin postTags ptag\non ptag.postId = p.id\njoin tags t\non ptag.tagid = t.id\nwhere t.tagName = @tag\nand p.score > 5000\norder by p.score desc, p.id"
    },
    {
        "QuerySetId": 1225526,
        "Title": "Answer posted after question closed",
        "Description": null,
        "QueryBody": "SELECT  Top(##num?1000##)\n  a.Id AS [Post Link],\n  a.CreationDate, q.ClosedDate,\n  DATEDIFF(month, q.ClosedDate, a.CreationDate) AS Months,\n  DATEDIFF(day, q.ClosedDate, a.CreationDate) AS Days,\n  DATEDIFF(hour, q.ClosedDate, a.CreationDate) AS Hours,\n  DATEDIFF(minute, q.ClosedDate, a.CreationDate) AS Minutes\nFROM Posts q INNER JOIN Posts a ON a.ParentId=q.Id\nWHERE (q.ClosedDate IS NOT NULL) and (q.ClosedDate<a.CreationDate)\nORDER BY a.Id DESC",
        "CreationDate": "2020-04-14 13:32:31",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 1225567,
        "Title": "Longest time - answer after question closed (no merges)",
        "Description": null,
        "QueryBody": "SELECT  Top(##num?1000##)\n  a.Id AS [Post Link],\n  a.CreationDate, q.ClosedDate,\n  DATEDIFF(month, q.ClosedDate, a.CreationDate) AS Months,\n  DATEDIFF(day, q.ClosedDate, a.CreationDate) AS Days,\n  DATEDIFF(hour, q.ClosedDate, a.CreationDate) AS Hours,\n  DATEDIFF(minute, q.ClosedDate, a.CreationDate) AS Minutes\nFROM Posts q INNER JOIN Posts a ON a.ParentId=q.Id\nWHERE (q.ClosedDate IS NOT NULL) and (q.ClosedDate<a.CreationDate) AND\n  q.Id NOT IN(SELECT p.Id\n                FROM PostHistory ph INNER JOIN Posts p\n                 ON ph.PostId=p.Id\n                 AND ph.PostHistoryTypeId IN (18,22,37,38)\n                 AND p.PostTypeId=1\n                 )\nORDER BY DATEDIFF(minute, q.ClosedDate, a.CreationDate) DESC",
        "CreationDate": "2020-04-14 15:37:33",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 1225568,
        "Title": "Most recent - answer after question closed (no merges)",
        "Description": null,
        "QueryBody": "SELECT  Top(##num?1000##)\n  a.Id AS [Post Link],\n  a.CreationDate, q.ClosedDate,\n  DATEDIFF(month, q.ClosedDate, a.CreationDate) AS Months,\n  DATEDIFF(day, q.ClosedDate, a.CreationDate) AS Days,\n  DATEDIFF(hour, q.ClosedDate, a.CreationDate) AS Hours,\n  DATEDIFF(minute, q.ClosedDate, a.CreationDate) AS Minutes,\n  concat('site:\/\/posts\/',\n          q.Id,\n          '\/revisions'\n          ) [Revisions Link]\nFROM Posts q INNER JOIN Posts a ON a.ParentId=q.Id\nWHERE (q.ClosedDate IS NOT NULL) and (q.ClosedDate<a.CreationDate) AND\n  q.Id NOT IN(SELECT p.Id\n                FROM PostHistory ph INNER JOIN Posts p\n                 ON ph.PostId=p.Id\n                 AND ph.PostHistoryTypeId IN (18,22,37,38)\n                 AND p.PostTypeId=1\n                 )\nORDER BY a.Id DESC",
        "CreationDate": "2020-04-14 15:44:31",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 1225949,
        "Title": "Find usage of test doubles related terms",
        "Description": null,
        "QueryBody": "SELECT  COUNT(*)\nFROM Posts\nWHERE Title LIKE ##DisplayName:string?%mock%##;",
        "CreationDate": "2020-04-15 04:20:26",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 1226131,
        "Title": "Tag wikis \/ excerpts containing certain words (single site)",
        "Description": null,
        "QueryBody": "WITH  results AS (\nSELECT t.TagName, 'Excerpt' AS Type, t.Id, p.Body\n  FROM Tags AS t\n  INNER JOIN Posts AS p\n    ON p.Id = t.ExcerptPostId\n  WHERE p.Body LIKE '%' + ##query:string## + '%' ESCAPE '\\' COLLATE sql_latin1_general_cp1_ci_ai\n  \nUNION ALL\n\nSELECT t.TagName, 'Wiki', t.Id, p.Body\n  FROM Tags AS t\n  INNER JOIN Posts AS p\n    ON p.Id = t.WikiPostId\n  WHERE p.Body LIKE '%' + ##query:string## + '%' ESCAPE '\\' COLLATE sql_latin1_general_cp1_ci_ai\n)\n\nSELECT 'site:\/\/edit-tag-wiki\/' + CAST(Id AS NVARCHAR) + '|' + TagName + ', ' + Type,\n  body\n  FROM results\n  ORDER BY TagName",
        "CreationDate": "2020-07-12 21:55:37",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 1227848,
        "Title": "Last access by given users",
        "Description": null,
        "QueryBody": "SELECT \n  u.Id AS [User Link], u.LastAccessDate\nFROM Users u\nWHERE u.Id IN (##users?18,12,6126##)",
        "CreationDate": "2020-04-17 08:23:57",
        "validated": false,
        "QueryBody_Original": "SELECT \n  u.Id AS [User Link], u.LastAccessDate\nFROM Users u\nWHERE u.Id IN (##users?18,12,6126##)"
    },
    {
        "QuerySetId": 1228150,
        "Title": "How Unsung am I? (Fixed Ver. Includes %)",
        "Description": "Zero and non-zero accepted count. Self-accepted answers do not count.",
        "QueryBody": "SELECT \n    count(a.Score) as [Accepted Answers],\n    sum(case when a.Score = 0 then 0 else 1 end) as [Scored Answers],  \n    sum(case when a.Score = 0 then 1 else 0 end) as [Unscored Answers],\n    sum(CASE WHEN a.Score = 0 then 1 else 0 end)*1000 \/ count(a.Id) \/ 10.0 as [Percentage Unscored]\nfrom\n    Posts q\n  inner join\n    Posts a\n  on a.Id = q.AcceptedAnswerId\nwhere\n      a.CommunityOwnedDate is null\n  and a.OwnerUserId = ##UserId##\n  and q.OwnerUserId != ##UserId##\n  and a.postTypeId = 2\n  and a.CreationDate <= DATEADD(day, -10, GETDATE())",
        "CreationDate": "2020-04-17 22:01:35",
        "validated": false,
        "QueryBody_Original": "SELECT \n    count(a.Score) as [Accepted Answers],\n    sum(case when a.Score = 0 then 0 else 1 end) as [Scored Answers],  \n    sum(case when a.Score = 0 then 1 else 0 end) as [Unscored Answers],\n    sum(CASE WHEN a.Score = 0 then 1 else 0 end)*1000 \/ count(a.Id) \/ 10.0 as [Percentage Unscored]\nfrom\n    Posts q\n  inner join\n    Posts a\n  on a.Id = q.AcceptedAnswerId\nwhere\n      a.CommunityOwnedDate is null\n  and a.OwnerUserId = ##UserId##\n  and q.OwnerUserId != ##UserId##\n  and a.postTypeId = 2\n  and a.CreationDate <= DATEADD(day, -10, GETDATE())"
    },
    {
        "QuerySetId": 1228310,
        "Title": "Community Value of an Answer",
        "Description": null,
        "QueryBody": "WITH in 6 months of Answer date\n\n\nSELECT\n  COUNT(DISTINCT Answer.Id),\n  SUM(CASE WHEN AnswerVotes.VoteTypeId = 1 THEN 1 ELSE 0 END) as Accepted,\n  SUM(CASE WHEN AnswerVotes.VoteTypeId = 2 THEN 1 ELSE 0 END) as UpVotes\n  \n\nFROM Posts AS Question\nJOIN Posts AS Answer ON Question.Id = Answer.ParentId\nLEFT OUTER JOIN Votes AS AnswerVotes ON\n    (AnswerVotes.PostId = Answer.Id\n     AND AnswerVotes.CreationDate > DATEADD(m, -6, Answer.CreationDate)\n     AND VoteTypeId IN (1,2) -- Accepted, UpVote\n     )\n\nWHERE Question.PostTypeId = 1 -- Question\n  AND Answer.PostTypeId = 2 -- Answer\n  AND (Question.Tags LIKE '%<amazon-%' OR Question.Tags LIKE '%<aws-%')\n  AND Answer.OwnerUserId = ##UserId##\n  AND Answer.CreationDate < ##CompareDate## -- eg '2020-04-01' (including quotes)",
        "CreationDate": "2020-04-22 11:45:59",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 1228322,
        "Title": "Most viewed questions that were not in the HNQ",
        "Description": null,
        "QueryBody": "SELECT  Top(##num?500##)\n  q.Id AS [Post Link],\n  ViewCount, Score, AnswerCount\nFROM Posts q\nWHERE \n----date range\n  (q.CreationDate >= '##Date1?2019-03-01##') AND (q.CreationDate <= '##Date2?2021-01-01##')  \n----the question was not in the HNQ  \n  AND q.Id NOT IN(\n    SELECT PostId FROM PostHistory WHERE PostHistoryTypeId=52 \n  )\nORDER BY ViewCount DESC",
        "CreationDate": "2020-04-18 19:40:07",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 1229054,
        "Title": "What percentile am I in?",
        "Description": "Determines where you rank in a given tag as of the last data load",
        "QueryBody": "SELECT  TOP 200\n  USERS.id,\n  STR(NTILE(100) OVER(ORDER BY SUM(answers.score) DESC), 5) + '%' AS [Top],\n  ROW_NUMBER() OVER(ORDER BY SUM(answers.score) DESC) AS [Ranking],\n  Users.Id AS [User Link],\n  SUM(answers.Score) AS [Total Score]\nFROM\n  Posts questions\nJOIN\n  Posts answers\nON\n  answers.ParentId = questions.Id AND\n  answers.Score <> 0 AND\n  answers.OwnerUserId IS NOT NULL AND\n  answers.CommunityOwnedDate IS NULL\nJOIN\n  Users\nON\n  answers.OwnerUserId = Users.Id\nGROUP BY\n  Users.Id\nORDER BY\n  CASE Users.Id WHEN ##UserId## THEN 1 ELSE 0 END DESC,\n  [Total Score] DESC",
        "CreationDate": "2020-04-20 09:48:04",
        "validated": false,
        "QueryBody_Original": "SELECT  TOP 200\n  USERS.id,\n  STR(NTILE(100) OVER(ORDER BY SUM(answers.score) DESC), 5) + '%' AS [Top],\n  ROW_NUMBER() OVER(ORDER BY SUM(answers.score) DESC) AS [Ranking],\n  Users.Id AS [User Link],\n  SUM(answers.Score) AS [Total Score]\nFROM\n  Posts questions\nJOIN\n  Posts answers\nON\n  answers.ParentId = questions.Id AND\n  answers.Score <> 0 AND\n  answers.OwnerUserId IS NOT NULL AND\n  answers.CommunityOwnedDate IS NULL\nJOIN\n  Users\nON\n  answers.OwnerUserId = Users.Id\nGROUP BY\n  Users.Id\nORDER BY\n  CASE Users.Id WHEN ##UserId## THEN 1 ELSE 0 END DESC,\n  [Total Score] DESC"
    },
    {
        "QuerySetId": 1230257,
        "Title": "AWS Questions with Upvotes and Accepted Answers",
        "Description": null,
        "QueryBody": "SELECT  TOP 100\n  Question.Id,\n  COUNT(QuestionVotes.Id) as QuestionUpVotes\n  \n\nFROM Posts AS Question\nJOIN Votes AS QuestionVotes ON (QuestionVotes.PostId = Question.Id AND QuestionVotes.VoteTypeId = 2)\n\nWHERE Question.PostTypeId = 1 -- Question\n  AND (Question.Tags LIKE '%<amazon-%' OR Question.Tags LIKE '%<aws-%')\n  AND AcceptedAnswerId IS NOT NULL\n  AND Question.CreationDate > DATEADD(m, -3, current_timestamp)\n\nGROUP BY Question.Id",
        "CreationDate": "2020-04-22 11:08:16",
        "validated": false,
        "QueryBody_Original": "SELECT  TOP 100\n  Question.Id,\n  COUNT(QuestionVotes.Id) as QuestionUpVotes\n  \n\nFROM Posts AS Question\nJOIN Votes AS QuestionVotes ON (QuestionVotes.PostId = Question.Id AND QuestionVotes.VoteTypeId = 2)\n\nWHERE Question.PostTypeId = 1 -- Question\n  AND (Question.Tags LIKE '%<amazon-%' OR Question.Tags LIKE '%<aws-%')\n  AND AcceptedAnswerId IS NOT NULL\n  AND Question.CreationDate > DATEADD(m, -3, current_timestamp)\n\nGROUP BY Question.Id"
    },
    {
        "QuerySetId": 1230534,
        "Title": "Compare tag popularity by month",
        "Description": null,
        "QueryBody": "SELECT  *\nFROM string_split(##TagsCsv:string?java,.net##,',')",
        "CreationDate": "2020-04-22 19:32:20",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 1230704,
        "Title": "Users with sufficient score for a tag badge - missing number of answers",
        "Description": null,
        "QueryBody": "WITH  scorestags_cte AS\n(SELECT\n  pt.TagId AS TagId,\n  p.OwnerUserId AS uid,\n  p.OwnerDisplayname AS udn,\n  SUM (p.SCORE) as sco,\n  COUNT (p.Id) as num\nFROM Posts p INNER JOIN Posts q\n  ON q.Id = p.ParentId\n  INNER JOIN PostTags pt ON q.Id=pt.PostId\nWHERE (p.CommunityOwnedDate IS NULL)\n---only non-CW\nGROUP BY pt.TagId, p.OwnerUserId, p.OwnerDisplayname\n)\n\nSELECT\n  t.tagname,\n  s.uid As [User Link], s.udn,\n  s.sco AS [Score],\n  s.num AS [Count]\nFROM scorestags_cte s INNER JOIN Tags t on s.TagId=t.Id\nWHERE (s.sco>=##minsco?100##) AND (s.num<##mincount?20##)\nORDER BY s.sco DESC",
        "CreationDate": "2020-04-23 11:38:45",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 1230709,
        "Title": "Users with sufficient number of answers for a tag badge - missing on score",
        "Description": null,
        "QueryBody": "WITH  scorestags_cte AS\n(SELECT\n  pt.TagId AS TagId,\n  p.OwnerUserId AS uid,\n  p.OwnerDisplayname AS udn,\n  SUM (p.SCORE) as sco,\n  COUNT (p.Id) as num\nFROM Posts p INNER JOIN Posts q\n  ON q.Id = p.ParentId\n  INNER JOIN PostTags pt ON q.Id=pt.PostId\nWHERE (p.CommunityOwnedDate IS NULL)\n---only non-CW\nGROUP BY pt.TagId, p.OwnerUserId, p.OwnerDisplayname\n)\n\nSELECT\n  t.tagname,\n  s.uid As [User Link], s.udn,\n  s.sco AS [Score],\n  s.num AS [Count]\nFROM scorestags_cte s INNER JOIN Tags t on s.TagId=t.Id\nWHERE (s.sco<##minsco?100##) AND (s.num>=##mincount?20##)\nORDER BY s.num DESC",
        "CreationDate": "2020-04-23 11:38:54",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 1230714,
        "Title": "Users with sufficient score and number of answers for a tag badge",
        "Description": null,
        "QueryBody": "WITH  scorestags_cte AS\n(SELECT\n  pt.TagId AS TagId,\n  p.OwnerUserId AS uid,\n  p.OwnerDisplayname AS udn,\n  SUM (p.SCORE) as sco,\n  COUNT (p.Id) as num\nFROM Posts p INNER JOIN Posts q\n  ON q.Id = p.ParentId\n  INNER JOIN PostTags pt ON q.Id=pt.PostId\nWHERE (p.CommunityOwnedDate IS NULL)\n---only non-CW\nGROUP BY pt.TagId, p.OwnerUserId, p.OwnerDisplayname\n)\n\nSELECT\n  t.tagname,\n  s.uid As [User Link], s.udn,\n  s.sco AS [Score],\n  s.num AS [Count]\nFROM scorestags_cte s INNER JOIN Tags t on s.TagId=t.Id\nWHERE (s.sco>=##minsco?100##) AND (s.num>=##mincount?20##)\nORDER BY s.sco DESC",
        "CreationDate": "2020-04-23 11:40:07",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 1231357,
        "Title": "Last site access by specific users",
        "Description": null,
        "QueryBody": "SELECT \n  u.Id AS [User Link], u.LastAccessDate\nFROM Users u\nWHERE u.Id IN (##list?12,18,6126##)",
        "CreationDate": "2020-04-24 11:20:06",
        "validated": false,
        "QueryBody_Original": "SELECT \n  u.Id AS [User Link], u.LastAccessDate\nFROM Users u\nWHERE u.Id IN (##list?12,18,6126##)"
    },
    {
        "QuerySetId": 1231358,
        "Title": "Recent posts by given users",
        "Description": null,
        "QueryBody": "SELECT  TOP ##num?100##\n  u.Id AS [User Link], u.LastAccessDate, p.CreationDate, p.Id AS [Post Link]\nFROM Users u INNER JOIN Posts p ON p.OwnerUserId=u.Id\nWHERE u.Id IN (##users?18,12,6126##)\nORDER BY p.CreationDate DESC",
        "CreationDate": "2020-04-24 11:24:49",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 1231359,
        "Title": "Recent comments by given users",
        "Description": null,
        "QueryBody": "SELECT  TOP ##num?100##\n  u.Id AS [User Link], u.LastAccessDate, c.CreationDate, c.Id AS [Comment Link]\nFROM Users u INNER JOIN Comments c ON c.UserId=u.Id\nWHERE u.Id IN (##users?18,12,6126##)\nORDER BY c.CreationDate DESC",
        "CreationDate": "2020-04-24 11:25:21",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 1231895,
        "Title": "New users cast many upvotes",
        "Description": null,
        "QueryBody": "DECLARE  @Now DATETIME = (SELECT MAX(CreationDate) FROM PostHistory);\n\nSELECT TOP 100\n  Id AS [User Link],\n  Reputation,\n  UpVotes,\n  CreationDate,\n  DATEDIFF(d, CreationDate, @Now) AS Age,\n  1.0 * UpVotes \/ (DATEDIFF(d, CreationDate, @Now) + 1) AS UpsPerDay\nFROM Users\nORDER BY UpsPerDay DESC, Id DESC",
        "CreationDate": "2020-04-26 00:32:05",
        "validated": false,
        "QueryBody_Original": "DECLARE  @Now DATETIME = (SELECT MAX(CreationDate) FROM PostHistory);\n\nSELECT TOP 100\n  Id AS [User Link],\n  Reputation,\n  UpVotes,\n  CreationDate,\n  DATEDIFF(d, CreationDate, @Now) AS Age,\n  1.0 * UpVotes \/ (DATEDIFF(d, CreationDate, @Now) + 1) AS UpsPerDay\nFROM Users\nORDER BY UpsPerDay DESC, Id DESC"
    },
    {
        "QuerySetId": 1232074,
        "Title": "Search for specific term(s) in user profiles",
        "Description": null,
        "QueryBody": "SELECT  id as [User Link]\nfrom users\nwhere aboutme like '%' + ##search:string?senior## + '%'\norder by DisplayName",
        "CreationDate": "2020-04-26 20:29:26",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 1232898,
        "Title": "Find questions with multiple answers by the same user",
        "Description": null,
        "QueryBody": "DECLARE  @EndDate datetime = (select case\n  -- If we request 'today', actually use the date\n  -- of the most recent transfer to this database,\n  -- which may be as much as a week in the past.\n  when lower(##EndDate:string?today##) = 'today' then max(CreationDate)\n  -- Otherwise, specify the most recent date to include.\n  else ##EndDate##\n  end\n  from Posts\n);\n  \nDECLARE @StartDate datetime = dateadd(day, -1*##DaysBack?30##, @EndDate);\n\nSELECT Posts.OwnerUserId [User Link], ParentId [Post Link]\nFROM Posts\nWHERE Posts.CreationDate between @StartDate and @EndDate\nGROUP BY Posts.ParentId, Posts.OwnerUserId\nHAVING COUNT(Posts.ParentId) > 1",
        "CreationDate": "2020-04-29 03:26:56",
        "validated": false,
        "QueryBody_Original": "DECLARE  @EndDate datetime = (select case\n  -- If we request 'today', actually use the date\n  -- of the most recent transfer to this database,\n  -- which may be as much as a week in the past.\n  when lower(##EndDate:string?today##) = 'today' then max(CreationDate)\n  -- Otherwise, specify the most recent date to include.\n  else ##EndDate##\n  end\n  from Posts\n);\n  \nDECLARE @StartDate datetime = dateadd(day, -1*##DaysBack?30##, @EndDate);\n\nSELECT Posts.OwnerUserId [User Link], ParentId [Post Link]\nFROM Posts\nWHERE Posts.CreationDate between @StartDate and @EndDate\nGROUP BY Posts.ParentId, Posts.OwnerUserId\nHAVING COUNT(Posts.ParentId) > 1"
    },
    {
        "QuerySetId": 1232913,
        "Title": "Google Cloud tagged Questions per month",
        "Description": null,
        "QueryBody": "SELECT  \n  CONVERT(nvarchar(7), Question.CreationDate, 23) AS Month,\n  COUNT(Question.Id) AS Questions,\n  CONCAT(100 * COUNT(NULLIF(AnswerCount,0)) \/ COUNT(1), '%') as AnswerRate,\n  CONCAT(100 * COUNT(AcceptedAnswerId) \/ COUNT(1), '%') as AcceptedRate,\n  SUM(Question.ViewCount) AS Views\n\nFROM Posts as Question\n\nWHERE PostTypeId = 1 -- Question\n  AND Question.ClosedDate IS NULL -- Exclude Closed questions\n  AND (Question.Tags LIKE '%<google-%'\n    OR Question.Tags LIKE '%<google-compute%'\n    OR Question.Tags IN ('gcloud')\n    )\n  AND Question.CreationDate >= '2019-01-01'\n  AND Question.CreationDate < DATEADD(DAY,1,EOMONTH(GETDATE(),-1))\n\nGROUP BY CONVERT(nvarchar(7), Question.CreationDate, 23)\nORDER BY CONVERT(nvarchar(7), Question.CreationDate, 23)",
        "CreationDate": "2020-04-29 07:22:57",
        "validated": false,
        "QueryBody_Original": "SELECT  \n  CONVERT(nvarchar(7), Question.CreationDate, 23) AS Month,\n  COUNT(Question.Id) AS Questions,\n  CONCAT(100 * COUNT(NULLIF(AnswerCount,0)) \/ COUNT(1), '%') as AnswerRate,\n  CONCAT(100 * COUNT(AcceptedAnswerId) \/ COUNT(1), '%') as AcceptedRate,\n  SUM(Question.ViewCount) AS Views\n\nFROM Posts as Question\n\nWHERE PostTypeId = 1 -- Question\n  AND Question.ClosedDate IS NULL -- Exclude Closed questions\n  AND (Question.Tags LIKE '%<google-%'\n    OR Question.Tags LIKE '%<google-compute%'\n    OR Question.Tags IN ('gcloud')\n    )\n  AND Question.CreationDate >= '2019-01-01'\n  AND Question.CreationDate < DATEADD(DAY,1,EOMONTH(GETDATE(),-1))\n\nGROUP BY CONVERT(nvarchar(7), Question.CreationDate, 23)\nORDER BY CONVERT(nvarchar(7), Question.CreationDate, 23)"
    },
    {
        "QuerySetId": 1233171,
        "Title": "Top users with number\/score from answers and from questions",
        "Description": null,
        "QueryBody": "SELECT  TOP(##num?500##)\n  u.Id AS [User Link],\n  u.Reputation,\n  SUM(case when p.PostTypeId = 1 then 1 else 0 end) AS [Total Questions],\n  SUM(case when p.PostTypeId = 2 then 1 else 0 end) AS [Total Answers],\n  SUM(case when p.PostTypeId = 1 then p.Score else 0 end) AS [Score Questions],\n  SUM(case when p.PostTypeId = 1 then p.Score else 0 end) AS [Score Answers]\nFROM Users u INNER JOIN Posts p ON p.OwnerUserId=u.Id\nGROUP BY u.Id, u.Reputation\nORDER BY u.Reputation DESC",
        "CreationDate": "2020-04-29 21:55:55",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 1233176,
        "Title": "What percentage of all posts are answers (for top users)",
        "Description": null,
        "QueryBody": "SELECT  TOP(##num?500##)\n  u.Id AS [User Link],\n  u.Reputation,\n  ROUND((SUM(case when p.PostTypeId = 2 then 1 else 0 end))*100.0\/(COUNT(p.Id)),2) AS [Percentage Answers],\n  COUNT(p.Id) AS [Total Posts],\n  SUM(case when p.PostTypeId = 1 then 1 else 0 end) AS [Total Questions],\n  SUM(case when p.PostTypeId = 2 then 1 else 0 end) AS [Total Answers],\n  SUM(case when p.PostTypeId = 1 then p.Score else 0 end) AS [Score Questions],\n  SUM(case when p.PostTypeId = 1 then p.Score else 0 end) AS [Score Answers]\nFROM Users u INNER JOIN Posts p ON p.OwnerUserId=u.Id\nGROUP BY u.Id, u.Reputation\nORDER BY u.Reputation DESC",
        "CreationDate": "2020-04-29 21:55:48",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 1233179,
        "Title": "Number\/score from answers and from questions for top users (including deleted users)",
        "Description": null,
        "QueryBody": "SELECT  TOP(##num?500##)\n  p.OwnerUserId AS [User Link],\n  p.OwnerDisplayName,\n  SUM(p.Score) AS [Total Score],\n  COUNT(p.Id) AS [Total Posts],\n  SUM(case when p.PostTypeId = 1 then 1 else 0 end) AS [Total Questions],\n  SUM(case when p.PostTypeId = 2 then 1 else 0 end) AS [Total Answers],\n  SUM(case when p.PostTypeId = 1 then p.Score else 0 end) AS [Score Questions],\n  SUM(case when p.PostTypeId = 2 then p.Score else 0 end) AS [Score Answers],\n  ROUND((SUM(case when p.PostTypeId = 2 then 1 else 0 end))*100.0\/(COUNT(p.Id)),2) AS [Percentage Answers]\nFROM Posts p\nGROUP BY p.OwnerUserId, p.OwnerDisplayName\nORDER BY SUM(p.Score) DESC",
        "CreationDate": "2020-06-07 15:45:04",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 1233182,
        "Title": "What percentage of all posts are answers (for top users - including deleted users)",
        "Description": null,
        "QueryBody": "SELECT  TOP(##num?500##)\n  p.OwnerUserId AS [User Link],\n  p.OwnerDisplayName,\n  ROUND((SUM(case when p.PostTypeId = 2 then 1 else 0 end))*100.0\/(COUNT(p.Id)),2) AS [Percentage Answers],\n  SUM(p.Score) AS [Total Score],\n  COUNT(p.Id) AS [Total Posts],\n  SUM(case when p.PostTypeId = 1 then 1 else 0 end) AS [Total Questions],\n  SUM(case when p.PostTypeId = 2 then 1 else 0 end) AS [Total Answers],\n  SUM(case when p.PostTypeId = 1 then p.Score else 0 end) AS [Score Questions],\n  SUM(case when p.PostTypeId = 1 then p.Score else 0 end) AS [Score Answers]  \nFROM Posts p\nGROUP BY p.OwnerUserId, p.OwnerDisplayName\nORDER BY SUM(p.Score) DESC",
        "CreationDate": "2020-04-29 22:08:29",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 1234402,
        "Title": "All questions by a specific user",
        "Description": null,
        "QueryBody": "SELECT \n  Id AS [Post Link],\n  Title,\n  Score, ViewCount, AnswerCount, Tags\nFROM Posts\nWHERE (PostTypeId=1) AND (OwnerUserId=##userid##)\nORDER BY Id",
        "CreationDate": "2020-05-18 21:40:51",
        "validated": false,
        "QueryBody_Original": "SELECT \n  Id AS [Post Link],\n  Title,\n  Score, ViewCount, AnswerCount, Tags\nFROM Posts\nWHERE (PostTypeId=1) AND (OwnerUserId=##userid##)\nORDER BY Id"
    },
    {
        "QuerySetId": 1234404,
        "Title": "All questions by a specific user (including body)",
        "Description": null,
        "QueryBody": "SELECT \n  Id AS [Post Link],\n  Title,\n  Score, ViewCount, AnswerCount,\n  Body\nFROM Posts\nWHERE (PostTypeId=1) AND (OwnerUserId=##userid##)\nORDER BY Id",
        "CreationDate": "2020-05-03 11:19:30",
        "validated": false,
        "QueryBody_Original": "SELECT \n  Id AS [Post Link],\n  Title,\n  Score, ViewCount, AnswerCount,\n  Body\nFROM Posts\nWHERE (PostTypeId=1) AND (OwnerUserId=##userid##)\nORDER BY Id"
    },
    {
        "QuerySetId": 1234439,
        "Title": "All answers by a specific user (including body)",
        "Description": null,
        "QueryBody": "SELECT \n  a.Id AS [Post Link],\n  a.CreationDate,\n  q.Title,\n  q.Tags,\n  a.Body\nFROM Posts a INNER JOIN Posts q ON q.Id=a.ParentId\nWHERE (a.OwnerUserId=##userid##)\nORDER BY a.Id",
        "CreationDate": "2020-09-29 02:22:25",
        "validated": false,
        "QueryBody_Original": "SELECT \n  a.Id AS [Post Link],\n  a.CreationDate,\n  q.Title,\n  q.Tags,\n  a.Body\nFROM Posts a INNER JOIN Posts q ON q.Id=a.ParentId\nWHERE (a.OwnerUserId=##userid##)\nORDER BY a.Id"
    },
    {
        "QuerySetId": 1234440,
        "Title": "All answers by a specific user",
        "Description": null,
        "QueryBody": "SELECT \n  Id AS [Post Link],\n  Score\nFROM Posts\nWHERE (PostTypeId=2) AND (OwnerUserId=##userid##)\nORDER BY Id",
        "CreationDate": "2020-05-03 12:36:14",
        "validated": false,
        "QueryBody_Original": "SELECT \n  Id AS [Post Link],\n  Score\nFROM Posts\nWHERE (PostTypeId=2) AND (OwnerUserId=##userid##)\nORDER BY Id"
    },
    {
        "QuerySetId": 1234441,
        "Title": "All answers by a specific user (including question title)",
        "Description": null,
        "QueryBody": "SELECT \n  a.Id AS [Post Link],\n  q.Title,\n  a.Score,\n  q.ViewCount, q.AnswerCount\nFROM Posts a INNER JOIN Posts q ON q.Id=a.ParentId\nWHERE (a.OwnerUserId=##userid##)\nORDER BY a.Id",
        "CreationDate": "2020-05-03 12:38:36",
        "validated": false,
        "QueryBody_Original": "SELECT \n  a.Id AS [Post Link],\n  q.Title,\n  a.Score,\n  q.ViewCount, q.AnswerCount\nFROM Posts a INNER JOIN Posts q ON q.Id=a.ParentId\nWHERE (a.OwnerUserId=##userid##)\nORDER BY a.Id"
    },
    {
        "QuerySetId": 1234513,
        "Title": "Questions containing the given tag - only ids",
        "Description": null,
        "QueryBody": "SELECT  q.Id as [Post Link]\nFROM Posts q INNER JOIN PostTags pt ON q.Id=pt.PostId\nINNER JOIN Tags t ON t.id = pt.TagId\nWHERE t.TagName=##tagName:string?geometry##\nORDER BY q.CreationDate DESC\n---simply using \"q.Tags LIKE '%<##Tagname##%>%'\" leads to some false positives\n---for example, searching for geometry gives also the questions tagged geometry-of-numbers",
        "CreationDate": "2020-05-03 18:40:52",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 1234514,
        "Title": "Questions with the given tag - id and title",
        "Description": null,
        "QueryBody": "SELECT  q.Id as [Post Link], Title\nFROM Posts q INNER JOIN PostTags pt ON q.Id=pt.PostId\nINNER JOIN Tags t ON t.id = pt.TagId\nWHERE t.TagName=##tagName:string?geometry##\nORDER BY q.CreationDate DESC\n---simply using \"q.Tags LIKE '%<##Tagname##%>%'\" leads to some false positives\n---for example, searching for geometry gives also the questions tagged geometry-of-numbers",
        "CreationDate": "2020-05-03 18:44:25",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 1234579,
        "Title": "Perguntas do ultimo ano ",
        "Description": null,
        "QueryBody": "DECLARE  @keyword nvarchar(35) = ##keyword:string##;\n\nSELECT\n  COUNT(*)\nFROM\n  Posts\n  inner join PostTags on PostTags.PostId = Posts.Id\n  inner join Tags on Tags.Id = PostTags.TagId\nWhere\n  Posts.PostTypeId = 1 \n    and\n  Tags.TagName like '%' + @keyword +'%'\n  \n  --Javascript\n  --Java\n  --Python\n  --PHP\n  --C\n  --TypeScript\n  --Ruby\n  --swift\n  --kotlin",
        "CreationDate": "2020-05-15 02:09:51",
        "validated": false,
        "QueryBody_Original": "DECLARE  @keyword nvarchar(35) = ##keyword:string##;\n\nSELECT\n  COUNT(*)\nFROM\n  Posts\n  inner join PostTags on PostTags.PostId = Posts.Id\n  inner join Tags on Tags.Id = PostTags.TagId\nWhere\n  Posts.PostTypeId = 1 \n    and\n  Tags.TagName like '%' + @keyword +'%'\n  \n  --Javascript\n  --Java\n  --Python\n  --PHP\n  --C\n  --TypeScript\n  --Ruby\n  --swift\n  --kotlin"
    },
    {
        "QuerySetId": 1234619,
        "Title": "SQL post links per user",
        "Description": null,
        "QueryBody": "SELECT  STRING_AGG(CAST(link AS VARCHAR(MAX)), ', ') AS data\nFROM (\n\nSELECT CONCAT('''https:\/\/',\n              ##SiteDomain:string##,\n              IIF(PostTypeId = 1, '\/q\/', '\/a\/'),\n              Id,\n              '''') AS link\nFROM Posts\nWHERE PostTypeId IN (1, 2) AND\n      OwnerUserId = ##OwnerUserId:int##\n\n) X;",
        "CreationDate": "2020-05-07 18:20:48",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 1234975,
        "Title": "Find questions containing one of the given three tags",
        "Description": null,
        "QueryBody": "SELECT  q.Id as [Post Link], q.Tags, q.CreationDate\nFROM Posts q INNER JOIN PostTags pt ON q.Id=pt.PostId\nINNER JOIN Tags t ON t.id = pt.TagId\nWHERE (t.TagName=##tag1:string?abstract-algebra##) OR \n  (t.TagName=##tag2:string?geometry##) OR\n  (t.TagName=##tag3:string?discrete-mathematics##)\nORDER BY q.CreationDate DESC\n---simply using \"q.Tags LIKE '%<##Tagname##>%'\" leads to some false positives\n---for example, searching for geometry gives also the questions tagged geometry-of-numbers",
        "CreationDate": "2020-05-05 10:36:35",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 1234981,
        "Title": "Questions containing abstract-algebra but not the frequent algebra-related tags",
        "Description": null,
        "QueryBody": "SELECT  q.Id as [Post Link], q.Tags, q.CreationDate\nFROM Posts q INNER JOIN PostTags pt ON q.Id=pt.PostId\nINNER JOIN Tags t ON t.id = pt.TagId\nWHERE t.TagName=##tagName:string?abstract-algebra##\n    AND NOT(q.Tags LIKE '%<ac.commutative-algebra>%')\n  AND NOT(q.Tags LIKE '%<ra.rings-and-algebras>%')\n  AND NOT(q.Tags LIKE '%<gr.group-theory>%')\nORDER BY q.CreationDate DESC\n---simply using \"q.Tags LIKE '%<##Tagname##%>%'\" leads to some false positives\n---for example, searching for geometry gives also the questions tagged geometry-of-numbers",
        "CreationDate": "2020-05-05 10:10:27",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 1234983,
        "Title": "Questions tagged geometry but without the frequent geometry-related top-level tags",
        "Description": null,
        "QueryBody": "SELECT  q.Id as [Post Link], q.Tags, q.CreationDate\nFROM Posts q INNER JOIN PostTags pt ON q.Id=pt.PostId\nINNER JOIN Tags t ON t.id = pt.TagId\nWHERE t.TagName=##tagName:string?geometry##\n  AND NOT(q.Tags LIKE '%<dg.differential-geometry>%')\n  AND NOT(q.Tags LIKE '%<mg.metric-geometry>%')\n  AND NOT(q.Tags LIKE '%<ag.algebraic-geometry>%')\n  AND NOT(q.Tags LIKE '%<gt.geometric-topology>%')\nORDER BY q.CreationDate DESC\n---simply using \"q.Tags LIKE '%<##Tagname##%>%'\" leads to some false positives\n---for example, searching for geometry gives also the questions tagged geometry-of-numbers",
        "CreationDate": "2020-05-06 02:45:20",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 1234992,
        "Title": "Questions with tag1 but not tag2",
        "Description": null,
        "QueryBody": "SELECT  q.Id as [Post Link], q.Tags, q.CreationDate, q.LastActivityDate\nFROM Posts q INNER JOIN PostTags pt ON q.Id=pt.PostId\nINNER JOIN Tags t ON t.id = pt.TagId\nWHERE t.TagName=##tag1:string?geometry##\n  AND NOT(q.Tags LIKE '%<##tag2?mg.metric-geometry##>%')\nORDER BY q.CreationDate DESC\n---simply using \"q.Tags LIKE '%<##Tagname##>%'\" leads to some false positives\n---for example, searching for geometry gives also the questions tagged geometry-of-numbers",
        "CreationDate": "2020-06-25 15:31:32",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 1235045,
        "Title": "Find questions containing one of the given three tags - ordered by last activity",
        "Description": null,
        "QueryBody": "SELECT  q.Id as [Post Link], q.Tags, q.CreationDate, q.LastActivityDate\nFROM Posts q INNER JOIN PostTags pt ON q.Id=pt.PostId\nINNER JOIN Tags t ON t.id = pt.TagId\nWHERE (t.TagName=##tag1:string?abstract-algebra##) OR \n  (t.TagName=##tag2:string?geometry##) OR\n  (t.TagName=##tag3:string?discrete-mathematics##)\nORDER BY q.LastActivityDate DESC\n---simply using \"q.Tags LIKE '%<##Tagname##>%'\" leads to some false positives\n---for example, searching for geometry gives also the questions tagged geometry-of-numbers",
        "CreationDate": "2020-05-05 12:12:52",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 1235120,
        "Title": "Constituent Badges between a date range",
        "Description": null,
        "QueryBody": "SELECT \n   UserId as [User Link],\n   COUNT(Id) as 'Number Awarded'\nFROM Badges\nWHERE Name = 'Constituent'\nAND Date BETWEEN convert(datetime,##DayBefore:string?1970-01-01##) AND convert(datetime,##DayAfter:string?2020-05-15##)\nGROUP BY UserId\nORDER BY 'Number Awarded' DESC",
        "CreationDate": "2020-05-05 18:03:25",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 1235281,
        "Title": "Questions with the given tag (ordered by last activity)",
        "Description": null,
        "QueryBody": "SELECT  q.Id as [Post Link], q.Tags, q.CreationDate, q.LastActivityDate\nFROM Posts q INNER JOIN PostTags pt ON q.Id=pt.PostId\nINNER JOIN Tags t ON t.id = pt.TagId\nWHERE t.TagName=##tagName:string?geometry##\nORDER BY q.LastActivityDate DESC",
        "CreationDate": "2020-05-05 23:28:16",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 1235285,
        "Title": "Questions with the given tag containing the given text (case insensitive, by last activity)",
        "Description": null,
        "QueryBody": "SELECT  q.Id as [Post Link], q.Tags, q.CreationDate, q.LastActivityDate\nFROM Posts q INNER JOIN PostTags pt ON q.Id=pt.PostId\nINNER JOIN Tags t ON t.id = pt.TagId\nWHERE t.TagName=##tagname:string?geometry##\n  AND (lower(q.Body) LIKE '%##text?volume##%')\nORDER BY q.LastActivityDate DESC\n---simply using \"q.Tags LIKE '%<##Tagname##>%'\" leads to some false positives\n---for example, searching for geometry gives also the questions tagged geometry-of-numbers",
        "CreationDate": "2020-05-20 09:57:50",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 1235404,
        "Title": "Questions by a specific-user in the given tag",
        "Description": null,
        "QueryBody": "SELECT  q.Id as [Post Link], q.Tags, q.CreationDate\nFROM Posts q INNER JOIN PostTags pt ON q.Id=pt.PostId\nINNER JOIN Tags t ON t.id = pt.TagId\nWHERE (t.TagName=##tagName:string?geometry##)\n  AND (q.OwnerUserId=##userid?6094##)\nORDER BY q.CreationDate DESC",
        "CreationDate": "2020-05-06 09:27:30",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 1236783,
        "Title": "High scoring posts per month",
        "Description": null,
        "QueryBody": "SELECT \n  eomonth(CreationDate),\n  COUNT(Id) AS Posts,\n  SUM(case when PostTypeId = 1 then 1 else 0 end) AS Questions,\n  SUM(case when PostTypeId = 2 then 1 else 0 end) AS Answers\nFROM Posts\nWHERE Score>=##min?50##\nGROUP BY eomonth(CreationDate)\nORDER BY eomonth(CreationDate) ASC",
        "CreationDate": "2020-05-09 23:30:27",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 1236784,
        "Title": "High scoring non-CW posts per month",
        "Description": null,
        "QueryBody": "SELECT \n  eomonth(CreationDate),\n  COUNT(Id) AS Posts,\n  SUM(case when PostTypeId = 1 then 1 else 0 end) AS Questions,\n  SUM(case when PostTypeId = 2 then 1 else 0 end) AS Answers\nFROM Posts\nWHERE (Score>=##min?50##) AND (CommunityOwnedDate IS NULL)\nGROUP BY eomonth(CreationDate)\nORDER BY eomonth(CreationDate) ASC",
        "CreationDate": "2020-05-09 23:31:48",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 1236832,
        "Title": "Closed questions with the two given tags",
        "Description": null,
        "QueryBody": "SELECT  TOP ##number?500##\n  Id AS [Post Link],\n  CreationDate, ClosedDate, \n  OwnerUserId AS [User Link],\n  Score, ViewCount, AnswerCount, Tags\nFROM Posts\nWHERE (PostTypeId = 1) and (ClosedDate IS NOT NULL)\n  and (Tags LIKE '%<##tag1?down-votes##>%')\n  and (Tags LIKE '%<##tag2?specific-question##>%')\nORDER BY ClosedDate DESC",
        "CreationDate": "2020-05-10 09:57:54",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 1236852,
        "Title": "Activity tab for top users",
        "Description": null,
        "QueryBody": "SELECT  TOP(##num?200##)\n  Id AS [User Link],\n  Reputation,\n  activity = 'site:\/\/users\/' + CAST(Id AS varchar) + '?tab=topactivity|Activity',\n  profile = 'site:\/\/users\/' + CAST(Id AS varchar) + '?tab=profile|Profile'\n FROM Users\n ORDER BY Reputation DESC",
        "CreationDate": "2020-05-10 11:56:56",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 1236962,
        "Title": "Time until entering the HNQ",
        "Description": null,
        "QueryBody": "SELECT  TOP (##num?1000##)\np.Id AS [Post Link],\np.CreationDate,\nph.CreationDate,\nDATEDIFF(day, p.CreationDate, ph.CreationDate) AS Days,\nDATEDIFF(hour, p.CreationDate, ph.CreationDate) AS Hours,\n  DATEDIFF(minute, p.CreationDate, ph.CreationDate) AS Minutes\nFROM PostHistory ph INNER JOIN Posts p ON ph.PostId=p.Id\nWHERE ph.PostHistoryTypeId=52\n---52 = Question became hot network question\nORDER BY p.Id DESC",
        "CreationDate": "2020-05-11 03:40:16",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 1237033,
        "Title": "Shortest time until entering the HNQ",
        "Description": null,
        "QueryBody": "SELECT  TOP (##num?1000##)\np.Id AS [Post Link],\np.CreationDate,\nph.CreationDate,\nDATEDIFF(day, p.CreationDate, ph.CreationDate) AS Days,\nDATEDIFF(hour, p.CreationDate, ph.CreationDate) AS Hours,\nDATEDIFF(minute, p.CreationDate, ph.CreationDate) AS Minutes\nFROM PostHistory ph INNER JOIN Posts p ON ph.PostId=p.Id\nWHERE ph.PostHistoryTypeId=52\n---52 = Question became hot network question\nORDER BY DATEDIFF(minute, p.CreationDate, ph.CreationDate)",
        "CreationDate": "2020-05-11 10:58:05",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 1237467,
        "Title": "Search for exact string (case insensitive)",
        "Description": null,
        "QueryBody": "SELECT  TOP ##num?500##\n  Id As [Post Link], \n  url = 'site:\/\/posts\/' + CAST(Id AS varchar)+'\/revisions',\n  OwnerUserId AS [User Link], CreationDate, LastActivityDate,  Score, ViewCount, Body\n  FROM Posts \n---  WHERE (CONCAT(LOWER(Title),' ',LOWER(Body)) LIKE '%[^a-zA-Z]##text?matrice##[^a-zA-Z]%') \n  WHERE \n    (Body LIKE '%[^a-zA-Z]##text?matrice##[^a-zA-Z]%' COLLATE Latin1_General_CI_AI)\n   OR (Title LIKE '%[^a-zA-Z]##text##[^a-zA-Z]%' COLLATE Latin1_General_CI_AI)\n---searching for the exact word - not preceded-followed by another letter\n  ORDER BY CreationDate DESC",
        "CreationDate": "2020-05-12 09:12:52",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 1237865,
        "Title": "Duplicates of the given post (with some information on question)",
        "Description": null,
        "QueryBody": "SELECT \n  pl.PostId AS [Post Link],\n  p.Title,\n  p.Score,\n  p.ViewCount,\n  p.AnswerCount,\n  p.Tags\nFROM PostLinks pl INNER JOIN Posts p ON p.Id=pl.PostId\nWHERE (pl.RelatedPostId=##id?30732##) AND (pl.LinkTypeId=3)\n---LinkTypeId type of link\n---1 = Linked (PostId contains a link to RelatedPostId)\n---3 = Duplicate (PostId is a duplicate of RelatedPostId)",
        "CreationDate": "2020-05-13 11:54:52",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 1237917,
        "Title": "Recent questions with specific word in the title",
        "Description": null,
        "QueryBody": "SELECT  TOP(##num?100##)\n  Id AS [Post Link], Title, OwnerUserId AS [User Link], Score, Tags, CreationDate\nFROM Posts\nWHERE PostTypeId=1 AND Title Like '%##word?\\def##%'\nORDER BY Id DESC",
        "CreationDate": "2020-05-13 14:52:42",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 1237991,
        "Title": "Recent questions with specific word in the title - in the given tag",
        "Description": null,
        "QueryBody": "SELECT  TOP(##num?100##)\n  q.Id AS [Post Link], q.Title, q.OwnerUserId AS [User Link], q.Score, q.Tags, q.CreationDate\nFROM Posts q INNER JOIN PostTags pt ON q.Id = pt.PostId\n  INNER JOIN Tags t ON pt.TagId = t.Id\nWHERE (PostTypeId=1) \n  AND (q.Title Like '%##word?\\def##%')\n  AND (t.TagName=##tagname:string?sequences-and-series##)\nORDER BY q.Id DESC",
        "CreationDate": "2020-05-13 21:08:12",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 1237993,
        "Title": "Recent questions with specific word in the body - in the given tag",
        "Description": null,
        "QueryBody": "SELECT  TOP(##num?100##)\n  q.Id AS [Post Link], q.Title, q.OwnerUserId AS [User Link], q.Score, q.Tags, q.CreationDate\nFROM Posts q INNER JOIN PostTags pt ON q.Id = pt.PostId\n  INNER JOIN Tags t ON pt.TagId = t.Id\nWHERE (PostTypeId=1) \n  AND (q.Body Like '%##word?\\def##%')\n  AND (t.TagName=##tagname:string?sequences-and-series##)\nORDER BY q.Id DESC",
        "CreationDate": "2020-05-13 21:12:42",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 1238747,
        "Title": "Low Quality Posts on SO",
        "Description": null,
        "QueryBody": "SELECT  top ##TopN:int?200##\n  Id as [Post Link], score, Len(Body) [Length]\nfrom \n  Posts \nwhere  PostTypeId = ##PostTypeId:int?1##\n  and Score between ##ScoreLow:int?40## and ##ScoreHigh:int?100##\n  and Len(Body) < ##BodyLength:int?2000##\n  and YEAR(CreationDate) = ##Year## \norder by \n  Score desc, Len(Body) desc",
        "CreationDate": "2020-07-07 19:40:56",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 1238960,
        "Title": "Finding questions having ONLY the given tag",
        "Description": null,
        "QueryBody": "WITH  one given tag\nSELECT Posts.Id, Posts.Id  AS [Post Link],\n  OwnerUserId AS [User Link],\n  Score, ViewCount, AnswerCount, CreationDate, Tags\nFROM Posts\nWHERE Tags='<##tagname?calculus##>'\nORDER BY Posts.LastEditDate",
        "CreationDate": "2020-05-16 01:50:27",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 1239540,
        "Title": "Recent questions with specific word in the body ",
        "Description": null,
        "QueryBody": "SELECT  TOP(##num?100##)\n  q.Id AS [Post Link], q.Title, q.OwnerUserId AS [User Link], q.Score, q.Tags, q.CreationDate\nFROM Posts q INNER JOIN PostTags pt ON q.Id = pt.PostId\n  INNER JOIN Tags t ON pt.TagId = t.Id\nWHERE (PostTypeId=1) \n  AND (q.Body Like '%##word?urgent##%')\nORDER BY q.Id DESC",
        "CreationDate": "2020-05-17 11:36:29",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 1239671,
        "Title": "Recent questions with specific word in the body - limit on body length",
        "Description": null,
        "QueryBody": "SELECT  TOP(##num?100##)\n  q.Id AS [Post Link], q.Title, q.OwnerUserId AS [User Link], q.Score, q.Tags, q.CreationDate\nFROM Posts q \nWHERE (PostTypeId=1) \n  AND (len(q.Body)<=##len?150##)\n  AND (q.Body Like '%##word?urgent##%' COLLATE Latin1_General_CI_AI )\nORDER BY q.Id DESC",
        "CreationDate": "2020-05-18 01:52:54",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 1239672,
        "Title": "Recent questions with specific word in the title (case insensitive)",
        "Description": null,
        "QueryBody": "SELECT  TOP(##num?100##)\n  Id AS [Post Link], Title, OwnerUserId AS [User Link], Score, Tags, CreationDate\nFROM Posts\nWHERE (PostTypeId=1) AND (Title Like '%##word?urgent##%' COLLATE Latin1_General_CI_AI) \nORDER BY Id DESC",
        "CreationDate": "2020-05-17 22:28:24",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 1239762,
        "Title": "Edits By URL-Rewriter Bot Likely to Change License",
        "Description": null,
        "QueryBody": "SELECT  P.Id as [Post Link]\nFROM PostHistory PH\nLEFT JOIN Posts P ON PH.PostId = P.Id\nWHERE\n  PH.UserDisplayName = ##Editor:string?URL Rewriter Bot##\n  AND P.CreationDate between ##start:string?2018-01-01## and ##end:string?2018-05-02##",
        "CreationDate": "2020-05-18 04:35:38",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 1239813,
        "Title": "All answers by a specific user including tags",
        "Description": null,
        "QueryBody": "SELECT \n  a.Id AS [Post Link],\n  a.Score,\n  q.tags\nFROM Posts a INNER JOIN Posts q ON a.ParentId=q.Id\nWHERE (a.OwnerUserId=##userid##)\nORDER BY a.Id",
        "CreationDate": "2020-05-18 09:25:10",
        "validated": false,
        "QueryBody_Original": "SELECT \n  a.Id AS [Post Link],\n  a.Score,\n  q.tags\nFROM Posts a INNER JOIN Posts q ON a.ParentId=q.Id\nWHERE (a.OwnerUserId=##userid##)\nORDER BY a.Id"
    },
    {
        "QuerySetId": 1239822,
        "Title": "Answers by the given user with the given phrase (case insensitive, accent insensitive)",
        "Description": null,
        "QueryBody": "SELECT \n  Id AS [Post Link],\n  Score\nFROM Posts\nWHERE (PostTypeId=2) AND (OwnerUserId=##userid?25510##)\n  AND (Body Like '%##word?urgent##%' COLLATE Latin1_General_CI_AI)\nORDER BY Id\n\n ---COLLATE Latin1_General_CI_AI\n ---CI = case-insensitive.\n ---AI = accent-insensitive",
        "CreationDate": "2020-05-18 09:49:35",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 1239827,
        "Title": "Answers by a specific user in a given tag",
        "Description": null,
        "QueryBody": "SELECT \n  a.Id AS [Post Link],\n  a.Score,\n  q.tags\nFROM Posts a INNER JOIN Posts q ON a.ParentId=q.Id\n  INNER JOIN PostTags pt ON q.Id = pt.PostId\n  INNER JOIN Tags t ON pt.TagId = t.Id\nWHERE (a.OwnerUserId=##userid?25510##) AND (t.TagName=##tagname:string?sequences-and-series##)\nORDER BY a.Id",
        "CreationDate": "2020-05-18 10:32:19",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 1239857,
        "Title": "Questions by the given user with the given phrase (case insensitive, accent insensitive)",
        "Description": null,
        "QueryBody": "SELECT \n  Id AS [Post Link],\n  Score\nFROM Posts\nWHERE (PostTypeId=1) AND (OwnerUserId=##userid?25510##)\n  AND (Body Like '%##word?urgent##%' COLLATE Latin1_General_CI_AI)\nORDER BY Id\n\n ---COLLATE Latin1_General_CI_AI\n ---CI = case-insensitive.\n ---AI = accent-insensitive",
        "CreationDate": "2020-05-18 12:08:24",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 1239859,
        "Title": "Answers by the given user with the given phrase in the title (case, accent insensitive)",
        "Description": null,
        "QueryBody": "SELECT \n  a.Id AS [Post Link],\n  a.Score,\n  q.tags\nFROM Posts a INNER JOIN Posts q ON a.ParentId=q.Id\nWHERE (a.OwnerUserId=##userid?25510##) \n  AND (q.Title Like '%##word?urgent##%' COLLATE Latin1_General_CI_AI)\nORDER BY a.Id",
        "CreationDate": "2020-05-18 12:27:56",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 1240052,
        "Title": "Random 500 Post with Accepted Answers",
        "Description": null,
        "QueryBody": "SELECT  TOP(500)  p.Id, p.Title, p.Body, p.Score\nFROM Posts p\nJOIN PostTags pt ON p.Id = pt.PostId\nJOIN Tags t ON pt.TagId = t.Id\nJOIN Posts a ON p.AcceptedAnswerId = a.Id\nWHERE (t.TagName = ##TagName:string##) AND\n(p.AcceptedAnswerId IS NOT NULL) AND\n(p.CreationDate >= '##Date1?2016-01-01##') AND\n(p.CreationDate <= '##Date2?2019-12-31##')\nORDER BY RAND()",
        "CreationDate": "2020-05-18 21:30:35",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 1240520,
        "Title": "Relative distribution of voting and posting activities",
        "Description": null,
        "QueryBody": "WITH  Raw AS (\n  SELECT\n    CreationDate,\n    FLOOR(LOG(COUNT(*))\/LOG(##LogBase:float?1.1##)) AS LogVoteCount\n  FROM Votes\n  GROUP BY CreationDate\n)\nSELECT\n  POWER(##LogBase##, LogVoteCount) AS VoteCount,\n  COUNT(*) AS DayCount\nFROM Raw\nGROUP BY LogVoteCount\nORDER BY LogVoteCount",
        "CreationDate": "2020-05-19 18:50:14",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 1240744,
        "Title": "Recent questions with specific word in the body (case insensitive)",
        "Description": null,
        "QueryBody": "SELECT  TOP(##num?100##)\n  q.Id AS [Post Link], q.Title, q.OwnerUserId AS [User Link], q.Score, q.Tags, q.CreationDate\nFROM Posts q \nWHERE (PostTypeId=1) \n  AND (q.Body Like '%##word?urgent##%' COLLATE Latin1_General_CI_AI )\nORDER BY q.Id DESC",
        "CreationDate": "2020-05-20 09:00:47",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 1240745,
        "Title": "Questions with a specific word in the initial body (case insensitive)",
        "Description": null,
        "QueryBody": "SELECT  TOP(##num?100##)\n  p.Id AS [Post Link], \n  ph.Text AS [Initial Title], \n  concat('site:\/\/posts\/',\n        p.Id,\n        '\/revisions'\n        ) [Revisions Link],\n  p.OwnerUserId AS [User Link], p.Score, p.Tags, p.CreationDate\nFROM Posts p INNER JOIN PostHistory ph ON ph.PostId=p.Id\nWHERE (ph.PostHistoryTypeId=2) AND (p.PostTypeId=1) \n  AND (ph.Text Like '%##word?urgent##%' COLLATE Latin1_General_CI_AI) \nORDER BY p.Id DESC\n---PostHistoryTypeId (listed in the PostHistoryTypes table)\n---1 = Initial Title - initial title (questions only)\n---2 = Initial Body - initial post raw body text",
        "CreationDate": "2020-06-06 06:33:28",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 1240759,
        "Title": "Questions with tag1, without tag2, containing a specific phrase",
        "Description": null,
        "QueryBody": "SELECT  q.Id as [Post Link], q.Tags, q.CreationDate, q.LastActivityDate\nFROM Posts q INNER JOIN PostTags pt ON q.Id=pt.PostId\nINNER JOIN Tags t ON t.id = pt.TagId\nWHERE t.TagName=##tag1:string?geometry##\n  AND NOT(q.Tags LIKE '%<##tag2?mg.metric-geometry##>%')\n  AND (q.Body LIKE '%##text?volume##%' COLLATE Latin1_General_CI_AI)\nORDER BY q.CreationDate DESC\n---simply using \"q.Tags LIKE '%<##Tagname##>%'\" leads to some false positives\n---for example, searching for geometry gives also the questions tagged geometry-of-numbers",
        "CreationDate": "2020-05-20 10:01:35",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 1242029,
        "Title": "Questions with the given tag containing the given text (case insensitive)",
        "Description": null,
        "QueryBody": "SELECT  q.Id as [Post Link], q.Title, q.Tags, q.CreationDate, q.LastActivityDate\nFROM Posts q INNER JOIN PostTags pt ON q.Id=pt.PostId\nINNER JOIN Tags t ON t.id = pt.TagId\nWHERE t.TagName=##tagname:string?geometry##\n  AND (lower(q.Body) LIKE '%##text?volume##%')\nORDER BY q.CreationDate DESC\n---simply using \"q.Tags LIKE '%<##Tagname##>%'\" leads to some false positives\n---for example, searching for geometry gives also the questions tagged geometry-of-numbers",
        "CreationDate": "2020-05-24 05:52:35",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 1242156,
        "Title": "Post length by user reputation",
        "Description": null,
        "QueryBody": "SELECT \n  MAX(u.Reputation) AS Reputation,\n  AVG(LEN(p.Body)) AS AvgBodyLength\nFROM Posts p\nINNER JOIN Users u ON p.OwnerUserId = u.Id\nWHERE p.PostTypeId IN (1, 2)\n  AND u.Id = ##UserId##\nGROUP BY u.Id\nORDER BY MAX(u.Reputation) ASC;",
        "CreationDate": "2020-05-26 04:27:46",
        "validated": false,
        "QueryBody_Original": "SELECT \n  MAX(u.Reputation) AS Reputation,\n  AVG(LEN(p.Body)) AS AvgBodyLength\nFROM Posts p\nINNER JOIN Users u ON p.OwnerUserId = u.Id\nWHERE p.PostTypeId IN (1, 2)\n  AND u.Id = ##UserId##\nGROUP BY u.Id\nORDER BY MAX(u.Reputation) ASC;"
    },
    {
        "QuerySetId": 1244098,
        "Title": "Dynamic pivot with year as column",
        "Description": null,
        "QueryBody": "DECLARE  @dtJoinDT AS NVARCHAR(20)='5\/16\/2020'\n\n\nSELECT CAST((DATEDIFF(YEAR,CAST (@dtJoinDT AS DATE),GETDATE())) AS NUMERIC(18,3)) 'tenure'",
        "CreationDate": "2020-05-29 08:37:01",
        "validated": false,
        "QueryBody_Original": "DECLARE  @dtJoinDT AS NVARCHAR(20)='5\/16\/2020'\n\n\nSELECT CAST((DATEDIFF(YEAR,CAST (@dtJoinDT AS DATE),GETDATE())) AS NUMERIC(18,3)) 'tenure'"
    },
    {
        "QuerySetId": 1246051,
        "Title": "All my answers sort score , viewcount, creationDate",
        "Description": "All my answers on the site\r\n",
        "QueryBody": "DECLARE  @UserId int = ##UserId##\nSelect * from \n(SELECT \n    q.id aid,\n    a.Id AS [Post Link],\n    CASE WHEN q.AcceptedAnswerId=a.Id THEN 'Accepted' END AS Accepted,\n    a.Score\nFROM\n    Posts q\n  INNER JOIN\n    Posts a ON q.Id = a.ParentId\nWHERE\n    a.OwnerUserId = @UserId\n  AND\n    a.PostTypeId = 2\n)  AA \nInner join \n(SELECT DISTINCT Question.Id as bid, Question.CreationDate AS [Date], Question.ViewCount \nFROM Posts as Answers, Posts as Question \nWHERE Answers.PostTypeId = 2 \nAND Answers.OwnerUserId = @UserId \nAND Question.Id = Answers.ParentId\n) BB on AA.aid = BB.bid\nORDER BY  Score ASC , ViewCount DESC , DATE ASC;",
        "CreationDate": "2020-06-02 00:00:30",
        "validated": false,
        "QueryBody_Original": "DECLARE  @UserId int = ##UserId##\nSelect * from \n(SELECT \n    q.id aid,\n    a.Id AS [Post Link],\n    CASE WHEN q.AcceptedAnswerId=a.Id THEN 'Accepted' END AS Accepted,\n    a.Score\nFROM\n    Posts q\n  INNER JOIN\n    Posts a ON q.Id = a.ParentId\nWHERE\n    a.OwnerUserId = @UserId\n  AND\n    a.PostTypeId = 2\n)  AA \nInner join \n(SELECT DISTINCT Question.Id as bid, Question.CreationDate AS [Date], Question.ViewCount \nFROM Posts as Answers, Posts as Question \nWHERE Answers.PostTypeId = 2 \nAND Answers.OwnerUserId = @UserId \nAND Question.Id = Answers.ParentId\n) BB on AA.aid = BB.bid\nORDER BY  Score ASC , ViewCount DESC , DATE ASC;"
    },
    {
        "QuerySetId": 1246452,
        "Title": "Number of Votes for Electorate, Civic Duty and Other",
        "Description": null,
        "QueryBody": "SELECT  COUNT(u.id) as num_achievers, SUM(UpVotes)+SUM(DownVotes) as num_votes\n-- FROM Users u\n-- INNER JOIN Badges b1\n-- ON (b1.Name IN ('Electorate') and b1.UserId=u.Id);\n\n-------------------- CIVIC DUTY\n-- SELECT COUNT(u.id) as num_achievers, SUM(UpVotes)+SUM(DownVotes) as num_votes\n-- FROM Users u\n-- INNER JOIN Badges b1\n-- ON (b1.Name IN ('Civic Duty') and b1.UserId=u.Id)\n-- LEFT JOIN Badges b2\n-- ON (b2.Name IN ('Electorate') and b2.UserId=u.Id)\n-- WHERE b2.UserId IS NULL;\n\n-------------------- OTHER\nSELECT COUNT(u.id) as num_achievers, SUM(UpVotes)+SUM(DownVotes) as num_votes\nFROM Users u\nLEFT JOIN Badges b1\nON (b1.Name IN ('Civic Duty') and b1.UserId=u.Id)\nLEFT JOIN Badges b2\nON (b2.Name IN ('Electorate') and b2.UserId=u.Id)\nWHERE b1.UserId IS NULL AND b2.UserId IS NULL;",
        "CreationDate": "2020-07-30 16:44:28",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 1246790,
        "Title": "Determine the Sharpness of a Word",
        "Description": null,
        "QueryBody": "DECLARE  @ VARCHAR(100)='GUALF'\nSELECT\nSUM(iif(type='P',nullif(substring(\ntranslate(@,'AVNZMWCUSO','4455662210'),\nnumber,1),substring(@,number,1))-3,0))\nFROM spt_values",
        "CreationDate": "2020-06-04 01:17:39",
        "validated": false,
        "QueryBody_Original": "DECLARE  @ VARCHAR(100)='GUALF'\nSELECT\nSUM(iif(type='P',nullif(substring(\ntranslate(@,'AVNZMWCUSO','4455662210'),\nnumber,1),substring(@,number,1))-3,0))\nFROM spt_values"
    },
    {
        "QuerySetId": 1248328,
        "Title": "Users eligible to vote in election",
        "Description": null,
        "QueryBody": "SELECT \n  COUNT(Id)\nFROM Users\nWHERE Reputation>=##min?150##",
        "CreationDate": "2020-06-07 14:59:15",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 1248329,
        "Title": "Users eligible to vote in election (by month when they were last active)",
        "Description": null,
        "QueryBody": "SELECT \n  eomonth(LastAccessDate) AS Month,\n  COUNT(Id) AS Count\nFROM Users\nWHERE Reputation>=##min?150##\nGROUP BY eomonth(LastAccessDate)\nORDER BY eomonth(LastAccessDate) DESC",
        "CreationDate": "2020-06-07 15:02:36",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 1248331,
        "Title": "Number\/score from answers and from questions for top users (only non-CW)",
        "Description": null,
        "QueryBody": "SELECT  TOP(##num?500##)\n  p.OwnerUserId AS [User Link],\n  p.OwnerDisplayName,\n  SUM(p.Score) AS [Total Score],\n  COUNT(p.Id) AS [Total Posts],\n  SUM(case when p.PostTypeId = 1 then 1 else 0 end) AS [Total Questions],\n  SUM(case when p.PostTypeId = 2 then 1 else 0 end) AS [Total Answers],\n  SUM(case when p.PostTypeId = 1 then p.Score else 0 end) AS [Score Questions],\n  SUM(case when p.PostTypeId = 2 then p.Score else 0 end) AS [Score Answers],\n  ROUND((SUM(case when p.PostTypeId = 2 then 1 else 0 end))*100.0\/(COUNT(p.Id)),2) AS [Percentage Answers]\nFROM Posts p\nWHERE p.CommunityOwnedDate IS NULL\nGROUP BY p.OwnerUserId, p.OwnerDisplayName\nORDER BY SUM(p.Score) DESC",
        "CreationDate": "2020-06-07 15:44:55",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 1248635,
        "Title": "Finding comments with specific keywords for specific user id",
        "Description": null,
        "QueryBody": "SELECT  \n c.PostId as [Post Id],\n c.Id as [Comment Id],\n c.Id as [Comment Link],\n c.CreationDate as [Date of Posting]\nFROM\nUsers u\nINNER JOIN Comments c ON u.Id = c.UserId\nWHERE c.Text like '%##Keyword##%' and c.Userid=##UserId##\nORDER BY\nc.CreationDate asc;",
        "CreationDate": "2020-07-07 11:49:04",
        "validated": false,
        "QueryBody_Original": "SELECT  \n c.PostId as [Post Id],\n c.Id as [Comment Id],\n c.Id as [Comment Link],\n c.CreationDate as [Date of Posting]\nFROM\nUsers u\nINNER JOIN Comments c ON u.Id = c.UserId\nWHERE c.Text like '%##Keyword##%' and c.Userid=##UserId##\nORDER BY\nc.CreationDate asc;"
    },
    {
        "QuerySetId": 1248680,
        "Title": "Number of posts by moderators per month",
        "Description": null,
        "QueryBody": "SELECT \n  eomonth(p.creationdate) AS Month,\n  Count(p.Id) AS Count\nFROM Users u INNER JOIN Posts p ON p.OwnerUserId=u.Id\nWHERE u.Id IN (##list?2,3,66,121,1409,2000,2926##)\nGROUP BY eomonth(p.creationdate)\nORDER BY eomonth(p.creationdate)",
        "CreationDate": "2020-06-08 23:14:23",
        "validated": false,
        "QueryBody_Original": "SELECT \n  eomonth(p.creationdate) AS Month,\n  Count(p.Id) AS Count\nFROM Users u INNER JOIN Posts p ON p.OwnerUserId=u.Id\nWHERE u.Id IN (##list?2,3,66,121,1409,2000,2926##)\nGROUP BY eomonth(p.creationdate)\nORDER BY eomonth(p.creationdate)"
    },
    {
        "QuerySetId": 1249320,
        "Title": "Top users in Khorasan province in Iran",
        "Description": null,
        "QueryBody": "SELECT  TOP 1000\n    u.Id as [User Link]\n    ,COUNT(*) AS UpVotes \nFROM Tags t\n    INNER JOIN PostTags pt ON pt.TagId = t.id\n    INNER JOIN Posts p ON p.ParentId = pt.PostId\n    INNER JOIN Votes v ON v.PostId = p.Id and v.VoteTypeId = 2\n    inner join Users u on u.Id = p.OwnerUserId\nWHERE \n    p.CommunityOwnedDate IS NULL\n    and lower(t.TagName) =  ##tagname:string## \n    and (\n      lower(Location) LIKE ('%birjand%')\n     )                 \n         \n    and LEN(Location) > 1 \nGROUP BY u.Id\nORDER BY UpVotes DESC",
        "CreationDate": "2020-06-10 11:09:21",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 1250951,
        "Title": "Posts with votes before they were created",
        "Description": null,
        "QueryBody": "SELECT  DISTINCT p.Id AS [Post Link]\nFROM Votes v INNER JOIN Posts p ON v.PostId=p.Id\nWHERE DATEADD(day,##min?100##,v.Creationdate)<p.CreationDate",
        "CreationDate": "2020-06-12 22:52:34",
        "validated": false,
        "QueryBody_Original": "SELECT  DISTINCT p.Id AS [Post Link]\nFROM Votes v INNER JOIN Posts p ON v.PostId=p.Id\nWHERE DATEADD(day,##min?100##,v.Creationdate)<p.CreationDate"
    },
    {
        "QuerySetId": 1250952,
        "Title": "Votes cast before the post was created",
        "Description": null,
        "QueryBody": "SELECT \nv.CreationDate,p.CreationDate,\np.Id AS [Post Link]\nFROM Votes v INNER JOIN Posts p ON v.PostId=p.Id\nWHERE DATEADD(day,##min?100##,v.Creationdate)<p.CreationDate",
        "CreationDate": "2020-06-12 22:53:50",
        "validated": false,
        "QueryBody_Original": "SELECT \nv.CreationDate,p.CreationDate,\np.Id AS [Post Link]\nFROM Votes v INNER JOIN Posts p ON v.PostId=p.Id\nWHERE DATEADD(day,##min?100##,v.Creationdate)<p.CreationDate"
    },
    {
        "QuerySetId": 1251073,
        "Title": "Location containing the given string",
        "Description": null,
        "QueryBody": "SELECT \n    Top ##num?500##\n    ROW_NUMBER() OVER(ORDER BY Reputation DESC) AS [#], \n    Id AS [User Link], \n    Reputation,\n    Location,\n    --CreationDate,\n    LastAccessDate,\n    UpVotes,\n    DownVotes\n    \nFROM\n    Users\nWHERE\n  (Location LIKE '%##city?slovenska##%' COLLATE Latin1_General_CI_AI)\n  and LEN(Location) > 1\n \n ORDER BY Reputation DESC",
        "CreationDate": "2020-06-13 12:39:33",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 1251336,
        "Title": "Long vs Short Tags view counts",
        "Description": null,
        "QueryBody": "SELECT \n  [Short Tags Avg Views] = AVG(CAST(ViewCount AS FLOAT)),\n  [Short Tags Avg Score] = AVG(CAST(Score AS FLOAT))\nFROM Posts\nWHERE LEN(Tags) < 5\n\nSELECT\n  [Long Tags Avg Views] = AVG(CAST(ViewCount AS FLOAT)),\n  [Long Tags Avg Score] = AVG(CAST(Score AS FLOAT))\nFROM Posts\nWHERE LEN(Tags) >= 5",
        "CreationDate": "2020-06-14 15:57:39",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 1251457,
        "Title": "Top 100 most viewed on a tag",
        "Description": null,
        "QueryBody": "SELECT  TOP 100 p.ViewCount, p.Id as [Post Link]\nFROM dbo.Posts p\nINNER JOIN dbo.PostTags pt ON p.Id = pt.PostId\nINNER JOIN dbo.Tags t ON pt.TagId = t.Id\nWHERE p.postTypeId = 1\nAND t.TagName = ##TagName:string?hugo##\nORDER BY p.ViewCount DESC;",
        "CreationDate": "2020-06-15 01:39:50",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 1251592,
        "Title": "Search for posts by deleted user",
        "Description": null,
        "QueryBody": "SELECT  CreationDate, Id as [Post Link] FROM Posts p WHERE OwnerDisplayName = ##Name:string##\nORDER BY CreationDate ASC",
        "CreationDate": "2020-07-01 18:46:24",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 1251596,
        "Title": "Does this month start on a Monday?",
        "Description": null,
        "QueryBody": "DECLARE  @ int=6\nDECLARE @y int = 2020\n\nPRINT datediff(d,0,concat(@+@y*100,14))%7\/6",
        "CreationDate": "2020-06-15 11:44:33",
        "validated": false,
        "QueryBody_Original": "DECLARE  @ int=6\nDECLARE @y int = 2020\n\nPRINT datediff(d,0,concat(@+@y*100,14))%7\/6"
    },
    {
        "QuerySetId": 1251658,
        "Title": "Find my comments that contain XYZ",
        "Description": null,
        "QueryBody": "SELECT  C.Id AS [Comment Link]\nFROM Comments C\nWHERE C.UserId = ##UserId##\nAND UPPER(C.Text) LIKE UPPER('%##CommentText##%')",
        "CreationDate": "2020-06-16 01:56:14",
        "validated": false,
        "QueryBody_Original": "SELECT  C.Id AS [Comment Link]\nFROM Comments C\nWHERE C.UserId = ##UserId##\nAND UPPER(C.Text) LIKE UPPER('%##CommentText##%')"
    },
    {
        "QuerySetId": 1251727,
        "Title": "Find comments containing a particular phrase on another user's answers",
        "Description": "Returns all comments (linked) containing a particular phrase on answers by a particular user. Comments by the answerer are not included.",
        "QueryBody": "SELECT  C.Id AS [Comment Link]\nFROM Comments C\n    JOIN Posts P ON C.PostId = P.Id\nWHERE P.PostTypeId = 2\n    AND P.OwnerUserId = ##UserId:int##\n    AND UPPER(C.Text) LIKE UPPER('%##CommentContains##%')\n    AND C.UserId <> ##UserId##",
        "CreationDate": "2020-06-16 02:09:07",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 1251919,
        "Title": "CW posts edited by few users",
        "Description": null,
        "QueryBody": "SELECT  TOP(##num?100##)\n  COUNT(DISTINCT ph.UserId) AS [Number of Users],\n  COUNT(DISTINCT ph.RevisionGUID) AS [Number of Revisions],\n  p.Id [AS Post Link],\n  revisions = 'site:\/\/posts\/' + CAST(p.Id AS varchar)+'\/revisions'\nFROM PostHistory ph INNER JOIN Posts p ON ph.PostId=p.Id\nWHERE (p.CommunityOwnedDate IS NOT NULL)\n---only CW posts\n  AND (ph.PostHistoryTypeId in (1,2,3,4,5,6,7,8,9))\n---only edits\nGROUP BY p.Id\nORDER BY COUNT(DISTINCT ph.UserId)",
        "CreationDate": "2020-06-16 14:00:19",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 1251937,
        "Title": "Posts with a few edits after CW-ification",
        "Description": null,
        "QueryBody": "WITH  cw_cte as\n(SELECT\n  ph.Id AS cwid,\n  ph.PostId AS pid\nFROM PostHistory ph INNER JOIN Posts p ON ph.PostId=p.Id\nWHERE (ph.PostHistoryTypeId=16)\n---16 = Community Owned - post now community owned\n)\n\nSELECT TOP(##num?100##)\n  COUNT (DISTINCT RevisionGUID),\n  ph.PostId AS [Post Link],\n  revisions = 'site:\/\/posts\/' + CAST(ph.PostId AS varchar)+'\/revisions'\nFROM cw_cte c INNER JOIN PostHistory ph ON (ph.PostId=c.pid) AND (ph.Id>c.cwid)\n---after CW\nWHERE (ph.PostHistoryTypeId in (1,2,3,4,5,6,7,8,9))\n---only edits\nGROUP BY ph.PostId\nORDER BY COUNT (DISTINCT RevisionGUID) ASC",
        "CreationDate": "2020-06-16 15:16:53",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 1251938,
        "Title": "Posts with many edits after CW-ification",
        "Description": null,
        "QueryBody": "WITH  cw_cte as\n(SELECT\n  ph.Id AS cwid,\n  ph.PostId AS pid\nFROM PostHistory ph INNER JOIN Posts p ON ph.PostId=p.Id\nWHERE (ph.PostHistoryTypeId=16)\n---16 = Community Owned - post now community owned\n)\n\nSELECT TOP(##num?100##)\n  COUNT (DISTINCT RevisionGUID) AS Count,\n  ph.PostId AS [Post Link],\n  revisions = 'site:\/\/posts\/' + CAST(ph.PostId AS varchar)+'\/revisions'\nFROM cw_cte c INNER JOIN PostHistory ph ON ph.PostId=c.pid\nWHERE (ph.PostHistoryTypeId in (1,2,3,4,5,6,7,8,9))\n---only edits\n  AND (ph.Id>c.cwid)\n---after CW\nGROUP BY ph.PostId\nORDER BY COUNT (DISTINCT RevisionGUID) DESC",
        "CreationDate": "2020-06-16 15:14:00",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 1252308,
        "Title": "Tags without tag wikis or excerpts",
        "Description": null,
        "QueryBody": "SELECT \n  T.TagName, \n  T.WikiPostId as Wiki, \n  T.ExcerptPostId as Excerpt,\n  T.Count as Questions,\n  SE.Id as [Post Link]\nFrom\n  Tags as T\n  left join SuggestedEdits as SE on T.WikiPostId = SE.PostId\nwhere\n  (\n    T.WikiPostId is null \n    or \n    T.ExcerptPostId is null\n  )\n  and\n  T.TagName like ##TagName:string?google-%##\n  and\n  (\n  SE.PostId is null or ( SE.ApprovalDate is null and SE.RejectionDate is null )\n  )\nORDER BY\n  Questions desc",
        "CreationDate": "2020-09-20 14:25:05",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 1253108,
        "Title": "Suggested edits on a specific post",
        "Description": null,
        "QueryBody": "SELECT \n  Id AS [Suggested Edit Link],\n  CreationDate,\n  OwnerUserId,\n  Comment,\n  Text,\n  Title,\n  Tags\nFROM SuggestedEdits\nWHERE PostId=##postid?3376##\nORDER BY Id",
        "CreationDate": "2020-06-18 21:15:02",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 1253292,
        "Title": "Trend of \"thank\" comments posted for the last [period] under [post type]",
        "Description": null,
        "QueryBody": "SELECT \ncast(CreationDate as Date),\nCount(Id)\nfrom\nComments\nwhere\nlower(Text) like '%thank%'\nand\nlen(Text) < 50\nand\nCreationDate >= dateadd(day, ##numDays?-7##, getdate())\ngroup by\ncast(CreationDate as Date)",
        "CreationDate": "2020-06-19 04:16:42",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 1253327,
        "Title": "Combined posthistory (question and all the answers) - only edits",
        "Description": null,
        "QueryBody": "SELECT \n  p.Id, \n  CASE \n    WHEN (p.ParentId IS NULL) \n    THEN 'Question'\n    ELSE 'Answer'\n  END,\n  ph.Id, \n  ph.PostHistoryTypeId,\n  CASE ph.PostHistoryTypeId\n    WHEN 1 THEN 'Initial Title'\n    WHEN 2 THEN 'Initial Body'\n    WHEN 3 THEN 'Initial Tags'\n    WHEN 4 THEN 'Edit Title'\n    WHEN 5 THEN 'Edit Body'\n    WHEN 6 THEN 'Edit Tags'\n    WHEN 7 THEN 'Initial Title'\n    WHEN 8 THEN 'Initial Body'\n    WHEN 9 THEN 'Initial Tags'\n  END,\n  ph.UserId AS [User Link],\n  ph.Comment\nFROM PostHistory ph INNER JOIN Posts p ON p.Id=ph.PostId\nWHERE coalesce(p.parentid, p.id)=##qid?85211##\n---either the post or the parent has this id\n  AND (ph.PostHistoryTypeId in (1,2,3,4,5,6,7,8,9))\n---only edits  \nORDER BY ph.Id DESC",
        "CreationDate": "2020-06-19 06:01:19",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 1253700,
        "Title": "Top Viewed Questions for One Tag",
        "Description": null,
        "QueryBody": "SELECT  TOP 1000 p.ViewCount * 1.0 \/ DATEDIFF(DD, p.CreationDate, GETDATE()) AS ViewsPerDay\n, p.ViewCount AS TotalViews, p.Id AS [Post Link]\nFROM dbo.Posts p\nINNER JOIN dbo.PostTags pt ON p.Id = pt.PostId\nINNER JOIN dbo.Tags t ON pt.TagId = t.Id\nWHERE p.PostTypeId = 1 \/* Questions *\/\nAND t.TagName = ##Tagname:string?dynamic-programming##\nAND p.CreationDate < DATEADD(dd, -14, GETDATE())\nORDER BY p.ViewCount * 1.0 \/ DATEDIFF(DD, p.CreationDate, GETDATE()) DESC;",
        "CreationDate": "2020-06-20 04:11:34",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 1254232,
        "Title": "have my posts be edited for CommonMark",
        "Description": null,
        "QueryBody": "SELECT  ph.postid as [Post Link]\nfrom posthistory ph\ninner join posts p on p.id = ph.postid\nwhere posthistorytypeid = 5\nand userid = -1\nand owneruserid = ##userid?1839439##\nand comment = 'Commonmark migration'",
        "CreationDate": "2020-06-21 18:02:22",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 1254432,
        "Title": "Number of unhandled flags since [period]",
        "Description": null,
        "QueryBody": "SELECT \nCAST(CreationDate as DATE) as Date,\nCount(Id) as Unhandled\nfrom\nPendingFlags\nwhere\nCreationDate >= dateadd(##metric?day##, ##numDays?-7##, getdate())\ngroup by\nCAST(CreationDate as DATE)\norder by\nDate",
        "CreationDate": "2020-06-24 12:25:29",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 1254733,
        "Title": "select distinct * from posts p inner join posttags pt on pt.postid = p.id inner join tags t on pt.ta",
        "Description": null,
        "QueryBody": "SELECT  TOP ##NumberOfQuestionsToFetch##\n          question.Id AS QuestionId, \n          question.Score AS QuestionScore,\n          question.Title AS QuestionTitle,\n          question.Body AS QuestionBody,\n          question.Tags,\n          answer.Id AS AcceptedAnswerId,\n          answer.Score AS AnswerScore,\n          answer.Body AS AnswerBody\nFROM Posts AS question\nJOIN Posts AS answer on question.AcceptedAnswerId = answer.Id\nINNER JOIN PostTags AS question_tags on question_tags.PostId = \nquestion.Id\nINNER JOIN Tags on question_tags.TagId = Tags.Id\nWHERE question.Id > ##LastFetchedQuestionId## AND \n      Tags.TagName IN ('##Tag##')\nORDER BY question.Id ASC",
        "CreationDate": "2020-06-23 23:50:00",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 1254771,
        "Title": "Questions bookmarked or commented on by user",
        "Description": null,
        "QueryBody": "SELECT  q.Id AS [Post Link], q.CreationDate, q.Score, q.Tags,\n  b.CreationDate AS 'Bookmark date',\n  c.CreationDate AS 'Comment date',\n  c.Id AS [Comment Link]\n  FROM Posts AS q\n  LEFT OUTER JOIN Votes AS b\n    ON q.Id = b.PostId\n   AND b.VoteTypeId = 5 -- Bookmark\n   AND b.UserId = ##UserId:int##\n  OUTER APPLY (\n    SELECT TOP 1 Id, CreationDate\n      FROM Comments\n      WHERE PostId = q.Id\n        AND UserId = ##UserId:int##\n      ORDER BY CreationDate\n  ) c\n  WHERE b.Id IS NOT NULL OR c.Id IS NOT NULL\n  ORDER BY q.CreationDate DESC",
        "CreationDate": "2020-06-23 13:33:22",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 1254894,
        "Title": "Questions with the most dupes",
        "Description": null,
        "QueryBody": "WITH  counts_cte AS (SELECT\n  RelatedPostId AS id,\n  COUNT(PostId) AS count\nFROM PostLinks\nWHERE (LinkTypeId=3)\nGROUP BY RelatedPostId\n---LinkTypeId type of link\n---1 = Linked (PostId contains a link to RelatedPostId)\n---3 = Duplicate (PostId is a duplicate of RelatedPostId)\n)\n\nSELECT TOP(##num?500##)\n  p.Id AS [Post Link],\n  c.count,\n  p.Score,\n  p.ViewCount,\n  p.AnswerCount,\n  p.Tags\nFROM counts_cte c INNER JOIN Posts p ON p.id=c.id\nORDER BY c.count DESC",
        "CreationDate": "2020-06-23 18:19:04",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 1255085,
        "Title": "Select Users based on Creation Date",
        "Description": null,
        "QueryBody": "SELECT  *\nFROM Users\nWHERE convert(date, CreationDate) >= convert(date, ##Start:string##) AND convert(date, CreationDate) <= convert(date, ##End:string##)",
        "CreationDate": "2020-06-26 05:30:38",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 1255086,
        "Title": "Comments by users within specific creation date",
        "Description": null,
        "QueryBody": "SELECT  *\nFROM Comments c\nINNER JOIN Users u ON u.Id = c.UserId\nWHERE convert(date, u.CreationDate) = convert(date, ##regDate:string##) \nAND convert(date, c.CreationDate) >= convert(date, ##Start:string##)\nAND convert(date, c.CreationDate) <= convert(date, ##End:string##)\nORDER BY u.Id, convert(date, c.CreationDate)",
        "CreationDate": "2020-06-24 11:32:25",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 1255090,
        "Title": "Count number of nameless users based on creation date",
        "Description": null,
        "QueryBody": "SELECT  COUNT(Id), convert(date, CreationDate)\nFROM Users\nWHERE convert(date, CreationDate) >= convert(date, ##Start:string##) AND convert(date, CreationDate) <= convert(date, ##End:string##) AND upper(DisplayName) Like '%GOOGLE%'\nGROUP BY convert(date, CreationDate)\nORDER BY convert(date, CreationDate)",
        "CreationDate": "2020-07-18 12:55:10",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 1255204,
        "Title": "(count) Questions posted by users within specific creation date",
        "Description": null,
        "QueryBody": "SELECT  convert(date, p.CreationDate) AS date, p.PostTypeId AS type, COUNT(p.Id) AS number   \nFROM Posts p\nINNER JOIN Users u ON u.Id = p.OwnerUserId\nWHERE UPPER(u.Location) LIKE '%, TX%'\nAND u.Reputation >= 10000\nAND convert(date, p.CreationDate) >= convert(date, ##Start:string##)\nAND convert(date, p.CreationDate) <= convert(date, ##End:string##)\nAND (p.PostTypeId = 1 OR p.PostTypeId = 2)\nGROUP BY convert(date, p.CreationDate), p.PostTypeId\nORDER BY convert(date, p.CreationDate)",
        "CreationDate": "2020-07-03 13:25:08",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 1255218,
        "Title": "Number of [post type] since [period] posted",
        "Description": null,
        "QueryBody": "SELECT \ncount(Id)\nfrom\nPosts\nwhere\nCreationDate >= dateadd(##metric?day##, ##numDays?-7##, getdate())\nand\nPostTypeId = iif( ##type:string?answer## = 'answer' , 2 , 1 )",
        "CreationDate": "2020-06-24 12:22:31",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 1255248,
        "Title": "Users with the most amount of posts per type",
        "Description": null,
        "QueryBody": "SELECT  TOP 200 p.OwnerUserId AS [User Link], COUNT(p.Id) AS [Count]\nFROM Posts p\nWHERE p.PostTypeId = ##PostType##\nGROUP BY p.OwnerUserId\nORDER BY COUNT(p.Id) DESC",
        "CreationDate": "2020-06-24 14:01:20",
        "validated": false,
        "QueryBody_Original": "SELECT  TOP 200 p.OwnerUserId AS [User Link], COUNT(p.Id) AS [Count]\nFROM Posts p\nWHERE p.PostTypeId = ##PostType##\nGROUP BY p.OwnerUserId\nORDER BY COUNT(p.Id) DESC"
    },
    {
        "QuerySetId": 1256217,
        "Title": "A user comments on a specific tag",
        "Description": null,
        "QueryBody": "SELECT  Comments.Id as [Comment Link]\nFROM Comments INNER JOIN\nPosts ON Comments.PostId = Posts.Id\nWHERE Tags LIKE '%##Tag##%'\nAND UserId=##UesrId##",
        "CreationDate": "2020-06-27 02:08:24",
        "validated": false,
        "QueryBody_Original": "SELECT  Comments.Id as [Comment Link]\nFROM Comments INNER JOIN\nPosts ON Comments.PostId = Posts.Id\nWHERE Tags LIKE '%##Tag##%'\nAND UserId=##UesrId##"
    },
    {
        "QuerySetId": 1256315,
        "Title": "Posts reviewed by a moderator",
        "Description": null,
        "QueryBody": "SELECT \n  p.Id as [Post Link],\n  v.CreationDate\nFROM Votes as v\nINNER JOIN Posts as p\nON \n  v.PostId = p.Id\n  AND p.OwnerUserId = ##UserId##\nWHERE v.VoteTypeId = 15",
        "CreationDate": "2020-06-27 15:24:21",
        "validated": false,
        "QueryBody_Original": "SELECT \n  p.Id as [Post Link],\n  v.CreationDate\nFROM Votes as v\nINNER JOIN Posts as p\nON \n  v.PostId = p.Id\n  AND p.OwnerUserId = ##UserId##\nWHERE v.VoteTypeId = 15"
    },
    {
        "QuerySetId": 1256374,
        "Title": "Number of questions closed as duplicates",
        "Description": null,
        "QueryBody": "DECLARE  @question int = 1;\nDECLARE @closed int = 10;\n\nselect\nyear(Posts.CreationDate),\ncount(Posts.Id)\nfrom\nPosts\ninner join PostHistory as PH on PH.PostId = Posts.Id\nwhere\nPosts.PostTypeId = @question\nand\nPH.PostHistoryTypeId = @closed\nand\ncast(PH.Comment as nvarchar) in ('1', '101')\ngroup by\nyear(Posts.CreationDate)\norder by\nyear(Posts.CreationDate)",
        "CreationDate": "2020-06-27 19:01:34",
        "validated": false,
        "QueryBody_Original": "DECLARE  @question int = 1;\nDECLARE @closed int = 10;\n\nselect\nyear(Posts.CreationDate),\ncount(Posts.Id)\nfrom\nPosts\ninner join PostHistory as PH on PH.PostId = Posts.Id\nwhere\nPosts.PostTypeId = @question\nand\nPH.PostHistoryTypeId = @closed\nand\ncast(PH.Comment as nvarchar) in ('1', '101')\ngroup by\nyear(Posts.CreationDate)\norder by\nyear(Posts.CreationDate)"
    },
    {
        "QuerySetId": 1256455,
        "Title": "How many questions included [tag] that was later removed?",
        "Description": null,
        "QueryBody": "DECLARE  @question int = 1;\nDECLARE @retag int = 6;\nDECLARE @tagToSearch nvarchar(35) = ##tag1:string?gas##;\nDECLARE @tagToSearch2 nvarchar(35) = ##tag2:string?google-apps-script##;\n\nselect\ncast(PH.CreationDate as date),\nPosts.Tags,\nPosts.Id as [Post Link]\nfrom\nPosts\ninner join PostHistory as PH on PH.PostId = Posts.Id\nwhere\nPosts.PostTypeId = @question\nand\nPH.PostHistoryTypeId = @retag\nand\n(\n  charindex('<' + @tagToSearch + '>', PH.Text) > 0\n  and\n  charindex('<' + @tagToSearch + '>', Posts.Tags) = 0\n  and\n  charindex('<' + @tagToSearch2 + '>', Posts.Tags) > 0\n)\ngroup by\nPosts.Tags, Posts.Id, cast(PH.CreationDate as date)\norder by\ncast(PH.CreationDate as date) desc",
        "CreationDate": "2020-07-05 21:52:41",
        "validated": false,
        "QueryBody_Original": "DECLARE  @question int = 1;\nDECLARE @retag int = 6;\nDECLARE @tagToSearch nvarchar(35) = ##tag1:string?gas##;\nDECLARE @tagToSearch2 nvarchar(35) = ##tag2:string?google-apps-script##;\n\nselect\ncast(PH.CreationDate as date),\nPosts.Tags,\nPosts.Id as [Post Link]\nfrom\nPosts\ninner join PostHistory as PH on PH.PostId = Posts.Id\nwhere\nPosts.PostTypeId = @question\nand\nPH.PostHistoryTypeId = @retag\nand\n(\n  charindex('<' + @tagToSearch + '>', PH.Text) > 0\n  and\n  charindex('<' + @tagToSearch + '>', Posts.Tags) = 0\n  and\n  charindex('<' + @tagToSearch2 + '>', Posts.Tags) > 0\n)\ngroup by\nPosts.Tags, Posts.Id, cast(PH.CreationDate as date)\norder by\ncast(PH.CreationDate as date) desc"
    },
    {
        "QuerySetId": 1256493,
        "Title": "Am I involved in voting fraud?",
        "Description": null,
        "QueryBody": "SELECT  DISTINCT\n    p.Id as [Post Link],\n    v.Id,\n    v.CreationDate\n  FROM VOTES v\n  LEFT JOIN Posts p on p.Id = v.PostId\n  INNER JOIN \n    ( SELECT \n        dv.Id AS dupVoteId,\n        pv.OwnerUserId,\n        pv.ID\n      FROM Votes dv\n      INNER JOIN Posts pv ON dv.PostId = pv.ID\n      WHERE dv.VoteTypeId = 2 \n        AND dv.CreationDate != CAST(pv.CreationDate as DATE)\n      ) dvOut ON dvOut.OwnerUserId = p.OwnerUserId \n            AND v.Id <> dvOut.dupVoteId\n            AND dvOut.Id <> p.ParentId\n            AND (v.Id \/ 200) = (dvOut.dupVoteId \/ 200)\n  INNER JOIN Users u ON u.Id = p.OwnerUserId\n  WHERE ( v.VoteTypeId = 2 ) \n    AND v.CreationDate != CAST(p.CreationDate as DATE)\n    AND p.OwnerUserId = ##UID:int##\n    \nORDER BY v.CreationDate DESC",
        "CreationDate": "2020-07-27 16:43:51",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 1256749,
        "Title": "Comments per post for user, most to least",
        "Description": null,
        "QueryBody": "DECLARE  @UserId int = ##UserId:int##;\n\nSELECT\n  @UserID as [User Link],\n  PostID as [Post Link],\n  COUNT(*) as Comments\nFROM\n  Comments\nWHERE\n  UserId = @UserId\nGROUP BY\n  PostId\nORDER BY\n  Comments DESC",
        "CreationDate": "2020-06-28 22:45:58",
        "validated": false,
        "QueryBody_Original": "DECLARE  @UserId int = ##UserId:int##;\n\nSELECT\n  @UserID as [User Link],\n  PostID as [Post Link],\n  COUNT(*) as Comments\nFROM\n  Comments\nWHERE\n  UserId = @UserId\nGROUP BY\n  PostId\nORDER BY\n  Comments DESC"
    },
    {
        "QuerySetId": 1256790,
        "Title": "Number of [vote type] on [post type] posted by users under [reputation]",
        "Description": null,
        "QueryBody": "DECLARE  @postType int = ##Type?1##;\nDECLARE @reputation bigint = ##Reputation?100##;\nDECLARE @voteType int = iif(##Vote:string?down## = 'down', 3, 2);\n\nselect\nfloor(Users.Reputation \/ 10) * 10 as [Reputation Interval],\ncount(cast(Votes.Id as bigint))\nfrom\nPosts\ninner join Users on Posts.OwnerUserId = Users.Id\ninner join Votes on Votes.PostId = Posts.Id\nwhere\nPosts.PostTypeId = @postType\nand\nUsers.Reputation <= @reputation\nand\nVotes.VoteTypeId = @voteType \ngroup by\nfloor(Users.Reputation \/ 10) * 10\norder by\nfloor(Users.Reputation \/ 10) * 10",
        "CreationDate": "2020-06-29 02:02:35",
        "validated": false,
        "QueryBody_Original": "DECLARE  @postType int = ##Type?1##;\nDECLARE @reputation bigint = ##Reputation?100##;\nDECLARE @voteType int = iif(##Vote:string?down## = 'down', 3, 2);\n\nselect\nfloor(Users.Reputation \/ 10) * 10 as [Reputation Interval],\ncount(cast(Votes.Id as bigint))\nfrom\nPosts\ninner join Users on Posts.OwnerUserId = Users.Id\ninner join Votes on Votes.PostId = Posts.Id\nwhere\nPosts.PostTypeId = @postType\nand\nUsers.Reputation <= @reputation\nand\nVotes.VoteTypeId = @voteType \ngroup by\nfloor(Users.Reputation \/ 10) * 10\norder by\nfloor(Users.Reputation \/ 10) * 10"
    },
    {
        "QuerySetId": 1256837,
        "Title": "Number of [Post type] [vote type] during first hour that got [vote type] after",
        "Description": null,
        "QueryBody": "DECLARE  @postType int = ##Type?1##;\nDECLARE @voteType int = iif(##Vote:string?down## = 'down', 3, 2);\n\nselect\n  Posts.Id,\n  FH.Id  as [Before First Hour],\n  AFH.Id as [After First Hour]\nfrom\n  Posts\n  left join Votes as FH  on Posts.Id = FH.PostId\n  left join Votes as AFH on Posts.Id = AFH.PostId\nwhere\n  Posts.Score < 0 and Posts.PostTypeId = @postType\n  and \n  FH.VoteTypeId = @voteType and AFH.VoteTypeId = @voteType\n  and\n  FH.CreationDate <= dateadd(hour, 1 , Posts.CreationDate)\n\/*group by\n  Posts.Id,\n  FH.Id,\n  AFH.Id*\/\norder by\n  Posts.Id",
        "CreationDate": "2020-06-30 04:30:45",
        "validated": false,
        "QueryBody_Original": "DECLARE  @postType int = ##Type?1##;\nDECLARE @voteType int = iif(##Vote:string?down## = 'down', 3, 2);\n\nselect\n  Posts.Id,\n  FH.Id  as [Before First Hour],\n  AFH.Id as [After First Hour]\nfrom\n  Posts\n  left join Votes as FH  on Posts.Id = FH.PostId\n  left join Votes as AFH on Posts.Id = AFH.PostId\nwhere\n  Posts.Score < 0 and Posts.PostTypeId = @postType\n  and \n  FH.VoteTypeId = @voteType and AFH.VoteTypeId = @voteType\n  and\n  FH.CreationDate <= dateadd(hour, 1 , Posts.CreationDate)\n\/*group by\n  Posts.Id,\n  FH.Id,\n  AFH.Id*\/\norder by\n  Posts.Id"
    },
    {
        "QuerySetId": 1256925,
        "Title": "Average comment length for user",
        "Description": null,
        "QueryBody": "DECLARE  @UserId int = ##UserId:int##\n\nSELECT\n  @UserId as [User Link],\n  AVG(LEN(Text)) as [Avg Comment Length]\nFROM\n  Comments\nWHERE\n  UserId = @UserID",
        "CreationDate": "2020-06-29 12:39:00",
        "validated": false,
        "QueryBody_Original": "DECLARE  @UserId int = ##UserId:int##\n\nSELECT\n  @UserId as [User Link],\n  AVG(LEN(Text)) as [Avg Comment Length]\nFROM\n  Comments\nWHERE\n  UserId = @UserID"
    },
    {
        "QuerySetId": 1256954,
        "Title": "Top users by tags in time range",
        "Description": null,
        "QueryBody": "DECLARE  @tagName nvarchar(35) = '##tagName##'\n\n\n\nSELECT top (##Limit##)\n    TagName,\n    SUM(case votes.votetypeid \n            WHEN 2 THEN 1  -- upvote\n            WHEN 3 THEN -1  -- downvote\n            END) as Rep,\n    Users.Id as [User Link],\n    number = ROW_NUMBER() OVER (ORDER BY TagName)\nFROM Tags\n    INNER JOIN PostTags ON PostTags.TagId = Tags.id\n    INNER JOIN Posts ON Posts.ParentId = PostTags.PostId\n    INNER JOIN Users ON Posts.OwnerUserId = Users.Id                \n    INNER JOIN Votes ON Votes.PostId = Posts.Id\nWHERE Tags.TagName = @tagName\n    AND Posts.CommunityOwnedDate IS NULL\n    AND Votes.creationdate between ##start:string?2020-01-01## \n                         and ##end:string?2020-07-01##\nGROUP BY TagName, Users.Id\nORDER BY Rep DESC",
        "CreationDate": "2020-06-29 15:13:31",
        "validated": false,
        "QueryBody_Original": "DECLARE  @tagName nvarchar(35) = '##tagName##'\n\n\n\nSELECT top (##Limit##)\n    TagName,\n    SUM(case votes.votetypeid \n            WHEN 2 THEN 1  -- upvote\n            WHEN 3 THEN -1  -- downvote\n            END) as Rep,\n    Users.Id as [User Link],\n    number = ROW_NUMBER() OVER (ORDER BY TagName)\nFROM Tags\n    INNER JOIN PostTags ON PostTags.TagId = Tags.id\n    INNER JOIN Posts ON Posts.ParentId = PostTags.PostId\n    INNER JOIN Users ON Posts.OwnerUserId = Users.Id                \n    INNER JOIN Votes ON Votes.PostId = Posts.Id\nWHERE Tags.TagName = @tagName\n    AND Posts.CommunityOwnedDate IS NULL\n    AND Votes.creationdate between ##start:string?2020-01-01## \n                         and ##end:string?2020-07-01##\nGROUP BY TagName, Users.Id\nORDER BY Rep DESC"
    },
    {
        "QuerySetId": 1257224,
        "Title": "Get answers to some users' first question",
        "Description": null,
        "QueryBody": "SELECT  a.Id, a.ParentId, a.CreationDate, a.Score\nfrom (\n  SELECT OwnerUserId, MIN(CreationDate) as firstdate\n  from Posts\n  group by OwnerUserID ) as latest\n  inner join Posts as p on p.OwnerUserId = latest.OwnerUserId and p.CreationDate = latest.firstdate\n  inner join Posts as a on a.ParentId = p.Id\nwhere\n  convert(date, p.CreationDate) >= convert(date, ##Start:string##)\n  AND convert(date, p.CreationDate) <= convert(date, ##End:string##)\n  AND p.PostTypeId = 1\n  AND a.PostTypeId = 2",
        "CreationDate": "2020-07-01 13:51:38",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 1257263,
        "Title": "Get comments to users' first question posts",
        "Description": null,
        "QueryBody": "SELECT  c.PostId, c.Score, c.CreationDate\nfrom (\n  SELECT OwnerUserId, MIN(CreationDate) as firstdate\n  from Posts\n  group by OwnerUserID ) as latest\n  inner join Posts as p on p.OwnerUserId = latest.OwnerUserId and p.CreationDate = latest.firstdate\n  inner join Comments as c on c.PostId = p.Id\nwhere\n  convert(date, p.CreationDate) >= convert(date, ##Start:string##)\n  AND convert(date, p.CreationDate) <= convert(date, ##End:string##)\n  AND p.PostTypeId = 1",
        "CreationDate": "2020-07-01 13:57:29",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 1257301,
        "Title": "Longest time before the tag was added",
        "Description": null,
        "QueryBody": "WITH  firstrev_cte AS\n(\nSELECT MIN(ph.Id) AS MinId, p.Id\nFROM Posts p JOIN PostHistory ph ON ph.PostId=p.Id\nWHERE ph.Text LIKE '%<##tagName?featured##>%'\n  AND ph.PostHistoryTypeId in (3,6,9)\nGROUP BY p.Id\n)\n\nSELECT TOP(##num?100##)\n  ph.PostId AS [Post Link],\n  url = 'site:\/\/posts\/' + CAST(ph.PostId AS varchar)+'\/revisions',\n  ph.UserId AS [User Link], ph.UserDisplayName,\n  ph.CreationDate AS [Featured Date],\n  p.CreationDate, p.LastActivityDate,\n  DATEDIFF(Day, p.CreationDate, ph.CreationDate) AS [Days until tag]\nFROM PostHistory ph INNER JOIN firstrev_cte ON ph.Id=MinId\n  INNER JOIN Posts p ON ph.PostId=p.Id\nORDER BY  DATEDIFF(Day, p.CreationDate, ph.CreationDate) DESC",
        "CreationDate": "2020-06-30 16:43:19",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 1257968,
        "Title": "Get edits to first questions",
        "Description": null,
        "QueryBody": "SELECT  s.PostId, s.CreationDate, s.ApprovalDate, s.RejectionDate\nfrom (\n  SELECT OwnerUserId, MIN(CreationDate) as firstdate\n  from Posts\n  group by OwnerUserID ) as latest\n  inner join Posts as p on p.OwnerUserId = latest.OwnerUserId and p.CreationDate = latest.firstdate\n  inner join SuggestedEdits as s on s.PostId = p.Id\nwhere\n  convert(date, p.CreationDate) >= convert(date, ##Start:string##)\n  AND convert(date, p.CreationDate) <= convert(date, ##End:string##)\n  AND p.PostTypeId = 1",
        "CreationDate": "2020-07-02 04:26:40",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 1257969,
        "Title": "Get votes to first questions",
        "Description": null,
        "QueryBody": "SELECT  v.PostId, v.VoteTypeId, v.CreationDate\nfrom (\n  SELECT OwnerUserId, MIN(CreationDate) as firstdate\n  from Posts\n  group by OwnerUserID ) as latest\n  inner join Posts as p on p.OwnerUserId = latest.OwnerUserId and p.CreationDate = latest.firstdate\n  inner join Votes as v on v.PostId = p.Id\nwhere\n  convert(date, p.CreationDate) >= convert(date, ##Start:string##)\n  AND convert(date, p.CreationDate) <= convert(date, ##End:string##)\n  AND p.PostTypeId = 1",
        "CreationDate": "2020-07-02 04:37:44",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 1258643,
        "Title": "Number of posts where both OwnerUserId and OwnerDisplayName are not NULL",
        "Description": null,
        "QueryBody": "SELECT  TOP(##num?5000)##\n  OwnerUserId AS [User Link],\n  Count(Id) AS [# of Posts],\n  Count(OwnerDisplayName) AS [OwnerDisplayName is not NUL],\n  ROUND((CAST(Count(OwnerDisplayName) AS decimal))*100.0\/(CAST(Count(Id) AS decimal)),2) AS Percentage\nFROM Posts  \nGROUP BY OwnerUserId  \nORDER BY COUNT(OwnerDisplayName) DESC",
        "CreationDate": "2020-07-08 14:17:26",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 1258737,
        "Title": "Accepted answers (excluding self-answers) to your questions",
        "Description": null,
        "QueryBody": "DECLARE  @UserId int = ##UserId:int##;\n\nSELECT\n  answers.Id as [Post Link]\nFROM\n  Votes AS v\nINNER JOIN Posts AS answers ON\n  v.PostID = answers.Id\nINNER JOIN Posts AS questions ON\n  answers.ParentID = questions.Id\nWHERE\n  questions.OwnerUserId = @UserId AND\n  answers.OwnerUserId != @UserID AND\n  v.VoteTypeID = 1 -- AcceptedByOriginator",
        "CreationDate": "2020-07-04 14:35:58",
        "validated": false,
        "QueryBody_Original": "DECLARE  @UserId int = ##UserId:int##;\n\nSELECT\n  answers.Id as [Post Link]\nFROM\n  Votes AS v\nINNER JOIN Posts AS answers ON\n  v.PostID = answers.Id\nINNER JOIN Posts AS questions ON\n  answers.ParentID = questions.Id\nWHERE\n  questions.OwnerUserId = @UserId AND\n  answers.OwnerUserId != @UserID AND\n  v.VoteTypeID = 1 -- AcceptedByOriginator"
    },
    {
        "QuerySetId": 1259353,
        "Title": "Average reputation on the site",
        "Description": null,
        "QueryBody": "SELECT \n  AVG(CAST(u.Reputation AS decimal)) AS Average\nFROM Users u\nWHERE (u.Reputation>=##min?101##)",
        "CreationDate": "2020-07-06 14:13:12",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 1259359,
        "Title": "Ordering by reputation - with a specific user selected",
        "Description": null,
        "QueryBody": "SELECT  \n  'SELECTed user' as 'Category',\n  RANK() OVER(ORDER BY Reputation DESC) AS Rank,\n  Id AS [User Link], Reputation\nFROM Users\nWHERE Id=##userid?8297##\nUNION ALL\nSELECT TOP(##num?500##)\n  'All Users',\n  RANK() OVER(ORDER BY Reputation DESC) AS Rank,\n  Id AS [User Link], Reputation\nFROM Users\nORDER BY 1 DESC, Reputation DESC",
        "CreationDate": "2020-07-06 14:21:04",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 1259417,
        "Title": "Average reputation of users depending on number of posts",
        "Description": null,
        "QueryBody": "WITH  0 to 9 posts, users WITH 10 to 19 posts, etc.\n;WITH postgroups_cte AS (\nSELECT\n  u.Id AS uid,\n  u.Reputation AS rep,\n  CAST(COUNT(p.Id)\/##mult?100## AS int) AS pgroup\n  FROM Users u INNER JOIN Posts p ON p.OwnerUserId=u.Id\n  GROUP BY u.Id, u.Reputation\n)\n\nSELECT\n  pgroup,\n  AVG(CAST(rep AS decimal)) AS Average\nFROM postgroups_cte\nGROUP BY pgroup\nORDER BY pgroup DESC",
        "CreationDate": "2020-07-06 18:04:36",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 1259418,
        "Title": "Number of posts for suspended users",
        "Description": null,
        "QueryBody": "DECLARE  @minBadges int = '##MinBadges?10##'\n;With CTE AS\n(\n  SELECT UserId,COUNT(*) AS TotalBadges\n  FROM Badges\n  GROUP BY UserId\n)\n\nSELECT Users.ID AS [User Link], Displayname, Reputation, TotalBadges,\n  Count(Posts.Id) AS [Count]\nFROM Users JOIN CTE ON Users.ID = CTE.UserId\n  INNER JOIN Posts  ON Users.Id=Posts.OwnerUserId\nWHERE Users.Reputation = 1 AND TotalBadges >= @minBadges\nGROUP BY Users.Id,DisplayName,Reputation,TotalBadges\nORDER BY Count(Posts.Id) DESC, Users.ID",
        "CreationDate": "2020-07-08 18:25:03",
        "validated": false,
        "QueryBody_Original": "DECLARE  @minBadges int = '##MinBadges?10##'\n;With CTE AS\n(\n  SELECT UserId,COUNT(*) AS TotalBadges\n  FROM Badges\n  GROUP BY UserId\n)\n\nSELECT Users.ID AS [User Link], Displayname, Reputation, TotalBadges,\n  Count(Posts.Id) AS [Count]\nFROM Users JOIN CTE ON Users.ID = CTE.UserId\n  INNER JOIN Posts  ON Users.Id=Posts.OwnerUserId\nWHERE Users.Reputation = 1 AND TotalBadges >= @minBadges\nGROUP BY Users.Id,DisplayName,Reputation,TotalBadges\nORDER BY Count(Posts.Id) DESC, Users.ID"
    },
    {
        "QuerySetId": 1259423,
        "Title": "Cumulative, time-scaled up\/down history of a single post",
        "Description": null,
        "QueryBody": "WITH  Raw AS (\n  SELECT\n    CreationDate,\n    SUM(CASE WHEN VoteTypeId = 2 THEN 1 END) AS Ups,\n    SUM(CASE WHEN VoteTypeId = 3 THEN 1 END) AS Downs\n  FROM Votes\n  WHERE\n    PostId = ##PostId:int##\n    AND\n    VoteTypeId BETWEEN 2 AND 3\n  GROUP BY CreationDate\n)\nSELECT\n  CreationDate,\n  SUM(Raw.Ups)\n    OVER (ORDER BY CreationDate ROWS UNBOUNDED PRECEDING) AS Ups,\n  -SUM(Raw.Downs)\n    OVER (ORDER BY CreationDate ROWS UNBOUNDED PRECEDING) AS Downs,\n  SUM(Raw.Ups-Raw.Downs)\n    OVER (ORDER BY CreationDate ROWS UNBOUNDED PRECEDING) AS Score\nFROM Raw\nORDER BY CreationDate;",
        "CreationDate": "2020-07-07 20:34:46",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 1259425,
        "Title": "Top users by average answer score (non CW)",
        "Description": null,
        "QueryBody": "SELECT  TOP ##num?100##\na.OwnerUserId AS [User Link], a.OwnerDisplayName, AVG(CAST(a.Score AS decimal)) AS [Average Score], SUM(a.Score) AS [Total Score], COUNT(a.Id) AS [Num Answers]\nFROM Posts a\nWHERE (a.PostTypeId=2) AND (a.CommunityOwnedDate IS NULL)\nGROUP BY a.OwnerUserId, a.OwnerDisplayName\nHAVING COUNT(a.Score)>=##min?5##\nORDER BY AVG(a.Score) DESC",
        "CreationDate": "2020-07-06 18:57:02",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 1259606,
        "Title": "Users with most posts (questions, answers)",
        "Description": null,
        "QueryBody": "SELECT  TOP(##num?500##)\n  u.Id AS [User Link],\n  COUNT(p.Id) AS [Count],\n  SUM(case when p.PostTypeId = 1 then 1 else 0 end) AS [Questions],\n  SUM(case when p.PostTypeId = 2 then 1 else 0 end) AS [Answers]\nFROM Users u INNER JOIN Posts p ON p.OwnerUserId=u.Id  \nGROUP BY u.Id\nORDER BY COUNT(p.Id) DESC",
        "CreationDate": "2020-07-07 05:37:16",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 1259650,
        "Title": "Breakdown of users by reputation",
        "Description": null,
        "QueryBody": "SELECT  \n  Reputation,\n  COUNT(Id)\nFROM Users\nWHERE Reputation>=##min?125##\nGROUP BY Reputation\nORDER BY Reputation",
        "CreationDate": "2020-07-08 12:53:49",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 1259697,
        "Title": "Posts by user in WA",
        "Description": null,
        "QueryBody": "SELECT  p.Id AS PostId, p.CreationDate AS PostDate, p.Score, p.OwnerUserId, p.CommentCount\nFROM Posts p\nINNER JOIN Users u ON u.Id = p.OwnerUserId\nWHERE \n    (Location LIKE '%, WA%' \n    or UPPER(Location) LIKE '%WASHINGTON%' \n    or UPPER(Location) LIKE '%SEATTLE%'\n    or UPPER(Location) LIKE '%SPOKANE%'\n    or UPPER(Location) LIKE '%TACOMA%')\n    AND UPPER(Location) NOT LIKE '%DC%'\n    AND UPPER(Location) NOT LIKE '%D.C.%'\n    AND UPPER(Location) NOT LIKE '%COLUMBIA%'\n    AND Reputation >= 10000\n    AND convert(date, p.CreationDate) >= convert(date, ##Start:string##)\n    AND convert(date, p.CreationDate) <= convert(date, ##End:string##)\n    AND p.PostTypeId = 2",
        "CreationDate": "2020-07-07 12:00:38",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 1259705,
        "Title": "Posts by user in NY",
        "Description": null,
        "QueryBody": "SELECT  p.Id AS PostId, p.CreationDate AS PostDate, p.Score, p.OwnerUserId, p.CommentCount\nFROM Posts p\nINNER JOIN Users u ON u.Id = p.OwnerUserId\nWHERE \n    (Location LIKE '%, NY%' \n    or UPPER(Location) LIKE '%NEW YORK%' \n    or UPPER(Location) LIKE '%BUFFALO%'\n    or UPPER(Location) LIKE '%YONKERS%')\n    AND Location NOT LIKE '%UK%'\n    AND UPPER(Location) NOT LIKE '%UNITED KINGDOM%'\n    AND Reputation >= 10000\n    AND convert(date, p.CreationDate) >= convert(date, ##Start:string##)\n    AND convert(date, p.CreationDate) <= convert(date, ##End:string##)\n    AND p.PostTypeId = 2",
        "CreationDate": "2020-07-07 12:44:43",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 1259707,
        "Title": "Posts by user in TX",
        "Description": null,
        "QueryBody": "SELECT  p.Id AS PostId, p.CreationDate AS PostDate, p.Score, p.OwnerUserId, p.CommentCount\nFROM Posts p\nINNER JOIN Users u ON u.Id = p.OwnerUserId\nWHERE \n    (Location LIKE '%, TX%' \n    or UPPER(Location) LIKE '%TEXAS%' \n    or UPPER(Location) LIKE '%HOUSTON%'\n    or UPPER(Location) LIKE '%SAN ANTONIO%'\n    or UPPER(Location) LIKE '%DALLAS%'\n    or UPPER(Location) LIKE '%AUSTIN%')\n    AND Reputation >= 10000\n    AND convert(date, p.CreationDate) >= convert(date, ##Start:string##)\n    AND convert(date, p.CreationDate) <= convert(date, ##End:string##)\n    AND p.PostTypeId = 2",
        "CreationDate": "2020-07-07 12:48:25",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 1259708,
        "Title": "Posts by user in CA",
        "Description": null,
        "QueryBody": "SELECT  p.Id AS PostId, p.CreationDate AS PostDate, p.Score, p.OwnerUserId, p.CommentCount\nFROM Posts p\nINNER JOIN Users u ON u.Id = p.OwnerUserId\nWHERE \n    (Location LIKE '%, CA%' \n    or UPPER(Location) LIKE '%CALIFORNIA%' \n    or UPPER(Location) LIKE '%LOS ANGELES%'\n    or UPPER(Location) LIKE '%SAN DIEGO%'\n    or UPPER(Location) LIKE '%SAN JOSE%'\n    or UPPER(Location) LIKE '%SAN FRANCISCO%')\n    AND Reputation >= 10000\n    AND convert(date, p.CreationDate) >= convert(date, ##Start:string##)\n    AND convert(date, p.CreationDate) <= convert(date, ##End:string##)\n    AND p.PostTypeId = 2",
        "CreationDate": "2020-07-07 12:49:58",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 1259849,
        "Title": "Cumulative, voteid-scaled up\/down history of a single post",
        "Description": null,
        "QueryBody": "SELECT \n  RANK() OVER (ORDER BY Id) AS No,\n  SUM(CASE WHEN VoteTypeId = 2 THEN 1 ELSE 0 END)\n    OVER (ORDER BY Id ROWS UNBOUNDED PRECEDING) AS Ups,\n  SUM(CASE WHEN VoteTypeId = 3 THEN -1 ELSE 0 END)\n    OVER (ORDER BY Id ROWS UNBOUNDED PRECEDING) AS Downs,\n  SUM(CASE WHEN VoteTypeId = 2 THEN 1 ELSE -1 END)\n    OVER (ORDER BY Id ROWS UNBOUNDED PRECEDING) AS Score\nFROM Votes\nWHERE\n  PostId = ##PostId:int##\n  AND\n  VoteTypeId BETWEEN 2 AND 3\n\nUNION ALL\n\nSELECT 0 AS No, 0 AS Ups, 0 AS Downs, 0 AS Score\n\nORDER BY No;",
        "CreationDate": "2020-07-07 20:39:59",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 1259887,
        "Title": "Unprotected questions that were protected automatically",
        "Description": null,
        "QueryBody": "SELECT s questions that have been unprotected by 59609 on RPG,\n-- which were previously protected automatically by Community.\n\nSELECT ph.PostId,\n       p.Id AS [Post Link],\n       ph.CreationDate AS [Unprotected At]\nFROM PostHistory ph\nINNER JOIN Posts p ON ph.PostId = p.Id\nWHERE ph.PostHistoryTypeId = 20\n  AND ph.UserId = 59609\n -- AND ph.PostId IN\n --(SELECT ph.PostId\n -- FROM PostHistory ph\n -- WHERE ph.PostHistoryTypeId = 19\n --   AND ph.UserId = -1)\nORDER BY [Unprotected At] DESC;",
        "CreationDate": "2020-07-23 07:27:26",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 1260020,
        "Title": "Trend of questions tagged with [tag] that [do not] contain [search term] in body",
        "Description": null,
        "QueryBody": "DECLARE  @tagToSearch nvarchar(35) = ##tag:string?google-drive-api##;\nDECLARE @textToSearch nvarchar(max) = ##text:string?DriveApp##;\n\nselect\n  Id as [Post Link]\nfrom\n  Posts\nwhere\n  PostTypeId = 1\n  and\n  charindex('<' + @tagToSearch + '>', Tags) > 0\n  and\n  charindex(@textToSearch, Body) > 0",
        "CreationDate": "2020-07-08 06:27:25",
        "validated": false,
        "QueryBody_Original": "DECLARE  @tagToSearch nvarchar(35) = ##tag:string?google-drive-api##;\nDECLARE @textToSearch nvarchar(max) = ##text:string?DriveApp##;\n\nselect\n  Id as [Post Link]\nfrom\n  Posts\nwhere\n  PostTypeId = 1\n  and\n  charindex('<' + @tagToSearch + '>', Tags) > 0\n  and\n  charindex(@textToSearch, Body) > 0"
    },
    {
        "QuerySetId": 1260192,
        "Title": "Breakdown of users by reputation groups",
        "Description": null,
        "QueryBody": "WITH  0 to 9 points, users WITH 10 to 19 points, etc.\n\n;WITH repgroups_cte AS (\nSELECT\n  Id AS uid,\n  CAST(reputation\/##rep?100## AS int) AS rep\n  FROM Users\n  WHERE (Reputation>=##min?125##)\n)\n\nSELECT\n  rep,\n  COUNT(uid) AS [Count]\nFROM repgroups_cte\nGROUP BY rep\nORDER BY rep DESC",
        "CreationDate": "2020-07-08 12:57:37",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 1260404,
        "Title": "tfs tagsynonyms with no real tag",
        "Description": null,
        "QueryBody": "SELECT  ts.sourcetagname \n     , ts.targettagname \n     , creationdate\n     , owneruserid as [User Link]\n     , approvaldate\nfrom tagsynonyms ts\nleft outer join tags t on t.tagname = ts.targettagname\nwhere t.id is null\nand ts.targettagname like 'tfs%'\n\nSELECT *\nfrom tags\nwhere tagname like 'tfs-%'",
        "CreationDate": "2020-07-09 01:30:15",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 1260658,
        "Title": "Answers to closed questions for user",
        "Description": null,
        "QueryBody": "DECLARE  @UserId int = ##UserId:int##;\n\nSELECT\n  answers.Id as [Post Link]\nFROM\n  Posts as answers\nINNER JOIN Posts as questions ON\n  answers.ParentId = questions.Id\nWHERE\n  answers.OwnerUserId = @UserId AND\n  questions.ClosedDate IS NOT NULL\nORDER BY\n  answers.CreationDate DESC",
        "CreationDate": "2020-07-09 03:21:17",
        "validated": false,
        "QueryBody_Original": "DECLARE  @UserId int = ##UserId:int##;\n\nSELECT\n  answers.Id as [Post Link]\nFROM\n  Posts as answers\nINNER JOIN Posts as questions ON\n  answers.ParentId = questions.Id\nWHERE\n  answers.OwnerUserId = @UserId AND\n  questions.ClosedDate IS NOT NULL\nORDER BY\n  answers.CreationDate DESC"
    },
    {
        "QuerySetId": 1261180,
        "Title": "Get posts of users in a state",
        "Description": null,
        "QueryBody": "SELECT  p.Id AS PostId, p.PostTypeId, p.CreationDate AS PostDate, p.Score, p.OwnerUserId, u.Location, u.Reputation\nFROM Posts p\nINNER JOIN Users u ON u.Id = p.OwnerUserId\nWHERE \n    (Location LIKE ##abbr:string## \n    or UPPER(Location) LIKE ##full:string##) \n    AND convert(date, p.CreationDate) >= convert(date, '20200220')\n    AND convert(date, p.CreationDate) <= convert(date, '20200429')\n    AND UPPER(Location) NOT LIKE '%DC%'\n    AND UPPER(Location) NOT LIKE '%D.C.%'\n    AND UPPER(Location) NOT LIKE '%COLUMBIA%'",
        "CreationDate": "2020-07-10 07:40:40",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 1261431,
        "Title": "Total comment on a tag",
        "Description": null,
        "QueryBody": "DECLARE  @from_date AS date = '##FromDate##'\nDECLARE @to_date AS date = '##ToDate##'\nSELECT SUM(CAST(CommentCount AS BIGINT)) AS comment_count FROM Posts\nWHERE PostTypeId = 1 AND CreationDate > @from_date AND CreationDate < @to_date AND Tags LIKE '%##Tag##%'",
        "CreationDate": "2020-07-10 20:35:17",
        "validated": false,
        "QueryBody_Original": "DECLARE  @from_date AS date = '##FromDate##'\nDECLARE @to_date AS date = '##ToDate##'\nSELECT SUM(CAST(CommentCount AS BIGINT)) AS comment_count FROM Posts\nWHERE PostTypeId = 1 AND CreationDate > @from_date AND CreationDate < @to_date AND Tags LIKE '%##Tag##%'"
    },
    {
        "QuerySetId": 1261550,
        "Title": "How many positive-scope answers have I written?",
        "Description": null,
        "QueryBody": "SELECT  \n    Count(Posts.Id) AS NumAnswers\nFROM\n    Posts\n    INNER JOIN\n    Users ON Users.Id = OwnerUserId\nWHERE \n    PostTypeId = 2 -- an answer\n    and DeletionDate is null\n    and OwnerUserId = ##UserId##",
        "CreationDate": "2020-07-11 01:35:21",
        "validated": false,
        "QueryBody_Original": "SELECT  \n    Count(Posts.Id) AS NumAnswers\nFROM\n    Posts\n    INNER JOIN\n    Users ON Users.Id = OwnerUserId\nWHERE \n    PostTypeId = 2 -- an answer\n    and DeletionDate is null\n    and OwnerUserId = ##UserId##"
    },
    {
        "QuerySetId": 1261600,
        "Title": "List of users with the given username",
        "Description": null,
        "QueryBody": "SELECT  TOP(##num?100##)\n  Id AS [User Link], Reputation, \n  CreationDate LastAccessDate\nFROM Users\nWHERE (DisplayName='##name?Andrew##')\n  AND (Reputation>=##min?1##)\nORDER BY Reputation DESC",
        "CreationDate": "2020-07-14 16:19:56",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 1261657,
        "Title": "Recent edit of old posts",
        "Description": null,
        "QueryBody": "SELECT  DISTINCT TOP(##num?1000##)\n  ph.PostId AS [Post Link],\n  'site:\/\/posts\/' + CAST(ph.PostId AS varchar)+'\/revisions' AS [Revisions],\n  ph.CreationDate, p.CreationDate, ph.Comment,\n  ph.UserId AS [User Link], ph.UserDisplayName\nFROM PostHistory ph INNER JOIN Posts p ON p.Id=ph.PostId\nWHERE DATEDIFF(Day, p.CreationDate, ph.CreationDate)>=##min?100##\nORDER BY ph.CreationDate DESC",
        "CreationDate": "2020-07-11 20:36:34",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 1261690,
        "Title": "Comments by a specific users containing the  given word (case insensitive)",
        "Description": null,
        "QueryBody": "SELECT  Id AS [Comment Link], text, UserId AS [User Link], CreationDate\nFROM Comments\nWHERE (Text LIKE '%##Word##%' COLLATE Latin1_General_CI_AI) AND (UserID=##userid##)\nORDER BY CreationDate",
        "CreationDate": "2020-07-11 23:26:28",
        "validated": false,
        "QueryBody_Original": "SELECT  Id AS [Comment Link], text, UserId AS [User Link], CreationDate\nFROM Comments\nWHERE (Text LIKE '%##Word##%' COLLATE Latin1_General_CI_AI) AND (UserID=##userid##)\nORDER BY CreationDate"
    },
    {
        "QuerySetId": 1261835,
        "Title": "Questions from the list ordered by last activity",
        "Description": null,
        "QueryBody": "SELECT \n  Id AS [Post Link],\n  LastActivityDate\nFROM Posts\nWHERE Id in (##list?3349,3910,4543,2657,3311,3271,4426,3178,599,1241,2798,1297,121,828,402,1338,1911,1852,4376,1253,730,3030,275,439,3065,2409,3014,808,1604,655,3317,3142,1113##)\nORDER BY LastActivityDate DESC",
        "CreationDate": "2020-07-12 13:06:35",
        "validated": false,
        "QueryBody_Original": "SELECT \n  Id AS [Post Link],\n  LastActivityDate\nFROM Posts\nWHERE Id in (##list?3349,3910,4543,2657,3311,3271,4426,3178,599,1241,2798,1297,121,828,402,1338,1911,1852,4376,1253,730,3030,275,439,3065,2409,3014,808,1604,655,3317,3142,1113##)\nORDER BY LastActivityDate DESC"
    },
    {
        "QuerySetId": 1261838,
        "Title": "Questions with recent activity - including activity on answers",
        "Description": null,
        "QueryBody": "SELECT  TOP(##num?100##)\n  coalesce(p.ParentId, p.Id) AS [Post Link],\n---returns the id of the question\n---For questions p.ParentId is NULL, so this returns p.Id\n  MAX(p.LastActivityDate)\nFROM Posts p\nGROUP BY coalesce(p.ParentId, p.Id)\nORDER BY MAX(p.LastActivityDate) DESC",
        "CreationDate": "2020-07-12 13:13:00",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 1261839,
        "Title": "Questions from the list ordered by last activity - including activity on answers",
        "Description": null,
        "QueryBody": "SELECT  TOP(##num?100##)\n  coalesce(p.ParentId, p.Id) AS [Post Link],\n---returns the id of the question\n---For questions p.ParentId is NULL, so this returns p.Id\n  MAX(p.LastActivityDate)\nFROM Posts p\nWHERE coalesce(p.ParentId, p.Id) in (##list?3349,3910,4543,2657,3311,3271,4426,3178,599,1241,2798,1297,121,828,402,1338,1911,1852,4376,1253,730,3030,275,439,3065,2409,3014,808,1604,655,3317,3142,1113##)\nGROUP BY coalesce(p.ParentId, p.Id)\nORDER BY MAX(p.LastActivityDate) DESC",
        "CreationDate": "2020-07-12 13:15:16",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 1261941,
        "Title": "Users above given number of upvotes (just names)",
        "Description": null,
        "QueryBody": "SELECT \n  Id AS [User Link], DisplayName\nFROM Users   \nWHERE Upvotes > ##votes?100##\nORDER BY Id",
        "CreationDate": "2020-07-12 18:53:22",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 1262055,
        "Title": "Comments on my questions containing the given phrase (case insensitive)",
        "Description": null,
        "QueryBody": "SELECT \n  c.Id AS [Comment Link], \n  c.Text, \n  c.UserId AS [User Link], \n  c.CreationDate\nFROM Comments c INNER JOIN Posts p ON c.PostId=p.Id\n  WHERE (p.OwnerUserId=##UserId?8297##) AND (c.Text LIKE '%##Word?chat##%' COLLATE Latin1_General_CI_AI)\n    AND (p.PostTypeId=##type?1##) \n---Questions: PostTypeId=1\n---Answers: PostTypeId=2",
        "CreationDate": "2020-07-12 21:21:35",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 1262057,
        "Title": "Comments on my posts containing two given phrases (case insensitive)",
        "Description": null,
        "QueryBody": "SELECT \n  c.Id AS [Comment Link], \n  c.Text, \n  c.UserId AS [User Link], \n  c.CreationDate\nFROM Comments c INNER JOIN Posts p ON c.PostId=p.Id\n  WHERE (p.OwnerUserId=##UserId?8297##) \n    AND (c.Text LIKE '%##Word1?chat##%' COLLATE Latin1_General_CI_AI)\n    AND (c.Text LIKE '%##Word2?here##%' COLLATE Latin1_General_CI_AI)",
        "CreationDate": "2020-07-12 21:23:54",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 1262077,
        "Title": "Most recent comments on my posts",
        "Description": null,
        "QueryBody": "SELECT  TOP(##num?100##)\n  c.Id AS [Comment Link], \n  c.Text, \n  c.UserId AS [User Link], \n  c.CreationDate\nFROM Comments c INNER JOIN Posts p ON c.PostId=p.Id\nWHERE (p.OwnerUserId=##UserId?8297##) \nORDER BY c.CreationDate DESC",
        "CreationDate": "2020-07-12 22:08:40",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 1262133,
        "Title": "Most recent comments containing the given word",
        "Description": null,
        "QueryBody": "SELECT  TOP(##num?100##)\n  Id AS [Comment Link], text, UserId AS [User Link], CreationDate\nFROM Comments\nWHERE Text LIKE '%##Word?possible\n##%'\nORDER BY CreationDate DESC",
        "CreationDate": "2020-07-12 23:23:14",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 1262155,
        "Title": "Comments on my posts containing the given phrase (case insensitive)",
        "Description": null,
        "QueryBody": "SELECT \n  c.Id AS [Comment Link], \n  c.Text, \n  c.UserId AS [User Link], \n  c.CreationDate\nFROM Comments c INNER JOIN Posts p ON c.PostId=p.Id\n  WHERE (p.OwnerUserId=##UserId?122424##) AND (c.Text LIKE '%##WordA?possible##%' COLLATE Latin1_General_CI_AI) AND (c.Text LIKE '%##WordB?has##%' COLLATE Latin1_General_CI_AI)",
        "CreationDate": "2020-07-13 00:31:47",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 1262282,
        "Title": "Questions that have been protected at some point",
        "Description": null,
        "QueryBody": "SELECT s questions that have been unprotected by 59609 on RPG,\n-- which were previously protected automatically by Community.\n\nSELECT ph.PostId,\n       p.Id AS [Post Link],\n       ph.CreationDate AS [protected At]\nFROM PostHistory ph\nINNER JOIN Posts p ON ph.PostId = p.Id\nWHERE ph.PostHistoryTypeId = 19\n --- AND ph.UserId = 59609\n -- AND ph.PostId IN\n --(SELECT ph.PostId\n -- FROM PostHistory ph\n  --WHERE ph.PostHistoryTypeId = 19\n  --  AND ph.UserId = -1)\nORDER BY [protected At] DESC;",
        "CreationDate": "2020-07-13 07:36:02",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 1262285,
        "Title": "Questions protected by the community user",
        "Description": null,
        "QueryBody": "SELECT s questions that have been unprotected by 59609 on RPG,\n-- which were previously protected automatically by Community.\n\nSELECT ph.PostId,\n       p.Id AS [Post Link],\n       ph.CreationDate AS [protected At]\nFROM PostHistory ph\nINNER JOIN Posts p ON ph.PostId = p.Id\nWHERE ph.PostHistoryTypeId = 19\n  AND ph.UserId = -1\n --- AND ph.UserId = 59609\n ---AND ph.PostId IN\n ---(SELECT ph.PostId\n --- FROM PostHistory ph\n --- WHERE ph.PostHistoryTypeId = 19\n  ---  AND ph.UserId = -1)\nORDER BY [protected At] DESC;",
        "CreationDate": "2020-07-13 07:40:56",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 1262783,
        "Title": "Users with many posts and reputation 1",
        "Description": null,
        "QueryBody": "SELECT  TOP(##num?100##)\n  u.Id AS [User Link],\n  COUNT(p.Id) AS [Post Count],\n  u.Reputation AS [Reputation]\nFROM Users u JOIN SuggestedEdits p On p.OwnerUserId=u.Id\nWHERE u.Reputation=1\nGROUP BY u.Id, u.Reputation\nORDER BY COUNT(p.Id) DESC",
        "CreationDate": "2020-07-13 22:22:24",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 1262928,
        "Title": "Questions by [tag] that are also [not] tagged with a [tag]",
        "Description": null,
        "QueryBody": "DECLARE  @tag1 nvarchar(35) = '%<' + ##Tag1:string## + '>$';\nDECLARE @tag2 nvarchar(35) = '%<' + ##Tag2:string## + '>$';\nDECLARE @include bit = iif(##include:string?yes## = 'yes', 1, 0);\n\nselect\n  Tags,\n  Id as [Post Link]\nfrom\n  Posts\nwhere\n  DeletionDate is null and\n  Score >= 0 and\n  Tags like @tag1 and\n  (\n    @include = 1 and Tags like @tag2\n    or\n    @include = 0 and Tags not like @tag2\n  )",
        "CreationDate": "2020-07-19 02:37:10",
        "validated": false,
        "QueryBody_Original": "DECLARE  @tag1 nvarchar(35) = '%<' + ##Tag1:string## + '>$';\nDECLARE @tag2 nvarchar(35) = '%<' + ##Tag2:string## + '>$';\nDECLARE @include bit = iif(##include:string?yes## = 'yes', 1, 0);\n\nselect\n  Tags,\n  Id as [Post Link]\nfrom\n  Posts\nwhere\n  DeletionDate is null and\n  Score >= 0 and\n  Tags like @tag1 and\n  (\n    @include = 1 and Tags like @tag2\n    or\n    @include = 0 and Tags not like @tag2\n  )"
    },
    {
        "QuerySetId": 1263087,
        "Title": "How many questions associated with [tag1] was changed to [tag2]?",
        "Description": null,
        "QueryBody": "DECLARE  @question int = 1;\nDECLARE @initTag int = 3;\nDECLARE @tagToSearch nvarchar(35) = ##tag1:string?gas##;\nDECLARE @tagToSearch2 nvarchar(35) = ##tag2:string?google-apps-script##;\n\nselect\ncast(PH.CreationDate as date),\nPosts.Tags,\nPosts.Id as [Post Link]\nfrom\nPosts\ninner join PostHistory as PH on PH.PostId = Posts.Id\nwhere\nPosts.PostTypeId = @question\nand\nPH.PostHistoryTypeId = @initTag\nand\n(\n  charindex('<' + @tagToSearch + '>', PH.Text) > 0\n  and\n  Posts.Tags not like ('%<' + @tagToSearch + '>%')\n  and\n  Posts.Tags like ('%<' + @tagToSearch2 + '>%' )\n)\ngroup by\nPosts.Tags,Posts.Id, cast(PH.CreationDate as date)\norder by\ncast(PH.CreationDate as date) desc",
        "CreationDate": "2020-07-14 23:16:56",
        "validated": false,
        "QueryBody_Original": "DECLARE  @question int = 1;\nDECLARE @initTag int = 3;\nDECLARE @tagToSearch nvarchar(35) = ##tag1:string?gas##;\nDECLARE @tagToSearch2 nvarchar(35) = ##tag2:string?google-apps-script##;\n\nselect\ncast(PH.CreationDate as date),\nPosts.Tags,\nPosts.Id as [Post Link]\nfrom\nPosts\ninner join PostHistory as PH on PH.PostId = Posts.Id\nwhere\nPosts.PostTypeId = @question\nand\nPH.PostHistoryTypeId = @initTag\nand\n(\n  charindex('<' + @tagToSearch + '>', PH.Text) > 0\n  and\n  Posts.Tags not like ('%<' + @tagToSearch + '>%')\n  and\n  Posts.Tags like ('%<' + @tagToSearch2 + '>%' )\n)\ngroup by\nPosts.Tags,Posts.Id, cast(PH.CreationDate as date)\norder by\ncast(PH.CreationDate as date) desc"
    },
    {
        "QuerySetId": 1263184,
        "Title": "Tags with most answers for the given user",
        "Description": null,
        "QueryBody": "SELECT \n  t.Tagname,\n  COUNT(a.Id) AS [Count],\n  SUM(a.Score) AS [Score]\nFROM Posts a INNER JOIN Posts q ON a.ParentId=q.Id\n  INNER JOIN PostTags pt ON pt.PostId=q.Id\n  INNER JOIN Tags t ON t.Id=pt.TagId\nWHERE  (a.OwnerUserId=##userid?39599##)\nGROUP BY t.TagName\nORDER BY Count(a.Id) DESC",
        "CreationDate": "2020-07-15 07:55:46",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 1263185,
        "Title": "Tags with most answers for the given user (non CW)",
        "Description": null,
        "QueryBody": "SELECT \n  t.Tagname,\n  COUNT(a.Id) AS [Count],\n  SUM(a.Score) AS [Score]\nFROM Posts a INNER JOIN Posts q ON a.ParentId=q.Id\n  INNER JOIN PostTags pt ON pt.PostId=q.Id\n  INNER JOIN Tags t ON t.Id=pt.TagId\nWHERE (a.OwnerUserId=##userid?39599##) AND (a.CommunityOwnedDate IS NULL)\nGROUP BY t.TagName\nORDER BY Count(a.Id) DESC",
        "CreationDate": "2020-07-15 07:57:03",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 1263187,
        "Title": "Users with non-CW answers in most tags",
        "Description": null,
        "QueryBody": "WITH  the Users table is redundant here, as the data is already available as a.OwnerUserId\n---query WITHout this join: https:\/\/data.stackexchange.com\/math\/query\/1263198\/users-WITH-non-cw-answers-in-most-tags\nSELECT TOP(##num?100##)\n  RANK() OVER(ORDER BY COUNT(DISTINCT pt.TagId) DESC) AS Rank,\n  u.Id AS [User Link],\n  COUNT(DISTINCT pt.TagId) AS [# of tags]\nFROM Users u INNER JOIN Posts a ON a.OwnerUserId=u.Id\n  INNER JOIN Posts q ON a.ParentId=q.Id\n  INNER JOIN PostTags pt ON pt.PostId=q.Id\nWHERE (a.CommunityOwnedDate IS NULL)  \nGROUP BY u.Id\nORDER BY COUNT(DISTINCT pt.TagId) DESC",
        "CreationDate": "2020-07-15 10:12:07",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 1263189,
        "Title": "List of users with the given username (case insensitive)",
        "Description": null,
        "QueryBody": "SELECT  TOP(##num?100##)\n  Id AS [User Link], Reputation, \n  CreationDate LastAccessDate\nFROM Users\nWHERE (LOWER(DisplayName)='##name?andrew##')\n  AND (Reputation>=##min?1##)\nORDER BY Reputation DESC",
        "CreationDate": "2020-07-15 08:51:31",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 1263194,
        "Title": "Users with non-CW answers in most tags (including deleted users)",
        "Description": null,
        "QueryBody": "SELECT  TOP(##num?100##)\n  RANK() OVER(ORDER BY COUNT(DISTINCT pt.TagId) DESC) AS Rank,\n  a.OwnerUserId AS [User Link],\n  a.OwnerDisplayName,\n  COUNT(DISTINCT pt.TagId) AS [# of tags]\nFROM Posts a INNER JOIN Posts q ON a.ParentId=q.Id\n  INNER JOIN PostTags pt ON pt.PostId=q.Id\nWHERE (a.CommunityOwnedDate IS NULL)  \nGROUP BY a.OwnerUserId, a.OwnerDisplayName\nORDER BY COUNT(DISTINCT pt.TagId) DESC",
        "CreationDate": "2020-07-15 10:14:18",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 1263199,
        "Title": "Users with answers in most tags",
        "Description": null,
        "QueryBody": "SELECT  TOP(##num?100##)\n  RANK() OVER(ORDER BY COUNT(DISTINCT pt.TagId) DESC) AS Rank,\n  a.OwnerUserId AS [User Link],\n  COUNT(DISTINCT pt.TagId) AS [# of tags]\nFROM Posts a INNER JOIN Posts q ON a.ParentId=q.Id\n  INNER JOIN PostTags pt ON pt.PostId=q.Id\n----WHERE (a.CommunityOwnedDate IS NULL)  \nGROUP BY a.OwnerUserId\nORDER BY COUNT(DISTINCT pt.TagId) DESC",
        "CreationDate": "2020-07-15 10:11:33",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 1263200,
        "Title": "Users with answers in most tags (including deleted users)",
        "Description": null,
        "QueryBody": "SELECT  TOP(##num?100##)\n  RANK() OVER(ORDER BY COUNT(DISTINCT pt.TagId) DESC) AS Rank,\n  a.OwnerUserId AS [User Link],\n  a.OwnerDisplayName,\n  COUNT(DISTINCT pt.TagId) AS [# of tags]\nFROM Posts a INNER JOIN Posts q ON a.ParentId=q.Id\n  INNER JOIN PostTags pt ON pt.PostId=q.Id\n---WHERE (a.CommunityOwnedDate IS NULL)  \nGROUP BY a.OwnerUserId, a.OwnerDisplayName\nORDER BY COUNT(DISTINCT pt.TagId) DESC",
        "CreationDate": "2020-07-15 10:14:08",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 1263219,
        "Title": "Tags and their wikis and excerpts that are similar to [tag name]",
        "Description": null,
        "QueryBody": "DECLARE  @tagToSearch nvarchar(35) = ##tag:string##;\nDECLARE @startsWith bit = iif(##starts:int?1## >= 1, 1, 0);\n\nDECLARE @matcher nvarchar(35) = iif(\n  @startsWith = 1, \n  @tagToSearch + '%', \n  '%' + @tagToSearch + '%'\n  )\n\nselect\n  T.TagName,\n  WE.Body as Excerpt,\n  WW.Body as Wiki,\n  'site:\/\/tags\/' + TS.TargetTagName + '|' + Ts.TargetTagName as [Synonym Of],\n  (\n    select string_agg ('<'+TSS.SourceTagName+'>', '')\n    from TagSynonyms as TSS \n    where TSS.TargetTagName = T.TagName\n  ) as [Tags]\nfrom\n  Tags as T\n  left join Posts as WE on WE.Id = T.ExcerptPostId\n  left join Posts as WW on WW.Id = T.WikiPostId\n  left join TagSynonyms as TS on TS.SourceTagName = T.TagName\nwhere\n  T.TagName like (@matcher)\norder by\n  T.TagName\nasc",
        "CreationDate": "2020-08-08 14:24:38",
        "validated": false,
        "QueryBody_Original": "DECLARE  @tagToSearch nvarchar(35) = ##tag:string##;\nDECLARE @startsWith bit = iif(##starts:int?1## >= 1, 1, 0);\n\nDECLARE @matcher nvarchar(35) = iif(\n  @startsWith = 1, \n  @tagToSearch + '%', \n  '%' + @tagToSearch + '%'\n  )\n\nselect\n  T.TagName,\n  WE.Body as Excerpt,\n  WW.Body as Wiki,\n  'site:\/\/tags\/' + TS.TargetTagName + '|' + Ts.TargetTagName as [Synonym Of],\n  (\n    select string_agg ('<'+TSS.SourceTagName+'>', '')\n    from TagSynonyms as TSS \n    where TSS.TargetTagName = T.TagName\n  ) as [Tags]\nfrom\n  Tags as T\n  left join Posts as WE on WE.Id = T.ExcerptPostId\n  left join Posts as WW on WW.Id = T.WikiPostId\n  left join TagSynonyms as TS on TS.SourceTagName = T.TagName\nwhere\n  T.TagName like (@matcher)\norder by\n  T.TagName\nasc"
    },
    {
        "QuerySetId": 1263431,
        "Title": "Recently closed questions for a single user",
        "Description": null,
        "QueryBody": "SELECT  Id AS [Post Link], ClosedDate, Score\n  FROM Posts\n  WHERE OwnerUserId = ##UserId:int##\n    AND ClosedDate IS NOT NULL\n  ORDER BY ClosedDate DESC",
        "CreationDate": "2020-07-15 23:50:23",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 1264015,
        "Title": "close voters on question (including the link to revisions)",
        "Description": null,
        "QueryBody": "SELECT  postid as [Post Link],\n  concat('site:\/\/posts\/',\n        postid,\n        '\/revisions'\n        ) [Revisions Link]\n     , crt.name\n --    , text\n --    , JSON_QUERY(text, '$.Voters')\n     , cv.userid as [User Link]\nfrom posthistory ph\ninner join closereasontypes crt on crt.id = comment\ncross apply OPENJSON(JSON_QUERY(ph.text, '$.Voters')) \n       with (userid int '$.Id') cv\nwhere posthistorytypeid = 10",
        "CreationDate": "2020-07-17 15:50:04",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 1264016,
        "Title": "Posts closed by the given user",
        "Description": null,
        "QueryBody": "SELECT  postid as [Post Link],\n  concat('site:\/\/posts\/',\n        postid,\n        '\/revisions'\n        ) [Revisions Link]\n     , crt.name\n --    , text\n --    , JSON_QUERY(text, '$.Voters')\n     , cv.userid as [User Link]\nfrom posthistory ph\ninner join closereasontypes crt on crt.id = comment\ncross apply OPENJSON(JSON_QUERY(ph.text, '$.Voters')) \n       with (userid int '$.Id') cv\nwhere (posthistorytypeid = 10)\n  AND (cv.userid=##UserId?8297##)\norder by postid DESC",
        "CreationDate": "2020-07-17 15:58:04",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 1264144,
        "Title": "How many questions are tagged with [tag] alone?",
        "Description": null,
        "QueryBody": "DECLARE  @question int = 1;\nDECLARE @reTag int = 3;\nDECLARE @tagToSearch nvarchar(35) = ##tag:string?google-apps-script-web-application##;\n\n\nselect\nPosts.CreationDate,\nPosts.Tags,\nPosts.Id as [Post Link]\nfrom\nPosts\nwhere\nPosts.PostTypeId = @question\nand\n(\n  Posts.Tags = '<' + @tagToSearch + '>' \n)\ngroup by\nPosts.Tags,Posts.Id, Posts.CreationDate\norder by\nPosts.CreationDate desc",
        "CreationDate": "2020-07-17 21:44:49",
        "validated": false,
        "QueryBody_Original": "DECLARE  @question int = 1;\nDECLARE @reTag int = 3;\nDECLARE @tagToSearch nvarchar(35) = ##tag:string?google-apps-script-web-application##;\n\n\nselect\nPosts.CreationDate,\nPosts.Tags,\nPosts.Id as [Post Link]\nfrom\nPosts\nwhere\nPosts.PostTypeId = @question\nand\n(\n  Posts.Tags = '<' + @tagToSearch + '>' \n)\ngroup by\nPosts.Tags,Posts.Id, Posts.CreationDate\norder by\nPosts.CreationDate desc"
    },
    {
        "QuerySetId": 1264595,
        "Title": "Questions tagged with [tag] that never got an answer",
        "Description": null,
        "QueryBody": "DECLARE  @tag1 nvarchar(35) = '<' + ##Tag1:string## + '>';\nDECLARE @totalPosted bigint;\n\nselect Unanswered, Total, (Unanswered \/ Total) as Percentage from\n(select\n  count(Id) as Unanswered,\n  (\n    select \n      count(Id) \n    from \n      Posts \n    where \n      PostTypeId = 1 and \n      charindex(@tag1, Tags) > 0\n  ) as Total\nfrom\n  Posts\nwhere\n  PostTypeId = 1\n  and\n  charindex(@tag1, Tags) > 0\n  and\n  AnswerCount = 0\n) as dataQuery",
        "CreationDate": "2020-07-19 04:34:42",
        "validated": false,
        "QueryBody_Original": "DECLARE  @tag1 nvarchar(35) = '<' + ##Tag1:string## + '>';\nDECLARE @totalPosted bigint;\n\nselect Unanswered, Total, (Unanswered \/ Total) as Percentage from\n(select\n  count(Id) as Unanswered,\n  (\n    select \n      count(Id) \n    from \n      Posts \n    where \n      PostTypeId = 1 and \n      charindex(@tag1, Tags) > 0\n  ) as Total\nfrom\n  Posts\nwhere\n  PostTypeId = 1\n  and\n  charindex(@tag1, Tags) > 0\n  and\n  AnswerCount = 0\n) as dataQuery"
    },
    {
        "QuerySetId": 1264602,
        "Title": "Questions tagged with [tag] that were closed",
        "Description": null,
        "QueryBody": "DECLARE  @tag nvarchar(35) = '<' + ##tag:string## + '>';\nDECLARE @offtopic tinyint = 2;\n\nselect\n  count(Posts.Id) as [Questions Posted]\nfrom\n  Posts\n  left join PostHistory as PH on PH.PostId = Posts.Id\nwhere\n    Posts.PostTypeId = 1\n  and\n    charindex(@tag, Posts.Tags) > 0\n  and\n    Posts.ClosedDate is not null\n  and\n    PH.PostHistoryTypeId = @offtopic",
        "CreationDate": "2020-07-19 07:56:28",
        "validated": false,
        "QueryBody_Original": "DECLARE  @tag nvarchar(35) = '<' + ##tag:string## + '>';\nDECLARE @offtopic tinyint = 2;\n\nselect\n  count(Posts.Id) as [Questions Posted]\nfrom\n  Posts\n  left join PostHistory as PH on PH.PostId = Posts.Id\nwhere\n    Posts.PostTypeId = 1\n  and\n    charindex(@tag, Posts.Tags) > 0\n  and\n    Posts.ClosedDate is not null\n  and\n    PH.PostHistoryTypeId = @offtopic"
    },
    {
        "QuerySetId": 1264604,
        "Title": "Unique combinations of tags from questions posted with [tag]",
        "Description": null,
        "QueryBody": "DECLARE  @tagToSearch nvarchar(35) = '<' + ##tag:string## + '>';\n\nselect distinct\n  count(Tags) as [Question Number]\nfrom\n  Posts\nwhere\n  PostTypeId = 1 and\n  charindex(@tagToSearch, Tags) > 0\n  and\n(Tags like '%<teamcity>%' or\nTags like '%<c#>%' or\nTags like '%<mysql>%' or\nTags like '%<oracle>%' or\nTags like '%<java (via spring \/ mockito)>%' or\nTags like '%<sql-server>%' or\nTags like '%<wpf>%' or\nTags like '%<c++>%' or\nTags like '%<windows>%' or\nTags like '%<postgresql>%' or\nTags like '%<h2>%' or\nTags like '%<mariadb>%' or\nTags like '%<javascript>%' or\nTags like '%<back4app>%' or\nTags like '%<google-sheets>%' or\nTags like '%<asp.net>%')",
        "CreationDate": "2020-07-19 09:24:10",
        "validated": false,
        "QueryBody_Original": "DECLARE  @tagToSearch nvarchar(35) = '<' + ##tag:string## + '>';\n\nselect distinct\n  count(Tags) as [Question Number]\nfrom\n  Posts\nwhere\n  PostTypeId = 1 and\n  charindex(@tagToSearch, Tags) > 0\n  and\n(Tags like '%<teamcity>%' or\nTags like '%<c#>%' or\nTags like '%<mysql>%' or\nTags like '%<oracle>%' or\nTags like '%<java (via spring \/ mockito)>%' or\nTags like '%<sql-server>%' or\nTags like '%<wpf>%' or\nTags like '%<c++>%' or\nTags like '%<windows>%' or\nTags like '%<postgresql>%' or\nTags like '%<h2>%' or\nTags like '%<mariadb>%' or\nTags like '%<javascript>%' or\nTags like '%<back4app>%' or\nTags like '%<google-sheets>%' or\nTags like '%<asp.net>%')"
    },
    {
        "QuerySetId": 1264607,
        "Title": "Percent of questions tagged with [tag] that had it removed",
        "Description": null,
        "QueryBody": "DECLARE  @reTag int = 3;\nDECLARE @tagToSearch nvarchar(35) = ##tag:string##;\n\nDECLARE @totalPosted bigint = (\n    select \n      count(Id) \n    from \n      Posts \n    where \n      PostTypeId = 1 and \n      charindex(@tagToSearch, Tags) > 0\n  );\n\nselect\n  count(Posts.Id) as Removed,\n  @totalPosted as [Total Posted],\n  count(Posts.Id) * 100 \/ @totalPosted as Percentage\nfrom\n  Posts\n  inner join PostHistory as PH on PH.PostId = Posts.Id\nwhere\n  Posts.PostTypeId = 1\n  and\n  PH.PostHistoryTypeId = @reTag\n  and\n(\n  charindex('<' + @tagToSearch + '>', PH.Text) <= 0\n  and\n  Posts.Tags like ('%<' + @tagToSearch + '>%' )\n)",
        "CreationDate": "2020-07-19 09:59:01",
        "validated": false,
        "QueryBody_Original": "DECLARE  @reTag int = 3;\nDECLARE @tagToSearch nvarchar(35) = ##tag:string##;\n\nDECLARE @totalPosted bigint = (\n    select \n      count(Id) \n    from \n      Posts \n    where \n      PostTypeId = 1 and \n      charindex(@tagToSearch, Tags) > 0\n  );\n\nselect\n  count(Posts.Id) as Removed,\n  @totalPosted as [Total Posted],\n  count(Posts.Id) * 100 \/ @totalPosted as Percentage\nfrom\n  Posts\n  inner join PostHistory as PH on PH.PostId = Posts.Id\nwhere\n  Posts.PostTypeId = 1\n  and\n  PH.PostHistoryTypeId = @reTag\n  and\n(\n  charindex('<' + @tagToSearch + '>', PH.Text) <= 0\n  and\n  Posts.Tags like ('%<' + @tagToSearch + '>%' )\n)"
    },
    {
        "QuerySetId": 1264905,
        "Title": "Who added this [tag] to the question?",
        "Description": null,
        "QueryBody": "DECLARE  @question int = 1;\nDECLARE @reTag int = 6;\nDECLARE @initTag int = 3;\nDECLARE @tagToSearch nvarchar(35) = ##tag:string?google-apps-script-simple-triggers##;\n\n\nselect\nMAX(CreationDate),\nPostId as [Post Link],\nFIRST_USER AS [User Link]\n--,P.PostHistoryTypeId,\n--P.Text\nfrom\n(SELECT\nFIRST_VALUE(PH.UserId) OVER (PARTITION BY PH.PostId ORDER BY PH.CreationDate) AS FIRST_USER,\n*\nFROM \nPostHistory as PH\nWHERE\n(PH.PostHistoryTypeId = @reTag\nor\nPH.PostHistoryTypeId = @initTag\n)\nand\nPH.Text like '%<' + @tagToSearch + '>%'\n) AS P\n\nWhere\n\nFIRST_USER = 8404453\n\ngroup by\nPostId,FIRST_USER\n--,P.PostHistoryTypeId,P.Text",
        "CreationDate": "2020-07-20 01:03:47",
        "validated": false,
        "QueryBody_Original": "DECLARE  @question int = 1;\nDECLARE @reTag int = 6;\nDECLARE @initTag int = 3;\nDECLARE @tagToSearch nvarchar(35) = ##tag:string?google-apps-script-simple-triggers##;\n\n\nselect\nMAX(CreationDate),\nPostId as [Post Link],\nFIRST_USER AS [User Link]\n--,P.PostHistoryTypeId,\n--P.Text\nfrom\n(SELECT\nFIRST_VALUE(PH.UserId) OVER (PARTITION BY PH.PostId ORDER BY PH.CreationDate) AS FIRST_USER,\n*\nFROM \nPostHistory as PH\nWHERE\n(PH.PostHistoryTypeId = @reTag\nor\nPH.PostHistoryTypeId = @initTag\n)\nand\nPH.Text like '%<' + @tagToSearch + '>%'\n) AS P\n\nWhere\n\nFIRST_USER = 8404453\n\ngroup by\nPostId,FIRST_USER\n--,P.PostHistoryTypeId,P.Text"
    },
    {
        "QuerySetId": 1265647,
        "Title": "Number of Caucus and Constituent badges",
        "Description": null,
        "QueryBody": "SELECT  TOP(##num?100##)\n  COUNT(*) AS [Count]\nFROM Badges b \nWHERE (b.Name IN ('Caucus','Constituent'))\nGROUP BY b.Name",
        "CreationDate": "2020-07-21 09:28:14",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 1265649,
        "Title": "Number of badges of a certain kind",
        "Description": null,
        "QueryBody": "SELECT  TOP(##num?100##)\n  COUNT(*) AS [Count]\nFROM Badges b \nWHERE (b.Name='##name?Caucus##')\nGROUP BY b.Name",
        "CreationDate": "2020-07-21 09:29:11",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 1265919,
        "Title": "Questions with open bounty >= 200",
        "Description": null,
        "QueryBody": "SELECT  TOP 300 p.Id as [Post Link],\n               p.Tags,\n               vob.BountyAmount AS [Bounty],\n               LEFT(vob.CreationDate, 6) AS [Bounty],\n               LEFT(p.CreationDate, 11) AS [Asked],\n               ISNULL(p.AnswerCount, 0) AS [A],\n               vob.*\nFROM Posts p\nJOIN Votes vob\nON vob.PostId = p.Id AND vob.VoteTypeId = 8\nWHERE p.ClosedDate IS NULL\nAND vob.BountyAmount >= 200\nAND DATEADD(d, 7, vob.CreationDate) >= GETDATE()\nAND NOT EXISTS (SELECT *\n                FROM Votes vcb\n                WHERE vcb.PostId = p.Id AND vcb.VoteTypeId = 9)\nORDER BY ISNULL(p.AnswerCount, 0) ASC,\n         vob.BountyAmount DESC,\n         vob.CreationDate DESC",
        "CreationDate": "2020-07-22 03:08:40",
        "validated": false,
        "QueryBody_Original": "SELECT  TOP 300 p.Id as [Post Link],\n               p.Tags,\n               vob.BountyAmount AS [Bounty],\n               LEFT(vob.CreationDate, 6) AS [Bounty],\n               LEFT(p.CreationDate, 11) AS [Asked],\n               ISNULL(p.AnswerCount, 0) AS [A],\n               vob.*\nFROM Posts p\nJOIN Votes vob\nON vob.PostId = p.Id AND vob.VoteTypeId = 8\nWHERE p.ClosedDate IS NULL\nAND vob.BountyAmount >= 200\nAND DATEADD(d, 7, vob.CreationDate) >= GETDATE()\nAND NOT EXISTS (SELECT *\n                FROM Votes vcb\n                WHERE vcb.PostId = p.Id AND vcb.VoteTypeId = 9)\nORDER BY ISNULL(p.AnswerCount, 0) ASC,\n         vob.BountyAmount DESC,\n         vob.CreationDate DESC"
    },
    {
        "QuerySetId": 1266064,
        "Title": "Totals for \"tags and their wikis and excerpts that are similar to [tag name]\"",
        "Description": null,
        "QueryBody": "DECLARE  @tagToSearch nvarchar(35) = ##tag:string##;\nDECLARE @startsWith bit = iif(##starts:int?1## >= 1, 1, 0);\n\nDECLARE @matcher nvarchar(35) = iif(\n  @startsWith = 1, \n  @tagToSearch + '%', \n  '%' + @tagToSearch + '%'\n  )\n\nselect\n  count( TagName ) as [# Tags],\n  sum( case when WE.Body != '' then 1 else 0 end ) as [With Excerpt],\n  sum( case when WW.Body != '' then 1 else 0 end ) as [With Wiki],\n  cast(count(TagName)as nvarchar(max)) + ' tags of which ' as [Prompt]\nfrom\n  Tags\n  left join Posts as WE on WE.Id = Tags.ExcerptPostId\n  left join Posts as WW on WW.Id = Tags.WikiPostId\nwhere\n  TagName like (@matcher)\norder by\n  [# Tags]\nasc",
        "CreationDate": "2020-07-22 20:03:07",
        "validated": false,
        "QueryBody_Original": "DECLARE  @tagToSearch nvarchar(35) = ##tag:string##;\nDECLARE @startsWith bit = iif(##starts:int?1## >= 1, 1, 0);\n\nDECLARE @matcher nvarchar(35) = iif(\n  @startsWith = 1, \n  @tagToSearch + '%', \n  '%' + @tagToSearch + '%'\n  )\n\nselect\n  count( TagName ) as [# Tags],\n  sum( case when WE.Body != '' then 1 else 0 end ) as [With Excerpt],\n  sum( case when WW.Body != '' then 1 else 0 end ) as [With Wiki],\n  cast(count(TagName)as nvarchar(max)) + ' tags of which ' as [Prompt]\nfrom\n  Tags\n  left join Posts as WE on WE.Id = Tags.ExcerptPostId\n  left join Posts as WW on WW.Id = Tags.WikiPostId\nwhere\n  TagName like (@matcher)\norder by\n  [# Tags]\nasc"
    },
    {
        "QuerySetId": 1266094,
        "Title": "Posts tagged with only [tag] with no answers and low [views]",
        "Description": null,
        "QueryBody": "DECLARE  @views int = ##viewed:int?1000##\nDECLARE @comments int = ##comments:int?-1##\nDECLARE @tagToSearch nvarchar(35) = ##tag:string?all##\n\nselect\n  Posts.Id as [Post Link],\n  Posts.CommentCount as [# Comments],\n  Posts.ViewCount as [# Views]\nfrom\n  Tags\n  right join Posts on Posts.Tags = '<' + TagName + '>'\n  --left join Votes on \nwhere\n  Posts.AnswerCount = 0 \n  and Posts.Score >= 0 \n  and Posts.ViewCount <= @views\n  and TagName like ('%' + iif(@tagToSearch != 'all',@tagToSearch,'') + '%')\n  and Posts.CommentCount <= iif(@comments < 0,Posts.CommentCount,@comments)\norder by\n  [# Views]\nasc",
        "CreationDate": "2020-07-22 21:33:06",
        "validated": false,
        "QueryBody_Original": "DECLARE  @views int = ##viewed:int?1000##\nDECLARE @comments int = ##comments:int?-1##\nDECLARE @tagToSearch nvarchar(35) = ##tag:string?all##\n\nselect\n  Posts.Id as [Post Link],\n  Posts.CommentCount as [# Comments],\n  Posts.ViewCount as [# Views]\nfrom\n  Tags\n  right join Posts on Posts.Tags = '<' + TagName + '>'\n  --left join Votes on \nwhere\n  Posts.AnswerCount = 0 \n  and Posts.Score >= 0 \n  and Posts.ViewCount <= @views\n  and TagName like ('%' + iif(@tagToSearch != 'all',@tagToSearch,'') + '%')\n  and Posts.CommentCount <= iif(@comments < 0,Posts.CommentCount,@comments)\norder by\n  [# Views]\nasc"
    },
    {
        "QuerySetId": 1266195,
        "Title": "Posts by a deleted user",
        "Description": "A query to bring up questions\/answers of deleted users",
        "QueryBody": "SELECT  CreationDate, Id as [Post Link]\nFROM Posts\nWHERE OwnerUserId = ##Name:int##\nORDER BY Score DESC",
        "CreationDate": "2020-07-23 02:09:57",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 1266222,
        "Title": "Unprotected questions by user 59609",
        "Description": null,
        "QueryBody": "SELECT s questions that have been unprotected by 59609 on RPG,\n-- which were previously protected automatically by Community.\n\nSELECT ph.PostId,\n       p.Id AS [Post Link],\n       ph.CreationDate AS [Unprotected At]\nFROM PostHistory ph\nINNER JOIN Posts p ON ph.PostId = p.Id\nWHERE ph.PostHistoryTypeId = 20\n  AND ph.UserId = 59609\n -- AND ph.PostId IN\n --(SELECT ph.PostId\n -- FROM PostHistory ph\n -- WHERE ph.PostHistoryTypeId = 19\n --   AND ph.UserId = -1)\nORDER BY [Unprotected At] DESC;",
        "CreationDate": "2020-07-23 07:28:38",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 1266347,
        "Title": "Users eligible for voting in the election who accessed site and posted in 6 months",
        "Description": null,
        "QueryBody": "DECLARE  @rep int = ##reputation:int?150##\n\nselect distinct\n Users.Id\nfrom\n  Users\n  left join Posts on Posts.OwnerUserId = Users.Id\nwhere\n  Users.Reputation >= @rep\n  and\n  Posts.CreationDate >= dateadd(year, -1, getdate())\n  and\n  Users.LastAccessDate >= dateadd(month, -6, getdate())\norder by\n  Users.Id",
        "CreationDate": "2020-07-23 15:30:29",
        "validated": false,
        "QueryBody_Original": "DECLARE  @rep int = ##reputation:int?150##\n\nselect distinct\n Users.Id\nfrom\n  Users\n  left join Posts on Posts.OwnerUserId = Users.Id\nwhere\n  Users.Reputation >= @rep\n  and\n  Posts.CreationDate >= dateadd(year, -1, getdate())\n  and\n  Users.LastAccessDate >= dateadd(month, -6, getdate())\norder by\n  Users.Id"
    },
    {
        "QuerySetId": 1266713,
        "Title": "Positively received questions [with] [tag] that [do not] contain [text]",
        "Description": null,
        "QueryBody": "DECLARE  @tagToSearch nvarchar(35) = '<' + ##tag:string## + '>';\nDECLARE @textToSearch nvarchar(max) = lower(##text:string##);\nDECLARE @include bit = iif(##includeText:string?yes## = 'yes', 1, 0);\nDECLARE @withTag bit = iif(##includeTag:string?yes## = 'yes', 1, 0);\nDECLARE @totalPosted bigint;\n\nselect\n  Id as [Post Link],\n  Score\nfrom\n  Posts\nwhere\n  PostTypeId = 1\n  and\n  (\n    @withTag = 1 and charindex(@tagToSearch, Tags) > 0\n    or\n    @withTag = 0 and charindex(@tagToSearch, Tags) = 0\n  )\n  and\n  (\n    @include = 1 and charindex(@textToSearch, lower(Body)) > 0\n    or\n    @include = 0 and charindex(@textToSearch, lower(Body)) = 0\n  )\n  and\n  DeletionDate is null\n  and\n  ClosedDate is null\n  and\n  Score >= 0\norder by\n  Score\ndesc",
        "CreationDate": "2020-07-24 16:36:50",
        "validated": false,
        "QueryBody_Original": "DECLARE  @tagToSearch nvarchar(35) = '<' + ##tag:string## + '>';\nDECLARE @textToSearch nvarchar(max) = lower(##text:string##);\nDECLARE @include bit = iif(##includeText:string?yes## = 'yes', 1, 0);\nDECLARE @withTag bit = iif(##includeTag:string?yes## = 'yes', 1, 0);\nDECLARE @totalPosted bigint;\n\nselect\n  Id as [Post Link],\n  Score\nfrom\n  Posts\nwhere\n  PostTypeId = 1\n  and\n  (\n    @withTag = 1 and charindex(@tagToSearch, Tags) > 0\n    or\n    @withTag = 0 and charindex(@tagToSearch, Tags) = 0\n  )\n  and\n  (\n    @include = 1 and charindex(@textToSearch, lower(Body)) > 0\n    or\n    @include = 0 and charindex(@textToSearch, lower(Body)) = 0\n  )\n  and\n  DeletionDate is null\n  and\n  ClosedDate is null\n  and\n  Score >= 0\norder by\n  Score\ndesc"
    },
    {
        "QuerySetId": 1267795,
        "Title": "Find comments with specified text based upon length",
        "Description": null,
        "QueryBody": "SELECT    TOP ##numberofcomments## c.text, \n         c.id                     AS [Comment Link], \n         creationdate \nFROM     comments c \nWHERE    c.text LIKE '%##keyword##%' \nAND      len(c.text) <= 25 \nORDER BY creationdate desc",
        "CreationDate": "2020-08-22 08:27:47",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 1267985,
        "Title": "Get comments of users in a state",
        "Description": null,
        "QueryBody": "SELECT  c.Id, c.Score, c.Text, c.CreationDate, c.UserId, u.Location, u.Reputation\nFROM Comments c\nINNER JOIN Users u ON u.Id = c.UserId\nWHERE \n    (Location LIKE ##abbr:string## \n    or UPPER(Location) LIKE ##full:string##) \n    AND convert(date, c.CreationDate) >= convert(date, '20200220')\n    AND convert(date, c.CreationDate) <= convert(date, '20200429')\n    AND UPPER(Location) NOT LIKE '%DC%'\n    AND UPPER(Location) NOT LIKE '%D.C.%'\n    AND UPPER(Location) NOT LIKE '%COLUMBIA%'",
        "CreationDate": "2020-07-27 17:42:10",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 1268025,
        "Title": "Active ITA Users by Reputation",
        "Description": null,
        "QueryBody": "SELECT  ROW_NUMBER() OVER (ORDER BY Reputation desc, LastAccessDate desc) AS Rank,\n       Id AS [User Link],\n       Reputation, LastAccessDate, Location, UpVotes, DownVotes\nFROM Users u\nWHERE \n    (UPPER(Location) LIKE 'ITA%' \n     OR UPPER(Location) LIKE '% ITA%'\n    )\n    AND Reputation >= ##MinReputation:int?3000##\n    AND LastAccessDate >= getdate() - ##DaysAgo:int?10##",
        "CreationDate": "2020-07-27 19:07:50",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 1268296,
        "Title": "Users with lowest reputation who have a gold badge",
        "Description": null,
        "QueryBody": "WITH  badges_cte AS (\nSELECT \n  UserId AS uid,\n  sum(case when class = 1 then 1 else 0 end) AS gold,\n  sum(case when class = 2 then 1 else 0 end) AS silver,\n  sum(case when class = 3 then 1 else 0 end) AS bronze,\n  count(Id) AS total\nFROM Badges\nGROUP BY UserId\n)\n\nSELECT TOP(##num?100##)\n  u.Id As [User Link],\n  u.Reputation,\n  b.gold, b.silver, b.bronze\nFROM badges_cte b INNER JOIN Users u ON b.uid=u.Id\nWHERE (gold>=1)\nORDER BY Reputation",
        "CreationDate": "2020-07-28 13:22:11",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 1268297,
        "Title": "Users with highest reputation and no gold badge",
        "Description": null,
        "QueryBody": "WITH  badges_cte AS (\nSELECT \n  UserId AS uid,\n  sum(case when class = 1 then 1 else 0 end) AS gold,\n  sum(case when class = 2 then 1 else 0 end) AS silver,\n  sum(case when class = 3 then 1 else 0 end) AS bronze,\n  count(Id) AS total\nFROM Badges\nGROUP BY UserId\n)\n\nSELECT TOP(##num?100##)\n  u.Id As [User Link],\n  u.Reputation,\n  b.gold, b.silver, b.bronze\nFROM badges_cte b INNER JOIN Users u ON b.uid=u.Id\nWHERE (gold=0)\nORDER BY Reputation DESC",
        "CreationDate": "2020-07-28 13:23:47",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 1268300,
        "Title": "Hot moo shuffle: milk an array",
        "Description": null,
        "QueryBody": "DECLARE  @ table(v int,i int identity(1,2))\n\nSELECT v\nFROM @\nORDER BY abs(sum(1)over()-i),i",
        "CreationDate": "2020-07-28 14:38:44",
        "validated": false,
        "QueryBody_Original": "DECLARE  @ table(v int,i int identity(1,2))\n\nSELECT v\nFROM @\nORDER BY abs(sum(1)over()-i),i"
    },
    {
        "QuerySetId": 1268410,
        "Title": "Where are all my Playground Links?",
        "Description": null,
        "QueryBody": "DECLARE  @UserId int = ##UserId## \nselect id,body as text from posts where owneruserid = @UserId and body like '%\/playground\/%' union\nselect id,text from comments where userid = @UserId and text like '%\/playground\/%'",
        "CreationDate": "2020-07-28 17:48:56",
        "validated": false,
        "QueryBody_Original": "DECLARE  @UserId int = ##UserId## \nselect id,body as text from posts where owneruserid = @UserId and body like '%\/playground\/%' union\nselect id,text from comments where userid = @UserId and text like '%\/playground\/%'"
    },
    {
        "QuerySetId": 1268683,
        "Title": "Highest reputation users with a specific badge",
        "Description": null,
        "QueryBody": "SELECT  TOP(##num?500##)\n  RANK() OVER(ORDER BY u.Reputation DESC) AS Rank,\n  u.Id AS [User Link],\n  u.Reputation,\n  COUNT (b.Id) AS [Count]\nFROM Badges b INNER JOIN Users u ON b.UserId=u.Id\n  WHERE (b.Name = '##name?Famous Question##')\nGROUP BY u.Id, u.Reputation\nORDER BY u.Reputation DESC",
        "CreationDate": "2020-07-29 10:59:08",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 1268730,
        "Title": "AWS Answers by Week for a given User",
        "Description": null,
        "QueryBody": "SELECT \n  DATEADD(WEEK, DATEDIFF(WEEK, 0, Answer.CreationDate), 0) AS Week,\n  COUNT(Answer.Id) AS Answers\n\nFROM Posts as Answer\nJOIN Posts as Question ON Question.Id = Answer.ParentId\n\nWHERE Question.PostTypeId = 1 -- Question\n  AND Answer.PostTypeId = 2 -- Answer\n  AND (Question.Tags LIKE '%<amazon-%' OR Question.Tags LIKE '%<aws-%')\n  AND Answer.CreationDate >= '2020-01-01'\n  AND Answer.OwnerUserId = ##UserId##\n\nGROUP BY DATEADD(WEEK, DATEDIFF(WEEK, 0, Answer.CreationDate), 0)\nORDER BY DATEADD(WEEK, DATEDIFF(WEEK, 0, Answer.CreationDate), 0)",
        "CreationDate": "2020-07-29 14:46:12",
        "validated": false,
        "QueryBody_Original": "SELECT \n  DATEADD(WEEK, DATEDIFF(WEEK, 0, Answer.CreationDate), 0) AS Week,\n  COUNT(Answer.Id) AS Answers\n\nFROM Posts as Answer\nJOIN Posts as Question ON Question.Id = Answer.ParentId\n\nWHERE Question.PostTypeId = 1 -- Question\n  AND Answer.PostTypeId = 2 -- Answer\n  AND (Question.Tags LIKE '%<amazon-%' OR Question.Tags LIKE '%<aws-%')\n  AND Answer.CreationDate >= '2020-01-01'\n  AND Answer.OwnerUserId = ##UserId##\n\nGROUP BY DATEADD(WEEK, DATEDIFF(WEEK, 0, Answer.CreationDate), 0)\nORDER BY DATEADD(WEEK, DATEDIFF(WEEK, 0, Answer.CreationDate), 0)"
    },
    {
        "QuerySetId": 1268811,
        "Title": "most reputation with no views in a site",
        "Description": null,
        "QueryBody": "DECLARE  @sql NVARCHAR(MAX) ='\nSELECT u1.reputation, ''https:\/\/' + ##site1:string## + '.stackexchange.com\/u\/''\n  + CAST(u1.Id AS NVARCHAR) + ''|'' + u1.DisplayName AS ''User''\n  \n   FROM [StackExchange.' + ##site1:string## + '].dbo.Users AS u1\n   \n  where (u1.Views = 0)\n  ORDER BY u1.Reputation DESC\n  \n  ';\nEXEC(@sql);",
        "CreationDate": "2020-07-29 20:02:20",
        "validated": false,
        "QueryBody_Original": "DECLARE  @sql NVARCHAR(MAX) ='\nSELECT u1.reputation, ''https:\/\/' + ##site1:string## + '.stackexchange.com\/u\/''\n  + CAST(u1.Id AS NVARCHAR) + ''|'' + u1.DisplayName AS ''User''\n  \n   FROM [StackExchange.' + ##site1:string## + '].dbo.Users AS u1\n   \n  where (u1.Views = 0)\n  ORDER BY u1.Reputation DESC\n  \n  ';\nEXEC(@sql);"
    },
    {
        "QuerySetId": 1268990,
        "Title": "find all posts from a user",
        "Description": null,
        "QueryBody": "DECLARE  @UserId int = ##UserId##\n\nSELECT\n    p.Id as [Post Link]\nFROM Users u join posts p on p.OwnerUserId = u.Id WHERE u.Id = @UserId",
        "CreationDate": "2020-07-30 01:42:30",
        "validated": false,
        "QueryBody_Original": "DECLARE  @UserId int = ##UserId##\n\nSELECT\n    p.Id as [Post Link]\nFROM Users u join posts p on p.OwnerUserId = u.Id WHERE u.Id = @UserId"
    },
    {
        "QuerySetId": 1269011,
        "Title": "Relationship between views and votes",
        "Description": null,
        "QueryBody": "SELECT  ROUND(t.views, -3, 0) + 1 views, avg(t.votes)\nfrom (\nSELECT max(p.viewcount) as views,\nsum(case when v.votetypeid in (2,3) then 1 else 0 end) as votes\nfrom posts p\njoin votes v on v.postid = p.id\nwhere p.PostTypeId = 1\ngroup by p.id\n) as t\ngroup by ROUND(t.views, -3, 0) + 1\norder by ROUND(t.views, -3, 0) + 1;",
        "CreationDate": "2020-07-30 02:21:03",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 1269600,
        "Title": "All questions I have answered, with Tags, Title, ViewCount, Score, AcceptedAnswerId, and Answer Body",
        "Description": null,
        "QueryBody": "SELECT  \n    Ans.CreationDate, Qus.Tags, Qus.Title, Qus.ViewCount,\n    Ans.Score, Ans.ID, Qus.AcceptedAnswerId, Ans.Body\nFROM Posts as Qus\nLEFT JOIN Posts as Ans\nON Qus.ID = Ans.ParentID\nWHERE Ans.OwnerUserId = ##UserId##\nORDER BY Ans.CreationDate DESC",
        "CreationDate": "2020-07-31 05:50:16",
        "validated": false,
        "QueryBody_Original": "SELECT  \n    Ans.CreationDate, Qus.Tags, Qus.Title, Qus.ViewCount,\n    Ans.Score, Ans.ID, Qus.AcceptedAnswerId, Ans.Body\nFROM Posts as Qus\nLEFT JOIN Posts as Ans\nON Qus.ID = Ans.ParentID\nWHERE Ans.OwnerUserId = ##UserId##\nORDER BY Ans.CreationDate DESC"
    },
    {
        "QuerySetId": 1269603,
        "Title": "Find all questions from specified UserId",
        "Description": null,
        "QueryBody": "SELECT  \n    Qus.CreationDate, Qus.Tags, Qus.Title, Qus.ViewCount,\n    Qus.Score, Qus.ID, Qus.AcceptedAnswerId\nFROM Posts as Qus\nWHERE Qus.OwnerUserId = ##UserId## AND Qus.PostTypeId = 1\nORDER BY Qus.CreationDate DESC",
        "CreationDate": "2020-07-31 06:24:48",
        "validated": false,
        "QueryBody_Original": "SELECT  \n    Qus.CreationDate, Qus.Tags, Qus.Title, Qus.ViewCount,\n    Qus.Score, Qus.ID, Qus.AcceptedAnswerId\nFROM Posts as Qus\nWHERE Qus.OwnerUserId = ##UserId## AND Qus.PostTypeId = 1\nORDER BY Qus.CreationDate DESC"
    },
    {
        "QuerySetId": 1269608,
        "Title": "Count the number of questions with accepted answers",
        "Description": null,
        "QueryBody": "SELECT  \nCOUNT(Qus.CreationDate), COUNT(Qus.AcceptedAnswerId)\nFROM Posts as Qus\nWHERE Qus.OwnerUserId = ##UserId## AND Qus.PostTypeId = 1",
        "CreationDate": "2020-07-31 06:28:17",
        "validated": false,
        "QueryBody_Original": "SELECT  \nCOUNT(Qus.CreationDate), COUNT(Qus.AcceptedAnswerId)\nFROM Posts as Qus\nWHERE Qus.OwnerUserId = ##UserId## AND Qus.PostTypeId = 1"
    },
    {
        "QuerySetId": 1270588,
        "Title": "Questions closed and answered by the same user",
        "Description": null,
        "QueryBody": "SELECT  a.Id AS [Post Link], a.CreationDate\n  FROM PostHistory AS ph\n  INNER JOIN Posts AS a ON a.ParentId = ph.PostId\n  CROSS APPLY OPENJSON(ph.Text, '$.Voters') WITH (Id INTEGER '$.Id') c\n  WHERE ph.PostHistoryTypeId = 10 -- Closed\n    AND a.OwnerUserId = ##UserId:int##\n    AND c.Id = ##UserId:int##\n  ORDER BY a.CreationDate DESC",
        "CreationDate": "2020-08-02 10:37:46",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 1271289,
        "Title": "Questions answered by two specific users",
        "Description": null,
        "QueryBody": "SELECT  a1.ParentId AS [Post Link], a1.CreationDate\n  FROM Posts AS a1\n  INNER JOIN Posts AS a2\n    ON a1.ParentId = a2.ParentId\n  WHERE a1.OwnerUserId = ##UserId1:int##\n    AND a2.OwnerUserId = ##UserId2:int##",
        "CreationDate": "2020-08-04 01:30:29",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 1271290,
        "Title": "Questions asked by user X, answered by user Y",
        "Description": null,
        "QueryBody": "SELECT  q.Id AS [Post Link], q.CreationDate\n  FROM Posts AS q\n  INNER JOIN Posts AS a\n    ON a.ParentId = q.Id\n  WHERE q.OwnerUserId = ##UserId:int##\n    AND a.OwnerUserId = ##AnswerOwnerUserId:int##",
        "CreationDate": "2020-08-03 21:08:40",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 1271474,
        "Title": "questions tagged with [tag], but not by any of [tag list]",
        "Description": null,
        "QueryBody": "DECLARE  @tag nvarchar(35) = ##tag:string##;\n\nselect\n  Id as [Post Link]\nfrom\n  Posts\nwhere\n  charindex('<' + @tag + '>', Tags) > 0",
        "CreationDate": "2020-08-04 03:07:33",
        "validated": false,
        "QueryBody_Original": "DECLARE  @tag nvarchar(35) = ##tag:string##;\n\nselect\n  Id as [Post Link]\nfrom\n  Posts\nwhere\n  charindex('<' + @tag + '>', Tags) > 0"
    },
    {
        "QuerySetId": 1272938,
        "Title": "Top reputation users - ordered by Id",
        "Description": null,
        "QueryBody": "SELECT  TOP(##num?500##)\nId As [User Link], DisplayName, Reputation\nFROM USERS\nORDER BY Reputation DESC",
        "CreationDate": "2020-08-06 14:42:55",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 1273201,
        "Title": "Percent of questions that have [ltn] [one] tag",
        "Description": null,
        "QueryBody": "DECLARE  @numOfTags tinyint = ##tags:string?1##;\n\nDECLARE @type nvarchar(3) = ##strict:string?ltn##;\n\nDECLARE @totalPosted bigint = (\n    select \n      count(Id) \n    from \n      Posts \n    where \n      PostTypeId = 1\n  );\n\nselect\n  OUT.Questions,\n  @totalPosted as Total,\n  OUT.Questions * 100 \/ @totalPosted as [Percent]\nfrom\n(\n  select\n     sum(\n       case\n         when @type = 'ltn' and IDT.NumTags <= @numOfTags then 1\n         when @type = 'gtn' and IDT.NumTags >= @numOfTags then 1 \n         else 0\n       end\n     ) as Questions,\n     @totalPosted as Posted\n   from\n    (select \n     Id, \n     count(TagId) as NumTags\n    from\n      Posts\n      join PostTags on PostId = Id\n    where\n      PostTypeId = 1\n    group by\n    Id) IDT\n) OUT\ngroup by\n  Questions",
        "CreationDate": "2020-08-07 12:21:30",
        "validated": false,
        "QueryBody_Original": "DECLARE  @numOfTags tinyint = ##tags:string?1##;\n\nDECLARE @type nvarchar(3) = ##strict:string?ltn##;\n\nDECLARE @totalPosted bigint = (\n    select \n      count(Id) \n    from \n      Posts \n    where \n      PostTypeId = 1\n  );\n\nselect\n  OUT.Questions,\n  @totalPosted as Total,\n  OUT.Questions * 100 \/ @totalPosted as [Percent]\nfrom\n(\n  select\n     sum(\n       case\n         when @type = 'ltn' and IDT.NumTags <= @numOfTags then 1\n         when @type = 'gtn' and IDT.NumTags >= @numOfTags then 1 \n         else 0\n       end\n     ) as Questions,\n     @totalPosted as Posted\n   from\n    (select \n     Id, \n     count(TagId) as NumTags\n    from\n      Posts\n      join PostTags on PostId = Id\n    where\n      PostTypeId = 1\n    group by\n    Id) IDT\n) OUT\ngroup by\n  Questions"
    },
    {
        "QuerySetId": 1273245,
        "Title": "You closed these questions, now you can vote for their deletion",
        "Description": null,
        "QueryBody": "WITH  DeletableClosed AS (\n  SELECT Id AS [Post Link], *\n  FROM Posts\n  WHERE ClosedDate < DATEADD(d, -2, CURRENT_TIMESTAMP)\n),\nRaw AS (\n  SELECT PostId, Text\n  FROM PostHistory\n  WHERE PostHistoryTypeId = 10\n),\nRaw2 AS (\n  SELECT PostId, JSON_VALUE(Text, '$.Voters[0].Id') As CloserId\n  FROM Raw\n  UNION ALL\n  SELECT PostId, JSON_VALUE(Text, '$.Voters[1].Id') As CloserId\n  FROM Raw\n  UNION ALL\n  SELECT PostId, JSON_VALUE(Text, '$.Voters[2].Id') As CloserId\n  FROM Raw\n  UNION ALL\n  SELECT PostId, JSON_VALUE(Text, '$.Voters[3].Id') As CloserId\n  FROM Raw\n  UNION ALL\n  SELECT PostId, JSON_VALUE(Text, '$.Voters[4].Id') As CloserId\n  FROM Raw\n)\nSELECT PostId, CAST(CloserId AS INT) AS CloserId\nFROM Raw2, Users\nWHERE\n  Raw2.CloserId = Users.Id\n  AND\n  Users.AccountId = ##SEAccountId:int##",
        "CreationDate": "2020-08-07 14:13:24",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 1273439,
        "Title": "Feature request questions that are upvoted and answered",
        "Description": null,
        "QueryBody": "DECLARE  @fr nvarchar(35) = '%<feature-request>%';\nDECLARE @planned nvarchar(35) = '%<status-planned>%';\nDECLARE @complete nvarchar(35) = '%<status-completed>%';\nDECLARE @declined nvarchar(35) = '%<status-declined>%';\n\nselect\n  rank() over (order by CreationDate desc),\n  Id as [Post Link],\n  CreationDate,\n  AnswerCount as Answers,\n  Tags\nfrom\n  Posts\nwhere\n  PostTypeId = 1\n  and\n  Tags like @fr\n  and\n  Tags not like @planned\n  and\n  Tags not like @complete\n  and\n  Score > 10\n  and\n  AnswerCount > 1\n  and\n  AcceptedAnswerId is not null",
        "CreationDate": "2020-08-08 02:22:16",
        "validated": false,
        "QueryBody_Original": "DECLARE  @fr nvarchar(35) = '%<feature-request>%';\nDECLARE @planned nvarchar(35) = '%<status-planned>%';\nDECLARE @complete nvarchar(35) = '%<status-completed>%';\nDECLARE @declined nvarchar(35) = '%<status-declined>%';\n\nselect\n  rank() over (order by CreationDate desc),\n  Id as [Post Link],\n  CreationDate,\n  AnswerCount as Answers,\n  Tags\nfrom\n  Posts\nwhere\n  PostTypeId = 1\n  and\n  Tags like @fr\n  and\n  Tags not like @planned\n  and\n  Tags not like @complete\n  and\n  Score > 10\n  and\n  AnswerCount > 1\n  and\n  AcceptedAnswerId is not null"
    },
    {
        "QuerySetId": 1273478,
        "Title": "Openvino unanswered by last activity",
        "Description": null,
        "QueryBody": "SELECT  TOP 20 Id,LastActivityDate,Title,AnswerCount\nFROM POSTS\nWHERE \nTags='<openvino>' \nAND AcceptedAnswerId is null \nAND LastActivityDate > DATEADD(month, -6, GETDATE())\nORDER by AnswerCount,LastActivityDate",
        "CreationDate": "2020-08-08 18:15:51",
        "validated": false,
        "QueryBody_Original": "SELECT  TOP 20 Id,LastActivityDate,Title,AnswerCount\nFROM POSTS\nWHERE \nTags='<openvino>' \nAND AcceptedAnswerId is null \nAND LastActivityDate > DATEADD(month, -6, GETDATE())\nORDER by AnswerCount,LastActivityDate"
    },
    {
        "QuerySetId": 1273514,
        "Title": "[openvino] unanswered by last activity",
        "Description": "Query for use by Open Vino support team.\\n\r\nCapped at 100 result to avoid too many data pull.\\n\r\n\\n\r\nResults beyond six month are not included as they are considered abandoned.\\n\r\nResult are stored with \\n\r\nAdded link to question using id.",
        "QueryBody": "DECLARE  @d2 datetime\nselect @d2 =GETDATE()\n\nSELECT TOP 100 \nP.Id as [Post Link],C.Id\n\nFROM POSTS P\nJOIN Comments C ON P.Id = C.PostId\n\nWHERE \nTags like '%<openvino>%' \nAND C.UserDisplayName LIKE '%Rawat%'\n--AND P.LastActivityDate > '2020-06-01'",
        "CreationDate": "2020-08-21 12:33:05",
        "validated": false,
        "QueryBody_Original": "DECLARE  @d2 datetime\nselect @d2 =GETDATE()\n\nSELECT TOP 100 \nP.Id as [Post Link],C.Id\n\nFROM POSTS P\nJOIN Comments C ON P.Id = C.PostId\n\nWHERE \nTags like '%<openvino>%' \nAND C.UserDisplayName LIKE '%Rawat%'\n--AND P.LastActivityDate > '2020-06-01'"
    },
    {
        "QuerySetId": 1273668,
        "Title": "Find amount of downvotes of a post",
        "Description": null,
        "QueryBody": "DECLARE  @UserId int = ##UserId##\n\nSELECT UpVotes, DownVotes, COUNT(*) AS AnswersCount\nFROM (\n  SELECT \n      SUM(CASE WHEN VoteTypeId = 2 THEN 1 ELSE 0 END) AS UpVotes,\n      SUM(CASE WHEN VoteTypeId = 3 THEN -1 ELSE 0 END) AS DownVotes\n      From Posts\n      INNER JOIN Votes ON Votes.PostId = Posts.Id and (VoteTypeId = 2 OR VoteTypeId = 3)\n  WHERE \n      Posts.Id = @UserId\n  GROUP BY Posts.id \n) VotesCount\nGROUP BY UpVotes, DownVotes \nORDER BY UpVotes DESC",
        "CreationDate": "2020-08-09 14:54:28",
        "validated": false,
        "QueryBody_Original": "DECLARE  @UserId int = ##UserId##\n\nSELECT UpVotes, DownVotes, COUNT(*) AS AnswersCount\nFROM (\n  SELECT \n      SUM(CASE WHEN VoteTypeId = 2 THEN 1 ELSE 0 END) AS UpVotes,\n      SUM(CASE WHEN VoteTypeId = 3 THEN -1 ELSE 0 END) AS DownVotes\n      From Posts\n      INNER JOIN Votes ON Votes.PostId = Posts.Id and (VoteTypeId = 2 OR VoteTypeId = 3)\n  WHERE \n      Posts.Id = @UserId\n  GROUP BY Posts.id \n) VotesCount\nGROUP BY UpVotes, DownVotes \nORDER BY UpVotes DESC"
    },
    {
        "QuerySetId": 1273675,
        "Title": "Most frequent tags in answers of the given user",
        "Description": null,
        "QueryBody": "SELECT \n  RANK() OVER(ORDER BY COUNT(a.Id) DESC) AS [Rank],\n  t.TagName,\n  COUNT(a.Id) AS [Count],\n  SUM(a.Score) AS [Score],\n  SUM(case when (a.CommunityOwnedDate IS NULL) then 1 else 0 end) AS [non-CW],\n  SUM(case when (a.CommunityOwnedDate IS NULL) then a.Score else 0 end) AS [non-CW score]\nFROM Posts a INNER JOIN Posts q ON q.Id=a.ParentId\nINNER JOIN PostTags pt ON pt.PostId=q.Id\nINNER JOIN Tags t ON t.Id=pt.TagId\nWHERE a.OwnerUserId=##userid?8297##\nGROUP BY t.TagName\nORDER BY COUNT(a.Id) DESC",
        "CreationDate": "2020-08-10 09:52:04",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 1273758,
        "Title": " Questions hidden due to ultra specific tags",
        "Description": null,
        "QueryBody": "DECLARE  @question int = 1;\nDECLARE @reTag int = 3;\nDECLARE @tagToSearch nvarchar(35) = ##ultratag:string?google-apps-script-web-application##;\nDECLARE @mainTag nvarchar(35) = ##maintag:string?google-apps-script##;\n\nselect\ncast(Posts.CreationDate as date),\nPosts.Tags,\nPosts.Id as [Post Link]\nfrom\nPosts\nwhere\nPosts.PostTypeId = @question\nand\nPosts.Tags like ('%<' + @tagToSearch + '>%' )\n\nand \nPosts.Tags not like ('%<'+@mainTag+'>%' )\ngroup by\nPosts.Tags,Posts.Id, cast(Posts.CreationDate as date)\norder by\ncast(Posts.CreationDate as date) desc",
        "CreationDate": "2020-08-11 18:34:40",
        "validated": false,
        "QueryBody_Original": "DECLARE  @question int = 1;\nDECLARE @reTag int = 3;\nDECLARE @tagToSearch nvarchar(35) = ##ultratag:string?google-apps-script-web-application##;\nDECLARE @mainTag nvarchar(35) = ##maintag:string?google-apps-script##;\n\nselect\ncast(Posts.CreationDate as date),\nPosts.Tags,\nPosts.Id as [Post Link]\nfrom\nPosts\nwhere\nPosts.PostTypeId = @question\nand\nPosts.Tags like ('%<' + @tagToSearch + '>%' )\n\nand \nPosts.Tags not like ('%<'+@mainTag+'>%' )\ngroup by\nPosts.Tags,Posts.Id, cast(Posts.CreationDate as date)\norder by\ncast(Posts.CreationDate as date) desc"
    },
    {
        "QuerySetId": 1273807,
        "Title": "Questions tagged with [tag] and [do not] contain [search term] in body",
        "Description": null,
        "QueryBody": "DECLARE  @tag nvarchar(35) = ##tag:string##;\nDECLARE @text nvarchar(max) = ##text:string##;\nDECLARE @include bit = iif(##include:string?yes## = 'yes', 1, 0);\n\nselect\n  rank() over(order by CreationDate desc),\n  Id as [Post Link],\n  Tags,\n  Score\nfrom\n  Posts\nwhere\n  PostTypeId = 1\n  and\n  Tags like '%<' + @tag + '>%'\n  and\n  (\n    @include = 1 and charindex(@text, Body) > 0\n    or\n    @include = 0 and charindex(@text, Body) = 0\n  )\n  and\n  Score >= 0\n  and\n  ClosedDate is null\norder by\n  CreationDate\ndesc",
        "CreationDate": "2020-08-10 12:20:50",
        "validated": false,
        "QueryBody_Original": "DECLARE  @tag nvarchar(35) = ##tag:string##;\nDECLARE @text nvarchar(max) = ##text:string##;\nDECLARE @include bit = iif(##include:string?yes## = 'yes', 1, 0);\n\nselect\n  rank() over(order by CreationDate desc),\n  Id as [Post Link],\n  Tags,\n  Score\nfrom\n  Posts\nwhere\n  PostTypeId = 1\n  and\n  Tags like '%<' + @tag + '>%'\n  and\n  (\n    @include = 1 and charindex(@text, Body) > 0\n    or\n    @include = 0 and charindex(@text, Body) = 0\n  )\n  and\n  Score >= 0\n  and\n  ClosedDate is null\norder by\n  CreationDate\ndesc"
    },
    {
        "QuerySetId": 1274322,
        "Title": "All the downvoted posts of a user",
        "Description": null,
        "QueryBody": "SELECT  * FROM Posts WHERE OwnerUserId = ##UserID## AND Score < 0",
        "CreationDate": "2020-08-11 01:34:10",
        "validated": false,
        "QueryBody_Original": "SELECT  * FROM Posts WHERE OwnerUserId = ##UserID## AND Score < 0"
    },
    {
        "QuerySetId": 1275615,
        "Title": "Top users of [tag] with positively received and non-closed posts",
        "Description": null,
        "QueryBody": "DECLARE  @tag nvarchar(35) = ##tag:string##;\nDECLARE @question tinyint = 1;\nDECLARE @answer tinyint = 2;\n\nselect\n  Users.Id as [User Link],\n  sum(P.Score) as [Total Score]\nfrom\n  Users\n  left join Posts as P on P.OwnerUserId = Users.Id\nwhere\n  P.Tags like '%<' + @tag + '>%' \n  or \n  (\n    P.PostTypeId = @answer \n    and exists (\n      select * \n      from Posts as Parent\n      where\n      Parent.PostTypeId = @question\n      and Parent.Id = P.ParentId\n      and Parent.Tags like '%<' + @tag + '>%' \n      and Parent.Score >= 0\n      and Parent.ClosedDate is null\n    )\n  )\n  and P.Score >= 0\n  and P.ClosedDate is null\ngroup by\n  Users.Id\norder by\n  [Total Score]\ndesc",
        "CreationDate": "2020-08-22 22:03:13",
        "validated": false,
        "QueryBody_Original": "DECLARE  @tag nvarchar(35) = ##tag:string##;\nDECLARE @question tinyint = 1;\nDECLARE @answer tinyint = 2;\n\nselect\n  Users.Id as [User Link],\n  sum(P.Score) as [Total Score]\nfrom\n  Users\n  left join Posts as P on P.OwnerUserId = Users.Id\nwhere\n  P.Tags like '%<' + @tag + '>%' \n  or \n  (\n    P.PostTypeId = @answer \n    and exists (\n      select * \n      from Posts as Parent\n      where\n      Parent.PostTypeId = @question\n      and Parent.Id = P.ParentId\n      and Parent.Tags like '%<' + @tag + '>%' \n      and Parent.Score >= 0\n      and Parent.ClosedDate is null\n    )\n  )\n  and P.Score >= 0\n  and P.ClosedDate is null\ngroup by\n  Users.Id\norder by\n  [Total Score]\ndesc"
    },
    {
        "QuerySetId": 1276670,
        "Title": "Find questions containing one of the given three tags - ordered by last activity (including answers)",
        "Description": null,
        "QueryBody": "SELECT  TOP(##num?100##)\n  coalesce(p.ParentId, p.Id) AS [Post Link],\n---returns the id of the question\n---For questions p.ParentId is NULL, so this returns p.Id\n  MAX(p.LastActivityDate)\nFROM Posts p\nWHERE coalesce(p.ParentId, p.Id) IN \n  (SELECT \n  q.Id \n  FROM Posts q INNER JOIN PostTags pt ON q.Id=pt.PostId\n  INNER JOIN Tags t ON t.id = pt.TagId\n  WHERE (t.TagName=##tag1:string?abstract-algebra##) OR \n    (t.TagName=##tag2:string?geometry##) OR\n    (t.TagName=##tag3:string?discrete-mathematics##))\nGROUP BY coalesce(p.ParentId, p.Id)\nORDER BY MAX(p.LastActivityDate) DESC",
        "CreationDate": "2020-08-13 13:47:44",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 1278910,
        "Title": "High Rep users without the peer pressure badge",
        "Description": "A way to find which users (mostly high rep) don't have the peer pressure badge. ",
        "QueryBody": "DECLARE  @RepLimit int = ##ReputationLimit##\n\nSelect Id as [User Link], DisplayName, Reputation\n from Users\n where Reputation > @RepLimit\n   and not exists (Select Id from Badges b where b.UserId = Users.Id and b.Name = 'Peer Pressure')   \norder by Reputation desc",
        "CreationDate": "2020-08-15 02:11:20",
        "validated": false,
        "QueryBody_Original": "DECLARE  @RepLimit int = ##ReputationLimit##\n\nSelect Id as [User Link], DisplayName, Reputation\n from Users\n where Reputation > @RepLimit\n   and not exists (Select Id from Badges b where b.UserId = Users.Id and b.Name = 'Peer Pressure')   \norder by Reputation desc"
    },
    {
        "QuerySetId": 1279393,
        "Title": "find prior displaynames of voters",
        "Description": null,
        "QueryBody": "WITH  voters as\n(\nSelect users.UserId\n    , users.UserDisplayName\n    , CreationDate\nFrom PostHistory\ncross apply openjson(Text, '$.Voters') \n       WITH ( UserId int '$.Id'\n            , UserDisplayName nvarchar(150) '$.DisplayName') users\nwhere posthistorytypeid in (10,11,12,13,14,15,19,20,35) \nand Text is not null \nand len(text) > 0 \nand users.userid = ##userid?1233251##\n)\n\nselect UserDisplayName\n     , min(creationdate) [first seen]\n     , max(creationdate) [last seen]     \nfrom voters\ngroup by UserDisplayName\norder by min(creationdate) desc",
        "CreationDate": "2020-08-16 15:49:21",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 1279723,
        "Title": "Top score in answer between two dates in a specific tag",
        "Description": null,
        "QueryBody": "SELECT  TOP(##num?500##)\n  RANK() OVER(ORDER BY SUM(a.Score) DESC) AS [Rank],\n  a.OwnerUserId AS [User Link],\n  SUM(a.Score) AS [Total Score],\n  COUNT(a.Id) AS [Count]\nFROM Posts q INNER JOIN Posts a ON a.ParentId=q.Id\n  INNER JOIN PostTags pt ON q.Id=pt.PostId\n  INNER JOIN Tags t ON t.id = pt.TagId\n  WHERE (t.TagName=##tag:string?support##) \n  AND (a.CreationDate >= '##Date1?2020-01-01##') AND (a.CreationDate <= '##Date2?2021-01-01##')\n  ---AND (PostTypeId=2) ---answers\nGROUP BY a.OwnerUserId\nORDER BY SUM(a.Score) DESC",
        "CreationDate": "2020-08-17 11:47:09",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 1283462,
        "Title": "answers to lb questions created within a date range",
        "Description": null,
        "QueryBody": "SELECT \n--Posts.OwnerUserID\n--FROM\n--Posts\n--JOIN Users on Users.Id=Posts.OwnerUserID\n--WHERE\n--Posts.CreationDate > '2019-07-01 00:00:00'\n--AND\n--Posts.CreationDate < '2019-08-01 00:00:00'\n--AND\n--Posts.ParentId='57153091'\n--AND\n--(Posts.Body LIKE '%##text?liquibase##%' OR Posts.Title LIKE '%##text?liquibase##%')\n\n--unique users respondERS for liquibase questions\nSELECT\ncount(distinct Posts.OwnerUserID)\nFROM\nPosts\nJOIN Users on Users.Id=Posts.OwnerUserID\nJOIN Posts as P on P.ParentId = Posts.Id\nWHERE\nPosts.CreationDate > '2020-11-01 00:00:00'\nAND\nPosts.CreationDate < '2020-12-01 00:00:00'\n--AND\n--Posts.AnswerCount > 0\nAND\n(Posts.Body LIKE '%##text?liquibase##%' OR Posts.Title LIKE '%##text?liquibase##%')",
        "CreationDate": "2020-11-13 03:34:02",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 1284238,
        "Title": "Is there a query that allows me to see which of my edits have been rolled back?",
        "Description": "https:\/\/meta.stackexchange.com\/questions\/108490",
        "QueryBody": "SELECT  ph.postid as [Post Link]\n     , ph.creationdate\n     , rb.creationdate [rollback date]\n     , rb.userid as [User Link]\nfrom posthistory ph\ninner join \n( SELECT *\n  from posthistory\n  where posthistorytypeid in (7,8,9)              -- rollback title, body, tags\n) rb on rb.postid = ph.postid\n    and rb.posthistorytypeid = ph.posthistorytypeid + 3 -- match eventtypes\n    and rb.creationdate > ph.creationdate              -- only never events\n    -- is it the revision\n    and rb.comment like concat(\n                     'Rollback to [[]'\n                    , ph.revisionGUID\n                    ,']%') COLLATE SQL_Latin1_General_CP1_CI_AI \nwhere ph.userid = ##userid:int?48078##\nand ph.posthistorytypeid in (4,5,6)",
        "CreationDate": "2020-08-23 11:23:16",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 1284383,
        "Title": "Questions with [tag] by users with reputation equal or greater than [threshold]",
        "Description": null,
        "QueryBody": "DECLARE  @tag nvarchar(35) = ##tag:string##;\nDECLARE @minrep int = ##Reputation:int?1##;\nDECLARE @question tinyint = 1;\nDECLARE @curyear int = year(getdate());\n\nselect\n  Posts.Id as [Post Link],\n  Score,\n  @curyear - year(Posts.CreationDate) as [Years Old],\n  USers.Id as [User Link],\n  AnswerCount as [Answers],\n  CommentCount as [Comments],\n  ViewCount as [Viewed]\nfrom\n  Posts\n  left join Users on OwnerUserId = Users.Id\nwhere\n  PostTypeId = @question\n  and Tags like '%<' + @tag + '>%'\n  and Reputation >= @minrep\norder by\n  [Answers] asc,\n  [Comments] asc,\n  Score desc",
        "CreationDate": "2020-09-10 02:29:52",
        "validated": false,
        "QueryBody_Original": "DECLARE  @tag nvarchar(35) = ##tag:string##;\nDECLARE @minrep int = ##Reputation:int?1##;\nDECLARE @question tinyint = 1;\nDECLARE @curyear int = year(getdate());\n\nselect\n  Posts.Id as [Post Link],\n  Score,\n  @curyear - year(Posts.CreationDate) as [Years Old],\n  USers.Id as [User Link],\n  AnswerCount as [Answers],\n  CommentCount as [Comments],\n  ViewCount as [Viewed]\nfrom\n  Posts\n  left join Users on OwnerUserId = Users.Id\nwhere\n  PostTypeId = @question\n  and Tags like '%<' + @tag + '>%'\n  and Reputation >= @minrep\norder by\n  [Answers] asc,\n  [Comments] asc,\n  Score desc"
    },
    {
        "QuerySetId": 1285090,
        "Title": "Number of active experts per week in a TAG (SO), parameterized",
        "Description": null,
        "QueryBody": "DECLARE  @tag nvarchar(25)\n\n select\n      t.tagname, count (distinct p.owneruserid) as Users\n  from users u, posts p, posttags pt, tags t\n  where\n        p.owneruserid = u.id\n    and p.posttypeid = 2\n    and p.score > 0\n    and pt.postid=p.ParentId\n    and t.id = pt.tagid \n    and (t.tagname='c' OR t.tagname='java' OR t.tagname='mysql' OR t.tagname='c#')\n  group by t.tagname",
        "CreationDate": "2020-08-25 15:45:04",
        "validated": false,
        "QueryBody_Original": "DECLARE  @tag nvarchar(25)\n\n select\n      t.tagname, count (distinct p.owneruserid) as Users\n  from users u, posts p, posttags pt, tags t\n  where\n        p.owneruserid = u.id\n    and p.posttypeid = 2\n    and p.score > 0\n    and pt.postid=p.ParentId\n    and t.id = pt.tagid \n    and (t.tagname='c' OR t.tagname='java' OR t.tagname='mysql' OR t.tagname='c#')\n  group by t.tagname"
    },
    {
        "QuerySetId": 1285221,
        "Title": "Scores Graph (0 - 10)",
        "Description": null,
        "QueryBody": "DECLARE  @UserId int = ##UserId##\nDECLARE @AnswerPostTypeId int = 2\n\nSELECT Score, COUNT(Score) \nFROM Posts \nWHERE Posts.OwnerUserId = @UserId \n  AND Posts.PostTypeId = @AnswerPostTypeId\n  AND Score >= 0 \n  AND Score <= 10\nGROUP BY Score \nORDER BY Score DESC",
        "CreationDate": "2020-08-25 19:39:52",
        "validated": false,
        "QueryBody_Original": "DECLARE  @UserId int = ##UserId##\nDECLARE @AnswerPostTypeId int = 2\n\nSELECT Score, COUNT(Score) \nFROM Posts \nWHERE Posts.OwnerUserId = @UserId \n  AND Posts.PostTypeId = @AnswerPostTypeId\n  AND Score >= 0 \n  AND Score <= 10\nGROUP BY Score \nORDER BY Score DESC"
    },
    {
        "QuerySetId": 1287684,
        "Title": "What are the most viewed questions for a given multiple tags with time range?",
        "Description": null,
        "QueryBody": "DECLARE  @TagString1 nvarchar(25) = ##tagName1:string##\nDECLARE @TagString2 nvarchar(25) = ##tagName2:string##\n\nselect TOP ##ResultSize## ViewCount, Score,Tags, Id AS [Post Link]\nfrom Posts \nwhere Id in\n  (\n    select PostId \n    from PostTags \n    where TagId IN (\n    (\n      select Id \n      from Tags \n      where TagName IN (@TagString1,@TagString2)\n      ))\n  )\n  AND CreationDate > GETDATE() - ##Days##\n  AND CreationDate < GETDATE() - ##Olddays##\nORDER by ViewCount DESC",
        "CreationDate": "2020-08-28 12:43:54",
        "validated": false,
        "QueryBody_Original": "DECLARE  @TagString1 nvarchar(25) = ##tagName1:string##\nDECLARE @TagString2 nvarchar(25) = ##tagName2:string##\n\nselect TOP ##ResultSize## ViewCount, Score,Tags, Id AS [Post Link]\nfrom Posts \nwhere Id in\n  (\n    select PostId \n    from PostTags \n    where TagId IN (\n    (\n      select Id \n      from Tags \n      where TagName IN (@TagString1,@TagString2)\n      ))\n  )\n  AND CreationDate > GETDATE() - ##Days##\n  AND CreationDate < GETDATE() - ##Olddays##\nORDER by ViewCount DESC"
    },
    {
        "QuerySetId": 1287911,
        "Title": "Search number of comments by any given keyword",
        "Description": null,
        "QueryBody": "SELECT    TOP ##numberofcomments## \n         c.id AS [Comment Link], \n         creationdate \nFROM     comments c \nWHERE    c.text LIKE '%##keyword##%' \nAND      len(c.text) <= 25 \nORDER BY creationdate DESC",
        "CreationDate": "2020-08-29 10:34:02",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 1287915,
        "Title": "Find answer based on given keyword.",
        "Description": null,
        "QueryBody": "SELECT  TOP ##NOA## \n    p.Id AS [Post Link],\n    p.Body\nFROM\n    Posts AS p\nWHERE\n   p.Body LIKE '%##keyword##%'  and \n   PostTypeId = 2 and \n   len(body) <= 150\n   AND p.Id > (SELECT max(p2.Id)-4000000 FROM Posts p2)\n-- ORDER BY p.Id DESC",
        "CreationDate": "2020-11-28 16:25:15",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 1288202,
        "Title": "Users with the most rejected suggested edits",
        "Description": "See who floods the Suggested Edits review queue with useless edits",
        "QueryBody": "SELECT  TOP ##Limit:int?100##\n  Users.Id [User Link],\n  COUNT(*) [Total],\n  SUM(CASE WHEN SuggestedEdits.ApprovalDate IS NOT NULL THEN 1 ELSE 0 END) [Accepted],\n  SUM(CASE WHEN SuggestedEdits.RejectionDate IS NOT NULL THEN 1 ELSE 0 END) [Rejected],\n  ROUND(SUM(CASE WHEN SuggestedEdits.RejectionDate IS NOT NULL THEN 1 ELSE 0 END) * 1.0 \/ COUNT(*) * 100, 2) [Rejected %]\nFROM Users, SuggestedEdits\nWHERE  \n      Users.Id = SuggestedEdits.OwnerUserId\n  AND Users.Id > 0\n  AND SuggestedEdits.CreationDate >= DATEADD(dd, -##MaxAgeDays:int?28##, GETDATE())\nGROUP BY Users.Id\nHAVING\n      COUNT(*) >= ##MinSuggestedEdits:int?5##\n  AND SUM(CASE WHEN SuggestedEdits.RejectionDate IS NOT NULL THEN 1 ELSE 0 END) >= ##MinRejectedEdits:int?3##\nORDER BY Rejected DESC, Total DESC",
        "CreationDate": "2020-08-30 12:45:08",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 1288215,
        "Title": "Search number of comments given by  keyword.",
        "Description": null,
        "QueryBody": "SELECT    TOP ##NOC## c.text, \n         c.id                     AS [Comment Link], \n         creationdate \nFROM     comments c \nWHERE    c.text LIKE '%##keyword##%' \nAND      len(c.text) <= 25 \nORDER BY creationdate desc",
        "CreationDate": "2020-08-30 10:03:43",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 1288216,
        "Title": "Possible comment replies to comments by a given user",
        "Description": null,
        "QueryBody": "SELECT \n  c2.Id AS [Comment Link],\n  c2.UserId AS [User Link],\n  c2.Text\nFROM Comments c1 JOIN Comments c2 ON (c1.PostId=c2.PostId)\n  AND (c1.UserId=##UserId?631869##) AND (c1.CreationDate<c2.CreationDate)\nWHERE (c2.Text LIKE '%@%')",
        "CreationDate": "2020-08-30 10:45:12",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 1288217,
        "Title": "Possible comment replies to posts by a given user",
        "Description": null,
        "QueryBody": "SELECT  \n  c.Id AS [Comment Link],\n  c.UserId AS [User Link],\n  c.Text\nFROM Comments c JOIN Posts p ON (c.PostId=p.Id)\n  AND (p.OwnerUserId=##UserId?631869##) \nWHERE (c.Text LIKE '%@%')",
        "CreationDate": "2020-08-30 10:46:55",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 1288218,
        "Title": "Comments under posts by a given user containing a specific text",
        "Description": null,
        "QueryBody": "SELECT  \n  c.Id AS [Comment Link],\n  c.UserId AS [User Link],\n  c.Text\nFROM Comments c JOIN Posts p ON (c.PostId=p.Id)\n  AND (p.OwnerUserId=##UserId?631869##) \nWHERE (c.Text LIKE '%##word?@Dim##%')",
        "CreationDate": "2020-08-30 10:53:21",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 1288219,
        "Title": "Under my comments, specific text",
        "Description": null,
        "QueryBody": "SELECT \n  c2.Id AS [Comment Link],\n  c2.UserId AS [User Link],\n  c2.Text\nFROM Comments c1 JOIN Comments c2 ON (c1.PostId=c2.PostId)\n  AND (c1.UserId=##UserId?631869##) AND (c1.CreationDate<c2.CreationDate)\nWHERE (c2.Text LIKE '%##word?@Dim##%')",
        "CreationDate": "2020-08-30 10:58:06",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 1288806,
        "Title": "Question migrated from site X",
        "Description": null,
        "QueryBody": "SELECT  ph.PostId AS [Post Link], ph.CreationDate AS 'Migrated on'\n  FROM PostHistory AS ph\n  INNER JOIN Posts AS p ON ph.PostId = p.Id\n  WHERE ph.PostHistoryTypeId = 36 -- Post Migrated Here\n    AND ph.Comment LIKE 'from https:\/\/' + ##domain:string## + '\/%'\n    AND p.PostTypeId = 1 -- Question\n  ORDER BY ph.CreationDate DESC",
        "CreationDate": "2020-09-01 09:48:59",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 1289245,
        "Title": "Gold badge holders for tag by date",
        "Description": null,
        "QueryBody": "SELECT  b.UserId AS [User Link], b.Date awarded\nFROM Users u, Badges b\nWHERE b.name=##Tag:string## and b.class=1 and u.Id=b.UserId\nGROUP BY b.Date, b.UserId\nORDER BY awarded ASC",
        "CreationDate": "2020-09-02 00:46:20",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 1289560,
        "Title": "Get the number of times a user edited their own posts",
        "Description": null,
        "QueryBody": "DECLARE  @UserId int = ##UserId?584676##\nDECLARE @UrlBase nvarchar(50) = 'https:\/\/stackoverflow.com\/questions\/'\n\nselect coalesce(post.Title, parent.Title) as QuestionTitle,\n  Count(*) as Edits,\n  post.PostTypeId as PostType,\n  @UrlBase + cast(h.PostId as nvarchar(25)) + '|' + cast(h.PostId as nvarchar(25)) as PostId\nfrom Posts post\n  inner join PostHistory h\n    on post.PostTypeId in(1, 2) and post.Id = h.PostId\n  inner join Posts parent\n    on parent.Id = post.ParentId\n  where h.UserId = @UserId and h.PostHistoryTypeId in(4, 5, 6)\n  group by h.PostId,\n    post.Title,\n    parent.Title,\n    post.PostTypeId\norder by Edits desc;",
        "CreationDate": "2020-09-03 06:55:03",
        "validated": false,
        "QueryBody_Original": "DECLARE  @UserId int = ##UserId?584676##\nDECLARE @UrlBase nvarchar(50) = 'https:\/\/stackoverflow.com\/questions\/'\n\nselect coalesce(post.Title, parent.Title) as QuestionTitle,\n  Count(*) as Edits,\n  post.PostTypeId as PostType,\n  @UrlBase + cast(h.PostId as nvarchar(25)) + '|' + cast(h.PostId as nvarchar(25)) as PostId\nfrom Posts post\n  inner join PostHistory h\n    on post.PostTypeId in(1, 2) and post.Id = h.PostId\n  inner join Posts parent\n    on parent.Id = post.ParentId\n  where h.UserId = @UserId and h.PostHistoryTypeId in(4, 5, 6)\n  group by h.PostId,\n    post.Title,\n    parent.Title,\n    post.PostTypeId\norder by Edits desc;"
    },
    {
        "QuerySetId": 1291559,
        "Title": "Comments by user in period",
        "Description": null,
        "QueryBody": "SELECT  UserId as [User Link], COUNT(Id) AS Count\n  FROM Comments\n  WHERE CreationDate BETWEEN ##fromDate:string##\n                         AND ##tillDate:string##\n  GROUP BY UserId\n  ORDER BY Count DESC",
        "CreationDate": "2020-09-06 14:01:24",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 1291565,
        "Title": "Comments by a user, sorted by score",
        "Description": "See also sorted by creation date https:\/\/data.stackexchange.com\/stackoverflow\/query\/1160377",
        "QueryBody": "SELECT  TOP ##Limit:int?50000##\n  c.Score,\n  c.Text AS [Text],\n  c.CreationDate,\n  'site:\/\/posts\/comments\/' + CONVERT(nvarchar(20),c.Id) AS [Comment Permalink]\nFROM Comments c\nWHERE\n  LEN(c.Text) >= ##MinCommentLength:int?0## AND\n  LEN(c.Text) <= ##MaxCommentLength:int?500## AND\n  (\n    c.UserId = ##UserId:int##\n  ) AND\n  c.CreationDate < DATEADD(dd, -##MinCommentAgeDays:int?0##, GETDATE())\nORDER BY c.Score DESC",
        "CreationDate": "2020-09-06 14:35:39",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 1291615,
        "Title": "Number of comments by user",
        "Description": null,
        "QueryBody": "SELECT  UserId AS [User Link], COUNT(*)\n  FROM Comments\n  WHERE CreationDate BETWEEN ##fromDate:string##\n                         AND ##tillDate:string##\n  GROUP BY UserId\n  ORDER BY COUNT(*) DESC",
        "CreationDate": "2020-09-06 16:43:57",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 1291690,
        "Title": "Most X questions in tag",
        "Description": null,
        "QueryBody": "DECLARE  @Tag VARCHAR(25) = '##Tag##'\n\nSELECT TOP ##Top##\nId,SourceTagName, TargetTagName\n\n\n\nFROM TagSynonyms AS T\n    \nWHERE T.SourceTagName like '%'+@Tag+'%'",
        "CreationDate": "2020-09-07 21:49:49",
        "validated": false,
        "QueryBody_Original": "DECLARE  @Tag VARCHAR(25) = '##Tag##'\n\nSELECT TOP ##Top##\nId,SourceTagName, TargetTagName\n\n\n\nFROM TagSynonyms AS T\n    \nWHERE T.SourceTagName like '%'+@Tag+'%'"
    },
    {
        "QuerySetId": 1291695,
        "Title": "Questions recently bumped by the community user",
        "Description": null,
        "QueryBody": "SELECT  TOP(##num?100##)\n  ph.PostId AS [Post Link], ph.CreationDate,\n  'site:\/\/posts\/' + CAST(ph.PostId AS varchar)+'\/revisions' AS [Revision History]\nFROM PostHistory ph\nWHERE ph.PostHistoryTypeId=50\n---50 = Bumped by Community User\nORDER BY ph.CreationDate DESC",
        "CreationDate": "2020-09-07 09:34:59",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 1291754,
        "Title": "Question count for specific tag",
        "Description": null,
        "QueryBody": "DECLARE  @Tag VARCHAR(50) = 'c#'\n\nSELECT\n    Count(*) AS QuestionCount\n    FROM \n        Posts p\n    JOIN PostTags t ON p.Id = t.PostId\n    WHERE \n         t.TagId = (SELECT Id FROM Tags WHERE TagName = @Tag)\n         AND p.PostTypeId = 1 -- Questions\n         AND LastActivityDate > '2019-01-01'",
        "CreationDate": "2020-09-08 11:10:33",
        "validated": false,
        "QueryBody_Original": "DECLARE  @Tag VARCHAR(50) = 'c#'\n\nSELECT\n    Count(*) AS QuestionCount\n    FROM \n        Posts p\n    JOIN PostTags t ON p.Id = t.PostId\n    WHERE \n         t.TagId = (SELECT Id FROM Tags WHERE TagName = @Tag)\n         AND p.PostTypeId = 1 -- Questions\n         AND LastActivityDate > '2019-01-01'"
    },
    {
        "QuerySetId": 1292349,
        "Title": "N questions with the shortest title on a given site",
        "Description": null,
        "QueryBody": "SELECT  TOP ##N##\n  id AS [Post Link],\n  len(title) AS [No. of characters]\nFROM\n  posts\nWHERE\n  posttypeid = 1\nORDER BY [No. of characters] ASC",
        "CreationDate": "2020-09-08 19:23:57",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 1292353,
        "Title": "N questions with the largest title on a given site",
        "Description": null,
        "QueryBody": "SELECT  TOP ##N##\n  id AS [Post Link],\n  len(title) AS [No. of characters]\nFROM\n  posts\nWHERE\n  posttypeid = 1\nORDER BY [No. of characters] DESC",
        "CreationDate": "2020-09-08 19:23:18",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 1292355,
        "Title": "N tags with the greatest number of questions",
        "Description": null,
        "QueryBody": "SELECT  TOP ##N##\n  TagName,\n  COUNT(Posts.ID) AS [No. of questions]\nFROM \n  Posts\n  INNER JOIN PostTags ON Posts.ID = PostTags.PostID\n  INNER JOIN Tags ON PostTags.TagID = Tags.ID\nWHERE\n  Posts.PostTypeID = 1\nGROUP BY\n  TagName\nORDER BY [No. of questions] DESC",
        "CreationDate": "2020-09-08 19:49:11",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 1292382,
        "Title": "Users by year of account creation, with at least N answers",
        "Description": null,
        "QueryBody": "WITH  usersWITHAnswers as\n(\n    select u.id, u.creationDate, count(*) answers\n    from\n      users u\n      inner join posts p on p.ownerUserId = u.id\n    where \n      postTypeId = 2 --answer      \n    group by\n      u.id, u.creationDate\n)\nselect\n  year(creationDate) joinYear, count(*)\nfrom\n  usersWITHAnswers\nwhere \n  answers > ##NumberOfAnswers:int##\ngroup by\n  year(creationDate)\norder by\n  joinYear",
        "CreationDate": "2020-09-08 23:28:26",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 1293122,
        "Title": "Comments that may be auto-deleted #1",
        "Description": "For ModBatchCommentDeleter userscript users:\r\nRun with preferred parameters, then download the CSV results and insert into \/admin\/deleter on your site.\r\n\r\n-----\r\n\r\nPart 1: https:\/\/data.stackexchange.com\/stackoverflow\/query\/1131935\r\nPart 2: https:\/\/data.stackexchange.com\/stackoverflow\/query\/1141986\r\nPart 3: https:\/\/data.stackexchange.com\/stackoverflow\/query\/1154010\r\nPart 4: https:\/\/data.stackexchange.com\/stackoverflow\/query\/1155090",
        "QueryBody": "SELECT  TOP ##Limit:int?100##\n  LOWER(c.Text) AS [Text],\n  'site:\/\/posts\/comments\/' + CONVERT(nvarchar(20),c.Id) AS [Comment Permalink]\nFROM Comments c\n  INNER JOIN Posts p ON c.PostId = p.Id\n  INNER JOIN Posts p1 on p.ParentId = p1.Id\nWHERE\n  LEN(Text) >= ##MinCommentLength:int?15## AND\n  LEN(Text) <= ##MaxCommentLength:int?15## AND\n  (\n    Text LIKE '%accept%' AND Text LIKE '%mark%'\n  ) AND\n  p1.ClosedDate IS NULL AND\n  c.CreationDate < DATEADD(dd, -##MinCommentAgeDays:int?90##, GETDATE())\nORDER BY c.CreationDate ASC",
        "CreationDate": "2020-09-10 19:11:43",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 1293421,
        "Title": "How many of each pill to take to achieve the total daily dose",
        "Description": null,
        "QueryBody": "DECLARE  @ DECIMAL(9,1)=22.5\n\nSELECT @%5-@%1*5,@%1*2,str(@)\/5",
        "CreationDate": "2020-09-11 13:29:55",
        "validated": false,
        "QueryBody_Original": "DECLARE  @ DECIMAL(9,1)=22.5\n\nSELECT @%5-@%1*5,@%1*2,str(@)\/5"
    },
    {
        "QuerySetId": 1294439,
        "Title": "How many still visible questions did I successfully close",
        "Description": null,
        "QueryBody": "SELECT  users.UserId\n    , users.UserDisplayName\n    , count(*)\nFrom PostHistory\ncross apply openjson(Text, '$.Voters') \n       with ( UserId int '$.Id'\n            , UserDisplayName nvarchar(150) '$.DisplayName') users\nwhere posthistorytypeid = 10\nand Text is not null \nand len(text) > 0 \nand users.userid <> -1\ngroup by users.UserId\n    , users.UserDisplayName\norder by case when users.userid = ##uid## then 10000000 else count(*) end desc",
        "CreationDate": "2020-09-14 19:24:51",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 1294673,
        "Title": "List all questions by a user",
        "Description": null,
        "QueryBody": "DECLARE  @UserId int = ##UserId##\n\nSELECT * FROM Posts WHERE OwnerUserId=@UserId AND PostTypeId=1",
        "CreationDate": "2020-09-15 11:48:43",
        "validated": false,
        "QueryBody_Original": "DECLARE  @UserId int = ##UserId##\n\nSELECT * FROM Posts WHERE OwnerUserId=@UserId AND PostTypeId=1"
    },
    {
        "QuerySetId": 1296495,
        "Title": "Users with highest reputation-to-number-of-answers ratio",
        "Description": null,
        "QueryBody": "DECLARE  @MinPosts int = ##MinPosts##\n\nSELECT TOP 200\n  u.Id AS [User Link],\n  count(*) AS NumPosts,\n  u.Reputation AS Reputation,\n  CAST(Reputation*1.0\/count(*) AS DECIMAL(5,2)) AS ratio\nFROM Posts a\nINNER JOIN Users u ON u.Id = a.OwnerUserId\nGROUP BY u.Reputation, u.Id, u.DisplayName\nHAVING count(*) >= @MinPosts\nORDER BY ratio DESC, NumPosts DESC",
        "CreationDate": "2020-09-21 05:17:10",
        "validated": false,
        "QueryBody_Original": "DECLARE  @MinPosts int = ##MinPosts##\n\nSELECT TOP 200\n  u.Id AS [User Link],\n  count(*) AS NumPosts,\n  u.Reputation AS Reputation,\n  CAST(Reputation*1.0\/count(*) AS DECIMAL(5,2)) AS ratio\nFROM Posts a\nINNER JOIN Users u ON u.Id = a.OwnerUserId\nGROUP BY u.Reputation, u.Id, u.DisplayName\nHAVING count(*) >= @MinPosts\nORDER BY ratio DESC, NumPosts DESC"
    },
    {
        "QuerySetId": 1296596,
        "Title": "Edits to your answers or their questions",
        "Description": null,
        "QueryBody": "SELECT  a.Id AS [Post Link], a.LastEditDate, 'Your answer'\n  FROM Posts AS a\n  WHERE a.OwnerUserId = ##UserId:int##\n    AND a.PostTypeId = 2 -- Answer\n    AND a.LastEditDate != a.CreationDate\n  \nUNION ALL\n\nSELECT q.Id AS [Post Link], q.LastEditDate, 'Question you''ve answered'\n  FROM Posts AS a\n  INNER JOIN Posts AS q\n    ON a.ParentId = q.Id    \n  WHERE a.OwnerUserId = ##UserId:int##\n    AND q.LastEditDate != q.CreationDate\n\nORDER BY 2 DESC",
        "CreationDate": "2020-09-21 13:47:40",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 1297687,
        "Title": "Questions answered in [this lang], yet to answer in [that lang]",
        "Description": null,
        "QueryBody": "SELECT  Q.Id AS [Post Link], max(A1.Id) AS [Post Link], Q.Score, Q.AnswerCount, Q.ClosedDate\n  FROM Posts Q, Posts A1\n  WHERE\n  -- Post is question\n  Q.PostTypeId = 1\n  -- Question is a code-golf challenge\n  AND Q.Tags LIKE '%code-golf%' AND Q.Tags NOT LIKE '%tips%'\n  -- custom tags\n  -- AND Q.Tags LIKE '%integer%'\n  -- Has an answer in Language 1\n  AND A1.ParentId = Q.Id\n  AND A1.PostTypeId = 2\n  AND lower(A1.Body) LIKE concat('%', lower(##Language1:string##), '%')\n  -- No answers in Language 2\n  AND NOT EXISTS (\n    SELECT *\n    FROM Posts A\n    WHERE A.ParentId = Q.Id\n    AND A.PostTypeId = 2\n    AND lower(A.Body) LIKE concat('%', lower(##Language2:string##), '%')\n  )\n  GROUP BY Q.Id, Q.Score, Q.AnswerCount, Q.ClosedDate\n  ORDER BY Q.ClosedDate ASC, Q.AnswerCount DESC, Q.Score DESC",
        "CreationDate": "2020-11-05 05:59:37",
        "validated": false,
        "QueryBody_Original": "SELECT  Q.Id AS [Post Link], max(A1.Id) AS [Post Link], Q.Score, Q.AnswerCount, Q.ClosedDate\n  FROM Posts Q, Posts A1\n  WHERE\n  -- Post is question\n  Q.PostTypeId = 1\n  -- Question is a code-golf challenge\n  AND Q.Tags LIKE '%code-golf%' AND Q.Tags NOT LIKE '%tips%'\n  -- custom tags\n  -- AND Q.Tags LIKE '%integer%'\n  -- Has an answer in Language 1\n  AND A1.ParentId = Q.Id\n  AND A1.PostTypeId = 2\n  AND lower(A1.Body) LIKE concat('%', lower(##Language1:string##), '%')\n  -- No answers in Language 2\n  AND NOT EXISTS (\n    SELECT *\n    FROM Posts A\n    WHERE A.ParentId = Q.Id\n    AND A.PostTypeId = 2\n    AND lower(A.Body) LIKE concat('%', lower(##Language2:string##), '%')\n  )\n  GROUP BY Q.Id, Q.Score, Q.AnswerCount, Q.ClosedDate\n  ORDER BY Q.ClosedDate ASC, Q.AnswerCount DESC, Q.Score DESC"
    },
    {
        "QuerySetId": 1298740,
        "Title": "Get highest score comments of a user",
        "Description": null,
        "QueryBody": "DECLARE  @UserId int = ##UserId:int##\n\nSELECT c.Id as [Comment Link], c.Score\nFROM Comments c\nWHERE UserId = @UserId\n  AND Score > 0\nORDER BY Score DESC",
        "CreationDate": "2020-09-26 16:12:49",
        "validated": false,
        "QueryBody_Original": "DECLARE  @UserId int = ##UserId:int##\n\nSELECT c.Id as [Comment Link], c.Score\nFROM Comments c\nWHERE UserId = @UserId\n  AND Score > 0\nORDER BY Score DESC"
    },
    {
        "QuerySetId": 1298757,
        "Title": "Accept rate of a user",
        "Description": "Does not count self-answers.\r\nShows users with at least @MinAnswers answers.\r\n",
        "QueryBody": "DECLARE  @UserId int = ##UserId:int##\n\nSELECT\n  u.Id AS [User Link],\n  count(*) AS NumAnswers,\n  sum(case when q.AcceptedAnswerId = a.Id then 1 else 0 end) AS NumAccepted,\n  (sum(case when q.AcceptedAnswerId = a.Id then 1 else 0 end)*100.0\/count(*)) AS AcceptedPercent\nFROM Posts a\nINNER JOIN Users u ON u.Id = a.OwnerUserId\nINNER JOIN Posts q ON a.ParentId = q.Id\nWHERE \n  (q.OwnerUserId <> u.Id OR q.OwnerUserId IS NULL)   -- No self answers\n  AND u.Id = @UserId\nGROUP BY u.Id\nORDER BY AcceptedPercent DESC, NumAnswers DESC",
        "CreationDate": "2020-09-26 15:29:20",
        "validated": false,
        "QueryBody_Original": "DECLARE  @UserId int = ##UserId:int##\n\nSELECT\n  u.Id AS [User Link],\n  count(*) AS NumAnswers,\n  sum(case when q.AcceptedAnswerId = a.Id then 1 else 0 end) AS NumAccepted,\n  (sum(case when q.AcceptedAnswerId = a.Id then 1 else 0 end)*100.0\/count(*)) AS AcceptedPercent\nFROM Posts a\nINNER JOIN Users u ON u.Id = a.OwnerUserId\nINNER JOIN Posts q ON a.ParentId = q.Id\nWHERE \n  (q.OwnerUserId <> u.Id OR q.OwnerUserId IS NULL)   -- No self answers\n  AND u.Id = @UserId\nGROUP BY u.Id\nORDER BY AcceptedPercent DESC, NumAnswers DESC"
    },
    {
        "QuerySetId": 1299179,
        "Title": "Get posts of users in a state (detailed)",
        "Description": null,
        "QueryBody": "SELECT  p.Id AS PostId, p.PostTypeId, p.CreationDate AS PostDate, p.Score, p.ViewCount, p.AnswerCount, p.CommentCount, p.OwnerUserId, u.Location, u.Reputation\nFROM Posts p\nINNER JOIN Users u ON u.Id = p.OwnerUserId\nWHERE \n    (Location LIKE ##abbr:string## \n    or UPPER(Location) LIKE ##full:string##) \n    AND convert(date, p.CreationDate) >= convert(date, '20200220')\n    AND convert(date, p.CreationDate) <= convert(date, '20200429')\n    AND UPPER(Location) NOT LIKE '%, WA%'\n    AND UPPER(Location) NOT LIKE '%WEST VIRGINIA%'",
        "CreationDate": "2020-09-27 09:49:25",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 1300080,
        "Title": "Histogram of this user's post scores",
        "Description": null,
        "QueryBody": "SELECT \n  p.Score AS \"post score\",\n  COUNT(*) AS \"# posts\"\nFROM Posts p\nWHERE p.OwnerUserId = ##UserId:int##\nGROUP BY p.Score\nORDER BY p.Score DESC",
        "CreationDate": "2020-09-28 05:55:05",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 1300199,
        "Title": "Find user's Community Wiki posts",
        "Description": null,
        "QueryBody": "SELECT  Id As [Post Link], CreationDate From Posts\nWhere OwnerUserId=##UserId##\nAnd CommunityOwnedDate IS NOT NULL\nOrder By CreationDate Desc",
        "CreationDate": "2020-09-28 11:10:14",
        "validated": false,
        "QueryBody_Original": "SELECT  Id As [Post Link], CreationDate From Posts\nWhere OwnerUserId=##UserId##\nAnd CommunityOwnedDate IS NOT NULL\nOrder By CreationDate Desc"
    },
    {
        "QuerySetId": 1302492,
        "Title": "Average response time by tags",
        "Description": "The average response time for most popular tags (with at least one vote)\r\n",
        "QueryBody": "DECLARE  @limit int = 200;\nDECLARE @tag_name nvarchar(35) = 'okta';\nDECLARE @tag_id int = (select id from tags where tagname = @tag_name);\nSELECT\ncount(distinct Id) as responses\n, avg(datediff(hour,CreationDate, ClosedDate)) as average_response_time_in_hours\n    \nFROM \n    Posts \n --   and PostTypeId = 2 --answers only\n\nWHERE\n  CreationDate >= '2020-09-2'\n  and ClosedDate <='2020-09-28'",
        "CreationDate": "2020-09-30 03:43:12",
        "validated": false,
        "QueryBody_Original": "DECLARE  @limit int = 200;\nDECLARE @tag_name nvarchar(35) = 'okta';\nDECLARE @tag_id int = (select id from tags where tagname = @tag_name);\nSELECT\ncount(distinct Id) as responses\n, avg(datediff(hour,CreationDate, ClosedDate)) as average_response_time_in_hours\n    \nFROM \n    Posts \n --   and PostTypeId = 2 --answers only\n\nWHERE\n  CreationDate >= '2020-09-2'\n  and ClosedDate <='2020-09-28'"
    },
    {
        "QuerySetId": 1302550,
        "Title": "Find all posts matching list of tags",
        "Description": null,
        "QueryBody": "SELECT  ID, TagName\nINTO #MyTags\nFROM Tags\nWHERE \n  --TagName = 'vim'\n  --TagName = 'maxima'\n  --TagName IN ('c++17', 'c++20')\n  TagName IN ('okta')\n  \nSELECT TOP 200\n  concat('https:\/\/stackoverflow.com\/questions\/',Posts.ID) AS [Post Link],\n  Posts.Title AS [Title],\n  Posts.Tags AS [Tags],\n  Posts.Score AS [Score]\nFROM Posts\n  join PostTags ON PostTags.PostID = Posts.ID\n  join Tags ON Tags.ID = PostTags.TagID\nWHERE TagID in (SELECT ID FROM #MyTags)\nORDER BY Posts.Score DESC",
        "CreationDate": "2020-10-28 22:07:37",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 1303081,
        "Title": "Votes on posts year on year",
        "Description": null,
        "QueryBody": "SELECT  YEAR(v.CreationDate) year, \n--format(count(*),'0,,.00 Million') votes\n\n--FROM Votes v\n--group by YEAR(v.CreationDate)\n--order by year asc\n\nSELECT \n\nt.post_year as \"year\",\nformat(t.post_count,'0,,.00 Million') posts,\nformat(SUM(t.post_count) OVER(ORDER BY post_year ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW),'0,,.00 Million') AS cumulative_posts\n--format(count(*),'0,,.00 Million') votes\n\n--FROM Votes v\n--group by YEAR(v.CreationDate),\n--order by year asc,\n\nfrom \n(SELECT \nYEAR(p.CreationDate) post_year,\ncount(*) post_count\nFROM\nPosts p\ngroup by YEAR(p.CreationDate) \n) t\n\norder by t.post_year asc",
        "CreationDate": "2020-10-01 19:20:49",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 1303133,
        "Title": "Posts with most links to them - counting also links from answers",
        "Description": null,
        "QueryBody": "SELECT  TOP(##num?100##) \n  COUNT(PostId) AS [Count],\n  RelatedPostId AS [Post Link]\nFROM PostLinks\nWHERE LinkTypeId=1\nGROUP BY RelatedPostId\nORDER BY COUNT(PostId) DESC",
        "CreationDate": "2020-10-01 01:09:34",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 1303134,
        "Title": "Posts with most links to them - only counting links from questions",
        "Description": null,
        "QueryBody": "SELECT  TOP(##num?100##) \n  COUNT(pl.PostId) AS [Count],\n  pl.RelatedPostId AS [Post Link]\nFROM PostLinks pl INNER JOIN Posts q ON q.Id=pl.PostId\nWHERE (pl.LinkTypeId=1) AND\n  (q.PostTypeId=1) --only questions\nGROUP BY pl.RelatedPostId\nORDER BY COUNT(pl.PostId) DESC",
        "CreationDate": "2020-10-01 20:08:50",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 1304618,
        "Title": "Daily activity on a site",
        "Description": null,
        "QueryBody": "SELECT  ph.CreationDate, pht.Name, 'site:\/\/a\/' + CAST(ph.PostId AS NVARCHAR)\n  FROM PostHistory AS ph\n  INNER JOIN PostHistoryTypes AS pht\n    ON ph.PostHistoryTypeId = pht.Id  \n  WHERE ph.CreationDate BETWEEN ##date:string##\n    AND DATEADD(DAY, 1, CAST(##date:string## AS DATE))\n                            \nUNION ALL\n\nSELECT c.CreationDate, 'Comment', 'site:\/\/posts\/comments' + CAST(c.Id AS NVARCHAR)\n  FROM Comments AS c\n  WHERE c.CreationDate BETWEEN ##date:string##\n    AND DATEADD(DAY, 1, CAST(##date:string## AS DATE))\n\nORDER BY CreationDate",
        "CreationDate": "2020-10-02 18:37:19",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 1304619,
        "Title": "StackOverflow Queries since a Date",
        "Description": null,
        "QueryBody": "DECLARE  @RegEx varchar(100) = CONCAT('%[^A-z]', ##Word##, '[^A-z]%')\n-- .*(\\s|\\\/|\\(|\\b)+rllib(\\s|\\\/|\\)|\\:|\\b)+.*\n\nselect\n  Word = ##Word##,\n  counter.Title,\n  counter.Tags,\n  counter.CreationDate\nfrom\n\n(select Posts.Title as Title, Posts.Tags as Tags, Posts.CreationDate as CreationDate\nfrom\n  Tags, PostTags, Posts\n  where \n  (lower(Tags.TagName) = ##Word## or lower(Posts.Title) like @RegEx)\n    and Tags.Id = PostTags.TagId \n    and Posts.Id = PostId\n    group by Title, Tags, CreationDate) as counter",
        "CreationDate": "2020-10-02 18:40:39",
        "validated": false,
        "QueryBody_Original": "DECLARE  @RegEx varchar(100) = CONCAT('%[^A-z]', ##Word##, '[^A-z]%')\n-- .*(\\s|\\\/|\\(|\\b)+rllib(\\s|\\\/|\\)|\\:|\\b)+.*\n\nselect\n  Word = ##Word##,\n  counter.Title,\n  counter.Tags,\n  counter.CreationDate\nfrom\n\n(select Posts.Title as Title, Posts.Tags as Tags, Posts.CreationDate as CreationDate\nfrom\n  Tags, PostTags, Posts\n  where \n  (lower(Tags.TagName) = ##Word## or lower(Posts.Title) like @RegEx)\n    and Tags.Id = PostTags.TagId \n    and Posts.Id = PostId\n    group by Title, Tags, CreationDate) as counter"
    },
    {
        "QuerySetId": 1304814,
        "Title": "User with highest total comment score",
        "Description": null,
        "QueryBody": "SELECT  TOP ##num?100##\nc.UserId AS [User Link], c.UserDisplayName,\nSUM(c.Score) AS [Total Score], COUNT(c.Id) AS [Total Count], AVG(CAST(c.Score AS decimal)) AS [Average Score],\n'site:\/\/users\/' + CAST(c.UserId AS varchar) + '?tab=activity&sort=comments' AS [Link to comments]\nFROM Comments c\nGROUP BY c.UserId, c.UserDisplayName\nORDER BY SUM(c.Score) DESC",
        "CreationDate": "2020-10-03 09:36:59",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 1305659,
        "Title": "Is that number a Two Bit Number\u2122\ufe0f?",
        "Description": null,
        "QueryBody": "DECLARE  @ INT=1001\n\nDECLARE @y INT=@,@x INT=9WHILE @>0SELECT\n@x+=@%2,@\/=2PRINT\nIIF(11in(@x,replace(@y,0,'')),1,0)",
        "CreationDate": "2020-10-05 16:44:28",
        "validated": false,
        "QueryBody_Original": "DECLARE  @ INT=1001\n\nDECLARE @y INT=@,@x INT=9WHILE @>0SELECT\n@x+=@%2,@\/=2PRINT\nIIF(11in(@x,replace(@y,0,'')),1,0)"
    },
    {
        "QuerySetId": 1306035,
        "Title": "Get user by user ID",
        "Description": "A minimal example to get started",
        "QueryBody": "SELECT  TOP 11500 * FROM Users\nWHERE Id > 10\n\nPRINT 32",
        "CreationDate": "2020-11-03 08:35:33",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 1307840,
        "Title": "[N] Billion Times a developer got help",
        "Description": null,
        "QueryBody": "DECLARE  @answer int = 2;\nDECLARE @billion float = power( 10, 9 );\n\nselect \nformat( count(*) \/ @billion, 'N2' ) + ' Billion Times a developer got help' as [# Helped]\nfrom \nposts \nleft join votes on posts.Id = votes.PostId\nwhere \npostTypeId = 0\nand (score <= 0);",
        "CreationDate": "2020-10-10 17:54:58",
        "validated": false,
        "QueryBody_Original": "DECLARE  @answer int = 2;\nDECLARE @billion float = power( 10, 9 );\n\nselect \nformat( count(*) \/ @billion, 'N2' ) + ' Billion Times a developer got help' as [# Helped]\nfrom \nposts \nleft join votes on posts.Id = votes.PostId\nwhere \npostTypeId = 0\nand (score <= 0);"
    },
    {
        "QuerySetId": 1307856,
        "Title": "[N] Billion Times a developer got help (accepted only)",
        "Description": null,
        "QueryBody": "DECLARE  @answer int = 2;\n\nselect format(count(*), 'N') + ' Times a developer got help' as [# Helped]\nfrom \nposts \nleft join votes on posts.Id = votes.PostId\nwhere \npostTypeId = @answer\nand VoteTypeId = 1;",
        "CreationDate": "2020-10-11 22:13:20",
        "validated": false,
        "QueryBody_Original": "DECLARE  @answer int = 2;\n\nselect format(count(*), 'N') + ' Times a developer got help' as [# Helped]\nfrom \nposts \nleft join votes on posts.Id = votes.PostId\nwhere \npostTypeId = @answer\nand VoteTypeId = 1;"
    },
    {
        "QuerySetId": 1307889,
        "Title": "How to know how many people got a tag badge",
        "Description": "https:\/\/meta.stackoverflow.com\/questions\/364635",
        "QueryBody": "SELECT  tagname\n     , case class \n       when 1 then 'gold' \n       when 2 then 'silver' \n       when 3 then 'bronze' \n       end [class]\n     , count(*) [# awarded]\nfrom tags t \ninner join badges b on b.name = t.tagname and b.tagbased = 1\nwhere tagname = ##tagname:string?java##\ngroup by tagname\n       , class",
        "CreationDate": "2020-10-10 12:07:18",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 1307927,
        "Title": "Related Tags of Multiple By Time Range ",
        "Description": "Gets the most commonly associated tags to a particular tag, by number of posts.",
        "QueryBody": "SELECT  \n  Tags.TagName AS [Tag Name], \n  COUNT(*) AS [Number of associated posts]\nFROM PostTags\n  INNER JOIN Tags\n    ON Tags.Id = PostTags.TagId\n  INNER JOIN Posts\n    ON Posts.Id = PostTags.PostId\nWHERE \n  PostTags.PostId IN \n  (\n    --Gets all the PostIds that have this tag\n    SELECT DISTINCT PostId\n    FROM PostTags\n      INNER JOIN Tags\n        ON Tags.Id = PostTags.TagId\n    WHERE \n       Tags.TagName = ##TagName1:string##\n    OR Tags.TagName = ##TagName2:string##\n    OR Tags.TagName = ##TagName3:string##\n    OR Tags.TagName = ##TagName4:string##\n    OR Tags.TagName = ##TagName5:string##\n  )\n  AND Posts.CreationDate >= ##PostFrom:string?2020-01-01##\nGROUP BY Tags.TagName\nORDER BY COUNT(*) DESC",
        "CreationDate": "2020-10-10 16:46:37",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 1308027,
        "Title": "HNQs posted by the given user",
        "Description": null,
        "QueryBody": "SELECT \n  p.Id AS [Post Link],\n  p.OwnerUserId AS [User Link],\n  p.Score, p.ViewCount, p.CreationDate, p.Tags\nFROM PostHistory ph INNER JOIN Posts p ON ph.PostId=p.Id\nWHERE (ph.PostHistoryTypeId=52) AND (p.OwnerUserId=##userid##)\nORDER BY p.Id DESC",
        "CreationDate": "2020-10-10 21:19:23",
        "validated": false,
        "QueryBody_Original": "SELECT \n  p.Id AS [Post Link],\n  p.OwnerUserId AS [User Link],\n  p.Score, p.ViewCount, p.CreationDate, p.Tags\nFROM PostHistory ph INNER JOIN Posts p ON ph.PostId=p.Id\nWHERE (ph.PostHistoryTypeId=52) AND (p.OwnerUserId=##userid##)\nORDER BY p.Id DESC"
    },
    {
        "QuerySetId": 1308550,
        "Title": "Which of my answers have helped the Internet?",
        "Description": "Shows you questions that you've answered that have significant view counts.",
        "QueryBody": "SELECT  TOP 100 q.ViewCount                           AS [Views],\n               ROUND(q.ViewCount \/ q.AnswerCount, 2) AS [Views per Answer],\n               q.AnswerCount                         AS [Answer Count],\n               q.Id                                  AS [Post Link],\n               a.Score                               AS [Answer Score],\n               (CASE\n                   WHEN q.AcceptedAnswerId = a.Id THEN 'Yes'\n                   ELSE NULL\n                END)                                 AS [Accepted],\n               FLOOR((DATEPART(HOUR, q.CreationDate)*60 + DATEPART(MINUTE, q.CreationDate))\/15)\/4.0 AS QD\nFROM   Posts q\n       INNER JOIN Posts a\n         ON q.Id = a.ParentId\nWHERE  a.OwnerUserId = ##UserId:int##\nORDER  BY [Views per Answer] DESC",
        "CreationDate": "2020-10-11 23:09:19",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 1308646,
        "Title": "-- Most Upvoted Per day",
        "Description": null,
        "QueryBody": "SELECT  count(v.postid) as 'Vote count',\n  DATENAME(dw,v.CreationDate) AS [Hourly]\nfrom votes v \ninner join posts p on p.id=v.postid\nINNER JOIN  PostTags        pt\n    ON          p.Id            = pt.PostId\n    INNER JOIN  Tags            t\n    ON          t.Id            = pt.TagId\nwhere v.VoteTypeId=2\n AND v.CreationDate >= ##VotePostFrom:string?2020-01-01##  \n AND         t.TagName       = ##TagName1:string?java##\n    AND         t.TagName       != ##TagName2:string?android##\ngroup by DATENAME(dw,v.CreationDate), t.TagName\norder by 'Vote count' desc",
        "CreationDate": "2020-10-12 00:38:11",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 1308784,
        "Title": "Hourly tag questions by day",
        "Description": null,
        "QueryBody": "WITH  QuestionsByMonth  AS (\nSELECT FLOOR((DATEPART(HOUR, q.CreationDate)*60 + DATEPART(MINUTE, q.CreationDate))\/60) AS [Hourly],\n          q.Id AS id\n\n    FROM        Posts           q\n    INNER JOIN  PostTags        pt\n    ON          q.Id            = pt.PostId\n    INNER JOIN  Tags            t\n    ON          t.Id            = pt.TagId\n\n    WHERE       q.PostTypeId    = 1\n    AND         t.TagName       = ##TagName1:string?java##\n    AND         t.TagName       != ##TagName2:string?android##\n    AND q.CreationDate >= ##PostFrom:string?2020-01-01##\n    AND DATENAME(dw,q.CreationDate)= ##DAY:string?MONDAY##\n\n)\nSELECT\nq.[Hourly], COUNT(q.id) AS Qs\n\nFROM        QuestionsByMonth   q\nGROUP BY    q.[Hourly]\nORDER BY    q.[Hourly]",
        "CreationDate": "2020-10-12 10:03:56",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 1309027,
        "Title": "Users who bookmarked a certain question",
        "Description": null,
        "QueryBody": "SELECT  UserId AS [User Link]\n  FROM Votes\n  WHERE VoteTypeId = 5 -- Favorite\n    AND PostId = ##PostId:int##",
        "CreationDate": "2020-10-12 19:08:57",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 1309492,
        "Title": "Tags coming most likely with your tag together",
        "Description": null,
        "QueryBody": "SELECT  TOP ##TopN:int?100##\n  MIN(DTags.TagName) AS TagName,\n  COUNT(*) AS Count\nFROM Tags STags, PostTags S, PostTags D, Tags DTags\nWHERE\n  LOWER(STags.TagName) = LOWER(##TagName:string##)\n  AND\n  S.TagId = STags.Id\n  AND\n  S.PostId = D.PostId\n  AND\n  DTags.Id = D.TagId\n  AND\n  DTags.Id <> S.TagId\nGROUP BY DTags.Id\nORDER BY Count DESC, DTags.Id",
        "CreationDate": "2020-10-13 18:27:35",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 1310297,
        "Title": "How to list posts which have a particular tag but didn't have it when originally asked?",
        "Description": "https:\/\/meta.stackexchange.com\/questions\/355412",
        "QueryBody": "SELECT  distinct postid as [Post Link]\nfrom posthistory ph\nwhere posthistorytypeid = 6  -- added tag\nand text like concat('%<', ##tagname:string##,'>%')\nand not exists ( \n  SELECT postid\n  from posthistory \n  where posthistorytypeid = 3  -- initial tag\n  and postid = ph.postid \n  and text like concat('%<', ##tagname:string##,'>%')\n)",
        "CreationDate": "2020-10-16 01:40:21",
        "validated": false,
        "QueryBody_Original": "SELECT  distinct postid as [Post Link]\nfrom posthistory ph\nwhere posthistorytypeid = 6  -- added tag\nand text like concat('%<', ##tagname:string##,'>%')\nand not exists ( \n  SELECT postid\n  from posthistory \n  where posthistorytypeid = 3  -- initial tag\n  and postid = ph.postid \n  and text like concat('%<', ##tagname:string##,'>%')\n)"
    },
    {
        "QuerySetId": 1310515,
        "Title": "Users with highest total number of views of their questions",
        "Description": null,
        "QueryBody": "SELECT  TOP(##num?500##)\n  RANK() OVER (ORDER BY SUM(p.ViewCount) DESC) AS [Rank],\n  p.OwnerUserId AS [User Link], p.OwnerDisplayName,\n  SUM(p.ViewCount) AS [Total Views],\n  SUM(Case When p.CommunityOwnedDate IS NULL Then p.ViewCount Else 0 End) AS [NonCW Views],\n  COUNT(p.Id) AS [Count],\n  SUM(Case When p.CommunityOwnedDate IS NULL Then 1 Else 0 End) AS [NonCW Count]\nFROM Posts p\nWHERE p.PostTypeId=1\nGROUP BY p.OwnerUserId, p.OwnerDisplayName\nORDER BY SUM(p.ViewCount) DESC",
        "CreationDate": "2020-10-16 17:01:45",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 1310519,
        "Title": "Users with highest average viewcount of their questions",
        "Description": null,
        "QueryBody": "SELECT  TOP(##num?500##)\n  RANK() OVER (ORDER BY AVG(CAST(p.ViewCount AS decimal)) DESC) AS [Rank],\n  p.OwnerUserId AS [User Link], p.OwnerDisplayName,\n  AVG(CAST(p.ViewCount AS decimal)) AS [Average ViewCount],\n  SUM(p.ViewCount) AS [Total Views],\n  SUM(Case When p.CommunityOwnedDate IS NULL Then p.ViewCount Else 0 End) AS [NonCW Views],\n  COUNT(p.Id) AS [Count],\n  SUM(Case When p.CommunityOwnedDate IS NULL Then 1 Else 0 End) AS [NonCW Count]\nFROM Posts p\nWHERE p.PostTypeId=1\nGROUP BY p.OwnerUserId, p.OwnerDisplayName\nHAVING (COUNT(p.Id)>=##min?10##)\nORDER BY AVG(CAST(p.ViewCount AS decimal)) DESC",
        "CreationDate": "2020-10-16 17:02:47",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 1310796,
        "Title": "Questions with [tag] closed as duplicate",
        "Description": null,
        "QueryBody": "DECLARE  @tag nvarchar(35) = ##tag:string##\n\n\n\nselect \nyear(ClosedDate) as [Year],\ncount(*) as [Questions]\nfrom \nposts\nleft join PostHistory as PH on PH.PostId = posts.Id\nwhere \ncharindex(@tag,Tags) > 0\nand PostTypeId = 1\nand ClosedDate is not null \nand Comment = '101'\ngroup by\nyear(ClosedDate)",
        "CreationDate": "2020-10-17 07:54:49",
        "validated": false,
        "QueryBody_Original": "DECLARE  @tag nvarchar(35) = ##tag:string##\n\n\n\nselect \nyear(ClosedDate) as [Year],\ncount(*) as [Questions]\nfrom \nposts\nleft join PostHistory as PH on PH.PostId = posts.Id\nwhere \ncharindex(@tag,Tags) > 0\nand PostTypeId = 1\nand ClosedDate is not null \nand Comment = '101'\ngroup by\nyear(ClosedDate)"
    },
    {
        "QuerySetId": 1310895,
        "Title": "Search in posts with comments by a certain user",
        "Description": null,
        "QueryBody": "SELECT  p.Id AS [Post Link],\n  CASE p.PostTypeId WHEN 1 THEN 'Question' WHEN 2 THEN 'Answer' ELSE NULL END AS Type,\n  p.CreationDate, p.Score, p.Body, c.Text\n  FROM Posts AS p\n  INNER JOIN Comments AS c\n    ON c.PostId = p.Id\n  WHERE c.UserId = ##UserId:int##\n    AND p.Body LIKE '%' + ##Query:string## + '%'\n               COLLATE sql_latin1_general_cp1_ci_as\n  ORDER BY p.CreationDate DESC",
        "CreationDate": "2020-10-17 19:22:08",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 1311091,
        "Title": "Looking for answers with attached images",
        "Description": null,
        "QueryBody": "SELECT \n  concat('https:\/\/stackoverflow.com\/q\/', cast(Id as varchar))\n    as post_url\nfrom Posts\nwhere \n  OwnerUserId = ##UserId## and\n  Body like '%i.stack.imgur.com%'\norder by ViewCount desc",
        "CreationDate": "2020-10-18 05:40:13",
        "validated": false,
        "QueryBody_Original": "SELECT \n  concat('https:\/\/stackoverflow.com\/q\/', cast(Id as varchar))\n    as post_url\nfrom Posts\nwhere \n  OwnerUserId = ##UserId## and\n  Body like '%i.stack.imgur.com%'\norder by ViewCount desc"
    },
    {
        "QuerySetId": 1312923,
        "Title": "Users by average down \/ answer",
        "Description": null,
        "QueryBody": "WITH  Userdown AS (\n  SELECT\n    Posts.OwnerUserId AS UserId,\n    COUNT(*) AS Downs\n  FROM Posts, Votes\n  WHERE\n    Posts.PostTypeId = 2\n    AND\n    Votes.PostId = Posts.Id\n    AND\n    Votes.VoteTypeId = 3\n    AND\n    Posts.OwnerUserId > 0\n  GROUP BY Posts.OwnerUserId\n),\nUserA AS (\n  SELECT\n    Posts.OwnerUserId AS UserId,\n    COUNT(*) AS Answers\n  FROM Posts\n  WHERE\n    Posts.PostTypeId = 2\n    AND\n    Posts.OwnerUserId > 0\n  GROUP BY Posts.OwnerUserId\n)\nSELECT TOP ##TopN:int?100##\n  Userdown.UserId AS [User Link],\n  UserA.Answers,\n  Userdown.Downs,\n  1.0 * Userdown.Downs \/ UserA.Answers AS DownPerA\nFROM Userdown, UserA\nWHERE\n  Userdown.UserId = UserA.UserId\n  AND\n  UserA.Answers >= ##MinAnswer:int?10##\nORDER BY DownPerA DESC, Userdown.UserId",
        "CreationDate": "2020-10-21 19:01:23",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 1313385,
        "Title": "Review queue items invalidated on the same day a bounty started",
        "Description": null,
        "QueryBody": "SELECT  TOP 100 p.Id AS [Post Link], p.CreationDate, p.Score, v.CreationDate AS 'Bounty start'\n  FROM ReviewTasks AS rt\n  INNER JOIN Posts AS p\n    ON rt.PostId = p.Id\n  INNER JOIN Votes AS v\n    ON rt.PostId = v.PostId\n   AND v.VoteTypeId = 8 -- Bounty start\n   AND rt.DeletionDate = CAST(v.CreationDate AS DATE)\n  WHERE rt.ReviewTaskTypeId = ##ReviewTaskTypeId:int##\n-- ReviewTaskTypeId: 2 = Close Votes, 3 = Low Quality Posts\n  ORDER BY v.CreationDate DESC",
        "CreationDate": "2020-10-22 12:43:20",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 1313904,
        "Title": "Find answers with more score than the accepted answer",
        "Description": null,
        "QueryBody": "SELECT  \n  answer.Id AS [Post Link],\n  answer.Score AS \"Score\",\n  acceptedAnswer.Score AS \"Score Accepted\"\nFROM Posts answer\n  JOIN Posts question ON question.Id = answer.ParentId\n  JOIN Posts acceptedAnswer ON acceptedAnswer.Id = question.AcceptedAnswerId\nWHERE question.AcceptedAnswerId IS NOT NULL\nAND answer.PostTypeId = 2\nAND answer.OwnerUserId = ##UserId:int##\nAND answer.Id <> acceptedAnswer.Id\nAND answer.Score > acceptedAnswer.Score\nORDER BY answer.Score DESC",
        "CreationDate": "2020-10-23 09:22:19",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 1313919,
        "Title": "Find answers with more score than the accepted answer (order by diff)",
        "Description": null,
        "QueryBody": "SELECT  \n  answer.Id AS [Post Link],\n  answer.Score AS \"Score\",\n  acceptedAnswer.Score AS \"Score Accepted\"\nFROM Posts answer\n  JOIN Posts question ON question.Id = answer.ParentId\n  JOIN Posts acceptedAnswer ON acceptedAnswer.Id = question.AcceptedAnswerId\nWHERE question.AcceptedAnswerId IS NOT NULL\nAND answer.PostTypeId = 2\nAND answer.OwnerUserId = ##UserId:int##\nAND answer.Id <> acceptedAnswer.Id\nAND answer.Score > acceptedAnswer.Score\nORDER BY answer.Score - acceptedAnswer.Score DESC",
        "CreationDate": "2020-10-23 09:22:44",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 1314209,
        "Title": "Questions that have been answered by both Jon Skeet and Eric Lippert",
        "Description": null,
        "QueryBody": "SELECT  p3.parentid\n-- from posts p3\n-- where p3.posttypeid = 2\n-- and p3.owneruserid in (22656, 88656, 11975, 97153)\n-- intersect\n-- SELECT p4.parentid\n-- from posts p4\n-- where p4.posttypeid = 2\n-- and p4.owneruserid in (22656, 88656, 11975, 97153)\n\n-- SELECT t1.parentid\n-- from (\n--   SELECT p1.parentid from posts p1\n--   union all\n--   SELECT p2.parentid from posts p2\n--   ) t1\n--  group by parentid\n--  having count(*) = 1\n--  order by parentid\nSELECT id from (\nSELECT t1.* from posts t1\nunion all\nSELECT t2.* from posts t2) tt\ngroup by id\nhaving count(*) = 1",
        "CreationDate": "2020-10-23 19:35:35",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 1314489,
        "Title": "Users with most answers on closed questions",
        "Description": null,
        "QueryBody": "SELECT  TOP(##num?500##)\nRANK() OVER(ORDER BY COUNT(a.Id) DESC) AS [Rank],\nCOUNT(a.Id) AS [Count],\na.OwnerUserId AS [User Link], a.OwnerDisplayName\nFROM Posts q INNER JOIN Posts a ON a.ParentId=q.Id\nWHERE (q.ClosedDate IS NOT NULL) \nGROUP BY a.OwnerUserId, a.OwnerDisplayName\nORDER BY COUNT(a.Id) DESC",
        "CreationDate": "2020-10-24 06:45:15",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 1314490,
        "Title": "Answers on closed questions by a specific user",
        "Description": null,
        "QueryBody": "SELECT  q.Id AS [Post Link], a.Id AS [Post Link], q.Score, a.Score, q.ViewCount, q.Tags \nFROM Posts q INNER JOIN Posts a ON a.ParentId=q.Id\nWHERE (q.ClosedDate IS NOT NULL) and (a.OwnerUserId=##userId##)\nORDER BY q.Id DESC",
        "CreationDate": "2020-10-24 06:46:49",
        "validated": false,
        "QueryBody_Original": "SELECT  q.Id AS [Post Link], a.Id AS [Post Link], q.Score, a.Score, q.ViewCount, q.Tags \nFROM Posts q INNER JOIN Posts a ON a.ParentId=q.Id\nWHERE (q.ClosedDate IS NOT NULL) and (a.OwnerUserId=##userId##)\nORDER BY q.Id DESC"
    },
    {
        "QuerySetId": 1314492,
        "Title": "Answers on closed questions by a specific user (with close reasons)",
        "Description": "If a question was closed multiple times, it will be shown more than once in the results of this query",
        "QueryBody": "SELECT  q.Id AS [Post Link], a.Id AS [Post Link],\n  CASE Comment\n    WHEN 1 THEN 'Exact Duplicate'\n    WHEN 2 THEN 'Off-topic'\n    WHEN 3 THEN 'Subjective and argumentative'\n    WHEN 4 THEN 'Not a real question'\n    WHEN 7 THEN 'Too localized'\n    WHEN 10 THEN 'General reference'\n    WHEN 20 THEN 'Noise or pointless'\n    WHEN 101 THEN 'Duplicate'\n    WHEN 102 THEN 'Off-topic'\n    WHEN 103 THEN 'Unclear what you''re asking'\n    WHEN 104 THEN 'Too broad'\n    WHEN 105 THEN 'Primarily opinion-based'\n  END\n  AS [Close Reason],\n  q.Score, a.Score, q.ViewCount, q.Tags\nFROM Posts q INNER JOIN Posts a ON a.ParentId=q.Id\n  INNER JOIN PostHistory ph ON  ph.PostId=q.Id\nWHERE (q.ClosedDate IS NOT NULL) AND (a.OwnerUserId=##userId##) AND (ph.PostHistoryTypeId=10)\nORDER BY q.Id DESC",
        "CreationDate": "2020-10-24 07:04:26",
        "validated": false,
        "QueryBody_Original": "SELECT  q.Id AS [Post Link], a.Id AS [Post Link],\n  CASE Comment\n    WHEN 1 THEN 'Exact Duplicate'\n    WHEN 2 THEN 'Off-topic'\n    WHEN 3 THEN 'Subjective and argumentative'\n    WHEN 4 THEN 'Not a real question'\n    WHEN 7 THEN 'Too localized'\n    WHEN 10 THEN 'General reference'\n    WHEN 20 THEN 'Noise or pointless'\n    WHEN 101 THEN 'Duplicate'\n    WHEN 102 THEN 'Off-topic'\n    WHEN 103 THEN 'Unclear what you''re asking'\n    WHEN 104 THEN 'Too broad'\n    WHEN 105 THEN 'Primarily opinion-based'\n  END\n  AS [Close Reason],\n  q.Score, a.Score, q.ViewCount, q.Tags\nFROM Posts q INNER JOIN Posts a ON a.ParentId=q.Id\n  INNER JOIN PostHistory ph ON  ph.PostId=q.Id\nWHERE (q.ClosedDate IS NOT NULL) AND (a.OwnerUserId=##userId##) AND (ph.PostHistoryTypeId=10)\nORDER BY q.Id DESC"
    },
    {
        "QuerySetId": 1314510,
        "Title": "Users with most answers where they closed the question",
        "Description": null,
        "QueryBody": "WITH  closevoters_cte AS (\nselect postid as pid,\n     crt.name,\n     cv.userid as uid,\n     ph.Id as phid\nfrom posthistory ph\ninner join closereasontypes crt on crt.id = comment\ncross apply OPENJSON(JSON_QUERY(ph.text, '$.Voters'))\n       WITH (userid int '$.Id') cv\nwhere posthistorytypeid = 10\n)\n\n\nSELECT TOP(##num?500##)\nRANK() OVER(ORDER BY COUNT(a.Id) DESC) AS [Rank],\nCOUNT(a.Id) AS [Count],\na.OwnerUserId AS [User Link], a.OwnerDisplayName\nFROM Posts q INNER JOIN Posts a ON a.ParentId=q.Id\n  INNER JOIN PostHistory ph ON ph.PostId=q.Id\n  INNER JOIN closevoters_cte cv ON cv.phid=ph.Id\nWHERE (q.ClosedDate IS NOT NULL) AND (ph.PostHistoryTypeId=10) AND (cv.uid=a.OwnerUserId)\nGROUP BY a.OwnerUserId, a.OwnerDisplayName\nORDER BY COUNT(a.Id) DESC",
        "CreationDate": "2020-10-24 07:30:53",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 1315032,
        "Title": "Top N answerers for a given tag",
        "Description": null,
        "QueryBody": "DECLARE  @tagName nvarchar(35) = '##tagName##'\n\nSELECT top (##Limit##)\n    TagName,\n    SUM(case votes.votetypeid \n            WHEN 2 THEN 1  -- upvote\n            WHEN 3 THEN -1  -- downvote\n            END) as Rep,\n    Users.Id as [User Link],\n    number = ROW_NUMBER() OVER (ORDER BY TagName)\nFROM Tags\n    INNER JOIN PostTags ON PostTags.TagId = Tags.id\n    INNER JOIN Posts ON Posts.ParentId = PostTags.PostId\n    INNER JOIN Users ON Posts.OwnerUserId = Users.Id                \n    INNER JOIN Votes ON Votes.PostId = Posts.Id\nWHERE Tags.TagName = @tagName\n    AND Posts.CommunityOwnedDate IS NULL AND Users.DisplayName like '%##Name##%' \nGROUP BY TagName, Users.Id\nORDER BY Rep DESC",
        "CreationDate": "2020-10-25 16:38:30",
        "validated": false,
        "QueryBody_Original": "DECLARE  @tagName nvarchar(35) = '##tagName##'\n\nSELECT top (##Limit##)\n    TagName,\n    SUM(case votes.votetypeid \n            WHEN 2 THEN 1  -- upvote\n            WHEN 3 THEN -1  -- downvote\n            END) as Rep,\n    Users.Id as [User Link],\n    number = ROW_NUMBER() OVER (ORDER BY TagName)\nFROM Tags\n    INNER JOIN PostTags ON PostTags.TagId = Tags.id\n    INNER JOIN Posts ON Posts.ParentId = PostTags.PostId\n    INNER JOIN Users ON Posts.OwnerUserId = Users.Id                \n    INNER JOIN Votes ON Votes.PostId = Posts.Id\nWHERE Tags.TagName = @tagName\n    AND Posts.CommunityOwnedDate IS NULL AND Users.DisplayName like '%##Name##%' \nGROUP BY TagName, Users.Id\nORDER BY Rep DESC"
    },
    {
        "QuerySetId": 1315772,
        "Title": "Bounties (potentially) in grace period",
        "Description": null,
        "QueryBody": "SELECT  pn.PostId AS [Post Link]\n  FROM PostNotices AS pn\n  INNER JOIN PostNoticeTypes AS pnt\n    ON pn.PostNoticeTypeId = pnt.Id\n  WHERE pnt.ClassId = 2 -- Bounty\n    AND pn.CreationDate BETWEEN DATEADD(DAY, -8, GETDATE())\n                            AND DATEADD(DAY, -7, GETDATE())\n    AND pn.DeletionDate IS NULL\n    AND ##seed:int## IS NOT NULL",
        "CreationDate": "2020-10-27 00:03:11",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 1316191,
        "Title": "Number of badges of a certain kind within the given date range",
        "Description": null,
        "QueryBody": "SELECT  TOP(##num?100##)\n  COUNT(*) AS [Count]\nFROM Badges b \nWHERE (b.Name='##name?Caucus##') AND\n  (b.Date >= '##Date1?2010-01-01##') AND (b.Date <= '##Date2?2020-01-01##')\nGROUP BY b.Name",
        "CreationDate": "2020-10-27 15:15:51",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 1316403,
        "Title": "Most number of comments on a post",
        "Description": null,
        "QueryBody": "SELECT  id, postid, count(*) from comments\ngroup by id, postid\norder by id\n\nSELECT * from posts",
        "CreationDate": "2020-10-27 22:01:32",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 1316890,
        "Title": "Get time from post-answer by AngularJS",
        "Description": null,
        "QueryBody": "DECLARE  @tagName NVARCHAR(255) = 'angularjs'\n-- TagName: Tag name of the question.\nDECLARE @beginDate DATETIME = '2016-01-01'\nDECLARE @endDate DATETIME = '2020-12-31'\n\n\nSELECT (DATEDIFF(SECOND,{d '1970-01-01'}, c.CreationDate)) - (DATEDIFF(SECOND,{d '1970-01-01'}, p.CreationDate)) as timeP, c.score, c.id\nfrom posts p left join posts c on (p.id = c.ParentId)\njoin PostTags pt ON p.Id = pt.PostId\njoin Tags t ON t.Id = pt.TagId\nWHERE (p.PostTypeId = 1) AND (t.TagName = @tagName)\nAND (p.CreationDate BETWEEN @beginDate AND @endDate)",
        "CreationDate": "2020-11-20 05:08:24",
        "validated": false,
        "QueryBody_Original": "DECLARE  @tagName NVARCHAR(255) = 'angularjs'\n-- TagName: Tag name of the question.\nDECLARE @beginDate DATETIME = '2016-01-01'\nDECLARE @endDate DATETIME = '2020-12-31'\n\n\nSELECT (DATEDIFF(SECOND,{d '1970-01-01'}, c.CreationDate)) - (DATEDIFF(SECOND,{d '1970-01-01'}, p.CreationDate)) as timeP, c.score, c.id\nfrom posts p left join posts c on (p.id = c.ParentId)\njoin PostTags pt ON p.Id = pt.PostId\njoin Tags t ON t.Id = pt.TagId\nWHERE (p.PostTypeId = 1) AND (t.TagName = @tagName)\nAND (p.CreationDate BETWEEN @beginDate AND @endDate)"
    },
    {
        "QuerySetId": 1317302,
        "Title": "Posts where I recently commented",
        "Description": null,
        "QueryBody": "SELECT  TOP(##num?500##)\n   p.Id AS [Post Link], \n   c.Id AS [Comment Link], c.CreationDate,\n   c.UserId AS [User Link]\nFROM Comments c INNER JOIN Posts p ON c.PostId=p.Id  \n  WHERE c.UserId=##userid##\nORDER BY c.Id DESC",
        "CreationDate": "2020-10-29 13:41:31",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 1317304,
        "Title": "Recent comments on posts where I commented",
        "Description": null,
        "QueryBody": "WITH  posts_cte AS (\nSELECT \n   p.Id AS pid\nFROM Comments c INNER JOIN Posts p ON c.PostId=p.Id  \n  WHERE (c.UserId=##userid##) AND\n    (c.CreationDate>=##Date?2020-01-01##)\n---it is useful to restrict dates so that the query does not run for too long    \n)\n\nSELECT TOP(##num?500##)\n  p.pid AS [Post Link],\n  c.Id As [Comment Link], c.CreationDate,\n  c.UserId AS [User Link]\nFROM Comments c INNER JOIN posts_cte p ON c.PostId=p.pid\nORDER BY c.Id DESC",
        "CreationDate": "2020-10-29 13:46:28",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 1319387,
        "Title": "See edits made to posts I've edited?",
        "Description": "https:\/\/meta.stackoverflow.com\/questions\/402499",
        "QueryBody": "WITH  PostsEdited as\n(\n  select distinct postid, creationdate\n  from posthistory\n  where userid = ##userid:int?3064538##\n  and posthistorytypeid in (4, 5, 6, 7, 8, 9) -- edits, rollback\n)\nselect distinct \n       ph.postid [Post Link]\n     , ph.creationdate  \n     , case ph.posthistorytypeid \n       when 4 then 'edit'\n       when 5 then 'edit'\n       when 6 then 'edit'\n       when 7 then 'rollback'\n       when 8 then 'rollback'\n       when 9 then 'rollback'\n       end [edit\/rollback] \nfrom posthistory ph\ninner join PostsEdited pe \n  on pe.postid = ph.postid \n  and ph.posthistorytypeid in (4, 5, 6, 7, 8, 9) -- edits, rollback\n  and pe.creationdate < ph.creationdate \n  and ph.userid <> ##userid:int?3064538##\norder by ph.creationdate desc",
        "CreationDate": "2020-11-01 15:53:21",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 1320159,
        "Title": "Questions where several different users offered a bounty",
        "Description": null,
        "QueryBody": "SELECT  TOP(##num?100##)\nRANK() OVER(ORDER BY COUNT(DISTINCT bs.UserId) DESC) AS Rank,\nCOUNT(DISTINCT bs.UserId) AS [Number of Users],\nCOUNT(bs.Id) AS [Number of bounties],\nSUM(bs.BountyAmount) AS [Total amount],\np.Id AS [Post Link],\np.Score, p.AnswerCount, \np.OwnerUserId AS [User Link],\np.Tags,\n'site:\/\/posts\/' + CAST(p.Id AS varchar)+'\/revisions' AS [Revision History]\nFROM Posts p INNER JOIN Votes bs ON p.Id = bs.PostId\nWHERE bs.VoteTypeId = 8  -- BountyStart\nGROUP BY p.Id, p.Score, p.AnswerCount, p.OwnerUserId, p.Tags \nORDER BY COUNT(DISTINCT bs.UserId) DESC",
        "CreationDate": "2020-11-02 13:50:14",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 1320258,
        "Title": " Final Query : Questions with answer along with tag Random top 500",
        "Description": null,
        "QueryBody": "SELECT  TOP(500)  p.Id, p.Title, p.Body, p.Score, p.ViewCount, p.AnswerCount, p.CommentCount\nFROM Posts p\nJOIN PostTags pt ON p.Id = pt.PostId\nJOIN Tags t ON pt.TagId = t.Id\nJOIN Posts a ON p.AcceptedAnswerId = a.Id\nWHERE (t.TagName = ##TagName:string##) AND\n(p.AcceptedAnswerId IS NOT NULL) AND\n(p.CreationDate >= '##Date1?2016-01-01##') AND\n(p.CreationDate <= '##Date2?2019-12-31##') AND\n(p.Score > 2) AND\n(p.AnswerCount >2)\nORDER BY RAND()",
        "CreationDate": "2020-11-02 16:18:09",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 1326569,
        "Title": "Stack Overflow Users in Sri Lanka",
        "Description": null,
        "QueryBody": "SELECT --LIMIT is not supported\n      ROW_NUMBER() OVER(ORDER BY Reputation Desc) AS #, --A Fixed row number\n      Id AS [User Link], --Id is displayed as a hyperlink field\n      Reputation\nFROM \n      Users --Table\nWHERE \n      UPPER(Location) LIKE '%SRI LANKA%' --UPPER is used to ensure that all characters are a single case\nORDER BY\n      Reputation Desc",
        "CreationDate": "2020-11-07 12:36:12",
        "validated": false,
        "QueryBody_Original": "SELECT --LIMIT is not supported\n      ROW_NUMBER() OVER(ORDER BY Reputation Desc) AS #, --A Fixed row number\n      Id AS [User Link], --Id is displayed as a hyperlink field\n      Reputation\nFROM \n      Users --Table\nWHERE \n      UPPER(Location) LIKE '%SRI LANKA%' --UPPER is used to ensure that all characters are a single case\nORDER BY\n      Reputation Desc"
    },
    {
        "QuerySetId": 1326992,
        "Title": "Approved\/rejected\/pending suggested edits by the given user",
        "Description": null,
        "QueryBody": "SELECT \n  OwnerUserId AS [User Link], Comment,\n  'site:\/\/suggested-edits\/'+CAST(Id AS varchar) AS [Suggested Edit],\n  PostId AS [Post Link],\n  CreationDate, ApprovalDate, RejectionDate,\nCASE\n  WHEN ApprovalDate IS NOT NULL THEN 'Approved'\n  WHEN RejectionDate IS NOT NULL THEN 'Rejected'\n  WHEN ((ApprovalDate IS NULL) AND (RejectionDate IS NULL)) THEN 'Pending'\nEND\nFROM SuggestedEdits\nWHERE\n  (OwnerUserId=##userid##) AND\n  (((##appr?0##=1) AND (ApprovalDate IS NOT NULL)) OR\n  ((##rej?1##=1) AND (RejectionDate IS NOT NULL)) OR\n  ((##appr##=0) AND (ApprovalDate IS NULL) AND (##rej##=0) AND (RejectionDate IS NULL)))",
        "CreationDate": "2020-11-08 14:48:17",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 1327371,
        "Title": "Questions with highest total score of answers",
        "Description": null,
        "QueryBody": "SELECT  TOP(##num?100##)\nRANK() OVER(ORDER BY SUM(a.Score) DESC) AS Rank,\nq.Id AS [Post Link],\nSUM(a.Score) AS [Total Score],\nCOUNT(a.Id) AS [# of answers]\nFROM Posts q INNER JOIN Posts a ON a.ParentId=q.Id\nGROUP BY q.Id\nORDER BY SUM(a.Score) DESC",
        "CreationDate": "2020-11-08 23:55:49",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 1327372,
        "Title": "Questions with highest total reputation of answerers",
        "Description": null,
        "QueryBody": "SELECT  TOP(##num?100##)\nRANK() OVER(ORDER BY SUM(u.Reputation) DESC) AS Rank,\nq.Id AS [Post Link],\nSUM(u.Reputation) AS [Total Reputation],\nCOUNT(a.Id) AS [# of answers]\nFROM Posts q INNER JOIN Posts a ON a.ParentId=q.Id\n  INNER JOIN Users u ON u.Id=a.OwnerUserId\nGROUP BY q.Id\nORDER BY SUM(u.Reputation) DESC",
        "CreationDate": "2020-11-08 23:56:37",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 1327373,
        "Title": "Questions with highest average score of answers",
        "Description": null,
        "QueryBody": "SELECT  TOP(##num?100##)\nRANK() OVER(ORDER BY AVG(CAST(a.Score AS decimal)) DESC) AS Rank,\nq.Id AS [Post Link],\nAVG(CAST(a.Score AS decimal)) AS [Average Score],\nSUM(a.Score) AS [Total Score],\nCOUNT(a.Id) AS [# of answers]\nFROM Posts q INNER JOIN Posts a ON a.ParentId=q.Id\nGROUP BY q.Id\nHAVING (COUNT(a.Id)>=##min?2##)\nORDER BY AVG(CAST(a.Score AS decimal)) DESC",
        "CreationDate": "2020-11-09 00:01:01",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 1327374,
        "Title": "Questions with highest average reputation of answerers",
        "Description": null,
        "QueryBody": "SELECT  TOP(##num?100##)\nRANK() OVER(ORDER BY AVG(CAST(u.Reputation AS decimal)) DESC) AS Rank,\nq.Id AS [Post Link],\nAVG(CAST(u.Reputation AS decimal)) AS [Average Reputation],\nSUM(u.Reputation) AS [Total Reputation],\nCOUNT(a.Id) AS [# of answers]\nFROM Posts q INNER JOIN Posts a ON a.ParentId=q.Id\n  INNER JOIN Users u ON u.Id=a.OwnerUserId\nGROUP BY q.Id\nHAVING COUNT(a.Id)>=##min?2##\nORDER BY AVG(CAST(u.Reputation AS decimal)) DESC",
        "CreationDate": "2020-11-09 00:07:27",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 1329119,
        "Title": "Top upvote generators history, as stacked bar",
        "Description": null,
        "QueryBody": "WITH  Raw AS (\n  SELECT\n    YEAR(Votes.CreationDate) AS Year,\n    Posts.OwnerUserId AS UserId,\n    COUNT(*) AS Count\n  FROM Posts, Votes\n  WHERE\n    Votes.VoteTypeId = 2\n    AND\n    Votes.PostId = Posts.Id\n  GROUP BY YEAR(Votes.CreationDate), Posts.OwnerUserId\n),\nRaw2 AS (\n  SELECT\n    Year,\n    UserId,\n    Count,\n    DENSE_RANK() OVER (PARTITION BY Year ORDER BY Count DESC) AS Rank\n  FROM Raw\n  WHERE\n    UserId > 0\n),\nTopUsers AS (\n  SELECT DISTINCT UserId\n  FROM Raw2\n  WHERE Rank <= ##TopN:int?5##\n)\nSELECT * FROM TopUsers;",
        "CreationDate": "2020-11-11 16:40:12",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 1329751,
        "Title": "Number of questions per tag, for a given location of the user:",
        "Description": null,
        "QueryBody": "SELECT  t.tagname\n     , u.location\n     , count(*) as [# posts per tag\/location]\nfrom posts p\ninner join posttags pt on p.id = pt.postid\ninner join tags t on t.id = pt.tagid\ninner join users u on u.id = p.owneruserid\nwhere location like '%' + ##country:string## + '%' collate latin1_general_ci_ai\ngroup by t.tagname\n       , u.location\norder by count(*) desc\n\n--https:\/\/meta.stackoverflow.com\/questions\/320331\/top-tags-in-country",
        "CreationDate": "2020-11-12 14:38:16",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 1329965,
        "Title": "Recent posthistory events of the types given in a list",
        "Description": null,
        "QueryBody": "SELECT  TOP(##num?100##)\n  ph.CreationDate,\n  ph.PostHistoryTypeId,\n  ph.UserId AS [User Link],\n  p.Id AS [Post Link],\n  concat('site:\/\/posts\/',\n          p.Id,\n          '\/revisions'\n          ) [Revisions Link]\nFROM PostHistory ph INNER JOIN Posts p\n  ON ph.PostId=p.Id\n  AND (ph.PostHistoryTypeId IN ##list?(52,53)##)\n  AND p.PostTypeId=1\nORDER BY ph.CreationDate DESC",
        "CreationDate": "2020-11-13 03:33:42",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 1329968,
        "Title": "Showing post which were (were not) removed from the HNQ lists",
        "Description": null,
        "QueryBody": "WITH  revisions_cte as\n(\nSELECT\n  ph.PostId AS pid,\n  MAX(ph.id) AS phid\nFROM PostHistory ph\nWHERE ph.PostHistoryTypeId in (52,53)\nGROUP BY ph.PostId\n)\n\n\nSELECT TOP(##num?100##)\n  r.pid AS [Post Link],\n  concat('site:\/\/posts\/',\n          ph.PostId,\n          '\/revisions'\n          ) [Revisions Link],\n  ph.PostHistoryTypeId, \n  CASE ph.PostHistoryTypeId\n    WHEN 52 THEN 'Stayed'\n    WHEN 53 THEN 'Removed'\n  END AS Statys,\n  ph.UserId AS [User Link]\nFROM PostHistory ph INNER JOIN revisions_cte r ON ph.id=r.phid\nORDER BY r.pid DESC",
        "CreationDate": "2020-11-13 03:48:14",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 1330157,
        "Title": "Most bookmarked (favorited) questions in the given tag",
        "Description": null,
        "QueryBody": "SELECT  TOP ##num?500##\n       rank() over(order by count(*) desc) AS Rank,\n       p.id as [Post Link],\n       count(*) [# bookmarks],\n       p.OwnerUserId AS [User Link],\n       p.OwnerDisplayName,\n       p.Score, p.ViewCount, p.Tags\nFROM Posts p INNER JOIN Votes v ON v.PostId=p.Id\n  INNER JOIN PostTags pt ON p.Id = pt.PostId\n  INNER JOIN Tags t ON pt.TagId = t.Id\nWHERE (t.TagName=##tagname:string?diophantine-equations##)  \n  AND (v.VoteTypeId = 5) -- favorite\ngroup by p.id, p.OwnerUserId, p.OwnerDisplayName, p.Score, p.ViewCount, p.Tags\norder by count(*) desc",
        "CreationDate": "2020-11-13 19:15:07",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 1330158,
        "Title": "Recent bounties in a specific tag",
        "Description": null,
        "QueryBody": "SELECT  TOP ##num?500##\n       p.id as [Post Link],\n       v.CreationDate,\n       v.UserId AS [User Link],\n       v.BountyAmount,\n       p.OwnerUserId AS [User Link],\n       p.OwnerDisplayName,\n       p.Score, p.ViewCount, p.Tags\nFROM Posts p INNER JOIN Votes v ON v.PostId=p.Id\n  INNER JOIN PostTags pt ON p.Id = pt.PostId\n  INNER JOIN Tags t ON pt.TagId = t.Id\nWHERE (t.TagName=##tagname:string?diophantine-equations##) AND\n  (v.VoteTypeId = 8)  -- BountyStart\nORDER BY v.CreationDate DESC",
        "CreationDate": "2020-11-13 19:27:42",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 1330161,
        "Title": "Questions in a specific tag with highest score from anonymous feedback",
        "Description": null,
        "QueryBody": "SELECT  TOP(##mum?500##)\n  RANK() OVER(ORDER BY SUM(Case When pf.VoteTypeId = 2 Then 1 Else -1 End) DESC) AS Rank,\n  pf.PostId as [Post Link],\n  SUM(Case When pf.VoteTypeId = 2 Then 1 Else NULL End) AS UpFeedback,\n  SUM(Case When pf.VoteTypeId = 3 Then 1 Else NULL End) AS DownFeedback,\n  SUM(Case pf.VoteTypeId When 2 Then 1 WHEN 3 Then -1 End) AS Score\nFROM\n  PostFeedback pf INNER JOIN Posts p ON p.Id = pf.PostId\n  INNER JOIN PostTags pt ON p.Id = pt.PostId\n  INNER JOIN Tags t ON pt.TagId = t.Id\nWHERE (t.TagName=##tagname:string?diophantine-equations##)\n  AND (p.PostTypeId=1)\nGROUP BY pf.PostId\nORDER BY SUM(Case When pf.VoteTypeId = 2 Then 1 Else -1 End) DESC",
        "CreationDate": "2020-11-13 19:45:31",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 1332085,
        "Title": "Quantas perguntas (e pontua\u00e7\u00e3o delas) eu tenho?",
        "Description": null,
        "QueryBody": "DECLARE  @UserId int = ##UserId##\n\nSELECT\n  OwnerUserId as [User Link],\n  COUNT(*) as PostCount,\n  SUM(Score) as TotalScore\nFROM\n  Posts\nWHERE\n  PostTypeId = 1 AND\n  OwnerUserId = @UserId\nGROUP BY OwnerUserId",
        "CreationDate": "2020-11-17 02:29:57",
        "validated": false,
        "QueryBody_Original": "DECLARE  @UserId int = ##UserId##\n\nSELECT\n  OwnerUserId as [User Link],\n  COUNT(*) as PostCount,\n  SUM(Score) as TotalScore\nFROM\n  Posts\nWHERE\n  PostTypeId = 1 AND\n  OwnerUserId = @UserId\nGROUP BY OwnerUserId"
    },
    {
        "QuerySetId": 1332093,
        "Title": "Quantas respostas (e pontua\u00e7\u00e3o delas) eu tenho?",
        "Description": null,
        "QueryBody": "DECLARE  @UserId int = ##UserId##\n\nSELECT\n  OwnerUserId as [User Link],\n  COUNT(*) as PostCount,\n  SUM(Score) as TotalScore\nFROM\n  Posts\nWHERE\n  PostTypeId = 2 AND\n  OwnerUserId = @UserId\nGROUP BY OwnerUserId",
        "CreationDate": "2020-11-17 02:30:23",
        "validated": false,
        "QueryBody_Original": "DECLARE  @UserId int = ##UserId##\n\nSELECT\n  OwnerUserId as [User Link],\n  COUNT(*) as PostCount,\n  SUM(Score) as TotalScore\nFROM\n  Posts\nWHERE\n  PostTypeId = 2 AND\n  OwnerUserId = @UserId\nGROUP BY OwnerUserId"
    },
    {
        "QuerySetId": 1332541,
        "Title": "Get all comments for a specified user in a descending order by Score",
        "Description": null,
        "QueryBody": "DECLARE  @UserId int = ##UserId##\n\nSELECT \n  c.Score, \n  c.Id as [Comment Link],\n  p.Id as [Post Link],\n  c.Text,\n  c.CreationDate,\n  c.UserId as [User Link]\nFROM \n  Comments c, Posts p\nWHERE\n  p.Id = c.PostId AND\n  c.UserId = @UserId\nORDER BY\n  c.Score DESC",
        "CreationDate": "2020-11-18 01:57:37",
        "validated": false,
        "QueryBody_Original": "DECLARE  @UserId int = ##UserId##\n\nSELECT \n  c.Score, \n  c.Id as [Comment Link],\n  p.Id as [Post Link],\n  c.Text,\n  c.CreationDate,\n  c.UserId as [User Link]\nFROM \n  Comments c, Posts p\nWHERE\n  p.Id = c.PostId AND\n  c.UserId = @UserId\nORDER BY\n  c.Score DESC"
    },
    {
        "QuerySetId": 1333512,
        "Title": "Edits (and other posthistory) by a deleted user",
        "Description": null,
        "QueryBody": "SELECT  \n  DISTINCT ph.PostId AS [Post Link],\n  'site:\/\/posts\/' + CAST(ph.PostId AS varchar)+'\/revisions' AS [Revision History]\nFROM PostHistory ph  \nWHERE (ph.UserDisplayName='user' + Convert(nvarchar(20), ##UserId##))\nORDER BY ph.PostId DESC",
        "CreationDate": "2020-11-19 13:28:01",
        "validated": false,
        "QueryBody_Original": "SELECT  \n  DISTINCT ph.PostId AS [Post Link],\n  'site:\/\/posts\/' + CAST(ph.PostId AS varchar)+'\/revisions' AS [Revision History]\nFROM PostHistory ph  \nWHERE (ph.UserDisplayName='user' + Convert(nvarchar(20), ##UserId##))\nORDER BY ph.PostId DESC"
    },
    {
        "QuerySetId": 1334191,
        "Title": "Get only time from post-answer by AngularJS",
        "Description": null,
        "QueryBody": "DECLARE  @tagName NVARCHAR(255) = 'angularjs'\n-- TagName: Tag name of the question.\nDECLARE @beginDate DATETIME = '2016-01-01'\nDECLARE @endDate DATETIME = '2020-12-31'\n\n\nSELECT (DATEDIFF(SECOND,{d '1970-01-01'}, c.CreationDate)) - (DATEDIFF(SECOND,{d '1970-01-01'}, p.CreationDate)) as timeP\nfrom posts p left join posts c on (p.id = c.ParentId)\njoin PostTags pt ON p.Id = pt.PostId\njoin Tags t ON t.Id = pt.TagId\nWHERE (p.PostTypeId = 1) AND (t.TagName = @tagName)\nAND (p.CreationDate BETWEEN @beginDate AND @endDate)",
        "CreationDate": "2020-11-25 19:04:10",
        "validated": false,
        "QueryBody_Original": "DECLARE  @tagName NVARCHAR(255) = 'angularjs'\n-- TagName: Tag name of the question.\nDECLARE @beginDate DATETIME = '2016-01-01'\nDECLARE @endDate DATETIME = '2020-12-31'\n\n\nSELECT (DATEDIFF(SECOND,{d '1970-01-01'}, c.CreationDate)) - (DATEDIFF(SECOND,{d '1970-01-01'}, p.CreationDate)) as timeP\nfrom posts p left join posts c on (p.id = c.ParentId)\njoin PostTags pt ON p.Id = pt.PostId\njoin Tags t ON t.Id = pt.TagId\nWHERE (p.PostTypeId = 1) AND (t.TagName = @tagName)\nAND (p.CreationDate BETWEEN @beginDate AND @endDate)"
    },
    {
        "QuerySetId": 1334192,
        "Title": "Get only time from post-answer by Android",
        "Description": null,
        "QueryBody": "DECLARE  @tagName NVARCHAR(255) = 'android'\n-- TagName: Tag name of the question.\nDECLARE @beginDate DATETIME = '2016-01-01'\nDECLARE @endDate DATETIME = '2020-12-31'\n\n\nSELECT (DATEDIFF(SECOND,{d '1970-01-01'}, c.CreationDate)) - (DATEDIFF(SECOND,{d '1970-01-01'}, p.CreationDate)) as timeP\nfrom posts p left join posts c on (p.id = c.ParentId)\njoin PostTags pt ON p.Id = pt.PostId\njoin Tags t ON t.Id = pt.TagId\nWHERE (p.PostTypeId = 1) AND (t.TagName = @tagName)\nAND (p.CreationDate BETWEEN @beginDate AND @endDate)",
        "CreationDate": "2020-11-20 05:11:57",
        "validated": false,
        "QueryBody_Original": "DECLARE  @tagName NVARCHAR(255) = 'android'\n-- TagName: Tag name of the question.\nDECLARE @beginDate DATETIME = '2016-01-01'\nDECLARE @endDate DATETIME = '2020-12-31'\n\n\nSELECT (DATEDIFF(SECOND,{d '1970-01-01'}, c.CreationDate)) - (DATEDIFF(SECOND,{d '1970-01-01'}, p.CreationDate)) as timeP\nfrom posts p left join posts c on (p.id = c.ParentId)\njoin PostTags pt ON p.Id = pt.PostId\njoin Tags t ON t.Id = pt.TagId\nWHERE (p.PostTypeId = 1) AND (t.TagName = @tagName)\nAND (p.CreationDate BETWEEN @beginDate AND @endDate)"
    },
    {
        "QuerySetId": 1334853,
        "Title": "Top answerers for a given tag over a given period",
        "Description": null,
        "QueryBody": "SELECT  TOP ##n##\n    Users.Id as [User Link],\n    sum(Answers.Score) as Score\nFROM Tags    \n    JOIN PostTags ON PostTags.TagId = Tags.Id\n    JOIN Posts ON Posts.Id = PostTags.PostId \n    JOIN Posts as Answers ON Answers.ParentId = Posts.Id\n    JOIN Users ON Users.Id = Answers.OwnerUserId\nWHERE    \n    Tags.TagName = '##tagName##'\n    and Posts.CreationDate >= convert(date,'##startDate##') --'2018-01-01'\n    and Posts.CreationDate <= convert(date,'##endDate##') --'2018-12-31'\nGROUP BY \n    Users.Id\nORDER BY \n    Score DESC",
        "CreationDate": "2020-11-21 09:00:55",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 1336454,
        "Title": "Average Time for certain tags until accepted answer - work in progress",
        "Description": null,
        "QueryBody": "DECLARE  @UserId int = ##UserId##;\n-- PostTypeId = 1 Question, 2 Answer\n\n-- SELECT p.Id, p.PostTypeId, p.ParentId, p.CreationDate, p.AcceptedAnswerId\nSELECT p.Id, p.Tags, p.Title,\n  DATEDIFF ( hour , p.CreationDate , p2.CreationDate )  \nFROM Posts p\n       INNER JOIN Posts p2 ON p.AcceptedAnswerId = p2.Id\nWHERE p.Id in (12999100) -- p.PostTypeId = 2 AND \n-- WHERE p.ParentId in (12999100) -- p.PostTypeId = 2 AND \n\n-- SELECT p.Id, p.PostTypeId, p.ParentId, p.CreationDate, p.AcceptedAnswerId\n-- FROM Posts p\n--       LEFT JOIN PostTags ON p.Id = PostTags.PostId\n--       LEFT JOIN Tags ON Tags.Id = PostTags.TagId\n--       LEFT JOIN Posts p2 ON p.AcceptedAnswerId = p2.Id\n-- WHERE p.Id in (12999100) -- p.PostTypeId = 2 AND \n-- WHERE p.ParentId in (12999100) -- p.PostTypeId = 2 AND",
        "CreationDate": "2020-11-25 01:57:40",
        "validated": false,
        "QueryBody_Original": "DECLARE  @UserId int = ##UserId##;\n-- PostTypeId = 1 Question, 2 Answer\n\n-- SELECT p.Id, p.PostTypeId, p.ParentId, p.CreationDate, p.AcceptedAnswerId\nSELECT p.Id, p.Tags, p.Title,\n  DATEDIFF ( hour , p.CreationDate , p2.CreationDate )  \nFROM Posts p\n       INNER JOIN Posts p2 ON p.AcceptedAnswerId = p2.Id\nWHERE p.Id in (12999100) -- p.PostTypeId = 2 AND \n-- WHERE p.ParentId in (12999100) -- p.PostTypeId = 2 AND \n\n-- SELECT p.Id, p.PostTypeId, p.ParentId, p.CreationDate, p.AcceptedAnswerId\n-- FROM Posts p\n--       LEFT JOIN PostTags ON p.Id = PostTags.PostId\n--       LEFT JOIN Tags ON Tags.Id = PostTags.TagId\n--       LEFT JOIN Posts p2 ON p.AcceptedAnswerId = p2.Id\n-- WHERE p.Id in (12999100) -- p.PostTypeId = 2 AND \n-- WHERE p.ParentId in (12999100) -- p.PostTypeId = 2 AND"
    },
    {
        "QuerySetId": 1336586,
        "Title": "Recent suggested edits by a specific user",
        "Description": null,
        "QueryBody": "SELECT  TOP(##num?100##)\nPostId AS [Post Link],\nurl = 'site:\/\/suggested-edits\/'+CAST(Id AS varchar),\nCreationDate,\nCASE\n  WHEN ApprovalDate IS NOT NULL THEN 'Approved'\n  WHEN RejectionDate IS NOT NULL THEN 'Rejected'\nEND,\nOwnerUserId AS [User Link],\nComment, ApprovalDate, RejectionDate\nFROM SuggestedEdits\nWHERE OwnerUserId=##UserId##\nORDER BY Id DESC",
        "CreationDate": "2020-11-25 15:40:51",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 1336773,
        "Title": "I think you can get ups answering these old posts (tag-filtered)",
        "Description": null,
        "QueryBody": "DECLARE  @now DATETIME = (\n  SELECT CreationDate FROM Posts WHERE Id = (SELECT MAX(Id) FROM Posts)\n);\n\nDECLARE @tagId INT = (\n  SELECT Id FROM Tags WHERE TagName = ##TagName:string##\n);\n\nSELECT\n  Posts.Id,\n  Posts.OwnerUserId,\n  Posts.ViewCount,\n  DATEDIFF(s, Posts.CreationDate, @now) AS AgeS\nFROM PostTags, Posts\nWHERE\n  PostTags.TagId = @tagId\n  AND\n  PostTags.PostId = Posts.Id\n  AND\n  Posts.OwnerUserId > 0\n  AND\n  Posts.AnswerCount = 0\n  AND\n  Posts.ClosedDate IS NULL\n  AND\n  Posts.OwnerUserId IN (\n    SELECT OwnerUserId\n    FROM Posts\n    WHERE\n      PostTypeId = 2\n      AND\n      CreationDate > DATEADD(d, -##AnswerDays:int?30##, @now)\n  )",
        "CreationDate": "2020-11-25 20:07:50",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 1336810,
        "Title": "Most viewed questions in tag",
        "Description": null,
        "QueryBody": "DECLARE  @Tag VARCHAR(25) = '##Tag##'\n\nSELECT TOP 1000\nQuestions.Id \nAS [Post Link],\nQuestions.Title,\nQuestions.AnswerCount, \nQuestions.ViewCount\n\nFROM Posts AS Questions\n    INNER JOIN PostTags \n    ON PostTags.PostId = Questions.Id\n    INNER JOIN Tags\n    ON Tags.Id = PostTags.TagId\n    \nWHERE Tags.TagName = @Tag\n\nORDER BY ViewCount DESC",
        "CreationDate": "2020-11-25 21:57:54",
        "validated": false,
        "QueryBody_Original": "DECLARE  @Tag VARCHAR(25) = '##Tag##'\n\nSELECT TOP 1000\nQuestions.Id \nAS [Post Link],\nQuestions.Title,\nQuestions.AnswerCount, \nQuestions.ViewCount\n\nFROM Posts AS Questions\n    INNER JOIN PostTags \n    ON PostTags.PostId = Questions.Id\n    INNER JOIN Tags\n    ON Tags.Id = PostTags.TagId\n    \nWHERE Tags.TagName = @Tag\n\nORDER BY ViewCount DESC"
    },
    {
        "QuerySetId": 1336829,
        "Title": "List of Chinese SQL collations",
        "Description": null,
        "QueryBody": "DECLARE  @text AS NVARCHAR(200) = ##Text:string?SQL##;\n\nSELECT * FROM sys.fn_helpcollations()\nWHERE description LIKE '%' + @text + '%'\n  COLLATE SQL_Latin1_General_CP1_CI_AI",
        "CreationDate": "2020-11-28 23:32:49",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 1337211,
        "Title": "Search comment by keyword AND Q\/A author",
        "Description": null,
        "QueryBody": "DECLARE  @keyword AS NVARCHAR(60) = ##keyword:string? ##;\nDECLARE @pauthor AS INT = ##PostAuthor:int?-1##\n\nSELECT\n  p.Id AS [Post Link],\n  'site:\/\/q\/' + Convert(VarChar(10), p.Id) + '#comment' +  Convert(VarChar(10), p.Id) + '_' + Convert(VarChar(10), c.Id) + '|' + c.Text AS [Comment],\n  c.Score AS [Score],\n  p.CreationDate AS [Post date],\n  c.CreationDate AS [Comment date]\nFROM Posts p\nINNER JOIN Comments c\nON c.PostId = p.Id\nWHERE\n  p.OwnerUserId = @pauthor\n  AND c.Text LIKE N'%' + @keyword + '%' COLLATE Latin1_General_100_CI_AI_SC_UTF8\nORDER BY c.CreationDate",
        "CreationDate": "2020-11-26 16:42:42",
        "validated": false,
        "QueryBody_Original": "DECLARE  @keyword AS NVARCHAR(60) = ##keyword:string? ##;\nDECLARE @pauthor AS INT = ##PostAuthor:int?-1##\n\nSELECT\n  p.Id AS [Post Link],\n  'site:\/\/q\/' + Convert(VarChar(10), p.Id) + '#comment' +  Convert(VarChar(10), p.Id) + '_' + Convert(VarChar(10), c.Id) + '|' + c.Text AS [Comment],\n  c.Score AS [Score],\n  p.CreationDate AS [Post date],\n  c.CreationDate AS [Comment date]\nFROM Posts p\nINNER JOIN Comments c\nON c.PostId = p.Id\nWHERE\n  p.OwnerUserId = @pauthor\n  AND c.Text LIKE N'%' + @keyword + '%' COLLATE Latin1_General_100_CI_AI_SC_UTF8\nORDER BY c.CreationDate"
    },
    {
        "QuerySetId": 1337361,
        "Title": "Get time from post-answer by AngularJS by Year",
        "Description": null,
        "QueryBody": "DECLARE  @tagName NVARCHAR(255) = 'angularjs'\n-- TagName: Tag name of the question.\nDECLARE @beginDate DATETIME = '2016-01-01'\nDECLARE @endDate DATETIME = '2020-12-31'\nDECLARE @yearSelected INT = '2016'\n\n\n  SELECT (DATEDIFF(SECOND,{d '1970-01-01'}, c.CreationDate)) - (DATEDIFF(SECOND,{d '1970-01-01'}, p.CreationDate)) as timeP, YEAR(c.CreationDate) as 'yearp'\n  from posts p left join posts c on (p.id = c.ParentId)\n  join PostTags pt ON p.Id = pt.PostId\n  join Tags t ON t.Id = pt.TagId\n  WHERE (p.PostTypeId = 1) AND (YEAR(c.CreationDate) = @yearSelected)  AND (t.TagName = @tagName)\n  AND (p.CreationDate BETWEEN @beginDate AND @endDate)",
        "CreationDate": "2020-11-27 04:08:36",
        "validated": false,
        "QueryBody_Original": "DECLARE  @tagName NVARCHAR(255) = 'angularjs'\n-- TagName: Tag name of the question.\nDECLARE @beginDate DATETIME = '2016-01-01'\nDECLARE @endDate DATETIME = '2020-12-31'\nDECLARE @yearSelected INT = '2016'\n\n\n  SELECT (DATEDIFF(SECOND,{d '1970-01-01'}, c.CreationDate)) - (DATEDIFF(SECOND,{d '1970-01-01'}, p.CreationDate)) as timeP, YEAR(c.CreationDate) as 'yearp'\n  from posts p left join posts c on (p.id = c.ParentId)\n  join PostTags pt ON p.Id = pt.PostId\n  join Tags t ON t.Id = pt.TagId\n  WHERE (p.PostTypeId = 1) AND (YEAR(c.CreationDate) = @yearSelected)  AND (t.TagName = @tagName)\n  AND (p.CreationDate BETWEEN @beginDate AND @endDate)"
    },
    {
        "QuerySetId": 1340728,
        "Title": "Time to first answer (by specific user)",
        "Description": null,
        "QueryBody": "SELECT  DATEDIFF(MINUTE, q.CreationDate, a.CreationDate),\n  COUNT(*) AS 'Number of questions answered within x minutes'\n  FROM Posts AS q\n  CROSS APPLY (\n    SELECT MIN(CreationDate) AS CreationDate\n      FROM Posts\n      WHERE ParentId = q.Id\n        AND OwnerUserId = ##UserId:int##\n        -- merged questions can have older answers\n        AND CreationDate >= q.CreationDate\n  ) a\n  WHERE DATEDIFF(MINUTE, q.CreationDate, a.CreationDate) < 7200\n  GROUP BY DATEDIFF(MINUTE, q.CreationDate, a.CreationDate)\n  ORDER BY DATEDIFF(MINUTE, q.CreationDate, a.CreationDate)",
        "CreationDate": "2020-12-05 00:02:43",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 1340767,
        "Title": " Time to first answer (self-answers excluded) in specified period",
        "Description": null,
        "QueryBody": "SELECT  DATEDIFF(MINUTE, q.CreationDate, a.CreationDate),\n  COUNT(*) AS 'Number of questions answered within x minutes'\n  FROM Posts AS q\n  CROSS APPLY (\n    SELECT TOP 1 OwnerUserId, CreationDate\n      FROM Posts\n      WHERE ParentId = q.Id\n        -- merged questions can have older answers\n        AND CreationDate >= q.CreationDate\n      ORDER BY CreationDate\n  ) a\n  WHERE q.CreationDate BETWEEN ##fromDate:string## AND ##tillDate:string##\n    AND DATEDIFF(MINUTE, q.CreationDate, a.CreationDate) < 60\n    AND q.OwnerUserId != a.OwnerUserId\n  GROUP BY DATEDIFF(MINUTE, q.CreationDate, a.CreationDate)\n  ORDER BY DATEDIFF(MINUTE, q.CreationDate, a.CreationDate)",
        "CreationDate": "2020-12-05 00:40:26",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 1340770,
        "Title": " Time to first answer in specified period",
        "Description": null,
        "QueryBody": "WITH  p AS (\nSELECT q.Id, q.CreationDate AS qDate, MIN(a.CreationDate) AS aDate\n  FROM Posts AS q\n  INNER JOIN Posts AS a\n    ON a.ParentId = q.Id\n  WHERE q.CreationDate BETWEEN ##fromDate:string## AND ##tillDate:string##\n    AND a.CreationDate >= q.CreationDate\n  GROUP BY q.Id, q.CreationDate\n)\nSELECT DATEDIFF(MINUTE, qDate, aDate),\n  COUNT(*) AS 'Number of questions answered WITHin x minutes'\n  FROM p\n  WHERE DATEDIFF(MINUTE, qDate, aDate) < 60\n  GROUP BY DATEDIFF(MINUTE, qDate, aDate)\n  ORDER BY DATEDIFF(MINUTE, qDate, aDate)",
        "CreationDate": "2020-12-05 00:55:25",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 1340886,
        "Title": "How to see the detailed list of received badge of other community users?",
        "Description": "https:\/\/meta.stackoverflow.com\/questions\/403388\r\n\r\nearned and not earned",
        "QueryBody": "WITH  RegularBadges as\n(\n  select distinct \n         name\n       , class\n  from badges\n  where tagbased <> 1\n)\n\nselect distinct \n       rb.name\n     , case when b.name is not null then 'Yes' else null end [Earned]\nfrom RegularBadges rb\nleft outer join  badges b on rb.name = b.name\nand b.userid = ##userid?10563627##\norder by [earned] desc",
        "CreationDate": "2020-12-05 18:19:09",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 1340978,
        "Title": "Comments on the given post",
        "Description": null,
        "QueryBody": "SELECT \n  c.Id AS [Comment Link],\n  c.Score,\n  c.UserId AS [User Link], c.UserDisplayName,\n  c.Text\nFROM Comments c\nWHERE c.PostId=##id?4447##\nORDER BY c.Id",
        "CreationDate": "2020-12-05 23:20:30",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 1341888,
        "Title": "Top 100 comments score by user id",
        "Description": null,
        "QueryBody": "DECLARE  @UserId int = ##UserId##\n\nSELECT TOP 100 *\nFROM \n    Comments\nWHERE \n    UserId = @UserId\nORDER BY \n    Score DESC",
        "CreationDate": "2020-12-07 13:54:41",
        "validated": false,
        "QueryBody_Original": "DECLARE  @UserId int = ##UserId##\n\nSELECT TOP 100 *\nFROM \n    Comments\nWHERE \n    UserId = @UserId\nORDER BY \n    Score DESC"
    },
    {
        "QuerySetId": 1342097,
        "Title": "How to check if a specific user answered my question?",
        "Description": null,
        "QueryBody": "DECLARE  @OpId INT = ##OriginalPostUserId##;\nDECLARE @AnswererId INT = ##AnswererUserId##;\n\nSELECT Q.Id AS [Post Link], CONCAT('site:\/\/a\/', A.Id, '|', A.Id) AS [Answer Link]\nFROM Posts Q\nJOIN Posts A ON A.ParentId = Q.Id AND A.PostTypeId = 2 AND A.OwnerUserId = @AnswererId\nWHERE Q.PostTypeId = 1 AND Q.OwnerUserId = @OpId;",
        "CreationDate": "2020-12-07 18:34:57",
        "validated": false,
        "QueryBody_Original": "DECLARE  @OpId INT = ##OriginalPostUserId##;\nDECLARE @AnswererId INT = ##AnswererUserId##;\n\nSELECT Q.Id AS [Post Link], CONCAT('site:\/\/a\/', A.Id, '|', A.Id) AS [Answer Link]\nFROM Posts Q\nJOIN Posts A ON A.ParentId = Q.Id AND A.PostTypeId = 2 AND A.OwnerUserId = @AnswererId\nWHERE Q.PostTypeId = 1 AND Q.OwnerUserId = @OpId;"
    },
    {
        "QuerySetId": 1343372,
        "Title": "Users with highest accept rate of their answers",
        "Description": "Does not count self-answers.\r\nShows users with at least @MinAnswers answers.\r\n",
        "QueryBody": "WITH  highest accept rate of their answers\n-- Does not count self-answers. \n\nSELECT TOP 100\n  u.Id AS [User Link],\n  count(*) AS NumAnswers,\n  sum(case when q.AcceptedAnswerId = a.Id then 1 else 0 end) AS NumAccepted,\n  (sum(case when q.AcceptedAnswerId = a.Id then 1 else 0 end)*100.0\/count(*)) AS AcceptedPercent\nFROM Posts a\nINNER JOIN Users u ON u.Id = a.OwnerUserId\nINNER JOIN Posts q ON a.ParentId = q.Id\nWHERE \n  (q.OwnerUserId <> u.Id OR q.OwnerUserId IS NULL)   --no self answers\n  AND (LOWER(q.Tags) like LOWER('%privacy%') OR LOWER(q.Title) like LOWER('%privacy%'))\nGROUP BY u.Id\nORDER BY  NumAnswers DESC\n-- AcceptedPercent DESC,",
        "CreationDate": "2020-12-08 15:08:03",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 1344641,
        "Title": "Tags ordered by average question score (including CW)",
        "Description": null,
        "QueryBody": "SELECT  TOP(##num?100##)\n  RANK() OVER(ORDER BY AVG(CAST(q.SCORE AS decimal)) DESC) AS Rank,\n  t.Tagname,\n  AVG(CAST(q.Score AS decimal)) AS [Average Score],\n  COUNT(q.Id) AS Count,\n  SUM(q.Score) AS [Total Score]\nFROM Posts q INNER JOIN PostTags pt ON q.Id=pt.PostId\n  INNER JOIN Tags t ON t.id = pt.TagId\nGROUP BY t.Tagname\nHAVING (COUNT(q.Id)>=##min?10##)\nORDER BY AVG(CAST(q.SCORE AS decimal)) DESC",
        "CreationDate": "2020-12-10 04:11:12",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 1344643,
        "Title": "Tags ordered by average answer score (non CW)",
        "Description": null,
        "QueryBody": "SELECT  TOP(##num?100##)\n  RANK() OVER(ORDER BY AVG(CAST(a.SCORE AS decimal)) DESC) AS Rank,\n  t.Tagname,\n  AVG(CAST(a.Score AS decimal)) AS [Average Score],\n  COUNT(a.Id) AS Count,\n  SUM(a.Score) AS [Total Score]\nFROM Posts q INNER JOIN Posts a ON q.Id=a.ParentId\n  INNER JOIN PostTags pt ON q.Id=pt.PostId\n  INNER JOIN Tags t ON t.id = pt.TagId\nWHERE (a.CommunityOwnedDate IS NULL)\n---only non-CW\nGROUP BY t.Tagname\nHAVING (COUNT(a.Id)>=##min?10##)\nORDER BY AVG(CAST(a.SCORE AS decimal)) DESC",
        "CreationDate": "2020-12-10 04:14:27",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 1344644,
        "Title": "Tags ordered by average answer score (including CW)",
        "Description": null,
        "QueryBody": "SELECT  TOP(##num?100##)\n  RANK() OVER(ORDER BY AVG(CAST(a.SCORE AS decimal)) DESC) AS Rank,\n  t.Tagname,\n  AVG(CAST(a.Score AS decimal)) AS [Average Score],\n  COUNT(a.Id) AS Count,\n  SUM(a.Score) AS [Total Score]\nFROM Posts q INNER JOIN Posts a ON q.Id=a.ParentId\n  INNER JOIN PostTags pt ON q.Id=pt.PostId\n  INNER JOIN Tags t ON t.id = pt.TagId\nGROUP BY t.Tagname\nHAVING (COUNT(a.Id)>=##min?10##)\nORDER BY AVG(CAST(a.SCORE AS decimal)) DESC",
        "CreationDate": "2020-12-10 04:15:18",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 1344785,
        "Title": "Duplicate target of the given post",
        "Description": null,
        "QueryBody": "SELECT \n  RelatedPostId AS [Post Link]\nFROM PostLinks\nWHERE (PostId=##id?1331325##) AND (LinkTypeId=3)\n---LinkTypeId type of link\n---1 = Linked (PostId contains a link to RelatedPostId)\n---3 = Duplicate (PostId is a duplicate of RelatedPostId)",
        "CreationDate": "2020-12-10 13:45:57",
        "validated": false,
        "QueryBody_Original": null
    },
    {
        "QuerySetId": 1346153,
        "Title": "List of deleted posts which are duplicates",
        "Description": null,
        "QueryBody": "SELECT  TOP(##num?1000##)\n  p.Id AS [Post link]\nFROM Postlinks pl INNER JOIN Posts p ON pl.PostId=p.Id\nWHERE (pl.LinkTypeId=3) AND (p.PostTypeId=1) AND\n  (p.DeletionDate IS NOT NULL)\nORDER BY p.Id DESC",
        "CreationDate": "2020-12-10 21:15:58",
        "validated": false,
        "QueryBody_Original": null
    }
]